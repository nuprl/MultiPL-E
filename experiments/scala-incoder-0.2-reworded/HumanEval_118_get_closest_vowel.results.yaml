language: scala
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextPrev\
    \ = vowelsSetIteratorNextPrev.prev\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.prev\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdwzsm2w2.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNextPrev.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdwzsm2w2.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpdwzsm2w2.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpdwzsm2w2.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdwzsm2w2.scala:34:60 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextPrev\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNext.prev\n\e[31m\e[31m   |\e[0m  \
    \                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    No"
  stdout: ''
  timestamp: 1659799076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsSet = vowels.toSet\n        val vowelsSet2 = vowels.toSet.reverse\n  \
    \      val vowelsSet3 = vowelsSet.diff(vowelsSet2)\n        val vowelsSet4 = vowelsSet.diff(vowelsSet3)\n\
    \        val vowelsSet5 = vowelsSet.diff(vowelsSet4)\n        val vowelsSet6 =\
    \ vowelsSet.diff(vowelsSet5)\n        val vowelsSet7 = vowelsSet.diff(vowelsSet6)\n\
    \        val vowelsSet8 = vowelsSet.diff(vowelsSet7)\n        val vowelsSet9 =\
    \ vowelsSet.diff(vowelsSet8)\n        val vowelsSet10 = vowelsSet.diff(vowelsSet9)\n\
    \        val vowelsSet11 = vowelsSet.diff(vowelsSet10)\n        val vowelsSet12\
    \ = vowelsSet.diff(vowelsSet11)\n        val vowelsSet13 = vowelsSet.diff(vowelsSet12)\n\
    \        val vowelsSet14 = vowelsSet.diff(vowelsSet13)\n        val vowelsSet15\
    \ = vowelsSet.diff(vowelsSet14)\n        val vowelsSet16 = vowelsSet.diff(vowelsSet15)\n\
    \        val vowelsSet17 = vowelsSet.diff(vowelsSet16)\n        val vowelsSet18\
    \ = vowelsSet.diff(vowelsSet17)\n        val vowelsSet19 = vowelsSet.diff(vowelsSet18)\n\
    \        val vowelsSet20 = vowelsSet.diff(vowelsSet19)\n        val vowelsSet21\
    \ = vowelsSet.diff(vowelsSet20)\n        val vowelsSet22 = vowelsSet.diff(vowelsSet21)\n\
    \        val vowelsSet23 = vowelsSet.diff(vowelsSet22)\n        val vowelsSet24\
    \ = vowelsSet.diff(vowelsSet23)\n        val vowelsSet25 = vowelsSet.diff(vowelsSet24)\n\
    \        val vowelsSet26 = vowelsSet.diff(vowelsSet25)\n        val vowelsSet27\
    \ = vowelsSet.diff(vowelsSet26)\n        val vowelsSet28 = vowelsSet.diff(vowelsSet27)\n\
    \        val vowelsSet29 = vowelsSet.diff(vowelsSet28)\n        val vowelsSet30\
    \ = vowelsSet.diff(vowelsSet29)\n        val vowelsSet31 = vowelsSet.diff(vowelsSet30)\n\
    \        val vowelsSet\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoomfvkga.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoomfvkga.scala:21:38\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSet2\e[0m = vowels.toSet.reverse\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not a\
    \ member of Set[String] - did you mean Set[String].reversed?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpoomfvkga.scala:52:5 ---------------------\e[0m\e\
    [0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorSize = vowelsSetIterator.size\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size\n        val\
    \ vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size\n   \
    \     val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9wgakw96.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9wgakw96.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextSize\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp9wgakw96.scala:26:62 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9wgakw96.scala:38:64 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                  "
  stdout: ''
  timestamp: 1659799077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorSize = vowelsSetIterator.size\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size\n        val\
    \ vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size\n   \
    \     val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9wgakw96.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9wgakw96.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextSize\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp9wgakw96.scala:26:62 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9wgakw96.scala:38:64 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                  "
  stdout: ''
  timestamp: 1659799077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsCount = word.count(vowels)\n        val vowelsCountReverse = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse2 = word.count(vowels.reverse)\n        val vowelsCountReverse3\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse4 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse5 = word.count(vowels.reverse)\n        val vowelsCountReverse6\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse7 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse8 = word.count(vowels.reverse)\n        val vowelsCountReverse9\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse10 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse11 = word.count(vowels.reverse)\n        val vowelsCountReverse12\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse13 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse14 = word.count(vowels.reverse)\n        val vowelsCountReverse15\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse16 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse17 = word.count(vowels.reverse)\n        val vowelsCountReverse18\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse19 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse20 = word.count(vowels.reverse)\n        val vowelsCountReverse21\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse22 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse23 = word.count(vowels.reverse)\n        val vowelsCountReverse24\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse25 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse26 = word.count(vowels.reverse)\n        val vowelsCountReverse27\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse28 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse29 = word.count(vowels.reverse)\n        val vowelsCountReverse30\
    \ = word.count(vowels.reverse)\n        val vowelsCountReverse31 = word.count(vowels.reverse)\n\
    \        val vowelsCountReverse32 = word.count(vowels.reverse)\n        val vowelsCountReverse33\
    \ = word.count(\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8o7hk2v5.scala:53:46 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountReverse33\e[0m\
    \ = word.count(\n\e[31m\e[31m   |\e[0m                                       \
    \       ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8o7hk2v5.scala:20:37 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.count(vowels)\n\e\
    [31m\e[31m   |\e[0m                                     ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m               Found:    (vowels : scala.collection.mutable.Set[String])\n\
    \e[31m   |\e[0m               Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8o7hk2v5.scala:21:51 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountReverse\e[0m\
    \ = word.count(vowels.reverse)\n\e[31m\e[31m   |\e[0m                        \
    \                    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not\
    \ a member of scala.collection.mutable.Set[String] - did you mean vowels.reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8o7hk2v5.scala:22:52 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountReverse2\e[0m\
    \ = word.count(vowels.reverse)\n\e[31m\e[31m   |\e[0m                        \
    \                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not\
    \ a member of scala.collection.mutable.Set[String] - did you mean vowels.reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8o7hk2v5.scala:23:52 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountReverse3\e[0m\
    \ = word.count(vowels.reverse)\n\e[31m\e[31m   |\e[0m                        \
    \                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not\
    \ a member of scala.collection.mutable.Set[String] - did you mean vowe"
  stdout: ''
  timestamp: 1659799080
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.indexOf(\"a\")\n        val consonantsIndex =\
    \ word.lastIndexOf(\"z\")\n        val vowelsIndex2 = word.indexOf(\"e\")\n  \
    \      val consonantsIndex2 = word.lastIndexOf(\"z\")\n        val vowelsIndex3\
    \ = word.indexOf(\"i\")\n        val consonantsIndex3 = word.lastIndexOf(\"z\"\
    )\n        val vowelsIndex4 = word.indexOf(\"o\")\n        val consonantsIndex4\
    \ = word.lastIndexOf(\"z\")\n        val vowelsIndex5 = word.indexOf(\"u\")\n\
    \        val consonantsIndex5 = word.lastIndexOf(\"z\")\n        val vowelsIndex6\
    \ = word.indexOf(\"a\")\n        val consonantsIndex6 = word.lastIndexOf(\"z\"\
    )\n        val vowelsIndex7 = word.indexOf(\"e\")\n        val consonantsIndex7\
    \ = word.lastIndexOf(\"z\")\n        val vowelsIndex8 = word.indexOf(\"i\")\n\
    \        val consonantsIndex8 = word.lastIndexOf(\"z\")\n        val vowelsIndex9\
    \ = word.indexOf(\"o\")\n        val consonantsIndex9 = word.lastIndexOf(\"z\"\
    )\n        val vowelsIndex10 = word.indexOf(\"u\")\n        val consonantsIndex10\
    \ = word.lastIndexOf(\"z\")\n        val vowelsIndex11 = word.indexOf(\"a\")\n\
    \        val consonantsIndex11 = word.lastIndexOf(\"z\")\n        val vowelsIndex12\
    \ = word.indexOf(\"e\")\n        val consonantsIndex12 = word.lastIndexOf(\"z\"\
    )\n        val vowelsIndex13 = word.indexOf(\"i\")\n        val consonantsIndex13\
    \ = word.lastIndexOf(\"z\")\n        val vowelsIndex14 = word.indexOf(\"o\")\n\
    \        val consonantsIndex14 = word.lastIndexOf(\"z\")\n        val vowelsIndex15\
    \ = word.indexOf(\"u\")\n        val consonantsIndex15 = word.lastIndexOf(\"z\"\
    )\n        val vowelsIndex16 = word.indexOf(\"a\")\n        val consonantsIndex16\
    \ = word.lastIndexOf(\"z\")\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp4z0krgm3.scala:55:11 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4z0krgm3.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        var vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        var vowelsCount = vowels.toList.length;\n\
    \        var vowelsCount2 = vowels.toSet.size;\n        var vowelsCount3 = vowels.toSeq.size;\n\
    \        var vowelsCount4 = vowels.toSet.filter(_ => true).size;\n        var\
    \ vowelsCount5 = vowels.toSeq.filter(_ => true).size;\n        var vowelsCount6\
    \ = vowels.toSeq.filter(_ => true).filter(_ => true).size;\n        var vowelsCount7\
    \ = vowels.toSeq.filter(_ => true).filter(_ => true).filter(_ => true).size;\n\
    \        var vowelsCount8 = vowels.toSeq.filter(_ => true).filter(_ => true).filter(_\
    \ => true).filter(_ => true).size;\n        var vowelsCount9 = vowels.toSeq.filter(_\
    \ => true).filter(_ => true).filter(_ => true).filter(_ => true).filter(_ => true).size;\n\
    \        var vowelsCount10 = vowels.toSeq.filter(_ => true).filter(_ => true).filter(_\
    \ => true).filter(_ => true).filter(_ => true).filter(_ => true).filter(_ => true).size;\n\
    \        var vowelsCount11 = vowels.toSeq.filter(_ => true).filter(_ => true).filter(_\
    \ => true).filter(_ => true).filter(_ => true).filter(_ => true).filter(_ => true).filter(_\
    \ => true).size;\n        var vowelsCount12 = vowels.toSeq.filter(_ => true).filter(_\
    \ => true).filter(_ => true).filter(_ => true).filter(_ => true).filter(_ => true).filter(_\
    \ => true).filter(_ => true).filter(_ => true).size;\n        var vowelsCount13\
    \ = vowels.toSeq.filter(_ => true).filter(_ => true).filter(_ => true).filter(_\
    \ => true).filter(_ => true).filter(_ => true).filter(_ => true).filter(_ => true).filter(_\
    \ => true).filter(_ => true).size;\n        var vowelsCount14 = vowels.toSeq.filter(_\
    \ => true).filter(_ => true).filter(_ => true).filter(_ => true).filter(_ => true).filter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphs5o_1sr.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toSet.size \n        val consonantsCount = consonants.toSet.size \n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        if (vowelsIndex < 0 || consonantsIndex\
    \ < 0 || vowelsIndex > consonantsIndex || vowelsIndex == 0 || consonantsIndex\
    \ == 0 || vowelsIndex == consonantsIndex) {\n            return \"\"\n       \
    \ }\n        val vowelsCount = vowels.toSet.size \n        val consonantsCount\
    \ = consonants.toSet.size \n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    if (vowelsIndex < 0 || consonantsIndex < 0 || vowelsIndex > consonantsIndex\
    \ || vowelsIndex == 0 || consonantsIndex == 0 || vowelsIndex == consonantsIndex)\
    \ {\n            return \"\"\n        }\n        val vowelsCount = vowels.toSet.size\
    \ \n        val consonantsCount = consonants.toSet.size \n        val vowelsIndex\
    \ = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n\
    \        if (vowelsIndex < 0 || consonantsIndex < 0 || vowelsIndex > consonantsIndex\
    \ || vowelsIndex == 0 || consonantsIndex == 0 || vowelsIndex == consonantsIndex)\
    \ {\n            return \"\"\n        }\n        val vowelsCount = vowels.toSet.size\
    \ \n        val consonantsCount = consonants.toSet.size \n        val vowelsIndex\
    \ = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n\
    \        if (vowelsIndex < 0 || consonantsIndex < 0 || vowelsIndex > consonantsIndex\
    \ || vowelsIndex == 0 || consonantsIndex == 0 || vowelsIndex == consonantsIndex)\
    \ {\n            return \"\"\n        }\n        val vowelsCount = vowels.toSet.size\
    \ \n        val consonantsCount = consonants.toSet.size \n        val vowelsIndex\
    \ = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_rvlk1c7.scala:52:29 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = \n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_rvlk1c7.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\
    \ \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_rvlk1c7.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toSet.size\
    \ \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_rvlk1c7.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_rvlk1c7.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet3 = vowelsSet.diff(vowelsSet2)\n        val vowelsSet4 =\
    \ vowelsSet.diff(vowelsSet3)\n        val vowelsSet5 = vowelsSet.diff(vowelsSet4)\n\
    \        val vowelsSet6 = vowelsSet.diff(vowelsSet5)\n        val vowelsSet7 =\
    \ vowelsSet.diff(vowelsSet6)\n        val vowelsSet8 = vowelsSet.diff(vowelsSet7)\n\
    \        val vowelsSet9 = vowelsSet.diff(vowelsSet8)\n        val vowelsSet10\
    \ = vowelsSet.diff(vowelsSet9)\n        val vowelsSet11 = vowelsSet.diff(vowelsSet10)\n\
    \        val vowelsSet12 = vowelsSet.diff(vowelsSet11)\n        val vowelsSet13\
    \ = vowelsSet.diff(vowelsSet12)\n        val vowelsSet14 = vowelsSet.diff(vowelsSet13)\n\
    \        val vowelsSet15 = vowelsSet.diff(vowelsSet14)\n        val vowelsSet16\
    \ = vowelsSet.diff(vowelsSet15)\n        val vowelsSet17 = vowelsSet.diff(vowelsSet16)\n\
    \        val vowelsSet18 = vowelsSet.diff(vowelsSet17)\n        val vowelsSet19\
    \ = vowelsSet.diff(vowelsSet18)\n        val vowelsSet20 = vowelsSet.diff(vowelsSet19)\n\
    \        val vowelsSet21 = vowelsSet.diff(vowelsSet20)\n        val vowelsSet22\
    \ = vowelsSet.diff(vowelsSet21)\n        val vowelsSet23 = vowelsSet.diff(vowelsSet22)\n\
    \        val vowelsSet24 = vowelsSet.diff(vowelsSet23)\n        val vowelsSet25\
    \ = vowelsSet.diff(vowelsSet24)\n        val vowelsSet26 = vowelsSet.diff(vowelsSet25)\n\
    \        val vowelsSet27 = vowelsSet.diff(vowelsSet26)\n        val vowelsSet28\
    \ = vowelsSet.diff(vowelsSet27)\n        val vowelsSet29 = vowelsSet.diff(vowelsSet28)\n\
    \        val vowelsSet30 = vowelsSet.diff(vowelsSet29)\n        val vowelsSet31\
    \ = vowelsSet.diff(vowelsSet30)\n        val vowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpah2y8hsq.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpah2y8hsq.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.filter(_ != vowelsSet.last)\n        val vowelsSet3\
    \ = vowelsSet.filter(_ != vowelsSet.last)\n        val vowelsSet4 = vowelsSet.filter(_\
    \ != vowelsSet.last)\n        val vowelsSet5 = vowelsSet.filter(_ != vowelsSet.last)\n\
    \        val vowelsSet6 = vowelsSet.filter(_ != vowelsSet.last)\n        val vowelsSet7\
    \ = vowelsSet.filter(_ != vowelsSet.last)\n        val vowelsSet8 = vowelsSet.filter(_\
    \ != vowelsSet.last)\n        val vowelsSet9 = vowelsSet.filter(_ != vowelsSet.last)\n\
    \        val vowelsSet10 = vowelsSet.filter(_ != vowelsSet.last)\n        val\
    \ vowelsSet11 = vowelsSet.filter(_ != vowelsSet.last)\n        val vowelsSet12\
    \ = vowelsSet.filter(_ != vowelsSet.last)\n        val vowelsSet13 = vowelsSet.filter(_\
    \ != vowelsSet.last)\n        val vowelsSet14 = vowelsSet.filter(_ != vowelsSet.last)\n\
    \        val vowelsSet15 = vowelsSet.filter(_ != vowelsSet.last)\n        val\
    \ vowelsSet16 = vowelsSet.filter(_ != vowelsSet.last)\n        val vowelsSet17\
    \ = vowelsSet.filter(_ != vowelsSet.last)\n        val vowelsSet18 = vowelsSet.filter(_\
    \ != vowelsSet.last)\n        val vowelsSet19 = vowelsSet.filter(_ != vowelsSet.last)\n\
    \        val vowelsSet20 = vowelsSet.filter(_ != vowelsSet.last)\n        val\
    \ vowelsSet21 = vowelsSet.filter(_ != vowelsSet.last)\n        val vowelsSet22\
    \ = vowelsSet.filter(_ != vowelsSet.last)\n        val vowelsSet23 = vowelsSet.filter(_\
    \ != vowelsSet.last)\n        val vowelsSet24 = vowelsSet.filter(_ != vowelsSet.last)\n\
    \        val vowelsSet25 = vowelsSet.filter(_ != vowelsSet.last)\n        val\
    \ vowelsSet26 = vowelsSet.filter(_ != vowelsSet.last)\n        val vowelsSet27\
    \ = vowelsSet.filter(_ != vowelsSet.last)\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmplrzewphv.scala:47:11 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplrzewphv.scala:48:5 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.count(vowels)\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.count(consonants)\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonant\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpenk9hixm.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpenk9hixm.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpenk9hixm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpenk9hixm.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpenk9hixm.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659799079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsBefore\
    \ = vowels.toList.dropRight(word.length)\n        val vowelsAfter = vowels.toList.dropLeft(word.length)\n\
    \        val consonantsBefore = consonants.toList.dropRight(word.length)\n   \
    \     val consonantsAfter = consonants.toList.dropLeft(word.length)\n        val\
    \ vowelsBetween = vowelsBefore.zip(vowelsAfter).filter(_._1.toString.contains(word.toString.substring(word.length\
    \ - _._2.length, _._2.length)))\n        val consonantsBetween = consonantsBefore.zip(consonantsAfter).filter(_._1.toString.contains(word.toString.substring(word.length\
    \ - _._2.length, _._2.length)))\n        val vowelsMeet = vowelsBefore.zip(vowelsAfter).filter(_._1.toString.contains(word.toString.substring(word.length\
    \ - _._2.length, _._2.length)))\n        val consonantsMeet = consonantsBefore.zip(consonantsAfter).filter(_._1.toString.contains(word.toString.substring(word.length\
    \ - _._2.length, _._2.length)))\n        val vowelsMeetConsonants = vowelsBefore.zip(vowelsAfter).filter(_._1.toString.contains(word.toString.substring(word.length\
    \ - _._2.length, _._2.length)))\n        val consonantsMeetConsonants = consonantsBefore.zip(consonantsAfter).filter(_._1.toString.contains(word.toString.substring(word.length\
    \ - _._2.length, _._2.length)))\n        val vowelsMeetConsonantsVowels = vowelsBefore.zip(vowelsAfter).filter(_._1.toString.contains(word.toString.substring(word.length\
    \ - _._2.length, _._2.length)))\n        val consonantsMeetConsonantsVowels =\
    \ consonantsBefore.zip(consonantsAfter).filter(_._1.toString.contains(word.toString.substring(word.length\
    \ - _._2.length, _._2.length)))\n        val vowelsMeetConsonantsVowelsConsonants\
    \ = vowelsBefore.zip(vowelsAfter).filter(_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppf68sh7v.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppf68sh7v.scala:22:40\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsAfter\e[0m = vowels.toList.dropLeft(word.length)\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                      value dropLeft is not a member of List[String]\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmppf68sh7v.scala:24:48 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsAfter\e[0m = consonants.toList.dropLeft(word.length)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value dropLeft is not a member of\
    \ List[String]\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmppf68sh7v.scala:25:126\
    \ ----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsBetween\e[0m = vowelsBefore.zip(vowelsAfter).filter(_._1.toString.contains(word.toString.substring(word.length\
    \ - _._2.length, _._2.length)))\n\e[31m\e[31m   |\e[0m                       \
    \                                                                            \
    \                           ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => word.length - _$2._2.length.\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmppf68sh7v.scala:25:139 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsBetween\e[0m = vowelsBefore.zip(vowelsAfter).filter(_._1.toString.contains(word.toString.substring(word.length\
    \ - _._2.length, _._2.length)))\n\e[31m\e[31m   |\e[0m                       \
    \                                                                            \
    \                                        ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I "
  stdout: ''
  timestamp: 1659799077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).count\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).distinct\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).distinct\n   \
    \     val vowelsCount = word.filter(x => vowels.contains(x)).distinct\n      \
    \  val vowelsCount = word.filter(x => vowels.contains(x)).distinct\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).distinct\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).distinct\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).distinct\n        val vowelsCount = word.filter(x =>\
    \ vowels.contains(x)).distinct\n        val vowelsCount = word.filter(x => vowels.contains(x)).distinct\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).distinct\n   \
    \     val vowelsCount = word.filter(x => vowels.contains(x)).distinct\n      \
    \  val vowelsCount = word.filter(x => vowels.contains(x)).distinct\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).distinct\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).distinct\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).distinct\n        val vowelsCount = word.filter(x =>\
    \ vowels.contains(x)).distinct\n        val vowelsCount = word.filter(x => vowels.contains(x)).distinct\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).distinct\n   \
    \     val vowelsCount = word.filter(x => vowels.contains(x)).distinct\n      \
    \  val vowelsCount = word.filter(x => vowels.contains(x)).distinct\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).distinct\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).distinct\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).distinct\n        val vowelsCount = word.filter(x =>\
    \ vowels.contains(x)).distinct\n        val vowelsCount = word.filter(x => vowels.contains(x)).distinct\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).distinct\n   \
    \     val vowelsCount = word.filter(x => vowels.contains(x)).distinct\n      \
    \  val vowelsCount = word.filter(x => \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8kzrpi2z.scala:50:42 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \  ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8kzrpi2z.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8kzrpi2z.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8kzrpi2z.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).distinct\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8kzrpi2z.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m"
  stdout: ''
  timestamp: 1659799077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsBefore\
    \ = vowels.toList.dropRight(word.length)\n        val vowelsAfter = vowels.toList.dropLeft(word.length)\n\
    \        val consonantsBefore = consonants.toList.dropRight(word.length)\n   \
    \     val consonantsAfter = consonants.toList.dropLeft(word.length)\n        val\
    \ vowelsBetween = vowelsBefore.zip(vowelsAfter).filter(_._1.isDefined && _._2.isDefined)\n\
    \        val consonantsBetween = consonantsBefore.zip(consonantsAfter).filter(_._1.isDefined\
    \ && _._2.isDefined)\n        val vowelsBetweenAndConsonantsBetween = vowelsBetween.zip(consonantsBetween).filter(_._1.isDefined\
    \ && _._2.isDefined)\n        val vowelsBetweenAndConsonantsBetweenAndVowelsBeforeAndVowelsAfter\
    \ = vowelsBetweenAndConsonantsBetween.zip(vowelsBefore, vowelsAfter).filter(_._1.isDefined\
    \ && _._2.isDefined)\n        val vowelsBetweenAndConsonantsBetweenAndVowelsBeforeAndVowelsAfterAndConsonantsBeforeAndConsonantsAfter\
    \ = vowelsBetweenAndConsonantsBetweenAndVowelsBeforeAndVowelsAfter.zip(consonantsBefore,\
    \ consonantsAfter).filter(_._1.isDefined && _._2.isDefined)\n        val vowelsBetweenAndConsonantsBetweenAndVowelsBeforeAndVowelsAfterAndConsonantsBeforeAndConsonantsAfterAndVowelsBeforeAndVowelsAfter\
    \ = vowelsBetweenAndConsonantsBetweenAndVowelsBeforeAndVowelsAfterAndConsonantsBeforeAndConsonantsAfter.zip(vowelsBefore,\
    \ vowelsAfter).filter(_._1.isDefined && _._2.isDefined)\n        val vowelsBetweenAndConsonantsBetweenAndVowelsBeforeAndVowelsAfterAndConsonantsBeforeAndConsonantsAfterAndVowelsBefore\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5e3cxqyh.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5e3cxqyh.scala:22:40\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsAfter\e[0m = vowels.toList.dropLeft(word.length)\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                      value dropLeft is not a member of List[String]\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp5e3cxqyh.scala:24:48 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsAfter\e[0m = consonants.toList.dropLeft(word.length)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value dropLeft is not a member of\
    \ List[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5e3cxqyh.scala:25:67\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsBetween\e[0m = vowelsBefore.zip(vowelsAfter).filter(_._1.isDefined &&\
    \ _._2.isDefined)\n\e[31m\e[31m   |\e[0m                                     \
    \                            ^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                value _1 is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp5e3cxqyh.scala:26:79 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsBetween\e[0m = consonantsBefore.zip(consonantsAfter).filter(_._1.isDefined\
    \ && _._2.isDefined)\n\e[31m\e[31m   |\e[0m                                  \
    \                                           ^^^^\e[0m\n\e[31m   |\e[0m       \
    \                               value _1 is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp5e3cxqyh.scala:27:97 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsBetweenAndConsonantsBetween\e\
    [0m = vowelsBetween.zip(consonantsBetween).filter(_._1.isDefined && _._2.isDefined)\n\
    \e[31m\e[31m   |\e[0m                               "
  stdout: ''
  timestamp: 1659799079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorSize = vowelsSetIterator.size\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size\n        val\
    \ vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size\n   \
    \     val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9mzr23wb.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp9mzr23wb.scala:26:62 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9mzr23wb.scala:38:64 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9mzr23wb.scala:41:72\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextSize\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m    Not found: vowelsSetItera"
  stdout: ''
  timestamp: 1659799077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsSet = vowels.toSet\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorNext = vowelsSetIterator.next\n        val vowelsSetIteratorPrev\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n        val\
    \ vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextPrev = vowelsSetIteratorNextNextNext.prev\n   \
    \     val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextPrev = vowelsSetIteratorNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1b69220o.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp1b69220o.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp1b69220o.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp1b69220o.scala:37:64 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1b69220o.scala:38:72\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.prev\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsBefore\
    \ = vowels.toList.tail\n        val vowelsAfter = vowels.toList\n        val consonantsBefore\
    \ = consonants.toList.tail\n        val consonantsAfter = consonants.toList\n\
    \        val vowelsBeforeAndAfter = vowelsBefore ++ vowelsAfter\n        val consonantsBeforeAndAfter\
    \ = consonantsBefore ++ consonantsAfter\n        val vowelsBeforeAndAfterAndConsonantsBeforeAndAfter\
    \ = vowelsBeforeAndAfter ++ consonantsBeforeAndAfter\n        val vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\
    \ = vowelsBeforeAndAfterAndConsonantsBeforeAndAfter ++ consonantsBeforeAndAfterAndConsonantsBeforeAndAfter\n\
    \        val vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\
    \ = vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\
    \ ++ consonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\n\
    \        val vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\
    \ = vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\
    \ ++ consonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\n\
    \        val vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\
    \ = vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\
    \ ++ consonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\n\
    \        val vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndCon\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfw5vmx2_.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfw5vmx2_.scala:28:140\
    \ -----------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\e\
    [0m = vowelsBeforeAndAfterAndConsonantsBeforeAndAfter ++ consonantsBeforeAndAfterAndConsonantsBeforeAndAfter\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m          Not found: consonantsBeforeAndAfterAndConsonantsBeforeAndAfter\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfw5vmx2_.scala:29:194\
    \ -----------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\e\
    [0m = vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\
    \ ++ consonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: consonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfw5vmx2_.scala:30:248\
    \ -----------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBefore"
  stdout: ''
  timestamp: 1659799075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(consonants.contains).size\n\
    \        val vowelsCount = vowelsCount.toDouble\n        val consonantsCount =\
    \ consonantsCount.toDouble\n        val vowelsCountInWord = vowelsCount / consonantsCount\n\
    \        val consonantsCountInWord = consonantsCount / vowelsCount\n        val\
    \ vowelsCountInWordInWord = vowelsCountInWord * consonantsCountInWord\n      \
    \  val consonantsCountInWordInWord = consonantsCountInWord * vowelsCountInWord\n\
    \        val vowelsCountInWordInWordInWord = vowelsCountInWordInWord * consonantsCountInWordInWord\n\
    \        val consonantsCountInWordInWordInWord = consonantsCountInWordInWord *\
    \ vowelsCountInWordInWord\n        val vowelsCountInWordInWordInWordInWord = vowelsCountInWordInWordInWord\
    \ * consonantsCountInWordInWordInWord\n        val consonantsCountInWordInWordInWordInWord\
    \ = consonantsCountInWordInWordInWord * vowelsCountInWordInWordInWordInWord\n\
    \        val vowelsCountInWordInWordInWordInWordInWord = vowelsCountInWordInWordInWordInWord\
    \ * consonantsCountInWordInWordInWordInWord\n        val consonantsCountInWordInWordInWordInWordInWord\
    \ = consonantsCountInWordInWordInWordInWord * vowelsCountInWordInWordInWordInWordInWord\n\
    \        val vowelsCountInWordInWordInWordInWordInWordInWord = vowelsCountInWordInWordInWordInWordInWord\
    \ * consonantsCountInWordInWordInWordInWordInWord\n        val consonantsCountInWordInWordInWordInWordInWordInWord\
    \ = consonantsCountInWordInWordInWordInWordInWord * vowelsCountInWordInWordInWordInWordInWordInWord\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpe4y66z1s.scala:37:11 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpe4y66z1s.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toDouble\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe4y66z1s.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonantsCount.toDouble\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpe4y66z1s.scala:20:38 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).size\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m                                      Found:    (elem : Char)\n\e[31m   |\e\
    [0m                                      Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe4y66z1s.scala:22:42 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(consonants.contains).size\n\
    \e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m\
    \   |\e[0m                                          Found:    (elem : Char)\n\e\
    [31m "
  stdout: ''
  timestamp: 1659799077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev = vowels\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk93sflwn.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpk93sflwn.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpk93sflwn.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpk93sflwn.scala:37:64 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk93sflwn.scala:39:68\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList\n  \
    \      val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowel\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphtbqimjt.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtbqimjt.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtbqimjt.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtbqimjt.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtbqimjt.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defi"
  stdout: ''
  timestamp: 1659799076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_g2ns020.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_g2ns020.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_g2ns020.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_g2ns020.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1659799076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val consonants = Set(\"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        val vowelsCount\
    \ = vowels.toList.size\n        val consonantsCount = consonants.toList.size\n\
    \        val vowelsIndex = word.lastIndexOfAny(vowels)\n        val consonantsIndex\
    \ = word.lastIndexOfAny(consonants)\n        val vowelsLength = vowelsIndex -\
    \ vowelsIndex % vowelsCount\n        val consonantsLength = consonantsIndex -\
    \ consonantsIndex % consonantsCount\n        val vowelsIndex = word.lastIndexOfAny(vowels,\
    \ vowelsLength)\n        val consonantsIndex = word.lastIndexOfAny(consonants,\
    \ consonantsLength)\n        val vowelsLength = vowelsIndex - vowelsIndex % vowelsCount\n\
    \        val consonantsLength = consonantsIndex - consonantsIndex % consonantsCount\n\
    \        val vowelsIndex = word.lastIndexOfAny(vowels, vowelsLength)\n       \
    \ val consonantsIndex = word.lastIndexOfAny(consonants, consonantsLength)\n  \
    \      val vowelsLength = vowelsIndex - vowelsIndex % vowelsCount\n        val\
    \ consonantsLength = consonantsIndex - consonantsIndex % consonantsCount\n   \
    \     val vowelsIndex = word.lastIndexOfAny(vowels, vowelsLength)\n        val\
    \ consonantsIndex = word.lastIndexOfAny(consonants, consonantsLength)\n      \
    \  val vowelsLength = vowelsIndex - vowelsIndex % vowelsCount\n        val consonantsLength\
    \ = consonantsIndex - consonantsIndex % consonantsCount\n        val vowelsIndex\
    \ = word.lastIndexOfAny(vowels, vowelsLength)\n        val consonantsIndex = word.lastIndexOfAny(consonants,\
    \ consonantsLength)\n        val vowelsLength = vowelsIndex - vowelsIndex % vowelsCount\n\
    \        val consonantsLength = consonantsIndex - consonantsIndex % consonantsCount\n\
    \        val vowelsIndex = word.lastIndexOfAny(vowels, vowelsLength)\n       \
    \ val consonantsIndex = word.lastIndexOfAny(consonants, consonantsLength)\n  \
    \      val vowelsLength = vowelsIndex - vowelsIndex % vowelsCount\n        val\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpx463r94u.scala:46:11 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpx463r94u.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexOfAny(vowels,\
    \ vowelsLength)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx463r94u.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexOfAny(consonants,\
    \ consonantsLength)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx463r94u.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsLength\e[0m = vowelsIndex\
    \ - vowelsIndex % vowelsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsLength is already defined as \e[33mvalue\e[0m \e[35mvowelsLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx463r94u.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mconsonantsLength\e[0m = consonantsIndex\
    \ - consonantsIndex % consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val consonants = Set(\"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        val vowelsSet\
    \ = vowels.toSet;\n        val consonantsSet = consonants.toSet;\n        val\
    \ vowelsSetSize = vowelsSet.size;\n        val consonantsSetSize = consonantsSet.size;\n\
    \        val vowelsSetIterator = vowelsSet.iterator;\n        val consonantsSetIterator\
    \ = consonantsSet.iterator;\n        val vowelsSetIteratorSize = vowelsSetIterator.size;\n\
    \        val consonantsSetIteratorSize = consonantsSetIterator.size;\n       \
    \ val vowelsSetIteratorNext = vowelsSetIterator.next;\n        val consonantsSetIteratorNext\
    \ = consonantsSetIterator.next;\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size;\n\
    \        val consonantsSetIteratorNextSize = consonantsSetIteratorNext.size;\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next;\n       \
    \ val consonantsSetIteratorNextNext = consonantsSetIteratorNext.next;\n      \
    \  val vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size;\n     \
    \   val consonantsSetIteratorNextNextSize = consonantsSetIteratorNextNext.size;\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next;\n\
    \        val consonantsSetIteratorNextNextNext = consonantsSetIteratorNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size;\n\
    \        val consonantsSetIteratorNextNextNextSize = consonantsSetIteratorNextNextNext.size;\n\
    \        val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next;\n\
    \        val consonantsSetIteratorNextNextNextNext = consonantsSetIteratorNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size;\n\
    \        val consonantsSetIteratorNextNextNextNextSize = consonantsSetIteratorNextNextNextNext.size;\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next;\n\
    \        val consonantsSetIterator\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp21o174a5.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp21o174a5.scala:33:62\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next;\n\e[31m\e[31m\
    \   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp21o174a5.scala:34:70 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSetIteratorNextNext\e\
    [0m = consonantsSetIteratorNext.next;\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue next is not a member of String - did you mean consonantsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp21o174a5.scala:47:5 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsSet = vowels.toSet;\n\
    \        val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"y\"));\n        val vowelsSet3 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"\
    o\", \"u\", \"y\"));\n        val vowelsSet4 = vowelsSet.diff(Set(\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\"));\n        val vowelsSet5 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n        val vowelsSet6 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n        val vowelsSet7 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n        val vowelsSet8 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n        val vowelsSet9 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n        val vowelsSet10 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n        val vowelsSet11 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n        val vowelsSet12 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n        val vowelsSet13 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n        val vowelsSet14 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n        val vowelsSet15 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n        val vowelsSet16 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n        val vowelsSet17 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n        val vowelsSet18 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n        val vowelsSet19 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n        val vowelsSet20 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n        val vowelsSet21 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\"));\n        val vowelsSet22 = vowelsSet.diff(Set(\"\
    a\", \"\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsm795wj0.scala:41:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet22\e[0m = vowelsSet.diff(Set(\e\
    [31m\"a\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                                    \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \          unclosed string literal\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpsm795wj0.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799075
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsAndConsonants\
    \ = vowels ++ consonants\n        val vowelsAndConsonantsList = vowelsAndConsonants.toList\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy_9liuep.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy_9liuep.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsAndConsonantsListLength\e[0m = vowelsAndConsonantsListLength - \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy_9liuep.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListLength\e\
    [0m = vowelsAndConsonantsListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsAndConsonantsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy_9liuep.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListLength\e\
    [0m = vowelsAndConsonantsListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsAndConsonantsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy_9liuep.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListLength\e\
    [0m = vowelsAndConsonantsLi"
  stdout: ''
  timestamp: 1659799088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(x => consonants.contains(x)).length\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsIndex\
    \ = word.lastIndexWhere(x => vowels.contains(x))\n        val consonantsIndex\
    \ = word.lastIndexWhere(x => consonants.contains(x))\n        val vowelsIndex\
    \ = vowelsIndex + vowelsCount\n        val consonantsIndex = consonantsIndex +\
    \ consonantsCount\n        val vowelsIndex = vowelsIndex - consonantsIndex\n \
    \       val vowel = word.substring(vowelsIndex, vowelsIndex + vowelsCount)\n \
    \       vowel\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd1d1y_mm.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd1d1y_mm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex + vowelsCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd1d1y_mm.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = consonantsIndex\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpd1d1y_mm.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex\
    \ - consonantsIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpd1d1y_mm.scala:20:59 --------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36"
  stdout: ''
  timestamp: 1659799090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val \n \
    \   }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7f1k_gpd.scala:58:11 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp7f1k_gpd.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7f1k_gpd.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7f1k_gpd.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7f1k_gpd.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e["
  stdout: ''
  timestamp: 1659799090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(c => consonants.contains(c)).size\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsIndex\
    \ = word.lastIndexWhere(c => vowels.contains(c))\n        val consonantsIndex\
    \ = word.lastIndexWhere(c => consonants.contains(c))\n        val vowelsIndex\
    \ = vowelsIndex + vowelsCount\n        val consonantsIndex = consonantsIndex +\
    \ consonantsCount\n        val vowelsIndex = vowelsIndex - vowelsCount\n     \
    \   val consonantsIndex = consonantsIndex - consonantsCount\n        val vowelsIndex\
    \ = vowelsIndex % vowels.size\n        val consonantsIndex = consonantsIndex %\
    \ consonants.size\n        val vowel = vowels(vowelsIndex)\n        val consonant\
    \ = consonants(consonantsIndex)\n        vowel + consonant\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt_f0vqqt.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt_f0vqqt.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex + vowelsCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt_f0vqqt.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = consonantsIndex\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpt_f0vqqt.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex\
    \ - vowelsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt_f0vqqt.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = consonantsIndex\
    \ - co"
  stdout: ''
  timestamp: 1659799090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsSet = vowels.toSet;\n\
    \        val vowelsSetIterator = vowelsSet.iterator;\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next;\n        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next;\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_02syzi0.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_02syzi0.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp_02syzi0.scala:23:62 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next;\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_02syzi0.scala:31:72 ---------------------------"
  stdout: ''
  timestamp: 1659799089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        var vowel = \"\"\n        var\
    \ vowelIndex = 0\n        var consonantIndex = 0\n        var consonants = \"\"\
    \n        var consonantCount = 0\n        var consonantCountMax = word.length\n\
    \        while (vowelIndex < vowels.length) {\n            vowel = vowels(vowelIndex)\n\
    \            consonants = word.substring(consonantIndex, consonantIndex + consonantCount)\n\
    \            consonantCount = consonants.split(\"\").length\n            if (consonantCount\
    \ > consonantCountMax) {\n                consonantCountMax = consonantCount\n\
    \            }\n            consonantIndex += consonantCount\n            vowelIndex\
    \ += 1\n        }\n        if (vowelIndex == vowels.length) {\n            return\
    \ \"\"\n        }\n        return vowel\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpauerb7rj.scala:26:35 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mwhile\e[0m (vowelIndex < vowels.length)\
    \ {\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m    value length is not a member of scala.collection.mutable.Set[String]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpauerb7rj.scala:27:27 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            vowel = vowels(vowelIndex)\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Found:    (vowelIndex : Int)\n\e[31m   |\e[0m            \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpauerb7rj.scala:36:33 ------------------------\e[0m\e[0m\n\e[31m36 |\e\
    [0m        \e[33mif\e[0m (vowelIndex == vowels.length) {\n\e[31m\e[31m   |\e[0m\
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value length\
    \ is not a member of scala.collection.mutable.Set[String]\n3 errors found\n"
  stdout: ''
  timestamp: 1659799090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(c => vowels.contains(c)).length\n\
    \        val vowelsCount2 = word.filter(c => vowels.contains(c)).count\n     \
    \   val vowelsCount3 = word.filter(c => vowels.contains(c)).foldLeft(0)(_ + _)\n\
    \        val vowelsCount4 = word.filter(c => vowels.contains(c)).foldRight(0)(_\
    \ + _)\n        val vowelsCount5 = word.filter(c => vowels.contains(c)).foldRight(0)(_\
    \ + _)\n        val vowelsCount6 = word.filter(c => vowels.contains(c)).foldRight(0)(_\
    \ + _)\n        val vowelsCount7 = word.filter(c => vowels.contains(c)).foldRight(0)(_\
    \ + _)\n        val vowelsCount8 = word.filter(c => vowels.contains(c)).foldRight(0)(_\
    \ + _)\n        val vowelsCount9 = word.filter(c => vowels.contains(c)).foldRight(0)(_\
    \ + _)\n        val vowelsCount10 = word.filter(c => vowels.contains(c)).foldRight(0)(_\
    \ + _)\n        val vowelsCount11 = word.filter(c => vowels.contains(c)).foldRight(0)(_\
    \ + _)\n        val vowelsCount12 = word.filter(c => vowels.contains(c)).foldRight(0)(_\
    \ + _)\n        val vowelsCount13 = word.filter(c => vowels.contains(c)).foldRight(0)(_\
    \ + _)\n        val vowelsCount14 = word.filter(c => vowels.contains(c)).foldRight(0)(_\
    \ + _)\n        val vowelsCount15 = word.filter(c => vowels.contains(c)).foldRight(0)(_\
    \ + _)\n        val vowelsCount16 = word.filter(c => vowels.contains(c)).foldRight(0)(_\
    \ + _)\n        val vowelsCount17 = word.filter(c => vowels.contains(c)).foldRight(0)(_\
    \ + _)\n        val vowelsCount18 = word.filter(c => vowels.contains(c)).foldRight(0)(_\
    \ + _)\n        val vowelsCount19 = word.filter(c => vowels.contains(c)).foldRight(0)(_\
    \ + _)\n        val vowelsCount20 = word.filter(c => vowels.contains(c)).foldRight(0)(_\
    \ + _)\n        val vowelsCount21 = word.filter(c => vowels.contains(c)).foldRight(0)(_\
    \ + _)\n        val vowelsCount22 = word.filter(c => vowels.contains(c\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp80kup445.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp80kup445.scala:20:59 --------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mc\e[0m => vowels.contains(c)).length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \  Found:    (c : Char)\n\e[31m   |\e[0m                                     \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp80kup445.scala:21:60 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsCount2\e[0m = word.filter(\e[36mc\e\
    [0m => vowels.contains(c)).count\n\e[31m\e[31m   |\e[0m                      \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                                     Found:    (c : Char)\n\e[31m   |\e[0m  \
    \                                                  Required: String\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp80kup445.scala:22:60 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount3\e[0m = word.filter(\e\
    [36mc\e[0m => vowels.contains(c)).foldLeft(\e[31m0\e[0m)(_ + _)\n\e[31m\e[31m\
    \   |\e[0m                                                            ^\e[0m\n\
    \e[31m   |\e[0m                                                    Found:    (c\
    \ : Char)\n\e[31m   |\e[0m                                                   \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp80kup445.scala:23:60\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount4\e\
    [0m = word.filter(\e[36mc\e[0m => vowels"
  stdout: ''
  timestamp: 1659799092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        var vowels = Array(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsCount = vowels.length\n  \
    \      var vowelsIndex = 0\n        var vowelsIndex2 = vowelsIndex + 1\n     \
    \   var vowelsIndex3 = vowelsIndex + 2\n        var vowelsIndex4 = vowelsIndex\
    \ + 3\n        var vowelsIndex5 = vowelsIndex + 4\n        var vowelsIndex6 =\
    \ vowelsIndex + 5\n        var vowelsIndex7 = vowelsIndex + 6\n        var vowelsIndex8\
    \ = vowelsIndex + 7\n        var vowelsIndex9 = vowelsIndex + 8\n        var vowelsIndex10\
    \ = vowelsIndex + 9\n        var vowelsIndex11 = vowelsIndex + 10\n        var\
    \ vowelsIndex12 = vowelsIndex + 11\n        var vowelsIndex13 = vowelsIndex +\
    \ 12\n        var vowelsIndex14 = vowelsIndex + 13\n        var vowelsIndex15\
    \ = vowelsIndex + 14\n        var vowelsIndex16 = vowelsIndex + 15\n        var\
    \ vowelsIndex17 = vowelsIndex + 16\n        var vowelsIndex18 = vowelsIndex +\
    \ 17\n        var vowelsIndex19 = vowelsIndex + 18\n        var vowelsIndex20\
    \ = vowelsIndex + 19\n        var vowelsIndex21 = vowelsIndex + 20\n        var\
    \ vowelsIndex22 = vowelsIndex + 21\n        var vowelsIndex23 = vowelsIndex +\
    \ 22\n        var vowelsIndex24 = vowelsIndex + 23\n        var vowelsIndex25\
    \ = vowelsIndex + 24\n        var vowelsIndex26 = vowelsIndex + 25\n        var\
    \ vowelsIndex27 = vowelsIndex + 26\n        var vowelsIndex28 = vowelsIndex +\
    \ 27\n        var vowelsIndex29 = vowelsIndex + 28\n        var vowelsIndex30\
    \ = vowelsIndex + 29\n        var vowelsIndex31 = vowelsIndex + 30\n        var\
    \ vowelsIndex32 = vowelsIndex + 31\n        var vowelsIndex33 = vowelsIndex +\
    \ 32\n        var vowelsIndex34 = vowelsIndex + 33\n        var vowelsIndex35\
    \ = vowelsIndex + 34\n        var vowelsIndex36 = vowelsIndex + 35\n        var\
    \ vowelsIndex37 = vowelsIndex + 36\n        var vowelsIndex38 = vowelsIndex +\
    \ 37\n        var vowelsIndex39 = vowelsIndex + 38\n        var vowelsIndex40\
    \ = vowelsIndex + 39\n        var vowelsIndex41 = vowelsIndex + 40\n        var\
    \ vowelsIndex42 = vowelsIndex + 41\n        var vowelsIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt4e0b52v.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpt4e0b52v.scala:64:5 ---------------------\e[0m\e[0m\n\e[31m64 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount2 = word.filter(vowels.contains).length\n        val vowelsCount3\
    \ = word.filter(vowels.contains).length\n        val vowelsCount4 = word.filter(vowels.contains).length\n\
    \        val vowelsCount5 = word.filter(vowels.contains).length\n        val vowelsCount6\
    \ = word.filter(vowels.contains).length\n        val vowelsCount7 = word.filter(vowels.contains).length\n\
    \        val vowelsCount8 = word.filter(vowels.contains).length\n        val vowelsCount9\
    \ = word.filter(vowels.contains).length\n        val vowelsCount10 = word.filter(vowels.contains).length\n\
    \        val vowelsCount11 = word.filter(vowels.contains).length\n        val\
    \ vowelsCount12 = word.filter(vowels.contains).length\n        val vowelsCount13\
    \ = word.filter(vowels.contains).length\n        val vowelsCount14 = word.filter(vowels.contains).length\n\
    \        val vowelsCount15 = word.filter(vowels.contains).length\n        val\
    \ vowelsCount16 = word.filter(vowels.contains).length\n        val vowelsCount17\
    \ = word.filter(vowels.contains).length\n        val vowelsCount18 = word.filter(vowels.contains).length\n\
    \        val vowelsCount19 = word.filter(vowels.contains).length\n        val\
    \ vowelsCount20 = word.filter(vowels.contains).length\n        val vowelsCount21\
    \ = word.filter(vowels.contains).length\n        val vowelsCount22 = word.filter(vowels.contains).length\n\
    \        val vowelsCount23 = word.filter(vowels.contains).length\n        val\
    \ vowelsCount24 = word.filter(vowels.contains).length\n        val vowelsCount25\
    \ = word.filter(vowels.contains).length\n        val vowelsCount26 = word.filter(vowels.contains).length\n\
    \        val vowelsCount27 = word.filter(vowels.contains).length\n        val\
    \ vowelsCount28 = word.filter(vowels.contains).length\n        val vowelsCount29\
    \ = word.filter(vowels.contains).length\n        val vowelsCount30 = word.filter(vowels.contains).length\n\
    \        val vowelsCount31 = word.filter(vowels.contains).length\n        val\
    \ vowelsCount32 = word.filter(vowels.contains).length\n        val vowelsCount33\
    \ = word.filter(vowels.contains).length\n        val vowelsCount34 = word.filter(vowels.contains).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf_ndg608.scala:20:38\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e\
    [0m = word.filter(vowels.contains).length\n\e[31m\e[31m   |\e[0m             \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \          Found:    (elem : Char)\n\e[31m   |\e[0m                          \
    \            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpf_ndg608.scala:21:39 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsCount2\e[0m = word.filter(vowels.contains).length\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       Found:    (elem : Char)\n\e[31m   |\e\
    [0m                                       Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf_ndg608.scala:22:39 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount3\e[0m = word.filter(vowels.contains).length\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       Found:    (elem : Char)\n\e[31m   |\e\
    [0m                                       Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf_ndg608.scala:23:39 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount4\e[0m = word.filter(vowels.contains).length\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                                       Found:    (elem : Char)\n\e[31m   |\e\
    [0m                                       Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf_ndg608.scala:24:39 --------------------\e\
    [0m\e["
  stdout: ''
  timestamp: 1659799093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowels.toSet.reverse\n        val vowelsSet3 = vowelsSet.intersect(vowelsSet2)\n\
    \        val vowelsSet4 = vowelsSet.intersect(vowelsSet3)\n        val vowelsSet5\
    \ = vowelsSet.intersect(vowelsSet4)\n        val vowelsSet6 = vowelsSet.intersect(vowelsSet5)\n\
    \        val vowelsSet7 = vowelsSet.intersect(vowelsSet6)\n        val vowelsSet8\
    \ = vowelsSet.intersect(vowelsSet7)\n        val vowelsSet9 = vowelsSet.intersect(vowelsSet8)\n\
    \        val vowelsSet10 = vowelsSet.intersect(vowelsSet9)\n        val vowelsSet11\
    \ = vowelsSet.intersect(vowelsSet10)\n        val vowelsSet12 = vowelsSet.intersect(vowelsSet11)\n\
    \        val vowelsSet13 = vowelsSet.intersect(vowelsSet12)\n        val vowelsSet14\
    \ = vowelsSet.intersect(vowelsSet13)\n        val vowelsSet15 = vowelsSet.intersect(vowelsSet14)\n\
    \        val vowelsSet16 = vowelsSet.intersect(vowelsSet15)\n        val vowelsSet17\
    \ = vowelsSet.intersect(vowelsSet16)\n        val vowelsSet18 = vowelsSet.intersect(vowelsSet17)\n\
    \        val vowelsSet19 = vowelsSet.intersect(vowelsSet18)\n        val vowelsSet20\
    \ = vowelsSet.intersect(vowelsSet19)\n        val vowelsSet21 = vowelsSet.intersect(vowelsSet20)\n\
    \        val vowelsSet22 = vowelsSet.intersect(vowelsSet21)\n        val vowelsSet23\
    \ = vowelsSet.intersect(vowelsSet22)\n        val vowelsSet24 = vowelsSet.intersect(vowelsSet23)\n\
    \        val vowelsSet25 = vowelsSet.intersect(vowelsSet24)\n        val vowelsSet26\
    \ = vowelsSet.intersect(vowelsSet25)\n        val vowelsSet27 = vowelsSet.intersect(vowelsSet26)\n\
    \        val vowelsSet28 = vowelsSet.intersect(vowelsSet27)\n        val vowelsSet29\
    \ = vowelsSet.inter\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfxtrhw26.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfxtrhw26.scala:48:36 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet29\e[0m = vowelsSet.inter\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue inter is not a member of Set[String] - did you mean vowelsSet.filter?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfxtrhw26.scala:49:5 ---------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet3\
    \ = vowelsSet.filter(_ != vowels.first)\n        val vowelsSet4 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet5 = vowelsSet.filter(_ != vowels.first)\n\
    \        val vowelsSet6 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet7\
    \ = vowelsSet.filter(_ != vowels.first)\n        val vowelsSet8 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet9 = vowelsSet.filter(_ != vowels.first)\n\
    \        val vowelsSet10 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet11\
    \ = vowelsSet.filter(_ != vowels.first)\n        val vowelsSet12 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet13 = vowelsSet.filter(_ != vowels.first)\n\
    \        val vowelsSet14 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet15\
    \ = vowelsSet.filter(_ != vowels.first)\n        val vowelsSet16 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet17 = vowelsSet.filter(_ != vowels.first)\n\
    \        val vowelsSet18 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet19\
    \ = vowelsSet.filter(_ != vowels.first)\n        val vowelsSet20 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet21 = vowelsSet.filter(_ != vowels.first)\n\
    \        val vowelsSet22 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet23\
    \ = vowelsSet.filter(_ != vowels.first)\n        val vowelsSet24 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet25 = vowelsSet.filter(_ != vowels.first)\n\
    \        val vowelsSet26 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet27\
    \ = vowelsSet.filter(_ != vowels.first)\n        val vowelsSet28 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet29 = vowelsSet.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpklzond5_.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpklzond5_.scala:22:54 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsSet3\e[0m = vowelsSet.filter(_ != vowels.first)\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue first is not a member of scala.collection.mutable.Set[String]\
    \ - did you mean vowels.find?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpklzond5_.scala:24:54\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSet5\e[0m = vowelsSet.filter(_ != vowels.first)\n\e[31m\e[31m   |\e\
    [0m                                               ^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue first is not a member of scala.collection.mutable.Set[String] -\
    \ did you mean vowels.find?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpklzond5_.scala:26:54\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSet7\e[0m = vowelsSet.filter(_ != vowels.first)\n\e[31m\e[31m   |\e\
    [0m                                               ^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue first is not a member of scala.collection.mutable.Set[String] -\
    \ did you mean vowels.find?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpklzond5_.scala:28:54\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSet9\e[0m = vowelsSet.filter(_ != vowels.first)\n\e[31m\e[31m   |\e\
    [0m                                               ^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue first is not a member of scala.collection.mutable.Set[String] -\
    \ did you mean vowels.find?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpklzond5_.scala:30:55\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSet11\e[0m = vowelsSet.filter(_ != vowels.first)\n\e[31m\e[31m   |\e\
    [0m                                                ^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue first is not a member of "
  stdout: ''
  timestamp: 1659799092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        var vowelIndex = 0;\n      \
    \  var vowelIndex2 = word.length-1;\n        var vowelIndex3 = word.length-2;\n\
    \        var vowelIndex4 = word.length-3;\n        var vowelIndex5 = word.length-4;\n\
    \        var vowelIndex6 = word.length-5;\n        var vowelIndex7 = word.length-6;\n\
    \        var vowelIndex8 = word.length-7;\n        var vowelIndex9 = word.length-8;\n\
    \        var vowelIndex10 = word.length-9;\n        var vowelIndex11 = word.length-10;\n\
    \        var vowelIndex12 = word.length-11;\n        var vowelIndex13 = word.length-12;\n\
    \        var vowelIndex14 = word.length-13;\n        var vowelIndex15 = word.length-14;\n\
    \        var vowelIndex16 = word.length-15;\n        var vowelIndex17 = word.length-16;\n\
    \        var vowelIndex18 = word.length-17;\n        var vowelIndex19 = word.length-18;\n\
    \        var vowelIndex20 = word.length-19;\n        var vowelIndex21 = word.length-20;\n\
    \        var vowelIndex22 = word.length-21;\n        var vowelIndex23 = word.length-22;\n\
    \        var vowelIndex24 = word.length-23;\n        var vowelIndex25 = word.length-24;\n\
    \        var vowelIndex26 = word.length-25;\n        var vowelIndex27 = word.length-26;\
    \ \n        var vowelIndex28 = word.length-27;\n        var vowelIndex29 = word.length-28;\n\
    \        var vowelIndex30 = word.length-29;\n        var vowelIndex31 = word.length-30;\n\
    \        var vowelIndex32 = word.length-31;\n        var vowelIndex33 = word.length-32;\n\
    \        var vowelIndex34 = word.length-33;\n        var vowelIndex35 = word.length-34;\n\
    \        var vowelIndex36 = word.length-35;\n        var vowelIndex37 = word.length-36;\n\
    \        var vowelIndex38 = word.length-37;\n        var vowelIndex39 = word.length-38;\n\
    \        var vowelIndex40 = word.length-39;\n        var vowelIndex41 = word.length-40;\n\
    \        var vowelIndex42 = word.length-41;\n        var vowelIndex43 = word.length-42;\n\
    \        var vowelIndex44 = word.length-43;\n        var vowelIndex45 = word.length-44;\n\
    \        var vowelIndex46 = word.length-45;\n        var vowelIndex47 = word.length-46;\
    \ \n        var vowelIndex48 = word.length-47; \n        var vowelIndex49 = word.length-48;\
    \ \n        var \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp5ay6ak1x.scala:69:11 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ay6ak1x.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val consonants\
    \ = word.filter(x => !vowels.contains(x))\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val consonantsCount = word.filter(x =>\
    \ !vowels.contains(x)).length\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val consonantsCount = word.filter(x => !vowels.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val consonantsCount = word.filter(x => !vowels.contains(x)).length\n     \
    \   val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ consonantsCount = word.filter(x => !vowels.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val consonantsCount\
    \ = word.filter(x => !vowels.contains(x)).length\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val consonantsCount = word.filter(x =>\
    \ !vowels.contains(x)).length\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val consonantsCount = word.filter(x => !vowels.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val consonantsCount = word.filter(x => !vowels.contains(x)).length\n     \
    \   val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ consonantsCount = word.filter(x => !vowels.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val consonantsCount\
    \ = word.filter(x => !vowels.contains(x)).length\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val consonantsCount = word.filter(x =>\
    \ !vowels.contains(x)).length\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val consonantsCount = word.filter(x => !vowels.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val consonantsCount = word.filter(x => !vowels.contains(x)).length\n     \
    \   val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ consonantsCount = word.filter(x => !vowels.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpztr85s42.scala:50:42 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \  ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpztr85s42.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpztr85s42.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpztr85s42.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mx\e[0m => !vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpztr85s42.scala:26:12 ---------------------------\e\
    ["
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = List(\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.count(vowel => word.contains(vowel))\n        val consonantsCount =\
    \ consonants.count(consonant => word.contains(consonant))\n        val vowelsCountInWord\
    \ = word.count(vowel => vowels.contains(vowel))\n        val consonantsCountInWord\
    \ = word.count(consonant => consonants.contains(consonant))\n        val vowelsCountInWordInWord\
    \ = word.count(vowel => vowels.contains(vowel) && word.contains(consonant))\n\
    \        val consonantsCountInWordInWord = word.count(consonant => consonants.contains(consonant)\
    \ && word.contains(vowel))\n        val vowelsCountInWordInWordInWord = word.count(vowel\
    \ => vowels.contains(vowel) && word.contains(consonant) && word.contains(vowel))\n\
    \        val consonantsCountInWordInWordInWord = word.count(consonant => consonants.contains(consonant)\
    \ && word.contains(vowel) && word.contains(consonant))\n        val vowelsCountInWordInWordInWordInWord\
    \ = word.count(vowel => vowels.contains(vowel) && word.contains(consonant) &&\
    \ word.contains(vowel) && word.contains(consonant))\n        val consonantsCountInWordInWordInWordInWord\
    \ = word.count(consonant => consonants.contains(consonant) && word.contains(vowel)\
    \ && word.contains(consonant) && word.contains(vowel))\n        val vowelsCountInWordInWordInWordInWordInWord\
    \ = word.count(vowel => vowels.contains(vowel) && word.contains(consonant) &&\
    \ word.contains(vowel) && word.contains(consonant) && word.contains(vowel))\n\
    \        val consonantsCountInWordInWordInWordInWordInWord = word.count(consonant\
    \ => consonants.contains(consonant) && word.contains(vowel) && word.contains(consonant)\
    \ && word.contains(vowel) && word.contains(consonant))\n        val vowelsCountInWordInWordInWordInWordInWordInWord\
    \ = word.count(vowel => vowels.contains(vowel) && word.contains(consonant) &&\
    \ word.contains(vowel) && word.contains(consonant) && word.contains(vowel) &&\
    \ word.contains(consonant))\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgveapkmh.scala:25:98 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountInWordInWord\e\
    [0m = word.count(\e[36mvowel\e[0m => vowels.contains(vowel) && word.contains(consonant))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                                 Not found: consonant\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgveapkmh.scala:26:114 -----------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCountInWordInWord\e\
    [0m = word.count(\e[36mconsonant\e[0m => consonants.contains(consonant) && word.contains(vowel))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                          ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                        Not found: vowel\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgveapkmh.scala:27:104\
    \ -----------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsCountInWordInWordInWord\e[0m = word.count(\e[36mvowel\e[0m => vowels.contains(vowel)\
    \ && word.contains(consonant) && word.contains(vowel))\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                                   Not found: consonant\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpgveapkmh.scala:28:120 -----------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCountInWordInWordInWord\e\
    [0m = word.count(\e[36mconsonant\e[0m => consonants.contains(consonant) && word.contains(vowel)\
    \ && word.contains(consonant))\n\e[31m\e[31m   |\e[0m                "
  stdout: ''
  timestamp: 1659799090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorSize = vowelsSetIterator.size\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size\n        val\
    \ vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size\n   \
    \     val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9wgakw96.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9wgakw96.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextSize\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp9wgakw96.scala:26:62 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9wgakw96.scala:38:64 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                  "
  stdout: ''
  timestamp: 1659799077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.zipWithIndex.filter(_._2 % vowelsCount == 0).map(_._1).last\n\
    \        val vowelsIndex = vowelsIndex.getOrElse(\"\")\n        val vowelsIndex\
    \ = vowelsIndex.substring(vowelsIndex.length - 1)\n        val vowelsIndex = vowelsIndex.substring(0,\
    \ vowelsIndex.length - 1)\n        val vowelsIndex = vowelsIndex.substring(vowelsIndex.length\
    \ - 1)\n        val vowelsIndex = vowelsIndex.substring(0, vowelsIndex.length\
    \ - 1)\n        val vowelsIndex = vowelsIndex.substring(vowelsIndex.length - 1)\n\
    \        val vowelsIndex = vowelsIndex.substring(0, vowelsIndex.length - 1)\n\
    \        val vowelsIndex = vowelsIndex.substring(vowelsIndex.length - 1)\n   \
    \     val vowelsIndex = vowelsIndex.substring(0, vowelsIndex.length - 1)\n   \
    \     val vowelsIndex = vowelsIndex.substring(vowelsIndex.length - 1)\n      \
    \  val vowelsIndex = vowelsIndex.substring(0, vowelsIndex.length - 1)\n      \
    \  val vowelsIndex = vowelsIndex.substring(vowelsIndex.length - 1)\n        val\
    \ vowelsIndex = vowelsIndex.substring(0, vowelsIndex.length - 1)\n        val\
    \ vowelsIndex = vowelsIndex.substring(vowelsIndex.length - 1)\n        val vowelsIndex\
    \ = vowelsIndex.substring(0, vowelsIndex.length - 1)\n        val vowelsIndex\
    \ = vowelsIndex.substring(vowelsIndex.length - 1)\n        val vowelsIndex = vowelsIndex.substring(0,\
    \ vowelsIndex.length - 1)\n        val vowelsIndex = vowelsIndex.substring(vowelsIndex.length\
    \ - 1)\n        val vowelsIndex = vowelsIndex.substring(0, vowelsIndex.length\
    \ - 1)\n        val vowelsIndex = vowelsIndex.substring(vowelsIndex.length - 1)\n\
    \        val vowelsIndex = vowelsIndex.substring(0, vowelsIndex.length - 1)\n\
    \        val vowelsIndex = vowelsIndex.substring(vowelsIndex.length - 1)\n   \
    \     val vowelsIndex = vowelsIndex.substring(0, vowelsIndex.length - 1)\n   \
    \     val vowelsIndex = vowelsIndex.substring(vowelsIndex.length - 1)\n      \
    \  val vowelsIndex = vowelsIndex.substring(0, vowelsIndex.length - 1)\n      \
    \  val vowelsIndex = vowelsIndex.substring(vowelsIndex.length - 1)\n        val\
    \ vowelsIndex = vowelsIndex.substring(0, vowelsIndex.length - 1)\n        val\
    \ vowelsIndex = vowelsIndex.substring(vowelsIndex.length - 1)\n        val vowelsIndex\
    \ = vowelsIndex.\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8bpbuzyl.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8bpbuzyl.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.getOrElse(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8bpbuzyl.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.substring(vowelsIndex.length\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8bpbuzyl.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.substring(\e\
    [31m0\e[0m, vowelsIndex.length - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8bpbuzyl.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.substring(vowelsIndex.length\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e["
  stdout: ''
  timestamp: 1659799090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsBefore\
    \ = vowels.toList.dropRight(word.length)\n        val vowelsAfter = vowels.toList.dropLeft(word.length)\n\
    \        val consonantsBefore = consonants.toList.dropRight(word.length)\n   \
    \     val consonantsAfter = consonants.toList.dropLeft(word.length)\n        val\
    \ vowelsBetween = vowelsBefore.zip(vowelsAfter).filter(_._1.equals(_._2))\n  \
    \      val consonantsBetween = consonantsBefore.zip(consonantsAfter).filter(_._1.equals(_._2))\n\
    \        val vowelsBetweenWithConsonants = vowelsBetween.zip(consonantsBetween).filter(_._1.equals(_._2))\n\
    \        val vowelsBetweenWithConsonantsWithVowels = vowelsBetweenWithConsonants.filter(_._1.equals(_._2))\n\
    \        val vowelsBetweenWithConsonantsWithVowelsWithConsonants = vowelsBetweenWithConsonantsWithVowels.filter(_._1.equals(_._2))\n\
    \        val vowelsBetweenWithConsonantsWithVowelsWithConsonantsWithVowels = vowelsBetweenWithConsonantsWithVowelsWithConsonants.filter(_._1.equals(_._2))\n\
    \        val vowelsBetweenWithConsonantsWithVowelsWithConsonantsWithVowelsWithConsonants\
    \ = vowelsBetweenWithConsonantsWithVowelsWithConsonantsWithVowels.filter(_._1.equals(_._2))\n\
    \        val vowelsBetweenWithConsonantsWithVowelsWithConsonantsWithVowelsWithConsonantsWithVowels\
    \ = vowelsBetweenWithConsonantsWithVowelsWithConsonantsWithVowelsWithConsonants.filter(_._1.equals(_._2))\n\
    \        val vowelsBetweenWithConsonantsWithVowelsWithConsonantsWithVowelsWithConsonantsWithVowelsWithConsonants\
    \ = vowelsBetweenWithConsonantsWithVowelsWithConsonantsWithVowelsWithConsonantsWithV\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpid944yjc.scala:22:40 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsAfter\e[0m = vowels.toList.dropLeft(word.length)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          value dropLeft is not a member of List[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpid944yjc.scala:24:48 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsAfter\e[0m = consonants.toList.dropLeft(word.length)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value dropLeft is not a member of\
    \ List[String]\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpid944yjc.scala:25:77\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e\
    [0m \e[36mvowelsBetween\e[0m = vowelsBefore.zip(vowelsAfter).filter(_._1.equals(_._2))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                     ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2\
    \ of expanded function:\n\e[31m   |\e[0m   _$2 => _$2._2.\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmpid944yjc.scala:26:89 -----------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsBetween\e[0m = consonantsBefore.zip(consonantsAfter).filter(_._1.equals(_._2))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                 ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$4 of expanded function:\n\e[31m   |\e[0m   _$4 => _$4._2.\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpid944yjc.scala:27:98 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsBetweenWithConsonants\e\
    [0m = vowelsBetween.zip(consonantsBetween).filter(_._1.equals(_._2))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                       "
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsBefore\
    \ = vowels.toList.dropRight(word.length)\n        val vowelsAfter = vowels.toList.dropLeft(word.length)\n\
    \        val consonantsBefore = consonants.toList.dropRight(word.length)\n   \
    \     val consonantsAfter = consonants.toList.dropLeft(word.length)\n        val\
    \ vowelsBetween = vowelsAfter.zip(vowelsBefore)\n        val consonantsBetween\
    \ = consonantsAfter.zip(consonantsBefore)\n        val vowelsBetween = vowelsAfter.zip(vowelsBefore)\n\
    \        val consonantsBetween = consonantsAfter.zip(consonantsBefore)\n     \
    \   val vowelsBetween = vowelsAfter.zip(vowelsBefore)\n        val consonantsBetween\
    \ = consonantsAfter.zip(consonantsBefore)\n        val vowelsBetween = vowelsAfter.zip(vowelsBefore)\n\
    \        val consonantsBetween = consonantsAfter.zip(consonantsBefore)\n     \
    \   val vowelsBetween = vowelsAfter.zip(vowelsBefore)\n        val consonantsBetween\
    \ = consonantsAfter.zip(consonantsBefore)\n        val vowelsBetween = vowelsAfter.zip(vowelsBefore)\n\
    \        val consonantsBetween = consonantsAfter.zip(consonantsBefore)\n     \
    \   val vowelsBetween = vowelsAfter.zip(vowelsBefore)\n        val consonantsBetween\
    \ = consonantsAfter.zip(consonantsBefore)\n        val vowelsBetween = vowelsAfter.zip(vowelsBefore)\n\
    \        val consonantsBetween = consonantsAfter.zip(consonantsBefore)\n     \
    \   val vowelsBetween = vowelsAfter.zip(vowelsBefore)\n        val consonantsBetween\
    \ = consonantsAfter.zip(consonantsBefore)\n        val vowelsBetween = vowelsAfter.zip(vowelsBefore)\n\
    \        val consonantsBetween = consonantsAfter.zip(consonantsBefore)\n     \
    \   val vowelsBetween = vowelsAfter.zip(vowelsBefore)\n        val consonantsBetween\
    \ = consonantsAf\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr34ljz3s.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsBetween\e[0m = vowelsAfter.zip(vowelsBefore)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsBetween is already defined as \e[33mvalue\e[0m \e[35mvowelsBetween\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr34ljz3s.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsBetween\e[0m = consonantsAfter.zip(consonantsBefore)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsBetween is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsBetween\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr34ljz3s.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsBetween\e[0m = vowelsAfter.zip(vowelsBefore)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsBetween is already defined as \e[33mvalue\e[0m \e[35mvowelsBetween\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr34ljz3s.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mconsonantsBetween\e[0m = consonantsAfter.zip(consonantsBefore)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsBetween is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsBetween\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr34ljz3s.scala:31:12 ---------------------------\e\
    ["
  stdout: ''
  timestamp: 1659799092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorPrev\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n\
    \        val vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n        val\
    \ vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n\
    \        val vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n        val\
    \ vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n\
    \        val vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n        val\
    \ vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n\
    \        val vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptjkh753f.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptjkh753f.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.prev\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjkh753f.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjkh753f.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjkh753f.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextPrev\e\
    [0m = vowelsSetIteratorNextNext.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIt"
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsIndex = word.zipWithIndex.filter(_._2\
    \ % vowelsCount == 0).map(_._1).last\n        val vowelsIndex = vowelsIndex.getOrElse(\"\
    \")\n        val vowelsIndex = vowelsIndex.substring(vowelsIndex.length - 1)\n\
    \        val vowelsIndex = vowelsIndex.substring(0, vowelsIndex.length - 1)\n\
    \        vowelsIndex\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgfeken2l.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.getOrElse(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgfeken2l.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.substring(vowelsIndex.length\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgfeken2l.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.substring(\e\
    [31m0\e[0m, vowelsIndex.length - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpgfeken2l.scala:25:8 ---------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m        vowelsIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (vowelsIndex : Char)\n\e[31m   |\e[0m  \
    \      Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799090
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsLeft = vowels.toSeq.sortBy(_.length).reverse;\n\
    \        val vowelsRight = vowels.toSeq.sortBy(_.length).reverse;\n        val\
    \ vowelsLeft = vowelsLeft.takeWhile(_.length < word.length);\n        val vowelsRight\
    \ = vowelsRight.takeWhile(_.length < word.length);\n        val vowelsLeft = vowelsLeft.takeWhile(_.length\
    \ >= word.length);\n        val vowelsRight = vowelsRight.takeWhile(_.length >=\
    \ word.length);\n        val vowelsLeft = vowelsLeft.takeWhile(_.length >= word.length);\n\
    \        val vowelsRight = vowelsRight.takeWhile(_.length >= word.length);\n \
    \       val vowelsLeft = vowelsLeft.takeWhile(_.length >= word.length);\n    \
    \    val vowelsRight = vowelsRight.takeWhile(_.length >= word.length);\n     \
    \   val vowelsLeft = vowelsLeft.takeWhile(_.length >= word.length);\n        val\
    \ vowelsRight = vowelsRight.takeWhile(_.length >= word.length);\n        val vowelsLeft\
    \ = vowelsLeft.takeWhile(_.length >= word.length);\n        val vowelsRight =\
    \ vowelsRight.takeWhile(_.length >= word.length);\n        val vowelsLeft = vowelsLeft.takeWhile(_.length\
    \ >= word.length);\n        val vowelsRight = vowelsRight.takeWhile(_.length >=\
    \ word.length);\n        val vowelsLeft = vowelsLeft.takeWhile(_.length >= word.length);\n\
    \        val vowelsRight = vowelsRight.takeWhile(_.length >= word.length);\n \
    \       val vowelsLeft = vowelsLeft.takeWhile(_.length >= word.length);\n    \
    \    val vowelsRight = vowelsRight.takeWhile(_.length >= word.length);\n     \
    \   val vowelsLeft = vowelsLeft.takeWhile(_.length >= word.length);\n        val\
    \ vowelsRight = vowelsRight.takeWhile(_.length >= word.length);\n        val vowelsLeft\
    \ = vowelsLeft.takeWhile(_.length >= word.length);\n        val vowelsRight =\
    \ vowelsRight.takeWhile(_.length >= word.length);\n        val vowelsLeft = vowelsLeft.takeWhile(_.length\
    \ >= word.length);\n        val vowelsRight = vowelsRight.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplom8aimc.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmplom8aimc.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsLeft\e[0m = vowelsLeft.takeWhile(_.length\
    \ < word.length);\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsLeft is already defined as \e[33mvalue\e[0m \e[35mvowelsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplom8aimc.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsRight\e[0m = vowelsRight.takeWhile(_.length\
    \ < word.length);\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsRight is already defined as \e[33mvalue\e[0m \e[35mvowelsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplom8aimc.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsLeft\e[0m = vowelsLeft.takeWhile(_.length\
    \ >= word.length);\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsLeft is already defined as \e[33mvalue\e[0m \e[35mvowelsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplom8aimc.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsRight\e[0m = vowelsRight.takeWhile(_.length\
    \ >= word.length);\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsRight is already defined as \e[33mvalue\e[0m \e["
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphexu38ah.scala:56:25 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphexu38ah.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.size\n        val consonantsCount = consonants.size\n        val vowelsArray\
    \ = vowels.toArray\n        val consonantsArray = consonants.toArray\n       \
    \ val vowelsArrayLength = vowelsArray.length\n        val consonantsArrayLength\
    \ = consonantsArray.length\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val consonantsArrayLength = consonantsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val consonantsArrayLength = consonantsArray.length\n\
    \        val vowelsArrayLength = vowelsArray.length\n        val consonantsArrayLength\
    \ = consonantsArray.length\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val consonantsArrayLength = consonantsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val consonantsArrayLength = consonantsArray.length\n\
    \        val vowelsArrayLength = vowelsArray.length\n        val consonantsArrayLength\
    \ = consonantsArray.length\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val consonantsArrayLength = consonantsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val consonantsArrayLength = consonantsArray.length\n\
    \        val vowelsArrayLength = vowelsArray.length\n        val consonantsArrayLength\
    \ = consonantsArray.length\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val consonantsArrayLength = consonantsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val consonantsArrayLength = consonantsArray.length\n\
    \        val vowelsArrayLength = vowelsArray.length\n        val consonantsArrayLength\
    \ = consonantsArray.length\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val consonantsArrayLength = consonantsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val consonantsArrayLength = consonantsArray.length\n\
    \        val vowelsArrayLength = vowelsArray.length\n        val consonantsArrayLength\
    \ = consonantsArray.length\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val consonantsArrayLength = consonantsArray.length\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp6l1kxyr.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsArrayLength\e[0m =\
    \ vowelsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpp6l1kxyr.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsArrayLength\e\
    [0m = consonantsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp6l1kxyr.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsArrayLength\e[0m =\
    \ vowelsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpp6l1kxyr.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mconsonantsArrayLength\e\
    [0m = consonantsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp6l1kxyr.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m"
  stdout: ''
  timestamp: 1659799092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n    \
    \    val vowelsSetIteratorNextNextNextNextNext = vowelsSetIterator.next\n    \
    \    val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIterator.next\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpfh9z2bfs.scala:44:11 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpfh9z2bfs.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfh9z2bfs.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfh9z2bfs.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659799093
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        var\
    \ vowelIndex = 0\n        var vowel = \"\"\n        var consonantIndex = 0\n \
    \       var consonant = \"\"\n        var consonantIndex2 = 0\n        var consonant2\
    \ = \"\"\n        var vowelIndex2 = 0\n        var vowel2 = \"\"\n        var\
    \ vowelIndex3 = 0\n        var vowel3 = \"\"\n        var vowelIndex4 = 0\n  \
    \      var vowel4 = \"\"\n        var vowelIndex5 = 0\n        var vowel5 = \"\
    \"\n        var vowelIndex6 = 0\n        var vowel6 = \"\"\n        var vowelIndex7\
    \ = 0\n        var vowel7 = \"\"\n        var vowelIndex8 = 0\n        var vowel8\
    \ = \"\"\n        var vowelIndex9 = 0\n        var vowel9 = \"\"\n        var\
    \ vowelIndex10 = 0\n        var vowel10 = \"\"\n        var vowelIndex11 = 0\n\
    \        var vowel11 = \"\"\n        var vowelIndex12 = 0\n        var vowel12\
    \ = \"\"\n        var vowelIndex13 = 0\n        var vowel13 = \"\"\n        var\
    \ vowelIndex14 = 0\n        var vowel14 = \"\"\n        var vowelIndex15 = 0\n\
    \        var vowel15 = \"\"\n        var vowelIndex16 = 0\n        var vowel16\
    \ = \"\"\n        var vowelIndex17 = 0\n        var vowel17 = \"\"\n        var\
    \ vowelIndex18 = 0\n        var vowel18 = \"\"\n        var vowelIndex19 = 0\n\
    \        var vowel19 = \"\"\n        var vowelIndex20 = 0\n        var vowel20\
    \ = \"\"\n        var vowelIndex21 = 0\n        var vowel21 = \"\"\n        var\
    \ vowelIndex22 = 0\n        var vowel22 = \"\"\n        var vowelIndex23 = 0\n\
    \        var vowel23 = \"\"\n        var vowelIndex24 = 0\n        var vowel24\
    \ = \"\"\n        var vowelIndex25 = 0\n        var vowel25 = \"\"\n        var\
    \ vowelIndex26 = 0\n        var vowel26 = \"\"\n        var vowelIndex27 = 0\n\
    \        var vowel27 = \"\"\n        var vowelIndex28 = 0\n        var vowel28\
    \ = \"\"\n        var vowelIndex29 = 0\n        var vowel29 = \"\"\n        var\
    \ vowelIndex30 = 0\n        var vowel30 = \"\"\n        var vowelIndex31 = 0\n\
    \        var vowel31 = \"\"\n        var vowelIndex32 = 0\n        var vowel32\
    \ = \"\"\n        var vowelIndex33 = 0\n        var vowel33 = \"\"\n        var\
    \ vowelIndex34 = 0\n        var vowel34 = \"\"\n        var vowelIndex35 = 0\n\
    \        var vowel35 = \"\"\n        var vowelIndex36 = 0\n        var vowel36\
    \ = \"\"\n        var vowelIndex37 = 0\n        var vowel37 = \"\"\n        var\
    \ vowelIndex38 = 0\n        var vowel38 = \"\"\n        var vowelIndex39 = 0\n\
    \        var vowel39 = \"\"\n        var vowelIndex40 = 0\n        var vowel40\
    \ = \"\"\n        var vowelIndex41 = 0\n        var vowel41 = \"\"\n        var\
    \ vowelIndex42 = 0\n        var \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprd1fhbky.scala:107:11 --------------------------\e\
    [0m\e[0m\n\e[31m107 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m    |\e[0m    \
    \       ^\e[0m\n\e[31m    |\e[0m           pattern expected\n\e[31m    |\e[0m\n\
    \e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprd1fhbky.scala:108:5 --------------------\e\
    [0m\e[0m\n\e[31m108 |\e[0m    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m   \
    \ |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required: String\n\e[31m   \
    \ |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvpde4x0t.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpvpde4x0t.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpvpde4x0t.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpvpde4x0t.scala:37:64 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvpde4x0t.scala:39:126\
    \ -----------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphexu38ah.scala:56:25 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphexu38ah.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val consonants = Set(\"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        val vowelsBefore\
    \ = vowels.toList.takeWhile(vowel => vowel.startsWith(word));\n        val vowelsAfter\
    \ = vowels.toList.dropWhile(vowel => vowel.startsWith(word));\n        val consonantsBefore\
    \ = consonants.toList.takeWhile(consonant => consonant.startsWith(word));\n  \
    \      val consonantsAfter = consonants.toList.dropWhile(consonant => consonant.startsWith(word));\n\
    \        val vowelsBetween = vowelsBefore.zip(vowelsAfter).filter(pair => pair._1.startsWith(word)\
    \ && pair._2.startsWith(word));\n        val consonantsBetween = consonantsBefore.zip(consonantsAfter).filter(pair\
    \ => pair._1.startsWith(word) && pair._2.startsWith(word));\n        val vowelsBetweenWithConsonants\
    \ = vowelsBetween.zip(consonantsBetween).filter(pair => pair._1.startsWith(word)\
    \ && pair._2.startsWith(word));\n        val vowelsBetweenWithConsonantsWithVowels\
    \ = vowelsBetweenWithConsonants.filter(pair => vowels.contains(pair._1));\n  \
    \      val vowelsBetweenWithConsonantsWithVowelsWithConsonants = vowelsBetweenWithConsonantsWithVowels.filter(pair\
    \ => consonants.contains(pair._2));\n        val vowelsBetweenWithConsonantsWithVowelsWithConsonantsWithVowels\
    \ = vowelsBetweenWithConsonantsWithVowelsWithConsonants.filter(pair => vowels.contains(pair._1));\n\
    \        val vowelsBetweenWithConsonantsWithVowelsWithConsonantsWithVowelsWithConsonants\
    \ = vowelsBetweenWithConsonantsWithVowelsWithConsonantsWithVowels.filter(pair\
    \ => consonants.contains(pair._2));\n        val vowelsBetweenWithConsonantsWithVowelsWithConsonantsWithVowelsWithConsonantsWithVowels\
    \ = vowelsBetweenWithConsonantsWithVowelsWithConsonantsWithVowelsWithCon\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpolo7sh5s.scala:27:102 -----------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsBetweenWithConsonants\e\
    [0m = vowelsBetween.zip(consonantsBetween).filter(\e[36mpair\e[0m => pair._1.startsWith(word)\
    \ && pair._2.startsWith(word));\n\e[31m\e[31m   |\e[0m                       \
    \                                                                       ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value startsWith is not a member of (String,\
    \ String)\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpolo7sh5s.scala:28:116\
    \ -------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelsBetweenWithConsonantsWithVowels\e\
    [0m = vowelsBetweenWithConsonants.filter(\e[36mpair\e[0m => vowels.contains(pair._1));\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                       ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                              Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31mString\e[0m\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0mString\e[1m\e[31m)\e\
    [0m\n\e[31m   |\e[0m                                              Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpolo7sh5s.scala:29:144\
    \ -------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsBetweenWithConsonantsWithVowelsWithConsonants\e\
    [0m = vowelsBetweenWithConsonantsWithVowels.filter(\e[36mpair\e[0m => consonants.contains(pair._2));\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \      Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mString\e[0m\e[1m\e[31m,\e[0m\e[1m\e\
    [31m \e[0mString\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                           \
    \                   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp"
  stdout: ''
  timestamp: 1659799102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(x => consonants.contains(x)).length\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp1vook2c.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp1vook2c.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp1vook2c.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp1vook2c.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp1vook2c.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n"
  stdout: ''
  timestamp: 1659799103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCount = vowels.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowel\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkh_argqp.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkh_argqp.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkh_argqp.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkh_argqp.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkh_argqp.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already define"
  stdout: ''
  timestamp: 1659799102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n        var vowel\
    \ = \"\"\n        var lastVowel = \"\"\n        var lastConsonant = \"\"\n   \
    \     var lastVowelIndex = 0\n        var lastConsonantIndex = 0\n        var\
    \ lastVowelIndex = 0\n        var lastConsonantIndex = 0\n        var lastVowelIndex\
    \ = 0\n        var lastConsonantIndex = 0\n        var lastVowelIndex = 0\n  \
    \      var lastConsonantIndex = 0\n        var lastVowelIndex = 0\n        var\
    \ lastConsonantIndex = 0\n        var lastVowelIndex = 0\n        var lastConsonantIndex\
    \ = 0\n        var lastVowelIndex = 0\n        var lastConsonantIndex = 0\n  \
    \      var lastVowelIndex = 0\n        var lastConsonantIndex = 0\n        var\
    \ lastVowelIndex = 0\n        var lastConsonantIndex = 0\n        var lastVowelIndex\
    \ = 0\n        var lastConsonantIndex = 0\n        var lastVowelIndex = 0\n  \
    \      var lastConsonantIndex = 0\n        var lastVowelIndex = 0\n        var\
    \ lastConsonantIndex = 0\n        var lastVowelIndex = 0\n        var lastConsonantIndex\
    \ = 0\n        var lastVowelIndex = 0\n        var lastConsonantIndex = 0\n  \
    \      var lastVowelIndex = 0\n        var lastConsonantIndex = 0\n        var\
    \ lastVowelIndex = 0\n        var lastConsonantIndex = 0\n        var lastVowelIndex\
    \ = 0\n        var lastConsonantIndex = 0\n        var lastVowelIndex = 0\n  \
    \      var lastConsonantIndex = 0\n        var lastVowelIndex = 0\n        var\
    \ lastConsonantIndex = 0\n        var lastVowelIndex = 0\n        var lastConsonantIndex\
    \ = 0\n        var lastVowelIndex = 0\n        var lastConsonantIndex = 0\n  \
    \      var lastVowelIndex = 0\n        var lastConsonantIndex = 0\n        var\
    \ lastVowelIndex = 0\n        var lastConsonantIndex = 0\n        var lastVowelIndex\
    \ = 0\n        var lastConsonantIndex = 0\n        var lastVowelIndex = 0\n  \
    \      var lastConsonantIndex = 0\n        var lastVowelIndex = 0\n        var\
    \ lastConsonantIndex = 0\n        var lastVowelIndex = 0\n        var lastConsonantIndex\
    \ = 0\n        var lastVowelIndex = 0\n        var lastConsonantIndex = 0\n  \
    \      var lastVowelIndex = 0\n        var lastConsonantIndex = 0\n        var\
    \ lastVowelIndex = 0\n\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5lrkxli8.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e[36mlastVowelIndex\e[0m = \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mlastVowelIndex is already defined as \e[33mvariable\e[0m \e[35mlastVowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5lrkxli8.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mvar\e[0m \e[36mlastConsonantIndex\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mlastConsonantIndex is already defined as \e[33mvariable\e[0m \e[35mlastConsonantIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5lrkxli8.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mvar\e[0m \e[36mlastVowelIndex\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlastVowelIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mlastVowelIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp5lrkxli8.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mvar\e[0m \e[36mlastConsonantIndex\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlastConsonantIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mlastConsonantIndex\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp5lrkxli8.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mvar\e[0m \e[36mlastVowelIndex\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlastVowelIndex\
    \ is already defined as \e[33mvariab"
  stdout: ''
  timestamp: 1659799101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsBefore\
    \ = vowels.toList.dropRight(word.length)\n        val vowelsAfter = vowels.toList.dropLeft(word.length)\n\
    \        val consonantsBefore = consonants.toList.dropRight(word.length)\n   \
    \     val consonantsAfter = consonants.toList.dropLeft(word.length)\n        val\
    \ vowelsBetween = vowelsBefore.zip(vowelsAfter).filter(_._1.toLowerCase == _._1.toLowerCase).map(_._2)\n\
    \        val consonantsBetween = consonantsBefore.zip(consonantsAfter).filter(_._1.toLowerCase\
    \ == _._1.toLowerCase).map(_._2)\n        val vowelsBetweenLength = vowelsBetween.length\n\
    \        val consonantsBetweenLength = consonantsBetween.length\n        val vowelsBetweenLength\
    \ = vowelsBetweenLength > 0 ? vowelsBetweenLength : 1\n        val consonantsBetweenLength\
    \ = consonantsBetweenLength > 0 ? consonantsBetweenLength : 1\n        val vowelsBetweenLength\
    \ = vowelsBetweenLength > 1 ? vowelsBetweenLength : 1\n        val consonantsBetweenLength\
    \ = consonantsBetweenLength > 1 ? consonantsBetweenLength : 1\n        val vowelsBetweenLength\
    \ = vowelsBetweenLength > 2 ? vowelsBetweenLength : 1\n        val consonantsBetweenLength\
    \ = consonantsBetweenLength > 2 ? consonantsBetweenLength : 1\n        val vowelsBetweenLength\
    \ = vowelsBetweenLength > 3 ? vowelsBetweenLength : 1\n        val consonantsBetweenLength\
    \ = consonantsBetweenLength > 3 ? consonantsBetweenLength : 1\n        val vowelsBetweenLength\
    \ = vowelsBetweenLength > 4 ? vowelsBetweenLength : 1\n        val consonantsBetweenLength\
    \ = consonantsBetweenLength > 4 ? consonantsBetweenLength : 1\n        val vowelsBetweenLength\
    \ = vowelsBetweenLength > 5 ? vowelsBetweenLength : 1\n        val consonantsBetweenLength\
    \ = consonantsBetweenLength > 5 ? consonantsBetweenLength : 1\n        val vowelsBetweenLength\
    \ = vowelsBetweenLength > 6 ? vowelsBetweenLength : 1\n        val consonantsBetweenLength\
    \ = con\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1mixlpyw.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsBetweenLength\e[0m\
    \ = vowelsBetweenLength > \e[31m0\e[0m ? vowelsBetweenLength : \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsBetweenLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mvowelsBetweenLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1mixlpyw.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mconsonantsBetweenLength\e\
    [0m = consonantsBetweenLength > \e[31m0\e[0m ? consonantsBetweenLength : \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsBetweenLength is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsBetweenLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1mixlpyw.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsBetweenLength\e[0m\
    \ = vowelsBetweenLength > \e[31m1\e[0m ? vowelsBetweenLength : \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsBetweenLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mvowelsBetweenLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1mixlpyw.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mconsonantsBetweenLength\e\
    [0m = consonantsBetweenLength > \e[31m1\e[0m ? consonantsBetweenLength : \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val consonants = word.filter(x => !vowels.contains(x))\n        val consonantsCount\
    \ = consonants.length\n        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowels\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp08e6z3ao.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp08e6z3ao.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = consonants.filter(\e[36mx\e[0m => vowels.contains(x)).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp08e6z3ao.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = consonants.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp08e6z3ao.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = consonants.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp08e6z3ao.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = consonants.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e["
  stdout: ''
  timestamp: 1659799104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        var vowelIndex = 0;\n      \
    \  var vowelEndIndex = 0;\n        var vowelStartIndex = 0;\n        var vowelEndIndex\
    \ = 0;\n        var vowelStartIndex = 0;\n        var vowelEndIndex = 0;\n   \
    \     var vowelStartIndex = 0;\n        var vowelEndIndex = 0;\n        var vowelStartIndex\
    \ = 0;\n        var vowelEndIndex = 0;\n        var vowelStartIndex = 0;\n   \
    \     var vowelEndIndex = 0;\n        var vowelStartIndex = 0;\n        var vowelEndIndex\
    \ = 0;\n        var vowelStartIndex = 0;\n        var vowelEndIndex = 0;\n   \
    \     var vowelStartIndex = 0;\n        var vowelEndIndex = 0;\n        var vowelStartIndex\
    \ = 0;\n        var vowelEndIndex = 0;\n        var vowelStartIndex = 0;\n   \
    \     var vowelEndIndex = 0;\n        var vowelStartIndex = 0;\n        var vowelEndIndex\
    \ = 0;\n        var vowelStartIndex = 0;\n        var vowelEndIndex = 0;\n   \
    \     var vowelStartIndex = 0;\n        var vowelEndIndex = 0;\n        var vowelStartIndex\
    \ = 0;\n        var vowelEndIndex = 0;\n        var vowelStartIndex = 0;\n   \
    \     var vowelEndIndex = 0;\n        var vowelStartIndex = 0;\n        var vowelEndIndex\
    \ = 0;\n        var vowelStartIndex = 0;\n        var vowelEndIndex = 0;\n   \
    \     var vowelStartIndex = 0;\n        var vowelEndIndex = 0;\n        var vowelStartIndex\
    \ = 0;\n        var vowelEndIndex = 0;\n        var vowelStartIndex = 0;\n   \
    \     var vowelEndIndex = 0;\n        var vowelStartIndex = 0;\n        var vowelEndIndex\
    \ = 0;\n        var vowelStartIndex = 0;\n        var vowelEndIndex = 0;\n   \
    \     var vowelStartIndex = 0;\n        var vowelEndIndex = 0;\n        var vowelStartIndex\
    \ = 0;\n        var vowelEndIndex = 0;\n        var vowelStartIndex = 0;\n   \
    \     var vowelEndIndex = 0;\n        var vowelStartIndex = 0;\n        var vowelEndIndex\
    \ = 0;\n        var vowelStartIndex = 0;\n        var vowelEndIndex = 0;\n   \
    \     var vowelStartIndex = 0;\n        var vowelEndIndex = 0;\n        var vowelStartIndex\
    \ = 0;\n        var vowelEndIndex = 0;\n        var vowelStartIndex = 0;\n   \
    \     var vowelEndIndex = 0;\n        var vowelStartIndex = 0;\n        var vowelEndIndex\
    \ = 0;\n        var vowelStartIndex = 0;\n        var vowelEndIndex = 0;\n   \
    \     var vowelStartIndex = 0;\n        var vowelEndIndex = 0;\n        var vowelStartIndex\
    \ = 0;\n        var vowelEndIndex = 0;\n        var vowelStartIndex = 0;\n   \
    \     var vowelEndIndex = 0;\n        var vowelStartIndex = 0;\n        var vowelEndIndex\
    \ = 0;\n        var vowelStartIndex = 0;\n        var vowelEndIndex = 0;\n   \
    \     var vowelStartIndex = 0;\n        var vowelEndIndex = 0;\n        var vowelStartIndex\
    \ = 0;\n        var vowelEndIndex = 0;\n        var vowelStartIndex = 0;\n   \
    \     var vowelEndIndex = 0;\n        var vowelStartIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp72ow58yf.scala:103:4 ---------------------------\e\
    [0m\e[0m\n\e[31m103 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp72ow58yf.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mvowelEndIndex\e[0m = \e[31m0\e[0m;\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelEndIndex is already defined as \e[33mvariable\e[0m \e\
    [35mvowelEndIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp72ow58yf.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mvowelStartIndex\e[0m = \e\
    [31m0\e[0m;\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelStartIndex is already defined as \e[33mvariable\e[0m \e[35mvowelStartIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp72ow58yf.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mvar\e[0m \e[36mvowelEndIndex\e[0m = \e[31m0\e[0m;\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelEndIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mvowelEndIndex\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp72ow58yf.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mvar\e[0m \e[36mvowelStartIndex\e[0m = \e[31m0\e[0m;\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelStartIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mvowelStartIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp72ow58yf.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m      "
  stdout: ''
  timestamp: 1659799103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.lastIndexOfAny(vowels)\n        val vowelsIndex\
    \ = if (vowelsIndex == -1) \"\" else word.substring(vowelsIndex).charAt(0)\n \
    \       val vowelsIndex = if (vowelsIndex == \"\") \"\" else vowelsIndex\n   \
    \     val vowelsIndex = if (vowelsIndex == \"\") \"\" else vowelsIndex\n     \
    \   val vowelsIndex = if (vowelsIndex == \"\") \"\" else vowelsIndex\n       \
    \ val vowelsIndex = if (vowelsIndex == \"\") \"\" else vowelsIndex\n        val\
    \ vowelsIndex = if (vowelsIndex == \"\") \"\" else vowelsIndex\n        val vowelsIndex\
    \ = if (vowelsIndex == \"\") \"\" else vowelsIndex\n        val vowelsIndex =\
    \ if (vowelsIndex == \"\") \"\" else vowelsIndex\n        val vowelsIndex = if\
    \ (vowelsIndex == \"\") \"\" else vowelsIndex\n        val vowelsIndex = if (vowelsIndex\
    \ == \"\") \"\" else vowelsIndex\n        val vowelsIndex = if (vowelsIndex ==\
    \ \"\") \"\" else vowelsIndex\n        val vowelsIndex = if (vowelsIndex == \"\
    \") \"\" else vowelsIndex\n        val vowelsIndex = if (vowelsIndex == \"\")\
    \ \"\" else vowelsIndex\n        val vowelsIndex = if (vowelsIndex == \"\") \"\
    \" else vowelsIndex\n        val vowelsIndex = if (vowelsIndex == \"\") \"\" else\
    \ vowelsIndex\n        val vowelsIndex = if (vowelsIndex == \"\") \"\" else vowelsIndex\n\
    \        val vowelsIndex = if (vowelsIndex == \"\") \"\" else vowelsIndex\n  \
    \      val vowelsIndex = if (vowelsIndex == \"\") \"\" else vowelsIndex\n    \
    \    val vowelsIndex = if (vowelsIndex == \"\") \"\" else vowelsIndex\n      \
    \  val vowelsIndex = if (vowelsIndex == \"\") \"\" else vowelsIndex\n        val\
    \ vowelsIndex = if (vowelsIndex == \"\") \"\" else vowelsIndex\n        val vowelsIndex\
    \ = if (vowelsIndex == \"\") \"\" else vowelsIndex\n        val vowelsIndex =\
    \ if (vowelsIndex == \"\") \"\" else vowelsIndex\n        val vowelsIndex = if\
    \ (vowelsIndex == \"\") \"\" else vowelsIndex\n        val vowelsIndex = if (vowelsIndex\
    \ == \"\") \"\" else vowelsIndex\n        val vowelsIndex = if (vowelsIndex ==\
    \ \"\") \"\" else \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpz5x144ul.scala:47:56 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = \e[33mif\e\
    [0m (vowelsIndex == \e[31m\"\"\e[0m) \e[31m\"\"\e[0m \e[33melse\e[0m \n\e[31m\e\
    [31m   |\e[0m                                                        ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz5x144ul.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = \e[33mif\e[0m (vowelsIndex == -\e[31m1\e[0m) \e[31m\"\
    \"\e[0m \e[33melse\e[0m word.substring(vowelsIndex).charAt(\e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz5x144ul.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = \e[33mif\e[0m (vowelsIndex\
    \ == \e[31m\"\"\e[0m) \e[31m\"\"\e[0m \e[33melse\e[0m vowelsIndex\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz5x144ul.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = \e[33mif\e[0m (vowelsIndex\
    \ == \e[31m\"\"\e[0m) \e[31m\"\"\e[0m \e[33melse\e[0m vowelsIndex\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that "
  stdout: ''
  timestamp: 1659799103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet3 = vowelsSet.diff(vowelsSet2)\n        val vowelsSet4 =\
    \ vowelsSet.diff(vowelsSet3)\n        val vowelsSet5 = vowelsSet.diff(vowelsSet4)\n\
    \        val vowelsSet6 = vowelsSet.diff(vowelsSet5)\n        val vowelsSet7 =\
    \ vowelsSet.diff(vowelsSet6)\n        val vowelsSet8 = vowelsSet.diff(vowelsSet7)\n\
    \        val vowelsSet9 = vowelsSet.diff(vowelsSet8)\n        val vowelsSet10\
    \ = vowelsSet.diff(vowelsSet9)\n        val vowelsSet11 = vowelsSet.diff(vowelsSet10)\n\
    \        val vowelsSet12 = vowelsSet.diff(vowelsSet11)\n        val vowelsSet13\
    \ = vowelsSet.diff(vowelsSet12)\n        val vowelsSet14 = vowelsSet.diff(vowelsSet13)\n\
    \        val vowelsSet15 = vowelsSet.diff(vowelsSet14)\n        val vowelsSet16\
    \ = vowelsSet.diff(vowelsSet15)\n        val vowelsSet17 = vowelsSet.diff(vowelsSet16)\n\
    \        val vowelsSet18 = vowelsSet.diff(vowelsSet17)\n        val vowelsSet19\
    \ = vowelsSet.diff(vowelsSet18)\n        val vowelsSet20 = vowelsSet.diff(vowelsSet19)\n\
    \        val vowelsSet21 = vowelsSet.diff(vowelsSet20)\n        val vowelsSet22\
    \ = vowelsSet.diff(vowelsSet21)\n        val vowelsSet23 = vowelsSet.diff(vowelsSet22)\n\
    \        val vowelsSet24 = vowelsSet.diff(vowelsSet23)\n        val vowelsSet25\
    \ = vowelsSet.diff(vowelsSet24)\n        val vowelsSet26 = vowelsSet.diff(vowelsSet25)\n\
    \        val vowelsSet27 = vowelsSet.diff(vowelsSet26)\n        val vowelsSet28\
    \ = vowelsSet.diff(vowelsSet27)\n        val vowelsSet29 = vowelsSet.diff(vowelsSet28)\n\
    \        val vowelsSet30 = vowelsSet.diff(vowelsSet29)\n        val vowelsSet31\
    \ = vowelsSet.diff(vowelsSet30)\n        val vowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpah2y8hsq.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpah2y8hsq.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        var vowelIndex = 0;\n      \
    \  var vowelCount = 0;\n        var lastVowelIndex = -1;\n        var lastVowelCount\
    \ = 0;\n        var lastVowel = vowels.iterator().next();\n        var lastVowelIndex\
    \ = vowels.iterator().next();\n        var lastVowelCount = 1;\n        var lastVowel\
    \ = vowels.iterator().next();\n        var lastVowelIndex = vowels.iterator().next();\n\
    \        var lastVowelCount = 1;\n        var lastVowel = vowels.iterator().next();\n\
    \        var lastVowelIndex = vowels.iterator().next();\n        var lastVowelCount\
    \ = 1;\n        var lastVowel = vowels.iterator().next();\n        var lastVowelIndex\
    \ = vowels.iterator().next();\n        var lastVowelCount = 1;\n        var lastVowel\
    \ = vowels.iterator().next();\n        var lastVowelIndex = vowels.iterator().next();\n\
    \        var lastVowelCount = 1;\n        var lastVowel = vowels.iterator().next();\n\
    \        var lastVowelIndex = vowels.iterator().next();\n        var lastVowelCount\
    \ = 1;\n        var lastVowel = vowels.iterator().next();\n        var lastVowelIndex\
    \ = vowels.iterator().next();\n        var lastVowelCount = 1;\n        var lastVowel\
    \ = vowels.iterator().next();\n        var lastVowelIndex = vowels.iterator().next();\n\
    \        var lastVowelCount = 1;\n        var lastVowel = vowels.iterator().next();\n\
    \        var lastVowelIndex = vowels.iterator().next();\n        var lastVowelCount\
    \ = 1;\n        var lastVowel = vowels.iterator().next();\n        var lastVowelIndex\
    \ = vowels.iterator().next();\n        var lastVowelCount = 1;\n        var lastVowel\
    \ = vowels.iterator().next();\n        var lastVowelIndex = vowels.iterator().next();\n\
    \        var lastVowelCount = 1;\n        var lastVowel = vowels.iterator().next();\n\
    \        var lastVowelIndex = vowels.iterator().next();\n        var lastVowelCount\
    \ = 1;\n        var lastVowel = vowels.iterator().next();\n        var lastVowelIndex\
    \ = vowels.iterator().next();\n        var lastVowelCount = 1;\n        var lastVowel\
    \ = vowels.iterator().next();\n        var lastVowelIndex = vowels.iterator().next();\n\
    \        var lastVowelCount = 1;\n        var lastVowel = vowels.iterator().next();\n\
    \        var lastVowelIndex = vowels.iterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphdh6cxrb.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mlastVowelIndex\e[0m = vowels.iterator().next();\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mlastVowelIndex is already defined as \e[33mvariable\e[0m \e[35mlastVowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphdh6cxrb.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mvar\e[0m \e[36mlastVowelCount\e[0m = \e[31m1\e[0m;\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlastVowelCount\
    \ is already defined as \e[33mvariable\e[0m \e[35mlastVowelCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphdh6cxrb.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mvar\e[0m \e[36mlastVowel\e[0m = vowels.iterator().next();\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mlastVowel is already defined as \e[33mvariable\e[0m \e[35mlastVowel\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphdh6cxrb.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mvar\e[0m \e[36mlastVowelIndex\e[0m = vowels.iterator().next();\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mlastVowelIndex is already defined as \e[33mvariable\e[0m \e[35mlastVowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphdh6cxrb.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mvar\e[0m \e[36mlastVowelCount\e[0m = \e[31m1\e[0m;\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e["
  stdout: ''
  timestamp: 1659799102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount\
    \ = consonants.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount =\
    \ consonants.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount =\
    \ consonants.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount =\
    \ consonants.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount =\
    \ consonants.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount =\
    \ consonants.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount =\
    \ consonant\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvs9lfln4.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvs9lfln4.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpvs9lfln4.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvs9lfln4.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpvs9lfln4.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33"
  stdout: ''
  timestamp: 1659799103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsAndConsonants\
    \ = vowels ++ consonants\n        val vowelsAndConsonantsList = vowelsAndConsonants.toList\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy_9liuep.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy_9liuep.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsAndConsonantsListLength\e[0m = vowelsAndConsonantsListLength - \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy_9liuep.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListLength\e\
    [0m = vowelsAndConsonantsListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsAndConsonantsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy_9liuep.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListLength\e\
    [0m = vowelsAndConsonantsListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsAndConsonantsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy_9liuep.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListLength\e\
    [0m = vowelsAndConsonantsLi"
  stdout: ''
  timestamp: 1659799088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet3 = vowelsSet.diff(vowelsSet2)\n        val vowelsSet4 =\
    \ vowelsSet.diff(vowelsSet3)\n        val vowelsSet5 = vowelsSet.diff(vowelsSet4)\n\
    \        val vowelsSet6 = vowelsSet.diff(vowelsSet5)\n        val vowelsSet7 =\
    \ vowelsSet.diff(vowelsSet6)\n        val vowelsSet8 = vowelsSet.diff(vowelsSet7)\n\
    \        val vowelsSet9 = vowelsSet.diff(vowelsSet8)\n        val vowelsSet10\
    \ = vowelsSet.diff(vowelsSet9)\n        val vowelsSet11 = vowelsSet.diff(vowelsSet10)\n\
    \        val vowelsSet12 = vowelsSet.diff(vowelsSet11)\n        val vowelsSet13\
    \ = vowelsSet.diff(vowelsSet12)\n        val vowelsSet14 = vowelsSet.diff(vowelsSet13)\n\
    \        val vowelsSet15 = vowelsSet.diff(vowelsSet14)\n        val vowelsSet16\
    \ = vowelsSet.diff(vowelsSet15)\n        val vowelsSet17 = vowelsSet.diff(vowelsSet16)\n\
    \        val vowelsSet18 = vowelsSet.diff(vowelsSet17)\n        val vowelsSet19\
    \ = vowelsSet.diff(vowelsSet18)\n        val vowelsSet20 = vowelsSet.diff(vowelsSet19)\n\
    \        val vowelsSet21 = vowelsSet.diff(vowelsSet20)\n        val vowelsSet22\
    \ = vowelsSet.diff(vowelsSet21)\n        val vowelsSet23 = vowelsSet.diff(vowelsSet22)\n\
    \        val vowelsSet24 = vowelsSet.diff(vowelsSet23)\n        val vowelsSet25\
    \ = vowelsSet.diff(vowelsSet24)\n        val vowelsSet26 = vowelsSet.diff(vowelsSet25)\n\
    \        val vowelsSet27 = vowelsSet.diff(vowelsSet26)\n        val vowelsSet28\
    \ = vowelsSet.diff(vowelsSet27)\n        val vowelsSet29 = vowelsSet.diff(vowelsSet28)\n\
    \        val vowelsSet30 = vowelsSet.diff(vowelsSet29)\n        val vowelsSet31\
    \ = vowelsSet.diff(vowelsSet30)\n        val vowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpah2y8hsq.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpah2y8hsq.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.map(x => word.length).sum\n        val consonantsCount = consonants.toList.map(x\
    \ => word.length).sum\n        val vowelsIndex = word.lastIndexWhere(x => vowels.contains(x))\n\
    \        val consonantsIndex = word.lastIndexWhere(x => consonants.contains(x))\n\
    \        if (vowelsIndex == -1 && consonantsIndex == -1) return \"\"\n       \
    \ if (vowelsIndex == -1 && consonantsIndex != -1) return \"\"\n        if (vowelsIndex\
    \ != -1 && consonantsIndex == -1) return \"\"\n        if (vowelsIndex != -1 &&\
    \ consonantsIndex != -1) return word.substring(vowelsIndex + 1, consonantsIndex\
    \ + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf_55bljr.scala:23:67\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e\
    [0m = word.lastIndexWhere(\e[36mx\e[0m => vowels.contains(x))\n\e[31m\e[31m  \
    \ |\e[0m                                                                   ^\e\
    [0m\n\e[31m   |\e[0m                                                    Found:\
    \    (x : Char)\n\e[31m   |\e[0m                                             \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpf_55bljr.scala:24:75 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(\e\
    [36mx\e[0m => consonants.contains(x))\n\e[31m\e[31m   |\e[0m                 \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (x : Char)\n\e\
    [31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf_55bljr.scala:28:8\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mif\e[0m (vowelsIndex\
    \ != -\e[31m1\e[0m && consonantsIndex != -\e[31m1\e[0m) \e[33mreturn\e[0m word.substring(vowelsIndex\
    \ + \e[31m1\e[0m, consonantsIndex + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: String\n\
    \e[31m   |\e[0m        Maybe you are missing an else part for the conditional?\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toSet.size \n        val consonantsCount = consonants.toSet.size \n\
    \        val vowelsCount = vowels.toSet.size \n        val consonantsCount = consonants.toSet.size\
    \ \n        val vowelsCount = vowels.toSet.size \n        val consonantsCount\
    \ = consonants.toSet.size \n        val vowelsCount = vowels.toSet.size \n   \
    \     val consonantsCount = consonants.toSet.size \n        val vowelsCount =\
    \ vowels.toSet.size \n        val consonantsCount = consonants.toSet.size \n \
    \       val vowelsCount = vowels.toSet.size \n        val consonantsCount = consonants.toSet.size\
    \ \n        val vowelsCount = vowels.toSet.size \n        val consonantsCount\
    \ = consonants.toSet.size \n        val vowelsCount = vowels.toSet.size \n   \
    \     val consonantsCount = consonants.toSet.size \n        val vowelsCount =\
    \ vowels.toSet.size \n        val consonantsCount = consonants.toSet.size \n \
    \       val vowelsCount = vowels.toSet.size \n        val consonantsCount = consonants.toSet.size\
    \ \n        val vowelsCount = vowels.toSet.size \n        val consonantsCount\
    \ = consonants.toSet.size \n        val vowelsCount = vowels.toSet.size \n   \
    \     val consonantsCount = consonants.toSet.size \n        val vowelsCount =\
    \ vowels.toSet.size \n        val consonantsCount = consonants.toSet.size \n \
    \       val vowelsCount = vowels.toSet.size \n        val consonantsCount = consonants.toSet.size\
    \ \n        val vowelsCount = vowels.toSet.size \n        val consonantsCount\
    \ = consonants.toSet.size \n        val vowelsCount = vowels.toSet.size \n   \
    \     val consonantsCount = consonants.toSet.size \n        val vowelsCount =\
    \ vowels.toSet.size \n        val consonantsCount = consonants.toSet.size \n \
    \       val vowelsCount = vowels.toSet.size \n        val consonantsCount = consonants.toSet.size\
    \ \n        val vowel\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8kwm0a9h.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8kwm0a9h.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowels.toSet.size \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8kwm0a9h.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toSet.size\
    \ \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8kwm0a9h.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\
    \ \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8kwm0a9h.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toSet.size\
    \ \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tm"
  stdout: ''
  timestamp: 1659799103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val consonants = Set(\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\")\n        val vowelsAndConsonants\
    \ = vowels ++ consonants\n        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n\
    \        val vowelsAnd\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphyt1kwv2.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphyt1kwv2.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsAndConsonantsLength\e[0m = vowelsAndConsonants.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsAndConsonantsLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mvowelsAndConsonantsLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphyt1kwv2.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsLength\e\
    [0m = vowelsAndConsonants.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphyt1kwv2.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsLength\e\
    [0m = vowelsAndConsonants.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphyt1kwv2.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsLength\e\
    [0m = vowelsAndConsonants.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsLength is "
  stdout: ''
  timestamp: 1659799103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n        var vowel\
    \ = \"\"\n        var consonantIndex = 0\n        var consonant = \"\"\n     \
    \   var consonantIndex2 = 0\n        var consonant2 = \"\"\n        var consonantIndex3\
    \ = 0\n        var consonant3 = \"\"\n        var consonantIndex4 = 0\n      \
    \  var consonant4 = \"\"\n        var consonantIndex5 = 0\n        var consonant5\
    \ = \"\"\n        var consonantIndex6 = 0\n        var consonant6 = \"\"\n   \
    \     var consonantIndex7 = 0\n        var consonant7 = \"\"\n        var consonantIndex8\
    \ = 0\n        var consonant8 = \"\"\n        var consonantIndex9 = 0\n      \
    \  var consonant9 = \"\"\n        var consonantIndex10 = 0\n        var consonant10\
    \ = \"\"\n        var consonantIndex11 = 0\n        var consonant11 = \"\"\n \
    \       var consonantIndex12 = 0\n        var consonant12 = \"\"\n        var\
    \ consonantIndex13 = 0\n        var consonant13 = \"\"\n        var consonantIndex14\
    \ = 0\n        var consonant14 = \"\"\n        var consonantIndex15 = 0\n    \
    \    var consonant15 = \"\"\n        var consonantIndex16 = 0\n        var consonant16\
    \ = \"\"\n        var consonantIndex17 = 0\n        var consonant17 = \"\"\n \
    \       var consonantIndex18 = 0\n        var consonant18 = \"\"\n        var\
    \ consonantIndex19 = 0\n        var consonant19 = \"\"\n        var consonantIndex20\
    \ = 0\n        var consonant20 = \"\"\n        var consonantIndex21 = 0\n    \
    \    var consonant21 = \"\"\n        var consonantIndex22 = 0\n        var consonant22\
    \ = \"\"\n        var consonantIndex23 = 0\n        var consonant23 = \"\"\n \
    \       var consonantIndex24 = 0\n        var consonant24 = \"\"\n        var\
    \ consonantIndex25 = 0\n        var consonant25 = \"\"\n        var consonantIndex26\
    \ = 0\n        var consonant26 = \"\"\n        var consonantIndex27 = 0\n    \
    \    var consonant27 = \"\"\n        var consonantIndex28 = 0\n        var consonant28\
    \ = \"\"\n        var consonantIndex29 = 0\n        var consonant29 = \"\"\n \
    \       var consonantIndex30 = 0\n        var consonant30 = \"\"\n        var\
    \ consonantIndex31 = 0\n        var consonant31 = \"\"\n        var consonantIndex32\
    \ = 0\n        var consonant32 = \"\"\n        var consonantIndex33\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr8fqcg_j.scala:87:4 ----------------------------\e\
    [0m\e[0m\n\e[31m87 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpr8fqcg_j.scala:87:5 ---------------------\e[0m\e[0m\n\e[31m87 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphexu38ah.scala:56:25 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphexu38ah.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgrijpcbt.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgrijpcbt.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpgrijpcbt.scala:23:62 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgrijpcbt.scala:31:72 ---------------------------\e\
    [0"
  stdout: ''
  timestamp: 1659799104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.map(_.length).sum\n\
    \        val vowelsIndex = word.zipWithIndex.filter(_._2.length == vowelsCount).map(_._1).last\n\
    \        val vowelsIndex = vowelsIndex.map(_.toString.toInt)\n        val vowelsIndexCount\
    \ = vowelsIndex.map(_.length).sum\n        val vowelsIndexLast = vowelsIndex.last\n\
    \        val vowelsIndexLastCount = vowelsIndexLast.map(_.length).sum\n      \
    \  val vowelsIndexLastLast = vowelsIndexLast.last\n        val vowelsIndexLastLastCount\
    \ = vowelsIndexLastLast.map(_.length).sum\n        val vowelsIndexLastLastLast\
    \ = vowelsIndexLastLast.last\n        val vowelsIndexLastLastLastCount = vowelsIndexLastLastLast.map(_.length).sum\n\
    \        val vowelsIndexLastLastLastLast = vowelsIndexLastLastLast.last\n    \
    \    val vowelsIndexLastLastLastLastCount = vowelsIndexLastLastLastLast.map(_.length).sum\n\
    \        val vowelsIndexLastLastLastLastLast = vowelsIndexLastLastLastLast.last\n\
    \        val vowelsIndexLastLastLastLastLastCount = vowelsIndexLastLastLastLastLast.map(_.length).sum\n\
    \        val vowelsIndexLastLastLastLastLastLast = vowelsIndexLastLastLastLastLast.last\n\
    \        val vowelsIndexLastLastLastLastLastLastCount = vowelsIndexLastLastLastLastLastLast.map(_.length).sum\n\
    \        val vowelsIndexLastLastLastLastLastLastLast = vowelsIndexLastLastLastLastLastLastLast.last\n\
    \        val vowelsIndexLastLastLastLastLastLastLastCount = vowelsIndexLastLastLastLastLastLastLast.map(_.length).sum\n\
    \        val vowelsIndexLastLastLastLastLastLastLastLast = vowelsIndexLastLastLastLastLastLastLastLast.last\n\
    \        val vowelsIndexLastLastLastLastLastLastLastLastCount = vowelsIndexLastLastLastLastLastLastLastLastLast.map(_.length).sum\n\
    \        val vowelsIndexLastLastLastLastLastLastLastLastLast = vowelsIndexLastLastLastLastLastLastLastLastLastLast.last\n\
    \        val vowelsIndexLastLastLastLastLastLastLastLastLastCount = vowelsIndexLastLastLastLastLastLastLastLastLast.map(_.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph5_ajjy7.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmph5_ajjy7.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.map(_.toString.toInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmph5_ajjy7.scala:21:56 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.zipWithIndex.filter(_._2.length\
    \ == vowelsCount).map(_._1).last\n\e[31m\e[31m   |\e[0m                      \
    \                             ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                       value length is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmph5_ajjy7.scala:23:43 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndexCount\e[0m = vowelsIndex.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value map is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmph5_ajjy7.scala:24:42 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndexLast\e[0m = vowelsIndex.last\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              value last is not a member of Char\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmph5_ajjy7.scala:36:54 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndexLastLastLastLastLastLastLast\e\
    [0m = vowelsIndexLastLastLastLastLastLastLast.last\n\e[31m\e[31m   |\e[0m    \
    \                                                  ^\e[0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659799106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.size\n        val consonantsCount = consonants.size\n        val vowelsIndex\
    \ = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n\
    \        val vowelsCount = vowels.size\n        val consonantsCount = consonants.size\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowels.size\n\
    \        val consonantsCount = consonants.size\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsCount = vowels.size\n        val consonantsCount = consonants.size\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowels.size\n\
    \        val consonantsCount = consonants.size\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsCount = vowels.size\n        val consonantsCount = consonants.size\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowels.size\n\
    \        val consonantsCount = consonants.size\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsCount = vowels.size\n        val consonantsCount = consonants.size\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowels.size\n\
    \        val consonantsCount = consonants.size\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowel\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwjoxeu_f.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwjoxeu_f.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowels.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwjoxeu_f.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwjoxeu_f.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwjoxeu_f.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel defin"
  stdout: ''
  timestamp: 1659799105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpol27pdm7.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpol27pdm7.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpol27pdm7.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpol27pdm7.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1659799104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIterator.next\n        val vowelsSetIteratorPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorPrevPrevNext = vowelsSetIterator.prev\n        val\
    \ vowelsSetIteratorPrevPrevPrev = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevPrevPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevPrevPrevPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevNext = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevPrevNext = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevPrevPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevNext = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevNext = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevNext = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevPrevPrevPrevPrevPrev\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3omipqem.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3omipqem.scala:23:54\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue prev is not a member of Iterator[String] - did you mean vowelsSetIterator.drop?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3omipqem.scala:25:58 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrevNext\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \              ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a\
    \ member of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp3omipqem.scala:27:62 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrevPrevNext\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \                  ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not\
    \ a member of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp3omipqem.scala:28:62 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrevPrevPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \                  ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not\
    \ a member of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp3omipqem.scala:29:66 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrevPrevPrevNext\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \                      ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev\
    \ is not a member of Iter"
  stdout: ''
  timestamp: 1659799106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        var vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        var vowelsSet = Set(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n        var vowelsSet2 = Set(\"a\", \"e\",\
    \ \"i\", \"o\", \"u\", \"y\");\n        var vowelsSet3 = Set(\"a\", \"e\", \"\
    i\", \"o\", \"u\", \"y\");\n        var vowelsSet4 = Set(\"a\", \"e\", \"i\",\
    \ \"o\", \"u\", \"y\");\n        var vowelsSet5 = Set(\"a\", \"e\", \"i\", \"\
    o\", \"u\", \"y\");\n        var vowelsSet6 = Set(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\", \"y\");\n        var vowelsSet7 = Set(\"a\", \"e\", \"i\", \"o\", \"\
    u\", \"y\");\n        var vowelsSet8 = Set(\"a\", \"e\", \"i\", \"o\", \"u\",\
    \ \"y\");\n        var vowelsSet9 = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\");\n        var vowelsSet10 = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"\
    );\n        var vowelsSet11 = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n\
    \        var vowelsSet12 = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n  \
    \      var vowelsSet13 = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n    \
    \    var vowelsSet14 = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n      \
    \  var vowelsSet15 = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        var\
    \ vowelsSet16 = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        var vowelsSet17\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        var vowelsSet18 =\
    \ Set(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        var vowelsSet19 = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        var vowelsSet20 = Set(\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"y\");\n        var vowelsSet21 = Set(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n        var vowelsSet22 = Set(\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\");\n        var vowelsSet23 = Set(\"a\", \"e\", \"\
    i\", \"o\", \"u\", \"y\");\n        var vowelsSet24 = Set(\"a\", \"e\", \"i\"\
    , \"o\", \"u\", \"y\");\n        var vowelsSet25 = Set(\"a\", \"e\", \"i\", \"\
    o\", \"u\", \"y\");\n        var vowelsSet26 = Set(\"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\");\n        var vowelsSet27 = Set(\"a\", \"e\", \"i\", \"o\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpv96su946.scala:46:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mvar\e[0m \e[36mvowelsSet27\e[0m = Set(\e\
    [31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \"o\n\e[31m\e[31m   |\e[0m\
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                     unclosed string literal\n\e[31m\e[31m--\
    \ Error: /tmp/tmpv96su946.scala:48:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpv96su946.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpv96su946.scala:48:4 -------------------------\e[0m\e\
    [0m\n\e[31m48 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m\
    \    Not found: odef\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n        var vowelIndex2\
    \ = word.length - 1\n        var vowelIndex3 = word.length - 1\n        var vowelIndex4\
    \ = word.length - 1\n        var vowelIndex5 = word.length - 1\n        var vowelIndex6\
    \ = word.length - 1\n        var vowelIndex7 = word.length - 1\n        var vowelIndex8\
    \ = word.length - 1\n        var vowelIndex9 = word.length - 1\n        var vowelIndex10\
    \ = word.length - 1\n        var vowelIndex11 = word.length - 1\n        var vowelIndex12\
    \ = word.length - 1\n        var vowelIndex13 = word.length - 1\n        var vowelIndex14\
    \ = word.length - 1\n        var vowelIndex15 = word.length - 1\n        var vowelIndex16\
    \ = word.length - 1\n        var vowelIndex17 = word.length - 1\n        var vowelIndex18\
    \ = word.length - 1\n        var vowelIndex19 = word.length - 1\n        var vowelIndex20\
    \ = word.length - 1\n        var vowelIndex21 = word.length - 1\n        var vowelIndex22\
    \ = word.length - 1\n        var vowelIndex23 = word.length - 1\n        var vowelIndex24\
    \ = word.length - 1\n        var vowelIndex25 = word.length - 1\n        var vowelIndex26\
    \ = word.length - 1\n        var vowelIndex27 = word.length - 1\n        var vowelIndex28\
    \ = word.length - 1\n        var vowelIndex29 = word.length - 1\n        var vowelIndex30\
    \ = word.length - 1\n        var vowelIndex31 = word.length - 1\n        var vowelIndex32\
    \ = word.length - 1\n        var vowelIndex33 = word.length - 1\n        var vowelIndex34\
    \ = word.length - 1\n        var vowelIndex35 = word.length - 1\n        var vowelIndex36\
    \ = word.length - 1\n        var vowelIndex37 = word.length - 1\n        var vowelIndex38\
    \ = word.length - 1\n        var vowelIndex39 = word.length - 1\n        var vowelIndex40\
    \ = word.length - 1\n        var vowelIndex41 = word.length - 1\n        var vowelIndex42\
    \ = word.length - 1\n        var vowelIndex43 = word.length - 1\n        var vowelIndex44\
    \ = word.length - 1\n        var vowelIndex45 = word.length - 1\n        var vowelIndex46\
    \ = word.length - 1\n        var vowelIndex47 = word.length - 1\n        var vowelIndex48\
    \ = word.length - 1\n        var vowelIndex49 = word.length - 1\n        var vowelIndex50\
    \ = word.length - 1\n        var vowelIndex51 = word.length - 1\n        var vowelIndex52\
    \ = word.length - 1\n        var vowelIndex53 = word.length - 1\n        var vowelIndex54\
    \ = word.length - 1\n        var vowelIndex55 = word.length - 1\n        var vowelIndex56\
    \ = word.length - 1\n        var vowelIndex57 = word.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplu3pl9dt.scala:77:5\
    \ ---------------------\e[0m\e[0m\n\e[31m77 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(x => consonants.contains(x)).length\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp1vook2c.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp1vook2c.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp1vook2c.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp1vook2c.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp1vook2c.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n"
  stdout: ''
  timestamp: 1659799103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        var\
    \ vowelIndex = 0\n        var vowelCount = 0\n        var vowelIndex2 = word.length\
    \ - 1\n        var vowelCount2 = 0\n        var vowelIndex3 = word.length - 1\n\
    \        var vowelCount3 = 0\n        var vowelIndex4 = word.length - 1\n    \
    \    var vowelCount4 = 0\n        var vowelIndex5 = word.length - 1\n        var\
    \ vowelCount5 = 0\n        var vowelIndex6 = word.length - 1\n        var vowelCount6\
    \ = 0\n        var vowelIndex7 = word.length - 1\n        var vowelCount7 = 0\n\
    \        var vowelIndex8 = word.length - 1\n        var vowelCount8 = 0\n    \
    \    var vowelIndex9 = word.length - 1\n        var vowelCount9 = 0\n        var\
    \ vowelIndex10 = word.length - 1\n        var vowelCount10 = 0\n        var vowelIndex11\
    \ = word.length - 1\n        var vowelCount11 = 0\n        var vowelIndex12 =\
    \ word.length - 1\n        var vowelCount12 = 0\n        var vowelIndex13 = word.length\
    \ - 1\n        var vowelCount13 = 0\n        var vowelIndex14 = word.length -\
    \ 1\n        var vowelCount14 = 0\n        var vowelIndex15 = word.length - 1\n\
    \        var vowelCount15 = 0\n        var vowelIndex16 = word.length - 1\n  \
    \      var vowelCount16 = 0\n        var vowelIndex17 = word.length - 1\n    \
    \    var vowelCount17 = 0\n        var vowelIndex18 = word.length - 1\n      \
    \  var vowelCount18 = 0\n        var vowelIndex19 = word.length - 1\n        var\
    \ vowelCount19 = 0\n        var vowelIndex20 = word.length - 1\n        var vowelCount20\
    \ = 0\n        var vowelIndex21 = word.length - 1\n        var vowelCount21 =\
    \ 0\n        var vowelIndex22 = word.length - 1\n        var vowelCount22 = 0\n\
    \        var vowelIndex23 = word.length - 1\n        var vowelCount23 = 0\n  \
    \      var vowelIndex24 = word.length - 1\n        var vowelCount24 = 0\n    \
    \    var vowelIndex25 = word.length - 1\n        var vowelCount25 = 0\n      \
    \  var vowelIndex26 = word.length - 1\n        var vowelCount26 = 0\n        var\
    \ vowelIndex27 = word.length - 1\n        var vowelCount27 = 0\n        var vowelIndex28\
    \ = word.length - 1\n        var vowelCount28 = 0\n        var vowelIndex29 =\
    \ word.length - 1\n        var vowelCount29 = 0\n        var vowelIndex30 = word.length\
    \ - 1\n        var vowelCount30 = 0\n        var vowelIndex31 = word.length -\
    \ 1\n        var vowelCount31 = 0\n        var vowelIndex32 = word.length - 1\n\
    \        var vowelCount32 = 0\n        var vowelIndex33 = word.length - 1\n  \
    \      var vowelCount33 = 0\n        var vowelIndex34 = word.length - 1\n\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb0cn9fjl.scala:88:5\
    \ ---------------------\e[0m\e[0m\n\e[31m88 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet3 = vowelsSet.filter(_\
    \ != \"e\")\n        val vowelsSet4 = vowelsSet.filter(_ != \"i\")\n        val\
    \ vowelsSet5 = vowelsSet.filter(_ != \"o\")\n        val vowelsSet6 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet7 = vowelsSet.filter(_ != \"e\")\n        val\
    \ vowelsSet8 = vowelsSet.filter(_ != \"i\")\n        val vowelsSet9 = vowelsSet.filter(_\
    \ != \"o\")\n        val vowelsSet10 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet11 = vowelsSet.filter(_ != \"e\")\n        val vowelsSet12 = vowelsSet.filter(_\
    \ != \"i\")\n        val vowelsSet13 = vowelsSet.filter(_ != \"o\")\n        val\
    \ vowelsSet14 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet15 = vowelsSet.filter(_\
    \ != \"e\")\n        val vowelsSet16 = vowelsSet.filter(_ != \"i\")\n        val\
    \ vowelsSet17 = vowelsSet.filter(_ != \"o\")\n        val vowelsSet18 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet19 = vowelsSet.filter(_ != \"e\")\n        val\
    \ vowelsSet20 = vowelsSet.filter(_ != \"i\")\n        val vowelsSet21 = vowelsSet.filter(_\
    \ != \"o\")\n        val vowelsSet22 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet23 = vowelsSet.filter(_ != \"e\")\n        val vowelsSet24 = vowelsSet.filter(_\
    \ != \"i\")\n        val vowelsSet25 = vowelsSet.filter(_ != \"o\")\n        val\
    \ vowelsSet26 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet27 = vowelsSet.filter(_\
    \ != \"e\")\n        val vowelsSet28 = vowelsSet.filter(_ != \"i\")\n        val\
    \ vowelsSet29 = vowelsSet.filter(_ != \"o\")\n        val vowelsSet30 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet31 = vowelsSet.filter(_ != \"e\")\n        val\
    \ vowelsSet32 = vowelsSet.filter(_ != \"i\")\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvxu0aedo.scala:53:5\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprtbfvu1m.scala:56:25 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprtbfvu1m.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList.size\n\
    \        val vowelsIndex = word.lastIndexOfAny(vowels)\n        val vowelsIndex2\
    \ = word.lastIndexOfAny(vowels.reverse)\n        val vowelsIndex3 = word.lastIndexOfAny(vowels.reverse.tail)\n\
    \        val vowelsIndex4 = word.lastIndexOfAny(vowels.reverse.tail.tail)\n  \
    \      val vowelsIndex5 = word.lastIndexOfAny(vowels.reverse.tail.tail.tail)\n\
    \        val vowelsIndex6 = word.lastIndexOfAny(vowels.reverse.tail.tail.tail.tail)\n\
    \        val vowelsIndex7 = word.lastIndexOfAny(vowels.reverse.tail.tail.tail.tail.tail)\n\
    \        val vowelsIndex8 = word.lastIndexOfAny(vowels.reverse.tail.tail.tail.tail.tail.tail)\n\
    \        val vowelsIndex9 = word.lastIndexOfAny(vowels.reverse.tail.tail.tail.tail.tail.tail.tail)\n\
    \        val vowelsIndex10 = word.lastIndexOfAny(vowels.reverse.tail.tail.tail.tail.tail.tail.tail.tail)\n\
    \        val vowelsIndex11 = word.lastIndexOfAny(vowels.reverse.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail)\n\
    \        val vowelsIndex12 = word.lastIndexOfAny(vowels.reverse.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail)\n\
    \        val vowelsIndex13 = word.lastIndexOfAny(vowels.reverse.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail)\n\
    \        val vowelsIndex14 = word.lastIndexOfAny(vowels.reverse.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail)\n\
    \        val vowelsIndex15 = word.lastIndexOfAny(vowels.reverse.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail)\n\
    \        val vowelsIndex16 = word.lastIndexOfAny(vowels.reverse.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail)\n\
    \        val vowels\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyzko_lcd.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyzko_lcd.scala:21:31\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsIndex\e[0m = word.lastIndexOfAny(vowels)\n\e[31m\e[31m   |\e[0m    \
    \                      ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue lastIndexOfAny\
    \ is not a member of String - did you mean word.lastIndexOf?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpyzko_lcd.scala:22:32 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex2\e[0m = word.lastIndexOfAny(vowels.reverse)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue lastIndexOfAny is not a member of String - did you mean word.lastIndexOf?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyzko_lcd.scala:22:54 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex2\e[0m = word.lastIndexOfAny(vowels.reverse)\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of scala.collection.mutable.Set[String]\
    \ - did you mean vowels.reversed?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyzko_lcd.scala:23:32\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsIndex3\e[0m = word.lastIndexOfAny(vowels.reverse.tail)\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ lastIndexOfAny is not a member of String - did you mean word.lastIndexOf?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyzko_lcd.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex3\e[0m = word.lastIndexOfAny(vowels.reverse.tail)\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of scala.collection.mutable.Set[String]\
    \ - did you mean vowels.reversed?\n\e[31m\e[3"
  stdout: ''
  timestamp: 1659799120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowel = \"\"\n        var lastVowel\
    \ = \"\"\n        var lastVowelIndex = 0\n        var index = 0\n        val wordLength\
    \ = word.length\n        val vowelCount = word.filter(x => vowels.contains(x)).length\n\
    \        val vowelIndex = word.lastIndexWhere(x => vowels.contains(x))\n     \
    \   val vowelIndex2 = word.lastIndexWhere(x => vowels.contains(x), vowelIndex\
    \ + 1)\n        val vowelIndex3 = word.lastIndexWhere(x => vowels.contains(x),\
    \ vowelIndex2 + 1)\n        val vowelIndex4 = word.lastIndexWhere(x => vowels.contains(x),\
    \ vowelIndex3 + 1)\n        val vowelIndex5 = word.lastIndexWhere(x => vowels.contains(x),\
    \ vowelIndex4 + 1)\n        val vowelIndex6 = word.lastIndexWhere(x => vowels.contains(x),\
    \ vowelIndex5 + 1)\n        val vowelIndex7 = word.lastIndexWhere(x => vowels.contains(x),\
    \ vowelIndex6 + 1)\n        val vowelIndex8 = word.lastIndexWhere(x => vowels.contains(x),\
    \ vowelIndex7 + 1)\n        val vowelIndex9 = word.lastIndexWhere(x => vowels.contains(x),\
    \ vowelIndex8 + 1)\n        val vowelIndex10 = word.lastIndexWhere(x => vowels.contains(x),\
    \ vowelIndex9 + 1)\n        val vowelIndex11 = word.lastIndexWhere(x => vowels.contains(x),\
    \ vowelIndex10 + 1)\n        val vowelIndex12 = word.lastIndexWhere(x => vowels.contains(x),\
    \ vowelIndex11 + 1)\n        val vowelIndex13 = word.lastIndexWhere(x => vowels.contains(x),\
    \ vowelIndex12 + 1)\n        val vowelIndex14 = word.lastIndexWhere(x => vowels.contains(x),\
    \ vowelIndex13 + 1)\n        val vowelIndex15 = word.lastIndexWhere(x => vowels.contains(x),\
    \ vowelIndex14 + 1)\n        val vowelIndex16 = word.lastIndexWhere(x => vowels.contains(x),\
    \ vowelIndex15 + 1)\n        val vowelIndex17 = word.lastIndexWhere(x => vowels.contains(x),\
    \ vowelIndex16 + 1)\n        val vowelIndex18 = word.lastIndexWhere(x => vowels.contains(x),\
    \ vowelIndex17 + 1)\n        val vowelIndex19 = word.lastIndexWhere(x => vowels.contains(x),\
    \ vowelIndex18 + 1)\n        val vowelIndex20 = word.lastIndexWhere(x => vowels.contains(x),\
    \ vowelIndex19 + 1)\n        val vowelIndex21 = word.lastIndexWhere(x => vowels.contains(x),\
    \ vowelIndex20 + 1)\n        val vowelIndex22 = word.lastIndexWhere(x => vowels.contains(x),\
    \ vowelIndex21 + 1)\n        val vowelIndex23 = word.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp89z48m_m.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp89z48m_m.scala:25:58 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = word.filter(\e[36mx\e[0m\
    \ => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m                       \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                                  Found:    (x : Char)\n\e[31m   |\e[0m     \
    \                                               Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp89z48m_m.scala:26:66 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelIndex\e[0m = word.lastIndexWhere(\e\
    [36mx\e[0m => vowels.contains(x))\n\e[31m\e[31m   |\e[0m                     \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                            Found:    (x : Char)\n\e[31m   |\e\
    [0m                                                    Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp89z48m_m.scala:27:67 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelIndex2\e[0m = word.lastIndexWhere(\e\
    [36mx\e[0m => vowels.contains(x), vowelIndex + \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                                   ^\e[0m\n\
    \e[31m   |\e[0m                                                    Found:    (x\
    \ : Char)\n\e[31m   |\e[0m                                                   \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp89z48m_m.scala:28:67\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelIndex3\e\
    [0m = word.las"
  stdout: ''
  timestamp: 1659799119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsCount = vowels.toSeq.map(_.length).sum\n\
    \        val vowelsIndex = word.zipWithIndex.filter(_._2 % vowelsCount == 0).map(_._1).last\n\
    \        val vowelsIndex = vowelsIndex.map(_.toString.toInt)\n        val vowelsIndex\
    \ = vowelsIndex.sortWith(_ < _)\n        val vowelsIndex = vowelsIndex.last\n\
    \        val vowelsIndex = vowelsIndex.map(_.toString.toInt)\n        val vowelsIndex\
    \ = vowelsIndex.sortWith(_ < _)\n        val vowelsIndex = vowelsIndex.last\n\
    \        val vowelsIndex = vowelsIndex.map(_.toString.toInt)\n        val vowelsIndex\
    \ = vowelsIndex.sortWith(_ < _)\n        val vowelsIndex = vowelsIndex.last\n\
    \        val vowelsIndex = vowelsIndex.map(_.toString.toInt)\n        val vowelsIndex\
    \ = vowelsIndex.sortWith(_ < _)\n        val vowelsIndex = vowelsIndex.last\n\
    \        val vowelsIndex = vowelsIndex.map(_.toString.toInt)\n        val vowelsIndex\
    \ = vowelsIndex.sortWith(_ < _)\n        val vowelsIndex = vowelsIndex.last\n\
    \        val vowelsIndex = vowelsIndex.map(_.toString.toInt)\n        val vowelsIndex\
    \ = vowelsIndex.sortWith(_ < _)\n        val vowelsIndex = vowelsIndex.last\n\
    \        val vowelsIndex = vowelsIndex.map(_.toString.toInt)\n        val vowelsIndex\
    \ = vowelsIndex.sortWith(_ < _)\n        val vowelsIndex = vowelsIndex.last\n\
    \        val vowelsIndex = vowelsIndex.map(_.toString.toInt)\n        val vowelsIndex\
    \ = vowelsIndex.sortWith(_ < _)\n        val vowelsIndex = vowelsIndex.last\n\
    \        val vowelsIndex = vowelsIndex.map(_.toString.toInt)\n        val vowelsIndex\
    \ = vowelsIndex.sortWith(_ < _)\n        val vowelsIndex = vowelsIndex.last\n\
    \        val vowelsIndex = vowelsIndex.map(_.toString.toInt)\n        val vowelsIndex\
    \ = vowelsIndex.sortWith(_ < _)\n        val vowelsIndex = vowelsIndex.last\n\
    \        val vowelsIndex = vowelsIndex.map(_.toString.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx0zw7r16.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpx0zw7r16.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.map(_.toString.toInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx0zw7r16.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx0zw7r16.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.last\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx0zw7r16.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.map(_.toString.toInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e"
  stdout: ''
  timestamp: 1659799115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsLength = vowelsIndex\
    \ - vowelsCount\n        val consonantsLength = consonantsIndex - consonantsCount\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsLength = vowelsIndex\
    \ - vowelsCount\n        val consonantsLength = consonantsIndex - consonantsCount\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsLength = vowelsIndex\
    \ - vowelsCount\n        val consonantsLength = consonantsIndex - consonantsCount\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsLength = vowelsIndex\
    \ - vowelsCount\n        val consonantsLength = consonantsIndex - consonantsCount\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsLength = vowelsIndex\
    \ - vowelsCount\n        val consonantsLength = consonantsIndex - consonantsCount\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsLength = vowelsIndex\
    \ - vowelsCount\n        val consonantsLength = consonantsIndex - consonantsCount\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsLength = vowelsIndex\
    \ - vowelsCount\n        val consonantsLength = consonantsIndex - consonantsCount\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ajg5ze8.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8ajg5ze8.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8ajg5ze8.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsLength\e[0m = vowelsIndex\
    \ - vowelsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsLength is already defined as \e[33mvalue\e[0m \e[35mvowelsLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8ajg5ze8.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mconsonantsLength\e[0m = consonantsIndex\
    \ - consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsLength is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8ajg5ze8.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m"
  stdout: ''
  timestamp: 1659799117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase == \"a\"\
    \ || _.toString.toLowerCase == \"e\" || _.toString.toLowerCase == \"i\" || _.toString.toLowerCase\
    \ == \"o\" || _.toString.toLowerCase == \"u\")\n        val consonantsIndex =\
    \ word.lastIndexWhere(_.toString.toLowerCase == \"b\" || _.toString.toLowerCase\
    \ == \"c\" || _.toString.toLowerCase == \"d\" || _.toString.toLowerCase == \"\
    f\" || _.toString.toLowerCase == \"g\" || _.toString.toLowerCase == \"h\" || _.toString.toLowerCase\
    \ == \"j\" || _.toString.toLowerCase == \"k\" || _.toString.toLowerCase == \"\
    l\" || _.toString.toLowerCase == \"m\" || _.toString.toLowerCase == \"n\" || _.toString.toLowerCase\
    \ == \"p\" || _.toString.toLowerCase == \"q\" || _.toString.toLowerCase == \"\
    r\" || _.toString.toLowerCase == \"s\" || _.toString.toLowerCase == \"t\" || _.toString.toLowerCase\
    \ == \"v\" || _.toString.toLowerCase == \"w\" || _.toString.toLowerCase == \"\
    x\" || _.toString.toLowerCase == \"y\" || _.toString.toLowerCase == \"z\")\n \
    \       val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase == \"a\"\
    \ || _.toString.toLowerCase == \"e\" || _.toString.toLowerCase == \"i\" || _.toString.toLowerCase\
    \ == \"o\" || _.toString.toLowerCase == \"u\")\n        val consonantsIndex =\
    \ word.lastIndexWhere(_.toString.toLowerCase == \"b\" || _.toString.toLowerCase\
    \ == \"c\" || _.toString.toLowerCase == \"d\" || _.toString.toLowerCase == \"\
    f\" || _.toString.toLowerCase == \"g\" || _.toString.toLowerCase == \"h\" || _.toString.toLowerCase\
    \ == \"j\" || _.toString.toLowerCase == \"k\" || _.toString.toLowerCase == \"\
    l\" || _.toString.toLowerCase == \"m\" || _.toString.toLowerCase == \"n\" || _.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6tkm8tn3.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6tkm8tn3.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(_.toString.toLowerCase\
    \ == \e[31m\"a\"\e[0m || _.toString.toLowerCase == \e[31m\"e\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"i\"\e[0m || _.toString.toLowerCase == \e[31m\"o\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"u\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6tkm8tn3.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(_.toString.toLowerCase\
    \ == \e[31m\"b\"\e[0m || _.toString.toLowerCase == \e[31m\"c\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"d\"\e[0m || _.toString.toLowerCase == \e[31m\"f\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"g\"\e[0m || _.toString.toLowerCase == \e[31m\"h\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"j\"\e[0m || _.toString.toLowerCase == \e[31m\"k\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"l\"\e[0m || _.toString.toLowerCase == \e[31m\"m\"\e[0m || _.toString.toLowerCase\
    \ == \e[31m\"n\"\e[0m || _.\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(x => consonants.contains(x)).size\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsIndex = word.lastIndexWhere(x => vowels.contains(x))\n\
    \        val consonantsIndex = word.lastIndexWhere(x => consonants.contains(x))\n\
    \        val vowelsIndex = vowelsIndex + 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoydpaz2k.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoydpaz2k.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoydpaz2k.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoydpaz2k.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex - \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoydpaz2k.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex - \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n"
  stdout: ''
  timestamp: 1659799118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsAndConsonants\
    \ = vowels ++ consonants\n        val vowelsAndConsonantsList = vowelsAndConsonants.toList\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy_9liuep.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy_9liuep.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsAndConsonantsListLength\e[0m = vowelsAndConsonantsListLength - \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy_9liuep.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListLength\e\
    [0m = vowelsAndConsonantsListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsAndConsonantsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy_9liuep.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListLength\e\
    [0m = vowelsAndConsonantsListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsAndConsonantsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy_9liuep.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListLength\e\
    [0m = vowelsAndConsonantsLi"
  stdout: ''
  timestamp: 1659799088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList\n  \
    \      val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowel\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphtbqimjt.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtbqimjt.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtbqimjt.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtbqimjt.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtbqimjt.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defi"
  stdout: ''
  timestamp: 1659799076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet3 = vowelsSet.diff(vowelsSet2)\n        val vowelsSet4 =\
    \ vowelsSet.diff(vowelsSet3)\n        val vowelsSet5 = vowelsSet.diff(vowelsSet4)\n\
    \        val vowelsSet6 = vowelsSet.diff(vowelsSet5)\n        val vowelsSet7 =\
    \ vowelsSet.diff(vowelsSet6)\n        val vowelsSet8 = vowelsSet.diff(vowelsSet7)\n\
    \        val vowelsSet9 = vowelsSet.diff(vowelsSet8)\n        val vowelsSet10\
    \ = vowelsSet.diff(vowelsSet9)\n        val vowelsSet11 = vowelsSet.diff(vowelsSet10)\n\
    \        val vowelsSet12 = vowelsSet.diff(vowelsSet11)\n        val vowelsSet13\
    \ = vowelsSet.diff(vowelsSet12)\n        val vowelsSet14 = vowelsSet.diff(vowelsSet13)\n\
    \        val vowelsSet15 = vowelsSet.diff(vowelsSet14)\n        val vowelsSet16\
    \ = vowelsSet.diff(vowelsSet15)\n        val vowelsSet17 = vowelsSet.diff(vowelsSet16)\n\
    \        val vowelsSet18 = vowelsSet.diff(vowelsSet17)\n        val vowelsSet19\
    \ = vowelsSet.diff(vowelsSet18)\n        val vowelsSet20 = vowelsSet.diff(vowelsSet19)\n\
    \        val vowelsSet21 = vowelsSet.diff(vowelsSet20)\n        val vowelsSet22\
    \ = vowelsSet.diff(vowelsSet21)\n        val vowelsSet23 = vowelsSet.diff(vowelsSet22)\n\
    \        val vowelsSet24 = vowelsSet.diff(vowelsSet23)\n        val vowelsSet25\
    \ = vowelsSet.diff(vowelsSet24)\n        val vowelsSet26 = vowelsSet.diff(vowelsSet25)\n\
    \        val vowelsSet27 = vowelsSet.diff(vowelsSet26)\n        val vowelsSet28\
    \ = vowelsSet.diff(vowelsSet27)\n        val vowelsSet29 = vowelsSet.diff(vowelsSet28)\n\
    \        val vowelsSet30 = vowelsSet.diff(vowelsSet29)\n        val vowelsSet31\
    \ = vowelsSet.diff(vowelsSet30)\n        val vowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpah2y8hsq.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpah2y8hsq.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n        var vowelFound\
    \ = false\n        var vowel = \"\"\n        val consonants = Set(\"b\", \"c\"\
    , \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val consonantIndex\
    \ = 0\n        val consonantFound = false\n        val consonant = \"\"\n    \
    \    val wordLength = word.length\n        val wordArray = word.split(\"\")\n\
    \        val wordArrayLength = wordArray.length\n        val consonantArray =\
    \ word.split(\"\").reverse\n        val consonantArrayLength = consonantArray.length\n\
    \        val vowelArray = vowels.toArray\n        val vowelArrayLength = vowelArray.length\n\
    \        val consonantArrayLength = consonantArray.length\n        val consonantArray\
    \ = consonantArray.reverse\n        val consonantArrayLength = consonantArray.length\n\
    \        val vowelArrayLength = vowelArray.length\n        val vowelArray = vowelArray.reverse\n\
    \        val vowelArrayLength = vowelArray.length\n        val consonantArrayLength\
    \ = consonantArray.length\n        val consonantArray = consonantArray.reverse\n\
    \        val consonantArrayLength = consonantArray.length\n        val vowelArrayLength\
    \ = vowelArray.length\n        val vowelArray = vowelArray.reverse\n        val\
    \ vowelArrayLength = vowelArray.length\n        val consonantArrayLength = consonantArray.length\n\
    \        val consonantArray = consonantArray.reverse\n        val consonantArrayLength\
    \ = consonantArray.length\n        val vowelArrayLength = vowelArray.length\n\
    \        val vowelArray = vowelArray.reverse\n        val vowelArrayLength = vowelArray.length\n\
    \        val consonantArrayLength = consonantArray.length\n        val consonantArray\
    \ = consonantArray.reverse\n        val consonantArrayLength = consonantArray.length\n\
    \        val vowelArrayLength = vowelArray.length\n        val vowelArray = vowelArray.reverse\n\
    \        val vowelArrayLength = vowelArray.length\n        val consonantArrayLength\
    \ = consonantArray.length\n        val consonantArray = consonantArray.reverse\n\
    \        val consonantArrayLength = consonantArray.length\n        val vowelArrayLength\
    \ = vowelArray.length\n        val vowelArray = vowelArray.reverse\n        val\
    \ vowelArrayLength = vowelArray.length\n        val consonantArrayLength = consonantArray.length\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpox7wazkr.scala:65:11 ---------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpox7wazkr.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mconsonantArrayLength\e[0m\
    \ = consonantArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mconsonantArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpox7wazkr.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mconsonantArray\e[0m = consonantArray.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantArray is already defined as \e[33mvalue\e[0m \e[35mconsonantArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpox7wazkr.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mconsonantArrayLength\e[0m = consonantArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mconsonantArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpox7wazkr.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mvowelArrayLength\e[0m =\
    \ vowelArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelArrayLength is already defined as \e[33mvalue\e[0m "
  stdout: ''
  timestamp: 1659799115
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList\n  \
    \      val vowelsCount = vowelsCount.sortBy(x => -x.length)\n        val vowelsCount\
    \ = vowelsCount.take(vowelsCount.length - 1)\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.contains(x.toLowerCase))\n        val vowelsCount = vowelsCount.map(x\
    \ => vowels.\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpul9ubxvo.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpul9ubxvo.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.sortBy(\e\
    [36mx\e[0m => -x.length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpul9ubxvo.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.take(vowelsCount.length\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpul9ubxvo.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.map(\e\
    [36mx\e[0m => vowels.contains(x.toLowerCase))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpul9ubxvo.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.map(\e\
    [36mx\e[0m => vowels.contains(x.toLowerCase))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is "
  stdout: ''
  timestamp: 1659799116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsBefore\
    \ = vowels.toList.takeWhile(vowel => word.contains(vowel))\n        val vowelsAfter\
    \ = vowels.toList.dropWhile(vowel => word.contains(vowel))\n        val consonantsBefore\
    \ = consonants.toList.takeWhile(consonant => word.contains(consonant))\n     \
    \   val consonantsAfter = consonants.toList.dropWhile(consonant => word.contains(consonant))\n\
    \        val vowelsBetween = vowelsAfter.zip(vowelsBefore).filter(_._1 != _._1).map(_._1)\n\
    \        val consonantsBetween = consonantsAfter.zip(consonantsBefore).filter(_._1\
    \ != _._1).map(_._1)\n        val vowelsMeet = vowelsAfter.intersect(vowelsBefore)\n\
    \        val consonantsMeet = consonantsAfter.intersect(consonantsBefore)\n  \
    \      val vowelsMeetWithConsonants = vowelsAfter.intersect(consonantsBefore)\n\
    \        val vowelsMeetWithConsonantsWithVowels = vowelsAfter.intersect(consonantsBefore).intersect(vowelsBefore)\n\
    \        val vowelsMeetWithConsonantsWithVowelsAndConsonants = vowelsAfter.intersect(consonantsBefore).intersect(vowelsBefore).intersect(consonantsAfter)\n\
    \        val vowelsMeetWithConsonantsWithVowelsAndConsonantsWithVowels = vowelsAfter.intersect(consonantsBefore).intersect(vowelsBefore).intersect(consonantsAfter).intersect(vowelsAfter)\n\
    \        val vowelsMeetWithConsonantsWithVowelsAndConsonantsWithVowelsAndConsonants\
    \ = vowelsAfter.intersect(consonantsBefore).intersect(vowelsBefore).intersect(consonantsAfter).intersect(vowelsAfter).intersect(consonantsAfter)\n\
    \        val vowelsMeetWithConsonantsWithVowelsAndConsonantsWithVowelsAndConson\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc10epqml.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc10epqml.scala:25:67\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsBetween\e[0m = vowelsAfter.zip(vowelsBefore).filter(_._1 != _._1).map(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                                      value\
    \ _1 is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc10epqml.scala:26:79\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantsBetween\e[0m = consonantsAfter.zip(consonantsBefore).filter(_._1\
    \ != _._1).map(_._1)\n\e[31m\e[31m   |\e[0m                                  \
    \                                           ^^^^\e[0m\n\e[31m   |\e[0m       \
    \                               value _1 is not a member of String\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpc10epqml.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.diff(Set(\"a\"))\n        val vowelsSet3 = vowelsSet.diff(Set(\"\
    e\"))\n        val vowelsSet4 = vowelsSet.diff(Set(\"i\"))\n        val vowelsSet5\
    \ = vowelsSet.diff(Set(\"o\"))\n        val vowelsSet6 = vowelsSet.diff(Set(\"\
    u\"))\n        val vowelsSet7 = vowelsSet.diff(Set(\"A\"))\n        val vowelsSet8\
    \ = vowelsSet.diff(Set(\"E\"))\n        val vowelsSet9 = vowelsSet.diff(Set(\"\
    I\"))\n        val vowelsSet10 = vowelsSet.diff(Set(\"O\"))\n        val vowelsSet11\
    \ = vowelsSet.diff(Set(\"U\"))\n        val vowelsSet12 = vowelsSet.diff(Set(\"\
    a\"))\n        val vowelsSet13 = vowelsSet.diff(Set(\"e\"))\n        val vowelsSet14\
    \ = vowelsSet.diff(Set(\"i\"))\n        val vowelsSet15 = vowelsSet.diff(Set(\"\
    o\"))\n        val vowelsSet16 = vowelsSet.diff(Set(\"u\"))\n        val vowelsSet17\
    \ = vowelsSet.diff(Set(\"A\"))\n        val vowelsSet18 = vowelsSet.diff(Set(\"\
    E\"))\n        val vowelsSet19 = vowelsSet.diff(Set(\"I\"))\n        val vowelsSet20\
    \ = vowelsSet.diff(Set(\"O\"))\n        val vowelsSet21 = vowelsSet.diff(Set(\"\
    U\"))\n        val vowelsSet22 = vowelsSet.diff(Set(\"a\"))\n        val vowelsSet23\
    \ = vowelsSet.diff(Set(\"e\"))\n        val vowelsSet24 = vowelsSet.diff(Set(\"\
    i\"))\n        val vowelsSet25 = vowelsSet.diff(Set(\"o\"))\n        val vowelsSet26\
    \ = vowelsSet.diff(Set(\"u\"))\n        val vowelsSet27 = vowelsSet.diff(Set(\"\
    A\"))\n        val vowelsSet28 = vowelsSet.diff(Set(\"E\"))\n        val vowelsSet29\
    \ = vowelsSet.diff(Set(\"I\"))\n        val vowelsSet30 = vowelsSet.diff(Set(\"\
    O\"))\n        val vowelsSet31 = vowelsSet.diff(Set(\"U\"))\n        val vowelsSet32\
    \ = vowelsSet.diff(Set(\"a\"))\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk86ntr4q.scala:53:5\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphexu38ah.scala:56:25 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphexu38ah.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet3 = vowelsSet.filter(_\
    \ != \"i\")\n        val vowelsSet4 = vowelsSet.filter(_ != \"o\")\n        val\
    \ vowelsSet5 = vowelsSet.filter(_ != \"e\")\n        val vowelsSet6 = vowelsSet.filter(_\
    \ != \"a\")\n        val vowelsSet7 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet8 = vowelsSet.filter(_ != \"i\")\n        val vowelsSet9 = vowelsSet.filter(_\
    \ != \"o\")\n        val vowelsSet10 = vowelsSet.filter(_ != \"e\")\n        val\
    \ vowelsSet11 = vowelsSet.filter(_ != \"a\")\n        val vowelsSet12 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet13 = vowelsSet.filter(_ != \"i\")\n        val\
    \ vowelsSet14 = vowelsSet.filter(_ != \"o\")\n        val vowelsSet15 = vowelsSet.filter(_\
    \ != \"e\")\n        val vowelsSet16 = vowelsSet.filter(_ != \"a\")\n        val\
    \ vowelsSet17 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet18 = vowelsSet.filter(_\
    \ != \"i\")\n        val vowelsSet19 = vowelsSet.filter(_ != \"o\")\n        val\
    \ vowelsSet20 = vowelsSet.filter(_ != \"e\")\n        val vowelsSet21 = vowelsSet.filter(_\
    \ != \"a\")\n        val vowelsSet22 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet23 = vowelsSet.filter(_ != \"i\")\n        val vowelsSet24 = vowelsSet.filter(_\
    \ != \"o\")\n        val vowelsSet25 = vowelsSet.filter(_ != \"e\")\n        val\
    \ vowelsSet26 = vowelsSet.filter(_ != \"a\")\n        val vowelsSet27 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet28 = vowelsSet.filter(_ != \"i\")\n        val\
    \ vowelsSet29 = vowelsSet.filter(_ != \"o\")\n        val vowelsSet30 = vowelsSet.filter(_\
    \ != \"e\")\n        val vowelsSet31 = vowelsSet.filter(_ != \"a\")\n        val\
    \ vowelsSet32 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet33\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2_4v3wyn.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2_4v3wyn.scala:53:5 ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsLeft = vowels.toList.map(_.length).max\n        val consonantsRight\
    \ = consonants.toList.map(_.length).max\n        val vowelsRight = vowels.toList.map(_.length).min\n\
    \        val consonantsLeft = consonants.toList.map(_.length).min\n        val\
    \ vowelsMeet = vowels.toList.map(_.length).filter(_ > 1).length\n        val consonantsMeet\
    \ = consonants.toList.map(_.length).filter(_ > 1).length\n        val vowelsMeetRight\
    \ = vowels.toList.map(_.length).filter(_ > 1).max\n        val consonantsMeetRight\
    \ = consonants.toList.map(_.length).filter(_ > 1).max\n        val vowelsMeetLeft\
    \ = vowels.toList.map(_.length).filter(_ > 1).min\n        val consonantsMeetLeft\
    \ = consonants.toList.map(_.length).filter(_ > 1).min\n        val vowelsMeetRightLeft\
    \ = vowels.toList.map(_.length).filter(_ > 1).filter(_ < 1).length\n        val\
    \ consonantsMeetRightLeft = consonants.toList.map(_.length).filter(_ > 1).filter(_\
    \ < 1).length\n        val vowelsMeetLeftRight = vowels.toList.map(_.length).filter(_\
    \ > 1).filter(_ < 1).max\n        val consonantsMeetLeftRight = consonants.toList.map(_.length).filter(_\
    \ > 1).filter(_ < 1).max\n        val vowelsMeetRightLeft = vowels.toList.map(_.length).filter(_\
    \ > 1).filter(_ < 1).min\n        val consonantsMeetRightLeft = consonants.toList.map(_.length).filter(_\
    \ > 1).filter(_ < 1).min\n        val vowelsMeetLeftRight = vowels.toList.map(_.length).filter(_\
    \ > 1).filter(_ < 1).min\n        val consonantsMeetLeftRight = consonants.toList.map(_.length).filter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmyg184rm.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mvowelsMeetRightLeft\e[0m\
    \ = vowels.toList.map(_.length).filter(_ > \e[31m1\e[0m).filter(_ < \e[31m1\e\
    [0m).min\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsMeetRightLeft is already defined as \e[33mvalue\e[0m\
    \ \e[35mvowelsMeetRightLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmyg184rm.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mconsonantsMeetRightLeft\e\
    [0m = consonants.toList.map(_.length).filter(_ > \e[31m1\e[0m).filter(_ < \e[31m1\e\
    [0m).min\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsMeetRightLeft is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsMeetRightLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmyg184rm.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mvowelsMeetLeftRight\e[0m\
    \ = vowels.toList.map(_.length).filter(_ > \e[31m1\e[0m).filter(_ < \e[31m1\e\
    [0m).min\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsMeetLeftRight is already defined as \e[33mvalue\e[0m\
    \ \e[35mvowelsMeetLeftRight\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpmyg184rm.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mconsonantsMeetLeftRight\e\
    [0m = consonants.toList.map(_.length).filter\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n        var vowel\
    \ = \"\"\n        var consonantIndex = 0\n        var consonant = \"\"\n     \
    \   var vowelCount = 0\n        var consonantCount = 0\n        var currentVowel\
    \ = \"\"\n        var currentConsonant = \"\"\n        var currentVowelCount =\
    \ 0\n        var currentConsonantCount = 0\n        var currentVowelIndex = 0\n\
    \        var currentConsonantIndex = 0\n        var currentVowelCount = 0\n  \
    \      var currentConsonantCount = 0\n        var currentVowelIndex = 0\n    \
    \    var currentConsonantIndex = 0\n        var currentVowelCount = 0\n      \
    \  var currentConsonantCount = 0\n        var currentVowelIndex = 0\n        var\
    \ currentConsonantIndex = 0\n        var currentVowelCount = 0\n        var currentConsonantCount\
    \ = 0\n        var currentVowelIndex = 0\n        var currentConsonantIndex =\
    \ 0\n        var currentVowelCount = 0\n        var currentConsonantCount = 0\n\
    \        var currentVowelIndex = 0\n        var currentConsonantIndex = 0\n  \
    \      var currentVowelCount = 0\n        var currentConsonantCount = 0\n    \
    \    var currentVowelIndex = 0\n        var currentConsonantIndex = 0\n      \
    \  var currentVowelCount = 0\n        var currentConsonantCount = 0\n        var\
    \ currentVowelIndex = 0\n        var currentConsonantIndex = 0\n        var currentVowelCount\
    \ = 0\n        var currentConsonantCount = 0\n        var currentVowelIndex =\
    \ 0\n        var currentConsonantIndex = 0\n        var currentVowelCount = 0\n\
    \        var currentConsonantCount = 0\n        var currentVowelIndex = 0\n  \
    \      var currentConsonantIndex = 0\n        var currentVowelCount = 0\n    \
    \    var currentConsonantCount = 0\n        var currentVowelIndex = 0\n      \
    \  var currentConsonantIndex = 0\n        var currentVowelCount = 0\n        var\
    \ currentConsonantCount = 0\n        var currentVowelIndex = 0\n        var currentConsonantIndex\
    \ = 0\n        var currentVowelCount = 0\n        var currentConsonantCount =\
    \ 0\n        var currentVowelIndex = 0\n        var currentConsonantIndex = 0\n\
    \        var currentVowelCount = 0\n        var currentConsonantCount = 0\n  \
    \      var currentVowelIndex = 0\n        var currentConsonantIndex = 0\n    \
    \    var currentVowelCount = 0\n        var currentConsonantCount = 0\n      \
    \  var currentVowelIndex = 0\n        var currentConsonantIndex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1kh1tdhi.scala:84:4 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1kh1tdhi.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentVowelCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentVowelCount is already defined as \e[33mvariable\e[0m\
    \ \e[35mcurrentVowelCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1kh1tdhi.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mvar\e[0m \e[36mcurrentConsonantCount\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentConsonantCount is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentConsonantCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1kh1tdhi.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mvar\e[0m \e[36mcurrentVowelIndex\e[0m =\
    \ \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mcurrentVowelIndex is already defined as \e[33mvariable\e[0m \e[35mcurrentVowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1kh1tdhi.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mvar\e[0m \e[36mcurrentConsonantIndex\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mcurrentConsonantIndex is already defined as \e[33mvariable\e[0m \e[35mcurrentConsonantIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1kh"
  stdout: ''
  timestamp: 1659799116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val consonants = word.filter(c => !vowels.contains(c))\n        val consonantsCount\
    \ = consonants.size\n        val vowelsCount = consonants.filter(c => vowels.contains(c)).size\n\
    \        if (vowelsCount < consonantsCount) {\n            return \"\"\n     \
    \   }\n        val vowelsIndex = consonants.lastIndexWhere(c => vowels.contains(c))\n\
    \        val vowelsIndex = consonants.lastIndexWhere(c => vowels.contains(c))\n\
    \        if (vowelsIndex < 0 || vowelsIndex > consonantsCount - 1) {\n       \
    \     return \"\"\n        }\n        val vowelsIndex = consonants.lastIndexWhere(c\
    \ => vowels.contains(c))\n        val vowelsIndex = consonants.lastIndexWhere(c\
    \ => vowels.contains(c))\n        if (vowelsIndex < 0 || vowelsIndex > consonantsCount\
    \ - 1) {\n            return \"\"\n        }\n        val vowelsIndex = consonants.lastIndexWhere(c\
    \ => vowels.contains(c))\n        val vowelsIndex = consonants.lastIndexWhere(c\
    \ => vowels.contains(c))\n        if (vowelsIndex < 0 || vowelsIndex > consonantsCount\
    \ - 1) {\n            return \"\"\n        }\n        val vowelsIndex = consonants.lastIndexWhere(c\
    \ => vowels.contains(c))\n        val vowelsIndex = consonants.lastIndexWhere(c\
    \ => vowels.contains(c))\n        if (vowelsIndex < 0 || vowelsIndex > consonantsCount\
    \ - 1) {\n            return \"\"\n        }\n        val vowelsIndex = consonants.lastIndexWhere(c\
    \ => vowels.contains(c))\n        val vowelsIndex = consonants.lastIndexWhere(c\
    \ => vowels.contains(c))\n        if (vowelsIndex < 0 || vowelsIndex > consonantsCount\
    \ - 1) {\n            return \"\"\n        }\n        val vowelsIndex = consonants.lastIndexWhere(c\
    \ => vowels.contains(c))\n        val vowelsIndex = consonants.lastIndexWhere(c\
    \ => vowels.contains(c))\n        if (vowelsIndex < 0 || vowelsIndex > consonantsCount\
    \ - 1) {\n            return \"\"\n        }\n        val vowelsIndex = consonants.lastIndexWhere(c\
    \ => vowels.contains(c))\n        val vowelsIndex = consonants.lastIndexWhere(c\
    \ => vowels.contains(c))\n        if (vowelsIndex < \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjbtf6wz0.scala:59:25 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mif\e[0m (vowelsIndex < \n\e[31m\e[31m \
    \  |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                    \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjbtf6wz0.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = consonants.filter(\e\
    [36mc\e[0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjbtf6wz0.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = consonants.lastIndexWhere(\e\
    [36mc\e[0m => vowels.contains(c))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjbtf6wz0.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = consonants.lastIndexWhere(\e\
    [36mc\e[0m => vowels.contains(c))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjbtf6wz0.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mvo"
  stdout: ''
  timestamp: 1659799118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet3 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet4 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet5 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet6 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7g11jg2u.scala:25:834 ----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet6\e[0m = vowelsSet.diff(Set(\e\
    [31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"\
    u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \"u\n\e[31m\e[31m   |\e[0m                       \
    \              "
  stdout: ''
  timestamp: 1659799116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.count(vowels)\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.count(consonants)\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsIndex\
    \ = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n\
    \        val vowelsIndex = if (vowelsIndex < 0) 0 else vowelsIndex\n        val\
    \ consonantsIndex = if (consonantsIndex < 0) 0 else consonantsIndex\n        val\
    \ vowelsIndex = if (vowelsIndex < 0) 0 else vowelsIndex\n        val consonantsIndex\
    \ = if (consonantsIndex < 0) 0 else consonantsIndex\n        val vowelsIndex =\
    \ if (vowelsIndex < 0) 0 else vowelsIndex\n        val consonantsIndex = if (consonantsIndex\
    \ < 0) 0 else consonantsIndex\n        val vowelsIndex = if (vowelsIndex < 0)\
    \ 0 else vowelsIndex\n        val consonantsIndex = if (consonantsIndex < 0) 0\
    \ else consonantsIndex\n        val vowelsIndex = if (vowelsIndex < 0) 0 else\
    \ vowelsIndex\n        val consonantsIndex = if (consonantsIndex < 0) 0 else consonantsIndex\n\
    \        val vowelsIndex = if (vowelsIndex < 0) 0 else vowelsIndex\n        val\
    \ consonantsIndex = if (consonantsIndex < 0) 0 else consonantsIndex\n        val\
    \ vowelsIndex = if (vowelsIndex < 0) 0 else vowelsIndex\n        val consonantsIndex\
    \ = if (consonantsIndex < 0) 0 else consonantsIndex\n        val vowelsIndex =\
    \ if (vowelsIndex < 0) 0 else vowelsIndex\n        val consonantsIndex = if (consonantsIndex\
    \ < 0) 0 else consonantsIndex\n        val vowelsIndex = if (vowelsIndex < 0)\
    \ 0 else vowelsIndex\n        val consonantsIndex = if (consonantsIndex < 0) 0\
    \ else consonantsIndex\n        val vowelsIndex = if (vowelsIndex < 0) 0 else\
    \ vowelsIndex\n        val consonantsIndex = if (consonantsIndex < 0) 0 else consonantsIndex\n\
    \        val vowelsIndex = if (vowelsIndex < 0) 0 else vowelsIndex\n        val\
    \ consonantsIndex = if (consonantsIndex < 0) 0 else consonantsIndex\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgafux64w.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgafux64w.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = \e[33mif\e[0m (vowelsIndex\
    \ < \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m vowelsIndex\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgafux64w.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = \e[33mif\e[0m\
    \ (consonantsIndex < \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m consonantsIndex\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpgafux64w.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = \e[33mif\e\
    [0m (vowelsIndex < \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m vowelsIndex\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel "
  stdout: ''
  timestamp: 1659799118
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvpde4x0t.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpvpde4x0t.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpvpde4x0t.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpvpde4x0t.scala:37:64 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvpde4x0t.scala:39:126\
    \ -----------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet3 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet4 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet5 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet6 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\",\
    \ \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet7 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet8 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpm5msp72m.scala:27:404 ----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet8\e[0m = vowelsSet.diff(Set(\e\
    [31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"\
    u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \"\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                        unclosed string literal\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpm5msp72m.scala:28:5 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList\n  \
    \      val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowel\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphtbqimjt.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtbqimjt.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtbqimjt.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtbqimjt.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtbqimjt.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defi"
  stdout: ''
  timestamp: 1659799076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCount = vowels.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowel\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkh_argqp.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkh_argqp.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkh_argqp.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkh_argqp.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkh_argqp.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already define"
  stdout: ''
  timestamp: 1659799102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val consonants = word.filter(x => !vowels.contains(x))\n        val consonantsCount\
    \ = consonants.length\n        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val consonantsCount = consonants.filter(x => !vowels.contains(x)).length\n\
    \        val consonantsCount = consonants.filter(x => !vowels.contains(x)).length\n\
    \        val consonantsCount = consonants.filter(x => !vowels.contains(x)).length\n\
    \        val consonantsCount = consonants.filter(x => !vowels.contains(x)).length\n\
    \        val consonantsCount = consonants.filter(x => !vowels.contains(x)).length\n\
    \        val consonantsCount = consonants.filter(x => !vowels.contains(x)).length\n\
    \        val consonantsCount = consonants.filter(x => !vowels.contains(x)).length\n\
    \        val consonantsCount = consonants.filter(x => !vowels.contains(x)).length\n\
    \        val consonantsCount = consonants.filter(x => !vowels.contains(x)).length\n\
    \        val consonantsCount = consonants.filter(x => !vowels.contains(x)).length\n\
    \        val consonantsCount = consonants.filter(x => !vowels.contains(x)).length\n\
    \        val consonantsCount = consonants.filter(x => !vowels.contains(x)).length\n\
    \        val consonantsCount = consonants.filter(x => !vowels.contains(x)).length\n\
    \        val consonantsCount = consonants.filter(x => !vowels.contains(x)).length\n\
    \        val consonantsCount = consonants.filter(x => !vowels.contains(x)).length\n\
    \        val consonantsCount = consonants.filter(x => !vowels.contains(x)).length\n\
    \        val consonantsCount = consonants.filter(x => !vowels.contains(x)).length\n\
    \        val consonantsCount = consonants.filter(x => !vowels.contains(x)).length\n\
    \        val consonantsCount = consonants.filter(x => !vowels.contains(x)).length\n\
    \        val consonantsCount = consonants.filter(x => !vowels.contains(x)).length\n\
    \        val consonantsCount = consonants.filter(x => !vowels.contains(x))\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1z60s_z0.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = consonants.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1z60s_z0.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = consonants.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1z60s_z0.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.filter(\e\
    [36mx\e[0m => !vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1z60s_z0.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.filter(\e\
    [36mx\e[0m => !vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be define"
  stdout: ''
  timestamp: 1659799120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvpde4x0t.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpvpde4x0t.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpvpde4x0t.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpvpde4x0t.scala:37:64 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvpde4x0t.scala:39:126\
    \ -----------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsCount = word.map(x => vowels.contains(x)).count(_)\n        if(vowelsCount\
    \ == 0) \"\"\n        else word.lastOption.flatMap(x => vowels.find(y => y >=\
    \ x && y <= word.last)).orElse(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpgu804crl.scala:20:66 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.map(\e\
    [36mx\e[0m => vowels.contains(x)).count(_)\n\e[31m\e[31m   |\e[0m            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$1 of expanded function:\n\e[31m   |\e[0m   _$1 =>\
    \ word.map(x => vowels.contains(x)).count(_$1).\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpgu804crl.scala:20:56 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.map(\e[36mx\e[0m\
    \ => vowels.contains(x)).count(_)\n\e[31m\e[31m   |\e[0m                     \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                                  Found:    (x : Char)\n\e[31m   |\e[0m     \
    \                                               Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgu804crl.scala:22:64 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m word.lastOption.flatMap(x =>\
    \ vowels.find(y => y >= x && y <= word.last)).orElse(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                ^\e\
    [0m\n\e[31m   |\e[0m                                                    Found:\
    \    (x : Char)\n\e[31m   |\e[0m                                             \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpgu804crl.scala:22:79 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33melse\e[0m word.lastOption.flatMap(x => vowels.find(y =>\
    \ y >= x && y <= word.last)).orElse(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                                                        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Found:\
    \    Char\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659799121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(consonants.contains).length\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowel\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdwmzlhqz.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdwmzlhqz.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount + consonantsCount\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdwmzlhqz.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount is\
    \ already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdwmzlhqz.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount is\
    \ already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdwmzlhqz.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount is\
    \ already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdwmzlhqz.sca"
  stdout: ''
  timestamp: 1659799121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptz2pvetv.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptz2pvetv.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptz2pvetv.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptz2pvetv.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1659799125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount\
    \ = consonants.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount =\
    \ consonants.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount =\
    \ consonants.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount =\
    \ consonants.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount =\
    \ consonants.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount =\
    \ consonants.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount =\
    \ consonant\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu5xqapjr.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu5xqapjr.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpu5xqapjr.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu5xqapjr.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpu5xqapjr.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33"
  stdout: ''
  timestamp: 1659799126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        var vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        var vowelsCount2 = word.filter(c => vowels.contains(c)).size\n      \
    \  var vowelsCount3 = word.filter(c => vowels.contains(c)).size\n        var vowelsCount4\
    \ = word.filter(c => vowels.contains(c)).size\n        var vowelsCount5 = word.filter(c\
    \ => vowels.contains(c)).size\n        var vowelsCount6 = word.filter(c => vowels.contains(c)).size\n\
    \        var vowelsCount7 = word.filter(c => vowels.contains(c)).size\n      \
    \  var vowelsCount8 = word.filter(c => vowels.contains(c)).size\n        var vowelsCount9\
    \ = word.filter(c => vowels.contains(c)).size\n        var vowelsCount10 = word.filter(c\
    \ => vowels.contains(c)).size\n        var vowelsCount11 = word.filter(c => vowels.contains(c)).size\n\
    \        var vowelsCount12 = word.filter(c => vowels.contains(c)).size\n     \
    \   var vowelsCount13 = word.filter(c => vowels.contains(c)).size\n        var\
    \ vowelsCount14 = word.filter(c => vowels.contains(c)).size\n        var vowelsCount15\
    \ = word.filter(c => vowels.contains(c)).size\n        var vowelsCount16 = word.filter(c\
    \ => vowels.contains(c)).size\n        var vowelsCount17 = word.filter(c => vowels.contains(c)).size\n\
    \        var vowelsCount18 = word.filter(c => vowels.contains(c)).size\n     \
    \   var vowelsCount19 = word.filter(c => vowels.contains(c)).size\n        var\
    \ vowelsCount20 = word.filter(c => vowels.contains(c)).size\n        var vowelsCount21\
    \ = word.filter(c => vowels.contains(c)).size\n        var vowelsCount22 = word.filter(c\
    \ => vowels.contains(c)).size\n        var vowelsCount23 = word.filter(c => vowels.contains(c)).size\n\
    \        var vowelsCount24 = word.filter(c => vowels.contains(c)).size\n     \
    \   var vowelsCount25 = word.filter(c => vowels.contains(c)).size\n        var\
    \ vowelsCount26 = word.filter(c => vowels.contains(c)).size\n        var vowelsCount27\
    \ = word.filter(c => vowels.contains(c)).size\n        var vowelsCount28 = word.filter(c\
    \ => vowels.contains(c)).size\n        var vowelsCount29 = word.filter(c => vowels.contains(c)).size\n\
    \        var vowelsCount30 = word.filter(c => vowels.contains(c)).size\n\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbo491d4z.scala:20:59\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount\e\
    [0m = word.filter(\e[36mc\e[0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e\
    [0m                                                           ^\e[0m\n\e[31m \
    \  |\e[0m                                                    Found:    (c : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbo491d4z.scala:21:60\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount2\e\
    [0m = word.filter(\e[36mc\e[0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (c : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbo491d4z.scala:22:60\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount3\e\
    [0m = word.filter(\e[36mc\e[0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (c : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbo491d4z.scala:23:60\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount4\e\
    [0m = word.filter(\e[36mc\e[0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (c : Char)\n\
    \e[31m   |\e[0m               "
  stdout: ''
  timestamp: 1659799132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsSet =\
    \ vowels.toSet\n        val consonantsSet = consonants.toSet\n        val vowelsSetSize\
    \ = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val consonantsSetIterator\
    \ = consonantsSet.iterator\n        val vowelsSetIteratorSize = vowelsSetIterator.size\n\
    \        val consonantsSetIteratorSize = consonantsSetIterator.size\n        val\
    \ vowelsSetIteratorNext = vowelsSetIterator.next\n        val consonantsSetIteratorNext\
    \ = consonantsSetIterator.next\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n\
    \        val consonantsSetIteratorNextSize = consonantsSetIteratorNext.size\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ consonantsSetIteratorNextNext = consonantsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size\n        val\
    \ consonantsSetIteratorNextNextSize = consonantsSetIteratorNextNext.size\n   \
    \     val vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n   \
    \     val consonantsSetIteratorNextNextNext = consonantsSetIteratorNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size\n\
    \        val consonantsSetIteratorNextNextNextSize = consonantsSetIteratorNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val consonantsSetIteratorNextNextNextNext = consonantsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size\n\
    \        val consonantsSetIteratorNextNextNextNextSize = consonantsSetIteratorNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val consonantsSetIteratorNextNextNextNextNext = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppx1ytjf1.scala:46:55 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSetIteratorNextNextNextNextNext\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \       ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmppx1ytjf1.scala:33:62 ------------------------\e[0m\e[0m\n\e[31m33 |\e\
    [0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppx1ytjf1.scala:34:70 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSetIteratorNextNext\e\
    [0m = consonantsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ next is not a member of String - did you mean consonantsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppx1ytjf1.scala:47:5 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsSet = vowels.toSet;\n\
    \        val vowelsSet2 = vowelsSet.subsetOf(vowelsSet);\n        val vowelsSet3\
    \ = vowelsSet.subsetOf(vowelsSet2);\n        val vowelsSet4 = vowelsSet.subsetOf(vowelsSet3);\n\
    \        val vowelsSet5 = vowelsSet.subsetOf(vowelsSet4);\n        val vowelsSet6\
    \ = vowelsSet.subsetOf(vowelsSet5);\n        val vowelsSet7 = vowelsSet.subsetOf(vowelsSet6);\n\
    \        val vowelsSet8 = vowelsSet.subsetOf(vowelsSet7);\n        val vowelsSet9\
    \ = vowelsSet.subsetOf(vowelsSet8);\n        val vowelsSet10 = vowelsSet.subsetOf(vowelsSet9);\n\
    \        val vowelsSet11 = vowelsSet.subsetOf(vowelsSet10);\n        val vowelsSet12\
    \ = vowelsSet.subsetOf(vowelsSet11);\n        val vowelsSet13 = vowelsSet.subsetOf(vowelsSet12);\n\
    \        val vowelsSet14 = vowelsSet.subsetOf(vowelsSet13);\n        val vowelsSet15\
    \ = vowelsSet.subsetOf(vowelsSet14);\n        val vowelsSet16 = vowelsSet.subsetOf(vowelsSet15);\n\
    \        val vowelsSet17 = vowelsSet.subsetOf(vowelsSet16);\n        val vowelsSet18\
    \ = vowelsSet.subsetOf(vowelsSet17);\n        val vowelsSet19 = vowelsSet.subsetOf(vowelsSet18);\n\
    \        val vowelsSet20 = vowelsSet.subsetOf(vowelsSet19);\n        val vowelsSet21\
    \ = vowelsSet.subsetOf(vowelsSet20);\n        val vowelsSet22 = vowelsSet.subsetOf(vowelsSet21);\n\
    \        val vowelsSet23 = vowelsSet.subsetOf(vowelsSet22);\n        val vowelsSet24\
    \ = vowelsSet.subsetOf(vowelsSet23);\n        val vowelsSet25 = vowelsSet.subsetOf(vowelsSet24);\n\
    \        val vowelsSet26 = vowelsSet.subsetOf(vowelsSet25);\n        val vowelsSet27\
    \ = vowelsSet.subsetOf(vowelsSet26);\n        val vowelsSet28 = vowelsSet.subsetOf(vowelsSet27);\n\
    \        val vowelsSet29 = vowelsSet.subsetOf(vowelsSet28);\n        val vowelsSet30\
    \ = vowel\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq_a4phey.scala:22:44\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet3\e\
    [0m = vowelsSet.subsetOf(vowelsSet2);\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (vowelsSet2 : Boolean)\n\e[31m   |\e[0m          \
    \                        Required: scala.collection.Set[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq_a4phey.scala:23:44 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet4\e[0m = vowelsSet.subsetOf(vowelsSet3);\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    (vowelsSet3 :\
    \ Boolean)\n\e[31m   |\e[0m                                  Required: scala.collection.Set[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq_a4phey.scala:24:44\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet5\e\
    [0m = vowelsSet.subsetOf(vowelsSet4);\n\e[31m\e[31m   |\e[0m                 \
    \                           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    (vowelsSet4 : Boolean)\n\e[31m   |\e[0m          \
    \                        Required: scala.collection.Set[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq_a4phey.scala:25:44 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet6\e[0m = vowelsSet.subsetOf(vowelsSet5);\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    (vowelsSet5 :\
    \ Boolean)\n\e[31m   |\e[0m                                  Required: scala.collection.Set[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when co"
  stdout: ''
  timestamp: 1659799133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet3 = vowelsSet.diff(vowelsSet2)\n        val vowelsSet4 =\
    \ vowelsSet.diff(vowelsSet3)\n        val vowelsSet5 = vowelsSet.diff(vowelsSet4)\n\
    \        val vowelsSet6 = vowelsSet.diff(vowelsSet5)\n        val vowelsSet7 =\
    \ vowelsSet.diff(vowelsSet6)\n        val vowelsSet8 = vowelsSet.diff(vowelsSet7)\n\
    \        val vowelsSet9 = vowelsSet.diff(vowelsSet8)\n        val vowelsSet10\
    \ = vowelsSet.diff(vowelsSet9)\n        val vowelsSet11 = vowelsSet.diff(vowelsSet10)\n\
    \        val vowelsSet12 = vowelsSet.diff(vowelsSet11)\n        val vowelsSet13\
    \ = vowelsSet.diff(vowelsSet12)\n        val vowelsSet14 = vowelsSet.diff(vowelsSet13)\n\
    \        val vowelsSet15 = vowelsSet.diff(vowelsSet14)\n        val vowelsSet16\
    \ = vowelsSet.diff(vowelsSet15)\n        val vowelsSet17 = vowelsSet.diff(vowelsSet16)\n\
    \        val vowelsSet18 = vowelsSet.diff(vowelsSet17)\n        val vowelsSet19\
    \ = vowelsSet.diff(vowelsSet18)\n        val vowelsSet20 = vowelsSet.diff(vowelsSet19)\n\
    \        val vowelsSet21 = vowelsSet.diff(vowelsSet20)\n        val vowelsSet22\
    \ = vowelsSet.diff(vowelsSet21)\n        val vowelsSet23 = vowelsSet.diff(vowelsSet22)\n\
    \        val vowelsSet24 = vowelsSet.diff(vowelsSet23)\n        val vowelsSet25\
    \ = vowelsSet.diff(vowelsSet24)\n        val vowelsSet26 = vowelsSet.diff(vowelsSet25)\n\
    \        val vowelsSet27 = vowelsSet.diff(vowelsSet26)\n        val vowelsSet28\
    \ = vowelsSet.diff(vowelsSet27)\n        val vowelsSet29 = vowelsSet.diff(vowelsSet28)\n\
    \        val vowelsSet30 = vowelsSet.diff(vowelsSet29)\n        val vowelsSet31\
    \ = vowelsSet.diff(vowelsSet30)\n        val vowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpah2y8hsq.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpah2y8hsq.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        var vowels : mutable.Set[Char]\
    \ = mutable.Set()\n        var vowelIndex : Int = -1\n        var vowelIndex2\
    \ : Int = -1\n        var vowelIndex3 : Int = -1\n        var vowelIndex4 : Int\
    \ = -1\n        var vowelIndex5 : Int = -1\n        var vowelIndex6 : Int = -1\n\
    \        var vowelIndex7 : Int = -1\n        var vowelIndex8 : Int = -1\n    \
    \    var vowelIndex9 : Int = -1\n        var vowelIndex10 : Int = -1\n       \
    \ var vowelIndex11 : Int = -1\n        var vowelIndex12 : Int = -1\n        var\
    \ vowelIndex13 : Int = -1\n        var vowelIndex14 : Int = -1\n        var vowelIndex15\
    \ : Int = -1\n        var vowelIndex16 : Int = -1\n        var vowelIndex17 :\
    \ Int = -1\n        var vowelIndex18 : Int = -1\n        var vowelIndex19 : Int\
    \ = -1\n        var vowelIndex20 : Int = -1\n        var vowelIndex21 : Int =\
    \ -1\n        var vowelIndex22 : Int = -1\n        var vowelIndex23 : Int = -1\n\
    \        var vowelIndex24 : Int = -1\n        var vowelIndex25 : Int = -1\n  \
    \      var vowelIndex26 : Int = -1\n        var vowelIndex27 : Int = -1\n    \
    \    var vowelIndex28 : Int = -1\n        var vowelIndex29 : Int = -1\n      \
    \  var vowelIndex30 : Int = -1\n        var vowelIndex31 : Int = -1\n        var\
    \ vowelIndex32 : Int = -1\n        var vowelIndex33 : Int = -1\n        var vowelIndex34\
    \ : Int = -1\n        var vowelIndex35 : Int = -1\n        var vowelIndex36 :\
    \ Int = -1\n        var vowelIndex37 : Int = -1\n        var vowelIndex38 : Int\
    \ = -1\n        var vowelIndex39 : Int = -1\n        var vowelIndex40 : Int =\
    \ -1\n        var vowelIndex41 : Int = -1\n        var vowelIndex42 : Int = -1\n\
    \        var vowelIndex43 : Int = -1\n        var vowelIndex44 : Int = -1\n  \
    \      var vowelIndex45 : Int = -1\n        var vowelIndex46 : Int = -1\n    \
    \    var vowelIndex47 : Int = -1\n        var vowelIndex48 : Int = -1\n      \
    \  var vowelIndex49 : Int = -1\n        var vowelIndex50 : Int = -1\n        var\
    \ vowelIndex51 : Int = -1\n        var vowelIndex52 : Int = -1\n        var vowelIndex53\
    \ : Int = -1\n        var vowelIndex54 : Int = -1\n        var vowelIndex55 :\
    \ Int = -1\n        var vowelIndex56\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp36fq8509.scala:76:4 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp36fq8509.scala:19:21\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e\
    [36mvowels\e[0m : mutable.Set[\e[35mChar\e[0m] = mutable.Set()\n\e[31m\e[31m \
    \  |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp36fq8509.scala:19:41\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e\
    [36mvowels\e[0m : mutable.Set[\e[35mChar\e[0m] = mutable.Set()\n\e[31m\e[31m \
    \  |\e[0m                                         ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                         Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp36fq8509.scala:76:5 ---------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsSet = vowels.toSet\n        val vowelsSetIterator = vowels.iterator\n\
    \        val vowelsSetIteratorNext = vowelsSetIterator.next\n        val vowelsSetIteratorPrev\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n        val\
    \ vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextPrev = vowelsSetIteratorNextNextNext.prev\n   \
    \     val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextPrev = vowelsSetIteratorNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgbse0fud.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpgbse0fud.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpgbse0fud.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpgbse0fud.scala:37:64 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgbse0fud.scala:38:72\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.prev\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(c => vowels.contains(c)).size\n\
    \        val vowelsCount2 = word.filter(c => vowels.contains(c)).size\n      \
    \  val vowelsCount3 = word.filter(c => vowels.contains(c)).size\n        val vowelsCount4\
    \ = word.filter(c => vowels.contains(c)).size\n        val vowelsCount5 = word.filter(c\
    \ => vowels.contains(c)).size\n        val vowelsCount6 = word.filter(c => vowels.contains(c)).size\n\
    \        val vowelsCount7 = word.filter(c => vowels.contains(c)).size\n      \
    \  val vowelsCount8 = word.filter(c => vowels.contains(c)).size\n        val vowelsCount9\
    \ = word.filter(c => vowels.contains(c)).size\n        val vowelsCount10 = word.filter(c\
    \ => vowels.contains(c)).size\n        val vowelsCount11 = word.filter(c => vowels.contains(c)).size\n\
    \        val vowelsCount12 = word.filter(c => vowels.contains(c)).size\n     \
    \   val vowelsCount13 = word.filter(c => vowels.contains(c)).size\n        val\
    \ vowelsCount14 = word.filter(c => vowels.contains(c)).size\n        val vowelsCount15\
    \ = word.filter(c => vowels.contains(c)).size\n        val vowelsCount16 = word.filter(c\
    \ => vowels.contains(c)).size\n        val vowelsCount17 = word.filter(c => vowels.contains(c)).size\n\
    \        val vowelsCount18 = word.filter(c => vowels.contains(c)).size\n     \
    \   val vowelsCount19 = word.filter(c => vowels.contains(c)).size\n        val\
    \ vowelsCount20 = word.filter(c => vowels.contains(c)).size\n        val vowelsCount21\
    \ = word.filter(c => vowels.contains(c)).size\n        val vowelsCount22 = word.filter(c\
    \ => vowels.contains(c)).size\n        val vowelsCount23 = word.filter(c => vowels.contains(c)).size\n\
    \        val vowelsCount24 = word.filter(c => vowels.contains(c)).size\n     \
    \   val vowelsCount25 = word.filter(c => vowels.contains(c)).size\n        val\
    \ vowelsCount26 = word.filter(c => vowels.contains(c)).size\n        val vowelsCount27\
    \ = word.filter(c => vowels.contains(c)).size\n        val vowelsCount28 = word.filter(c\
    \ => vowels.contains(c)).size\n        val vowelsCount\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb6268tu1.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpb6268tu1.scala:20:59 --------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mc\e[0m => vowels.contains(c)).size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \  Found:    (c : Char)\n\e[31m   |\e[0m                                     \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpb6268tu1.scala:21:60 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsCount2\e[0m = word.filter(\e[36mc\e\
    [0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e[0m                       \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                                    Found:    (c : Char)\n\e[31m   |\e[0m   \
    \                                                 Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb6268tu1.scala:22:60 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount3\e[0m = word.filter(\e\
    [36mc\e[0m => vowels.contains(c)).size\n\e[31m\e[31m   |\e[0m                \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                           Found:    (c : Char)\n\e[31m   |\e\
    [0m                                                    Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb6268tu1.scala:23:60 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount4\e[0m = word.filter(\e\
    [36mc\e[0m => vowels.contains(c)).size\n\e[31m\e["
  stdout: ''
  timestamp: 1659799133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.count(vowels)\n\
    \        val vowelsCount = word.count(vowels.toList)\n        val vowelsCount\
    \ = word.count(vowels.toSet)\n        val vowelsCount = word.count(vowels.toSeq)\n\
    \        val vowelsCount = word.count(vowels.toSeq.toSet)\n        val vowelsCount\
    \ = word.count(vowels.toSeq.toSeq)\n        val vowelsCount = word.count(vowels.toSeq.toSeq.toSet)\n\
    \        val vowelsCount = word.count(vowels.toSeq.toSeq.toSeq)\n        val vowelsCount\
    \ = word.count(vowels.toSeq.toSeq.toSeq.toSet)\n        val vowelsCount = word.count(vowels.toSeq.toSeq.toSeq.toSeq)\n\
    \        val vowelsCount = word.count(vowels.toSeq.toSeq.toSeq.toSeq.toSet)\n\
    \        val vowelsCount = word.count(vowels.toSeq.toSeq.toSeq.toSeq.toSeq)\n\
    \        val vowelsCount = word.count(vowels.toSeq.toSeq.toSeq.toSeq.toSeq.toSet)\n\
    \        val vowelsCount = word.count(vowels.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq)\n\
    \        val vowelsCount = word.count(vowels.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq.toSet)\n\
    \        val vowelsCount = word.count(vowels.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq)\n\
    \        val vowelsCount = word.count(vowels.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq.toSet)\n\
    \        val vowelsCount = word.count(vowels.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq)\n\
    \        val vowelsCount = word.count(vowels.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq.toSet)\n\
    \        val vowelsCount = word.count(vowels.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq)\n\
    \        val vowelsCount = word.count(vowels.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq.toSet)\n\
    \        val vowelsCount = word.count(vowels.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq)\n\
    \        val vowelsCount = word.count(vowels.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq.toSet)\n\
    \        val vowelsCount = word.count(vowels.toSeq.toSeq\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps8og9m3u.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps8og9m3u.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = word.count(vowels.toList)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps8og9m3u.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = word.count(vowels.toSet)\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps8og9m3u.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = word.count(vowels.toSeq)\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps8og9m3u.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = word.count(vowels.toSeq.toSet)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Nam"
  stdout: ''
  timestamp: 1659799131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextValue\
    \ = vowelsSetIterator.nextValue\n        val vowelsSetIteratorNextKey = vowelsSetIterator.nextKey\n\
    \        val vowelsSetIteratorNextKeyValue = vowelsSetIterator.nextKeyValue\n\
    \        val vowelsSetIteratorNextKey = vowelsSetIterator.nextKey\n        val\
    \ vowelsSetIteratorNextKeyValue = vowelsSetIterator.nextKeyValue\n        val\
    \ vowelsSetIteratorNextKey = vowelsSetIterator.nextKey\n        val vowelsSetIteratorNextKeyValue\
    \ = vowelsSetIterator.nextKeyValue\n        val vowelsSetIteratorNextKey = vowelsSetIterator.nextKey\n\
    \        val vowelsSetIteratorNextKeyValue = vowelsSetIterator.nextKeyValue\n\
    \        val vowelsSetIteratorNextKey = vowelsSetIterator.nextKey\n        val\
    \ vowelsSetIteratorNextKeyValue = vowelsSetIterator.nextKeyValue\n        val\
    \ vowelsSetIteratorNextKey = vowelsSetIterator.nextKey\n        val vowelsSetIteratorNextKeyValue\
    \ = vowelsSetIterator.nextKeyValue\n        val vowelsSetIteratorNextKey = vowelsSetIterator.nextKey\n\
    \        val vowelsSetIteratorNextKeyValue = vowelsSetIterator.nextKeyValue\n\
    \        val vowelsSetIteratorNextKey = vowelsSetIterator.nextKey\n        val\
    \ vowelsSetIteratorNextKeyValue = vowelsSetIterator.nextKeyValue\n        val\
    \ vowelsSetIteratorNextKey = vowelsSetIterator.nextKey\n        val vowelsSetIteratorNextKeyValue\
    \ = vowelsSetIterator.nextKeyValue\n        val vowelsSetIteratorNextKey = vowelsSetIterator.nextKey\n\
    \        val vowelsSetIteratorNextKeyValue = vowelsSetIterator.nextKeyValue\n\
    \        val vowelsSetIteratorNextKey = vowelsSetIterator.nextKey\n        val\
    \ vowelsSetIteratorNextKeyValue = vowelsSetIterator.nextKeyValue\n        val\
    \ vowelsSetIteratorNextKey = vowelsSetIterator.nextKey\n        val vowelsSetIteratorNextKeyValue\
    \ = vowelsSetIterator.nextKeyValue\n        val vowelsSetIteratorNextKey = vowelsSetIterator.nextKey\n\
    \        val vowelsSetIteratorNext\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprrdglnun.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprrdglnun.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextKey\e[0m = vowelsSetIterator.nextKey\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsSetIteratorNextKey is already defined as \e[33mvalue\e[0m\
    \ \e[35mvowelsSetIteratorNextKey\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprrdglnun.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextKeyValue\e\
    [0m = vowelsSetIterator.nextKeyValue\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextKeyValue is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextKeyValue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprrdglnun.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextKey\e\
    [0m = vowelsSetIterator.nextKey\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextKey is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextKey\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprrdglnun.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextKeyValue\e\
    [0m = vowelsSetIterator.nextKeyValue\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0"
  stdout: ''
  timestamp: 1659799130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsAndConsonants\
    \ = vowels ++ consonants\n        val vowelsAndConsonantsReverse = vowelsAndConsonants.reverse\n\
    \        val vowelsAndConsonantsReverseReverse = vowelsAndConsonantsReverse.reverse\n\
    \        val vowelsAndConsonantsReverseReverse2 = vowelsAndConsonantsReverse.reverse.reverse\n\
    \        val vowelsAndConsonantsReverseReverse3 = vowelsAndConsonantsReverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplt2gosbu.scala:22:61 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsReverse\e\
    [0m = vowelsAndConsonants.reverse\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse\
    \ is not a member of scala.collection.mutable.Set[String] - did you mean vowelsAndConsonants.reversed?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplt2gosbu.scala:26:5 ---------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowels.toSet.reverse\n        val vowelsSet3 = vowelsSet2.reverse\n\
    \        val vowelsSet4 = vowelsSet3.reverse\n        val vowelsSet5 = vowelsSet4.reverse\n\
    \        val vowelsSet6 = vowelsSet5.reverse\n        val vowelsSet7 = vowelsSet6.reverse\n\
    \        val vowelsSet8 = vowelsSet7.reverse\n        val vowelsSet9 = vowelsSet8.reverse\n\
    \        val vowelsSet10 = vowelsSet9.reverse\n        val vowelsSet11 = vowelsSet10.reverse\n\
    \        val vowelsSet12 = vowelsSet11.reverse\n        val vowelsSet13 = vowelsSet12.reverse\n\
    \        val vowelsSet14 = vowelsSet13.reverse\n        val vowelsSet15 = vowelsSet14.reverse\n\
    \        val vowelsSet16 = vowelsSet15.reverse\n        val vowelsSet17 = vowelsSet16.reverse\n\
    \        val vowelsSet18 = vowelsSet17.reverse\n        val vowelsSet19 = vowelsSet18.reverse\n\
    \        val vowelsSet20 = vowelsSet19.reverse\n        val vowelsSet21 = vowelsSet20.reverse\n\
    \        val vowelsSet22 = vowelsSet21.reverse\n        val vowelsSet23 = vowelsSet22.reverse\n\
    \        val vowelsSet24 = vowelsSet23.reverse\n        val vowelsSet25 = vowelsSet24.reverse\n\
    \        val vowelsSet26 = vowelsSet25.reverse\n        val vowelsSet27 = vowelsSet26.reverse\n\
    \        val vowelsSet28 = vowelsSet27.reverse\n        val vowelsSet29 = vowelsSet28.reverse\n\
    \        val vowelsSet30 = vowelsSet29.reverse\n        val vowelsSet31 = vowelsSet30.reverse\n\
    \        val vowelsSet32 = vowelsSet31.reverse\n        val vowelsSet33 = vowelsSet32.reverse\n\
    \        val vowelsSet34 = vowelsSet33.reverse\n        val vowelsSet35 = vowelsSet34.reverse\n\
    \        val vowelsSet36 = vowelsSet35.reverse\n        val vowelsSet37 = vowelsSet36.reverse\n\
    \        val vowelsSet38 = vowelsSet37.reverse\n        val vowelsSet39 = vowelsSet38.reverse\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmphvnmo59x.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphvnmo59x.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphvnmo59x.scala:60:5 ---------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn3b9xt69.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpn3b9xt69.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpn3b9xt69.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpn3b9xt69.scala:37:64 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn3b9xt69.scala:39:126\
    \ -----------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.size\n        val consonantsCount = consonants.size\n        val vowelsIndex\
    \ = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n\
    \        val vowelsCount = vowels.size\n        val consonantsCount = consonants.size\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowels.size\n\
    \        val consonantsCount = consonants.size\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsCount = vowels.size\n        val consonantsCount = consonants.size\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowels.size\n\
    \        val consonantsCount = consonants.size\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsCount = vowels.size\n        val consonantsCount = consonants.size\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowels.size\n\
    \        val consonantsCount = consonants.size\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsCount = vowels.size\n        val consonantsCount = consonants.size\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowels.size\n\
    \        val consonantsCount = consonants.size\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowel\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwjoxeu_f.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwjoxeu_f.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowels.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwjoxeu_f.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwjoxeu_f.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwjoxeu_f.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel defin"
  stdout: ''
  timestamp: 1659799105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorPrev\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n\
    \        val vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n\
    \        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev\
    \ = vowelsSetIteratorNext.prev\n        val vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n\
    \        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev\
    \ = vowelsSetIteratorNext.prev\n        val vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n\
    \        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev\
    \ = vowelsSetIteratorNext.prev\n        val vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n\
    \        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev\
    \ = vowelsSetIteratorNext.prev\n        val vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n\
    \        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev\
    \ = vowelsSetIteratorNext.prev\n        val vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n\
    \        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev\
    \ = vowelsSetIteratorNext.prev\n        val vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n\
    \        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev\
    \ = vowelsSetIteratorNext.prev\n        val vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6c67sovu.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6c67sovu.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6c67sovu.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6c67sovu.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /t"
  stdout: ''
  timestamp: 1659799132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsSet = vowels.toSet;\n\
    \        val vowelsSet2 = vowelsSet.diff(word);\n        val vowelsSet3 = vowelsSet2.diff(word);\n\
    \        val vowelsSet4 = vowelsSet3.diff(word);\n        val vowelsSet5 = vowelsSet4.diff(word);\n\
    \        val vowelsSet6 = vowelsSet5.diff(word);\n        val vowelsSet7 = vowelsSet6.diff(word);\n\
    \        val vowelsSet8 = vowelsSet7.diff(word);\n        val vowelsSet9 = vowelsSet8.diff(word);\n\
    \        val vowelsSet10 = vowelsSet9.diff(word);\n        val vowelsSet11 = vowelsSet10.diff(word);\n\
    \        val vowelsSet12 = vowelsSet11.diff(word);\n        val vowelsSet13 =\
    \ vowelsSet12.diff(word);\n        val vowelsSet14 = vowelsSet13.diff(word);\n\
    \        val vowelsSet15 = vowelsSet14.diff(word);\n        val vowelsSet16 =\
    \ vowelsSet15.diff(word);\n        val vowelsSet17 = vowelsSet16.diff(word);\n\
    \        val vowelsSet18 = vowelsSet17.diff(word);\n        val vowelsSet19 =\
    \ vowelsSet18.diff(word);\n        val vowelsSet20 = vowelsSet19.diff(word);\n\
    \        val vowelsSet21 = vowelsSet20.diff(word);\n        val vowelsSet22 =\
    \ vowelsSet21.diff(word);\n        val vowelsSet23 = vowelsSet22.diff(word);\n\
    \        val vowelsSet24 = vowelsSet23.diff(word);\n        val vowelsSet25 =\
    \ vowelsSet24.diff(word);\n        val vowelsSet26 = vowelsSet25.diff(word);\n\
    \        val vowelsSet27 = vowelsSet26.diff(word);\n        val vowelsSet28 =\
    \ vowelsSet27.diff(word);\n        val vowelsSet29 = vowelsSet28.diff(word);\n\
    \        val vowelsSet30 = vowelsSet29.diff(word);\n        val vowelsSet31 =\
    \ vowelsSet30.diff(word);\n        val vowelsSet32 = vowelsSet31.diff(word);\n\
    \        val vowelsSet33 = vowelsSet32.diff(word);\n        val vowelsSet34 =\
    \ vowelsSet33.diff(word);\n\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp546wkmyr.scala:21:40\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e\
    [0m = vowelsSet.diff(word);\n\e[31m\e[31m   |\e[0m                           \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (word : String)\n\e[31m   |\e[0m                                  Required:\
    \ scala.collection.Set[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp546wkmyr.scala:22:41 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsSet3\e[0m = vowelsSet2.diff(word);\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (word : String)\n\e[31m\
    \   |\e[0m                                  Required: scala.collection.Set[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp546wkmyr.scala:23:41\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet4\e\
    [0m = vowelsSet3.diff(word);\n\e[31m\e[31m   |\e[0m                          \
    \               ^^^^\e[0m\n\e[31m   |\e[0m                                  Found:\
    \    (word : String)\n\e[31m   |\e[0m                                  Required:\
    \ scala.collection.Set[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp546wkmyr.scala:24:41 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsSet5\e[0m = vowelsSet4.diff(word);\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  Found:    (word : String)\n\e[31m\
    \   |\e[0m                                  Required: scala.collection.Set[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp546wkmyr.scala:25:41\
    \ --------"
  stdout: ''
  timestamp: 1659799135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet3 = vowelsSet.diff(vowelsSet2)\n        val vowelsSet4 =\
    \ vowelsSet.diff(vowelsSet3)\n        val vowelsSet5 = vowelsSet.diff(vowelsSet4)\n\
    \        val vowelsSet6 = vowelsSet.diff(vowelsSet5)\n        val vowelsSet7 =\
    \ vowelsSet.diff(vowelsSet6)\n        val vowelsSet8 = vowelsSet.diff(vowelsSet7)\n\
    \        val vowelsSet9 = vowelsSet.diff(vowelsSet8)\n        val vowelsSet10\
    \ = vowelsSet.diff(vowelsSet9)\n        val vowelsSet11 = vowelsSet.diff(vowelsSet10)\n\
    \        val vowelsSet12 = vowelsSet.diff(vowelsSet11)\n        val vowelsSet13\
    \ = vowelsSet.diff(vowelsSet12)\n        val vowelsSet14 = vowelsSet.diff(vowelsSet13)\n\
    \        val vowelsSet15 = vowelsSet.diff(vowelsSet14)\n        val vowelsSet16\
    \ = vowelsSet.diff(vowelsSet15)\n        val vowelsSet17 = vowelsSet.diff(vowelsSet16)\n\
    \        val vowelsSet18 = vowelsSet.diff(vowelsSet17)\n        val vowelsSet19\
    \ = vowelsSet.diff(vowelsSet18)\n        val vowelsSet20 = vowelsSet.diff(vowelsSet19)\n\
    \        val vowelsSet21 = vowelsSet.diff(vowelsSet20)\n        val vowelsSet22\
    \ = vowelsSet.diff(vowelsSet21)\n        val vowelsSet23 = vowelsSet.diff(vowelsSet22)\n\
    \        val vowelsSet24 = vowelsSet.diff(vowelsSet23)\n        val vowelsSet25\
    \ = vowelsSet.diff(vowelsSet24)\n        val vowelsSet26 = vowelsSet.diff(vowelsSet25)\n\
    \        val vowelsSet27 = vowelsSet.diff(vowelsSet26)\n        val vowelsSet28\
    \ = vowelsSet.diff(vowelsSet27)\n        val vowelsSet29 = vowelsSet.diff(vowelsSet28)\n\
    \        val vowelsSet30 = vowelsSet.diff(vowelsSet29)\n        val vowelsSet31\
    \ = vowelsSet.diff(vowelsSet30)\n        val vowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpah2y8hsq.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpah2y8hsq.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowel = \"\"\n        var index\
    \ = 0\n        val wordLength = word.length\n        while (index < wordLength)\
    \ {\n            val char = word.charAt(index)\n            if (vowels.contains(char))\
    \ {\n                vowel = char\n                index = index + 1\n       \
    \     } else {\n                index = index + 1\n            }\n        }\n\
    \        return vowel\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgynk_kxm.scala:25:32\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (vowels.contains(char))\
    \ {\n\e[31m\e[31m   |\e[0m                                ^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                Found:    (char : Char)\n\e[31m   |\e\
    [0m                                Required: String\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpgynk_kxm.scala:26:24 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                vowel = char\n\e[31m\e[31m   |\e[0m \
    \                       ^^^^\e[0m\n\e[31m   |\e[0m                        Found:\
    \    (char : Char)\n\e[31m   |\e[0m                        Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowels.toSet.reverse\n        val vowelsSet3 = vowelsSet2.reverse\n\
    \        val vowelsSet4 = vowelsSet3.reverse\n        val vowelsSet5 = vowelsSet4.reverse\n\
    \        val vowelsSet6 = vowelsSet5.reverse\n        val vowelsSet7 = vowelsSet6.reverse\n\
    \        val vowelsSet8 = vowelsSet7.reverse\n        val vowelsSet9 = vowelsSet8.reverse\n\
    \        val vowelsSet10 = vowelsSet9.reverse\n        val vowelsSet11 = vowelsSet10.reverse\n\
    \        val vowelsSet12 = vowelsSet11.reverse\n        val vowelsSet13 = vowelsSet12.reverse\n\
    \        val vowelsSet14 = vowelsSet13.reverse\n        val vowelsSet15 = vowelsSet14.reverse\n\
    \        val vowelsSet16 = vowelsSet15.reverse\n        val vowelsSet17 = vowelsSet16.reverse\n\
    \        val vowelsSet18 = vowelsSet17.reverse\n        val vowelsSet19 = vowelsSet18.reverse\n\
    \        val vowelsSet20 = vowelsSet19.reverse\n        val vowelsSet21 = vowelsSet20.reverse\n\
    \        val vowelsSet22 = vowelsSet21.reverse\n        val vowelsSet23 = vowelsSet22.reverse\n\
    \        val vowelsSet24 = vowelsSet23.reverse\n        val vowelsSet25 = vowelsSet24.reverse\n\
    \        val vowelsSet26 = vowelsSet25.reverse\n        val vowelsSet27 = vowelsSet26.reverse\n\
    \        val vowelsSet28 = vowelsSet27.reverse\n        val vowelsSet29 = vowelsSet28.reverse\n\
    \        val vowelsSet30 = vowelsSet29.reverse\n        val vowelsSet31 = vowelsSet30.reverse\n\
    \        val vowelsSet32 = vowelsSet31.reverse\n        val vowelsSet33 = vowelsSet32.reverse\n\
    \        val vowelsSet34 = vowelsSet33.reverse\n        val vowelsSet35 = vowelsSet34.reverse\n\
    \        val vowelsSet36 = vowelsSet35.reverse\n        val vowelsSet37 = vowelsSet36.reverse\n\
    \        val vowelsSet38 = vowelsSet37.reverse\n        val vowelsSet39 = vowelsSet38.reverse\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpjsenkhk3.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpjsenkhk3.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjsenkhk3.scala:60:5 ---------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorPrev\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n\
    \        val vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n        val\
    \ vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n\
    \        val vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n        val\
    \ vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n\
    \        val vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n        val\
    \ vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n\
    \        val vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptjkh753f.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptjkh753f.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.prev\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjkh753f.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjkh753f.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptjkh753f.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextPrev\e\
    [0m = vowelsSetIteratorNextNext.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIt"
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.size\n        val consonantsCount = consonants.size\n        val vowelsIndexes\
    \ = vowels.toList.zipWithIndex.toMap\n        val consonantsIndexes = consonants.toList.zipWithIndex.toMap\n\
    \        val vowelsIndexesCount = vowelsIndexes.size\n        val consonantsIndexesCount\
    \ = consonantsIndexes.size\n        val vowelsIndexesIndexes = vowelsIndexes.toSeq.sortBy(_._1).reverse\n\
    \        val consonantsIndexesIndexes = consonantsIndexes.toSeq.sortBy(_._1).reverse\n\
    \        val vowelsIndexesIndexesCount = vowelsIndexesIndexes.size\n        val\
    \ consonantsIndexesIndexesCount = consonantsIndexesIndexes.size\n        val vowelsIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexes.size\n        val vowelsIndexesIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexes.size\n        val vowelsIndexesIndexesIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexesIndexes.size\n        val vowelsIndexesIndexesIndexesIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexesIndexesIndexes.size\n        val vowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexesIndexesIndexesIndexes.size\n        val vowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexes.size\n        val\
    \ vowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesCount =\
    \ vowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes.size\n      \
    \  val vowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes.size\n\
    \        val vowelsIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps6r0e6z4.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps6r0e6z4.scala:31:47\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsIndexesIndexesIndexesCount\e[0m = vowelsIndexesIndexesIndexes.size\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: vowelsIndexesIndexesIndexes\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps6r0e6z4.scala:32:54\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsIndexesIndexesIndexesIndexesCount\e[0m = vowelsIndexesIndexesIndexes.size\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: vowelsIndexesIndexesIndexes\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps6r0e6z4.scala:33:61\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsIndexesIndexesIndexesIndexesIndexesCount\e[0m = vowelsIndexesIndexesIndexesIndexes.size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \            Not found: vowelsIndexesIndexesIndexesIndexes\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmps6r0e6z4.scala:34:68 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndexesIndexesIndexesIndexesIndexesIndexesCount\e\
    [0m = vowelsIndexesIndexesIndexesIndexesIndexes.size\n\e[31m\e[31m   |\e[0m  \
    \                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsLength = vowelsIndex\
    \ - vowelsCount\n        val consonantsLength = consonantsIndex - consonantsCount\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsLength = vowelsIndex\
    \ - vowelsCount\n        val consonantsLength = consonantsIndex - consonantsCount\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsLength = vowelsIndex\
    \ - vowelsCount\n        val consonantsLength = consonantsIndex - consonantsCount\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsLength = vowelsIndex\
    \ - vowelsCount\n        val consonantsLength = consonantsIndex - consonantsCount\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsLength = vowelsIndex\
    \ - vowelsCount\n        val consonantsLength = consonantsIndex - consonantsCount\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsLength = vowelsIndex\
    \ - vowelsCount\n        val consonantsLength = consonantsIndex - consonantsCount\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsLength = vowelsIndex\
    \ - vowelsCount\n        val consonantsLength = consonantsIndex - consonantsCount\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ajg5ze8.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8ajg5ze8.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8ajg5ze8.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsLength\e[0m = vowelsIndex\
    \ - vowelsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsLength is already defined as \e[33mvalue\e[0m \e[35mvowelsLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8ajg5ze8.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mconsonantsLength\e[0m = consonantsIndex\
    \ - consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsLength is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8ajg5ze8.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m"
  stdout: ''
  timestamp: 1659799117
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        if\
    \ (vowelsIndex == -1 || consonantsIndex == -1) {\n            return \"\"\n  \
    \      }\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n   \
    \     val consonantsIndex = word.lastIndexWhere(consonants.contains)\n       \
    \ val vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount\
    \ = consonants.toList.map(_.length).sum\n        if (vowelsIndex == -1 || consonantsIndex\
    \ == -1) {\n            return \"\"\n        }\n        if (vowelsCount < consonantsCount)\
    \ {\n            return \"\"\n        }\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount\
    \ = consonants.toList.map(_.length).sum\n        if (vowelsIndex == -1 || consonantsIndex\
    \ == -1) {\n            return \"\"\n        }\n        if (vowelsCount < consonantsCount)\
    \ {\n            return \"\"\n        }\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsCount = vowels.toList.map(_.length).sum\n        val consonantsCount\
    \ = consonants.toList.map(_.length).sum\n        if (vowelsIndex == -1 || consonantsIndex\
    \ == -1) {\n            return \"\"\n        }\n        if (vowelsCount < consonantsCount)\
    \ {\n            return \"\"\n        }\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsCount = vowels.toList.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn06a33h8.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpn06a33h8.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn06a33h8.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn06a33h8.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn06a33h8.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1659799133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n        var vowelIndex2\
    \ = word.length - 1\n        var vowelIndex3 = word.length - 1\n        var vowelIndex4\
    \ = word.length - 1\n        var vowelIndex5 = word.length - 1\n        var vowelIndex6\
    \ = word.length - 1\n        var vowelIndex7 = word.length - 1\n        var vowelIndex8\
    \ = word.length - 1\n        var vowelIndex9 = word.length - 1\n        var vowelIndex10\
    \ = word.length - 1\n        var vowelIndex11 = word.length - 1\n        var vowelIndex12\
    \ = word.length - 1\n        var vowelIndex13 = word.length - 1\n        var vowelIndex14\
    \ = word.length - 1\n        var vowelIndex15 = word.length - 1\n        var vowelIndex16\
    \ = word.length - 1\n        var vowelIndex17 = word.length - 1\n        var vowelIndex18\
    \ = word.length - 1\n        var vowelIndex19 = word.length - 1\n        var vowelIndex20\
    \ = word.length - 1\n        var vowelIndex21 = word.length - 1\n        var vowelIndex22\
    \ = word.length - 1\n        var vowelIndex23 = word.length - 1\n        var vowelIndex24\
    \ = word.length - 1\n        var vowelIndex25 = word.length - 1\n        var vowelIndex26\
    \ = word.length - 1\n        var vowelIndex27 = word.length - 1\n        var vowelIndex28\
    \ = word.length - 1\n        var vowelIndex29 = word.length - 1\n        var vowelIndex30\
    \ = word.length - 1\n        var vowelIndex31 = word.length - 1\n        var vowelIndex32\
    \ = word.length - 1\n        var vowelIndex33 = word.length - 1\n        var vowelIndex34\
    \ = word.length - 1\n        var vowelIndex35 = word.length - 1\n        var vowelIndex36\
    \ = word.length - 1\n        var vowelIndex37 = word.length - 1\n        var vowelIndex38\
    \ = word.length - 1\n        var vowelIndex39 = word.length - 1\n        var vowelIndex40\
    \ = word.length - 1\n        var vowelIndex41 = word.length - 1\n        var vowelIndex42\
    \ = word.length - 1\n        var vowelIndex43 = word.length - 1\n        var vowelIndex44\
    \ = word.length - 1\n        var vowelIndex45 = word.length - 1\n        var vowelIndex46\
    \ = word.length - 1\n        var vowelIndex47 = word.length - 1\n        var vowelIndex48\
    \ = word.length - 1\n        var vowelIndex49 = word.length - 1\n        var vowelIndex50\
    \ = word.length - 1\n        var vowelIndex51 = word.length - 1\n        var vowelIndex52\
    \ = word.length - 1\n        var vowelIndex53 = word.length - 1\n        var vowelIndex54\
    \ = word.length - 1\n        var vowelIndex55 = word.length - 1\n        var vowelIndex56\
    \ = word.length - 1\n        var vowelIndex57 = word.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplu3pl9dt.scala:77:5\
    \ ---------------------\e[0m\e[0m\n\e[31m77 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvpde4x0t.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpvpde4x0t.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpvpde4x0t.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpvpde4x0t.scala:37:64 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvpde4x0t.scala:39:126\
    \ -----------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.size\n        val consonantsCount = consonants.toList.size\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsLeft = word.substring(0,\
    \ vowelsIndex)\n        val consonantsRight = word.substring(consonantsIndex +\
    \ 1)\n        val vowelsRight = vowelsLeft.substring(vowelsIndex + 1, vowelsLeft.length)\n\
    \        val consonantsLeft = consonantsRight.substring(0, consonantsIndex + 1)\n\
    \        val vowelsLeft = vowelsLeft.substring(0, vowelsIndex)\n        val vowelsRight\
    \ = vowelsLeft.substring(vowelsIndex + 1, vowelsLeft.length)\n        val consonantsRight\
    \ = consonantsRight.substring(consonantsIndex + 1, consonantsRight.length)\n \
    \       val vowelsRight = vowelsRight.substring(0, vowelsIndex)\n        val vowelsLeft\
    \ = vowelsLeft.substring(0, vowelsIndex)\n        val vowelsRight = vowelsLeft.substring(vowelsIndex\
    \ + 1, vowelsLeft.length)\n        val vowelsLeft = vowelsLeft.substring(0, vowelsIndex)\n\
    \        val vowelsRight = vowelsLeft.substring(vowelsIndex + 1, vowelsLeft.length)\n\
    \        val vowelsLeft = vowelsLeft.substring(0, vowelsIndex)\n        val vowelsRight\
    \ = vowelsLeft.substring(vowelsIndex + 1, vowelsLeft.length)\n        val vowelsLeft\
    \ = vowelsLeft.substring(0, vowelsIndex)\n        val vowelsRight = vowelsLeft.substring(vowelsIndex\
    \ + 1, vowelsLeft.length)\n        val vowelsLeft = vowelsLeft.substring(0, vowelsIndex)\n\
    \        val vowelsRight = vowelsLeft.substring(vowelsIndex + 1, vowelsLeft.length)\n\
    \        val vowelsLeft = vowelsLeft.substring(0, vowelsIndex)\n        val vowelsRight\
    \ = vowelsLeft.substring(vowelsIndex + 1, vowelsLeft.length)\n        val vowelsLeft\
    \ = vowelsLeft.substring(0, vowelsIndex)\n        val vowelsRight = vowelsLeft.substring(vowelsIndex\
    \ + 1, vowelsLeft.length)\n        val vowelsLeft = vowelsLeft.substring(0, vowels\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_76mwio2.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_76mwio2.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsLeft\e[0m = vowelsLeft.substring(\e[31m0\e[0m, vowelsIndex)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsLeft is already defined as \e[33mvalue\e[0m \e[35mvowelsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_76mwio2.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelsRight\e[0m = vowelsLeft.substring(vowelsIndex\
    \ + \e[31m1\e[0m, vowelsLeft.length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsRight is already defined as \e[33mvalue\e[0m \e[35mvowelsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_76mwio2.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mconsonantsRight\e[0m = consonantsRight.substring(consonantsIndex\
    \ + \e[31m1\e[0m, consonantsRight.length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsRight is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsRight\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_76mwio2.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mvowelsRight\e[0m = vowelsRight.substring(\e\
    [31m0\e[0m, vowelsIndex)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorSize = vowelsSetIterator.size\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size\n        val\
    \ vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size\n   \
    \     val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9wgakw96.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9wgakw96.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextSize\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp9wgakw96.scala:26:62 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9wgakw96.scala:38:64 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                  "
  stdout: ''
  timestamp: 1659799077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"z\")\n        val consonantsCount = word.filter(consonants.contains).length\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        if(vowelsIndex < 0 || consonantsIndex\
    \ < 0) \"\"\n        else word.substring(vowelsIndex + 1, consonantsIndex).mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnoj32jt_.scala:20:38\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e\
    [0m = word.filter(vowels.contains).length\n\e[31m\e[31m   |\e[0m             \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \          Found:    (elem : Char)\n\e[31m   |\e[0m                          \
    \            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnoj32jt_.scala:22:42 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(consonants.contains).length\n\
    \e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m\
    \   |\e[0m                                          Found:    (elem : Char)\n\e\
    [31m   |\e[0m                                          Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnoj32jt_.scala:23:46 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    (elem : Char)\n\
    \e[31m   |\e[0m                                              Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnoj32jt_.scala:24:50\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e\
    [0m = word.lastIndexWhere(consonants.contains)\n\e[31m\e[31m   |\e[0m        \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                                      Found:    (elem : Char)\n\e[31m   |\e[0m\
    \                                                 Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(x => consonants.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val consonantsCount = word.filter(x => consonants.contains(x)).size\n      \
    \  val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val consonantsCount\
    \ = word.filter(x => consonants.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val consonantsCount = word.filter(x =>\
    \ consonants.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val consonantsCount = word.filter(x => consonants.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val consonantsCount = word.filter(x => consonants.contains(x)).size\n      \
    \  val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val consonantsCount\
    \ = word.filter(x => consonants.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val consonantsCount = word.filter(x =>\
    \ consonants.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val consonantsCount = word.filter(x => consonants.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val consonantsCount = word.filter(x => consonants.contains(x)).size\n      \
    \  val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val consonantsCount\
    \ = word.filter(x => consonants.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val consonantsCount = word.filter(x =>\
    \ consonants.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val consonantsCount = word.filter(x => consonants.contains(x)).\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpebaxj969.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpebaxj969.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpebaxj969.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mx\e[0m => consonants.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpebaxj969.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpebaxj969.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mx\e[0m => consonants.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcon"
  stdout: ''
  timestamp: 1659799135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(c => vowels.contains(c)).length\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(c => consonants.contains(c)).length\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).length\n     \
    \   val consonantsCount = word.filter(c => consonants.contains(c)).length\n  \
    \      val vowelsCount = word.filter(c => vowels.contains(c)).length\n       \
    \ val consonantsCount = word.filter(c => consonants.contains(c)).length\n    \
    \    val vowelsCount = word.filter(c => vowels.contains(c)).length\n        val\
    \ consonantsCount = word.filter(c => consonants.contains(c)).length\n        val\
    \ vowelsCount = word.filter(c => vowels.contains(c)).length\n        val consonantsCount\
    \ = word.filter(c => consonants.contains(c)).length\n        val vowelsCount =\
    \ word.filter(c => vowels.contains(c)).length\n        val consonantsCount = word.filter(c\
    \ => consonants.contains(c)).length\n        val vowelsCount = word.filter(c =>\
    \ vowels.contains(c)).length\n        val consonantsCount = word.filter(c => consonants.contains(c)).length\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).length\n     \
    \   val consonantsCount = word.filter(c => consonants.contains(c)).length\n  \
    \      val vowelsCount = word.filter(c => vowels.contains(c)).length\n       \
    \ val consonantsCount = word.filter(c => consonants.contains(c)).length\n    \
    \    val vowelsCount = word.filter(c => vowels.contains(c)).length\n        val\
    \ consonantsCount = word.filter(c => consonants.contains(c)).length\n        val\
    \ vowelsCount = word.filter(c => vowels.contains(c)).length\n        val consonantsCount\
    \ = word.filter(c => consonants.contains(c)).length\n        val vowelsCount =\
    \ word.filter(c => vowels.contains(c)).length\n        val consonantsCount = word.filter(c\
    \ => consonants.contains(c)).length\n        val vowelsCount = word.filter(c =>\
    \ vowels.contains(c)).length\n        val consonantsCount = word.filter(c => consonants.contains(c))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvbtqt11m.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mc\e[0m => vowels.contains(c)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvbtqt11m.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mc\e[0m => consonants.contains(c)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpvbtqt11m.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mc\e[0m => vowels.contains(c)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvbtqt11m.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mc\e[0m => consonants.contains(c)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel defi"
  stdout: ''
  timestamp: 1659799136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.count(vowels)\n\
    \        val vowelsCount2 = word.count(vowels.toList)\n        val vowelsCount3\
    \ = word.count(vowels.toSeq)\n        val vowelsCount4 = word.count(vowels.toSet)\n\
    \        val vowelsCount5 = word.count(vowels.toMap)\n        val vowelsCount6\
    \ = word.count(vowels.toSeq.map(_.toLowerCase))\n        val vowelsCount7 = word.count(vowels.toSeq.map(_.toUpperCase))\n\
    \        val vowelsCount8 = word.count(vowels.toSeq.map(_.toLowerCase + _.toUpperCase))\n\
    \        val vowelsCount9 = word.count(vowels.toSeq.map(_.toLowerCase + _.toUpperCase\
    \ + _.toLowerCase))\n        val vowelsCount10 = word.count(vowels.toSeq.map(_.toLowerCase\
    \ + _.toUpperCase + _.toLowerCase + _.toUpperCase))\n        val vowelsCount11\
    \ = word.count(vowels.toSeq.map(_.toLowerCase + _.toUpperCase + _.toLowerCase\
    \ + _.toUpperCase + _.toLowerCase))\n        val vowelsCount12 = word.count(vowels.toSeq.map(_.toLowerCase\
    \ + _.toUpperCase + _.toLowerCase + _.toUpperCase + _.toLowerCase + _.toUpperCase))\n\
    \        val vowelsCount13 = word.count(vowels.toSeq.map(_.toLowerCase + _.toUpperCase\
    \ + _.toLowerCase + _.toUpperCase + _.toLowerCase + _.toUpperCase + _.toLowerCase))\n\
    \        val vowelsCount14 = word.count(vowels.toSeq.map(_.toLowerCase + _.toUpperCase\
    \ + _.toLowerCase + _.toUpperCase + _.toLowerCase + _.toUpperCase + _.toLowerCase\
    \ + _.toUpperCase))\n        val vowelsCount15 = word.count(vowels.toSeq.map(_.toLowerCase\
    \ + _.toUpperCase + _.toLowerCase + _.toUpperCase + _.toLowerCase + _.toUpperCase\
    \ + _.toLowerCase + _.toUpperCase + _.toLowerCase))\n        val vowelsCount16\
    \ = word.count(vowels.toSeq.map(_.toLowerCase + _.toUpperCase + _.toLowerCase\
    \ + _.toUpperCase + _.toLowerCase + _.toUpperCase + _.toLowerCase + _.toUpperCase\
    \ + _.toLowerCase + _.toUpperCase\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpibff_88b.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpibff_88b.scala:20:37 --------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.count(vowels)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \               Found:    (vowels : scala.collection.mutable.Set[String])\n\e\
    [31m   |\e[0m               Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpibff_88b.scala:21:45 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount2\e[0m = word.count(vowels.toList)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      Found:    List[String]\n\e\
    [31m   |\e[0m                                      Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpibff_88b.scala:22:45\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount3\e\
    [0m = word.count(vowels.toSeq)\n\e[31m\e[31m   |\e[0m                        \
    \              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \          Found:    Seq[String]\n\e[31m   |\e[0m                            \
    \          Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpibff_88b.scala:24:50 -----------------------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount5\e[0m = word.count(vowels.toMap)\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0m               Cannot prove that String <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m               where:    K is a type variable with c"
  stdout: ''
  timestamp: 1659799141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphexu38ah.scala:56:25 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphexu38ah.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsSet = vowels.toSet;\n\
    \        val vowelsSetSize = vowelsSet.size;\n        val vowelsSetIterator =\
    \ vowelsSet.iterator;\n        val vowelsSetIteratorNext = vowelsSetIterator.next;\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next;\n       \
    \ val vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next;\n      \
    \  val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf15bmkt_.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next;\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf15bmkt_.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf15bmkt_.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e["
  stdout: ''
  timestamp: 1659799140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCount = word.count(vowels)\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex2\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex3 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowelsIndex4 = word.lastIndexWhere(vowels.contains)\n        val\
    \ vowelsIndex5 = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex6\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex7 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowelsIndex8 = word.lastIndexWhere(vowels.contains)\n        val\
    \ vowelsIndex9 = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex10\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex11 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowelsIndex12 = word.lastIndexWhere(vowels.contains)\n        val\
    \ vowelsIndex13 = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex14\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex15 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowelsIndex16 = word.lastIndexWhere(vowels.contains)\n        val\
    \ vowelsIndex17 = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex18\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex19 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowelsIndex20 = word.lastIndexWhere(vowels.contains)\n        val\
    \ vowelsIndex21 = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex22\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex23 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowelsIndex24 = word.lastIndexWhere(vowels.contains)\n        val\
    \ vowelsIndex25 = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex26\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex27 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowelsIndex28 = word.lastIndexWhere(vowels.contains)\n        val\
    \ vowelsIndex29 = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex30\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex31 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowel\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_o054dp7.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_o054dp7.scala:20:37 --------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.count(vowels)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \               Found:    (vowels : scala.collection.mutable.Set[String])\n\e\
    [31m   |\e[0m               Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp_o054dp7.scala:21:46 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    (elem : Char)\n\
    \e[31m   |\e[0m                                              Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_o054dp7.scala:22:47\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex2\e\
    [0m = word.lastIndexWhere(vowels.contains)\n\e[31m\e[31m   |\e[0m            \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                             Found:    (elem : Char)\n\e[31m   |\e[0m       \
    \                                        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_o054dp7.scala:23:47 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex3\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0m                                               Found:    (elem :\
    \ Char)\n\e[31m   |\e[0m  "
  stdout: ''
  timestamp: 1659799147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonantsCount = consonants.toList.map(_.length).sum\n        val\
    \ vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpd2q8rin0.scala:49:25 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpd2q8rin0.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd2q8rin0.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpd2q8rin0.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd2q8rin0.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^"
  stdout: ''
  timestamp: 1659799146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr505bcfn.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr505bcfn.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr505bcfn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr505bcfn.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr505bcfn.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.ma"
  stdout: ''
  timestamp: 1659799144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorNext = vowelsSetIterator.next\n        val vowelsSetIteratorPrev\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextPrev = vowelsSetIteratorNextPrev.prev\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.prev\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppzxlk177.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppzxlk177.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextPrev\e[0m = vowelsSetIteratorNextPrev.prev\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppzxlk177.scala:24:54 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmppzxlk177.scala:25:62 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmppzxlk177.scala:26:62 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppzxlk177.scala:35:60 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextPrev\e\
    [0m = vowelsSetIterat"
  stdout: ''
  timestamp: 1659799145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsCount = word.filter(vowels.contains).toSet.size\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"z\");\n        val consonantsCount = word.filter(consonants.contains).toSet.size\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp7aatg9k.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp7aatg9k.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp7aatg9k.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp7aatg9k.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp7aatg9k.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n"
  stdout: ''
  timestamp: 1659799146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsSet = vowels.toSet\n        val vowelsSet2 = vowelsSet.diff(Set(\"a\"\
    , \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet3 = vowelsSet.diff(Set(\"\
    A\", \"E\", \"I\", \"O\", \"U\"))\n        val vowelsSet4 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"A\", \"E\", \"I\", \"O\", \"U\"))\n\
    \        val vowelsSet5 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )).diff(Set(\"A\", \"E\", \"I\", \"O\", \"U\")).diff(Set(\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"))\n        val vowelsSet6 = vowelsSet.diff(Set(\"a\", \"e\", \"\
    i\", \"o\", \"u\")).diff(Set(\"A\", \"E\", \"I\", \"O\", \"U\")).diff(Set(\"a\"\
    , \"e\", \"i\", \"o\", \"u\")).diff(Set(\"A\", \"E\", \"I\", \"O\", \"U\"))\n\
    \        val vowelsSet7 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )).diff(Set(\"A\", \"E\", \"I\", \"O\", \"U\")).diff(Set(\"a\", \"e\", \"i\",\
    \ \"o\", \"u\")).diff(Set(\"A\", \"E\", \"I\", \"O\", \"U\")).diff(Set(\"a\",\
    \ \"e\", \"i\", \"o\", \"u\")).diff(Set(\"A\", \"E\", \"I\", \"O\", \"U\"))\n\
    \        val vowelsSet8 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )).diff(Set(\"A\", \"E\", \"I\", \"O\", \"U\")).diff(Set(\"a\", \"e\", \"i\",\
    \ \"o\", \"u\")).diff(Set(\"A\", \"E\", \"I\", \"O\", \"U\")).diff(Set(\"a\",\
    \ \"e\", \"i\", \"o\", \"u\")).diff(Set(\"A\", \"E\", \"I\", \"O\", \"U\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"A\", \"E\", \"I\", \"O\", \"U\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"A\", \"E\", \"I\", \"O\", \"U\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"A\", \"E\", \"I\", \"O\", \"U\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"A\", \"E\", \"I\", \"O\", \"U\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1cug_g7r.scala:27:554 ----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet8\e[0m = vowelsSet.diff(Set(\e\
    [31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"\
    u\"\e[0m)).diff(Set(\e[31m\"A\"\e[0m, \e[31m\"E\"\e[0m, \e[31m\"I\"\e[0m, \e[31m\"\
    O\"\e[0m, \e[31m\"U\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"A\"\e[0m, \e[31m\"\
    E\"\e[0m, \e[31m\"I\"\e[0m, \e[31m\"O\"\e[0m, \e[31m\"U\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"A\"\e[0m, \e[31m\"E\"\e[0m, \e[31m\"I\"\e[0m, \e[31m\"\
    O\"\e[0m, \e[31m\"U\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"A\"\e[0m, \e[31m\"\
    E\"\e[0m, \e[31m\"I\"\e[0m, \e[31m\"O\"\e[0m, \e[31m\"U\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"A\"\e[0m, \e[31m\"E\"\e[0m, \e[31m\"I\"\e[0m, \e[31m\"\
    O\"\e[0m, \e[31m\"U\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"A\"\e[0m, \e[31m\"\
    E\"\e[0m, \e[31m\"I\"\e[0m, \e[31m\"O\"\e[0m, \e[31m\"U\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"A\"\e[0m, \e[31m\"E\"\e[0m, \e[31m\"I\"\e[0m, \e[31m\"\
    O\"\e[0m, \e[31m\"U\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \"u\n\e[31m\e[31m   |\e[0m                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                           ^\e\
    [0m\n\e[31m   |\e[0m                                                 unclosed\
    \ string literal\n\e[31m\e[31m-- Error: /tmp/tmp1cu"
  stdout: ''
  timestamp: 1659799141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(x => consonants.contains(x)).size\n\
    \        val vowelsCountInWord = vowels.filter(x => word.contains(x)).size\n \
    \       val consonantsCountInWord = consonants.filter(x => word.contains(x)).size\n\
    \        val vowelsCountInWordInWord = vowels.filter(x => word.contains(x)).filter(x\
    \ => word.contains(x)).size\n        val consonantsCountInWordInWord = consonants.filter(x\
    \ => word.contains(x)).filter(x => word.contains(x)).size\n        val vowelsCountInWordInWordInWord\
    \ = vowels.filter(x => word.contains(x)).filter(x => word.contains(x)).filter(x\
    \ => word.contains(x)).size\n        val consonantsCountInWordInWordInWord = consonants.filter(x\
    \ => word.contains(x)).filter(x => word.contains(x)).filter(x => word.contains(x)).filter(x\
    \ => word.contains(x)).size\n        val vowelsCountInWordInWordInWordInWord =\
    \ vowels.filter(x => word.contains(x)).filter(x => word.contains(x)).filter(x\
    \ => word.contains(x)).filter(x => word.contains(x)).filter(x => word.contains(x)).filter(x\
    \ => word.contains(x)).filter(x => word.contains(x)).filter(x => word.contains(x)).filter(x\
    \ => word.contains(x)).filter(x => word.contains(x)).filter(x => word.contains(x)).filter(x\
    \ => word.contains(x)).filter(x => word.contains(x)).filter(x => word.contains(x)).filter(x\
    \ => word.contains(x)).filter(x => word.contains(x)).filter(x => word.contains(x)).filter(x\
    \ => word.contains(x)).filter(x => word.contains(x)).filter(x => word.contains(x)).filter(x\
    \ => word.contains(x)).filter(x => word.contains(x)).filter(x => word.contains(x)).filter(x\
    \ => word.contains(x)).filter(x => word.contains(x)).filter(x => word.contains(x)).filter(x\
    \ => word.contains(x)).filter(x => word.contains(x)).filter(x => word.contains(x)).filter(x\
    \ => word.contains(x)).filter(x => word.contains(x)).filter(\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpo0ynacq4.scala:29:994 --------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountInWordInWordInWordInWord\e\
    [0m = vowels.filter(\e[36mx\e[0m => word.contains(x)).filter(\e[36mx\e[0m => word.contains(x)).filter(\e\
    [36mx\e[0m => word.contains(x)).filter(\e[36mx\e[0m => word.contains(x)).filter(\e\
    [36mx\e[0m => word.contains(x)).filter(\e[36mx\e[0m => word.contains(x)).filter(\e\
    [36mx\e[0m => word.contains(x)).filter(\e[36mx\e[0m => word.contains(x)).filter(\e\
    [36mx\e[0m => word.contains(x)).filter(\e[36mx\e[0m => word.contains(x)).filter(\e\
    [36mx\e[0m => word.contains(x)).filter(\e[36mx\e[0m => word.contains(x)).filter(\e\
    [36mx\e[0m => word.contains(x)).filter(\e[36mx\e[0m => word.contains(x)).filter(\e\
    [36mx\e[0m => word.contains(x)).filter(\e[36mx\e[0m => word.contains(x)).filter(\e\
    [36mx\e[0m => word.contains(x)).filter(\e[36mx\e[0m => word.contains(x)).filter(\e\
    [36mx\e[0m => word.contains(x)).filter(\e[36mx\e[0m => word.contains(x)).filter(\e\
    [36mx\e[0m => word.contains(x)).filter(\e[36mx\e[0m => word.contains(x)).filter(\e\
    [36mx\e[0m => word.contains(x)).filter(\e[36mx\e[0m => word.contains(x)).filter(\e\
    [36mx\e[0m => word.contains(x)).filter(\e[36mx\e[0m => word.contains(x)).filter(\e\
    [36mx\e[0m => word.contains(x)).filter(\e[36mx\e[0m => word.contains(x)).filter(\e\
    [36mx\e[0m => word.contains(x)).filter(\e[36mx\e[0m => word.contains(x)).filter(\e\
    [36mx\e[0m => word.contains(x)).filter(\n\e[31m\e[31m   |\e[0m               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \   "
  stdout: ''
  timestamp: 1659799146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        var\
    \ vowelIndex = 0\n        var vowel = \"\"\n        var vowelIndex2 = 0\n    \
    \    var vowel2 = \"\"\n        var vowelIndex3 = 0\n        var vowel3 = \"\"\
    \n        var vowelIndex4 = 0\n        var vowel4 = \"\"\n        var vowelIndex5\
    \ = 0\n        var vowel5 = \"\"\n        var vowelIndex6 = 0\n        var vowel6\
    \ = \"\"\n        var vowelIndex7 = 0\n        var vowel7 = \"\"\n        var\
    \ vowelIndex8 = 0\n        var vowel8 = \"\"\n        var vowelIndex9 = 0\n  \
    \      var vowel9 = \"\"\n        var vowelIndex10 = 0\n        var vowel10 =\
    \ \"\"\n        var vowelIndex11 = 0\n        var vowel11 = \"\"\n        var\
    \ vowelIndex12 = 0\n        var vowel12 = \"\"\n        var vowelIndex13 = 0\n\
    \        var vowel13 = \"\"\n        var vowelIndex14 = 0\n        var vowel14\
    \ = \"\"\n        var vowelIndex15 = 0\n        var vowel15 = \"\"\n        var\
    \ vowelIndex16 = 0\n        var vowel16 = \"\"\n        var vowelIndex17 = 0\n\
    \        var vowel17 = \"\"\n        var vowelIndex18 = 0\n        var vowel18\
    \ = \"\"\n        var vowelIndex19 = 0\n        var vowel19 = \"\"\n        var\
    \ vowelIndex20 = 0\n        var vowel20 = \"\"\n        var vowelIndex21 = 0\n\
    \        var vowel21 = \"\"\n        var vowelIndex22 = 0\n        var vowel22\
    \ = \"\"\n        var vowelIndex23 = 0\n        var vowel23 = \"\"\n        var\
    \ vowelIndex24 = 0\n        var vowel24 = \"\"\n        var vowelIndex25 = 0\n\
    \        var vowel25 = \"\"\n        var vowelIndex26 = 0\n        var vowel26\
    \ = \"\"\n        var vowelIndex27 = 0\n        var vowel27 = \"\"\n        var\
    \ vowelIndex28 = 0\n        var vowel28 = \"\"\n        var vowelIndex29 = 0\n\
    \        var vowel29 = \"\"\n        var vowelIndex30 = 0\n        var vowel30\
    \ = \"\"\n        var vowelIndex31 = 0\n        var vowel31 = \"\"\n        var\
    \ vowelIndex32 = 0\n        var vowel32 = \"\"\n        var vowelIndex33 = 0\n\
    \        var vowel33 = \"\"\n        var vowelIndex34 = 0\n        var vowel34\
    \ = \"\"\n        var vowelIndex35 = 0\n        var vowel35 = \"\"\n        var\
    \ vowelIndex36 = 0\n        var vowel36 = \"\"\n        var vowelIndex37 = 0\n\
    \        var vowel37 = \"\"\n        var vowelIndex38 = 0\n        var vowel38\
    \ = \"\"\n        var vowelIndex39 = 0\n        var vowel39 = \"\"\n        var\
    \ vowelIndex40 = 0\n        var vowel40 = \"\"\n        var vowelIndex41 = 0\n\
    \        var vowel41 = \"\"\n        var vowelIndex42 = 0\n        var vowel42\
    \ = \"\"\n        var vowelIndex43 = 0\n        var vowel43 = \"\"\n        var\
    \ vowelIndex44 = 0\n        var vowel44 = \"\"\n        var \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpskkb3egw.scala:108:11 --------------------------\e\
    [0m\e[0m\n\e[31m108 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m    |\e[0m    \
    \       ^\e[0m\n\e[31m    |\e[0m           pattern expected\n\e[31m    |\e[0m\n\
    \e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpskkb3egw.scala:109:5 --------------------\e\
    [0m\e[0m\n\e[31m109 |\e[0m    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m   \
    \ |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required: String\n\e[31m   \
    \ |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_g2ns020.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_g2ns020.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_g2ns020.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_g2ns020.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1659799076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val con\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_dubomxu.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_dubomxu.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_dubomxu.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_dubomxu.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_dubomxu.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659799147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsBefore\
    \ = vowels.filter(_.isBefore(word.last))\n        val vowelsAfter = vowels.filter(_.isAfter(word.last))\n\
    \        val consonantsBefore = consonants.filter(_.isBefore(word.last))\n   \
    \     val consonantsAfter = consonants.filter(_.isAfter(word.last))\n        val\
    \ vowelsBetween = vowelsBefore.intersect(vowelsAfter)\n        val consonantsBetween\
    \ = consonantsBefore.intersect(consonantsAfter)\n        val vowelsBetweenWithConsonants\
    \ = vowelsBetween.intersect(consonantsBetween)\n        val vowelsBetweenWithConsonantsWithVowels\
    \ = vowelsBetweenWithConsonants.intersect(vowels)\n        val vowelsBetweenWithConsonantsWithVowelsWithConsonants\
    \ = vowelsBetweenWithConsonantsWithVowels.intersect(consonants)\n        val vowelsBetweenWithConsonantsWithVowelsWithConsonantsWithVowels\
    \ = vowelsBetweenWithConsonantsWithVowelsWithConsonants.intersect(vowels)\n  \
    \      val vowelsBetweenWithConsonantsWithVowelsWithConsonantsWithVowelsWithConsonants\
    \ = vowelsBetweenWithConsonantsWithVowelsWithConsonantsWithVowels.intersect(consonants)\n\
    \        val vowelsBetweenWithConsonantsWithVowelsWithConsonantsWithVowelsWithConsonantsWithVowels\
    \ = vowelsBetweenWithConsonantsWithVowelsWithConsonantsWithVowelsWithConsonants.intersect(vowels)\n\
    \        val vowelsBetweenWithConsonantsWithVowelsWithConsonantsWithVowelsWithConsonantsWithVowelsWithConsonants\
    \ = vowelsBetweenWithConsonantsWithVowelsWithConsonantsWithVowelsWithConsonantsWithVowels.intersect(consonants)\n\
    \        val vowelsBetweenWithConsonantsWithVowelsWithConsonantsWithVowelsWithConson\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphg6tcrx6.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphg6tcrx6.scala:21:43\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsBefore\e[0m = vowels.filter(_.isBefore(word.last))\n\e[31m\e[31m   |\e\
    [0m                                         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                               value isBefore is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmphg6tcrx6.scala:22:42 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsAfter\e[0m = vowels.filter(_.isAfter(word.last))\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 value isAfter is not a member of\
    \ String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphg6tcrx6.scala:23:51\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantsBefore\e[0m = consonants.filter(_.isBefore(word.last))\n\e[31m\e\
    [31m   |\e[0m                                                 ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                value isBefore is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphg6tcrx6.scala:24:50\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantsAfter\e[0m = consonants.filter(_.isAfter(word.last))\n\e[31m\e[31m\
    \   |\e[0m                                                ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 value isAfter is not a member of String\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphg6tcrx6.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    6 errors found\n"
  stdout: ''
  timestamp: 1659799147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorSize = vowelsSetIterator.size\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size\n        val\
    \ vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size\n   \
    \     val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplw4ckz_n.scala:26:62 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmplw4ckz_n.scala:38:64 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplw4ckz_n.scala:40:68\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplw4ckz_n.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsSet =\
    \ vowels.toSet\n        val consonantsSet = consonants.toSet\n        val vowelsSetSize\
    \ = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n     \
    \   val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = conson\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp39xws4lf.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetSize\e[0m = vowelsSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvowelsSetSize is already defined as \e[33mvalue\e[0m \e[35mvowelsSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp39xws4lf.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSetSize\e[0m = consonantsSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsSetSize is already defined as \e[33mvalue\e[0m \e[35mconsonantsSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp39xws4lf.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetSize\e[0m = vowelsSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvowelsSetSize is already defined as \e[33mvalue\e[0m \e[35mvowelsSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp39xws4lf.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSetSize\e[0m = consonantsSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsSetSize is already defined as \e[33mvalue\e[0m \e[35mconsonantsSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp39xws4lf.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetSize\e[0m = vowelsSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList\n  \
    \      val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowel\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphtbqimjt.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtbqimjt.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtbqimjt.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtbqimjt.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtbqimjt.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defi"
  stdout: ''
  timestamp: 1659799076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var index = 0\n        var vowel = \"\
    \"\n        var vowelIndex = 0\n        var consonantIndex = 0\n        var consonant\
    \ = \"\"\n        var consonantIndex = 0\n        var vowelIndex = 0\n       \
    \ var vowel = \"\"\n        var vowelIndex = 0\n        var consonantIndex = 0\n\
    \        var consonant = \"\"\n        var consonantIndex = 0\n        var vowelIndex\
    \ = 0\n        var vowel = \"\"\n        var vowelIndex = 0\n        var consonantIndex\
    \ = 0\n        var consonant = \"\"\n        var consonantIndex = 0\n        var\
    \ vowelIndex = 0\n        var vowel = \"\"\n        var vowelIndex = 0\n     \
    \   var consonantIndex = 0\n        var consonant = \"\"\n        var consonantIndex\
    \ = 0\n        var vowelIndex = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var consonantIndex = 0\n        var consonant = \"\"\n        var\
    \ consonantIndex = 0\n        var vowelIndex = 0\n        var vowel = \"\"\n \
    \       var vowelIndex = 0\n        var consonantIndex = 0\n        var consonant\
    \ = \"\"\n        var consonantIndex = 0\n        var vowelIndex = 0\n       \
    \ var vowel = \"\"\n        var vowelIndex = 0\n        var consonantIndex = 0\n\
    \        var consonant = \"\"\n        var consonantIndex = 0\n        var vowelIndex\
    \ = 0\n        var vowel = \"\"\n        var vowelIndex = 0\n        var consonantIndex\
    \ = 0\n        var consonant = \"\"\n        var consonantIndex = 0\n        var\
    \ vowelIndex = 0\n        var vowel = \"\"\n        var vowelIndex = 0\n     \
    \   var consonantIndex = 0\n        var consonant = \"\"\n        var consonantIndex\
    \ = 0\n        var vowelIndex = 0\n        var vowel = \"\"\n        var vowelIndex\
    \ = 0\n        var consonantIndex = 0\n        var consonant = \"\"\n        var\
    \ consonantIndex = 0\n        var vowelIndex = 0\n        var vowel = \"\"\n \
    \       var vowelIndex = 0\n        var consonantIndex = 0\n        var consonant\
    \ = \"\"\n        var consonantIndex = 0\n        var vowelIndex = 0\n       \
    \ var vowel = \"\"\n        var vowelIndex = 0\n        var consonantIndex = 0\n\
    \        var consonant = \"\"\n        var consonantIndex = 0\n        var vowelIndex\
    \ = 0\n        var vowel = \"\"\n        var vowelIndex = 0\n        var consonantIndex\
    \ = 0\n        var consonant = \"\"\n        var consonantIndex = 0\n        var\
    \ vowelIndex = 0\n        var vowel = \"\"\n        var vowelIndex = 0\n     \
    \   var consonantIndex = 0\n        var consonant = \"\"\n        var consonantIndex\
    \ = 0\n        var vowelIndex = 0\n        var vowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw5ndzvg5.scala:106:4 ---------------------------\e\
    [0m\e[0m\n\e[31m106 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw5ndzvg5.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mconsonantIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantIndex is already defined as \e[33mvariable\e[0m \e\
    [35mconsonantIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpw5ndzvg5.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e[36mvowelIndex\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mvowelIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw5ndzvg5.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mvowel\e[0m = \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowel is already defined as \e[33mvariable\e[0m \e[35mvowel\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw5ndzvg5.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mvar\e[0m \e[36mvowelIndex\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelIndex is already\
    \ defined as \e[33mvariable\e[0m \e[35mvowelIndex\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw5ndzvg5.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mconsonantIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659799146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).length\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).length\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).length\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).length\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).length\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val vowelsCount = word.filter(x => vowels.contains(x)).length\n        \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps_yf3a0f.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps_yf3a0f.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps_yf3a0f.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps_yf3a0f.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/t"
  stdout: ''
  timestamp: 1659799147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsSet = vowels.toSet;\n\
    \        val vowelsSetIterator = vowelsSet.iterator;\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next;\n        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next;\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_02syzi0.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_02syzi0.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp_02syzi0.scala:23:62 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next;\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_02syzi0.scala:31:72 ---------------------------"
  stdout: ''
  timestamp: 1659799089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.prev\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNext\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgyafp8mo.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgyafp8mo.scala:23:54\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue prev is not a member of Iterator[String] - did you mean vowelsSetIterator.drop?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgyafp8mo.scala:24:62 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev\
    \ is not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpgyafp8mo.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpgyafp8mo.scala:37:64 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgyafp8mo.scala:38:72\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev"
  stdout: ''
  timestamp: 1659799148
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val consonants = Set(\"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        val vowelsBefore\
    \ = vowels.toList.tail;\n        val vowelsAfter = vowels.toList;\n        val\
    \ consonantsBefore = consonants.toList.tail;\n        val consonantsAfter = consonants.toList;\n\
    \        val vowelsBeforeLength = vowelsBefore.length;\n        val vowelsAfterLength\
    \ = vowelsAfter.length;\n        val consonantsBeforeLength = consonantsBefore.length;\n\
    \        val consonantsAfterLength = consonantsAfter.length;\n        val vowelsBeforeLength\
    \ = vowelsBefore.length;\n        val vowelsAfterLength = vowelsAfter.length;\n\
    \        val consonantsBeforeLength = consonantsBefore.length;\n        val consonantsAfterLength\
    \ = consonantsAfter.length;\n        val vowelsBeforeLength = vowelsBefore.length;\n\
    \        val vowelsAfterLength = vowelsAfter.length;\n        val consonantsBeforeLength\
    \ = consonantsBefore.length;\n        val consonantsAfterLength = consonantsAfter.length;\n\
    \        val vowelsBeforeLength = vowelsBefore.length;\n        val vowelsAfterLength\
    \ = vowelsAfter.length;\n        val consonantsBeforeLength = consonantsBefore.length;\n\
    \        val consonantsAfterLength = consonantsAfter.length;\n        val vowelsBeforeLength\
    \ = vowelsBefore.length;\n        val vowelsAfterLength = vowelsAfter.length;\n\
    \        val consonantsBeforeLength = consonantsBefore.length;\n        val consonantsAfterLength\
    \ = consonantsAfter.length;\n        val vowelsBeforeLength = vowelsBefore.length;\n\
    \        val vowelsAfterLength = vowelsAfter.length;\n        val consonantsBeforeLength\
    \ = consonantsBefore.length;\n        val consonantsAfterLength = consonantsAfter.length;\n\
    \        val vowelsBeforeLength = vowelsBefore.length;\n        val vowelsAfterLength\
    \ = vowelsAfter.length;\n        val consonantsBeforeLength = consonantsBefore.length;\n\
    \        val consonantsAfterLength = consonantsAfter.length;\n        val vowelsBeforeLength\
    \ = vowelsBefore.length;\n        val vowelsAfterLength = vowelsAfter.length;\n\
    \        val consonantsBeforeLength = consonantsBe\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprm2pq7_q.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsBeforeLength\e[0m\
    \ = vowelsBefore.length;\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsBeforeLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mvowelsBeforeLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprm2pq7_q.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelsAfterLength\e[0m =\
    \ vowelsAfter.length;\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAfterLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsAfterLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprm2pq7_q.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mconsonantsBeforeLength\e\
    [0m = consonantsBefore.length;\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsBeforeLength is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsBeforeLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprm2pq7_q.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mconsonantsAfterLength\e\
    [0m = consonantsAfter.length;\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsAfterLength is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsAfterLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprm2pq7_q.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    "
  stdout: ''
  timestamp: 1659799146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextPrev = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextPrev = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9rc8pfud.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp9rc8pfud.scala:23:54 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.prev\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue prev is not a member of Iterator[String] - did you mean\
    \ vowelsSetIterator.drop?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9rc8pfud.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvpde4x0t.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpvpde4x0t.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpvpde4x0t.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpvpde4x0t.scala:37:64 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvpde4x0t.scala:39:126\
    \ -----------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.lastIndexWhere(_.isLetter).map(_.toString.toInt)\n\
    \        val consonantsIndex = word.lastIndexWhere(_.isLetter).map(_.toString.toInt).drop(1)\n\
    \        val vowelsIndexCount = vowelsIndex.map(_.toString.toInt).sum\n      \
    \  val consonantsIndexCount = consonantsIndex.map(_.toString.toInt).sum\n    \
    \    val vowelsIndexMin = vowelsIndex.min\n        val consonantsIndexMin = consonantsIndex.min\n\
    \        val vowelsIndexMax = vowelsIndex.max\n        val consonantsIndexMax\
    \ = consonantsIndex.max\n        val vowelsIndexMinCount = vowelsIndex.map(_.toString.toInt).min\n\
    \        val consonantsIndexMinCount = consonantsIndex.map(_.toString.toInt).min\n\
    \        val vowelsIndexMaxCount = vowelsIndex.map(_.toString.toInt).max\n   \
    \     val consonantsIndexMaxCount = consonantsIndex.map(_.toString.toInt).max\n\
    \        val vowelsIndexMinCount2 = vowelsIndex.map(_.toString.toInt).min\n  \
    \      val consonantsIndexMinCount2 = consonantsIndex.map(_.toString.toInt).min\n\
    \        val vowelsIndexMaxCount2 = vowelsIndex.map(_.toString.toInt).max\n  \
    \      val consonantsIndexMaxCount2 = consonantsIndex.map(_.toString.toInt).max\n\
    \        val vowelsIndexMinCount3 = vowelsIndex.map(_.toString.toInt).min\n  \
    \      val consonantsIndexMinCount3 = consonantsIndex.map(_.toString.toInt).min\n\
    \        val vowelsIndexMaxCount3 = vowelsIndex.map(_.toString.toInt).max\n  \
    \      val consonantsIndexMaxCount3 = consonantsIndex.map(_.toString.toInt).max\n\
    \        val vowelsIndexMinCount4 = vowelsIndex.map(_.toString.toInt).\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp25hszudb.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp25hszudb.scala:23:58 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(_.isLetter).map(_.toString.toInt)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value map is not a member of Int\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp25hszudb.scala:24:62 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(_.isLetter).map(_.toString.toInt).drop(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value map is not a member of\
    \ Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp25hszudb.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val consonants = Set(\"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        val vowelsCount\
    \ = vowels.size;\n        val consonantsCount = consonants.size;\n        val\
    \ vowelsIndex = (word.lastIndex - vowelsCount) / consonantsCount;\n        val\
    \ consonantsIndex = word.lastIndex - vowelsCount - vowelsIndex * consonantsCount;\n\
    \        val vowel = vowels(vowelsIndex);\n        val consonant = consonants(consonantsIndex);\n\
    \        val vowelIndex = word.lastIndex - vowelsCount - vowelsIndex * consonantsCount\
    \ - consonantsIndex;\n        val consonantIndex = word.lastIndex - vowelsCount\
    \ - vowelsIndex * consonantsCount - vowelsIndex;\n        val vowelCount = vowels.size;\n\
    \        val consonantCount = consonants.size;\n        val vowelIndex = word.lastIndex\
    \ - vowelsCount - vowelsIndex * consonantsCount - consonantsIndex;\n        val\
    \ consonantIndex = word.lastIndex - vowelsCount - vowelsIndex * consonantsCount\
    \ - vowelsIndex;\n        val vowelCount = vowels.size;\n        val consonantCount\
    \ = consonants.size;\n        val vowelIndex = word.lastIndex - vowelsCount -\
    \ vowelsIndex * consonantsCount - consonantsIndex;\n        val consonantIndex\
    \ = word.lastIndex - vowelsCount - vowelsIndex * consonantsCount - vowelsIndex;\n\
    \        val vowelCount = vowels.size;\n        val consonantCount = consonants.size;\n\
    \        val vowelIndex = word.lastIndex - vowelsCount - vowelsIndex * consonantsCount\
    \ - consonantsIndex;\n        val consonantIndex = word.lastIndex - vowelsCount\
    \ - vowelsIndex * consonantsCount - vowelsIndex;\n        val vowelCount = vowels.size;\n\
    \        val consonantCount = consonants.size;\n        val vowelIndex = word.lastIndex\
    \ - vowelsCount - vowelsIndex * consonantsCount - consonantsIndex;\n        val\
    \ consonantIndex = word.lastIndex - vowelsCount - vowelsIndex * consonantsCount\
    \ - vowelsIndex;\n        val vowelCount = vowels.size;\n        val consonantCount\
    \ = consonants.size;\n        val vowelIndex = word.lastIndex - vowelsCount \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu7gu51uu.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelIndex\e[0m = word.lastIndex\
    \ - vowelsCount - vowelsIndex * consonantsCount - consonantsIndex;\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelIndex is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu7gu51uu.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mconsonantIndex\e[0m = word.lastIndex\
    \ - vowelsCount - vowelsIndex * consonantsCount - vowelsIndex;\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantIndex is already defined as \e[33mvalue\e[0m \e[35mconsonantIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu7gu51uu.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mvowelCount\e[0m = vowels.size;\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu7gu51uu.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantCount\e[0m = consonants.size;\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantCount is already defined as \e[33mvalue\e[0m \e[35mconsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu7"
  stdout: ''
  timestamp: 1659799149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"z\")\n        val consonantsCount = word.filter(consonants.contains).size\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCountMinusOne\
    \ = vowelsCount - 1\n        val vowelsCountMinusTwo = vowelsCount - 2\n     \
    \   val vowelsCountMinusThree = vowelsCount - 3\n        val vowelsCountMinusFour\
    \ = vowelsCount - 4\n        val vowelsCountMinusFive = vowelsCount - 5\n    \
    \    val vowelsCountMinusSix = vowelsCount - 6\n        val vowelsCountMinusSeven\
    \ = vowelsCount - 7\n        val vowelsCountMinusEight = vowelsCount - 8\n   \
    \     val vowelsCountMinusNine = vowelsCount - 9\n        val vowelsCountMinusTen\
    \ = vowelsCount - 10\n        val vowelsCountMinusEleven = vowelsCount - 11\n\
    \        val vowelsCountMinusTwelve = vowelsCount - 12\n        val vowelsCountMinusThirteen\
    \ = vowelsCount - 13\n        val vowelsCountMinusFourteen = vowelsCount - 14\n\
    \        val vowelsCountMinusFifteen = vowelsCount - 15\n        val vowelsCountMinusSixteen\
    \ = vowelsCount - 16\n        val vowelsCountMinusSeventeen = vowelsCount - 17\n\
    \        val vowelsCountMinusEighteen = vowelsCount - 18\n        val vowelsCountMinusNineteen\
    \ = vowelsCount - 19\n        val vowelsCountMinusTwenty = vowelsCount - 20\n\
    \        val vowelsCountMinusTwentyOne = vowelsCount - 21\n        val vowelsCountMinusTwentyTwo\
    \ = vowelsCount - 22\n        val vowelsCountMinusTwentyThree = vowelsCount -\
    \ 23\n        val vowelsCountMinusTwentyFour = vowelsCount - 24\n        val vowelsCountMinusTwentyFive\
    \ = vowelsCount - 25\n        \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp712ckcb5.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp712ckcb5.scala:20:38 --------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).size\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m                                      Found:    (elem : Char)\n\e[31m   |\e\
    [0m                                      Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp712ckcb5.scala:22:42 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(consonants.contains).size\n\
    \e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m\
    \   |\e[0m                                          Found:    (elem : Char)\n\e\
    [31m   |\e[0m                                          Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp712ckcb5.scala:50:5 ---------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n        var vowelCount\
    \ = 0\n        var vowelIndex2 = -1\n        var vowelCount2 = 0\n        var\
    \ vowelIndex3 = -1\n        var vowelCount3 = 0\n        var vowelIndex4 = -1\n\
    \        var vowelCount4 = 0\n        var vowelIndex5 = -1\n        var vowelCount5\
    \ = 0\n        var vowelIndex6 = -1\n        var vowelCount6 = 0\n        var\
    \ vowelIndex7 = -1\n        var vowelCount7 = 0\n        var vowelIndex8 = -1\n\
    \        var vowelCount8 = 0\n        var vowelIndex9 = -1\n        var vowelCount9\
    \ = 0\n        var vowelIndex10 = -1\n        var vowelCount10 = 0\n        var\
    \ vowelIndex11 = -1\n        var vowelCount11 = 0\n        var vowelIndex12 =\
    \ -1\n        var vowelCount12 = 0\n        var vowelIndex13 = -1\n        var\
    \ vowelCount13 = 0\n        var vowelIndex14 = -1\n        var vowelCount14 =\
    \ 0\n        var vowelIndex15 = -1\n        var vowelCount15 = 0\n        var\
    \ vowelIndex16 = -1\n        var vowelCount16 = 0\n        var vowelIndex17 =\
    \ -1\n        var vowelCount17 = 0\n        var vowelIndex18 = -1\n        var\
    \ vowelCount18 = 0\n        var vowelIndex19 = -1\n        var vowelCount19 =\
    \ 0\n        var vowelIndex20 = -1\n        var vowelCount20 = 0\n        var\
    \ vowelIndex21 = -1\n        var vowelCount21 = 0\n        var vowelIndex22 =\
    \ -1\n        var vowelCount22 = 0\n        var vowelIndex23 = -1\n        var\
    \ vowelCount23 = 0\n        var vowelIndex24 = -1\n        var vowelCount24 =\
    \ 0\n        var vowelIndex25 = -1\n        var vowelCount25 = 0\n        var\
    \ vowelIndex26 = -1\n        var vowelCount26 = 0\n        var vowelIndex27 =\
    \ -1\n        var vowelCount27 = 0\n        var vowelIndex28 = -1\n        var\
    \ vowelCount28 = 0\n        var vowelIndex29 = -1\n        var vowelCount29 =\
    \ 0\n        var vowelIndex30 = -1\n        var vowelCount30 = 0\n        var\
    \ vowelIndex31 = -1\n        var vowelCount31 = 0\n        var vowelIndex32 =\
    \ -1\n        var vowelCount32 = 0\n        var vowelIndex33 = -1\n        var\
    \ vowelCount33 = 0\n        var vowelIndex34 = -1\n        var vowelCount34 =\
    \ 0\n        var vowelIndex35 = -1\n        var vowelCount35 = 0\n        var\
    \ vowelIndex36 = -1\n        var vowelCount36 = 0\n        var vowelIndex37 =\
    \ -1\n        var vowelCount37 = 0\n        var vowelIndex38 = -1\n        var\
    \ vowelCount38 = 0\n        var vowelIndex39 = -1\n        var vowelCount39 =\
    \ 0\n        var vowelIndex40 = -1\n        var vowelCount40 = 0\n        var\
    \ vowelIndex41 = -1\n        var vowelCount41 = 0\n        var vowelIndex\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiwdycr1x.scala:103:4 ---------------------------\e\
    [0m\e[0m\n\e[31m103 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpiwdycr1x.scala:103:5 --------------------\e[0m\e[0m\n\e[31m103 |\e[0m\
    \    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m    |\e[0m     Found:    Unit\n\
    \e[31m    |\e[0m     Required: String\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799148
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val consonantsCount = word.filter(consonants.contains).size\n\
    \        val vowelsCountInWord = word.filter(vowels.contains).length\n       \
    \ val consonantsCountInWord = word.filter(consonants.contains).length\n      \
    \  val vowelsCountInWordInWord = word.filter(vowels.contains).filter(consonants.contains).length\n\
    \        val consonantsCountInWordInWord = word.filter(consonants.contains).filter(vowels.contains).length\n\
    \        val vowelsCountInWordInWordInWord = word.filter(vowels.contains).filter(consonants.contains).filter(vowels.contains).length\n\
    \        val consonantsCountInWordInWordInWord = word.filter(consonants.contains).filter(vowels.contains).filter(consonants.contains).length\n\
    \        val vowelsCountInWordInWordInWordInWord = word.filter(vowels.contains).filter(consonants.contains).filter(vowels.contains).filter(consonants.contains).length\n\
    \        val consonantsCountInWordInWordInWordInWord = word.filter(consonants.contains).filter(vowels.contains).filter(consonants.contains).filter(vowels.contains).filter(consonants.contains).length\n\
    \        val vowelsCountInWordInWordInWordInWordInWord = word.filter(vowels.contains).filter(consonants.contains).filter(vowels.contains).filter(consonants.contains).filter(vowels.contains).filter(consonants.contains).length\n\
    \        val consonantsCountInWordInWordInWordInWordInWord = word.filter(consonants.contains).filter(vowels.contains).filter(consonants.contains).filter(vowels.contains).filter(consonants.contains).filter(vowels.contains).filter(consonants.contains).length\n\
    \        val vowelsCountInWordInWordInWordInWordInWordInWord = word.filter(vowels.contains).filter(consonants.contains).filter(vowels.contains).filter(consonants.contains).filter(vowels.contains).filter(consonants.contains).filter(vowels.contains).filter(conson\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc00k3mdi.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpc00k3mdi.scala:21:38 --------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).size\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m                                      Found:    (elem : Char)\n\e[31m   |\e\
    [0m                                      Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc00k3mdi.scala:22:42 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(consonants.contains).size\n\
    \e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m\
    \   |\e[0m                                          Found:    (elem : Char)\n\e\
    [31m   |\e[0m                                          Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc00k3mdi.scala:23:44 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountInWord\e[0m =\
    \ word.filter(vowels.contains).length\n\e[31m\e[31m   |\e[0m                 \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                  Found:    (elem : Char)\n\e[31m   |\e[0m                  \
    \                          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpc00k3mdi.scala:24:48 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCountInWord\e\
    [0m = word.filter(consonants.contains).length\n\e[31m\e[31m   |\e[0m         \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                                  Found:    (elem : Char)"
  stdout: ''
  timestamp: 1659799160
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList\n  \
    \      val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowel\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpajl2q0w7.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpajl2q0w7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpajl2q0w7.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpajl2q0w7.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpajl2q0w7.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already define"
  stdout: ''
  timestamp: 1659799154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowels.toSet.reverse\n        val vowelsSet3 = vowels.toSet\n\
    \        val vowelsSet4 = vowels.toSet\n        val vowelsSet5 = vowels.toSet\n\
    \        val vowelsSet6 = vowels.toSet\n        val vowelsSet7 = vowels.toSet\n\
    \        val vowelsSet8 = vowels.toSet\n        val vowelsSet9 = vowels.toSet\n\
    \        val vowelsSet10 = vowels.toSet\n        val vowelsSet11 = vowels.toSet\n\
    \        val vowelsSet12 = vowels.toSet\n        val vowelsSet13 = vowels.toSet\n\
    \        val vowelsSet14 = vowels.toSet\n        val vowelsSet15 = vowels.toSet\n\
    \        val vowelsSet16 = vowels.toSet\n        val vowelsSet17 = vowels.toSet\n\
    \        val vowelsSet18 = vowels.toSet\n        val vowelsSet19 = vowels.toSet\n\
    \        val vowelsSet20 = vowels.toSet\n        val vowelsSet21 = vowels.toSet\n\
    \        val vowelsSet22 = vowels.toSet\n        val vowelsSet23 = vowels.toSet\n\
    \        val vowelsSet24 = vowels.toSet\n        val vowelsSet25 = vowels.toSet\n\
    \        val vowelsSet26 = vowels.toSet\n        val vowelsSet27 = vowels.toSet\n\
    \        val vowelsSet28 = vowels.toSet\n        val vowelsSet29 = vowels.toSet\n\
    \        val vowelsSet30 = vowels.toSet\n        val vowelsSet31 = vowels.toSet\n\
    \        val vowelsSet32 = vowels.toSet\n        val vowelsSet33 = vowels.toSet\n\
    \        val vowelsSet34 = vowels.toSet\n        val vowelsSet35 = vowels.toSet\n\
    \        val vowelsSet36 = vowels.toSet\n        val vowelsSet37 = vowels.toSet\n\
    \        val vowelsSet38 = vowels.toSet\n        val vowelsSet39 = vowels.toSet\n\
    \        val vowelsSet40 = vowels.toSet\n        val vowelsSet41 = vowels.toSet\n\
    \        val vowelsSet42 = vowels.toSet\n        val vowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmi1lqmns.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmi1lqmns.scala:21:38\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSet2\e[0m = vowels.toSet.reverse\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not a\
    \ member of Set[String] - did you mean Set[String].reversed?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpmi1lqmns.scala:63:5 ---------------------\e[0m\e\
    [0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr505bcfn.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr505bcfn.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr505bcfn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr505bcfn.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr505bcfn.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.ma"
  stdout: ''
  timestamp: 1659799144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorSize = vowelsSetIterator.size\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size\n        val\
    \ vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size\n   \
    \     val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjzhygu03.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpjzhygu03.scala:26:62 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjzhygu03.scala:38:64 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjzhygu03.scala:41:72\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextSize\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m    Not found: vowelsSetItera"
  stdout: ''
  timestamp: 1659799157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.filter(_ != \"a\")\n        val vowelsSet3 = vowelsSet.filter(_\
    \ != \"e\")\n        val vowelsSet4 = vowelsSet.filter(_ != \"i\")\n        val\
    \ vowelsSet5 = vowelsSet.filter(_ != \"o\")\n        val vowelsSet6 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet7 = vowelsSet.filter(_ != \"A\")\n        val\
    \ vowelsSet8 = vowelsSet.filter(_ != \"E\")\n        val vowelsSet9 = vowelsSet.filter(_\
    \ != \"I\")\n        val vowelsSet10 = vowelsSet.filter(_ != \"O\")\n        val\
    \ vowelsSet11 = vowelsSet.filter(_ != \"U\")\n        val vowelsSet12 = vowelsSet.filter(_\
    \ != \"a\")\n        val vowelsSet13 = vowelsSet.filter(_ != \"e\")\n        val\
    \ vowelsSet14 = vowelsSet.filter(_ != \"i\")\n        val vowelsSet15 = vowelsSet.filter(_\
    \ != \"o\")\n        val vowelsSet16 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet17 = vowelsSet.filter(_ != \"A\")\n        val vowelsSet18 = vowelsSet.filter(_\
    \ != \"E\")\n        val vowelsSet19 = vowelsSet.filter(_ != \"I\")\n        val\
    \ vowelsSet20 = vowelsSet.filter(_ != \"O\")\n        val vowelsSet21 = vowelsSet.filter(_\
    \ != \"U\")\n        val vowelsSet22 = vowelsSet.filter(_ != \"a\")\n        val\
    \ vowelsSet23 = vowelsSet.filter(_ != \"e\")\n        val vowelsSet24 = vowelsSet.filter(_\
    \ != \"i\")\n        val vowelsSet25 = vowelsSet.filter(_ != \"o\")\n        val\
    \ vowelsSet26 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet27 = vowelsSet.filter(_\
    \ != \"A\")\n        val vowelsSet28 = vowelsSet.filter(_ != \"E\")\n        val\
    \ vowelsSet29 = vowelsSet.filter(_ != \"I\")\n        val vowelsSet30 = vowelsSet.filter(_\
    \ != \"O\")\n        val vowelsSet31 = vowelsSet.filter(_ != \"U\")\n        val\
    \ vowelsSet32 = vowelsSet.filter(_ != \"a\")\n        val vowels\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn89excpg.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpn89excpg.scala:53:5 ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphexu38ah.scala:56:25 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphexu38ah.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowels.toSet.reverse\n        val vowelsSet3 = vowels.toSet\n\
    \        val vowelsSet4 = vowels.toSet\n        val vowelsSet5 = vowels.toSet\n\
    \        val vowelsSet6 = vowels.toSet\n        val vowelsSet7 = vowels.toSet\n\
    \        val vowelsSet8 = vowels.toSet\n        val vowelsSet9 = vowels.toSet\n\
    \        val vowelsSet10 = vowels.toSet\n        val vowelsSet11 = vowels.toSet\n\
    \        val vowelsSet12 = vowels.toSet\n        val vowelsSet13 = vowels.toSet\n\
    \        val vowelsSet14 = vowels.toSet\n        val vowelsSet15 = vowels.toSet\n\
    \        val vowelsSet16 = vowels.toSet\n        val vowelsSet17 = vowels.toSet\n\
    \        val vowelsSet18 = vowels.toSet\n        val vowelsSet19 = vowels.toSet\n\
    \        val vowelsSet20 = vowels.toSet\n        val vowelsSet21 = vowels.toSet\n\
    \        val vowelsSet22 = vowels.toSet\n        val vowelsSet23 = vowels.toSet\n\
    \        val vowelsSet24 = vowels.toSet\n        val vowelsSet25 = vowels.toSet\n\
    \        val vowelsSet26 = vowels.toSet\n        val vowelsSet27 = vowels.toSet\n\
    \        val vowelsSet28 = vowels.toSet\n        val vowelsSet29 = vowels.toSet\n\
    \        val vowelsSet30 = vowels.toSet\n        val vowelsSet31 = vowels.toSet\n\
    \        val vowelsSet32 = vowels.toSet\n        val vowelsSet33 = vowels.toSet\n\
    \        val vowelsSet34 = vowels.toSet\n        val vowelsSet35 = vowels.toSet\n\
    \        val vowelsSet36 = vowels.toSet\n        val vowelsSet37 = vowels.toSet\n\
    \        val vowelsSet38 = vowels.toSet\n        val vowelsSet39 = vowels.toSet\n\
    \        val vowelsSet40 = vowels.toSet\n        val vowelsSet41 = vowels.toSet\n\
    \        val vowelsSet42 = vowels.toSet\n        val vowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmi1lqmns.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmi1lqmns.scala:21:38\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSet2\e[0m = vowels.toSet.reverse\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not a\
    \ member of Set[String] - did you mean Set[String].reversed?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpmi1lqmns.scala:63:5 ---------------------\e[0m\e\
    [0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsCount = word.filter(vowels.contains).size\n        val consonants = Set(\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ consonantsCount = word.filter(consonants.contains).size\n        val vowelsCountInWord\
    \ = vowelsCount + consonantsCount\n        val vowelsCountInWordInWord = vowelsCountInWord\
    \ + word.filter(x => x != word(0)).size\n        val vowelsCountInWordInWordInWord\
    \ = vowelsCountInWordInWord + word.filter(x => x != word(1)).size\n        val\
    \ vowelsCountInWordInWordInWordInWord = vowelsCountInWordInWordInWord + word.filter(x\
    \ => x != word(2)).size\n        val vowelsCountInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWord + word.filter(x => x != word(3)).size\n\
    \        val vowelsCountInWordInWordInWordInWordInWordInWord = vowelsCountInWordInWordInWordInWordInWord\
    \ + word.filter(x => x != word(4)).size\n        val vowelsCountInWordInWordInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWordInWordInWord + word.filter(x => x != word(5)).size\n\
    \        val vowelsCountInWordInWordInWordInWordInWordInWordInWordInWord = vowelsCountInWordInWordInWordInWordInWordInWordInWord\
    \ + word.filter(x => x != word(6)).size\n        val vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWordInWordInWordInWordInWord + word.filter(x\
    \ => x != word(7)).size\n        val vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord + word.filter(x\
    \ => x != word(8)).size\n        val vowelsCountInWordInWordIn\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcmzmld3w.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcmzmld3w.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\e[0m\
    \ = vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord + word.filter(\e\
    [36mx\e[0m => x != word(\e[31m8\e[0m)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpcmzmld3w.scala:20:38 --------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).size\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m                                      Found:    (elem : Char)\n\e[31m   |\e\
    [0m                                      Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcmzmld3w.scala:22:42 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(consonants.contains).size\n\
    \e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m\
    \   |\e[0m                                          Found:    (elem : Char)\n\e\
    [31m   |\e[0m                                          Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type"
  stdout: ''
  timestamp: 1659799158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsSet = vowels.toSet;\n\
    \        val vowelsSet2 = vowels.toSet;\n        val vowelsSet3 = vowels.toSet;\n\
    \        val vowelsSet4 = vowels.toSet;\n        val vowelsSet5 = vowels.toSet;\n\
    \        val vowelsSet6 = vowels.toSet;\n        val vowelsSet7 = vowels.toSet;\n\
    \        val vowelsSet8 = vowels.toSet;\n        val vowelsSet9 = vowels.toSet;\n\
    \        val vowelsSet10 = vowels.toSet;\n        val vowelsSet11 = vowels.toSet;\n\
    \        val vowelsSet12 = vowels.toSet;\n        val vowelsSet13 = vowels.toSet;\n\
    \        val vowelsSet14 = vowels.toSet;\n        val vowelsSet15 = vowels.toSet;\n\
    \        val vowelsSet16 = vowels.toSet;\n        val vowelsSet17 = vowels.toSet;\n\
    \        val vowelsSet18 = vowels.toSet;\n        val vowelsSet19 = vowels.toSet;\n\
    \        val vowelsSet20 = vowels.toSet;\n        val vowelsSet21 = vowels.toSet;\n\
    \        val vowelsSet22 = vowels.toSet;\n        val vowelsSet23 = vowels.toSet;\n\
    \        val vowelsSet24 = vowels.toSet;\n        val vowelsSet25 = vowels.toSet;\n\
    \        val vowelsSet26 = vowels.toSet;\n        val vowelsSet27 = vowels.toSet;\n\
    \        val vowelsSet28 = vowels.toSet;\n        val vowelsSet29 = vowels.toSet;\n\
    \        val vowelsSet30 = vowels.toSet;\n        val vowelsSet31 = vowels.toSet;\n\
    \        val vowelsSet32 = vowels.toSet;\n        val vowelsSet33 = vowels.toSet;\n\
    \        val vowelsSet34 = vowels.toSet;\n        val vowelsSet35 = vowels.toSet;\n\
    \        val vowelsSet36 = vowels.toSet;\n        val vowelsSet37 = vowels.toSet;\n\
    \        val vowelsSet38 = vowels.toSet;\n        val vowelsSet39 = vowels.toSet;\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpszafhvn3.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.zipWithIndex.filter(_._2 % vowelsCount == 0).map(_._1).last\n\
    \        val vowelsIndex = vowelsIndex.getOrElse(\"\")\n        val vowelsIndex\
    \ = vowelsIndex.substring(vowelsIndex.length - 1)\n        val vowelsIndex = vowelsIndex.charAt(0)\n\
    \        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length - 1)\n      \
    \  val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length - 1)\n        val vowelsIndex\
    \ = vowelsIndex.charAt(vowelsIndex.length - 1)\n        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length\
    \ - 1)\n        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length - 1)\n\
    \        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length - 1)\n      \
    \  val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length - 1)\n        val vowelsIndex\
    \ = vowelsIndex.charAt(vowelsIndex.length - 1)\n        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length\
    \ - 1)\n        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length - 1)\n\
    \        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length - 1)\n      \
    \  val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length - 1)\n        val vowelsIndex\
    \ = vowelsIndex.charAt(vowelsIndex.length - 1)\n        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length\
    \ - 1)\n        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length - 1)\n\
    \        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length - 1)\n      \
    \  val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length - 1)\n        val vowelsIndex\
    \ = vowelsIndex.charAt(vowelsIndex.length - 1)\n        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length\
    \ - 1)\n        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length - 1)\n\
    \        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length - 1)\n      \
    \  val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length - 1)\n        val vowelsIndex\
    \ = vowelsIndex.charAt(vowelsIndex.length - 1)\n        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length\
    \ - 1)\n        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length - 1)\n\
    \        val vowelsIndex = vowelsIndex.charAt(vowelsIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdijbg_yn.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdijbg_yn.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = vowelsIndex.getOrElse(\e[31m\"\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpdijbg_yn.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.substring(vowelsIndex.length\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdijbg_yn.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.charAt(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdijbg_yn.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.charAt(vowelsIndex.length\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overload"
  stdout: ''
  timestamp: 1659799159
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.previous\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.previous\n    \
    \    val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextPrev\
    \ = vowelsSetIteratorNextPrev.previous\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.previous\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.previous\n     \
    \   val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.previous\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.previous\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn7b8z49p.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNextPrev.previous\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn7b8z49p.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.previous\n\e[31m\e[31m   |\e[0m                      \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        value previous is not a member of Iterator[String]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpn7b8z49p.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.previous\n\e[31m\e[31m   |\e[0m                    \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                            value previous is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpn7b8z49p.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpn7b8z49p.scala:34:60 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextPrev\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNext.previous\n\e[31m\e[31m   |\e[0m\
    \                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              "
  stdout: ''
  timestamp: 1659799159
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsCount = word.filter(vowels.contains).size\n        val consonants = word.filter(!vowels.contains)\n\
    \        val consonantsCount = consonants.size\n        val vowelsCount = vowelsCount\
    \ + consonantsCount\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowels\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuq2y_iso.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuq2y_iso.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuq2y_iso.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuq2y_iso.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuq2y_iso.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n"
  stdout: ''
  timestamp: 1659799160
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsSet =\
    \ vowels.toSet\n        val consonantsSet = consonants.toSet\n        val vowelsSetSize\
    \ = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val consonantsSetIterator\
    \ = consonantsSet.iterator\n        val vowelsSetIteratorSize = vowelsSetIterator.size\n\
    \        val consonantsSetIteratorSize = consonantsSetIterator.size\n        val\
    \ vowelsSetIteratorNext = vowelsSetIterator.next\n        val consonantsSetIteratorNext\
    \ = consonantsSetIterator.next\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n\
    \        val consonantsSetIteratorNextSize = consonantsSetIteratorNext.size\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ consonantsSetIteratorNextNext = consonantsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size\n        val\
    \ consonantsSetIteratorNextNextSize = consonantsSetIteratorNextNext.size\n   \
    \     val vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n   \
    \     val consonantsSetIteratorNextNextNext = consonantsSetIteratorNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size\n\
    \        val consonantsSetIteratorNextNextNextSize = consonantsSetIteratorNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val consonantsSetIteratorNextNextNextNext = consonantsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size\n\
    \        val consonantsSetIteratorNextNextNextNextSize = consonantsSetIteratorNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val consonantsSetIteratorNextNextNextNextNext = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppx1ytjf1.scala:46:55 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSetIteratorNextNextNextNextNext\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \       ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmppx1ytjf1.scala:33:62 ------------------------\e[0m\e[0m\n\e[31m33 |\e\
    [0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppx1ytjf1.scala:34:70 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSetIteratorNextNext\e\
    [0m = consonantsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ next is not a member of String - did you mean consonantsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppx1ytjf1.scala:47:5 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        var vowels : mutable.Set[Char]\
    \ = mutable.Set()\n        var vowelIndex : Int = 0\n        var vowelIndex2 :\
    \ Int = 0\n        var vowelIndex3 : Int = 0\n        var vowelIndex4 : Int =\
    \ 0\n        var vowelIndex5 : Int = 0\n        var vowelIndex6 : Int = 0\n  \
    \      var vowelIndex7 : Int = 0\n        var vowelIndex8 : Int = 0\n        var\
    \ vowelIndex9 : Int = 0\n        var vowelIndex10 : Int = 0\n        var vowelIndex11\
    \ : Int = 0\n        var vowelIndex12 : Int = 0\n        var vowelIndex13 : Int\
    \ = 0\n        var vowelIndex14 : Int = 0\n        var vowelIndex15 : Int = 0\n\
    \        var vowelIndex16 : Int = 0\n        var vowelIndex17 : Int = 0\n    \
    \    var vowelIndex18 : Int = 0\n        var vowelIndex19 : Int = 0\n        var\
    \ vowelIndex20 : Int = 0\n        var vowelIndex21 : Int = 0\n        var vowelIndex22\
    \ : Int = 0\n        var vowelIndex23 : Int = 0\n        var vowelIndex24 : Int\
    \ = 0\n        var vowelIndex25 : Int = 0\n        var vowelIndex26 : Int = 0\n\
    \        var vowelIndex27 : Int = 0\n        var vowelIndex28 : Int = 0\n    \
    \    var vowelIndex29 : Int = 0\n        var vowelIndex30 : Int = 0\n        var\
    \ vowelIndex31 : Int = 0\n        var vowelIndex32 : Int = 0\n        var vowelIndex33\
    \ : Int = 0\n        var vowelIndex34 : Int = 0\n        var vowelIndex35 : Int\
    \ = 0\n        var vowelIndex36 : Int = 0\n        var vowelIndex37 : Int = 0\n\
    \        var vowelIndex38 : Int = 0\n        var vowelIndex39 : Int = 0\n    \
    \    var vowelIndex40 : Int = 0\n        var vowelIndex41 : Int = 0\n        var\
    \ vowelIndex42 : Int = 0\n        var vowelIndex43 : Int = 0\n        var vowelIndex44\
    \ : Int = 0\n        var vowelIndex45 : Int = 0\n        var vowelIndex46 : Int\
    \ = 0\n        var vowelIndex47 : Int = 0\n        var vowelIndex48 : Int = 0\n\
    \        var vowelIndex49 : Int = 0\n        var vowelIndex50 : Int = 0\n    \
    \    var vowelIndex51 : Int = 0\n        var vowelIndex52 : Int = 0\n        var\
    \ vowelIndex53 : Int = 0\n        var vowelIndex54 : Int = 0\n        var vowelIndex55\
    \ : Int = 0\n        var vowelIndex56 : Int = 0\n        var vowelIndex57 : Int\
    \ = 0\n        var vowelIndex58 : Int = 0\n        var vowelIndex59 : Int = 0\n\
    \        var vowelIndex60 : Int = 0\n        var vowelIndex61 : Int = 0\n    \
    \    var vowelIndex62 : Int = 0\n        var vowelIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxd3ke2xq.scala:83:4 ----------------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxd3ke2xq.scala:19:21\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e\
    [36mvowels\e[0m : mutable.Set[\e[35mChar\e[0m] = mutable.Set()\n\e[31m\e[31m \
    \  |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxd3ke2xq.scala:19:41\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e\
    [36mvowels\e[0m : mutable.Set[\e[35mChar\e[0m] = mutable.Set()\n\e[31m\e[31m \
    \  |\e[0m                                         ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                         Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxd3ke2xq.scala:83:5 ---------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n        var vowel\
    \ = \"\"\n        var currentIndex = 0\n        var currentChar = word.charAt(currentIndex)\n\
    \        var currentVowel = \"\"\n        var nextChar = word.charAt(currentIndex\
    \ + 1)\n        var nextVowel = \"\"\n        while (vowelIndex < vowels.size)\
    \ {\n            if (vowels.contains(currentChar)) {\n                currentVowel\
    \ = currentChar\n                vowelIndex = vowelIndex + 1\n               \
    \ currentIndex = currentIndex + 1\n                currentChar = word.charAt(currentIndex)\n\
    \            }\n            if (vowels.contains(nextChar)) {\n               \
    \ nextVowel = nextChar\n                vowelIndex = vowelIndex + 1\n        \
    \        currentIndex = currentIndex + 1\n                nextChar = word.charAt(currentIndex\
    \ + 1)\n            }\n        }\n        if (vowelIndex == vowels.size) {\n \
    \           if (vowels.contains(currentChar)) {\n                currentVowel\
    \ = currentChar\n            }\n        }\n        if (vowelIndex == vowels.size)\
    \ {\n            if (vowels.contains(nextChar)) {\n                nextVowel =\
    \ nextChar\n            }\n        }\n        if (vowelIndex == vowels.size) {\n\
    \            if (vowels.contains(currentChar) && vowels.contains(nextChar)) {\n\
    \                currentVowel = currentChar\n                nextVowel = nextChar\n\
    \            }\n        }\n        if (vowelIndex == vowels.size) {\n        \
    \    if (vowels.contains(currentChar)) {\n                currentVowel = currentChar\n\
    \            }\n        }\n        if (vowelIndex == vowels.size) {\n        \
    \    if (vowels.contains(nextChar)) {\n                nextVowel = nextChar\n\
    \            }\n        }\n        if (vowelIndex == vowels.size) {\n        \
    \    if (vowels.contains(currentChar) && vowels.contains(nextChar)) {\n      \
    \          currentVowel = currentChar\n                nextVowel = nextChar\n\
    \            }\n        }\n        if (vowelIndex == vowels.size) {\n        \
    \    if (vowels.contains(currentChar)) {\n                currentVowel = currentChar\n\
    \            }\n        }\n        if (vowelIndex == vowels.size) {\n        \
    \    if (vowels.contains(nextChar)) {\n                nextVowel = nextChar\n\
    \            }\n        }\n        if (vowelIndex == vowels.size) {\n        \
    \    if (vowels.contains(currentChar) && vowels.contains(nextChar)) {\n      \
    \          currentVowel = currentChar\n                nextVowel = nextChar\n\
    \            }\n        }\n        if (vowelIndex == vowels.size) {\n        \
    \    if (vowels.contains(currentChar)) {\n                currentVowel = currentChar\n\
    \            }\n        }\n        if (vowelIndex == vowels.size) {\n        \
    \    if (vowels.contains(nextChar)) {\n                nextV\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwxw77zt_.scala:115:0 ---------------------------\e\
    [0m\e[0m\n\e[31m115 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwxw77zt_.scala:28:32\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mif\e[0m (vowels.contains(currentChar))\
    \ {\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                Found:    (currentChar : Char)\n\e\
    [31m   |\e[0m                                Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwxw77zt_.scala:29:31 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                currentVowel = currentChar\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               Found:    (currentChar : Char)\n\e[31m   |\e[0m\
    \                               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwxw77zt_.scala:34:32 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mif\e[0m (vowels.contains(nextChar))\
    \ {\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Found:    (nextChar : Char)\n\e[31m\
    \   |\e[0m                                Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwxw77zt_.scala:35:28 --------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                nextVowel = nextChar\n\e[31m\e[31m  \
    \ |\e[0m                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                 Found:    (nextChar : Char)\n\e[31m   |\e[0m               \
    \             Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwxw77zt_.scala:42:32 -----------------"
  stdout: ''
  timestamp: 1659799161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n        var vowelIndex2\
    \ = word.length - 1\n        var vowelIndex3 = word.length - 1\n        var vowelIndex4\
    \ = word.length - 1\n        var vowelIndex5 = word.length - 1\n        var vowelIndex6\
    \ = word.length - 1\n        var vowelIndex7 = word.length - 1\n        var vowelIndex8\
    \ = word.length - 1\n        var vowelIndex9 = word.length - 1\n        var vowelIndex10\
    \ = word.length - 1\n        var vowelIndex11 = word.length - 1\n        var vowelIndex12\
    \ = word.length - 1\n        var vowelIndex13 = word.length - 1\n        var vowelIndex14\
    \ = word.length - 1\n        var vowelIndex15 = word.length - 1\n        var vowelIndex16\
    \ = word.length - 1\n        var vowelIndex17 = word.length - 1\n        var vowelIndex18\
    \ = word.length - 1\n        var vowelIndex19 = word.length - 1\n        var vowelIndex20\
    \ = word.length - 1\n        var vowelIndex21 = word.length - 1\n        var vowelIndex22\
    \ = word.length - 1\n        var vowelIndex23 = word.length - 1\n        var vowelIndex24\
    \ = word.length - 1\n        var vowelIndex25 = word.length - 1\n        var vowelIndex26\
    \ = word.length - 1\n        var vowelIndex27 = word.length - 1\n        var vowelIndex28\
    \ = word.length - 1\n        var vowelIndex29 = word.length - 1\n        var vowelIndex30\
    \ = word.length - 1\n        var vowelIndex31 = word.length - 1\n        var vowelIndex32\
    \ = word.length - 1\n        var vowelIndex33 = word.length - 1\n        var vowelIndex34\
    \ = word.length - 1\n        var vowelIndex35 = word.length - 1\n        var vowelIndex36\
    \ = word.length - 1\n        var vowelIndex37 = word.length - 1\n        var vowelIndex38\
    \ = word.length - 1\n        var vowelIndex39 = word.length - 1\n        var vowelIndex40\
    \ = word.length - 1\n        var vowelIndex41 = word.length - 1\n        var vowelIndex42\
    \ = word.length - 1\n        var vowelIndex43 = word.length - 1\n        var vowelIndex44\
    \ = word.length - 1\n        var vowelIndex45 = word.length - 1\n        var vowelIndex46\
    \ = word.length - 1\n        var vowelIndex47 = word.length - 1\n        var vowelIndex48\
    \ = word.length - 1\n        var vowelIndex49 = word.length - 1\n        var vowelIndex50\
    \ = word.length - 1\n        var vowelIndex51 = word.length - 1\n        var vowelIndex52\
    \ = word.length - 1\n        var vowelIndex53 = word.length - 1\n        var vowelIndex54\
    \ = word.length - 1\n        var vowelIndex55 = word.length - 1\n        var vowelIndex56\
    \ = word.length - 1\n        var vowelIndex57 = word.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplu3pl9dt.scala:77:5\
    \ ---------------------\e[0m\e[0m\n\e[31m77 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsSet = vowels.toSet;\n\
    \        val vowelsSet2 = vowelsSet.toSet;\n        val vowelsSet3 = vowelsSet2.toSet;\n\
    \        val vowelsSet4 = vowelsSet3.toSet;\n        val vowelsSet5 = vowelsSet4.toSet;\n\
    \        val vowelsSet6 = vowelsSet5.toSet;\n        val vowelsSet7 = vowelsSet6.toSet;\n\
    \        val vowelsSet8 = vowelsSet7.toSet;\n        val vowelsSet9 = vowelsSet8.toSet;\n\
    \        val vowelsSet10 = vowelsSet9.toSet;\n        val vowelsSet11 = vowelsSet10.toSet;\n\
    \        val vowelsSet12 = vowelsSet11.toSet;\n        val vowelsSet13 = vowelsSet12.toSet;\n\
    \        val vowelsSet14 = vowelsSet13.toSet;\n        val vowelsSet15 = vowelsSet14.toSet;\n\
    \        val vowelsSet16 = vowelsSet15.toSet;\n        val vowelsSet17 = vowelsSet16.toSet;\n\
    \        val vowelsSet18 = vowelsSet17.toSet;\n        val vowelsSet19 = vowelsSet18.toSet;\n\
    \        val vowelsSet20 = vowelsSet19.toSet;\n        val vowelsSet21 = vowelsSet20.toSet;\n\
    \        val vowelsSet22 = vowelsSet21.toSet;\n        val vowelsSet23 = vowelsSet22.toSet;\n\
    \        val vowelsSet24 = vowelsSet23.toSet;\n        val vowelsSet25 = vowelsSet24.toSet;\n\
    \        val vowelsSet26 = vowelsSet25.toSet;\n        val vowelsSet27 = vowelsSet26.toSet;\n\
    \        val vowelsSet28 = vowelsSet27.toSet;\n        val vowelsSet29 = vowelsSet28.toSet;\n\
    \        val vowelsSet30 = vowelsSet29.toSet;\n        val vowelsSet31 = vowelsSet30.toSet;\n\
    \        val vowelsSet32 = vowelsSet31.toSet;\n        val vowelsSet33 = vowelsSet32.toSet;\n\
    \        val vowelsSet34 = vowelsSet33.toSet;\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpstgde7vz.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = if (vowelsIndex\
    \ < 0) 0 else vowelsIndex\n        val consonantsIndex = if (consonantsIndex <\
    \ 0) 0 else consonantsIndex\n        val vowelsCount = if (vowelsIndex < 0) 0\
    \ else vowelsIndex - vowelsIndex % vowelsCount\n        val consonantsCount =\
    \ if (consonantsIndex < 0) 0 else consonantsIndex - consonantsIndex % consonantsCount\n\
    \        val vowelsIndex = if (vowelsIndex < 0) 0 else vowelsIndex\n        val\
    \ consonantsIndex = if (consonantsIndex < 0) 0 else consonantsIndex\n        val\
    \ vowelsIndex = if (vowelsIndex < 0) 0 else vowelsIndex\n        val consonantsIndex\
    \ = if (consonantsIndex < 0) 0 else consonantsIndex\n        val vowelsIndex =\
    \ if (vowelsIndex < 0) 0 else vowelsIndex\n        val consonantsIndex = if (consonantsIndex\
    \ < 0) 0 else consonantsIndex\n        val vowelsIndex = if (vowelsIndex < 0)\
    \ 0 else vowelsIndex\n        val consonantsIndex = if (consonantsIndex < 0) 0\
    \ else consonantsIndex\n        val vowelsIndex = if (vowelsIndex < 0) 0 else\
    \ vowelsIndex\n        val consonantsIndex = if (consonantsIndex < 0) 0 else consonantsIndex\n\
    \        val vowelsIndex = if (vowelsIndex < 0) 0 else vowelsIndex\n        val\
    \ consonantsIndex = if (consonantsIndex < 0) 0 else consonantsIndex\n        val\
    \ vowelsIndex = if (vowelsIndex < 0) 0 else vowelsIndex\n        val consonantsIndex\
    \ = if (consonantsIndex < 0) 0 else consonantsIndex\n        val vowelsIndex =\
    \ if (vowelsIndex < 0) 0 else vowelsIndex\n        val consonantsIndex = if (consonantsIndex\
    \ < 0) 0 else consonantsIndex\n        val vowelsIndex = if (vowelsIndex < 0)\
    \ 0 else vowelsIndex\n        val consonants\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqn_2dwwi.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqn_2dwwi.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = \e[33mif\e[0m (vowelsIndex < \e[31m0\e[0m) \e[31m0\e\
    [0m \e[33melse\e[0m vowelsIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqn_2dwwi.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = \e[33mif\e[0m\
    \ (consonantsIndex < \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m consonantsIndex\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqn_2dwwi.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = \e[33mif\e\
    [0m (vowelsIndex < \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m vowelsIndex - vowelsIndex\
    \ % vowelsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqn_2dwwi.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = \e[33mif\e[0m\
    \ (consonantsIndex < \e[31m0\e[0m) \e[3"
  stdout: ''
  timestamp: 1659799160
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorPrevPrev\
    \ = vowelsSetIteratorPrev.prev\n        val vowelsSetIteratorPrevNext = vowelsSetIteratorPrev.next\n\
    \        val vowelsSetIteratorNextPrevPrev = vowelsSetIteratorNextPrev.prev\n\
    \        val vowelsSetIteratorNextPrevNext = vowelsSetIteratorNextPrev.next\n\
    \        val vowelsSetIteratorPrevPrevPrev = vowelsSetIteratorPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevPrevNext = vowelsSetIteratorPrevPrev.next\n\
    \        val vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextPrev.next\n\
    \        val vowelsSetIteratorPrevNextPrev = vowelsSetIteratorNextPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevNextNext = vowelsSetIteratorNextPrevPrev.next\n\
    \        val vowelsSetIteratorPrevPrevPrevPrev = vowelsSetIteratorPrevPrevNext.prev\n\
    \        val vowelsSetIteratorPrevPrevNextPrev = vowelsSetIteratorPrevNextPrev.prev\n\
    \        val vowelsSetIteratorPrevNextPrevPrev = vowelsSetIteratorPrevNextPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevNextNextPrev = vowelsSetIteratorPrevNextPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrev = vowelsSetIteratorPrevPrevPrevNext.prev\n\
    \        val vowelsSetIteratorPrevPrevNextNextPrev = vowelsSetIteratorPrevNextPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevNextPrevPrev = vowelsSetIteratorPrevNextPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevNextNextNextPrev = vowelsSetIteratorPrevNextNextPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevPrev = vowelsSetIteratorPrevPrevPrevNextPrev.prev\n\
    \        val vowelsSetIteratorPrevPrevNextNextNextPrev = vowelsSetIteratorPrevNextNextPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevNextPrevPrevPrev = vowels\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ckvu4ov.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrevPrevPrevPrev\e\
    [0m = vowelsSetIteratorPrevPrevPrevNext.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorPrevPrevPrevPrev is already defined as \e\
    [33mvalue\e[0m \e[35mvowelsSetIteratorPrevPrevPrevPrev\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ckvu4ov.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorPrevNextPrevPrev\e[0m = vowelsSetIteratorPrevNextPrevPrev.prev\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorPrevNextPrevPrev is already defined as \e\
    [33mvalue\e[0m \e[35mvowelsSetIteratorPrevNextPrevPrev\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ckvu4ov.scala:23:54\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue prev is not a member of Iterator[String] - did you mean vowelsSetIterator.drop?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ckvu4ov.scala:24:62 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev\
    \ is not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp0ckvu4ov.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNex"
  stdout: ''
  timestamp: 1659799160
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsSet = vowels.toSet;\n\
    \        val vowelsSet2 = vowels.toSet;\n        val vowelsSet3 = vowels.toSet;\n\
    \        val vowelsSet4 = vowels.toSet;\n        val vowelsSet5 = vowels.toSet;\n\
    \        val vowelsSet6 = vowels.toSet;\n        val vowelsSet7 = vowels.toSet;\n\
    \        val vowelsSet8 = vowels.toSet;\n        val vowelsSet9 = vowels.toSet;\n\
    \        val vowelsSet10 = vowels.toSet;\n        val vowelsSet11 = vowels.toSet;\n\
    \        val vowelsSet12 = vowels.toSet;\n        val vowelsSet13 = vowels.toSet;\n\
    \        val vowelsSet14 = vowels.toSet;\n        val vowelsSet15 = vowels.toSet;\n\
    \        val vowelsSet16 = vowels.toSet;\n        val vowelsSet17 = vowels.toSet;\n\
    \        val vowelsSet18 = vowels.toSet;\n        val vowelsSet19 = vowels.toSet;\n\
    \        val vowelsSet20 = vowels.toSet;\n        val vowelsSet21 = vowels.toSet;\n\
    \        val vowelsSet22 = vowels.toSet;\n        val vowelsSet23 = vowels.toSet;\n\
    \        val vowelsSet24 = vowels.toSet;\n        val vowelsSet25 = vowels.toSet;\n\
    \        val vowelsSet26 = vowels.toSet;\n        val vowelsSet27 = vowels.toSet;\n\
    \        val vowelsSet28 = vowels.toSet;\n        val vowelsSet29 = vowels.toSet;\n\
    \        val vowelsSet30 = vowels.toSet;\n        val vowelsSet31 = vowels.toSet;\n\
    \        val vowelsSet32 = vowels.toSet;\n        val vowelsSet33 = vowels.toSet;\n\
    \        val vowelsSet34 = vowels.toSet;\n        val vowelsSet35 = vowels.toSet;\n\
    \        val vowelsSet36 = vowels.toSet;\n        val vowelsSet37 = vowels.toSet;\n\
    \        val vowelsSet38 = vowels.toSet;\n        val vowelsSet39 = vowels.toSet;\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpszafhvn3.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet3\
    \ = vowelsSet.filter(_ != vowels.first)\n        val vowelsSet4 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet5 = vowelsSet.filter(_ != vowels.first)\n\
    \        val vowelsSet6 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet7\
    \ = vowelsSet.filter(_ != vowels.first)\n        val vowelsSet8 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet9 = vowelsSet.filter(_ != vowels.first)\n\
    \        val vowelsSet10 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet11\
    \ = vowelsSet.filter(_ != vowels.first)\n        val vowelsSet12 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet13 = vowelsSet.filter(_ != vowels.first)\n\
    \        val vowelsSet14 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet15\
    \ = vowelsSet.filter(_ != vowels.first)\n        val vowelsSet16 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet17 = vowelsSet.filter(_ != vowels.first)\n\
    \        val vowelsSet18 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet19\
    \ = vowelsSet.filter(_ != vowels.first)\n        val vowelsSet20 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet21 = vowelsSet.filter(_ != vowels.first)\n\
    \        val vowelsSet22 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet23\
    \ = vowelsSet.filter(_ != vowels.first)\n        val vowelsSet24 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet25 = vowelsSet.filter(_ != vowels.first)\n\
    \        val vowelsSet26 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet27\
    \ = vowelsSet.filter(_ != vowels.first)\n        val vowelsSet28 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet29 = vowelsSet.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpklzond5_.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpklzond5_.scala:22:54 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsSet3\e[0m = vowelsSet.filter(_ != vowels.first)\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue first is not a member of scala.collection.mutable.Set[String]\
    \ - did you mean vowels.find?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpklzond5_.scala:24:54\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSet5\e[0m = vowelsSet.filter(_ != vowels.first)\n\e[31m\e[31m   |\e\
    [0m                                               ^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue first is not a member of scala.collection.mutable.Set[String] -\
    \ did you mean vowels.find?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpklzond5_.scala:26:54\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSet7\e[0m = vowelsSet.filter(_ != vowels.first)\n\e[31m\e[31m   |\e\
    [0m                                               ^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue first is not a member of scala.collection.mutable.Set[String] -\
    \ did you mean vowels.find?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpklzond5_.scala:28:54\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSet9\e[0m = vowelsSet.filter(_ != vowels.first)\n\e[31m\e[31m   |\e\
    [0m                                               ^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue first is not a member of scala.collection.mutable.Set[String] -\
    \ did you mean vowels.find?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpklzond5_.scala:30:55\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSet11\e[0m = vowelsSet.filter(_ != vowels.first)\n\e[31m\e[31m   |\e\
    [0m                                                ^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue first is not a member of "
  stdout: ''
  timestamp: 1659799092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsSet = vowels.toSet\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorNext = vowelsSetIterator.next\n        val vowelsSetIteratorPrev\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n        val\
    \ vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextPrev = vowelsSetIteratorNextNextNext.prev\n   \
    \     val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextPrev = vowelsSetIteratorNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps9a_83eu.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmps9a_83eu.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmps9a_83eu.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmps9a_83eu.scala:35:60 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e[0m\
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps9a_83eu.scala:37:64\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |"
  stdout: ''
  timestamp: 1659799161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsSet = vowels.toSet\n        val vowelsSet2 = vowels.toSet.reverse\n  \
    \      val vowelsSet3 = vowels.toSet.reverse.reverse\n        val vowelsSet4 =\
    \ vowels.toSet.reverse.reverse.reverse\n        val vowelsSet5 = vowels.toSet.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptf1beeni.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptf1beeni.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet3\e[0m = vowels.toSet.reverse.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptf1beeni.scala:23:38 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet4\e[0m = vowels.toSet.reverse.reverse.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    Exception in thread \"main\" java.lang.StackOverflowError\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1521)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.traverseChildren(untpd.scala:786)\n\
    \tat dotty.tools.dotc.printing.SyntaxHighlighting$TreeHighlighter$2$.traverse(SyntaxHighlighting.scala:123)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1529)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.traverseChildren(untpd.scala:786)\n\
    \tat dotty.tools.dotc.printing.SyntaxHighlighting$TreeHighlighter$2$.traverse(SyntaxHighlighting.scala:123)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1529)\n\
    \tat dotty.tools."
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmptf1beeni.scala

    '
  timestamp: 1659799161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorPrevPrev\
    \ = vowelsSetIteratorPrev.prev\n        val vowelsSetIteratorPrevNext = vowelsSetIteratorPrev.next\n\
    \        val vowelsSetIteratorNextPrevPrev = vowelsSetIteratorNextPrev.prev\n\
    \        val vowelsSetIteratorNextPrevNext = vowelsSetIteratorNextPrev.next\n\
    \        val vowelsSetIteratorPrevPrevPrev = vowelsSetIteratorPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevPrevNext = vowelsSetIteratorPrevPrev.next\n\
    \        val vowelsSetIteratorNextPrevPrevPrev = vowelsSetIteratorNextPrevPrev.prev\n\
    \        val vowelsSetIteratorNextPrevPrevNext = vowelsSetIteratorNextPrevPrev.next\n\
    \        val vowelsSetIteratorPrevPrevPrevPrev = vowelsSetIteratorPrevPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevNext = vowelsSetIteratorPrevPrevPrev.next\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrev = vowelsSetIteratorNextPrevPrevPrev.prev\n\
    \        val vowelsSetIteratorNextPrevPrevPrevNext = vowelsSetIteratorNextPrevPrevPrev.next\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevPrev = vowelsSetIteratorPrevPrevPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevNext = vowelsSetIteratorPrevPrevPrevPrev.next\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevPrev = vowelsSetIteratorNextPrevPrevPrevPrev.prev\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevNext = vowelsSetIteratorNextPrevPrevPrevPrev.next\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevPrevPrev = vowelsSetIteratorPrevPrevPrevPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevPrevNext = vowelsSetIteratorPrevPrevPrevPrevPrev.next\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrev = vowelsSetIteratorNextPrevPrevPrevPrev\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpce37rm0e.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpce37rm0e.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpce37rm0e.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpce37rm0e.scala:45:5 ---------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659799161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val consonants = Set(\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.count(word contains _)\n        val consonantsCount = consonants.count(word\
    \ contains _)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnl5gleoj.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpnl5gleoj.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnl5gleoj.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnl5gleoj.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnl5gleoj.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e"
  stdout: ''
  timestamp: 1659799161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n        var vowel\
    \ = \"\"\n        var index = 0\n        val wordLength = word.length\n      \
    \  val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\")\n        val consonantLength = consonants.size\n        val vowelLength\
    \ = vowels.size\n        val consonantIndex = 0\n        val vowelIndex = 0\n\
    \        val vowelSet = vowels.toSet\n        val consonantSet = consonants.toSet\n\
    \        val consonantSetLength = consonantSet.size\n        val vowelSetLength\
    \ = vowelSet.size\n        val consonantSetIndex = 0\n        val vowelSetIndex\
    \ = 0\n        val consonantSetIndex = 0\n        val vowelSetIndex = 0\n    \
    \    val consonantSetIndex = 0\n        val vowelSetIndex = 0\n        val consonantSetIndex\
    \ = 0\n        val vowelSetIndex = 0\n        val consonantSetIndex = 0\n    \
    \    val vowelSetIndex = 0\n        val consonantSetIndex = 0\n        val vowelSetIndex\
    \ = 0\n        val consonantSetIndex = 0\n        val vowelSetIndex = 0\n    \
    \    val consonantSetIndex = 0\n        val vowelSetIndex = 0\n        val consonantSetIndex\
    \ = 0\n        val vowelSetIndex = 0\n        val consonantSetIndex = 0\n    \
    \    val vowelSetIndex = 0\n        val consonantSetIndex = 0\n        val vowelSetIndex\
    \ = 0\n        val consonantSetIndex = 0\n        val vowelSetIndex = 0\n    \
    \    val consonantSetIndex = 0\n        val vowelSetIndex = 0\n        val consonantSetIndex\
    \ = 0\n        val vowelSetIndex = 0\n        val consonantSetIndex = 0\n    \
    \    val vowelSetIndex = 0\n        val consonantSetIndex = 0\n        val vowelSetIndex\
    \ = 0\n        val consonantSetIndex = 0\n        val vowelSetIndex = 0\n    \
    \    val consonantSetIndex = 0\n        val vowelSetIndex = 0\n        val consonantSetIndex\
    \ = 0\n        val vowelSetIndex = 0\n        val consonantSetIndex = 0\n    \
    \    val vowelSetIndex = 0\n        val consonantSetIndex = 0\n        val vowelSetIndex\
    \ = 0\n        val consonantSetIndex = 0\n        val vowelSetIndex = 0\n    \
    \    val con\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqe5sic6s.scala:78:4 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqe5sic6s.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelIndex is already defined as \e[33mvariable\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqe5sic6s.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mconsonantSetIndex\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mconsonantSetIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mconsonantSetIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqe5sic6s.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelSetIndex\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelSetIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelSetIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqe5sic6s.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantSetIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantSetIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantSetIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqe5sic6s.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e["
  stdout: ''
  timestamp: 1659799161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowels.toSet.reverse\n        val vowelsSet3 = vowels.toSet.reverse.reverse\n\
    \        val vowelsSet4 = vowels.toSet.reverse.reverse.reverse\n        val vowelsSet5\
    \ = vowels.toSet.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsltmxmf9.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsltmxmf9.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet3\e[0m = vowels.toSet.reverse.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsltmxmf9.scala:23:38 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet4\e[0m = vowels.toSet.reverse.reverse.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    Exception in thread \"main\" java.lang.StackOverflowError\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1521)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.traverseChildren(untpd.scala:786)\n\
    \tat dotty.tools.dotc.printing.SyntaxHighlighting$TreeHighlighter$2$.traverse(SyntaxHighlighting.scala:123)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1529)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.traverseChildren(untpd.scala:786)\n\
    \tat dotty.tools.dotc.printing.SyntaxHighlighting$TreeHighlighter$2$.traverse(SyntaxHighlighting.scala:123)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1529)\n\
    \tat dotty.tools."
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmpsltmxmf9.scala

    '
  timestamp: 1659799161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(x => consonants.contains(x)).length\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsIndex = word.lastIndexWhere(x => vowels.contains(x))\n\
    \        val consonantsIndex = word.lastIndexWhere(x => consonants.contains(x))\n\
    \        val vowelsIndex = vowelsIndex + vowelsCount\n        val consonantsIndex\
    \ = consonantsIndex + consonantsCount\n        val vowelsIndex = vowelsIndex +\
    \ 1\n        val consonantsIndex = consonantsIndex + 1\n        val vowelsIndex\
    \ = vowelsIndex + 1\n        val consonantsIndex = consonantsIndex + 1\n     \
    \   val vowelsIndex = vowelsIndex + 1\n        val consonantsIndex = consonantsIndex\
    \ + 1\n        val vowelsIndex = vowelsIndex + 1\n        val consonantsIndex\
    \ = consonantsIndex + 1\n        val vowelsIndex = vowelsIndex + 1\n        val\
    \ consonantsIndex = consonantsIndex + 1\n        val vowelsIndex = vowelsIndex\
    \ + 1\n        val consonantsIndex = consonantsIndex + 1\n        val vowelsIndex\
    \ = vowelsIndex + 1\n        val consonantsIndex = consonantsIndex + 1\n     \
    \   val vowelsIndex = vowelsIndex + 1\n        val consonantsIndex = consonantsIndex\
    \ + 1\n        val vowelsIndex = vowelsIndex + 1\n        val consonantsIndex\
    \ = consonantsIndex + 1\n        val vowelsIndex = vowelsIndex + 1\n        val\
    \ consonantsIndex = consonantsIndex + 1\n        val vowelsIndex = vowelsIndex\
    \ + 1\n        val consonantsIndex = consonantsIndex + 1\n        val vowelsIndex\
    \ = vowelsIndex + 1\n        val consonantsIndex = consonantsIndex + 1\n     \
    \   val vowelsIndex = vowelsIndex + 1\n        val consonantsIndex = consonantsIndex\
    \ + 1\n        val vowelsIndex = vowelsIndex + 1\n        val consonantsIndex\
    \ = consonantsIndex + 1\n        val vowelsIndex = vowelsIndex + 1\n        val\
    \ consonantsIndex = consonantsIndex + 1\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvp2aqz_y.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvp2aqz_y.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvp2aqz_y.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex + vowelsCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvp2aqz_y.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = consonantsIndex\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpvp2aqz_y.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1659799162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.lastIndexWhere(_.toLowerCase == \"a\" || _.toLowerCase\
    \ == \"e\" || _.toLowerCase == \"i\" || _.toLowerCase == \"o\" || _.toLowerCase\
    \ == \"u\")\n        val consonantsIndex = word.lastIndexWhere(_.toLowerCase ==\
    \ \"b\" || _.toLowerCase == \"c\" || _.toLowerCase == \"d\" || _.toLowerCase ==\
    \ \"f\" || _.toLowerCase == \"g\" || _.toLowerCase == \"h\" || _.toLowerCase ==\
    \ \"j\" || _.toLowerCase == \"k\" || _.toLowerCase == \"l\" || _.toLowerCase ==\
    \ \"m\" || _.toLowerCase == \"n\" || _.toLowerCase == \"p\" || _.toLowerCase ==\
    \ \"q\" || _.toLowerCase == \"r\" || _.toLowerCase == \"s\" || _.toLowerCase ==\
    \ \"t\" || _.toLowerCase == \"v\" || _.toLowerCase == \"w\" || _.toLowerCase ==\
    \ \"x\" || _.toLowerCase == \"y\" || _.toLowerCase == \"z\")\n        val vowelsIndex\
    \ = word.lastIndexWhere(_.toLowerCase == \"a\" || _.toLowerCase == \"e\" || _.toLowerCase\
    \ == \"i\" || _.toLowerCase == \"o\" || _.toLowerCase == \"u\")\n        val consonantsIndex\
    \ = word.lastIndexWhere(_.toLowerCase == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase\
    \ == \"d\" || _.toLowerCase == \"f\" || _.toLowerCase == \"g\" || _.toLowerCase\
    \ == \"h\" || _.toLowerCase == \"j\" || _.toLowerCase == \"k\" || _.toLowerCase\
    \ == \"l\" || _.toLowerCase == \"m\" || _.toLowerCase == \"n\" || _.toLowerCase\
    \ == \"p\" || _.toLowerCase == \"q\" || _.toLowerCase == \"r\" || _.toLowerCase\
    \ == \"s\" || _.toLowerCase == \"t\" || _.toLowerCase == \"v\" || _.toLowerCase\
    \ == \"w\" || _.toLowerCase == \"x\" || _.toLowerCase == \"y\" || _.toLowerCase\
    \ == \"z\")\n        val vowelsIndex = word.lastIndexWhere(_.toLowerCase == \"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpia84yshl.scala:27:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(_.toLowerCase\
    \ == \"\n\e[31m\e[31m   |\e[0m                                               \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \            unclosed string literal\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpia84yshl.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = word.lastIndexWhere(_.toLowerCase == \e[31m\"a\"\e\
    [0m || _.toLowerCase == \e[31m\"e\"\e[0m || _.toLowerCase == \e[31m\"i\"\e[0m\
    \ || _.toLowerCase == \e[31m\"o\"\e[0m || _.toLowerCase == \e[31m\"u\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpia84yshl.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(_.toLowerCase\
    \ == \e[31m\"b\"\e[0m || _.toLowerCase == \e[31m\"c\"\e[0m || _.toLowerCase ==\
    \ \e[31m\"d\"\e[0m || _.toLowerCase == \e[31m\"f\"\e[0m || _.toLowerCase == \e\
    [31m\"g\"\e[0m || _.toLowerCase == \e[31m\"h\"\e[0m || _.toLowerCase == \e[31m\"\
    j\"\e[0m || _.toLowerCase == \e[31m\"k\"\e[0m || _.toLowerCase == \e[31m\"l\"\e\
    [0m || _.toLowerCase == \e[31m\"m\"\e[0m || _.toLowerCase == \e[31m\"n\"\e[0m\
    \ || _.toLowerCase == \e[31m\"p\"\e[0m || _.toLowerCase == \e[31m\"q\"\e[0m ||\
    \ _.toLowerCase == \e[31m\"r\"\e[0m || _.toLowerCase == \e[31m\"s\"\e[0m || _.toLowerCase\
    \ == \e[31m\"t\"\e[0m || _.toLowerCase == \e[31m\"v\"\e[0m || _.toLowerCase ==\
    \ \e[31m\"w\"\e[0m || _.toLowerCase == \e[31m\"x\"\e[0m || _.toLowerCase == \e\
    [31m\"y\"\e[0m || _.toLowerCase == \e[31m\"z\"\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val vowelsCount\
    \ = word.filter(x => vowels.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3j_it8qe.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3j_it8qe.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3j_it8qe.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3j_it8qe.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3j_it8qe.scala"
  stdout: ''
  timestamp: 1659799163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphexu38ah.scala:56:25 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphexu38ah.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowels.toSet.reverse\n        val vowelsSet3 = vowelsSet2.reverse\n\
    \        val vowelsSet4 = vowelsSet3.reverse\n        val vowelsSet5 = vowelsSet4.reverse\n\
    \        val vowelsSet6 = vowelsSet5.reverse\n        val vowelsSet7 = vowelsSet6.reverse\n\
    \        val vowelsSet8 = vowelsSet7.reverse\n        val vowelsSet9 = vowelsSet8.reverse\n\
    \        val vowelsSet10 = vowelsSet9.reverse\n        val vowelsSet11 = vowelsSet10.reverse\n\
    \        val vowelsSet12 = vowelsSet11.reverse\n        val vowelsSet13 = vowelsSet12.reverse\n\
    \        val vowelsSet14 = vowelsSet13.reverse\n        val vowelsSet15 = vowelsSet14.reverse\n\
    \        val vowelsSet16 = vowelsSet15.reverse\n        val vowelsSet17 = vowelsSet16.reverse\n\
    \        val vowelsSet18 = vowelsSet17.reverse\n        val vowelsSet19 = vowelsSet18.reverse\n\
    \        val vowelsSet20 = vowelsSet19.reverse\n        val vowelsSet21 = vowelsSet20.reverse\n\
    \        val vowelsSet22 = vowelsSet21.reverse\n        val vowelsSet23 = vowelsSet22.reverse\n\
    \        val vowelsSet24 = vowelsSet23.reverse\n        val vowelsSet25 = vowelsSet24.reverse\n\
    \        val vowelsSet26 = vowelsSet25.reverse\n        val vowelsSet27 = vowelsSet26.reverse\n\
    \        val vowelsSet28 = vowelsSet27.reverse\n        val vowelsSet29 = vowelsSet28.reverse\n\
    \        val vowelsSet30 = vowelsSet29.reverse\n        val vowelsSet31 = vowelsSet30.reverse\n\
    \        val vowelsSet32 = vowelsSet31.reverse\n        val vowelsSet33 = vowelsSet32.reverse\n\
    \        val vowelsSet34 = vowelsSet33.reverse\n        val vowelsSet35 = vowelsSet34.reverse\n\
    \        val vowelsSet36 = vowelsSet35.reverse\n        val vowelsSet37 = vowelsSet36.reverse\n\
    \        val vowelsSet38 = vowelsSet37.reverse\n        val vowelsSet39 = vowelsSet38.reverse\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmphvnmo59x.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphvnmo59x.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphvnmo59x.scala:60:5 ---------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799130
