language: scala
name: HumanEval_152_compare
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.map(x\
    \ => Math.abs(x - game))\n        val scores = game.map(x => Math.abs(x - guess))\n\
    \        val differences = guesses.zip(scores)\n        differences.map(x => if\
    \ (x._1 == 0) 0 else x._1 - x._2)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpxak5o3p8.scala:17:48 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = guess.map(\e\
    [36mx\e[0m => Math.abs(x - game))\n\e[31m\e[31m   |\e[0m                     \
    \                         ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((game : List[Long]))\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmpxak5o3p8.scala:18:46 -----------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        \e[33mval\e[0m \e[36mscores\e[0m = game.map(\e[36mx\e[0m\
    \ => Math.abs(x - guess))\n\e[31m\e[31m   |\e[0m                             \
    \               ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((guess : List[Long]))\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpxak5o3p8.scala:20:56 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        differences.map(\e[36mx\e[0m => \e[33mif\e[0m (x._1 ==\
    \ \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x._1 - x._2)\n\e[31m\e[31m   |\e\
    [0m                                                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue - is not a member of Nothing, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1659797650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScoreSum = gameScores.sum\n        val gameScoreDiff = gameScores.sum\n\
    \        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score - game(index) }\n  \
    \      val guessScoreSum = guessScores.sum\n        val guessScoreDiff = guessScores.sum\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val gameScoreDiffAbs\
    \ = Math.abs(gameScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n\
    \        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScoreDiff)\n        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphl65_7nm.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbs\e[0m =\
    \ Math.abs(gameScoreDiff)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbs is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreDiffAbs\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphl65_7nm.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffAbs\e[0m =\
    \ Math.abs(guessScoreDiff)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffAbs is already defined as \e[33mvalue\e[0m \e\
    [35mguessScoreDiffAbs\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphl65_7nm.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbs\e[0m =\
    \ Math.abs(gameScoreDiff)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbs is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreDiffAbs\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphl65_7nm.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffAbs\e[0m =\
    \ Math.abs(guessScoreDiff)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffAbs is already defined as \e[33mvalue\e[0m \e\
    [35mguessScoreDiffAbs\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphl65_7nm.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mguessS"
  stdout: ''
  timestamp: 1659797647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{case (score, index) => score}\n        val guessesScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}\n        val gameScoreCount\
    \ = gameScores.count\n        val guessesScoreCount = guessesScores.count\n  \
    \      val gameScoreSum = gameScores.sum\n        val guessesScoreSum = guessesScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - guessesScoreSum\n        val guessesScoreDiff\
    \ = guessesScoreSum - gameScoreSum\n        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n\
    \        val guessesScoreDiffAbs = Math.abs(guessesScoreDiff)\n        val gameScoreDiffAbsList\
    \ = gameScoreDiffAbs.toList.sortBy(_ < 0).reverse\n        val guessesScoreDiffAbsList\
    \ = guessesScoreDiffAbs.toList.sortBy(_ < 0).reverse\n        val gameScoreDiffAbsListLength\
    \ = gameScoreDiffAbsList.length\n        val guessesScoreDiffAbsListLength = guessesScoreDiffAbsList.length\n\
    \        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n       \
    \ val guessesScoreDiffAbsListLength = guessesScoreDiffAbsListLength\n        val\
    \ gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n        val guessesScoreDiffAbsListLength\
    \ = guessesScoreDiffAbsListLength\n        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n\
    \        val guessesScoreDiffAbsListLength = guessesScoreDiffAbsListLength\n \
    \       val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n        val\
    \ guessesScoreDiffAbsListLength = guessesScoreDiffAbsListLength\n        val gameScoreDiffAbsListLength\
    \ = gameScoreDiffAbsListLength\n        val guessesScoreDiffAbsListLength = guessesScoreDiffAbsListLength\n\
    \        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n       \
    \ val guessesScoreDiffAbsListLength = guessesScoreDiffAbsListLength\n        val\
    \ gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n        val guessesScoreDiffAbsListLength\
    \ = guessesScoreDiffAbsListLength\n        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n\
    \        val guessesScoreDiffAbsListLength = guessesScoreDiffAbsListLength\n \
    \       val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n        val\
    \ guessesScoreDiffAbsListLength = guessesScoreDiffAbsListLength\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi_oaahdo.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsListLength\e\
    [0m = gameScoreDiffAbsListLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi_oaahdo.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreDiffAbsListLength\e\
    [0m = guessesScoreDiffAbsListLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreDiffAbsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mguessesScoreDiffAbsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi_oaahdo.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsListLength\e\
    [0m = gameScoreDiffAbsListLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi_oaahdo.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreDiffAbsListLength\e\
    [0m = guessesScoreDiffAbsListLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreDiffAbsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mguessesScoreDiffAbsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded method"
  stdout: ''
  timestamp: 1659797649
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val guessesDiff\
    \ = guessesScores.zip(gameScores).map { case (guess, game) => if (guess == game)\
    \ 0 else Math.abs(guess - game) }\n        guessesDiff.zipWithIndex.map { case\
    \ (diff, index) => diff + guessesDiff(index) }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj2nkix4a.scala:23)\n\tat Problem.main(tmpj2nkix4a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScoreSum = gameScores.sum\n        val gameScoreDiff = gameScores.sum\n\
    \        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score - guess(index) }\n \
    \       val guessesScoreSum = guessesScores.sum\n        val guessesScoreDiff\
    \ = guessesScores.sum\n        val guessesScoreDiffAbs = Math.abs(guessesScoreDiff)\n\
    \        val guessesScoreDiffAbsMinusGameScoreDiffAbs = guessesScoreDiffAbs -\
    \ gameScoreDiffAbs\n        val guessesScoreDiffAbsMinusGuessesScoreDiffAbs =\
    \ guessesScoreDiffAbs - guessesScoreDiffAbs\n        val guessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGameScoreDiffAbs\
    \ = guessesScoreDiffAbsMinusGameScoreDiffAbs - guessesScoreDiffAbsMinusGuessesScoreDiffAbs\n\
    \        val guessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGameScoreDiffAbsMinusGuessesScoreDiffAbs\
    \ = guessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGameScoreDiffAbs - guessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbs\n\
    \        val guessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGameScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbs\
    \ = guessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGameScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbs\n\
    \        val guessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGameScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGameScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAb\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpca6s36x3.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpca6s36x3.scala:28:170\
    \ -----------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGameScoreDiffAbsMinusGuessesScoreDiffAbs\e\
    [0m = guessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGameScoreDiffAbs - guessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbs\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: guessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbs\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpca6s36x3.scala:29:127\
    \ --------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGameScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbs\e\
    [0m = guessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGameScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbs\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  guessesScoreDiffAbsMinusGuessesScoreDiffAbsMinusGameScoreDiffAbsMinusGuessesScoreDiffAbsMinusGuessesScoreDiffAbs\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpca6s36x3.scala:31:5 ---------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659797647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val guessesWithScores = guessesScores.map { case (score, index) =>\
    \ score -> gameScores(index) }\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSorted\
    \ = guessesWithIndexes.sortBy(_._1)\n        val guessesWithIndexesSortedReversed\
    \ = guessesWithIndexesSorted.reverse\n        val guessesWithIndexesSortedReversedSorted\
    \ = guessesWithIndexesSortedReversed.sortBy(_._1)\n        val guessesWithIndexesSortedReversedSortedSortedReversed\
    \ = guessesWithIndexesSortedReversedSorted\n            .sortBy(_._1)\n      \
    \      .reverse\n        val guessesWithIndexesSortedReversedSortedSortedReversedSorted\
    \ = guessesWithIndexesSortedReversedSortedSortedReversed.sortBy(_._1)\n      \
    \  val guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversed\
    \ = guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversed.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversedSorted\
    \ = guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversedSorted.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted\
    \ = guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted\
    \ = guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted\
    \ = guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedReverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy340b_i6.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpy340b_i6.scala:28:87\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversed\e\
    [0m = guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversed.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mguessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpy340b_i6.scala:29:93\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversedSorted\e\
    [0m = guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversedSorted.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                     ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversedSorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpy340b_i6.scala:30:113 --------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted\e\
    [0m = guessesWithIndexesSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e"
  stdout: ''
  timestamp: 1659797646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guess.zip(gameScores).map\
    \ { case (guess, score) => (guess, score) }.toMap\n        val guessesWithIndexes\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> index }.toMap\n \
    \       val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => (guess, index) -> score }.toMap\n        val guessesWithIndexesWithScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score ->\
    \ score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScores = guess.zipWithIndex.map\
    \ { case (guess, index) => (guess, index) -> score -> score -> score }.toMap\n\
    \        val guessesWithIndexesWithScoreAndScoreAndScoreAndScores = guess.zipWithIndex.map\
    \ { case (guess, index) => (guess, index) -> score -> score -> score -> score\
    \ }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score ->\
    \ score -> score -> score -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score ->\
    \ score -> score -> score -> score -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score ->\
    \ score -> score -> score -> score -> score -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score ->\
    \ score -> score -> score -> score -> score -> score -> score }.toMap\n      \
    \  val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScore\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprcrcqc9d.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprcrcqc9d.scala:21:109\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesWithScores\e[0m = guess.zipWithIndex.map { \e[33mcase\e\
    [0m (guess, index) => (guess, index) -> score }.toMap\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \                                ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                                       Not found: score\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprcrcqc9d.scala:22:117 -----------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScoreAndScores\e\
    [0m = guess.zipWithIndex.map { \e[33mcase\e[0m (guess, index) => (guess, index)\
    \ -> score -> score }.toMap\n\e[31m\e[31m   |\e[0m                           \
    \                                                                            \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \                     Not found: score\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmprcrcqc9d.scala:22:126 -----------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScoreAndScores\e\
    [0m = guess.zipWithIndex.map { \e[33mcase\e[0m (guess, index) => (guess, index)\
    \ -> score -> score }.toMap\n\e[31m\e[31m   |\e[0m                           \
    \                                                                            \
    \                       ^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                              Not found: score\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprcrcqc9d.scala:23:125 ------------"
  stdout: ''
  timestamp: 1659797650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toList\n\
    \        val scores = game.toList\n        val guessesCount = guesses.size\n \
    \       val scoresCount = scores.size\n        val guessesPerScore = guessesCount\
    \ / scoresCount\n        val guessesPerScoreAbs = guessesPerScore - math.abs(guessesPerScore)\n\
    \        val guessesPerScoreAbsCount = guessesPerScoreAbs.toInt\n        val guessesPerScoreAbsSum\
    \ = guessesPerScoreAbs.sum\n        val guessesPerScoreAbsSumAbs = guessesPerScoreAbsSum\
    \ / guessesPerScoreAbsCount\n        val guessesPerScoreAbsSumAbsCount = guessesPerScoreAbsSumAbs.toInt\n\
    \        val guessesPerScoreAbsSumAbsSum = guessesPerScoreAbsSumAbs.sum\n    \
    \    val guessesPerScoreAbsSumAbsSumAbs = guessesPerScoreAbsSumAbsSum / guessesPerScoreAbsCount\n\
    \        val guessesPerScoreAbsSumAbsSumAbsCount = guessesPerScoreAbsSumAbsSumAbs.toInt\n\
    \        val guessesPerScoreAbsSumAbsSumAbsSum = guessesPerScoreAbsSumAbsSumAbs.sum\n\
    \        val guessesPerScoreAbsSumAbsSumAbsSumAbs = guessesPerScoreAbsSumAbsSumAbsSum\
    \ / guessesPerScoreAbsCount\n        val guessesPerScoreAbsSumAbsSumAbsSumAbsCount\
    \ = guessesPerScoreAbsSumAbsSumAbsSumAbs.toInt\n        val guessesPerScoreAbsSumAbsSumAbsSumAbsSum\
    \ = guessesPerScoreAbsSumAbsSumAbsSumAbs.sum\n        val guessesPerScoreAbsSumAbsSumAbsSumAbsSumAbs\
    \ = guessesPerScoreAbsSumAbsSumAbsSumAbsSum / guessesPerScoreAbsCount\n      \
    \  val guessesPerScoreAbsSumAbsSumAbsSumAbsSumAbsCount = guessesPerScoreAbsSumAbsSumAbsSumAbsSumAbs.toInt\n\
    \        val guessesPerScoreAbsSumAbsSumAbsSumAbsSumAbsSum = guessesPerScoreAbsSumAbsSumAbsSumAbsSumAbs.sum\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwvnyknvx.scala:24:55 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mguessesPerScoreAbsSum\e\
    [0m = guessesPerScoreAbs.sum\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \              value sum is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwvnyknvx.scala:38:5 ---------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797648
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScores\
    \ = gameScoreList.map { case (score, index) => score -> index }\n        val guessesScores\
    \ = guessesScoreList.map { case (score, index) => score -> index }\n        val\
    \ gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScoreMap.values.toList\n        val guessesScoreList\
    \ = guessesScoreMap.values.toList\n        val gameScores = gameScoreList.map\
    \ { case (score, index) => score -> index }\n        val guessesScores = guessesScoreList.map\
    \ { case (score, index) => score -> index }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScoreMap.values.toList\n        val guessesScoreList = guessesScoreMap.values.toList\n\
    \        val gameScores = gameScoreList.map { case (score, index) => score ->\
    \ index }\n        val guessesScores = guessesScoreList.map { case (score, index)\
    \ => score -> index }\n        val gameScoreMap = gameScores.toMap\n        val\
    \ guessesScoreMap = guessesScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScores\
    \ = gameScoreList.map { case (score, index) => score -> index }\n        val guessesScores\
    \ = guessesScoreList.map { case (score, index) => score -> index }\n        val\
    \ gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScoreMap.values.toList\n        val guessesScoreList\
    \ = guessesScoreMap.values.toList\n        val gameScores = gameScoreList.map\
    \ { case (score, index) => score -> index }\n        val guessesScores = guessesScoreList.map\
    \ { case (score, index) => score \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw_ihxqo0.scala:58:0 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw_ihxqo0.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScores\e[0m = gameScoreList.map { \e[33mcase\e[0m (score, index) =>\
    \ score -> index }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw_ihxqo0.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessesScores\e[0m = guessesScoreList.map\
    \ { \e[33mcase\e[0m (score, index) => score -> index }\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScores is already defined as \e[33mvalue\e[0m \e[35mguessesScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw_ihxqo0.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw_ihxqo0.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreMap\e[0m = guessesScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessesScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessesScoreMap\e\
    [0m\n\e[31m "
  stdout: ''
  timestamp: 1659797649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameSet = game.distinct\n\
    \        val guessSet = guess.distinct\n        val gameSize = gameSet.size\n\
    \        val guessSize = guessSet.size\n        val gameSetSize = gameSet.size\
    \ + guessSet.size\n        val gameSetSize = gameSetSize * gameSize\n        val\
    \ guessSetSize = guessSet.size + gameSet.size\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n        val guessSetSize = guessSetSize\
    \ * guessSize\n        val gameSetSize = gameSetSize + guessSetSize\n        val\
    \ gameSetSize = gameSetSize * gameSize\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7fhmo559.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mgameSetSize\e[0m = gameSetSize\
    \ * gameSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7fhmo559.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSetSize * guessSize\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mguessSetSize is already defined as \e[33mvalue\e[0m \e[35mguessSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7fhmo559.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameSetSize\e[0m = gameSetSize + guessSetSize\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7fhmo559.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mgameSetSize\e[0m = gameSetSize * gameSize\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7fhmo559.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSetSize * guessSize\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{case (score, index) => score}\n        val guessScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - guessScoreSum\n        val guessScoreDiff\
    \ = guessScoreSum - gameScoreSum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffDiff = gameScoreDiffSum - guessScoreDiffSum\n        val\
    \ guessScoreDiffDiff = guessScoreDiffSum - gameScoreDiffSum\n        val gameScoreDiffDiffCount\
    \ = gameScoreDiffDiff.count\n        val guessScoreDiffDiffCount = guessScoreDiffDiff.count\n\
    \        val gameScoreDiffDiffSum = gameScoreDiffDiff.sum\n        val guessScoreDiffDiffSum\
    \ = guessScoreDiffDiff.sum\n        val gameScoreDiffDiffDiff = gameScoreDiffDiffSum\
    \ - guessScoreDiffDiffSum\n        val guessScoreDiffDiffDiff = guessScoreDiffDiffSum\
    \ - gameScoreDiffDiffSum\n        val gameScoreDiffDiffDiffCount = gameScoreDiffDiffCount\
    \ + guessScoreDiffDiffCount\n        val guessScoreDiffDiffDiffCount = guessScoreDiffDiffCount\
    \ + gameScoreDiffDiffCount\n        val gameScoreDiffDiffDiffSum = gameScoreDiffDiff.sum\n\
    \        val guessScoreDiffDiffDiffSum = guessScoreDiffDiff.sum\n        val gameScoreDiffDiffDiffSum\
    \ = gameScoreDiffDiff.sum - guessScoreDiffDiff.sum\n        val guessScoreDiffDiffDiffSum\
    \ = guessScoreDiffDiff.sum - gameScoreDiffDiff.sum\n        val gameScoreDiffDiffDiffCount\
    \ = gameScoreDiffDiffCount + guessScoreDiffDiffCount\n        val guessScoreDiffDiffDiffCount\
    \ = guessScoreDiffDiffCount + gameScoreDiffDiffCount\n        val gameScoreDiffDiffDiffSum\
    \ = gameScoreDiffDiff.sum\n        val guessScoreDiffDiffDiffSum = guessScoreDiffDiff.sum\n\
    \        val gameScoreDiffDiffDiffSum = gameScoreDiffDiff.sum - guessScoreDiffDiff.sum\n\
    \        val guessScoreDiffDiff\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3up341ub.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3up341ub.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffDiffDiffSum\e[0m = gameScoreDiffDiff.sum - guessScoreDiffDiff.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffDiffDiffSum is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffDiffDiffSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3up341ub.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffDiffDiffSum\e\
    [0m = guessScoreDiffDiff.sum - gameScoreDiffDiff.sum\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffDiffDiffSum is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreDiffDiffDiffSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3up341ub.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffDiffDiffCount\e\
    [0m = gameScoreDiffDiffCount + guessScoreDiffDiffCount\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffDiffDiffCount is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffDiffDiffCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3up341ub.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffDiffDiffCount\e\
    [0m = guessScoreDiffDi"
  stdout: ''
  timestamp: 1659797650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreSet = gameScores.toSet\n        val guessScoreSet =\
    \ guessScores.toSet\n        val gameScoreList = gameScores.toList\n        val\
    \ guessScoreList = guessScores.toList\n        val gameScoreSetSize = gameScoreSet.size\n\
    \        val guessScoreSetSize = guessScoreSet.size\n        val gameScoreSetIterator\
    \ = gameScoreSet.iterator\n        val guessScoreSetIterator = guessScoreSet.iterator\n\
    \        val gameScoreSetIteratorSize = gameScoreSetIterator.size\n        val\
    \ guessScoreSetIteratorSize = guessScoreSetIterator.size\n        val gameScoreSetIteratorIterator\
    \ = gameScoreSetIterator.iterator\n        val guessScoreSetIteratorIterator =\
    \ guessScoreSetIterator.iterator\n        val gameScoreSetIteratorIteratorSize\
    \ = gameScoreSetIteratorIterator.size\n        val guessScoreSetIteratorIteratorSize\
    \ = guessScoreSetIteratorIterator.size\n        val gameScoreSetIteratorIteratorIterator\
    \ = gameScoreSetIteratorIterator.iterator\n        val guessScoreSetIteratorIteratorIterator\
    \ = guessScoreSetIteratorIterator.iterator\n        val gameScoreSetIteratorIteratorIteratorSize\
    \ = gameScoreSetIteratorIteratorIterator.size\n        val guessScoreSetIteratorIteratorIteratorSize\
    \ = guessScoreSetIteratorIteratorIterator.size\n        val gameScoreSetIteratorIteratorIteratorIterator\
    \ = gameScoreSetIteratorIteratorIterator.iterator\n        val guessScoreSetIteratorIteratorIteratorIterator\
    \ = guessScoreSetIteratorIteratorIterator.iterator\n        val gameScoreSetIteratorIteratorIteratorIteratorSize\
    \ = gameScoreSetIteratorIteratorIteratorIterator.size\n        val guessScoreSetIteratorIteratorIteratorIteratorSize\
    \ = guessScoreSetIteratorIteratorIteratorIterator.size\n        val gameScoreSetIteratorIteratorIteratorIteratorIterator\
    \ = gameScoreSetIteratorIteratorIteratorIterator.iterator\n        val guessScoreSetIteratorIteratorIteratorIteratorIterator\
    \ = guessScoreSetIteratorIteratorIteratorIterator.iterator\n        val gameScoreSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = gameScoreSetIteratorIteratorIteratorIteratorIterator.size\n        val guessScoreSetIteratorIteratorIteratorIteratorIteratorSize\
    \ = guessScoreSetIteratorIteratorIteratorIteratorIterator.size\n        val gameScoreSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = gameScoreSetIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ guessScoreSetIteratorIteratorIteratorIteratorIteratorIterator = guessScoreSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val gameScoreSet\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_lcmkims.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_lcmkims.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (index, score) }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => (index, score)\
    \ }\n        val gameScore = gameScores.toMap\n        val guessesScore = guessesScores.toMap\n\
    \        val gameScores = gameScores.toSeq.sortBy(_._1).reverse\n        val guessesScores\
    \ = guessesScores.toSeq.sortBy(_._1).reverse\n        val gameScore = gameScores.head._2\n\
    \        val guessesScore = guessesScores.head._2\n        val gameScores = gameScores.tail\n\
    \        val guessesScores = guessesScores.tail\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => (index, score) }\n        val guessesScores = guessesScores.zipWithIndex.map\
    \ { case (score, index) => (index, score) }\n        val gameScore = gameScores.toMap\n\
    \        val guessesScore = guessesScores.toMap\n        val gameScores = gameScores.toSeq.sortBy(_._1).reverse\n\
    \        val guessesScores = guessesScores.toSeq.sortBy(_._1).reverse\n      \
    \  val gameScore = gameScores.head._2\n        val guessesScore = guessesScores.head._2\n\
    \        val gameScores = gameScores.tail\n        val guessesScores = guessesScores.tail\n\
    \        val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ (index, score) }\n        val guessesScores = guessesScores.zipWithIndex.map\
    \ { case (score, index) => (index, score) }\n        val gameScore = gameScores.toMap\n\
    \        val guessesScore = guessesScores.toMap\n        val gameScores = gameScores.toSeq.sortBy(_._1).reverse\n\
    \        val guessesScores = guessesScores.toSeq.sortBy(_._1).reverse\n      \
    \  val gameScore = gameScores.head._2\n        val guessesScore = guessesScores.head._2\n\
    \        val gameScores = gameScores.tail\n        val guessesScores = guessesScores.tail\n\
    \        val gameScores = gameScores.zipWithIndex.map { case (score, index) =>\
    \ (index, score) }\n        val guessesScore\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprcjtmw5j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprcjtmw5j.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScores\e[0m = gameScores.toSeq.sortBy(_._1).reverse\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcjtmw5j.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesScores\e[0m = guessesScores.toSeq.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScores is already defined as \e[33mvalue\e[0m \e[35mguessesScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprcjtmw5j.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScore\e[0m = gameScores.head._2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mgameScore is already defined as \e[33mvalue\e[0m \e[35mgameScore\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprcjtmw5j.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessesScore\e[0m = guessesScores.head._2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessesScore is already defined as \e[33mvalue\e[0m \e[35mguessesScore\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitio"
  stdout: ''
  timestamp: 1659797648
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.filter(_._1 == _).map(_._2)\n        val guessScores = guess.zipWithIndex.filter(_._1\
    \ == _).map(_._2)\n        val gameScore = gameScores.sum\n        val guessScore\
    \ = guessScores.sum\n        val gameScoreDiff = gameScore - guessScore\n    \
    \    val gameScoreDiffAbs = math.abs(gameScoreDiff)\n        val gameScoreDiffAbsList\
    \ = gameScoreDiffAbs.toList.sortBy(_ < 0).reverse\n        val gameScoreDiffAbsListLength\
    \ = gameScoreDiffAbsList.length\n        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toLong\n\
    \        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toInt\n \
    \       val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toLong\n \
    \       val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toInt\n  \
    \      val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toLong\n  \
    \      val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toInt\n   \
    \     val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toLong\n   \
    \     val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toInt\n    \
    \    val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toLong\n    \
    \    val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toInt\n     \
    \   val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toLong\n     \
    \   val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toInt\n      \
    \  val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toLong\n      \
    \  val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toInt\n       \
    \ val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toLong\n       \
    \ val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toInt\n        val\
    \ gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toLong\n        val\
    \ gameScoreDiffAbsListLength = gameScoreDiffAbsListLength.toInt\n        val gameScoreDiffAbsListLength\
    \ = gameScoreDiffAbsListLength.toLong\n        val gameScoreDiffAbsListLength\
    \ = gameScoreDiffAbsListLength.toInt\n        val gameScoreDiffAbsListLength =\
    \ gameScoreDiffAbsListLength.toLong\n        val gameScoreDiffAbsListLength =\
    \ gameScoreDiffAbsListLength.toInt\n        val gameScoreDiffAbsListLength = gameScoreDiffAb\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv1y0uhxd.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsListLength\e\
    [0m = gameScoreDiffAbsListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv1y0uhxd.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsListLength\e\
    [0m = gameScoreDiffAbsListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv1y0uhxd.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsListLength\e\
    [0m = gameScoreDiffAbsListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv1y0uhxd.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsListLength\e\
    [0m = gameScoreDiffAbsListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that o"
  stdout: ''
  timestamp: 1659797650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => x._1 + x._2)\n        val guessScores = guess.zipWithIndex.map(x\
    \ => x._1 + x._2)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n     \
    \   val guessScoreList = guessScoreMap.toList\n        val gameScoreSet = gameScoreList.toSet\n\
    \        val guessScoreSet = guessScoreList.toSet\n        val gameScoreMap =\
    \ gameScoreSet.map(x => (x, gameScoreMap.get(x)))\n        val guessScoreMap =\
    \ guessScoreSet.map(x => (x, guessScoreMap.get(x)))\n        val gameScoreList\
    \ = gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n \
    \       val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n\
    \        val gameScoreMap = gameScoreSet.map(x => (x, gameScoreMap.get(x)))\n\
    \        val guessScoreMap = guessScoreSet.map(x => (x, guessScoreMap.get(x)))\n\
    \        val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreMap = gameScoreSet.map(x\
    \ => (x, gameScoreMap.get(x)))\n        val guessScoreMap = guessScoreSet.map(x\
    \ => (x, guessScoreMap.get(x)))\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n    \
    \    val gameScoreMap = gameScoreSet.map(x => (x, gameScoreMap.get(x)))\n    \
    \    val guessScoreMap = guessScoreSet.map(x => (x, guessScoreMap.get(x)))\n \
    \       val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreMap = gameScoreSet.map(x\
    \ => (x, gameScoreMap.get(x)))\n        val guessScoreMap = guessScoreSet.map(x\
    \ => (x, guessScoreMap.get(x)))\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt1twmo5h.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt1twmo5h.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreMap\e[0m = gameScoreSet.map(\e[36mx\e[0m => (x, gameScoreMap.get(x)))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt1twmo5h.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScoreSet.map(\e\
    [36mx\e[0m => (x, guessScoreMap.get(x)))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt1twmo5h.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreMap.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt1twmo5h.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScoreMap.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659797649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val guessesRemaining = guessesCount - 1\n        val scoresRemaining\
    \ = scoresCount - 1\n        val guessesRemaining2 = guessesCount - 2\n      \
    \  val scoresRemaining2 = scoresCount - 2\n        val guessesRemaining3 = guessesCount\
    \ - 3\n        val scoresRemaining3 = scoresCount - 3\n        val guessesRemaining4\
    \ = guessesCount - 4\n        val scoresRemaining4 = scoresCount - 4\n       \
    \ val guessesRemaining5 = guessesCount - 5\n        val scoresRemaining5 = scoresCount\
    \ - 5\n        val guessesRemaining6 = guessesCount - 6\n        val scoresRemaining6\
    \ = scoresCount - 6\n        val guessesRemaining7 = guessesCount - 7\n      \
    \  val scoresRemaining7 = scoresCount - 7\n        val guessesRemaining8 = guessesCount\
    \ - 8\n        val scoresRemaining8 = scoresCount - 8\n        val guessesRemaining9\
    \ = guessesCount - 9\n        val scoresRemaining9 = scoresCount - 9\n       \
    \ val guessesRemaining10 = guessesCount - 10\n        val scoresRemaining10 =\
    \ scoresCount - 10\n        val guessesRemaining11 = guessesCount - 11\n     \
    \   val scoresRemaining11 = scoresCount - 11\n        val guessesRemaining12 =\
    \ guessesCount - 12\n        val scoresRemaining12 = scoresCount - 12\n      \
    \  val guessesRemaining13 = guessesCount - 13\n        val scoresRemaining13 =\
    \ scoresCount - 13\n        val guessesRemaining14 = guessesCount - 14\n     \
    \   val scoresRemaining14 = scoresCount - 14\n        val guessesRemaining15 =\
    \ guessesCount - 15\n        val scoresRemaining15 = scoresCount - 15\n      \
    \  val guessesRemaining16 = guessesCount - 16\n        val scoresRemaining16 =\
    \ scoresCount - 16\n        val guessesRemaining17 = guessesCount - 17\n     \
    \   val scoresRemaining17 = scoresCount - 17\n        val guessesRemaining18 =\
    \ guessesCount - 18\n        val scoresRemaining18 = scoresCount - 18\n      \
    \  val guessesRemaining19 = guessesCount - 19\n        val scoresRemaining19 =\
    \ scoresCount - 19\n        val guessesRemain\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnqwmih4u.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnqwmih4u.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mguesses\e[0m = gues\n\e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: gues\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpnqwmih4u.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnqwmih4u.scala:61:5\
    \ ---------------------\e[0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n        val\
    \ guessScoreKeys = guessScoreMap.keys\n        val gameScoreValues = gameScoreMap.values\n\
    \        val guessScoreValues = guessScoreMap.values\n        val gameScoreKeySet\
    \ = gameScoreKeys.toSet\n        val guessScoreKeySet = guessScoreKeys.toSet\n\
    \        val gameScoreValueSet = gameScoreValues.toSet\n        val guessScoreValueSet\
    \ = guessScoreValues.toSet\n        val gameScoreKeySetSet = gameScoreKeySet.toSet\n\
    \        val guessScoreKeySetSet = guessScoreKeySet.toSet\n        val gameScoreValueSetSet\
    \ = gameScoreValueSet.toSet\n        val guessScoreValueSetSet = guessScoreValueSet.toSet\n\
    \        val gameScoreKeySetSetSet = gameScoreKeySetSet.toSet\n        val guessScoreKeySetSetSet\
    \ = guessScoreKeySetSet.toSet\n        val gameScoreValueSetSetSet = gameScoreValueSetSet.toSet\n\
    \        val guessScoreValueSetSetSet = guessScoreValueSetSet.toSet\n        val\
    \ gameScoreKeySetSetSetSet = gameScoreKeySetSetSet.toSet\n        val guessScoreKeySetSetSetSet\
    \ = guessScoreKeySetSetSet.toSet\n        val gameScoreValueSetSetSetSet = gameScoreValueSetSetSet.toSet\n\
    \        val guessScoreValueSetSetSetSet = guessScoreValueSetSetSet.toSet\n  \
    \      val gameScoreKeySetSetSetSetSet = gameScoreKeySetSetSetSet.toSet\n    \
    \    val guessScoreKeySetSetSetSetSet = guessScoreKeySetSetSetSet.toSet\n    \
    \    val gameScoreValueSetSetSetSetSet = gameScoreValueSetSetSetSet.toSet\n  \
    \      val guessScoreValueSetSetSetSetSet = guessScoreValueSetSetSetSet.toSet\n\
    \        val gameScoreKeySetSetSetSetSetSet = gameScoreKeySetSetSetSetSet.toSet\n\
    \        val guessScoreKeySetSetSetSetSetSet = guessScoreKeySetSetSetSetSet.toSet\n\
    \        val gameScoreValueSetSetSetSetSetSet = game\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvo89nwvf.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n\
    \        val gameScoreSet = gameScoreList.map(_.toSet)\n        val guessScoreSet\
    \ = guessScoreList.map(_.toSet)\n        val gameScoreSetSize = gameScoreSet.map(_.size).sum\n\
    \        val guessScoreSetSize = guessScoreSet.map(_.size).sum\n        val gameScoreSetSizeDiff\
    \ = gameScoreSetSize - guessScoreSetSize\n        val gameScoreSetSizeDiffAbs\
    \ = gameScoreSetSizeDiff.abs\n        val gameScoreSetSizeDiffAbsSum = gameScoreSetSizeDiffAbs.sum\n\
    \        val gameScoreSetSizeDiffAbsSumDiff = gameScoreSetSizeDiffAbsSum - gameScoreSetSizeDiffAbsSum\n\
    \        val gameScoreSetSizeDiffAbsSumDiffDiff = gameScoreSetSizeDiffAbsSumDiff\
    \ - gameScoreSetSizeDiffAbsSumDiff\n        val gameScoreSetSizeDiffAbsSumDiffDiffDiff\
    \ = gameScoreSetSizeDiffAbsSumDiffDiff - gameScoreSetSizeDiffAbsSumDiffDiff\n\
    \        val gameScoreSetSizeDiffAbsSumDiffDiffDiffDiff = gameScoreSetSizeDiffAbsSumDiffDiffDiff\
    \ - gameScoreSetSizeDiffAbsSumDiffDiffDiff\n        val gameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiff\
    \ = gameScoreSetSizeDiffAbsSumDiffDiffDiffDiff - gameScoreSetSizeDiffAbsSumDiffDiffDiffDiff\n\
    \        val gameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiffDiff = gameScoreSetSizeDiffAbsSumDiffDiffDiffDiff\
    \ - gameScoreSetSizeDiffAbsSumDiffDiffDiffDiff\n        val gameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiffDiff\
    \ = gameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiff - gameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiff\n\
    \        val gameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiffDiff = gameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiff\
    \ - gameScoreSetSizeDiffAb\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4q35vlda.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiffDiff\e\
    [0m = gameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiff - gameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiff\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiffDiff is already\
    \ defined as \e[33mvalue\e[0m \e[35mgameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiffDiff\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4q35vlda.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiffDiff\e\
    [0m = gameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiff - gameScoreSetSizeDiffAb\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiffDiff is already\
    \ defined as \e[33mvalue\e[0m \e[35mgameScoreSetSizeDiffAbsSumDiffDiffDiffDiffDiffDiff\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmp4q35vlda.scala:19:43\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\e[31m\e[31m   |\e\
    [0m                                           ^\e[0m\n\e[31m   |\e[0m        \
    \                               Cannot prove that Long <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                       where:    K is a type\
    \ variable\n\e[31m   |\e[0m                                                 V\
    \ is a type variable\n\e[31m   |\e[0m                                       .\n\
    \e[31m\e[31m-- Error: /tmp/tmp4"
  stdout: ''
  timestamp: 1659797649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val guessesDiff = guesses.zip(scores).map\
    \ { case (guess, score) =>\n            val diff = Math.abs(guess - score)\n \
    \           if (diff > 0) diff else 0\n        }\n        val scoresDiff = scores.zip(guesses).map\
    \ { case (score, guess) =>\n            val diff = Math.abs(guess - score)\n \
    \           if (diff > 0) diff else 0\n        }\n        guessesDiff.zip(scoresDiff).map\
    \ { case (diff, diff2) =>\n            if (diff > diff2) diff else diff2\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmparss64mc.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmparss64mc.scala:26:38 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m            \e[33mval\e[0m \e[36mdiff\e[0m = Math.abs(guess - score)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ - is not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversions.properties AsScalaMap\n\e[31m\
    \   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659797650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScores\
    \ = gameScoreList.map { case score => score.toLong }\n        val guessesScores\
    \ = guessesScoreList.map { case score => score.toLong }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScoreList = gameScoreMap.values.toList\n        val guessesScoreList\
    \ = guessesScoreMap.values.toList\n        val gameScores = gameScoreList.map\
    \ { case score => score.toLong }\n        val guessesScores = guessesScoreList.map\
    \ { case score => score.toLong }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScoreMap.values.toList\n        val guessesScoreList = guessesScoreMap.values.toList\n\
    \        val gameScores = gameScoreList.map { case score => score.toLong }\n \
    \       val guessesScores = guessesScoreList.map { case score => score.toLong\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScores\
    \ = gameScoreList.map { case score => score.toLong }\n        val guessesScores\
    \ = guessesScoreList.map { case score => score.toLong }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScoreList = gameScoreMap.values.toList\n        val guessesScoreList\
    \ = guessesScoreMap.values.toList\n        val gameScores = gameScoreList.map\
    \ { case score => score.toLong }\n        val guessesScores = guessesScoreList.map\
    \ { case score => score.toLong }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScore\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdjk9x_hj.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdjk9x_hj.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScores\e[0m = gameScoreList.map { \e[33mcase\e[0m score => score.toLong\
    \ }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdjk9x_hj.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessesScores\e[0m = guessesScoreList.map\
    \ { \e[33mcase\e[0m score => score.toLong }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScores is already defined as \e[33mvalue\e[0m \e[35mguessesScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdjk9x_hj.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdjk9x_hj.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreMap\e[0m = guessesScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessesScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessesScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that "
  stdout: ''
  timestamp: 1659797649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (index, score) }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val guessesWithScores = guessesScores.map { case (index,\
    \ score) => (index, score) }.toMap\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessesWithIndexesSorted\
    \ = guessesWithIndexes.sortBy(_._1).reverse\n        val gameWithIndexes = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameWithIndexesSorted\
    \ = gameWithIndexes.sortBy(_._1).reverse\n        val gameWithIndexesSortedWithScores\
    \ = gameWithIndexesSorted.map { case (index, score) => (index, score) }.toMap\n\
    \        val gameWithIndexesSortedWithIndexes = gameWithIndexesSortedWithScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameWithIndexesSortedWithIndexesSorted\
    \ = gameWithIndexesSortedWithIndexes.sortBy(_._1).reverse\n        val gameWithIndexesSortedWithIndexesSortedWithScores\
    \ = gameWithIndexesSortedWithIndexesSorted.map { case (index, score) => (index,\
    \ score) }.toMap\n        val gameWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = gameWithIndexesSortedWithIndexesSortedWithScores.map { case (index, score)\
    \ => (index, score) }.toMap\n        val gameWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = gameWithIndexesSortedWithIndexesSortedWithIndexes.sortBy(_._1).reverse\n \
    \       val gameWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores\
    \ = gameWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes.map { case\
    \ (index, score) => (index, score) }.toMap\n        val gameWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = gameWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores.map { case\
    \ (index, score) => (index, score) }.toMap\n        val gameWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = gameWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprt_r_5vx.scala:21:58 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesSorted\e\
    [0m = guessesWithIndexes.sortBy(_._1).reverse\n\e[31m\e[31m   |\e[0m         \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          value sortBy is not a member of Map[Int, Long]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmprt_r_5vx.scala:23:52 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameWithIndexesSorted\e\
    [0m = gameWithIndexes.sortBy(_._1).reverse\n\e[31m\e[31m   |\e[0m            \
    \                        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                  value sortBy is not a member of Map[Int, Long]\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmprt_r_5vx.scala:31:81 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgameWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes\e\
    [0m = gameWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores.map {\
    \ \e[33mcase\e[0m (index, score) => (index, score) }.toMap\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgameWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprt_r_5vx.scala:32:87\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted\e\
    [0m = gameWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted.sort\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mgameWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E0"
  stdout: ''
  timestamp: 1659797649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.map(x\
    \ => Math.abs(x - game))\n        val scores = game.map(x => Math.abs(x - guess))\n\
    \        val differences = guesses.zip(scores)\n        differences.map(x => if\
    \ (x._1 == 0) 0 else x._1 - x._2)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpxak5o3p8.scala:17:48 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = guess.map(\e\
    [36mx\e[0m => Math.abs(x - game))\n\e[31m\e[31m   |\e[0m                     \
    \                         ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((game : List[Long]))\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmpxak5o3p8.scala:18:46 -----------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        \e[33mval\e[0m \e[36mscores\e[0m = game.map(\e[36mx\e[0m\
    \ => Math.abs(x - guess))\n\e[31m\e[31m   |\e[0m                             \
    \               ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((guess : List[Long]))\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpxak5o3p8.scala:20:56 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        differences.map(\e[36mx\e[0m => \e[33mif\e[0m (x._1 ==\
    \ \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x._1 - x._2)\n\e[31m\e[31m   |\e\
    [0m                                                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue - is not a member of Nothing, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1659797650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => x._2.toLong)\n        val guessScores = guess.zipWithIndex.map(x\
    \ => x._2.toLong)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n     \
    \   val guessScoreList = guessScoreMap.toList\n        val gameScoreSet = gameScoreList.toSet\n\
    \        val guessScoreSet = guessScoreList.toSet\n        val gameScoreList =\
    \ gameScoreSet.toList\n        val guessScoreList = guessScoreSet.toList\n   \
    \     val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n\
    \        val gameScoreList = gameScoreSet.toList\n        val guessScoreList =\
    \ guessScoreSet.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreList = gameScoreSet.toList\n\
    \        val guessScoreList = guessScoreSet.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n    \
    \    val gameScoreList = gameScoreSet.toList\n        val guessScoreList = guessScoreSet.toList\n\
    \        val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n\
    \        val gameScoreList = gameScoreSet.toList\n        val guessScoreList =\
    \ guessScoreSet.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreList = gameScoreSet.toList\n\
    \        val guessScoreList = guessScoreSet.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n    \
    \    val gameScoreList = gameScoreSet.toList\n        val guessScoreList = guessScoreSet.toList\n\
    \        val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n\
    \        val gameScoreList = gameScoreSet.toList\n        val guessScoreList =\
    \ guessScoreSet.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreList = gameScoreSet.toList\n\
    \        val guessScoreList = guessScoreSet.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv0bn9zh3.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreSet.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv0bn9zh3.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScoreSet.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv0bn9zh3.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScoreList.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreSet is already defined as \e[33mvalue\e[0m \e[35mgameScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv0bn9zh3.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreSet\e[0m = guessScoreList.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreSet is already defined as \e[33mvalue\e[0m \e[35mguessScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv0bn9zh3.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreSet.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toList\n\
    \        val scores = game.toList\n        val guessesCount = guesses.size\n \
    \       val scoresCount = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val guessesRemaining = guessesCount - 1\n        val scoresRemaining\
    \ = scoresCount - 1\n        val guessesRemainingInt = guessesRemaining.toInt\n\
    \        val scoresRemainingInt = scoresRemaining.toInt\n        val guessesRemainingDouble\
    \ = guessesRemainingInt * 1.0\n        val scoresRemainingDouble = scoresRemainingInt\
    \ * 1.0\n        val guessesRemainingLong = guessesRemainingInt * 1.0\n      \
    \  val scoresRemainingLong = scoresRemainingInt * 1.0\n        val guessesRemainingFloat\
    \ = guessesRemainingInt * 1.0\n        val scoresRemainingFloat = scoresRemainingInt\
    \ * 1.0\n        val guessesRemainingInt = guessesRemainingInt.toDouble\n    \
    \    val scoresRemainingInt = scoresRemainingInt.toDouble\n        val guessesRemainingDouble\
    \ = guessesRemainingDouble.toDouble\n        val scoresRemainingDouble = scoresRemainingDouble.toDouble\n\
    \        val guessesRemainingLong = guessesRemainingLong.toDouble\n        val\
    \ scoresRemainingLong = scoresRemainingLong.toDouble\n        val guessesRemainingFloat\
    \ = guessesRemainingFloat.toDouble\n        val scoresRemainingFloat = scoresRemainingFloat.toDouble\n\
    \        val guessesRemainingInt = guessesRemainingInt.toFloat\n        val scoresRemainingInt\
    \ = scoresRemainingInt.toFloat\n        val guessesRemainingDouble = guessesRemainingDouble.toFloat\n\
    \        val scoresRemainingDouble = scoresRemainingDouble.toFloat\n        val\
    \ guessesRemainingLong = guessesRemainingLong.toFloat\n        val scoresRemainingLong\
    \ = scoresRemainingLong.toFloat\n        val guessesRemainingFloat = guessesRemainingFloat.toFloat\n\
    \        val scoresRemainingFloat = scoresRemainingFloat.toFloat\n        val\
    \ guessesRemainingInt = guessesRemainingInt.toInt\n        val scoresRemainingInt\
    \ = scoresRemainingInt.toInt\n        val guessesRemainingDouble = guessesRemainingDouble.toInt\n\
    \        val scoresRemainingDouble = scoresRemainingDouble.toInt\n        val\
    \ guessesRemainingLong = guessesRemainingLong.toInt\n        val scoresRemainingLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkzantgr0.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkzantgr0.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesRemainingInt\e[0m = guessesRemainingInt.toDouble\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mguessesRemainingInt is already defined as \e[33mvalue\e[0m \e[35mguessesRemainingInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkzantgr0.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mscoresRemainingInt\e[0m = scoresRemainingInt.toDouble\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mscoresRemainingInt is already defined as \e[33mvalue\e[0m\
    \ \e[35mscoresRemainingInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkzantgr0.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mguessesRemainingDouble\e\
    [0m = guessesRemainingDouble.toDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesRemainingDouble is already defined as \e[33mvalue\e\
    [0m \e[35mguessesRemainingDouble\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkzantgr0.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mscoresRemainingDouble\e\
    [0m = scoresRemainingDouble.toDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mscoresRemainingDouble is already defined as \e[33mvalue\e\
    [0m \e["
  stdout: ''
  timestamp: 1659797645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (index, score) }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val guessesWithScores = guessesScores.map { case (index,\
    \ score) => (index, gameScores(index) - score) }\n        val guessesWithScores\
    \ = guessesWithScores.toSeq.sortBy(_._1).reverse\n        val guessesWithScores\
    \ = guessesWithScores.map { case (index, score) => (index, Math.abs(score)) }\n\
    \        val guessesWithScores = guessesWithScores.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithScores = guessesWithScores.map { case (index, score) =>\
    \ (index, score) }\n        guessesWithScores\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpac6c2c6l.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScores\e[0m =\
    \ guessesWithScores.toSeq.sortBy(_._1).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScores is already defined as \e[33mvalue\e[0m \e\
    [35mguessesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpac6c2c6l.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScores\e[0m =\
    \ guessesWithScores.map { \e[33mcase\e[0m (index, score) => (index, Math.abs(score))\
    \ }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScores is already defined as \e[33mvalue\e[0m \e\
    [35mguessesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpac6c2c6l.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScores\e[0m =\
    \ guessesWithScores.toSeq.sortBy(_._1).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScores is already defined as \e[33mvalue\e[0m \e\
    [35mguessesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpac6c2c6l.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScores\e[0m =\
    \ guessesWithScores.map { \e[33mcase\e[0m (index, score) => (index, score) }\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScores is already defined as \e[33mvalue\e[0m \e\
    [3"
  stdout: ''
  timestamp: 1659797667
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{case (score, index) => score}.toList\n        val guessScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}.toList\n        val gameScoreMap\
    \ = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n        val guessScoreMap\
    \ = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n        val gameScoreList\
    \ = gameScoreMap.mapValues(_.toList)\n        val guessScoreList = guessScoreMap.mapValues(_.toList)\n\
    \        val gameScores = gameScoreList.map{case (score, index) => score}.toList\n\
    \        val guessScores = guessScoreList.map{case (score, index) => score}.toList\n\
    \        val gameScoreMap = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gameScoreList = gameScoreMap.mapValues(_.toList)\n        val guessScoreList\
    \ = guessScoreMap.mapValues(_.toList)\n        val gameScores = gameScoreList.map{case\
    \ (score, index) => score}.toList\n        val guessScores = guessScoreList.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gameScoreList = gameScoreMap.mapValues(_.toList)\n        val guessScoreList\
    \ = guessScoreMap.mapValues(_.toList)\n        val gameScores = gameScoreList.map{case\
    \ (score, index) => score}.toList\n        val guessScores = guessScoreList.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gameScoreList = gameScoreMap.mapValues(_.toList)\n        val guessScoreList\
    \ = guessScoreMap.mapValues(_.toList)\n        val gameScores = gameScoreList.map{case\
    \ (score, index) => score}.toList\n        val guessScores = guessScoreList.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val guessScoreMap = guess\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpspumeqbr.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScoreList.map{\e\
    [33mcase\e[0m (score, index) => score}.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpspumeqbr.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScores\e[0m = guessScoreList.map{\e\
    [33mcase\e[0m (score, index) => score}.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScores is already defined as \e[33mvalue\e[0m \e[35mguessScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpspumeqbr.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpspumeqbr.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of topleve"
  stdout: ''
  timestamp: 1659797673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n\
    \        val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n\
    \        val gameScoreList = gameScoreList.map { case (score, index) => index\
    \ }\n        val guessScoreList = guessScoreList.map { case (score, index) =>\
    \ index }\n        val gameScoreSet = gameScoreSet.toList\n        val guessScoreSet\
    \ = guessScoreSet.toList\n        val gameScoreList = gameScoreList.map { case\
    \ (score, index) => score }\n        val guessScoreList = guessScoreList.map {\
    \ case (score, index) => score }\n        val gameScoreSet = gameScoreSet.toList\n\
    \        val guessScoreSet = guessScoreSet.toList\n        val gameScoreList =\
    \ gameScoreList.map { case (score, index) => score }\n        val guessScoreList\
    \ = guessScoreList.map { case (score, index) => score }\n        val gameScoreSet\
    \ = gameScoreSet.toList\n        val guessScoreSet = guessScoreSet.toList\n  \
    \      val gameScoreList = gameScoreList.map { case (score, index) => score }\n\
    \        val guessScoreList = guessScoreList.map { case (score, index) => score\
    \ }\n        val gameScoreSet = gameScoreSet.toList\n        val guessScoreSet\
    \ = guessScoreSet.toList\n        val gameScoreList = gameScoreList.map { case\
    \ (score, index) => score }\n        val guessScoreList = guessScoreList.map {\
    \ case (score, index) => score }\n        val gameScoreSet = gameScoreSet.toList\n\
    \        val guessScoreSet = guessScoreSet.toList\n        val gameScoreList =\
    \ gameScoreList.map { case (score, index) => score }\n        val guessScoreList\
    \ = guessScoreList.map { case (score, index) => score }\n        val gameScoreSet\
    \ = gameScoreSet.toList\n        val guessScoreSet = guessScoreSet.toList\n  \
    \      val gameScoreList = gameScoreList.map { case (score, index) => score }\n\
    \        val guessScoreList = guessScoreList.map { case (score, index) => score\
    \ }\n        val gameScoreSet = game\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9t1hz1v3.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreList.map\
    \ { \e[33mcase\e[0m (score, index) => index }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9t1hz1v3.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScoreList.map\
    \ { \e[33mcase\e[0m (score, index) => index }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9t1hz1v3.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScoreSet.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreSet is already defined as \e[33mvalue\e[0m \e[35mgameScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9t1hz1v3.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreSet\e[0m = guessScoreSet.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreSet is already defined as \e[33mvalue\e[0m \e[35mguessScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9t1hz1v3.scala:29:12 ---------------------------"
  stdout: ''
  timestamp: 1659797671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.map(x\
    \ => Math.abs(x - game))\n        val correct = game.zip(guesses).filter(_._1\
    \ == 0).map(_._2)\n        val wrong = game.zip(guesses).filter(_._1 == 1).map(_._2)\n\
    \        correct.toList ++ wrong.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpipw6bn8a.scala:17:48 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = guess.map(\e\
    [36mx\e[0m => Math.abs(x - game))\n\e[31m\e[31m   |\e[0m                     \
    \                         ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((game : List[Long]))\n1 error found\n"
  stdout: ''
  timestamp: 1659797661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScoreSum = gameScores.sum\n        val gameScoreDiff = gameScores.map(_.abs).sum\n\
    \        val gameScoreDiffPercent = gameScoreDiff / gameScoreSum * 100\n     \
    \   val gameScoreDiffPercentPercentString = gameScoreDiffPercent.toString\n  \
    \      val gameScoreDiffPercentStringWithSpaces = gameScoreDiffPercentString.replaceAll(\"\
    \\\\.\", \"\\\\. \")\n        val gameScoreDiffPercentStringWithCommas = gameScoreDiffPercentStringWithSpaces.replaceAll(\"\
    ,\", \"\\\\, \")\n        val gameScoreDiffPercentStringWithDots = gameScoreDiffPercentStringWithCommas.replaceAll(\"\
    \\\\.\", \"\\\\. \")\n        val gameScoreDiffPercentStringWithCommasAndDots\
    \ = gameScoreDiffPercentStringWithDots.replaceAll(\",\", \"\\\\, \")\n       \
    \ val gameScoreDiffPercentStringWithDotsAndCommas = gameScoreDiffPercentStringWithCommasAndDots.replaceAll(\"\
    \\\\.\", \"\\\\. \")\n        val gameScoreDiffPercentStringWithDotsAndCommasAndDots\
    \ = gameScoreDiffPercentStringWithDotsAndCommas.replaceAll(\",\", \"\\\\, \")\n\
    \        val gameScoreDiffPercentStringWithDotsAndCommasAndDotsAndSpaces = gameScoreDiffPercentStringWithDotsAndCommasAndDots.replaceAll(\"\
    \\\\.\", \"\\\\. \")\n        val gameScoreDiffPercentStringWithDotsAndCommasAndDotsAndSpacesAndDots\
    \ = gameScoreDiffPercentStringWithDotsAndCommasAndDotsAndSpaces.replaceAll(\"\
    ,\", \"\\\\, \")\n        val gameScoreDiffPercentStringWithDotsAndCommasAndDotsAndSpacesAndDotsAndDots\
    \ = gameScoreDiffPercentStringWithDotsAndCommasAndDotsAndSpacesAndDots.replaceAll(\"\
    \\\\.\", \"\\\\. \")\n        val gameScoreDiffPercentStringWithDotsAndCommasAndDotsAndSpacesAndDotsAndDotsAndSpaces\
    \ = gameScoreDiffPercentStringWithDotsAndCommasAndDotsAndSpacesAndDotsAndDots.replaceAll(\"\
    ,\", \"\\\\, \")\n        val gameScoreDiffPercentStringWithDotsAndCommasAndDotsAndSpacesAndDotsAndDotsAndDotsAndSpaces\
    \ = gameScoreDiffPercentStringWithDotsAndCommasAndDotsAndSpacesAndDotsAndDotsAndSpaces.replaceAll(\"\
    \\\\.\", \"\\\\. \")\n        val gameScoreDiffPercentStringWithDotsAndComm\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnob51f4u.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnob51f4u.scala:22:51\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreDiffPercentStringWithSpaces\e[0m = gameScoreDiffPercentString.replaceAll(\e\
    [31m\"\\\\.\"\e[0m, \e[31m\"\\\\. \"\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   Not found: gameScoreDiffPercentString\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnob51f4u.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797668
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (index, score) }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val guessesWithScores = guessesScores.map { case (index,\
    \ score) => (index, score) }.toMap\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (index, score) => (index, index) }.toMap\n        val guessesWithIndexesWithScores\
    \ = guessesWithIndexes.map { case (index, score) => (index, score) }.toMap\n \
    \       val guessesWithIndexesWithIndexes = guessesWithIndexesWithScores.map {\
    \ case (index, score) => (index, index) }.toMap\n        val guessesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexes.map { case (index, score) => (index, score)\
    \ }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithScores = guessesWithIndexesWithIndexesWithScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexes.map { case (index, score)\
    \ => (index, score) }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithScores.map { case (index,\
    \ score) => (index, score) }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndex\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa3yfast2.scala:25:76 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\e\
    [0m = guessesWithIndexesWithIndexesWithIndexesWithIndexes.map { \e[33mcase\e[0m\
    \ (index, score) => (index, score) }.toMap\n\e[31m\e[31m   |\e[0m            \
    \                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m          Not found: guessesWithIndexesWithIndexesWithIndexesWithIndexes\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa3yfast2.scala:29:120\
    \ -----------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\e\
    [0m = guessesWithIndexesWithIndex\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                              Not found: guessesWithIndexesWithIndex\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa3yfast2.scala:30:5 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659797669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList =\
    \ new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach { case (score,\
    \ index) =>\n            val guessScore = guessScoreMap.get(index)\n         \
    \   if (guessScore == null) {\n                gameScoreList.add(score)\n    \
    \        } else {\n                val gameScore = gameScoreMap.get(index)\n \
    \               val diff = abs(guessScore - gameScore)\n                gameScoreList.add(gameScore)\n\
    \                guessScoreList.add(guessScore)\n                guessScoreMap\
    \ += (index -> diff)\n            }\n        }\n        guessScoreList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpo1ituhky.scala:19:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- Error: /tmp/tmpo1ituhky.scala:20:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo1ituhky.scala:21:32\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpo1ituhky.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = \e\
    [33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{ case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map{ case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - guessScoreSum\n        val guessScoreDiff\
    \ = guessScoreSum - gameScoreSum\n        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map{\
    \ case (score, index) => score }\n        val guessScoreDiffs = guessScoreDiff.zipWithIndex.map{\
    \ case (score, index) => score }\n        val gameScoreDiffCount = gameScoreDiffs.count\n\
    \        val guessScoreDiffCount = guessScoreDiffs.count\n        val gameScoreDiffSum\
    \ = gameScoreDiffs.sum\n        val guessScoreDiffSum = guessScoreDiffs.sum\n\
    \        val gameScoreDiffDiff = gameScoreDiffSum - guessScoreDiffSum\n      \
    \  val guessScoreDiffDiff = guessScoreDiffSum - gameScoreDiffSum\n        val\
    \ gameScoreDiffDiffs = gameScoreDiffDiff.zipWithIndex.map{ case (score, index)\
    \ => score }\n        val guessScoreDiffDiffs = guessScoreDiffDiff.zipWithIndex.map{\
    \ case (score, index) => score }\n        val gameScoreDiffDiffCount = gameScoreDiffDiffs.count\n\
    \        val guessScoreDiffDiffCount = guessScoreDiffDiffs.count\n        val\
    \ gameScoreDiffDiffSum = gameScoreDiffDiffs.sum\n        val guessScoreDiffDiffSum\
    \ = guessScoreDiffDiffs.sum\n        val gameScoreDiffDiffDiff = gameScoreDiffDiffSum\
    \ - guessScoreDiffDiffSum\n        val guessScoreDiffDiffDiff = guessScoreDiffDiffSum\
    \ - gameScoreDiffDiffSum\n        val gameScoreDiffDiffDiffs = gameScoreDiffDiffDiff.zipWithIndex.map{\
    \ case (score, index) => score }\n        val guessScoreDiffDiffs = guessScoreDiffDiff.zipWithIndex.map{\
    \ case (score, index) => score }\n        val gameScoreDiffDiffCount = gameScoreDiffDiffs.count\n\
    \        val guessScoreDiffDiffCount = guessScoreDiffDiffs.count\n        val\
    \ gameScoreDiffDiffSum = gameScoreDiffDiffs.sum\n        val guessScoreDiffDiffSum\
    \ = guessScoreDiffDiffs.sum\n        val gameScoreDiffDiffDiff\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8tefxs6o.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8tefxs6o.scala:42:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessScoreDiffDiffs\e[0m = guessScoreDiffDiff.zipWithIndex.map{ \e[33mcase\e\
    [0m (score, index) => score }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffDiffs is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreDiffDiffs\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8tefxs6o.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffDiffCount\e\
    [0m = gameScoreDiffDiffs.count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffDiffCount is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffDiffCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8tefxs6o.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffDiffCount\e\
    [0m = guessScoreDiffDiffs.count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffDiffCount is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreDiffDiffCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8tefxs6o.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffDiffSum\e[0m\
    \ = gameScoreDiffDiffs.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[3"
  stdout: ''
  timestamp: 1659797672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.length\n\
    \        val scores = game.length\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val guessesRemaining = guesses\n        val scoresRemaining = scores\n\
    \        val guessesRemainingInGame = guessesRemaining - game.length\n       \
    \ val scoresRemainingInGame = scoresRemaining - game.length\n        val guessesRemainingInGuess\
    \ = guessesRemainingInGame - guesses.length\n        val scoresRemainingInGuess\
    \ = scoresRemainingInGame - guesses.length\n        val guessesRemainingInScore\
    \ = guessesRemainingInGuess - scores.length\n        val scoresRemainingInScore\
    \ = scoresRemainingInScore - scores.length\n        val guessesRemainingInGuesses\
    \ = guessesRemainingInScore - guesses.length\n        val scoresRemainingInGuesses\
    \ = scoresRemainingInGuesses - guesses.length\n        val guessesRemainingInGuessesAndScores\
    \ = guessesRemainingInGuesses - scores.length\n        val scoresRemainingInGuessesAndScores\
    \ = scoresRemainingInGuessesAndScores - guesses.length\n        val guessesRemainingInGuessesAndScoresAndGame\
    \ = guessesRemainingInGuessesAndScores - scores.length\n        val scoresRemainingInGuessesAndScoresAndGame\
    \ = scoresRemainingInGuessesAndScoresAndGame - guesses.length\n        val guessesRemainingInGuessesAndScoresAndGameAndGuesses\
    \ = guessesRemainingInGuessesAndScoresAndGame - scores.length\n        val scoresRemainingInGuessesAndScoresAndGameAndGuesses\
    \ = scoresRemainingInGuessesAndScoresAndGameAndGuesses - guesses.length\n    \
    \    val guessesRemainingInGuessesAndScoresAndGameAndGuessesAndScores = guessesRemainingInGuessesAndScoresAndGameAndGuesses\
    \ - scores.length\n        val scoresRemainingInGuessesAndScoresAndGameAndGuessesAndScores\
    \ = scoresRemainingInGuessesAndScoresAndGameAndGuessesAndScores - guesses.length\n\
    \        val guessesRemainingInGuessesAndScoresAndGameAndGuessesAndScoresAndGame\
    \ = guessesRemainingInGuessesAndSco\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4qau9qe.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq4qau9qe.scala:24:71\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesRemainingInGuess\e[0m = guessesRemainingInGame - guesses.length\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \  value length is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpq4qau9qe.scala:25:69 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mscoresRemainingInGuess\e[0m = scoresRemainingInGame\
    \ - guesses.length\n\e[31m\e[31m   |\e[0m                                    \
    \                         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                      value length is not a member of Int\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpq4qau9qe.scala:27:37 ---------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mscoresRemainingInScore\e[0m =\
    \ scoresRemainingInScore - scores.length\n\e[31m\e[31m   |\e[0m              \
    \                       ^\e[0m\n\e[31m   |\e[0m                       Recursive\
    \ \e[33mvalue\e[0m \e[35mscoresRemainingInScore\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq4qau9qe.scala:29:39 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mscoresRemainingInGuesses\e\
    [0m = scoresRemainingInGuesses - guesses.length\n\e[31m\e[31m   |\e[0m       \
    \                                ^\e[0m\n\e[31m   |\e[0m                     Recursive\
    \ \e[33mvalue\e[0m \e[35mscoresRemainingInGuesses\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659797671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => gameScores(index) -> score }.toMap\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (score, index) => index -> score }.toMap\n  \
    \      val guessesWithIndexesSorted = guessesWithIndexes.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithScores = guessesWithIndexesSorted.map\
    \ { case (index, score) => score -> index }.toMap\n        val guessesWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithScores.map { case (score, index) => index -> score\
    \ }.toMap\n        val guessesWithIndexesSortedWithIndexesSorted = guessesWithIndexesSortedWithIndexes.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithIndexesSortedWithScores = guessesWithIndexesSortedWithIndexesSorted.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithIndexesSortedWithScores.map { case (score, index)\
    \ => index -> score }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexes.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores.map {\
    \ case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores\
    \ = guesses\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7teul00h.scala:21:58 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesSorted\e\
    [0m = guessesWithIndexes.sortBy(_._1).reverse\n\e[31m\e[31m   |\e[0m         \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          value sortBy is not a member of Map[Long, Int]\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7teul00h.scala:29:84 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes\e\
    [0m = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores.map\
    \ { \e[33mcase\e[0m (score, index) => index -> score }.toMap\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mguessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7teul00h.scala:30:90\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted\e\
    [0m = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7teul00h.scala:31:100 -----------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m        \e[33mval\e[0m \e[36mguessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores\e\
    [0m = guesses\n\e[31m\e[31m   |\e[0m                                         \
    \                   "
  stdout: ''
  timestamp: 1659797672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val guessesDiff = guesses.zip(scores).map\
    \ { case (guess, score) => abs(guess - score) }\n        val scoresDiff = scores.zip(guesses).map\
    \ { case (score, guess) => abs(score - guess) }\n        val diffs = guessesDiff.zip(scoresDiff).map\
    \ { case (diff, scoreDiff) => diff + scoreDiff }\n        diffs.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpulf60t0o.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E051] Reference Error:\
    \ /tmp/tmpulf60t0o.scala:22:84 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mscoresDiff\e[0m = scores.zip(guesses).map { \e\
    [33mcase\e[0m (score, guess) => abs(score - guess) }\n\e[31m\e[31m   |\e[0m  \
    \                                                                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mAmbiguous overload. The overloaded alternatives of \e[33mmethod\e\
    [0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e\
    [0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x:\
    \ Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\
    \e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e\
    [0mall match arguments ((guess : Nothing))\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797663
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessesScoreCount = guessesScores.count\n  \
    \      val gameScoreDiff = gameScoreCount - guessesScoreCount\n        val guessesScoreDiff\
    \ = guessesScoreCount - gameScoreCount\n        val gameScoreDiffList = gameScoreDiff.toList.map\
    \ { i => gameScoreDiff.abs() }\n        val guessesScoreDiffList = guessesScoreDiff.toList.map\
    \ { i => guessesScoreDiff.abs() }\n        val gameScoreDiffSum = gameScoreDiffList.sum\n\
    \        val guessesScoreDiffSum = guessesScoreDiffList.sum\n        val gameScoreDiffDiff\
    \ = gameScoreDiffSum - guessesScoreDiffSum\n        val guessesScoreDiffDiff =\
    \ guessesScoreDiffSum - gameScoreDiffSum\n        val gameScoreDiffDiffList =\
    \ gameScoreDiffDiff.toList.map { i => gameScoreDiffDiff.abs() }\n        val guessesScoreDiffDiffList\
    \ = guessesScoreDiffDiff.toList.map { i => guessesScoreDiffDiff.abs() }\n    \
    \    val gameScoreDiffDiffSum = gameScoreDiffDiffList.sum\n        val guessesScoreDiffDiffSum\
    \ = guessesScoreDiffDiffList.sum\n        val gameScoreDiffDiffDiff = gameScoreDiffDiffSum\
    \ - guessesScoreDiffDiffSum\n        val guessesScoreDiffDiffDiff = guessesScoreDiffDiffSum\
    \ - gameScoreDiffDiffSum\n        val gameScoreDiffDiffDiffList = gameScoreDiffDiffDiff.toList.map\
    \ { i => gameScoreDiffDiffDiff.abs() }\n        val guessesScoreDiffDiffDiffList\
    \ = guessesScoreDiffDiffDiff.toList.map { i => guessesScoreDiffDiffDiff.abs()\
    \ }\n        val gameScoreDiffDiffDiffSum = gameScoreDiffDiffDiffList.sum\n  \
    \      val guessesScoreDiffDiffDiffSum = guessesScoreDiffDiffDiffList.sum\n  \
    \      val gameScoreDiffDiffDiffDiff = gameScoreDiffDiffDiffSum - guessesScoreDiffDiffDiffSum\n\
    \        val guessesScoreDiffDiffDiffDiff = guessesScoreDiffDiffDiffSum - gameScoreDiffDiffDiffSum\n\
    \        val gameScoreDiffDiffDiffDiffList = gameScoreDiffDiffDiffDiff.toList.map\
    \ { i => gameScoreDiffDiffDiffDiff\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfokkzsl4.scala:51:0 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfokkzsl4.scala:21:43\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreDiff\e[0m = gameScoreCount - guessesScoreCount\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is\
    \ not a member of (Long => Boolean) => Int, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfokkzsl4.scala:22:49\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesScoreDiff\e[0m = guessesScoreCount - gameScoreCount\n\e[31m\e[31m \
    \  |\e[0m                               ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue - is not a member of (Long => Boolean) => Int, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpfokkzsl4.scala:50:1 ---------------------\e[0m\e\
    [0m\n\e[31m50 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:  \
    \  Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpfokkzsl4.scala:43:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m43 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray"
  stdout: ''
  timestamp: 1659797675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessesWithScores = guess.zip(game).map { case (guess,\
    \ score) => guess -> score }.toMap\n        val guessesWithIndexes = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> index }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score }.toMap\n \
    \       val guessesWithIndexesWithScoreAndIndex = guess.zipWithIndex.map { case\
    \ (guess, index) => guess -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index -> score }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScoreAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7avjd6fv.scala:29:211 --------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScore\e\
    [0m = guess.zipWithIndex.map { \e[33mcase\e[0m (guess, index) => guess -> score\
    \ -> index -> score -> index -> score -> \n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \                                                                            \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7avjd6fv.scala:39:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m39 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp7avjd6fv.scala:21:100 -----------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScores\e[0m\
    \ = guess.zipWithIndex.map { \e[33mcase\e[0m (guess, index) => guess -> score\
    \ }.toMap\n\e[31m\e[31m   |\e[0m                                             \
    \                                                       ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                        Not found: score\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7avjd6fv.scala:22:107\
    \ -----------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesWithScoreAndIndex\e[0m = guess.zipWithIndex.map { \e[33mcase\e\
    [0m (guess, index) => guess -> score -> index }.toMap\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                                     Not found: score\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation availabl"
  stdout: ''
  timestamp: 1659797674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val results = new mutable.ListBuffer[Long]()\n\
    \        for(score <- scores) {\n            val guess = guesses.find(_ == score)\n\
    \            if(guess == None) results += score\n            else results += abs(guess\
    \ - score)\n        }\n        results.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0xd6eueb.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresults\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797662
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guess\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkcqkm67_.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkcqkm67_.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkcqkm67_.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkcqkm67_.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkcqkm67_.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659797674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => score -> gameScores(index) }.toMap\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (score, index) => index -> score }.toMap\n  \
    \      val guessesWithIndexesSorted = guessesWithIndexes.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedSortedByScore = guessesWithIndexesSorted.toSeq.sortBy(_._2)\n\
    \        val guessesWithIndexesSortedSortedByScoreSortedByIndex = guessesWithIndexesSortedSortedByScore.toSeq.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedSortedByScoreSortedByIndexSortedByScore =\
    \ guessesWithIndexesSortedSortedByIndexSortedByScore.toSeq.sortBy(_._2)\n    \
    \    val guessesWithIndexesSortedSortedByScoreSortedByIndexSortedByScoreSortedByIndex\
    \ = guessesWithIndexesSortedSortedByIndexSortedByScoreSortedByIndex.toSeq.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedSortedByScoreSortedByIndexSortedByScoreSortedByIndexSortedByScore\
    \ = guessesWithIndexesSortedSortedByIndexSortedByScoreSortedByIndexSortedByScore.toSeq.sortBy(_._2)\n\
    \        val guessesWithIndexesSortedSortedByScoreSortedByIndexSortedByScoreSortedByIndexSortedByScoreSortedByIndex\
    \ = guessesWithIndexesSortedSortedByIndexSortedByScoreSortedByIndexSortedByScoreSortedByIndexSortedByScore.toSeq.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedSortedByScoreSortedByIndexSortedByScoreSortedByIndexSortedByScoreSortedByIndexSortedByScore\
    \ = guessesWithIndexesSortedSortedByIndexSortedByScoreSortedByIndexSortedByScoreSortedByIndexSortedByScoreSortedByIndexSortedByScore.toSeq.sortBy(_._2)\n\
    \        val guessesWithIndexesSortedSortedByScoreSortedByIndexSortedByScoreSortedByIndexSortedByScoreSortedByIndexSortedByScoreSortedByIndex\
    \ = guessesWithIndexesSortedSortedByIndexSortedByScoreSortedByIndexSortedByScoreSortedByIndexSortedBy\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8sj1t6zr.scala:24:78 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesSortedSortedByScoreSortedByIndexSortedByScore\e\
    [0m = guessesWithIndexesSortedSortedByIndexSortedByScore.toSeq.sortBy(_._2)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m           Not found: guessesWithIndexesSortedSortedByIndexSortedByScore\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8sj1t6zr.scala:25:91\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesSortedSortedByScoreSortedByIndexSortedByScoreSortedByIndex\e\
    [0m = guessesWithIndexesSortedSortedByIndexSortedByScoreSortedByIndex.toSeq.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: guessesWithIndexesSortedSortedByIndexSortedByScoreSortedByIndex\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8sj1t6zr.scala:26:104\
    \ -----------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesSortedSortedByScoreSortedByIndexSortedByScoreSortedByIndexSortedByScore\e\
    [0m = guessesWithIndexesSortedSortedByIndexSortedByScoreSortedByIndexSortedByScore.toSeq.sortBy(_._2)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: guessesWithIndexesSortedSortedByIndexSortedByScoreSortedByIndexSortedByScore\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8sj1t6zr.scala:27:117"
  stdout: ''
  timestamp: 1659797672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{ case (score, index) => score }.toList\n        val guessScores\
    \ = guess.zipWithIndex.map{ case (score, index) => score }.toList\n        val\
    \ gameScoreMap = gameScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n     \
    \   val guessScoreMap = guessScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \        val gameScoreList: List[Long] = gameScoreMap.keys.toList.sortBy(_._1).reverse.map(x\
    \ => gameScoreMap.get(x))\n        val guessScoreList: List[Long] = guessScoreMap.keys.toList.sortBy(_._1).reverse.map(x\
    \ => guessScoreMap.get(x))\n        val gameScoreDiff = gameScoreList.zip(guessScoreList).map(x\
    \ => x._1 - x._2)\n        val gameScoreDiffList = gameScoreDiff.map(x => x.toLong)\n\
    \        val gameScoreDiffListMap = gameScoreDiffList.groupBy(_._1).mapValues(_.map(_._2)).toMap\n\
    \        val gameScoreDiffListMapKeys = gameScoreDiffListMap.keys.toList.sortBy(_._1).reverse.map(x\
    \ => gameScoreDiffListMap.get(x))\n        val gameScoreDiffListMapValues = gameScoreDiffListMapKeys.map(x\
    \ => gameScoreDiffListMap.get(x))\n        val gameScoreDiffListMapValuesList\
    \ = gameScoreDiffListMapValues.toList.sortBy(_._1).reverse.map(x => x._2)\n  \
    \      val gameScoreDiffListMapValuesListMapKeys = gameScoreDiffListMapValuesList.toList.sortBy(_._1).reverse.map(x\
    \ => x._2)\n        val gameScoreDiffListMapValuesListMapValues = gameScoreDiffListMapValuesListMapKeys.map(x\
    \ => gameScoreDiffListMapValuesListMapKeys.get(x))\n        val gameScoreDiffListMapValuesListMapValuesList\
    \ = gameScoreDiffListMapValuesListMapValues.toList.sortBy(_._1).reverse.map(x\
    \ => x._2)\n        val gameScoreDiffListMapValuesListMapValuesListMapKeys = gameScoreDiffListMapValuesListMapValuesList.toList.sortBy(_._1).reverse.map(x\
    \ => x._2)\n        val gameScoreDiffListMapValuesListMapValuesListMapValues =\
    \ gameScoreDiffListMapValuesListMapValuesListMapKeys.map(x => gameScoreDiffListMapValuesListMapValuesListMapKeys.get(x))\n\
    \        val game\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxmigi_x7.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxmigi_x7.scala:17:30\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScores\e[0m = game.zipWithIndex.map{ \e[33mcase\e[0m (score, index) =>\
    \ score }.toList\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue zipWithIndex is not a member of Null, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \ import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxmigi_x7.scala:20:50\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mguessScoreMap\e[0m = guessScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^\e[0m\n\
    \e[31m   |\e[0m                                        value _2 is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxmigi_x7.scala:20:72\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mguessScoreMap\e[0m = guessScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \e[31m\e[31m   |\e[0m                             "
  stdout: ''
  timestamp: 1659797677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val diffs = scores.toList.zip(guesses.toList).map(x\
    \ => Math.abs(x._1 - x._2))\n        val diffsSet = diffs.toSet\n        val diffsList\
    \ = diffs.toList\n        val diffsSetList = diffsSet.toList\n        val diffsSetListLength\
    \ = diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diffsSetList.length\n        val diffsSetListLength = diffsSetList.length\n\
    \        val diffsSetListLength = diffsSetList.length\n        val diffsSetListLength\
    \ = diff\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc3urauhf.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdiffsSetListLength\e[0m\
    \ = diffsSetList.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdiffsSetListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mdiffsSetListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc3urauhf.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdiffsSetListLength\e[0m\
    \ = diffsSetList.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdiffsSetListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mdiffsSetListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc3urauhf.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdiffsSetListLength\e[0m\
    \ = diffsSetList.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdiffsSetListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mdiffsSetListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc3urauhf.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mdiffsSetListLength\e[0m\
    \ = diffsSetList.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdiffsSetListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mdiffsSetListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc3urauhf.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mdiffsSetListLength"
  stdout: ''
  timestamp: 1659797671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guessesCount\
    \ = guess.size\n        val gamesCount = game.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val gamesScore = game.map(x => x.toLong)\n        val guessesScore =\
    \ guess.map(x => x.toLong)\n        val gamesScoreDiff = gamesScore diff guessesScore\n\
    \        val guessesScoreDiff = guessesScore diff gamesScore\n        val gamesScoreDiffCount\
    \ = gamesScoreDiff.count\n        val guessesScoreDiffCount = guessesScoreDiff.count\n\
    \        val gamesScoreDiffCountMinusOne = gamesScoreDiffCount - 1\n        val\
    \ guessesScoreDiffCountMinusOne = guessesScoreDiffCount - 1\n        val gamesScoreDiffCountMinusTwo\
    \ = gamesScoreDiffCount - 2\n        val guessesScoreDiffCountMinusTwo = guessesScoreDiffCount\
    \ - 2\n        val gamesScoreDiffCountMinusThree = gamesScoreDiffCount - 3\n \
    \       val guessesScoreDiffCountMinusThree = guessesScoreDiffCount - 3\n    \
    \    val gamesScoreDiffCountMinusFour = gamesScoreDiffCount - 4\n        val guessesScoreDiffCountMinusFour\
    \ = guessesScoreDiffCount - 4\n        val gamesScoreDiffCountMinusFive = gamesScoreDiffCount\
    \ - 5\n        val guessesScoreDiffCountMinusFive = guessesScoreDiffCount - 5\n\
    \        val gamesScoreDiffCountMinusSix = gamesScoreDiffCount - 6\n        val\
    \ guessesScoreDiffCountMinusSix = guessesScoreDiffCount - 6\n        val gamesScoreDiffCountMinusSeven\
    \ = gamesScoreDiffCount - 7\n        val guessesScoreDiffCountMinusSeven = guessesScoreDiffCount\
    \ - 7\n        val gamesScoreDiffCountMinusEight = gamesScoreDiffCount - 8\n \
    \       val guessesScoreDiffCountMinusEight = guessesScoreDiffCount - 8\n    \
    \    val gamesScoreDiffCountMinusNine = gamesScoreDiffCount - 9\n        val guessesScoreDiffCountMinusNine\
    \ = guessesScoreDiffCount - 9\n        val gamesScoreDiffCountMinusTen = gamesScoreDiffCount\
    \ - 10\n        val guessesScoreDiffCountMinusTen = guessesScoreDiffCount - 10\n\
    \        val gamesScoreDiffCount\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl1tmtsz0.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl1tmtsz0.scala:19:25\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpl1tmtsz0.scala:26:62 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        \e[33mval\e[0m \e[36mgamesScoreDiffCountMinusOne\e[0m = gamesScoreDiffCount\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \    ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of (Long\
    \ => Boolean) => Int, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpl1tmtsz0.scala:27:66 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreDiffCountMinusOne\e\
    [0m = guessesScoreDiffCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ - is not a member of (Long => Boolean) => Int, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps"
  stdout: ''
  timestamp: 1659797678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => x._1 + x._2)\n        val guessScores = guess.zipWithIndex.map(x\
    \ => x._1 + x._2)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n     \
    \   val guessScoreList = guessScoreMap.toList\n        val gameScoreSet = gameScoreList.toSet\n\
    \        val guessScoreSet = guessScoreList.toSet\n        val gameScoreList =\
    \ gameScoreSet.toList\n        val guessScoreList = guessScoreSet.toList\n   \
    \     val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n\
    \        val gameScoreList = gameScoreSet.toList\n        val guessScoreList =\
    \ guessScoreSet.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreList = gameScoreSet.toList\n\
    \        val guessScoreList = guessScoreSet.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n    \
    \    val gameScoreList = gameScoreSet.toList\n        val guessScoreList = guessScoreSet.toList\n\
    \        val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n\
    \        val gameScoreList = gameScoreSet.toList\n        val guessScoreList =\
    \ guessScoreSet.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreList = gameScoreSet.toList\n\
    \        val guessScoreList = guessScoreSet.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n    \
    \    val gameScoreList = gameScoreSet.toList\n        val guessScoreList = guessScoreSet.toList\n\
    \        val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n\
    \        val gameScoreList = gameScoreSet.toList\n        val guessScoreList =\
    \ guessScoreSet.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreList = gameScoreSet.toList\n\
    \        val guessScoreList = guessScoreSet.toList\n        val gameScoreSet =\
    \ gameScoreList.toSet\n        \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp57afupf5.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreSet.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp57afupf5.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScoreSet.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp57afupf5.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScoreList.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreSet is already defined as \e[33mvalue\e[0m \e[35mgameScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp57afupf5.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreSet\e[0m = guessScoreList.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreSet is already defined as \e[33mvalue\e[0m \e[35mguessScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp57afupf5.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreSet.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val gameScore = gameScores.map { case (score, index)\
    \ => score }.toList\n        val guessScore = guessScores.map { case (score, index)\
    \ => score }.toList\n        val gameScoreDiff = gameScore diff guessScore\n \
    \       val gameScoreDiffList = gameScoreDiff.zipWithIndex.map { case (score,\
    \ index) => score -> index }.toMap\n        val gameScoreDiffList = gameScoreDiffList.map\
    \ { case (score, index) => score -> gameScoreDiff(index) }.toMap\n        val\
    \ gameScoreDiffList = gameScoreDiffList.map { case (score, index) => score ->\
    \ gameScoreDiff(index) }.toMap\n        val gameScoreDiffList = gameScoreDiffList.map\
    \ { case (score, index) => score -> gameScoreDiff(index) }.toMap\n        val\
    \ gameScoreDiffList = gameScoreDiffList.map { case (score, index) => score ->\
    \ gameScoreDiff(index) }.toMap\n        val gameScoreDiffList = gameScoreDiffList.map\
    \ { case (score, index) => score -> gameScoreDiff(index) }.toMap\n        val\
    \ gameScoreDiffList = gameScoreDiffList.map { case (score, index) => score ->\
    \ gameScoreDiff(index) }.toMap\n        val gameScoreDiffList = gameScoreDiffList.map\
    \ { case (score, index) => score -> gameScoreDiff(index) }.toMap\n        val\
    \ gameScoreDiffList = gameScoreDiffList.map { case (score, index) => score ->\
    \ gameScoreDiff(index) }.toMap\n        val gameScoreDiffList = gameScoreDiffList.map\
    \ { case (score, index) => score -> gameScoreDiff(index) }.toMap\n        val\
    \ gameScoreDiffList = gameScoreDiffList.map { case (score, index) => score ->\
    \ gameScoreDiff(index) }.toMap\n        val gameScoreDiffList = gameScoreDiffList.map\
    \ { case (score, index) => score -> gameScoreDiff(index) }.toMap\n        val\
    \ gameScoreDiffList = gameScoreDiffList.map { case (score, index) => score ->\
    \ gameScoreDiff(index) }.toMap\n        val gameScoreDiffList = gameScoreDiffList.map\
    \ { case (score, index) => score -> gameScoreDiff(index) }.toMap\n        val\
    \ gameScoreDiffList = \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpg8xdxq7t.scala:36:31 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffList\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg8xdxq7t.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffList\e[0m = gameScoreDiffList.map { \e[33mcase\e[0m (score,\
    \ index) => score -> gameScoreDiff(index) }.toMap\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffList is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreDiffList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpg8xdxq7t.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffList\e[0m =\
    \ gameScoreDiffList.map { \e[33mcase\e[0m (score, index) => score -> gameScoreDiff(index)\
    \ }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffList is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreDiffList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpg8xdxq7t.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffList\e[0m =\
    \ gameScoreDiffList.map { \e[33mcase\e[0m (score, index) => score -> gameScoreDiff(index)\
    \ }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffList is already de"
  stdout: ''
  timestamp: 1659797674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScore\
    \ = gameScores.sum\n        val guessScore = guessScores.sum\n        val gameScoreDiff\
    \ = gameScore - guessScore\n        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n\
    \        val gameScoreDiffAbsMinusGuess = gameScoreDiffAbs - guessScore\n    \
    \    val gameScoreDiffAbsMinusGuessMinusGame = gameScoreDiffAbsMinusGuess - gameScore\n\
    \        val gameScoreDiffAbsMinusGuessMinusGameMinusGuess = gameScoreDiffAbsMinusGuessMinusGame\
    \ - gameScoreDiff\n        val gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGame\
    \ = gameScoreDiffAbsMinusGuessMinusGameMinusGuess - gameScoreDiffAbs\n       \
    \ val gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuess = gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGame\
    \ - gameScoreDiffAbsMinusGuessMinusGameMinusGuess\n        val gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGame\
    \ = gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuess - gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGame\n\
    \        val gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGameMinusGuess\
    \ = gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGuess\
    \ - gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGuess\n\
    \        val gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGuess\
    \ = gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGuessMinusGuess\
    \ - game\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwyl401e7.scala:29:98 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGameMinusGuess\e\
    [0m = gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGuess\
    \ - gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGuess\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGuess\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwyl401e7.scala:30:108\
    \ -----------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGuess\e\
    [0m = gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGuessMinusGuess\
    \ - game\n\e[31m\e[31m   |\e[0m                                              \
    \                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: gameScoreDiffAbsMinusGuessMinusGameMinusGuessMinusGameMinusGuessMinusGuessMinusGuess\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwyl401e7.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797673
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (index, score) }\n        val\
    \ guessScores = guess.zipWithIndex.map { case (score, index) => (index, score)\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScoreDiff\
    \ = gameScoreList.zip(guessScoreList).map { case (gameScore, guessScore) =>\n\
    \            val gameScoreDiff = gameScore - guessScore\n            if (gameScoreDiff\
    \ < 0)\n                gameScoreDiff\n            else\n                Math.abs(gameScoreDiff)\n\
    \        }\n        gameScoreDiff.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo5937m6f.scala:33)\n\tat Problem.main(tmpo5937m6f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        val gameScores = gameScores.zipWithIndex.map { case (score,\
    \ index) => if (score < 0) -score else score }\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        val gameScores = gameScores.zipWithIndex.map { case (score,\
    \ index) => if (score < 0) -score else score }\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        val gameScores = gameScores.zipWithIndex.map { case (score,\
    \ index) => if (score < 0) -score else score }\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        val gameScores = gameScores.zipWithIndex.map { case (score,\
    \ index) => if (score < 0) -score else score }\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        val gameScores = gameScores.zipWithIndex.map { case (score,\
    \ index) => if (score < 0) -score else score }\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0hv1pr_h.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => \e[33mif\e[0m (score < \e[31m0\e[0m) -score\
    \ \e[33melse\e[0m score }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0hv1pr_h.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => \e[33mif\e[0m (score < \e[31m0\e[0m) -score\
    \ \e[33melse\e[0m score }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0hv1pr_h.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => \e[33mif\e[0m (score < \e[31m0\e[0m) -score\
    \ \e[33melse\e[0m score }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0hv1pr_h.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, in"
  stdout: ''
  timestamp: 1659797688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.filter(_._1 == _).map(_._2)\n        val guessScores = guess.zipWithIndex.filter(_._1\
    \ == _).map(_._2)\n        val gameScoreSet = gameScores.toSet\n        val guessScoreSet\
    \ = guessScores.toSet\n        val gameScoreList = gameScores.toList\n       \
    \ val guessScoreList = guessScores.toList\n        val gameScoreSetSize = gameScoreSet.size\n\
    \        val guessScoreSetSize = guessScoreSet.size\n        val gameScoreListSize\
    \ = gameScoreList.size\n        val guessScoreListSize = guessScoreList.size\n\
    \        val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n   \
    \     val guessScoreListSize = guessScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n   \
    \     val guessScoreListSize = guessScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n   \
    \     val guessScoreListSize = guessScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkf0_ykyb.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkf0_ykyb.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreSetSize\e[0m = gameScoreSetSize\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScoreSetSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScoreSetSize\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpkf0_ykyb.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessScoreSetSize\e[0m = guessScoreSetSize\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreSetSize is already defined as \e[33mvalue\e[0m \e[35mguessScoreSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkf0_ykyb.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m = gameScoreListSize\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgameScoreListSize is already defined as \e[33mvalue\e[0m \e[35mgameScoreListSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkf0_ykyb.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mguessScoreListSize\e[0m = guessScoreListSize\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mguessScoreListSize is already defined as \e[33mvalue\e[0m \e[35mguessScoreListSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitio"
  stdout: ''
  timestamp: 1659797689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val results = new mutable.ListBuffer[Long]()\n\
    \        val guessesCount = guesses.size\n        val scoresCount = scores.size\n\
    \        val guessesPerScore = guessesCount / scoresCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val guessesPerGuess = guessesCount / guessesCount\n\
    \        val guessesPerGuess = guessesCount / guessesCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val scoresPerGuess = scoresCount / guessesCount\n\
    \        val scoresPerGuess = scoresCount / guessesCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val scoresPerGuess = scoresCount / guessesCount\n\
    \        val scoresPerGuess = scoresCount / guessesCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val scoresPerGuess = scoresCount / guessesCount\n\
    \        val scoresPerGuess = scoresCount / guessesCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val scoresPerGuess = scoresCount / guessesCount\n\
    \        val scoresPerGuess = scoresCount / guessesCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val scoresPerGuess = scoresCount / guessesCount\n\
    \        val scoresPerGuess = scoresCount / guessesCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val scoresPerGuess = scoresCount / guessesCount\n\
    \        val scoresPerGuess = scoresCount / guessesCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val scoresPerGuess = scoresCount / guessesCount\n\
    \        val scoresPerGuess = scoresCount / guessesCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val scoresPerGuess = scoresCount / guessesCount\n\
    \        val scoresPerGuess = scoresCount / guessesCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val scoresPerGuess = scoresCount / guessesCount\n\
    \        val scoresPerGuess = scoresCount / guessesCount\n        val scoresPerGuess\
    \ = scoresCount / guessesCount\n        val scoresPerGuess = scoresCount / guessesCount\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpae51fcca.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mguessesPerGuess\e[0m = guessesCount\
    \ / guessesCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesPerGuess is already defined as \e[33mvalue\e[0m \e\
    [35mguessesPerGuess\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpae51fcca.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mscoresPerGuess\e[0m = scoresCount\
    \ / guessesCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mscoresPerGuess is already defined as \e[33mvalue\e[0m \e[35mscoresPerGuess\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpae51fcca.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mscoresPerGuess\e[0m = scoresCount /\
    \ guessesCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mscoresPerGuess is already defined as \e[33mvalue\e[0m \e[35mscoresPerGuess\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpae51fcca.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mscoresPerGuess\e[0m = scoresCount /\
    \ guessesCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mscoresPerGuess is already defined as \e[33mvalue\e[0m \e[35mscoresPerGuess\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpae51fcca.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mscoresPerGuess\e[0m ="
  stdout: ''
  timestamp: 1659797687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreKeys = gameScoreMap.keySet\n        val guessScoreKeys = guessScoreMap.keySet\n\
    \        val gameScoreValues = gameScoreMap.values.toList\n        val guessScoreValues\
    \ = guessScoreMap.values.toList\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeyList = gameScoreKeys.toList\n        val guessScoreKeyList\
    \ = guessScoreKeys.toList\n        val gameScoreValueList = gameScoreValues.toList\n\
    \        val guessScoreValueList = guessScoreValues.toList\n        val gameScoreKeySetList\
    \ = gameScoreKeySet.toList\n        val guessScoreKeySetList = guessScoreKeySet.toList\n\
    \        val gameScoreValueSetList = gameScoreValueSet.toList\n        val guessScoreValueSetList\
    \ = guessScoreValueSet.toList\n        val gameScoreKeySetSetList = gameScoreKeySetList.toSet.toList\n\
    \        val guessScoreKeySetSetList = guessScoreKeySetList.toSet.toList\n   \
    \     val gameScoreValueSetSetList = gameScoreValueSetList.toSet.toList\n    \
    \    val guessScoreValueSetSetList = guessScoreValueSetList.toSet.toList\n   \
    \     val gameScoreKeySetSetSetList = gameScoreKeySetSetList.toSet.toList\n  \
    \      val guessScoreKeySetSetList = guessScoreKeySetSetList.toSet.toList\n  \
    \      val gameScoreValueSetSetList = gameScoreValueSetSetList.toSet.toList\n\
    \        val guessScoreValueSetSetList = guessScoreValueSetSetList.toSet.toList\n\
    \        val gameScoreKeySetSetSetList = gameScoreKeySetSetSetList.toSet.toList\n\
    \        val guessScoreKeySetSetList = guessScoreKeySetSetList.toSet.toList\n\
    \        val gameScoreValueSetSetList = gameScoreValueSetSetList.toSet.toList\n\
    \        val guessScoreValueSetSetList = guessScoreValueSetSetList.toSet.toList\n\
    \        val gameScoreKeySetSetSetList = game\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeghbmy7p.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mguessScoreKeySetSetList\e\
    [0m = guessScoreKeySetSetList.toSet.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreKeySetSetList is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreKeySetSetList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeghbmy7p.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mgameScoreValueSetSetList\e\
    [0m = gameScoreValueSetSetList.toSet.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreValueSetSetList is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreValueSetSetList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeghbmy7p.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mguessScoreValueSetSetList\e\
    [0m = guessScoreValueSetSetList.toSet.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreValueSetSetList is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreValueSetSetList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeghbmy7p.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeySetSetSetList\e\
    [0m = gameScoreKeySetSetSetList.toSet.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeySetSetSetList is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreKeySetSetSetList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mN"
  stdout: ''
  timestamp: 1659797694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guess.zip(game).map { case\
    \ (guess, score) => guess -> score }.toMap\n        val guessesWithScoreKeys =\
    \ guessesWithScores.keys.toSet\n        val gameWithScoreKeys = gameScores.keys.toSet\n\
    \        val gameWithScores = gameScores.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessesWithScoreKeysAndGameWithScoreKeys = guessesWithScoreKeys\
    \ ++ gameWithScoreKeys\n        val guessesWithScoreKeysAndGameWithScores = guessesWithScoreKeysAndGameWithScoreKeys.map\
    \ { case (guess, gameScore) =>\n            val gameScoreIndex = gameWithScores.get(gameScore)\n\
    \            val guessesScoreIndex = guessesWithScores.get(guess)\n          \
    \  val gameScoreDiff = gameScoreIndex - guessesScoreIndex\n            val guessesScoreDiff\
    \ = gameScoreIndex - gameWithScores.get(gameScore)\n            val gameScoreDiffAbs\
    \ = math.abs(gameScoreDiff)\n            val guessesScoreDiffAbs = math.abs(guessesScoreDiff)\n\
    \            val gameScoreDiffAbsOrZero = gameScoreDiffAbs.orElse(0)\n       \
    \     val guessesScoreDiffAbsOrZero = guessesScoreDiffAbs.orElse(0)\n        \
    \    (gameScoreDiffAbsOrZero, guessesScoreDiffAbsOrZero)\n        }\n        val\
    \ guessesWithScoreKeysAndGameWithScoresAndGameWithScoreKeysAndGameWithScores =\
    \ guessesWithScoreKeysAndGameWithScores.map { case (gameScoreDiffAbsOrZero, guessesScoreDiffAbsOrZero)\
    \ =>\n            val gameScoreDiff = gameScoreDiffAbsOrZero.toLong\n        \
    \    val guessesScoreDiff = guessesScoreDiffAbsOrZero.toLong\n            val\
    \ gameScoreDiffAbs = math.abs(gameScoreDiff)\n            val guessesScoreDiffAbs\
    \ = math.abs(guessesScoreDiff)\n            val gameScoreDiffAbsOrZero = gameScoreDiffAbs.orElse(0)\n\
    \            val guessesScoreDiffAbsOrZero = guessesScoreDiffAbs.orElse(0)\n \
    \           (gameScoreDiffAbsOr\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7tqz04id.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7tqz04id.scala:52:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp7tqz04id.scala:25:52 --------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m            \e[33mval\e[0m \e[36mgameScoreIndex\e[0m = gameWithScores.get(gameScore)\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    (gameScore\
    \ : Any)\n\e[31m   |\e[0m                                             Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7tqz04id.scala:26:58\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e\
    [36mguessesScoreIndex\e[0m = guessesWithScores.get(guess)\n\e[31m\e[31m   |\e\
    [0m                                                          ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                 Found:    (guess :\
    \ Any)\n\e[31m   |\e[0m                                                 Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7tqz04id.scala:27:47\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m\
    \ \e[36mgameScoreDiff\e[0m = gameScoreIndex - guessesScoreIndex\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue - is not a member of Option[Int], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e["
  stdout: ''
  timestamp: 1659797697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessesWithScores = guess.zip(game).map { case (guess,\
    \ score) => guess -> score }.toMap\n        val guessesWithScoreAndIndex = guess.zip(game).map\
    \ { case (guess, score) => guess -> score -> index }.toMap\n        val guessesWithScoreAndIndexAndGuess\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> guess\
    \ }.toMap\n        val guessesWithScoreAndIndexAndGuessAndGuess = guess.zip(game).map\
    \ { case (guess, score) => guess -> score -> index -> guess -> guess }.toMap\n\
    \        val guessesWithScoreAndIndexAndGuessAndGuessAndGuess = guess.zip(game).map\
    \ { case (guess, score) => guess -> score -> index -> guess -> guess -> guess\
    \ }.toMap\n        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> guess\
    \ -> guess -> guess -> guess }.toMap\n        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> guess\
    \ -> guess -> guess -> guess -> guess }.toMap\n        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> guess\
    \ -> guess -> guess -> guess -> guess -> guess }.toMap\n        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index -> guess\
    \ -> guess -> guess -> guess -> guess -> guess }.toMap\n        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpre1e6r5g.scala:38:0 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpre1e6r5g.scala:20:102\
    \ -----------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithScoreAndIndex\e[0m = guess.zip(game).map { \e[33mcase\e[0m (guess,\
    \ score) => guess -> score -> index }.toMap\n\e[31m\e[31m   |\e[0m           \
    \                                                                            \
    \               ^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \                      Not found: index\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpre1e6r5g.scala:21:110 -----------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreAndIndexAndGuess\e\
    [0m = guess.zip(game).map { \e[33mcase\e[0m (guess, score) => guess -> score ->\
    \ index -> guess }.toMap\n\e[31m\e[31m   |\e[0m                              \
    \                                                                            \
    \    ^^^^^\e[0m\n\e[31m   |\e[0m                                             \
    \           Not found: index\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpre1e6r5g.scala:22:118 -----------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mguessesWithScoreAndIndexAndGuessAndGuess\e[0m\
    \ = guess.zip(game).map { \e[33mcase\e[0m (guess, score) => guess -> score ->\
    \ index -> guess -> guess }.toMap\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \                     ^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \                            Not found: index\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpre1e6r5g.scala:23:126 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m      "
  stdout: ''
  timestamp: 1659797696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScores\
    \ = gameScores.toList\n        val guessScores = guessScores.toList\n        val\
    \ gameScoreCount = gameScores.size\n        val guessScoreCount = guessScores.size\n\
    \        val gameScoreDiff = gameScoreCount - guessScoreCount\n        val guessScoreDiff\
    \ = guessScoreCount - gameScoreCount\n        val gameScoreDiffList = gameScoreDiff.toList.map(x\
    \ => x.toLong)\n        val guessScoreDiffList = guessScoreDiff.toList.map(x =>\
    \ x.toLong)\n        val gameScoreDiffList2 = gameScoreDiffList.zip(guessScoreDiffList).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList3 = gameScoreDiffList2.toList\n        val guessScoreDiffList3\
    \ = guessScoreDiffList2.toList\n        val gameScoreDiffList4 = gameScoreDiffList3.zip(guessScoreDiffList3).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList5 = gameScoreDiffList4.toList\n        val guessScoreDiffList5\
    \ = guessScoreDiffList4.toList\n        val gameScoreDiffList6 = gameScoreDiffList5.zip(guessScoreDiffList5).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList7 = gameScoreDiffList6.toList\n        val guessScoreDiffList7\
    \ = guessScoreDiffList6.toList\n        val gameScoreDiffList8 = gameScoreDiffList7.zip(guessScoreDiffList7).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList9 = gameScoreDiffList8.toList\n        val guessScoreDiffList9\
    \ = guessScoreDiffList8.toList\n        val gameScoreDiffList10 = gameScoreDiffList9.zip(guessScoreDiffList9).map\
    \ { case (gameScoreDiff, guessScoreDiff) => gameScoreDiff - guessScoreDiff }\n\
    \        val gameScoreDiffList11 = gameScoreDiffList10.toList\n        val guessScoreDiffList11\
    \ = guessScoreDiffList10.toList\n        val gameScoreDiffList12 = game\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp88xpl2by.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp88xpl2by.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mguessScores\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScores is already defined as \e[33mvalue\e[0m \e[35mguessScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp88xpl2by.scala:25:46 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffList\e[0m = gameScoreDiff.toList.map(\e\
    [36mx\e[0m => x.toLong)\n\e[31m\e[31m   |\e[0m                               \
    \ ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m value toList is not a member of Int\
    \ - did you mean gameScoreDiff.toInt?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp88xpl2by.scala:26:48 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        \e[33mval\e[0m \e[36mguessScoreDiffList\e[0m = guessScoreDiff.toList.map(\e\
    [36mx\e[0m => x.toLong)\n\e[31m\e[31m   |\e[0m                               \
    \  ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toList is not a member of\
    \ Int - did you mean guessScoreDiff.toInt?\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp88xpl2by.scala:29:34 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m        \e[33mval\e[0m \e[36mguessScoreDiffList3\e[0m = guessScoreDiffList2.toList\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  Not found: guessScoreDiffList2\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling wit"
  stdout: ''
  timestamp: 1659797695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.filter(_._1 == _).map(_._2)\n        val guessesScores = guess.zipWithIndex.filter(_._1\
    \ == _).map(_._2)\n        val guessesWithScores = guessesScores.zip(gameScores)\n\
    \        val guessesWithScoresSorted = guessesWithScores.sortBy(_._1).reverse\n\
    \        val guessesWithScoresSortedWithIndex = guessesWithScoresSorted.zipWithIndex\n\
    \        val guessesWithScoresSortedWithIndexSorted = guessesWithScoresSortedWithIndex.sortBy(_._1).reverse\n\
    \        val guessesWithScoresSortedWithIndexSortedWithIndex = guessesWithScoresSortedWithIndexSortedWithIndex.sortBy(_._2).reverse\n\
    \        val guessesWithScoresSortedWithIndexSortedWithIndexSorted = guessesWithScoresSortedWithIndexSortedWithIndexSorted.sortBy(_._2).reverse\n\
    \        val guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndex =\
    \ guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._2).reverse\n\
    \        val guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSorted.sortBy(_._2).reverse\n\
    \        val guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._2).reverse\n\
    \        val guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted.sortBy(_._2).reverse\n\
    \        val guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._2).reverse\n\
    \        val guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted.sortBy(_._2).reverse\n\
    \        val guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe8pbfg16.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = game.zipWithIndex.filter(_._1\
    \ == _).map(_._2)\n\e[31m\e[31m   |\e[0m                                     \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \   value _1 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe8pbfg16.scala:18:56\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesScores\e[0m = guess.zipWithIndex.filter(_._1 == _).map(_._2)\n\e[31m\e\
    [31m   |\e[0m                                                      ^^^^\e[0m\n\
    \e[31m   |\e[0m                                        value _1 is not a member\
    \ of Long\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpe8pbfg16.scala:23:62 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoresSortedWithIndexSortedWithIndex\e\
    [0m = guessesWithScoresSortedWithIndexSortedWithIndex.sortBy(_._2).reverse\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mguessesWithScoresSortedWithIndexSortedWithIndex\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpe8pbfg16.scala:24:68\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithScoresSortedWithIndexSortedWithIndexSorted\e[0m = guessesWithScoresSortedWithIndexSortedWithIndexSorted.sortBy(_._2).reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mguessesWithScoresSortedWithIndexSortedWithIndexSorted\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpe8pbfg16.scala:25:77\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithScoresSortedWithIndexSortedWithIndexSortedWithIndex\e[0m ="
  stdout: ''
  timestamp: 1659797697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList =\
    \ new mutable.ListBuffer[Long]()\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = new\
    \ mutable.ListBuffer[Long]()\n        val guessScoreList = new mutable.ListBuffer[Long]()\n\
    \        gameScoreMap.foreach { case (score, index) =>\n            val guessScore\
    \ = guessScoreMap.get(index)\n            if (guessScore == null) {\n        \
    \        gameScoreList.add(score)\n            } else {\n                val gameScore\
    \ = gameScoreMap.get(index)\n                val diff = abs(guessScore - gameScore)\n\
    \                gameScoreList.add(gameScore)\n                guessScoreList.add(guessScore)\n\
    \                gameScoreList.add(diff)\n                guessScoreList.add(diff)\n\
    \            }\n        }\n        gameScoreList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7v6zhk8q.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7v6zhk8q.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7v6zhk8q.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7v6zhk8q.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmp7v6zhk8q.scala:19:43\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScore"
  stdout: ''
  timestamp: 1659797696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < guessesCount) {\n            val guess\
    \ = guesses(i)\n            val score = scores(i)\n            val difference\
    \ = abs(guess - score)\n            if (difference == 0) {\n                result.add(i)\n\
    \            } else {\n                result.add(difference)\n            }\n\
    \            i += 1\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpllsupc_d.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpllsupc_d.scala:21:25 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScore\
    \ = gameScores.sum\n        val guessScore = guessScores.sum\n        val gameScoreDiff\
    \ = gameScore - guessScore\n        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n\
    \        val gameScoreDiffAbsArray = gameScoreDiffAbs.toArray.map(_.toLong)\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArray.length\n    \
    \    val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAb\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmput3l0h1_.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsArrayLength\e\
    [0m = gameScoreDiffAbsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmput3l0h1_.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsArrayLength\e\
    [0m = gameScoreDiffAbsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmput3l0h1_.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsArrayLength\e\
    [0m = gameScoreDiffAbsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmput3l0h1_.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsArrayLength\e\
    [0m = gameScoreDiffAbsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all b"
  stdout: ''
  timestamp: 1659797696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => score -> gameScores(index) }.toMap\n        val guessesWithoutScores\
    \ = guessesScores.map { case (score, index) => gameScores(index) }.toMap\n   \
    \     val guessesWithoutScores = guessesWithoutScores.map { case (score, index)\
    \ => gameScores(index) }.toMap\n        val guessesWithScoreAndIndex = guessesWithScores.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithoutScoreAndIndex\
    \ = guessesWithoutScores.map { case (score, index) => index -> score }.toMap\n\
    \        val guessesWithoutScoreAndIndex = guessesWithoutScores.map { case (score,\
    \ index) => index -> score }.toMap\n        val guessesWithScoreAndIndexAndScore\
    \ = guessesWithScoreAndIndex.map { case (score, index) => index -> score }.toMap\n\
    \        val guessesWithoutScoreAndIndexAndScore = guessesWithoutScoreAndIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithoutScoreAndIndexAndScore\
    \ = guessesWithoutScoreAndIndex.map { case (score, index) => index -> score }.toMap\n\
    \        val guessesWithScoreAndIndexAndScoreAndIndex = guessesWithScoreAndIndexAndScore.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithoutScoreAndIndexAndScoreAndIndex\
    \ = guessesWithoutScoreAndIndexAndScore.map { case (score, index) => index ->\
    \ score }.toMap\n        val guessesWithoutScoreAndIndexAndScoreAndIndex = guessesWithoutScoreAndIndexAndScore.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScore\
    \ = guessesWithScoreAndIndexAndScoreAndIndex.map { case (score, index) => index\
    \ -> score }.toMap\n        val guessesWithoutScoreAndIndexAndScoreAndIndexAndScore\
    \ = guessesWithoutScoreAndIndexAndScoreAndIndex.map { case (score, index) => index\
    \ -> score }.toMap\n        val guessesWithout\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpio3zdesp.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpio3zdesp.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithoutScores\e[0m = guessesWithoutScores.map { \e[33mcase\e[0m\
    \ (score, index) => gameScores(index) }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithoutScores is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessesWithoutScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpio3zdesp.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mguessesWithoutScoreAndIndex\e\
    [0m = guessesWithoutScores.map { \e[33mcase\e[0m (score, index) => index -> score\
    \ }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithoutScoreAndIndex is already defined as \e[33mvalue\e\
    [0m \e[35mguessesWithoutScoreAndIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpio3zdesp.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mguessesWithoutScoreAndIndexAndScore\e\
    [0m = guessesWithoutScoreAndIndex.map { \e[33mcase\e[0m (score, index) => index\
    \ -> score }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithoutScoreAndIndexAndScore is already defined as\
    \ \e[33mvalue\e[0m \e[35mguessesWithoutScoreAndIndexAndScore\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in "
  stdout: ''
  timestamp: 1659797697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guesses_count = guesses.size\n       \
    \ val scores_count = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < guesses_count) {\n            val guess\
    \ = guesses(i)\n            val score = scores(i)\n            val guessed_correct\
    \ = guess == score\n            val guessed_wrong = !(guessed_correct)\n     \
    \       val diff = if (guessed_correct) 0 else abs(guess - score)\n          \
    \  val guessed_wrong_count = if (guessed_wrong) 1 else 0\n            val guessed_correct_count\
    \ = if (guessed_correct) 1 else 0\n            val guessed_wrong_count = if (guessed_wrong)\
    \ 1 else 0\n            val guessed_correct_count = if (guessed_correct) 1 else\
    \ 0\n            val guessed_wrong_count = if (guessed_wrong) 1 else 0\n     \
    \       val guessed_correct_count = if (guessed_correct) 1 else 0\n          \
    \  val guessed_wrong_count = if (guessed_wrong) 1 else 0\n            val guessed_correct_count\
    \ = if (guessed_correct) 1 else 0\n            val guessed_wrong_count = if (guessed_wrong)\
    \ 1 else 0\n            val guessed_correct_count = if (guessed_correct) 1 else\
    \ 0\n            val guessed_wrong_count = if (guessed_wrong) 1 else 0\n     \
    \       val guessed_correct_count = if (guessed_correct) 1 else 0\n          \
    \  val guessed_wrong_count = if (guessed_wrong) 1 else 0\n            val guessed_correct_count\
    \ = if (guessed_correct) 1 else 0\n            val guessed_wrong_count = if (guessed_wrong)\
    \ 1 else 0\n            val guessed_correct_count = if (guessed_correct) 1 else\
    \ 0\n            val guessed_wrong_count = if (guessed_wrong) 1 else 0\n     \
    \       val guessed_correct_count = if (guessed_correct) 1 else 0\n          \
    \  val guessed_wrong_count = if (guessed_wrong) 1 else 0\n            val guessed_correct_count\
    \ = if (guessed_correct) 1 else 0\n            val guessed_wrong_count = if (guessed_wrong)\
    \ 1 else 0\n            val guessed_correct_count = if (guessed_correct) 1 else\
    \ 0\n            val guessed_wrong_count = if (guessed_wrong) 1 else 0\n     \
    \       val guessed_correct_count = if (guessed_correct) 1 else 0\n          \
    \  val guessed_wrong_count = if (guessed_wrong) 1 else 0\n            val guessed_correct_count\
    \ = if (guessed_correct) 1 else 0\n            val guessed_wrong_count = if (guessed_wrong)\
    \ 1 else 0\n            val guessed_correct_count = if (guessed_correct) 1 else\
    \ 0\n            val gues\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyw6_laix.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyw6_laix.scala:67:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m67 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpyw6_laix.scala:17:22 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m                   \
    \   Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyw6_laix.scala:21:25\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpyw6_laix.scala:31:16 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m            \e[33mval\e[0m \e[36mguessed_wrong_count\e[0m = \e[33mif\e\
    [0m (guessed_wrong) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mguessed_wrong_count is already defined as \e[33mvalue\e[0m \e[35mguessed_wrong_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyw6_laix.scala:32:16 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m            \e[33mval\e[0m \e[36mguessed_correct_count\e[0m = \e\
    [33mif\e[0m (guessed_correct) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessed_correct_count is already defined as \e[33mvalue\e["
  stdout: ''
  timestamp: 1659797697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val gameScore = gameScores.map { case (score, index)\
    \ => score }\n        val guessScore = guessScores.map { case (score, index) =>\
    \ score }\n        val gameScores = gameScores.map { case (score, index) => gameScore(index)\
    \ - guessScore(index) }\n        val gameScore = gameScores.sum\n        val gameScores\
    \ = gameScores.map { case score => if (score < 0) score else -score }\n      \
    \  gameScores.toList\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7qehgp12.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.map\
    \ { \e[33mcase\e[0m (score, index) => gameScore(index) - guessScore(index) }\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7qehgp12.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mgameScore\e[0m = gameScores.sum\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScore\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScore\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7qehgp12.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScores\e[0m = gameScores.map { \e[33mcase\e[0m score => \e[33mif\e\
    [0m (score < \e[31m0\e[0m) score \e[33melse\e[0m -score }\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp7qehgp12.scala:24:19 --------------------\e[0m\e[0m\n\
    \e[31m24 |\e[0m        gameScores.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e[0m\e[1m\e[31m)\e[0m]\n\e[31m   |\e[0m   \
    \     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => index -> score }.toMap\n        val guessesWithIndexes = guessesScores.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithScoreAndIndex\
    \ = guessesScores.map { case (score, index) => index -> score -> index }.toMap\n\
    \        val guessesWithIndexesAndScores = guessesScores.map { case (score, index)\
    \ => index -> score -> index }.toMap\n        val guessesWithScoreAndIndexes =\
    \ guessesScores.map { case (score, index) => index -> score -> index }.toMap\n\
    \        val guessesWithIndexesAndScoresAndIndex = guessesScores.map { case (score,\
    \ index) => index -> score -> index }.toMap\n        val guessesWithScoreAndIndexesAndScores\
    \ = guessesScores.map { case (score, index) => index -> score -> index }.toMap\n\
    \        val guessesWithIndexesAndScoresAndIndexes = guessesScores.map { case\
    \ (score, index) => index -> score -> index }.toMap\n        val guessesWithScoreAndIndexesAndScoresAndIndex\
    \ = guessesScores.map { case (score, index) => index -> score -> index }.toMap\n\
    \        val guessesWithScoreAndIndexesAndScoresAndIndexesAndScores = guessesScores.map\
    \ { case (score, index) => index -> score -> index }.toMap\n        val guessesWithIndexesAndScoresAndIndexesAndScores\
    \ = guessesScores.map { case (score, index) => index -> score -> index }.toMap\n\
    \        val guessesWithScoreAndIndexesAndScoresAndIndexesAndIndexesAndScores\
    \ = guessesScores.map { case (score, index) => index -> score -> index }.toMap\n\
    \        val guessesWithIndexesAndScoresAndIndexesAndIndexesAndIndexesAndScores\
    \ = guessesScores.map { case (score, index) => index -> score -> index }.toMap\n\
    \        val guessesWithScoreAndIndexesAndScoresAndIndexesAndIndexesAndIndexesAndIndexesAndScores\
    \ = guessesScores.map { case (score, index) => index \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkl921ocy.scala:42:0 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- Error: /tmp/tmpkl921ocy.scala:20:89 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexes\e[0m\
    \ = guessesScores.map { \e[33mcase\e[0m (score, index) => index }.toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \            Cannot prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \                                        where:    K is a type variable\n\e[31m\
    \   |\e[0m                                                  V is a type variable\n\
    \e[31m   |\e[0m                                        .\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpkl921ocy.scala:41:1 ---------------------\e[0m\e\
    [0m\n\e[31m41 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:  \
    \  Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpkl921ocy.scala:34:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m34 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659797699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.map(x\
    \ => Math.abs(x - game))\n        val scores = game.map(x => Math.abs(x - guess))\n\
    \        guesses.zip(scores).map(x => if (x._1 == x._2) 0 else x._1 - x._2)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmptp2g80r5.scala:17:48 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = guess.map(\e\
    [36mx\e[0m => Math.abs(x - game))\n\e[31m\e[31m   |\e[0m                     \
    \                         ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((game : List[Long]))\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmptp2g80r5.scala:18:46 -----------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        \e[33mval\e[0m \e[36mscores\e[0m = game.map(\e[36mx\e[0m\
    \ => Math.abs(x - guess))\n\e[31m\e[31m   |\e[0m                             \
    \               ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((guess : List[Long]))\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmptp2g80r5.scala:19:67 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        guesses.zip(scores).map(\e[36mx\e[0m => \e[33mif\e[0m (x._1\
    \ == x._2) \e[31m0\e[0m \e[33melse\e[0m x._1 - x._2)\n\e[31m\e[31m   |\e[0m  \
    \                                                            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue - is not a member of Nothing, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e"
  stdout: ''
  timestamp: 1659797699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessesWithScores = guess.zip(game).map { case (guess,\
    \ score) => guess -> score }.toMap\n        val guessesWithScores = guess.zip(game).map\
    \ { case (guess, score) => guess -> score }.toMap\n        val guessesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> score }.toMap\n    \
    \    val guessesWithScores = guess.zip(game).map { case (guess, score) => guess\
    \ -> score }.toMap\n        val guessesWithScores = guess.zip(game).map { case\
    \ (guess, score) => guess -> score }.toMap\n        val guessesWithScores = guess.zip(game).map\
    \ { case (guess, score) => guess -> score }.toMap\n        val guessesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> score }.toMap\n    \
    \    val guessesWithScores = guess.zip(game).map { case (guess, score) => guess\
    \ -> score }.toMap\n        val guessesWithScores = guess.zip(game).map { case\
    \ (guess, score) => guess -> score }.toMap\n        val guessesWithScores = guess.zip(game).map\
    \ { case (guess, score) => guess -> score }.toMap\n        val guessesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> score }.toMap\n    \
    \    val guessesWithScores = guess.zip(game).map { case (guess, score) => guess\
    \ -> score }.toMap\n        val guessesWithScores = guess.zip(game).map { case\
    \ (guess, score) => guess -> score }.toMap\n        val guessesWithScores = guess.zip(game).map\
    \ { case (guess, score) => guess -> score }.toMap\n        val guessesWithScores\
    \ = guess.zip(game).map { case (guess, score) => guess -> score }.toMap\n    \
    \    val guessesWithScores = guess.zip(game).map { case (guess, score) => guess\
    \ -> score }.toMap\n        val guessesWithScores = guess.zip(game).map { case\
    \ (guess, score) => guess -> score }.toMap\n        val guesses\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiny3fwu6.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiny3fwu6.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithScores\e[0m = guess.zip(game).map { \e[33mcase\e[0m (guess,\
    \ score) => guess -> score }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScores is already defined as \e[33mvalue\e[0m \e\
    [35mguessesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiny3fwu6.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScores\e[0m =\
    \ guess.zip(game).map { \e[33mcase\e[0m (guess, score) => guess -> score }.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScores is already defined as \e[33mvalue\e[0m \e\
    [35mguessesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiny3fwu6.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScores\e[0m =\
    \ guess.zip(game).map { \e[33mcase\e[0m (guess, score) => guess -> score }.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScores is already defined as \e[33mvalue\e[0m \e\
    [35mguessesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpiny3fwu6.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e["
  stdout: ''
  timestamp: 1659797699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score == 0) 0 else abs(score - gameScore) }\n \
    \       gameScores.toList\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdw91q_vm.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => \e[33mif\e[0m (score == \e[31m0\e[0m) \e\
    [31m0\e[0m \e[33melse\e[0m abs(score - gameScore) }\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659797691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameSet = game.distinct\n\
    \        val guessSet = guess.distinct\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7h1f664z.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameSetSize\e[0m = gameSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7h1f664z.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSet.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mguessSetSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mguessSetSize\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7h1f664z.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameSetSize\e[0m = gameSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7h1f664z.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSet.size\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mguessSetSize is already defined as \e[33mvalue\e[0m \e[35mguessSetSize\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7h1f664z.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mgameSetSize\e[0m = gameSet.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameSetSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e[0m"
  stdout: ''
  timestamp: 1659797698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.toSet\n        val guessesScoreSet = guessesScoreList.toSet\n\
    \        val gameScoreList = gameScoreList.filter(_ > guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ > gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ < guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ < gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ == guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ == gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ != guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ != gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ < guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ < gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ > guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ > gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ == guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ == gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ != guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ != gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ < guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ < gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ > guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ > gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ == guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ == gameScoreList.size)\n\
    \        val game\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprfx09ru8.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprfx09ru8.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreList\e[0m = gameScoreList.filter(_ > guessesScoreList.size)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprfx09ru8.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreList\e[0m = guessesScoreList.filter(_\
    \ > gameScoreList.size)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreList is already defined as \e[33mvalue\e[0m \e\
    [35mguessesScoreList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprfx09ru8.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreList.filter(_\
    \ < guessesScoreList.size)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprfx09ru8.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreList\e[0m = guessesScoreList.filter(_\
    \ < gameScoreList.size)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   "
  stdout: ''
  timestamp: 1659797701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < guessesCount) {\n            val guess\
    \ = guesses(i)\n            val score = scores(i)\n            val diff = abs(guess\
    \ - score)\n            if (diff > 0) {\n                result.add(diff)\n  \
    \          }\n            i += 1\n        }\n        result.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpppgt4n4t.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpppgt4n4t.scala:21:25 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guessesCount\
    \ = guess.size\n        val gameCount = game.size\n        val guessesToGuess\
    \ = guessesCount / gameCount\n        val guessesToGame = guessesCount % gameCount\n\
    \        val gameToGuess = gameCount / guessesCount\n        val gameToGame =\
    \ gameCount % guessesCount\n        val gameToGuessesCount = gameToGuess * guessesCount\n\
    \        val gameToGameCount = gameToGame * gameCount\n        val guessesToGuessesCount\
    \ = guessesToGuess * guessesCount\n        val guessesToGameCount = guessesToGame\
    \ * gameCount\n        val guessesToGuessesToGameCount = guessesToGuessesCount\
    \ * gameCount\n        val guessesToGuessesToGameToGuessesCount = guessesToGuessesToGameCount\
    \ * guessesCount\n        val guessesToGuessesToGameToGameCount = guessesToGuessesToGameToGuessesCount\
    \ * gameCount\n        val guessesToGuessesToGameToGameToGuessesCount = guessesToGuessesToGameToGameCount\
    \ * guessesCount\n        val guessesToGuessesToGameToGameToGameCount = guessesToGuessesToGameToGameToGuessesCount\
    \ * gameCount\n        val guessesToGuessesToGameToGameToGameToGuessesCount =\
    \ guessesToGuessesToGameToGameToGuessesCount * guessesCount\n        val guessesToGuessesToGameToGameToGameToGameCount\
    \ = guessesToGuessesToGameToGameToGameToGuessesCount * gameCount\n        val\
    \ guessesToGuessesToGameToGameToGameToGameToGuessesCount = guessesToGuessesToGameToGameToGameToGuessesCount\
    \ * guessesCount\n        val guessesToGuessesToGameToGameToGameToGameToGuessesToGameCount\
    \ = guessesToGuessesToGameToGameToGameToGuessesToGameCount * guessesCount\n  \
    \      val guessesToGuessesToGameToGameToGameToGameToGuessesToGameToGuessesCount\
    \ = guessesToGuessesToGameToGameToGameToGuessesToGameToGuessesCount * guessesCount\n\
    \        val guesses\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkjdzmwp4.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkjdzmwp4.scala:35:75\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesToGuessesToGameToGameToGameToGameToGuessesToGameCount\e[0m = guessesToGuessesToGameToGameToGameToGuessesToGameCount\
    \ * guessesCount\n\e[31m\e[31m   |\e[0m                                      \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m       Not found: guessesToGuessesToGameToGameToGameToGuessesToGameCount\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkjdzmwp4.scala:36:84\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesToGuessesToGameToGameToGameToGameToGuessesToGameToGuessesCount\e[0m\
    \ = guessesToGuessesToGameToGameToGameToGuessesToGameToGuessesCount * guessesCount\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: guessesToGuessesToGameToGameToGameToGuessesToGameToGuessesCount\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkjdzmwp4.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < guessesCount) {\n            val guess\
    \ = guesses(i)\n            val score = scores(i)\n            val diff = Math.abs(guess\
    \ - score)\n            if (diff == score) result.add(i)\n            else if\
    \ (diff > score) result.add(i)\n            else result.add(i) += diff\n     \
    \       i += 1\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppjztsin6.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmppjztsin6.scala:21:25 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val results = new mutable.ListBuffer[Long]()\n\
    \        val guessesRemaining = guessesCount - 1\n        val scoresRemaining\
    \ = scoresCount - 1\n        val guessesRemainingInScore = guessesRemaining /\
    \ scoresCount\n        val scoresRemainingInScore = scoresRemaining / guessesCount\n\
    \        val guessesRemainingInScore2 = guessesRemainingInScore * scoresCount\n\
    \        val scoresRemainingInScore2 = scoresRemainingInScore * guessesCount\n\
    \        val guessesRemainingInScore3 = guessesRemainingInScore2 * scoresCount\n\
    \        val scoresRemainingInScore3 = scoresRemainingInScore2 * guessesCount\n\
    \        val guessesRemainingInScore4 = guessesRemainingInScore3 * scoresCount\n\
    \        val scoresRemainingInScore4 = scoresRemainingInScore3 * guessesCount\n\
    \        val guessesRemainingInScore5 = guessesRemainingInScore4 * scoresCount\n\
    \        val scoresRemainingInScore5 = scoresRemainingInScore4 * guessesCount\n\
    \        val guessesRemainingInScore6 = guessesRemainingInScore5 * scoresCount\n\
    \        val scoresRemainingInScore6 = scoresRemainingInScore5 * guessesCount\n\
    \        val guessesRemainingInScore7 = guessesRemainingInScore6 * scoresCount\n\
    \        val scoresRemainingInScore7 = scoresRemainingInScore6 * guessesCount\n\
    \        val guessesRemainingInScore8 = guessesRemainingInScore7 * scoresCount\n\
    \        val scoresRemainingInScore8 = scoresRemainingInScore7 * guessesCount\n\
    \        val guessesRemainingInScore9 = guessesRemainingInScore8 * scoresCount\n\
    \        val scoresRemainingInScore9 = scoresRemainingInScore8 * guessesCount\n\
    \        val guessesRemainingInScore10 = guessesRemainingInScore9 * scoresCount\n\
    \        val scoresRemainingInScore10 = scoresRemainingInScore9 * guessesCount\n\
    \        val guessesRemainingInScore11 = guessesRemainingInScore10 * scoresCount\n\
    \        val scoresRemainingInScore11 = scoresRemainingInScore10 * guessesCount\n\
    \        val guessesRemainingInScore12 = guessesRemainingInScore11 * scoresCount\n\
    \        val scoresRemainingInScore12 = scoresRemainingInScore11 * guessesCount\n\
    \        val gues\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpecwypg0u.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpecwypg0u.scala:19:35\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesCount\e[0m = guesses.size\n\e[31m\e[31m   |\e[0m                  \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue size is not a member of Null,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.buffer\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsJavaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpecwypg0u.scala:21:26\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresults\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpecwypg0u.scala:49:5 ---------------------\e[0m\e\
    [0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling w"
  stdout: ''
  timestamp: 1659797713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toList\n\
    \        val scores = game.toList\n        val guessesCount = guesses.size\n \
    \       val scoresCount = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val guessesRemaining = guessesCount - 1\n        val scoresRemaining\
    \ = scoresCount - 1\n        val guessesTaken = guessesRemaining\n        val\
    \ scoresTaken = scoresRemaining\n        val guessesTakenIncorrect = guessesTaken\n\
    \        val scoresTakenIncorrect = scoresTaken\n        val guessesTakenCorrect\
    \ = guessesTaken\n        val scoresTakenCorrect = scoresTaken\n        val guessesTakenIncorrectCorrect\
    \ = guessesTakenIncorrect\n        val scoresTakenIncorrectCorrect = scoresTakenIncorrect\n\
    \        val guessesTakenCorrectCorrect = guessesTakenCorrect\n        val scoresTakenCorrectCorrect\
    \ = scoresTakenCorrect\n        val guessesTakenIncorrectIncorrect = guessesTakenIncorrect\n\
    \        val scoresTakenIncorrectIncorrect = scoresTakenIncorrect\n        val\
    \ guessesTakenCorrectIncorrect = guessesTakenCorrectIncorrect\n        val scoresTakenCorrectIncorrect\
    \ = scoresTakenCorrectIncorrect\n        val guessesTakenIncorrectCorrectCorrect\
    \ = guessesTakenIncorrectCorrect\n        val scoresTakenIncorrectCorrectCorrect\
    \ = scoresTakenIncorrectCorrectCorrect\n        val guessesTakenCorrectCorrectCorrect\
    \ = guessesTakenCorrectCorrect\n        val scoresTakenCorrectCorrectCorrect =\
    \ scoresTakenCorrectCorrectCorrect\n        val guessesTakenIncorrectIncorrectCorrect\
    \ = guessesTakenIncorrectIncorrect\n        val scoresTakenIncorrectIncorrectCorrect\
    \ = scoresTakenIncorrectIncorrectCorrect\n        val guessesTakenCorrectIncorrectCorrect\
    \ = guessesTakenCorrectIncorrectCorrect\n        val scoresTakenCorrectIncorrectCorrect\
    \ = scoresTakenCorrectIncorrectCorrect\n        val guessesTakenIncorrectIncorrectIncorrect\
    \ = guessesTakenIncorrectIncorrect\n        val scoresTakenIncorrectIncorrectIncorrect\
    \ = scoresTakenIncorrectIncorrectIncorrect\n        val guessesTakenCorrectIncorrectIncorrect\
    \ = guessesTakenCorrectIncorrectIncorrect\n        val scoresTakenCorrectIncorrectIncorrectIncorrect\
    \ = scoresTakenCorrectIncorrectIncorrectIncorrect\n        val guessesTakenIn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx0jue62l.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx0jue62l.scala:21:25\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0jue62l.scala:36:43 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessesTakenCorrectIncorrect\e[0m = guessesTakenCorrectIncorrect\n\
    \e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m\
    \   |\e[0m                 Recursive \e[33mvalue\e[0m \e[35mguessesTakenCorrectIncorrect\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0jue62l.scala:37:42\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mscoresTakenCorrectIncorrect\e[0m = scoresTakenCorrectIncorrect\n\e[31m\e\
    [31m   |\e[0m                                          ^\e[0m\n\e[31m   |\e[0m\
    \                  Recursive \e[33mvalue\e[0m \e[35mscoresTakenCorrectIncorrect\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0jue62l.scala:39:49\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mscoresTakenIncorrectCorrectCorrect\e[0m = scoresTakenIncorrectCorrectCorrect\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m           Recursive \e[33mvalue\e[0m \e[35mscoresTakenIncorrectCorrectCorrect\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0jue62l.scala:41"
  stdout: ''
  timestamp: 1659797710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (index, score) }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => (index, score)\
    \ }\n        val gameScoreSet = gameScores.toSet\n        val guessesScoreSet\
    \ = guessesScores.toSet\n        val gameScoreList = gameScoreSet.toList\n   \
    \     val guessesScoreList = guessesScoreSet.toList\n        val gameScoreSetSize\
    \ = gameScoreSet.size\n        val guessesScoreSetSize = guessesScoreSet.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreListSize = gameScoreListSize -\
    \ gameScoreSetSize\n        val guessesScoreListSize = guessesScoreListSize -\
    \ guessesScoreSetSize\n        val gameScoreListSize = gameScoreListSize - gameScoreSetSize\n\
    \        val guessesScoreListSize = guessesScoreListSize - guessesScoreSetSize\n\
    \        val gameScoreListSize = gameScoreListSize - gameScoreSetSize\n      \
    \  val guessesScoreListSize = guessesScoreListSize - guessesScoreSetSize\n   \
    \     val gameScoreListSize = gameScoreListSize - gameScoreSetSize\n        val\
    \ guessesScoreListSize = guessesScoreListSize - guessesScoreSetSize\n        val\
    \ gameScoreListSize = gameScoreListSize - gameScoreSetSize\n        val guessesScoreListSize\
    \ = guessesScoreListSize - guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize - gameScoreSetSize\n        val guessesScoreListSize = guessesScoreListSize\
    \ - guessesScoreSetSize\n        val gameScoreListSize = gameScoreListSize - gameScoreSetSize\n\
    \        val guessesScoreListSize = guessesScoreListSize - guessesScoreSetSize\n\
    \        val gameScoreListSize = gameScoreListSize - gameScoreSetSize\n      \
    \  val guessesScoreListSize = guessesScoreListSize - guessesScoreSetSize\n   \
    \     val gameScoreListSize = gameScoreListSize - gameScoreSetSize\n        val\
    \ guessesScoreListSize = guessesScoreListSize - guessesScoreSetSize\n        val\
    \ gameScoreListSize = gameScoreListSize - gameScoreSetSize\n        val guessesScoreListSize\
    \ = guessesScoreListSize - guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize - gameScoreSetSize\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7bs6i_hn.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m =\
    \ gameScoreListSize - gameScoreSetSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreListSize is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp7bs6i_hn.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreListSize\e[0m\
    \ = guessesScoreListSize - guessesScoreSetSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreListSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessesScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp7bs6i_hn.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m =\
    \ gameScoreListSize - gameScoreSetSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreListSize is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp7bs6i_hn.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreListSize\e[0m\
    \ = guessesScoreListSize - guessesScoreSetSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreListSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessesScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel "
  stdout: ''
  timestamp: 1659797710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesCorrect = guessesScores.filter(_._1 ==\
    \ gameScores.keys)\n        val guessesIncorrect = guessesScores.filter(_._1 !=\
    \ gameScores.keys)\n        val guessesDiff = guessesCorrect.map(x => guessesScores(x._1)\
    \ - gameScores(x._1))\n        val guessesDiffIncorrect = guessesIncorrect.map(x\
    \ => guessesScores(x._1) - gameScores(x._1))\n        val guessesDiffCorrect =\
    \ guessesCorrect.map(x => gameScores(x._1) - guessesScores(x._1))\n        val\
    \ guessesDiffIncorrectCorrect = guessesIncorrectCorrect.map(x => gameScores(x._1)\
    \ - guessesScores(x._1))\n        val guessesDiffCorrectIncorrect = guessesCorrectIncorrect.map(x\
    \ => guessesScores(x._1) - gameScores(x._1))\n        val guessesDiffCorrectCorrect\
    \ = guessesCorrectCorrect.map(x => gameScores(x._1) - guessesScores(x._1))\n \
    \       val guessesDiffIncorrectIncorrect = guessesIncorrectIncorrect.map(x =>\
    \ guessesScores(x._1) - gameScores(x._1))\n        val guessesDiffCorrectCorrect\
    \ = guessesCorrectCorrect.map(x => gameScores(x._1) - guessesScores(x._1))\n \
    \       val guessesDiffIncorrectCorrect = guessesIncorrectCorrect.map(x => guessesScores(x._1)\
    \ - gameScores(x._1))\n        val guessesDiffCorrectIncorrect = guessesCorrectIncorrect.map(x\
    \ => guessesScores(x._1) - gameScores(x._1))\n        val guessesDiffCorrectCorrect\
    \ = guessesCorrectCorrect.map(x => gameScores(x._1) - guessesScores(x._1))\n \
    \       val guessesDiffIncorrectIncorrect = guessesIncorrectIncorrect.map(x =>\
    \ guessesScores(x._1) - gameScores(x._1))\n        val guessesDiffCorrectIncorrect\
    \ = guessesCorrectIncorrect.map(x => guessesScores(x._1) - gameScores(x._1))\n\
    \        val guessesDiffCorrectCorrect = guessesCorrectCorrect.map(x => gameScores(x.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpihybttrt.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpihybttrt.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessesDiffCorrectCorrect\e[0m = guessesCorrectCorrect.map(\e\
    [36mx\e[0m => gameScores(x._1) - guessesScores(x._1))\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesDiffCorrectCorrect is already defined as \e[33mvalue\e\
    [0m \e[35mguessesDiffCorrectCorrect\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpihybttrt.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mguessesDiffIncorrectCorrect\e\
    [0m = guessesIncorrectCorrect.map(\e[36mx\e[0m => guessesScores(x._1) - gameScores(x._1))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesDiffIncorrectCorrect is already defined as \e[33mvalue\e\
    [0m \e[35mguessesDiffIncorrectCorrect\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpihybttrt.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mguessesDiffCorrectIncorrect\e\
    [0m = guessesCorrectIncorrect.map(\e[36mx\e[0m => guessesScores(x._1) - gameScores(x._1))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesDiffCorrectIncorrect is already defined as \e[33mvalue\e\
    [0m \e[35mguessesDiffCorrectIncorrect\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel"
  stdout: ''
  timestamp: 1659797715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val gameScore = gameScores.map { case (score, index)\
    \ => score }\n        val guessScore = guessScores.map { case (score, index) =>\
    \ score }\n        val gameScores = gameScores.map { case (score, index) => gameScore(index)\
    \ - guessScore(index) }\n        val gameScore = gameScores.sum\n        val gameScores\
    \ = gameScores.map { case score => if (score < 0) score else -score }\n      \
    \  gameScores.toList\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7qehgp12.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.map\
    \ { \e[33mcase\e[0m (score, index) => gameScore(index) - guessScore(index) }\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7qehgp12.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mgameScore\e[0m = gameScores.sum\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScore\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScore\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7qehgp12.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScores\e[0m = gameScores.map { \e[33mcase\e[0m score => \e[33mif\e\
    [0m (score < \e[31m0\e[0m) score \e[33melse\e[0m -score }\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp7qehgp12.scala:24:19 --------------------\e[0m\e[0m\n\
    \e[31m24 |\e[0m        gameScores.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e[0m\e[1m\e[31m)\e[0m]\n\e[31m   |\e[0m   \
    \     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameSet = game.distinct\n\
    \        val guessSet = guess.distinct\n        val result = gameSet.zip(guessSet).map\
    \ { case (game, guess) =>\n            val diff = abs(guess - game)\n        \
    \    if (guess == game) diff else -diff\n        }\n        result.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyjqw4bx6.scala:26)\n\tat Problem.main(tmpyjqw4bx6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameSet = game.distinct\n\
    \        val guessSet = guess.distinct\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSetSize\
    \ + 1\n        val guessSetSize = guessSetSize + 1\n        val gameSetSize =\
    \ gameSetSize + 1\n        val guessSetSize = guessSetSize + 1\n        val gameSetSize\
    \ = gameSetSize + 1\n        val guessSetSize = guessSetSize + 1\n        val\
    \ gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize + 1\n\
    \        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSetSize\
    \ + 1\n        val gameSetSize = gameSetSize + 1\n        val guessSetSize = guessSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoev4f4cd.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameSetSize\e[0m = gameSetSize\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoev4f4cd.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSetSize + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessSetSize is already defined as \e[33mvalue\e[0m \e[35mguessSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoev4f4cd.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mgameSetSize\e[0m = gameSetSize + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoev4f4cd.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSetSize + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessSetSize is already defined as \e[33mvalue\e[0m \e[35mguessSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoev4f4cd.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameSetSize\e[0m = gameSetSize + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  "
  stdout: ''
  timestamp: 1659797719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameLength =\
    \ game.size\n        val guessLength = guess.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val gameScores = game.zipWithIndex.map { case (score, index) => score\
    \ }\n        val guessScores = guess.zipWithIndex.map { case (score, index) =>\
    \ score }\n        val gameScoreDiffs = gameScores.zip(guessScores).map { case\
    \ (gameScore, guessScore) => Math.abs(gameScore - guessScore) }\n        val gameScoreDiffsSorted\
    \ = gameScoreDiffs.sortWith(_ < _)\n        val gameScoreDiffsSortedLength = gameScoreDiffsSorted.length\n\
    \        val gameScoreDiffsSortedIndexes = gameScoreDiffsSorted.zipWithIndex.map\
    \ { case (gameScoreDiff, index) => index }\n        val guessScoreDiffs = guessScores.zip(gameScores).map\
    \ { case (guessScore, gameScore) => Math.abs(guessScore - gameScore) }\n     \
    \   val guessScoreDiffsSorted = guessScoreDiffs.sortWith(_ < _)\n        val guessScoreDiffsSortedLength\
    \ = guessScoreDiffsSorted.length\n        val guessScoreDiffsSortedIndexes = guessScoreDiffsSorted.zipWithIndex.map\
    \ { case (guessScoreDiff, index) => index }\n        val gameScoreDiffsSortedIndexesLength\
    \ = gameScoreDiffsSortedIndexes.length\n        val guessScoreDiffsSortedIndexesLength\
    \ = guessScoreDiffsSortedIndexes.length\n        val gameScoreDiffsSortedIndexesLength\
    \ = gameScoreDiffsSortedIndexes.length\n        val guessScoreDiffsSortedIndexesLength\
    \ = guessScoreDiffsSortedIndexes.length\n        val gameScoreDiffsSortedIndexesLength\
    \ = gameScoreDiffsSortedIndexes.length\n        val guessScoreDiffsSortedIndexesLength\
    \ = guessScoreDiffsSortedIndexes.length\n        val gameScoreDiffsSortedIndexesLength\
    \ = gameScoreDiffsSortedIndexes.length\n        val guessScoreDiffsSortedIndexesLength\
    \ = guessScoreDiffsSortedIndexes.length\n        val gameScoreDiffsSortedIndexesLength\
    \ = gameScoreDiffsSortedIndexes.length\n        val guessScoreDiffsSortedIndexesLength\
    \ = guessScoreDiffsSortedIndexes.length\n        val gameScoreDiffsSortedIndexesLength\
    \ = gameScoreDiffsSortedIndexes.length\n        val guessScoreDiffsSortedIndexesLength\
    \ = guessScoreDiffsSortedIndexes.length\n        val gameScoreDiffsSortedIndexesLength\
    \ = gameScoreDiffsSorted\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp79ckantr.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffsSortedIndexesLength\e\
    [0m = gameScoreDiffsSortedIndexes.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffsSortedIndexesLength is already defined as \e\
    [33mvalue\e[0m \e[35mgameScoreDiffsSortedIndexesLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp79ckantr.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessScoreDiffsSortedIndexesLength\e[0m = guessScoreDiffsSortedIndexes.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffsSortedIndexesLength is already defined as \e\
    [33mvalue\e[0m \e[35mguessScoreDiffsSortedIndexesLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp79ckantr.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffsSortedIndexesLength\e[0m = gameScoreDiffsSortedIndexes.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffsSortedIndexesLength is already defined as \e\
    [33mvalue\e[0m \e[35mgameScoreDiffsSortedIndexesLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp79ckantr.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessScoreDiffsSortedIndexesLength\e[0m = guessScoreDiffsSortedIndexes.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffsSor"
  stdout: ''
  timestamp: 1659797715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{ case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map{ case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n\
    \        val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n\
    \        val gameScoreMap = gameScoreSet.toMap\n        val guessScoreMap = guessScoreSet.toMap\n\
    \        val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreMap = gameScoreSet.toMap\n\
    \        val guessScoreMap = guessScoreSet.toMap\n        val gameScoreList =\
    \ gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n   \
    \     val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n\
    \        val gameScoreMap = gameScoreSet.toMap\n        val guessScoreMap = guessScoreSet.toMap\n\
    \        val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreMap = gameScoreSet.toMap\n\
    \        val guessScoreMap = guessScoreSet.toMap\n        val gameScoreList =\
    \ gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n   \
    \     val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n\
    \        val gameScoreMap = gameScoreSet.toMap\n        val guessScoreMap = guessScoreSet.toMap\n\
    \        val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreSet = gameScoreList.toSet\n     \
    \   val guessScoreSet = guessScoreList.toSet\n        val gameScoreMap = gameScoreSet.toMap\n\
    \        val guessScoreMap = guessScoreSet.toMap\n        val gameScoreList =\
    \ gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n   \
    \     val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guess\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptpqhyraj.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScoreSet.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptpqhyraj.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScoreSet.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptpqhyraj.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreMap.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptpqhyraj.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScoreMap.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptpqhyraj.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScoreList.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => x._2 - x._1).toList\n        val guessScores = guess.zipWithIndex.map(x\
    \ => x._2 - x._1).toList\n        val gameScoreMap = gameScores.groupBy(x => x._1).map(x\
    \ => x._2.map(y => y._2 - y._1).sum).toList\n        val guessScoreMap = guessScores.groupBy(x\
    \ => x._1).map(x => x._2.map(y => y._2 - y._1).sum).toList\n        val gameScoreMap2\
    \ = gameScores.groupBy(x => x._1).map(x => x._2.map(y => y._2 - y._1).sum).toList\n\
    \        val guessScoreMap2 = guessScores.groupBy(x => x._1).map(x => x._2.map(y\
    \ => y._2 - y._1).sum).toList\n        val gameScoreMap3 = gameScores.groupBy(x\
    \ => x._1).map(x => x._2.map(y => y._2 - y._1).sum).toList\n        val guessScoreMap3\
    \ = guessScores.groupBy(x => x._1).map(x => x._2.map(y => y._2 - y._1).sum).toList\n\
    \        val gameScoreMap4 = gameScores.groupBy(x => x._1).map(x => x._2.map(y\
    \ => y._2 - y._1).sum).toList\n        val guessScoreMap4 = guessScores.groupBy(x\
    \ => x._1).map(x => x._2.map(y => y._2 - y._1).sum).toList\n        val gameScoreMap5\
    \ = gameScores.groupBy(x => x._1).map(x => x._2.map(y => y._2 - y._1).sum).toList\n\
    \        val guessScoreMap5 = guessScores.groupBy(x => x._1).map(x => x._2.map(y\
    \ => y._2 - y._1).sum).toList\n        val gameScoreMap6 = gameScores.groupBy(x\
    \ => x._1).map(x => x._2.map(y => y._2 - y._1).sum).toList\n        val guessScoreMap6\
    \ = guessScores.groupBy(x => x._1).map(x => x._2.map(y => y._2 - y._1).sum).toList\n\
    \        val gameScoreMap7 = gameScores.groupBy(x => x._1).map(x => x._2.map(y\
    \ => y._2 - y._1).sum).toList\n        val guessScoreMap7 = guessScores.groupBy(x\
    \ => x.\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7sukjit0.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp7sukjit0.scala:19:53 ------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.groupBy(\e\
    [36mx\e[0m => x._1).map(\e[36mx\e[0m => x._2.map(\e[36my\e[0m => y._2 - y._1).sum).toList\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^\e\
    [0m\n\e[31m   |\e[0m                                        value _1 is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7sukjit0.scala:19:82\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreMap\e[0m = gameScores.groupBy(\e[36mx\e[0m => x._1).map(\e[36mx\e\
    [0m => x._2.map(\e[36my\e[0m => y._2 - y._1).sum).toList\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \    ^^^^\e[0m\n\e[31m   |\e[0m                                        value _2\
    \ is not a member of Long\n\e[31m\e[31m-- Error: /tmp/tmp7sukjit0.scala:19:96\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.groupBy(\e[36mx\e[0m =>\
    \ x._1).map(\e[36mx\e[0m => x._2.map(\e[36my\e[0m => y._2 - y._1).sum).toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                        ^\e[0m\n\e[31m   |\e[0mambiguous given\
    \ instances: both \e[33mobject\e[0m \e[35mLongIsIntegral\e[0m in \e[33mobject\e\
    [0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mCharIsIntegral\e[0m in \e[33mobject\e\
    [0m \e[35mNumeric\e[0m match type Numeric[B] of parameter num of \e[33mmethod\e\
    [0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp7sukjit0.scala:20:55 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.groupBy(\e\
    [36mx\e[0m => x._1).map(\e[36mx\e[0m => x._2.map(\e[36my\e[0m => y._2 - y._1).sum).toList\n\
    \e[31m"
  stdout: ''
  timestamp: 1659797724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guesses_count = guesses.size\n       \
    \ val scores_count = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < guesses_count) {\n            val guess\
    \ = guesses(i)\n            val score = scores(i)\n            val diff = abs(guess\
    \ - score)\n            if (diff > 0) {\n                result.add(diff)\n  \
    \          }\n            i += 1\n        }\n        result.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp455dnhqm.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp455dnhqm.scala:21:25 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - gameScoreCount\n        val guessScoreDiff\
    \ = guessScoreSum - guessScoreCount\n        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val gameScoreDiffAbsArray\
    \ = gameScoreDiffAbs.toArray.map(_.toLong)\n        val guessScoreDiffAbsArray\
    \ = guessScoreDiffAbs.toArray.map(_.toLong)\n        val gameScoreDiffAbsArray\
    \ = gameScoreDiffAbs.toArray.map(_.toLong)\n        val guessScoreDiffAbsArray\
    \ = guessScoreDiffAbs.toArray.map(_.toLong)\n        val gameScoreDiffAbsArray\
    \ = gameScoreDiffAbs.toArray.map(_.toLong)\n        val guessScoreDiffAbsArray\
    \ = guessScoreDiffAbs.toArray.map(_.toLong)\n        val gameScoreDiffAbsArray\
    \ = gameScoreDiffAbs.toArray.map(_.toLong)\n        val guessScoreDiffAbsArray\
    \ = guessScoreDiffAbs.toArray.map(_.toLong)\n        val gameScoreDiffAbsArray\
    \ = gameScoreDiffAbs.toArray.map(_.toLong)\n        val guessScoreDiffAbsArray\
    \ = guessScoreDiffAbs.toArray.map(_.toLong)\n        val gameScoreDiffAbsArray\
    \ = gameScoreDiffAbs.toArray.map(_.toLong)\n        val guessScoreDiffAbsArray\
    \ = guessScoreDiffAbs.toArray.map(_.toLong)\n        val gameScoreDiffAbsArray\
    \ = gameScoreDiffAbs.toArray.map(_.toLong)\n        val guessScoreDiffAbsArray\
    \ = guessScoreDiffAbs.toArray.map(_.toLong)\n        val gameScoreDiffAbsArray\
    \ = gameScoreDiffAbs.toArray.map(_.toLong)\n        val guessScoreDiffAbsArray\
    \ = guessScoreDiffAbs.toArray.map(_.toLong)\n        val gameScoreDiffAbsArray\
    \ = gameScoreDiffAbs.toArray.map(_.toLong)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpktlbrzze.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsArray\e\
    [0m = gameScoreDiffAbs.toArray.map(_.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsArray is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpktlbrzze.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffAbsArray\e\
    [0m = guessScoreDiffAbs.toArray.map(_.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffAbsArray is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreDiffAbsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpktlbrzze.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsArray\e\
    [0m = gameScoreDiffAbs.toArray.map(_.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsArray is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpktlbrzze.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffAbsArray\e\
    [0m = guessScoreDiffAbs.toArray.map(_.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffAbsArray is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreDiffAbsArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must a"
  stdout: ''
  timestamp: 1659797720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val guessesToScores = guesses.zip(scores)\n\
    \        val scoresToGuesses = scores.zip(guesses)\n        val guessesToGuesses\
    \ = guessesToScores.zip(scoresToGuesses)\n        val guessesToGuessesCount =\
    \ guessesToGuesses.size\n        val scoresToGuessesCount = scoresToGuesses.size\n\
    \        val guessesToGuessesToScores = guessesToGuesses.zip(scoresToGuesses)\n\
    \        val guessesToGuessesToScoresCount = guessesToGuessesToScores.size\n \
    \       val guessesToGuessesToScoresToGuesses = guessesToGuessesToScores.zip(guessesToGuesses)\n\
    \        val guessesToGuessesToScoresToGuessesCount = guessesToGuessesToScoresToGuesses.size\n\
    \        val guessesToGuessesToScoresToGuessesToScores = guessesToGuessesToScoresToGuesses.zip(scoresToGuesses)\n\
    \        val guessesToGuessesToScoresToGuessesToScoresCount = guessesToGuessesToScoresToGuessesToScores.size\n\
    \        val guessesToGuessesToScoresToGuessesToScoresToGuesses = guessesToGuessesToScoresToGuessesToScores.zip(guessesToGuesses)\n\
    \        val guessesToGuessesToScoresToGuessesToScoresToGuessesCount = guessesToGuessesToScoresToGuessesToScoresToGuesses.size\n\
    \        val guessesToGuessesToScoresToGuessesToScoresToGuessesToScores = guessesToGuessesToScoresToGuessesToScoresToGuesses.zip(guessesToGuesses)\n\
    \        val guessesToGuessesToScoresToGuessesToScoresToGuessesToScoresCount =\
    \ guessesToGuessesToScoresToGuessesToScoresToGuessesToScoresToGuesses.size\n \
    \       val guessesToGuessesToScores\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq1fpbetq.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq1fpbetq.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mguesses\e[0m = gues\n\e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: gues\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpq1fpbetq.scala:35:78 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mguessesToGuessesToScoresToGuessesToScoresToGuessesToScoresCount\e\
    [0m = guessesToGuessesToScoresToGuessesToScoresToGuessesToScoresToGuesses.size\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: guessesToGuessesToScoresToGuessesToScoresToGuessesToScoresToGuesses\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq1fpbetq.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => score -> gameScores(index) }.toMap\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (score, index) => index -> score }.toMap\n  \
    \      val guessesWithIndexesSorted = guessesWithIndexes.sortBy(_._1)\n      \
    \  val guessesWithIndexesSortedWithScores = guessesWithIndexesSorted.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedWithScoresSorted\
    \ = guessesWithIndexesSortedWithScores.sortBy(_._1)\n        val guessesWithIndexesSortedWithScoresSortedWithIndexes\
    \ = guessesWithIndexesSortedWithScoresSorted.map { case (score, index) => index\
    \ -> score }.toMap\n        val guessesWithIndexesSortedWithScoresSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexes.sortBy(_._1)\n       \
    \ val guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexes = guessesWithIndexesSortedWithScoresSortedWithIndexesSorted.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexes.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSorted.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSortedWithIndexes.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_uhu2hgw.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp_uhu2hgw.scala:21:58 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesSorted\e[0m = guessesWithIndexes.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value sortBy is not a member of\
    \ Map[Int, Long]\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_uhu2hgw.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val result: List[Long] = guesses.map(x\
    \ => if (scores.contains(x)) 0 else abs(x - scores.head))\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8lxodjs5.scala:19:44\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = guesses.map(\e[36mx\e[0m => \e[33mif\e\
    [0m (scores.contains(x)) \e[31m0\e[0m \e[33melse\e[0m abs(x - scores.head))\n\e\
    [31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    \e[1m\e[31mSet\e\
    [0m[Long]\n\e[31m   |\e[0m                                 Required: \e[1m\e[32mList\e\
    [0m[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => index -> score }.toMap\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (score, index) => index -> guess }.toMap\n        val guessesWithIndexesWithScores\
    \ = guessesWithIndexes.map { case (score, index) => index -> gameScores(index)\
    \ }.toMap\n        val guessesWithIndexesWithScoresWithIndex = guessesWithIndexesWithScores.map\
    \ { case (score, index, gameScore) => index -> gameScore }.toMap\n        val\
    \ guessesWithIndexesWithScoresWithIndexAndGameScore = guessesWithIndexesWithScoresWithIndex.map\
    \ { case (score, index, gameScore) => index -> gameScore }.toMap\n        val\
    \ guessesWithIndexesWithScoresWithIndexAndGameScoreWithIndex = guessesWithIndexesWithScoresWithIndexAndGameScore.map\
    \ { case (score, index, gameScore) => index -> gameScore }.toMap\n        val\
    \ guessesWithIndexesWithScoresWithIndexAndGameScoreWithIndexAndGameScore = guessesWithIndexesWithScoresWithIndexAndGameScoreWithIndex.map\
    \ { case (score, index, gameScore) => index -> gameScore }.toMap\n        val\
    \ guessesWithIndexesWithScoresWithIndexAndGameScoreWithIndexAndGameScoreWithIndex\
    \ = guessesWithIndexesWithScoresWithIndexAndGameScoreWithIndexAndGameScore.map\
    \ { case (score, index, gameScore) => index -> gameScore }.toMap\n        val\
    \ guessesWithIndexesWithScoresWithIndexAndGameScoreWithIndexAndGameScoreWithIndexAndGameScore\
    \ = guessesWithIndexesWithScoresWithIndexAndGameScoreWithIndexAndGameScoreWithIndex.map\
    \ { case (score, index, gameScore) => index -> gameScore }.toMap\n        val\
    \ guessesWithIndexesWithScoresWithIndexAndGameScoreWithIndexAndGameScoreWithIndexAndGameScoreWithIndex\
    \ = guessesWithIndexesWithScoresWithIndexAndGameScoreWithIndexAndGameScoreWithIndexAndGameScore.map\
    \ { case (score, index, gameScore) => index -> gameScore }.toMap\n        val\
    \ guesses\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc52ow5a6.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpc52ow5a6.scala:21:111 -------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \        \e[33mval\e[0m \e[36mguessesWithIndexesWithScores\e[0m = guessesWithIndexes.map\
    \ { \e[33mcase\e[0m (score, index) => index -> gameScores(index) }.toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                               ^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                        Found:    (index : List[Long])\n\e[31m\
    \   |\e[0m                                          Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc52ow5a6.scala:30:5 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659797722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => (x._1, x._2)).toMap\n        val guessScores = guess.zipWithIndex.map(x\
    \ => (x._1, x._2)).toMap\n        val gameScore = gameScores.values.toList\n \
    \       val guessScore = guessScores.values.toList\n        val gameScoreDiff\
    \ = gameScore diff guessScore\n        val gameScoreDiffList = gameScoreDiff.toList\n\
    \        val gameScoreDiffList2 = gameScoreDiffList.map(x => if (x == 0) 0 else\
    \ x)\n        val gameScoreDiffList3 = gameScoreDiffList2.map(x => if (x == 0)\
    \ 0 else x)\n        val gameScoreDiffList4 = gameScoreDiffList3.map(x => if (x\
    \ == 0) 0 else x)\n        val gameScoreDiffList5 = gameScoreDiffList4.map(x =>\
    \ if (x == 0) 0 else x)\n        val gameScoreDiffList6 = gameScoreDiffList5.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList7 = gameScoreDiffList6.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList8 = gameScoreDiffList7.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList9 = gameScoreDiffList8.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList10 = gameScoreDiffList9.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList11 = gameScoreDiffList10.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList12 = gameScoreDiffList11.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList13 = gameScoreDiffList12.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList14 = gameScoreDiffList13.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList15 = gameScoreDiffList14.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList16 = gameScoreDiffList15.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList17 = gameScoreDiffList16.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList18 = gameScoreDiffList17.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList19 = gameScoreDiffList18.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList20 = gameScoreDiffList19.map(x\
    \ => if (x == 0) 0 else x)\n        val gameScoreDiffList21 = gameScoreDiffList20.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv317jymr.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpv317jymr.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val result = guessScores.map { case (score, index) =>\n\
    \            val gameScore = gameScores(score)\n            if (gameScore == -1)\
    \ {\n                0\n            } else {\n                val diff = abs(gameScore\
    \ - guessScores(score))\n                if (gameScore > guessScores(score)) {\n\
    \                    diff\n                } else {\n                    -diff\n\
    \                }\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9mm8bzr5.scala:32:8\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : scala.collection.immutable.Iterable[Int])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.map(x\
    \ => Math.abs(x - game))\n        val guessesSum = guesses.sum\n        val guessesDiff\
    \ = guesses.map(x => x - guessesSum).sum\n        val guessesDiffAbs = guessesDiff.abs\n\
    \        val guessesDiffAbsSum = guessesDiffAbs.sum\n        val guessesDiffAbsDiff\
    \ = guessesDiffAbs.map(x => x - guessesDiffAbsSum).sum\n        val guessesDiffAbsDiffAbs\
    \ = guessesDiffAbsDiff - guessesSum\n        val guessesDiffAbsDiffAbsSum = guessesDiffAbsDiffAbs.sum\n\
    \        val guessesDiffAbsDiffAbsDiff = guessesDiffAbsDiffAbs.map(x => x - guessesDiffAbsDiffAbsSum).sum\n\
    \        guessesDiffAbsDiffAbsDiffAbs\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpmsnlltkx.scala:17:48 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = guess.map(\e\
    [36mx\e[0m => Math.abs(x - game))\n\e[31m\e[31m   |\e[0m                     \
    \                         ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m\
    \   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x:\
    \ Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\
    \e[31m   |\e[0mmatch arguments ((game : List[Long]))\n\e[31m\e[31m-- Error: /tmp/tmpmsnlltkx.scala:18:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \ \e[33mval\e[0m \e[36mguessesSum\e[0m = guesses.sum\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mLongIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e\
    [0m and \e[33mobject\e[0m \e[35mCharIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e\
    [0m match type Numeric[B] of parameter num of \e[33mmethod\e[0m \e[35msum\e[0m\
    \ in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpmsnlltkx.scala:19:45 ------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessesDiff\e[0m = guesses.map(\e[36mx\e\
    [0m => x - guessesSum).sum\n\e[31m\e[31m   |\e[0m                            \
    \               ^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of Nothing, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\
    \e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\
    \e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\
    \e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import collection.convert.Impli"
  stdout: ''
  timestamp: 1659797722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val guessesWithScores = guessesScores.map { case (score, index) =>\
    \ score -> gameScores(index) }\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSorted\
    \ = guessesWithIndexes.sortBy(_._1)\n        val guessesWithIndexesSortedWithScores\
    \ = guessesWithIndexesSorted.map { case (index, score) => score -> index }\n \
    \       val guessesWithIndexesSortedWithScoresSorted = guessesWithIndexesSortedWithScores.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedWithScoresSortedWithIndexes = guessesWithIndexesSortedWithScoresSorted.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSortedWithScoresSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexes.sortBy(_._1)\n       \
    \ val guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexes = guessesWithIndexesSortedWithScoresSortedWithIndexesSorted.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexes.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSorted.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSortedWithIndexes.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted.map\
    \ { case (score, index) => index -> score }\n        val guesses\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp371321ww.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp371321ww.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - guessScoreSum\n        val guessScoreDiff\
    \ = guessScoreSum - gameScoreSum\n        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val gameScoreDiffAbsList\
    \ = gameScoreDiffAbs.toList.sortBy(_ < 0).reverse\n        val guessScoreDiffAbsList\
    \ = guessScoreDiffAbs.toList.sortBy(_ < 0).reverse\n        val gameScoreDiffAbsListLength\
    \ = gameScoreDiffAbsList.length\n        val guessScoreDiffAbsListLength = guessScoreDiffAbsList.length\n\
    \        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n       \
    \ val guessScoreDiffAbsListLength = guessScoreDiffAbsListLength\n        val gameScoreDiffAbsListLength\
    \ = gameScoreDiffAbsListLength\n        val guessScoreDiffAbsListLength = guessScoreDiffAbsListLength\n\
    \        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n       \
    \ val guessScoreDiffAbsListLength = guessScoreDiffAbsListLength\n        val gameScoreDiffAbsListLength\
    \ = gameScoreDiffAbsListLength\n        val guessScoreDiffAbsListLength = guessScoreDiffAbsListLength\n\
    \        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n       \
    \ val guessScoreDiffAbsListLength = guessScoreDiffAbsListLength\n        val gameScoreDiffAbsListLength\
    \ = gameScoreDiffAbsListLength\n        val guessScoreDiffAbsListLength = guessScoreDiffAbsListLength\n\
    \        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n       \
    \ val guessScoreDiffAbsListLength = guessScoreDiffAbsListLength\n        val gameScoreDiffAbsListLength\
    \ = gameScoreDiffAbsListLength\n        val guessScoreDiffAbsListLength = guessScoreDiffAbsListLength\n\
    \        val gameScoreDiffAbsListLength = gameScoreDiffAbsListLength\n       \
    \ val guessScoreDiffAbsListLength = guessScoreDiffAbsListLength\n        val gameScoreDiffAbsListLength\
    \ = gameScoreDiffAbsListLength\n        val guessScoreDiffAbsListLength = guessScoreDiffAbsListLength\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9l3hsq97.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsListLength\e\
    [0m = gameScoreDiffAbsListLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9l3hsq97.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffAbsListLength\e\
    [0m = guessScoreDiffAbsListLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffAbsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreDiffAbsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9l3hsq97.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsListLength\e\
    [0m = gameScoreDiffAbsListLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9l3hsq97.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffAbsListLength\e\
    [0m = guessScoreDiffAbsListLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffAbsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreDiffAbsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in"
  stdout: ''
  timestamp: 1659797724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val guessesPerGame = guessesCount / scoresCount\n\
    \        val guessesPerGuess = guessesCount / guessesCount\n        val guessesPerGuess\
    \ = guessesCount / guessesCount\n        val guessesPerGuess = guessesCount /\
    \ guessesCount\n        val guessesPerGuess = guessesCount / guessesCount\n  \
    \      val guessesPerGuess = guessesCount / guessesCount\n        val guessesPerGuess\
    \ = guessesCount / guessesCount\n        val guessesPerGuess = guessesCount /\
    \ guessesCount\n        val guessesPerGuess = guessesCount / guessesCount\n  \
    \      val guessesPerGuess = guessesCount / guessesCount\n        val guessesPerGuess\
    \ = guessesCount / guessesCount\n        val guessesPerGuess = guessesCount /\
    \ guessesCount\n        val guessesPerGuess = guessesCount / guessesCount\n  \
    \      val guessesPerGuess = guessesCount / guessesCount\n        val guessesPerGuess\
    \ = guessesCount / guessesCount\n        val guessesPerGuess = guessesCount /\
    \ guessesCount\n        val guessesPerGuess = guessesCount / guessesCount\n  \
    \      val guessesPerGuess = guessesCount / guessesCount\n        val guessesPerGuess\
    \ = guessesCount / guessesCount\n        val guessesPerGuess = guessesCount /\
    \ guessesCount\n        val guessesPerGuess = guessesCount / guessesCount\n  \
    \      val guessesPerGuess = guessesCount / guessesCount\n        val guessesPerGuess\
    \ = guessesCount / guessesCount\n        val guessesPerGuess = guessesCount /\
    \ guessesCount\n        val guessesPerGuess = guessesCount / guessesCount\n  \
    \      val guessesPerGuess = guessesCount / guessesCount\n        val guessesPerGuess\
    \ = guessesCount / guessesCount\n        val guessesPerGuess = guessesCount /\
    \ guessesCount\n        val guessesPerGuess = guessesCount / guessesCount\n  \
    \      val guessesPerGuess = guessesCount / guessesCount\n        val guessesPerG\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphi2mj9pb.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphi2mj9pb.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesPerGuess\e[0m = guessesCount / guessesCount\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mguessesPerGuess is already defined as \e[33mvalue\e[0m \e[35mguessesPerGuess\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphi2mj9pb.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessesPerGuess\e[0m = guessesCount\
    \ / guessesCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesPerGuess is already defined as \e[33mvalue\e[0m \e\
    [35mguessesPerGuess\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphi2mj9pb.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mguessesPerGuess\e[0m = guessesCount\
    \ / guessesCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesPerGuess is already defined as \e[33mvalue\e[0m \e\
    [35mguessesPerGuess\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphi2mj9pb.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesPerGuess\e[0m = guessesCount\
    \ / guessesCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesPerGuess is already defined as \e[33mvalue\e[0m \e\
    [35mguessesPerGuess\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be"
  stdout: ''
  timestamp: 1659797722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val guessesRemaining = guessesCount - 1\n        val scoresRemaining\
    \ = scoresCount - 1\n        val guessesRemainingScore = scores.last\n       \
    \ val scoresRemainingScore = scores.last\n        val guessesRemainingGuess =\
    \ guesses.last\n        val scoresRemainingGuess = scores.last\n        val guessesRemainingGuessScore\
    \ = guesses.last\n        val scoresRemainingGuessScore = scores.last\n      \
    \  val guessesRemainingGuessGuess = guesses.last\n        val scoresRemainingGuessGuess\
    \ = scores.last\n        val guessesRemainingGuessGuessScore = guesses.last\n\
    \        val scoresRemainingGuessGuessScore = scores.last\n        val guessesRemainingGuessGuessGuess\
    \ = guesses.last\n        val scoresRemainingGuessGuessGuess = scores.last\n \
    \       val guessesRemainingGuessGuessGuessScore = guesses.last\n        val scoresRemainingGuessGuessGuessScore\
    \ = scores.last\n        val guessesRemainingGuessGuessGuessGuess = guesses.last\n\
    \        val scoresRemainingGuessGuessGuessGuess = scores.last\n        val guessesRemainingGuessGuessGuessGuessScore\
    \ = guesses.last\n        val scoresRemainingGuessGuessGuessGuessScore = scores.last\n\
    \        val guessesRemainingGuessGuessGuessGuessGuess = guesses.last\n      \
    \  val scoresRemainingGuessGuessGuessGuessGuess = scores.last\n        val guessesRemainingGuessGuessGuessGuessGuessScore\
    \ = guesses.last\n        val scoresRemainingGuessGuessGuessGuessGuessScore =\
    \ scores.last\n        val guessesRemainingGuessGuessGuessGuessGuessGuess = guesses.last\n\
    \        val scoresRemainingGuessGuessGuessGuessGuessGuess = scores.last\n   \
    \     val guessesRemainingGuessGuessGuessGuessGuessGuessScore = guesses.last\n\
    \        val scoresRemainingGuessGuessGuessGuessGuessGuessScore = scores.\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsugj62qg.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpsugj62qg.scala:17:22 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsugj62qg.scala:21:25\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsugj62qg.scala:50:5 ---------------------\e[0m\e[0m\n\e[31m50\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameSet = game.toSet\n\
    \        val guessSet = guess.toSet\n        val result = game.map{x => if (guessSet.contains(x))\
    \ 0 else abs(x - guessSet.head)}\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa9v4sqyu.scala:23)\n\tat Problem.main(tmpa9v4sqyu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreSet = gameScores.toSet\n        val guessesScoreSet\
    \ = guessesScores.toSet\n        val gameScoreList = gameScores.toList\n     \
    \   val guessesScoreList = guessesScores.toList\n        val gameScoreSetSize\
    \ = gameScoreSet.size\n        val guessesScoreSetSize = guessesScoreSet.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreSetSize = gameScoreSet.size\n\
    \        val guessesScoreSetSize = guessesScoreSet.size\n        val gameScoreListSize\
    \ = gameScoreList.size\n        val guessesScoreListSize = guessesScoreList.size\n\
    \        val gameScoreSetSize = gameScoreSet.size\n        val guessesScoreSetSize\
    \ = guessesScoreSet.size\n        val gameScoreListSize = gameScoreList.size\n\
    \        val guessesScoreListSize = guessesScoreList.size\n        val gameScoreSetSize\
    \ = gameScoreSet.size\n        val guessesScoreSetSize = guessesScoreSet.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreSetSize = gameScoreSet.size\n\
    \        val guessesScoreSetSize = guessesScoreSet.size\n        val gameScoreListSize\
    \ = gameScoreList.size\n        val guessesScoreListSize = guessesScoreList.size\n\
    \        val gameScoreSetSize = gameScoreSet.size\n        val guessesScoreSetSize\
    \ = guessesScoreSet.size\n        val gameScoreListSize = gameScoreList.size\n\
    \        val guessesScoreListSize = guessesScoreList.size\n        val gameScoreSetSize\
    \ = gameScoreSet.size\n        val guessesScoreSetSize = guessesScoreSet.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreSetSize = gameScoreSet.size\n\
    \        val guessesScoreSetSize = guessesScoreSet.size\n        val gameScoreListSize\
    \ = gameScoreList.size\n        val guessesScoreListSize = guessesScoreList.size\n\
    \        val gameScoreSetSize = gameScoreSet.size\n        val guessesScoreSetSize\
    \ = guessesScoreSet.size\n        val gameScoreListSize = gameScore\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprbvs90an.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSetSize\e[0m =\
    \ gameScoreSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreSetSize is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprbvs90an.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreSetSize\e[0m\
    \ = guessesScoreSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessesScoreSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprbvs90an.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m =\
    \ gameScoreList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreListSize is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprbvs90an.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreListSize\e[0m\
    \ = guessesScoreList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreListSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessesScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprbvs90an.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSetSize\e["
  stdout: ''
  timestamp: 1659797733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessesWithScores = guess.zipWithIndex.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessesWithIndexes = guess.zipWithIndex.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithScoreAndIndex\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> index }.toMap\n\
    \        val guessesWithIndexesAndScore = guess.zipWithIndex.map { case (score,\
    \ index) => index -> index -> score }.toMap\n        val guessesWithScoreAndIndexAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> index ->\
    \ score }.toMap\n        val guessesWithIndexesAndIndexAndScore = guess.zipWithIndex.map\
    \ { case (score, index) => index -> index -> index -> score }.toMap\n        val\
    \ guessesWithScoreAndIndexAndIndexAndScore = guess.zipWithIndex.map { case (score,\
    \ index) => index -> score -> index -> index -> index -> score }.toMap\n     \
    \   val guessesWithIndexesAndIndexAndIndexAndScore = guess.zipWithIndex.map {\
    \ case (score, index) => index -> index -> index -> index -> index -> score }.toMap\n\
    \        val guessesWithScoreAndIndexAndIndexAndIndexAndScore = guess.zipWithIndex.map\
    \ { case (score, index) => index -> score -> index -> index -> index -> index\
    \ -> score }.toMap\n        val guessesWithIndexesAndIndexAndIndexAndIndexAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> index -> index ->\
    \ index -> index -> index -> score }.toMap\n        val guessesWithScoreAndIndexAndIndexAndIndexAndIndexAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> index ->\
    \ index -> index -> index -> index -> score }.toMap\n        val guessesWithIndexesAndIndexAndIndexAndIndexAndIndexAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> index -> index ->\
    \ index -> index -> index -> index -> score }.toMap\n        val guessesWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvkojf3e7.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpvkojf3e7.scala:20:94\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mguessesWithIndexes\e[0m = guess.zipWithIndex.map { \e[33mcase\e\
    [0m (score, index) => index }.toMap\n\e[31m\e[31m   |\e[0m                   \
    \                                                                           ^\e\
    [0m\n\e[31m   |\e[0m                                        Cannot prove that\
    \ Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                           \
    \             where:    K is a type variable\n\e[31m   |\e[0m                \
    \                                  V is a type variable\n\e[31m   |\e[0m     \
    \                                   .\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpvkojf3e7.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797738
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val guessScores = guess.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gameScore = gameScores.toSeq.sortBy(x =>\
    \ x._1).reverse.head._2\n        val guessScore = guessScores.toSeq.sortBy(x =>\
    \ x._1).reverse.head._2\n        val diffs = guessScores.toSeq.filter(x => gameScores.getOrElse(x._1,\
    \ x._1) != x._2).map(x => (x._2, x._1 - gameScore))\n        diffs.sortBy(x =>\
    \ x._1).reverse.head._2\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd7vg2l10.scala:22:45\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        diffs.sortBy(\e[36mx\e\
    [0m => x._1).reverse.head._2\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required: \e\
    [1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{ case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map{ case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList =\
    \ new mutable.ListBuffer[Long]()\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        gameScoreMap.foreach {\
    \ case (score, index) =>\n            val guessIndex = guessScoreMap.get(index)\n\
    \            if (guessIndex == None) gameScoreList.add(score)\n            else\
    \ guessScoreList.add(guessIndex.get)\n        }\n        guessScoreMap.foreach\
    \ { case (score, index) =>\n            val gameIndex = gameScoreMap.get(index)\n\
    \            if (gameIndex == None) guessScoreList.add(score)\n            else\
    \ gameScoreList.add(gameIndex.get)\n        }\n        gameScoreList.zip(guessScoreList).map\
    \ { case (gameScore, guessScore) => Math.abs(gameScore - guessScore) }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp4czpfq0j.scala:19:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- Error: /tmp/tmp4czpfq0j.scala:20:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4czpfq0j.scala:21:32\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4czpfq0j.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = \e\
    [33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScoreListSize\
    \ = gameScoreList.size\n        val guessesScoreListSize = guessesScoreList.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreListSize = gameScoreList.size\n\
    \        val guessesScoreListSize = guessesScoreList.size\n        val gameScoreListSize\
    \ = gameScoreList.size\n        val guessesScoreListSize = guessesScoreList.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreListSize = gameScoreList.size\n\
    \        val guessesScoreListSize = guessesScoreList.size\n        val gameScoreListSize\
    \ = gameScoreList.size\n        val guessesScoreListSize = guessesScoreList.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreListSize = gameScoreList.size\n\
    \        val guessesScoreListSize = guessesScoreList.size\n        val gameScoreListSize\
    \ = gameScoreList.size\n        val guessesScoreListSize = guessesScoreList.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreListSize = gameScoreList.size\n\
    \        val guessesScoreListSize = guessesScoreList.size\n        val gameScoreListSize\
    \ = gameScoreList.size\n        val guessesScoreListSize = guessesScoreList.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreListSize = gameScoreList.size\n\
    \        val guessesScoreListSize = guessesScoreList.size\n        val gameScoreListSize\
    \ = gameScoreList.size\n        val guessesScoreListSize = guessesScoreList.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreListSize = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpilts3rc6.scala:57:31 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpilts3rc6.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreListSize\e[0m = gameScoreList.size\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScoreListSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScoreListSize\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpilts3rc6.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessesScoreListSize\e[0m = guessesScoreList.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreListSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessesScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpilts3rc6.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m =\
    \ gameScoreList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreListSize is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpilts3rc6.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreListSize\e[0m\
    \ = guessesScoreList.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsmreliir.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsmreliir.scala:53:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m53 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsmreliir.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => \e[33mif\e[0m (score < \e[31m0\e[0m) -score\
    \ \e[33melse\e[0m score }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsmreliir.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mgameScore\e[0m = gameScores.sum\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScore\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScore\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsmreliir.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScores\e[0m = gameScores.zipWithIndex.map { \e[33mcase\e[0m (score,\
    \ index) => \e[33mif\e[0m (score < \e[31m0\e[0m) -score \e[33melse\e[0m score\
    \ }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming"
  stdout: ''
  timestamp: 1659797743
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val guessesDiff\
    \ = guessesScores.zip(gameScores).map { case (guess, game) => math.abs(guess -\
    \ game) }\n        guessesDiff.zipWithIndex.map { case (diff, index) => diff +\
    \ guessesDiff(index) }\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659797743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => x._1 - x._2)\n        val guessScores = guess.zipWithIndex.map(x\
    \ => x._1 - x._2)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScores.toList\n       \
    \ val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6smhk0u0.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6smhk0u0.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6smhk0u0.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6smhk0u0.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6smhk0u0.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659797744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScoreMap.toList\n   \
    \     val guessesScoreList = guessesScoreMap.toList\n        val gameScoreSet\
    \ = gameScoreList.toSet\n        val guessesScoreSet = guessesScoreList.toSet\n\
    \        val gameScoreList = gameScoreList.map { case (score, index) => score\
    \ -> index }\n        val guessesScoreList = guessesScoreList.map { case (score,\
    \ index) => score -> index }\n        val gameScoreSet = gameScoreSet.toList\n\
    \        val guessesScoreSet = guessesScoreSet.toList\n        val gameScoreList\
    \ = gameScoreList.map { case (score, index) => score -> index }\n        val guessesScoreList\
    \ = guessesScoreList.map { case (score, index) => score -> index }\n        val\
    \ gameScoreSet = gameScoreSet.toSet\n        val guessesScoreSet = guessesScoreSet.toSet\n\
    \        val gameScoreList = gameScoreList.map { case (score, index) => score\
    \ -> index }\n        val guessesScoreList = guessesScoreList.map { case (score,\
    \ index) => score -> index }\n        val gameScoreSet = gameScoreSet.toList\n\
    \        val guessesScoreSet = guessesScoreSet.toList\n        val gameScoreList\
    \ = gameScoreList.map { case (score, index) => score -> index }\n        val guessesScoreList\
    \ = guessesScoreList.map { case (score, index) => score -> index }\n        val\
    \ gameScoreSet = gameScoreSet.toSet\n        val guessesScoreSet = guessesScoreSet.toSet\n\
    \        val gameScoreList = gameScoreList.map { case (score, index) => score\
    \ -> index }\n        val guessesScoreList = guessesScoreList.map { case (score,\
    \ index) => score -> index }\n        val gameScoreSet = gameScoreSet.toList\n\
    \        val guessesScoreSet = guessesScoreSet.toList\n        val gameScoreList\
    \ = gameScoreList.map { case (score, index) => score -> index }\n        val guessesScoreList\
    \ = guessesScoreList.map { case (score, index) => score -> index }\n        val\
    \ gameScoreSet = gameScoreSet.to\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpda23gp2n.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreList.map\
    \ { \e[33mcase\e[0m (score, index) => score -> index }\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpda23gp2n.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreList\e[0m = guessesScoreList.map\
    \ { \e[33mcase\e[0m (score, index) => score -> index }\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreList is already defined as \e[33mvalue\e[0m \e\
    [35mguessesScoreList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpda23gp2n.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScoreSet.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreSet is already defined as \e[33mvalue\e[0m \e[35mgameScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpda23gp2n.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreSet\e[0m = guessesScoreSet.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mguessesScoreSet is already defined as \e[33mvalue\e[0m \e[35mguessesScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Err"
  stdout: ''
  timestamp: 1659797743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => gameScores(index) -> score }.toMap\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (score, index) => index -> score }.toMap\n  \
    \      val guessesWithIndexesSorted = guessesWithIndexes.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithScores = guessesWithIndexesSorted.map\
    \ { case (score, index) => gameScores(index) -> score }.toMap\n        val guessesWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithScores.map { case (score, index) => index -> score\
    \ }.toMap\n        val guessesWithIndexesSortedWithIndexesSorted = guessesWithIndexesSortedWithIndexes.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithIndexesSortedWithScores = guessesWithIndexesSortedWithIndexesSorted.map\
    \ { case (score, index) => gameScores(index) -> score }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithIndexesSortedWithScores.map { case (score, index)\
    \ => index -> score }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexes.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes.map\
    \ { case (score, index) => gameScores(index) -> score }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores.map {\
    \ case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted.toSeq.sortBy(_._1).reverse\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq_mhqf49.scala:29:84 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes\e\
    [0m = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores.map\
    \ { \e[33mcase\e[0m (score, index) => index -> score }.toMap\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mguessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq_mhqf49.scala:30:90\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted\e\
    [0m = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted.toSeq.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpq_mhqf49.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList =\
    \ new mutable.ListBuffer[Long]()\n        val gameScoreSet = new mutable.HashSet[Long]()\n\
    \        val guessScoreSet = new mutable.HashSet[Long]()\n        val gameScoreList\
    \ = gameScoreMap.values.toList\n        val guessScoreList = guessScoreMap.values.toList\n\
    \        val gameScoreSet = gameScoreMap.values.toSet\n        val guessScoreSet\
    \ = guessScoreMap.values.toSet\n        val gameScoreSet = gameScoreSet.toSet\n\
    \        val guessScoreSet = guessScoreSet.toSet\n        gameScoreList.foreach\
    \ { score =>\n            if (gameScoreSet.contains(score)) {\n              \
    \  gameScoreList += score\n                gameScoreSet.remove(score)\n      \
    \      }\n        }\n        guessScoreList.foreach { score =>\n            if\
    \ (guessScoreSet.contains(score)) {\n                guessScoreList += score\n\
    \                guessScoreSet.remove(score)\n            }\n        }\n     \
    \   gameScoreList.zipWithIndex.map { case (score, index) => Math.abs(score - guessScoreList.getOrElse(index,\
    \ 0l)) }\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfgrcwnea.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreMap.values.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfgrcwnea.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScoreMap.values.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfgrcwnea.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScoreMap.values.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgameScoreSet is already defined as \e[33mvalue\e[0m \e[35mgameScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfgrcwnea.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreSet\e[0m = guessScoreMap.values.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreSet is already defined as \e[33mvalue\e[0m \e[35mguessScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfgrcwnea.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScoreSet.toSet\n\
    \e[31"
  stdout: ''
  timestamp: 1659797744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ - game(index) }\n        val guessesCorrect = guessesScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val guessesDiff\
    \ = guessesScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score - guess(index) }\n        val guessesDiffCorrect = guessesDiff.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val guessesDiffDiff\
    \ = guessesDiff.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score - guess(index) }\n        val guessesDiffDiffCorrect = guessesDiffDiff.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val guessesDiffDiffDiff\
    \ = guessesDiffDiff.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score - guess(index) }\n        val guessesDiffDiffDiffCorrect = guessesDiffDiffDiff.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val guessesDiffDiffDiffDiff\
    \ = guessesDiffDiffDiff.zipWithIndex.map { case (score, index) => if (score <\
    \ 0) -score else score - guess(index) }\n        val guessesDiffDiffDiffDiffCorrect\
    \ = guessesDiffDiffDiffDiff.zipWithIndex.map { case (score, index) => if (score\
    \ < 0) -score else score }\n        val guessesDiffDiffDiffDiffDiff = guessesDiffDiffDiffDiff.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score - guess(index) }\n\
    \        val guessesDiffDiffDiffDiffCorrect = guessesDiffDiffDiffDiff.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val guessesDiffDiffDiffDiffDiff\
    \ = guessesDiffDiffDiffDiff.zipWithIndex.map { case (score, index) => if (score\
    \ < 0) -score else score - guess(index) }\n        val guessesDiffDiffDiffDiffCorrect\
    \ = guessesDiffDiffDiffDiff.zipWithIndex.map { case \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmps0bnosk9.scala:31:92 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mguessesDiffDiffDiffDiffCorrect\e\
    [0m = guessesDiffDiffDiffDiff.zipWithIndex.map { \e[33mcase\e[0m \n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \                            pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmps0bnosk9.scala:41:0 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps0bnosk9.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesDiffDiffDiffDiffCorrect\e[0m = guessesDiffDiffDiffDiff.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => \e[33mif\e[0m (score < \e[31m0\e[0m) -score\
    \ \e[33melse\e[0m score }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesDiffDiffDiffDiffCorrect is already defined as \e[33mvalue\e\
    [0m \e[35mguessesDiffDiffDiffDiffCorrect\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmps0bnosk9.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mguessesDiffDiffDiffDiffDiff\e\
    [0m = guessesDiffDiffDiffDiff.zipWithIndex.map { \e[33mcase\e[0m (score, index)\
    \ => \e[33mif\e[0m (score < \e[31m0\e[0m) -score \e[33melse\e[0m score - guess(index)\
    \ }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesDiffDiffDiffDiffDiff is already defined as \e[33mvalue\e\
    [0m \e[35mguessesDiffDiffDiffDiffDiff\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659797744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScoreList = gameScoreMap.toList\n        val guessesScoreList = guessesScoreMap.toList\n\
    \        val gameScoreSet = gameScoreList.toSet\n        val guessesScoreSet =\
    \ guessesScoreList.toSet\n        val gameScoreMap = gameScoreList.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesScoreMap\
    \ = guessesScoreList.zipWithIndex.map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreSet = gameScoreList.toSet\n        val guessesScoreSet\
    \ = guessesScoreList.toSet\n        val gameScoreMap = gameScoreList.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesScoreMap\
    \ = guessesScoreList.zipWithIndex.map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreSet = gameScoreList.toSet\n        val guessesScoreSet\
    \ = guessesScoreList.toSet\n        val gameScoreMap = gameScoreList.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesScoreMap\
    \ = guessesScoreList.zipWithIndex.map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreSet = gameScoreList.toSet\n        val guessesScoreSet\
    \ = guessesScoreList.toSet\n        val gameScoreMap = gameScoreList.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesScoreMap\
    \ = guessesScoreList.zipWithIndex.map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreSet = gameScoreList.toSet\n        val guessesScoreSet\
    \ = guessesScoreList.toSet\n        val gameScoreMap = gameScoreList.zipWithIndex.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesScoreMap\
    \ = guessesScoreList.zipWithIndex.map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreSet = gameScoreList.toSet\n        val guessesScoreSet\
    \ = guessesScore\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq88qnv3l.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScoreList.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => index -> score }.toMap\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq88qnv3l.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreMap\e[0m = guessesScoreList.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => index -> score }.toMap\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreMap is already defined as \e[33mvalue\e[0m \e\
    [35mguessesScoreMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpq88qnv3l.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScoreList.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreSet is already defined as \e[33mvalue\e[0m \e[35mgameScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq88qnv3l.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreSet\e[0m = guessesScoreList.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mguessesScoreSet is already defined as \e[33mvalue\e[0m \e[35mguessesScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in t"
  stdout: ''
  timestamp: 1659797744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{ case (score, index) => score - guess(index) }\n     \
    \   val gameScoreSum = gameScores.sum\n        val gameScoreDiff = gameScores.map(x\
    \ => Math.abs(x)).sum\n        val gameScoreDiffPercent = gameScoreDiff / gameScoreSum\
    \ * 100\n        val gameScoreDiffPercentString = gameScoreDiffPercent.toString\n\
    \        val gameScoreDiffPercentInt = gameScoreDiffPercent.toInt\n        val\
    \ gameScoreDiffPercentFloat = gameScoreDiffPercent.toFloat\n        val gameScoreDiffPercentInt\
    \ = gameScoreDiffPercent.toInt\n        val gameScoreDiffPercentFloat = gameScoreDiffPercent.toFloat\n\
    \        val gameScoreDiffPercentInt = gameScoreDiffPercent.toInt\n        val\
    \ gameScoreDiffPercentFloat = gameScoreDiffPercent.toFloat\n        val gameScoreDiffPercentInt\
    \ = gameScoreDiffPercent.toInt\n        val gameScoreDiffPercentFloat = gameScoreDiffPercent.toFloat\n\
    \        val gameScoreDiffPercentInt = gameScoreDiffPercent.toInt\n        val\
    \ gameScoreDiffPercentFloat = gameScoreDiffPercent.toFloat\n        val gameScoreDiffPercentInt\
    \ = gameScoreDiffPercent.toInt\n        val gameScoreDiffPercentFloat = gameScoreDiffPercent.toFloat\n\
    \        val gameScoreDiffPercentInt = gameScoreDiffPercent.toInt\n        val\
    \ gameScoreDiffPercentFloat = gameScoreDiffPercent.toFloat\n        val gameScoreDiffPercentInt\
    \ = gameScoreDiffPercent.toInt\n        val gameScoreDiffPercentFloat = gameScoreDiffPercent.toFloat\n\
    \        val gameScoreDiffPercentInt = gameScoreDiffPercent.toInt\n        val\
    \ gameScoreDiffPercentFloat = gameScoreDiffPercent.toFloat\n        val gameScoreDiffPercentInt\
    \ = gameScoreDiffPercent.toInt\n        val gameScoreDiffPercentFloat = gameScoreDiffPercent.toFloat\n\
    \        val gameScoreDiffPercentInt = gameScoreDiffPercent.toInt\n        val\
    \ gameScoreDiffPercentFloat = gameScoreDiffPercent.toFloat\n        val gameScoreDiffPercentInt\
    \ = gameScoreDiffPercent.toInt\n        val gameScoreDiffPercentFloat = gameScoreDiffPercent.toFloat\n\
    \        val gameScoreDiffPercentInt = gameScoreDiffPercent.toInt\n        val\
    \ gameScoreDiffPercentFloat = gameScoreDiffPercent.toFloat\n        val gameScoreDiffPercentInt\
    \ = gameScoreDiffPercent.toInt\n        val gameScoreDiffPercentFloat = gameScoreDiffPercent.toFloat\n\
    \        val gameScoreDiffPercentInt = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpf7_79npc.scala:50:37 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffPercentInt\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf7_79npc.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffPercentInt\e[0m = gameScoreDiffPercent.toInt\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgameScoreDiffPercentInt is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreDiffPercentInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf7_79npc.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffPercentFloat\e\
    [0m = gameScoreDiffPercent.toFloat\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffPercentFloat is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffPercentFloat\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf7_79npc.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffPercentInt\e\
    [0m = gameScoreDiffPercent.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffPercentInt is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffPercentInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf7_79npc.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659797743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toList\n\
    \        val scores = game.toList\n        val guessesCount = guesses.size\n \
    \       val scoresCount = scores.size\n        val guessesToScores = guesses.zip(scores)\n\
    \        val scoresToGuesses = scores.zip(guesses)\n        val guessesToGuesses\
    \ = guesses.zip(guesses)\n        val guessesToGuessesCount = guessesToGuesses.size\n\
    \        val scoresToGuessesCount = scoresToGuesses.size\n        val guessesToGuessesToScores\
    \ = guessesToGuesses.zip(scoresToGuesses)\n        val scoresToGuessesToGuesses\
    \ = scoresToGuesses.zip(guessesToGuesses)\n        val guessesToGuessesToGuessesCount\
    \ = guessesToGuessesToScores.size\n        val scoresToGuessesToGuessesCount =\
    \ scoresToGuessesToGuesses.size\n        val guessesToGuessesToGuessesToScores\
    \ = guessesToGuessesToGuesses.zip(scoresToGuessesToGuesses)\n        val scoresToGuessesToGuessesToGuesses\
    \ = scoresToGuessesToGuesses.zip(guessesToGuessesToGuesses)\n        val guessesToGuessesToGuessesToGuessesCount\
    \ = guessesToGuessesToGuessesToScores.size\n        val scoresToGuessesToGuessesToGuessesCount\
    \ = scoresToGuessesToGuessesToGuesses.size\n        val guessesToGuessesToGuessesToGuessesToScores\
    \ = guessesToGuessesToGuessesToGuesses.zip(scoresToGuessesToGuessesToGuesses)\n\
    \        val scoresToGuessesToGuessesToGuessesToGuessesCount = scoresToGuessesToGuessesToGuessesToGuesses.size\n\
    \        val guessesToGuessesToGuessesToGuessesToGuessesCount = guessesToGuessesToGuessesToGuessesToScores.size\n\
    \        val guessesToGuessesToGuessesToGuessesToGuessesCount = guessesToGuessesToGuessesToGuessesToG\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9v6qwag_.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mguessesToGuessesToGuessesToGuessesToGuessesCount\e\
    [0m = guessesToGuessesToGuessesToGuessesToG\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesToGuessesToGuessesToGuessesToGuessesCount is already\
    \ defined as \e[33mvalue\e[0m \e[35mguessesToGuessesToGuessesToGuessesToGuessesCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp9v6qwag_.scala:30:48 ------------------------\e[0m\e[0m\n\
    \e[31m30 |\e[0m        \e[33mval\e[0m \e[36mguessesToGuessesToGuessesToScores\e\
    [0m = guessesToGuessesToGuesses.zip(scoresToGuessesToGuesses)\n\e[31m\e[31m  \
    \ |\e[0m                                                ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Not found: guessesToGuessesToGuesses\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9v6qwag_.scala:31:77\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mscoresToGuessesToGuessesToGuesses\e[0m = scoresToGuessesToGuesses.zip(guessesToGuessesToGuesses)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                            Not found: guessesToGuessesToGuesses\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9v6qwag_.scala:34:57 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mguessesToGuessesToGuessesToGuessesToScores\e\
    [0m = guessesToGuessesToGuessesToGuesses.zip(scoresToGuessesToGuessesToGuesses)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1659797743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScore\
    \ = gameScores.sum\n        val guessScore = guessScores.sum\n        val gameScoreDiff\
    \ = gameScore - guessScore\n        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n\
    \        val gameScoreDiffAbsArray = gameScoreDiffAbs.toArray.map(_.toLong)\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArray.length\n    \
    \    val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAb\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmput3l0h1_.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsArrayLength\e\
    [0m = gameScoreDiffAbsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmput3l0h1_.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsArrayLength\e\
    [0m = gameScoreDiffAbsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmput3l0h1_.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsArrayLength\e\
    [0m = gameScoreDiffAbsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmput3l0h1_.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsArrayLength\e\
    [0m = gameScoreDiffAbsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all b"
  stdout: ''
  timestamp: 1659797696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guess\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkcqkm67_.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkcqkm67_.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkcqkm67_.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkcqkm67_.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkcqkm67_.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659797674
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val guessesCorrect\
    \ = guessesScores.zip(gameScores).map { case (guess, score) => (guess, score)\
    \ }\n        val guessesIncorrect = guessesScores.zip(gameScores).filter { case\
    \ (guess, score) => guess != score }\n        val guessesDiff = guessesCorrect\
    \ ++ guessesIncorrect\n        guessesDiff.map { case (guess, score) => Math.abs(guess\
    \ - score) }\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp48qg4yi3.scala:25)\n\tat Problem.main(tmp48qg4yi3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val results = new mutable.ListBuffer[Long]()\n\
    \        val guessesRemaining = guessesCount - 1\n        val scoresRemaining\
    \ = scoresCount - 1\n        val guessesRemaining2 = guessesCount - 2\n      \
    \  val scoresRemaining2 = scoresCount - 2\n        val guessesRemaining3 = guessesCount\
    \ - 3\n        val scoresRemaining3 = scoresCount - 3\n        val guessesRemaining4\
    \ = guessesCount - 4\n        val scoresRemaining4 = scoresCount - 4\n       \
    \ val guessesRemaining5 = guessesCount - 5\n        val scoresRemaining5 = scoresCount\
    \ - 5\n        val guessesRemaining6 = guessesCount - 6\n        val scoresRemaining6\
    \ = scoresCount - 6\n        val guessesRemaining7 = guessesCount - 7\n      \
    \  val scoresRemaining7 = scoresCount - 7\n        val guessesRemaining8 = guessesCount\
    \ - 8\n        val scoresRemaining8 = scoresCount - 8\n        val guessesRemaining9\
    \ = guessesCount - 9\n        val scoresRemaining9 = scoresCount - 9\n       \
    \ val guessesRemaining10 = guessesCount - 10\n        val scoresRemaining10 =\
    \ scoresCount - 10\n        val guessesRemaining11 = guessesCount - 11\n     \
    \   val scoresRemaining11 = scoresCount - 11\n        val guessesRemaining12 =\
    \ guessesCount - 12\n        val scoresRemaining12 = scoresCount - 12\n      \
    \  val guessesRemaining13 = guessesCount - 13\n        val scoresRemaining13 =\
    \ scoresCount - 13\n        val guessesRemaining14 = guessesCount - 14\n     \
    \   val scoresRemaining14 = scoresCount - 14\n        val guessesRemaining15 =\
    \ guessesCount - 15\n        val scoresRemaining15 = scoresCount - 15\n      \
    \  val guessesRemaining16 = guessesCount - 16\n        val scoresRemaining16 =\
    \ scoresCount - 16\n        val guessesRemaining17 = guessesCount - 17\n     \
    \   val scoresRemaining17 = scoresCount - 17\n        val guessesRemaining18 =\
    \ guessesCount - 18\n        val scoresRemaining18 = scoresCount - 18\n      \
    \  val guessesRemaining19 = guessesCount - 19\n        val scoresRemaining19 =\
    \ scoresCount - 19\n        val guessesRemain\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzio5s152.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzio5s152.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mguesses\e[0m = gues\n\e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: gues\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzio5s152.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresults\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzio5s152.scala:61:5\
    \ ---------------------\e[0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guess\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkcqkm67_.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkcqkm67_.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkcqkm67_.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkcqkm67_.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkcqkm67_.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659797674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val guessesWithScores = guessesScores.map { case (score, index) =>\
    \ score -> gameScores(index) }\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSorted\
    \ = guessesWithIndexes.sortBy(_._1)\n        val guessesWithIndexesSortedReversed\
    \ = guessesWithIndexesSorted.reverse\n        val guessesWithIndexesSortedReversedSorted\
    \ = guessesWithIndexesSortedReversed.sortBy(_._2)\n        val guessesWithIndexesSortedReversedSortedWithIndex\
    \ = guessesWithIndexesSortedReversedSorted.map { case (score, index) => index\
    \ -> score }\n        val guessesWithIndexesSortedReversedSortedWithIndexSorted\
    \ = guessesWithIndexesSortedReversedSortedWithIndex.sortBy(_._1)\n        val\
    \ guessesWithIndexesSortedReversedSortedWithIndexSortedReversed = guessesWithIndexesSortedReversedSortedWithIndexSortedReversed.reverse\n\
    \        val guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSorted\
    \ = guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSorted.sortBy(_._2)\n\
    \        val guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSortedWithIndex\
    \ = guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSortedWithIndex.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSortedWithIndexSorted\
    \ = guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSortedWithIndexSorted.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSortedWithIndexSortedReversed\
    \ = guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSortedWithIndexSortedReversed.reverse\n\
    \        val guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSortedWithIndexSortedReversedSorted\
    \ = guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSortedWithIndexSortedReversedSorted.sortBy(_._2)\n\
    \        val guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSortedWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8yw23wkj.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8yw23wkj.scala:26:76\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedReversedSortedWithIndexSortedReversed\e[0m = guessesWithIndexesSortedReversedSortedWithIndexSortedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mguessesWithIndexesSortedReversedSortedWithIndexSortedReversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8yw23wkj.scala:27:82\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedReversedSortedWithIndexSortedReversedSorted\e\
    [0m = guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSorted.sortBy(_._2)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mguessesWithIndexesSortedReversedSortedWithIndexSortedReversedSorted\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8yw23wkj.scala:28:91\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedReversedSortedWithIndexSortedReversedSortedWithIndex\e\
    [0m = guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSortedWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => index -> score }\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m\
    \   |\e[0m  guessesWithIndexesSortedReversedSortedWithIndexSortedReversedSortedWithIndex\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guess.zip(gameScores).map\
    \ { case (guess, score) => (guess, score) }.toMap\n        val guessesWithIndexes\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> index }.toMap\n \
    \       val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => (guess, index) -> score }.toMap\n        val guessesWithIndexesWithScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score ->\
    \ score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScores = guess.zipWithIndex.map\
    \ { case (guess, index) => (guess, index) -> score -> score -> score }.toMap\n\
    \        val guessesWithIndexesWithScoreAndScoreAndScoreAndScores = guess.zipWithIndex.map\
    \ { case (guess, index) => (guess, index) -> score -> score -> score -> score\
    \ }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score ->\
    \ score -> score -> score -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score ->\
    \ score -> score -> score -> score -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score ->\
    \ score -> score -> score -> score -> score -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => (guess, index) -> score ->\
    \ score -> score -> score -> score -> score -> score -> score }.toMap\n      \
    \  val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScore\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprcrcqc9d.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprcrcqc9d.scala:21:109\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesWithScores\e[0m = guess.zipWithIndex.map { \e[33mcase\e\
    [0m (guess, index) => (guess, index) -> score }.toMap\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \                                ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                                       Not found: score\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprcrcqc9d.scala:22:117 -----------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScoreAndScores\e\
    [0m = guess.zipWithIndex.map { \e[33mcase\e[0m (guess, index) => (guess, index)\
    \ -> score -> score }.toMap\n\e[31m\e[31m   |\e[0m                           \
    \                                                                            \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \                     Not found: score\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmprcrcqc9d.scala:22:126 -----------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScoreAndScores\e\
    [0m = guess.zipWithIndex.map { \e[33mcase\e[0m (guess, index) => (guess, index)\
    \ -> score -> score }.toMap\n\e[31m\e[31m   |\e[0m                           \
    \                                                                            \
    \                       ^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                              Not found: score\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprcrcqc9d.scala:23:125 ------------"
  stdout: ''
  timestamp: 1659797650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScoreListSize\
    \ = gameScoreList.size\n        val guessesScoreListSize = guessesScoreList.size\n\
    \        val gameScoreListSize = gameScoreListSize + 1\n        val guessesScoreListSize\
    \ = guessesScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize\
    \ + 1\n        val guessesScoreListSize = guessesScoreListSize + 1\n        val\
    \ gameScoreListSize = gameScoreListSize + 1\n        val guessesScoreListSize\
    \ = guessesScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize\
    \ + 1\n        val guessesScoreListSize = guessesScoreListSize + 1\n        val\
    \ gameScoreListSize = gameScoreListSize + 1\n        val guessesScoreListSize\
    \ = guessesScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize\
    \ + 1\n        val guessesScoreListSize = guessesScoreListSize + 1\n        val\
    \ gameScoreListSize = gameScoreListSize + 1\n        val guessesScoreListSize\
    \ = guessesScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize\
    \ + 1\n        val guessesScoreListSize = guessesScoreListSize + 1\n        val\
    \ gameScoreListSize = gameScoreListSize + 1\n        val guessesScoreListSize\
    \ = guessesScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize\
    \ + 1\n        val guessesScoreListSize = guessesScoreListSize + 1\n        val\
    \ gameScoreListSize = gameScoreListSize + 1\n        val guessesScoreListSize\
    \ = guessesScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize\
    \ + 1\n        val guessesScoreListSize = guessesScoreListSize + 1\n        val\
    \ gameScoreListSize = gameScoreListSize + 1\n        val guessesScoreListSize\
    \ = guessesScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize\
    \ + 1\n        val guessesScoreListSize = guessesScoreListSize + 1\n        val\
    \ gameScoreListSize = gameScoreListSize + 1\n        val guessesScoreListSize\
    \ = guessesScoreListSize + 1\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxaj13rd1.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m =\
    \ gameScoreListSize + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreListSize is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxaj13rd1.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreListSize\e[0m\
    \ = guessesScoreListSize + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreListSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessesScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxaj13rd1.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m =\
    \ gameScoreListSize + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreListSize is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxaj13rd1.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreListSize\e[0m\
    \ = guessesScoreListSize + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreListSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessesScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxaj13rd1.scala:29:12 ---------------------"
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => x._1 - x._2)\n        val guessScores = guess.zipWithIndex.map(x\
    \ => x._1 - x._2)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScoreDiff\
    \ = gameScoreList.zip(guessScoreList).map(x => x._1 - x._2).map(x => if (x ==\
    \ 0) 0 else x)\n        val gameScoreDiffList = gameScoreDiff.toList\n       \
    \ val gameScoreDiffMap = gameScoreDiffList.zipWithIndex.map(x => (x._2, x._1)).toMap\n\
    \        val gameScoreDiffList = gameScoreDiffMap.values.toList\n        val gameScoreDiffMap\
    \ = gameScoreDiffList.zipWithIndex.map(x => (x._1, x._2)).toMap\n        val gameScoreDiffList\
    \ = gameScoreDiffMap.values.toList\n        val gameScoreDiffMap = gameScoreDiffList.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gameScoreDiffList = gameScoreDiffMap.values.toList\n\
    \        val gameScoreDiffMap = gameScoreDiffList.zipWithIndex.map(x => (x._1,\
    \ x._2)).toMap\n        val gameScoreDiffList = gameScoreDiffMap.values.toList\n\
    \        val gameScoreDiffMap = gameScoreDiffList.zipWithIndex.map(x => (x._2,\
    \ x._1)).toMap\n        val gameScoreDiffList = gameScoreDiffMap.values.toList\n\
    \        val gameScoreDiffMap = gameScoreDiffList.zipWithIndex.map(x => (x._1,\
    \ x._2)).toMap\n        val gameScoreDiffList = gameScoreDiffMap.values.toList\n\
    \        val gameScoreDiffMap = gameScoreDiffList.zipWithIndex.map(x => (x._2,\
    \ x._1)).toMap\n        val gameScoreDiffList = gameScoreDiffMap.values.toList\n\
    \        val gameScoreDiffMap = gameScoreDiffList.zipWithIndex.map(x => (x._1,\
    \ x._2)).toMap\n        val gameScoreDiffList = gameScoreDiffMap.values.toList\n\
    \        val gameScoreDiffMap = gameScoreDiffList.zipWithIndex.map(x => (x._2,\
    \ x._1)).toMap\n        val gameScoreDiffList = gameScoreDiffMap.values.toList\n\
    \        val gameScoreDiffMap = gameScoreDiffList.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp16cp7nbr.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp16cp7nbr.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffList\e[0m = gameScoreDiffMap.values.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffList is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreDiffList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp16cp7nbr.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffMap\e[0m =\
    \ gameScoreDiffList.zipWithIndex.map(\e[36mx\e[0m => (x._1, x._2)).toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffMap is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreDiffMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp16cp7nbr.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffList\e[0m =\
    \ gameScoreDiffMap.values.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffList is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreDiffList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp16cp7nbr.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffMap\e[0m =\
    \ gameScoreDiffList.zipWithIndex.map(\e[36mx\e[0m => (x._2, x._1)).toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreDiff = gameScoreCount - guessScoreCount\n        val guessScoreDiff\
    \ = guessScoreCount - gameScoreCount\n        val gameScoreDiffList = gameScoreDiff.map(x\
    \ => gameScoreDiff.indexOf(x) + 1)\n        val guessScoreDiffList = guessScoreDiff.map(x\
    \ => guessScoreDiff.indexOf(x) + 1)\n        val gameScoreDiffList2 = gameScoreDiffList.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffList2 = guessScoreDiffList.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffList3 = gameScoreDiffList2.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffList3 = guessScoreDiffList2.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffList4 = gameScoreDiffList3.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffList4 = guessScoreDiffList3.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffList5 = gameScoreDiffList4.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffList5 = guessScoreDiffList4.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffList6 = gameScoreDiffList5.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffList6 = guessScoreDiffList5.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffList7 = gameScoreDiffList6.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffList7 = guessScoreDiffList6.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffList8 = gameScoreDiffList7.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffList8 = guessScoreDiffList7.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffList9 = gameScoreDiffList8.zipWithIndex.map\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppn633_ke.scala:21:43 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiff\e[0m = gameScoreCount\
    \ - guessScoreCount\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of (Long => Boolean) => Int, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmppn633_ke.scala:22:45 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiff\e[0m = guessScoreCount\
    \ - gameScoreCount\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of (Long => Boolean) => Int, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppn633_ke.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659797750
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val result = guessScores.map { case (score, index) =>\n\
    \            val gameScore = gameScores(score)\n            if (gameScore == None)\
    \ 0\n            else gameScore - guessScores(score)\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptqyva3h9.scala:21:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (gameScore == None) \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m    Values of types Int and object None cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptqyva3h9.scala:24:8 ---------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : scala.collection.immutable.Iterable[Int])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toList\n\
    \        val scores = game.toList\n        val guessesCount = guesses.size\n \
    \       val scoresCount = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < guessesCount) {\n            val guess\
    \ = guesses(i)\n            val score = scores(i)\n            val difference\
    \ = guess - score\n            if (difference < 0) {\n                result.add(difference)\n\
    \            } else {\n                result.add(Math.abs(difference))\n    \
    \        }\n            i += 1\n        }\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpia0pkyd8.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val guessesScoreList = new mutable.ListBuffer[Long]()\n        val gameScoreList\
    \ = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach { case (score,\
    \ index) =>\n            if (guessesScoreMap.contains(index)) {\n            \
    \    val guess = guessesScoreMap(index)\n                val gameScore = gameScoreMap(index)\n\
    \                val difference = guess - gameScore\n                guessesScoreList\
    \ += difference\n                gameScoreList += gameScore\n            }\n \
    \       }\n        guessesScoreList.map(_.abs)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpey6pom00.scala:19:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- Error: /tmp/tmpey6pom00.scala:20:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreMap\e[0m = guessesScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m                                       Cannot prove that Long <:<\
    \ (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                   \
    \    where:    K is a type variable\n\e[31m   |\e[0m                         \
    \                        V is a type variable\n\e[31m   |\e[0m               \
    \                        .\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpey6pom00.scala:21:35\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesScoreList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                   Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpey6pom00.scala:22:32 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = \e\
    [33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => x._2 - x._1)\n        val guessScores = guess.zipWithIndex.map(x\
    \ => x._2 - x._1)\n        val gameScore = gameScores.sum\n        val guessScore\
    \ = guessScores.sum\n        val gameScoreDiff = gameScore - guessScore\n    \
    \    val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n        val gameScoreDiffAbsMinusOne\
    \ = gameScoreDiffAbs - 1\n        val gameScoreDiffAbsMinusTwo = gameScoreDiffAbs\
    \ - 2\n        val gameScoreDiffAbsMinusThree = gameScoreDiffAbs - 3\n       \
    \ val gameScoreDiffAbsMinusFour = gameScoreDiffAbs - 4\n        val gameScoreDiffAbsMinusFive\
    \ = gameScoreDiffAbs - 5\n        val gameScoreDiffAbsMinusSix = gameScoreDiffAbs\
    \ - 6\n        val gameScoreDiffAbsMinusSeven = gameScoreDiffAbs - 7\n       \
    \ val gameScoreDiffAbsMinusEight = gameScoreDiffAbs - 8\n        val gameScoreDiffAbsMinusNine\
    \ = gameScoreDiffAbs - 9\n        val gameScoreDiffAbsMinusTen = gameScoreDiffAbs\
    \ - 10\n        val gameScoreDiffAbsMinusEleven = gameScoreDiffAbs - 11\n    \
    \    val gameScoreDiffAbsMinusTwelve = gameScoreDiffAbs - 12\n        val gameScoreDiffAbsMinusThirteen\
    \ = gameScoreDiffAbs - 13\n        val gameScoreDiffAbsMinusFourteen = gameScoreDiffAbs\
    \ - 14\n        val gameScoreDiffAbsMinusFifteen = gameScoreDiffAbs - 15\n   \
    \     val gameScoreDiffAbsMinusSixteen = gameScoreDiffAbs - 16\n        val gameScoreDiffAbsMinusSeventeen\
    \ = gameScoreDiffAbs - 17\n        val gameScoreDiffAbsMinusEighteen = gameScoreDiffAbs\
    \ - 18\n        val gameScoreDiffAbsMinusNineteen = gameScoreDiffAbs - 19\n  \
    \      val gameScoreDiffAbsMinusTwenty = gameScoreDiffAbs - 20\n        val gameScoreDiffAbsMinusThirty\
    \ = gameScoreDiffAbs - 30\n        val gameScoreDiffAbsMinusFourty = gameScoreDiffAbs\
    \ - 40\n        val gameScoreDiffAbsMin\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpue8crexx.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpue8crexx.scala:46:5 ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => x._1 + x._2)\n        val guessScores = guess.zipWithIndex.map(x\
    \ => x._1 + x._2)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScores.toList\n       \
    \ val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2ujqasj7.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ujqasj7.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ujqasj7.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ujqasj7.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ujqasj7.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659797762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val gameScoreDiff = gameScore - gameScores.min\n\
    \        val gameScoreDiffAbs = gameScoreDiff.abs\n        gameScoreDiffAbs.toList.map(_.toLong).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpchbtiv4q.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        gameScoreDiffAbs.toList.map(_.toLong).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toList is not a member of Long - did you mean gameScoreDiffAbs.toInt?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{ case (score, index) => score - guess(index) }\n     \
    \   val gameScore = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map{\
    \ case (score, index) => if (score == 0) 0 else abs(score - gameScore) }\n   \
    \     gameScores.toList\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp08mgc6o2.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.zipWithIndex.map{\
    \ \e[33mcase\e[0m (score, index) => \e[33mif\e[0m (score == \e[31m0\e[0m) \e[31m0\e\
    [0m \e[33melse\e[0m abs(score - gameScore) }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659797755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val guessesScores =\
    \ guess.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val guessesWithScores\
    \ = guessesScores.filter(_._2 > 0).map(_._1)\n        val guessesWithoutScores\
    \ = guessesScores.filter(_._2 < 0).map(_._1)\n        val guessesWithScoreAndScores\
    \ = guessesWithScores.zip(guessesScores).filter(_._2 > 0).map(_._1)\n        val\
    \ guessesWithoutScoreAndScores = guessesWithScores.zip(guessesScores).filter(_._2\
    \ < 0).map(_._1)\n        val guessesWithScoreAndGuess = guessesWithScores.zip(guessesWithScores).filter(_._2\
    \ > 0).map(_._1)\n        val guessesWithoutScoreAndGuess = guessesWithScores.zip(guessesWithScores).filter(_._2\
    \ < 0).map(_._1)\n        val guessesWithScoreAndGuessAndScores = guessesWithScoreAndGuess.zip(guessesScores).filter(_._2\
    \ > 0).map(_._1)\n        val guessesWithoutScoreAndGuessAndScores = guessesWithScoreAndGuess.zip(guessesScores).filter(_._2\
    \ < 0).map(_._1)\n        val guessesWithScoreAndGuessAndGuess = guessesWithScoreAndGuess.zip(guessesWithScores).filter(_._2\
    \ > 0).map(_._1)\n        val guessesWithoutScoreAndGuessAndGuess = guessesWithScoreAndGuess.zip(guessesWithScores).filter(_._2\
    \ < 0).map(_._1)\n        val guessesWithScoreAndGuessAndGuessAndScores = guessesWithScoreAndGuessAndGuess.zip(guessesScores).filter(_._2\
    \ > 0).map(_._1)\n        val guessesWithoutScoreAndGuessAndGuessAndScores = guessesWithScoreAndGuessAndGuess.zip(guessesScores).filter(_._2\
    \ < 0).map(_._1)\n        val guessesWithScoreAndGuessAndGuessAndGuess = guessesWithScoreAndGuessAndGuess.zip(guessesWithScores).filter(_._2\
    \ > 0).map(_._1)\n        val guessesWithoutScoreAndGuessAndGuessAndGuess = guessesWithScoreAndGuessAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsvx6v7r7.scala:21:89 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreAndScores\e\
    [0m = guessesWithScores.zip(guessesScores).filter(_._2 > \e[31m0\e[0m).map(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                            ^^^^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member\
    \ of (Int, Long), but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m\
    \   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsvx6v7r7.scala:22:92 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesWithoutScoreAndScores\e\
    [0m = guessesWithScores.zip(guessesScores).filter(_._2 < \e[31m0\e[0m).map(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                               ^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member\
    \ of (Int, Long), but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m\
    \   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsvx6v7r7.scala:25:104 -----------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreAndGuessAndScores\e\
    [0m = guessesWithScoreAndGuess.zip(guessesScores).filter(_._2 > \e[31m0\e[0m).map(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                           ^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ > is not a member of (Int, Long), but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.I"
  stdout: ''
  timestamp: 1659797770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (index, score) }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val guessesWithScores = guessesScores.map { case (index,\
    \ score) => (index, gameScores(index) - score) }\n        val guessesWithCorrect\
    \ = guessesWithScores.map { case (index, score) => (index, if (score == 0) 0 else\
    \ abs(score)) }\n        guessesWithCorrect.map { case (index, score) => (index,\
    \ score) }\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppm5ttfrj.scala:21:31\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        guessesWithCorrect.map\
    \ { \e[33mcase\e[0m (index, score) => (index, score) }\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    Map[Int, Long]\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScores = gameScores.toList\n        val guessesWithScores = guess.zipWithIndex.map\
    \ { case (score, index) => score - gameScores(index) }\n        val guessesWithScores\
    \ = guessesWithScores.toList\n        guessesWithScores.map { case (guess, score)\
    \ => if (guess == 0) 0 else Math.abs(guess) }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps9n50gni.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps9n50gni.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScores\e[0m = guessesWithScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScores is already defined as \e[33mvalue\e[0m \e\
    [35mguessesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmps9n50gni.scala:21:83 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        guessesWithScores.map { \e[33mcase\e[0m (guess,\
    \ score) => \e[33mif\e[0m (guess == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m\
    \ Math.abs(guess) }\n\e[31m\e[31m   |\e[0m                                   \
    \                                           ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mabs\e[0m in \e[33mobject\e\
    [0m \e[35mMath\e[0m with types\n\e[31m   |\e[0m (x$0: Double): Double\n\e[31m\
    \   |\e[0m (x$0: Float): Float\n\e[31m   |\e[0m (x$0: Long): Long\n\e[31m   |\e\
    [0m (x$0: Int): Int\n\e[31m   |\e[0mmatch arguments ((guess : Any))\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.length\n\
    \        val scores = game.length\n        val guessedCorrectly = mutable.Set[Long]()\n\
    \        val guessedWrongly = mutable.Set[Long]()\n        val guessedCorrectlyCount\
    \ = mutable.Set[Long]()\n        val guessedWronglyCount = mutable.Set[Long]()\n\
    \        val guessedCorrectlyPercentage = mutable.Set[Long]()\n        val guessedWronglyPercentage\
    \ = mutable.Set[Long]()\n        val guessedCorrectlyPercentageCount = mutable.Set[Long]()\n\
    \        val guessedWronglyPercentageCount = mutable.Set[Long]()\n        val\
    \ guessedCorrectlyPercentagePercentage = mutable.Set[Long]()\n        val guessedWronglyPercentagePercentage\
    \ = mutable.Set[Long]()\n        val guessedCorrectlyPercentagePercentageCount\
    \ = mutable.Set[Long]()\n        val guessedWronglyPercentagePercentageCount =\
    \ mutable.Set[Long]()\n        val guessedCorrectlyPercentagePercentagePercentage\
    \ = mutable.Set[Long]()\n        val guessedWronglyPercentagePercentageCount =\
    \ mutable.Set[Long]()\n        val guessedCorrectlyPercentagePercentagePercentage\
    \ = mutable.Set[Long]()\n        val guessedWronglyPercentagePercentageCount =\
    \ mutable.Set[Long]()\n        val guessedCorrectlyPercentagePercentagePercentage\
    \ = mutable.Set[Long]()\n        val guessedWronglyPercentagePercentagePercentage\
    \ = mutable.Set[Long]()\n        val guessedCorrectlyPercentagePercentagePercentagePercentage\
    \ = mutable.Set[Long]()\n        val guessedWronglyPercentagePercentagePercentageCount\
    \ = mutable.Set[Long]()\n        val guessedCorrectlyPercentagePercentagePercentagePercentage\
    \ = mutable.Set[Long]()\n        val guessedWronglyPercentagePercentagePercentagePercentage\
    \ = mutable.Set[Long]()\n        val guessedCorrectlyPercentagePercentagePercentagePercentage\
    \ = mutable.Set[Long]()\n        val guessedWronglyPercentagePercentagePercentagePercentage\
    \ = mutable.Set[Long]()\n        val guessedCorrectlyPercentagePercentagePercentagePercentage\
    \ = mutable.Set[Long]()\n        val guessedWronglyPercentagePercentagePercentagePercentage\
    \ = mutable.Set[Long]()\n        val guessedCorrectlyPercentagePercentagePercentagePercentage\
    \ = mutable.Set[Long]()\n        val guessedWronglyPercentagePercentagePercentagePercentage\
    \ = mutable.Set[Long\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkjzo5bgv.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkjzo5bgv.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessedWronglyPercentagePercentageCount\e[0m = mutable.Set[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessedWronglyPercentagePercentageCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mguessedWronglyPercentagePercentageCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpkjzo5bgv.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessedCorrectlyPercentagePercentagePercentage\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessedCorrectlyPercentagePercentagePercentage is already\
    \ defined as \e[33mvalue\e[0m \e[35mguessedCorrectlyPercentagePercentagePercentage\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkjzo5bgv.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mguessedWronglyPercentagePercentageCount\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessedWronglyPercentagePercentageCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mguessedWronglyPercentagePercentageCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpkjzo5bgv.scala:35:12 ---------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mval\e[0"
  stdout: ''
  timestamp: 1659797764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{case (score, index) => score}\n        val guessScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n\
    \        val gameScoreList = gameScoreList.sortBy(_._1).reverse\n        val guessScoreList\
    \ = guessScoreList.sortBy(_._1).reverse\n        val gameScoreList = gameScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val guessScoreList = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val gameScoreList = gameScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val guessScoreList = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val gameScoreList = gameScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val guessScoreList = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val gameScoreList = gameScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val guessScoreList = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val gameScoreList = gameScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val guessScoreList = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val gameScoreList = gameScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val guessScoreList = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val gameScoreList = gameScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val guessScoreList = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val gameScoreList = gameScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val guessScoreList = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val gameScoreList = gameScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        val guessScoreList = guessScoreList.zipWithIndex.map{case\
    \ (score, index) => score}\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprdce7i0a.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreList.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprdce7i0a.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScoreList.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprdce7i0a.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreList.zipWithIndex.map{\e\
    [33mcase\e[0m (score, index) => score}\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprdce7i0a.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScoreList.zipWithIndex.map{\e\
    [33mcase\e[0m (score, index) => score}\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (index, score) }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => (index, score)\
    \ }\n        val gameScoreSet = gameScores.toSet\n        val guessesScoreSet\
    \ = guessesScores.toSet\n        val gameScoreList = gameScores.toList\n     \
    \   val guessesScoreList = guessesScores.toList\n        val gameScoreSetSize\
    \ = gameScoreSet.size\n        val guessesScoreSetSize = guessesScoreSet.size\n\
    \        val gameScoreSetIterator = gameScoreSet.iterator\n        val guessesScoreSetIterator\
    \ = guessesScoreSet.iterator\n        val gameScoreSetIteratorSize = gameScoreSetIterator.size\n\
    \        val guessesScoreSetIteratorSize = guessesScoreSetIterator.size\n    \
    \    val gameScoreSetIteratorIterator = gameScoreSetIterator.iterator\n      \
    \  val guessesScoreSetIteratorIterator = guessesScoreSetIterator.iterator\n  \
    \      val gameScoreSetIteratorIteratorSize = gameScoreSetIteratorIterator.size\n\
    \        val guessesScoreSetIteratorIteratorSize = guessesScoreSetIteratorIterator.size\n\
    \        val gameScoreSetIteratorIteratorIterator = gameScoreSetIteratorIterator.iterator\n\
    \        val guessesScoreSetIteratorIteratorIterator = guessesScoreSetIteratorIterator.iterator\n\
    \        val gameScoreSetIteratorIteratorIteratorSize = gameScoreSetIteratorIteratorIterator.size\n\
    \        val guessesScoreSetIteratorIteratorIteratorSize = guessesScoreSetIteratorIteratorIterator.size\n\
    \        val gameScoreSetIteratorIteratorIteratorIterator = gameScoreSetIteratorIteratorIterator.iterator\n\
    \        val guessesScoreSetIteratorIteratorIteratorIterator = guessesScoreSetIteratorIteratorIterator.iterator\n\
    \        val gameScoreSetIteratorIteratorIteratorIteratorSize = gameScoreSetIteratorIteratorIteratorIterator.size\n\
    \        val guessesScoreSetIteratorIteratorIteratorIteratorSize = guessesScoreSetIteratorIteratorIteratorIterator.size\n\
    \        val gameScoreSetIteratorIteratorIteratorIteratorIterator = gameScoreSetIteratorIteratorIterator.iterator\n\
    \        val guessesScoreSetIteratorIteratorIteratorIterator = guessesScoreSetIteratorIteratorIterator.iterator\n\
    \        val gameScoreSetIteratorIteratorIteratorIteratorIteratorSize = gameScoreSetIteratorIteratorIteratorIterator.size\n\
    \        val guessesScoreSetIteratorIteratorIteratorIteratorIteratorSize = guessesScoreSetIteratorIteratorIteratorIterator.size\n\
    \        val gameScoreSetIteratorIteratorIteratorIteratorIteratorIterator = gameScoreSetIteratorIteratorIterator.iterator\n\
    \        val guessesScoreSet\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpobrd1v47.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpobrd1v47.scala:42:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesScoreSetIteratorIteratorIteratorIterator\e[0m = guessesScoreSetIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreSetIteratorIteratorIteratorIterator is already\
    \ defined as \e[33mvalue\e[0m \e[35mguessesScoreSetIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpobrd1v47.scala:47:5 ---------------------\e[0m\e[0m\n\
    \e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797763
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n       \
    \ val guessScoreList = guessScoreMap.toList\n        val gameScoreSet = gameScoreList.toSet\n\
    \        val guessScoreSet = guessScoreList.toSet\n        val gameScoreList =\
    \ gameScoreList.map { case (score, index) => score -> index }\n        val guessScoreList\
    \ = guessScoreList.map { case (score, index) => score -> index }\n        val\
    \ gameScoreSet = gameScoreSet.toList\n        val guessScoreSet = guessScoreSet.toList\n\
    \        val gameScoreSet = gameScoreSet.map { case (score, index) => score ->\
    \ index }\n        val guessScoreSet = guessScoreSet.map { case (score, index)\
    \ => score -> index }\n        val gameScoreSet = gameScoreSet.map { case (score,\
    \ index) => score -> index }\n        val guessScoreSet = guessScoreSet.map {\
    \ case (score, index) => score -> index }\n        val gameScoreSet = gameScoreSet.map\
    \ { case (score, index) => score -> index }\n        val guessScoreSet = guessScoreSet.map\
    \ { case (score, index) => score -> index }\n        val gameScoreSet = gameScoreSet.map\
    \ { case (score, index) => score -> index }\n        val guessScoreSet = guessScoreSet.map\
    \ { case (score, index) => score -> index }\n        val gameScoreSet = gameScoreSet.map\
    \ { case (score, index) => score -> index }\n        val guessScoreSet = guessScoreSet.map\
    \ { case (score, index) => score -> index }\n        val gameScoreSet = gameScoreSet.map\
    \ { case (score, index) => score -> index }\n        val guessScoreSet = guessScoreSet.map\
    \ { case (score, index) => score -> index }\n        val gameScoreSet = gameScoreSet.map\
    \ { case (score, index) => score -> index }\n        val guessScoreSet = guessScoreSet.map\
    \ { case (score, index) => score -> index }\n        val gameScoreSet = gameScoreSet.map\
    \ { case (score, index) => score -> index }\n        val guessScoreSet = guessScoreSet.map\
    \ { case (score, index) => score -> index }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoo54antf.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreList.map\
    \ { \e[33mcase\e[0m (score, index) => score -> index }\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoo54antf.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScoreList.map\
    \ { \e[33mcase\e[0m (score, index) => score -> index }\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoo54antf.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScoreSet.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreSet is already defined as \e[33mvalue\e[0m \e[35mgameScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoo54antf.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreSet\e[0m = guessScoreSet.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreSet is already defined as \e[33mvalue\e[0m \e[35mguessScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoo54antf.sca"
  stdout: ''
  timestamp: 1659797768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessesScoreCount = guessesScores.count\n  \
    \      val gameScoreDiff = gameScoreCount - guessesScoreCount\n        val guessesScoreDiff\
    \ = guessesScoreCount - gameScoreCount\n        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessesScoreDiffs = guessesScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffsCount = gameScoreDiffs.count\n\
    \        val guessesScoreDiffsCount = guessesScoreDiffs.count\n        val gameScoreDiffsSum\
    \ = gameScoreDiffsCount.foldLeft(0l)(_ + _)\n        val guessesScoreDiffsSum\
    \ = guessesScoreDiffsCount.foldLeft(0l)(_ + _)\n        val gameScoreDiffsSumAbs\
    \ = gameScoreDiffsSum.abs\n        val guessesScoreDiffsSumAbs = guessesScoreDiffsSum.abs\n\
    \        val gameScoreDiffsSumAbsCount = gameScoreDiffsSumAbs.count\n        val\
    \ guessesScoreDiffsSumAbsCount = guessesScoreDiffsSumAbs.count\n        val gameScoreDiffsSumAbsSum\
    \ = gameScoreDiffsSumAbsCount.foldLeft(0l)(_ + _)\n        val guessesScoreDiffsSumAbsSum\
    \ = guessesScoreDiffsSumAbsCount.foldLeft(0l)(_ + _)\n        val gameScoreDiffsSumAbsSumAbs\
    \ = gameScoreDiffsSumAbsSum.abs\n        val guessesScoreDiffsSumAbsSumAbs = guessesScoreDiffsSumAbsSum.abs\n\
    \        val gameScoreDiffsSumAbsSumAbsCount = gameScoreDiffsSumAbsSumAbs.count\n\
    \        val guessesScoreDiffsSumAbsSumAbsCount = guessesScoreDiffsSumAbsSumAbs.count\n\
    \        val gameScoreDiffsSumAbsSumAbsSum = gameScoreDiffsSumAbsSumAbsCount.foldLeft(0l)(_\
    \ + _)\n        val guessesScore\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgd9vskmk.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgd9vskmk.scala:21:43\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreDiff\e[0m = gameScoreCount - guessesScoreCount\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is\
    \ not a member of (Long => Boolean) => Int, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgd9vskmk.scala:22:49\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesScoreDiff\e[0m = guessesScoreCount - gameScoreCount\n\e[31m\e[31m \
    \  |\e[0m                               ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue - is not a member of (Long => Boolean) => Int, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpgd9vskmk.scala:41:5 ---------------------\e[0m\e\
    [0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659797770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList =\
    \ new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach { case (score,\
    \ index) => gameScoreList.add(score) }\n        guessScoreMap.foreach { case (score,\
    \ index) => guessScoreList.add(score) }\n        gameScoreList.zip(guessScoreList).map\
    \ { case (gameScore, guessScore) =>\n            if (gameScore == guessScore)\
    \ {\n                0\n            } else {\n                Math.abs(guessScore\
    \ - gameScore)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpve38123q.scala:19:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- Error: /tmp/tmpve38123q.scala:20:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpve38123q.scala:21:32\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpve38123q.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = \e\
    [33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797766
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreDiff = gameScoreCount - guessScoreCount\n        val guessScoreDiff\
    \ = guessScoreCount - gameScoreCount\n        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffs = guessScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffsCount = gameScoreDiffs.count\n\
    \        val guessScoreDiffsCount = guessScoreDiffs.count\n        val gameScoreDiffsSum\
    \ = gameScoreDiffsCount.zip(gameScoreDiffs).sum\n        val guessScoreDiffsSum\
    \ = guessScoreDiffsCount.zip(guessScoreDiffs).sum\n        val gameScoreDiffsSumAbs\
    \ = gameScoreDiffsSum.abs.toLong\n        val guessScoreDiffsSumAbs = guessScoreDiffsSum.abs.toLong\n\
    \        val gameScoreDiffsSumAbsDiff = gameScoreDiffsSumAbs - guessScoreDiffsSumAbs\n\
    \        val gameScoreDiffsSumAbsDiffs = gameScoreDiffsSumAbsDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffsSumAbsDiffsCount\
    \ = gameScoreDiffsSumAbsDiffs.count\n        val gameScoreDiffsSumAbsDiffsCountSum\
    \ = gameScoreDiffsSumAbsDiffsCount.zip(gameScoreDiffsSumAbsDiffs).sum\n      \
    \  val gameScoreDiffsSumAbsDiffsCountSumAbs = gameScoreDiffsSumAbsDiffsCountSum.abs.toLong\n\
    \        val gameScoreDiffsSumAbsDiffsCountSumAbsDiff = gameScoreDiffsSumAbsDiffsCountSumAbs\
    \ - guessScoreDiffsSumAbsDiffsCountSumAbs\n        val gameScoreDiffsSumAbsDiffsCountSumAbsDiffs\
    \ = gameScoreDiffsSumAbsDiffsCountSumAbsDiff.zipWithIndex.map { case (score, index)\
    \ => score }\n        val gameScoreDiffsSumAbsDiffsCountSumAbsDiffsCount = gameScoreDiffsSumAbs\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3zerba4b.scala:21:43 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiff\e[0m = gameScoreCount\
    \ - guessScoreCount\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of (Long => Boolean) => Int, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp3zerba4b.scala:22:45 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiff\e[0m = guessScoreCount\
    \ - gameScoreCount\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of (Long => Boolean) => Int, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp3zerba4b.scala:39:5 ---------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659797770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guess\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkcqkm67_.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkcqkm67_.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkcqkm67_.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkcqkm67_.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkcqkm67_.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659797674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val guessesScores =\
    \ guess.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val guessesWithScores\
    \ = guessesScores.map(x => (x._1, x._2))\n        val guessesWithScoreAndGameScores\
    \ = guessesWithScores ++ gameScores\n        val guessesWithScoreAndGameScoreAndGameScores\
    \ = guessesWithScoreAndGameScores.map(x => (x._1, x._2, x._3))\n        val guessesWithScoreAndGameScoreAndGameScoreAndGameScores\
    \ = guessesWithScoreAndGameScoreAndGameScores.map(x => (x._1, x._2, x._3, x._4))\n\
    \        val guessesWithScoreAndGameScoreAndGameScoreAndGameScoreAndGameScores\
    \ = guessesWithScoreAndGameScoreAndGameScoreAndGameScores.map(x => (x._1, x._2,\
    \ x._3, x._4, x._5))\n        val guessesWithScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScores\
    \ = guessesWithScoreAndGameScoreAndGameScoreAndGameScoreAndGameScores.map(x =>\
    \ (x._1, x._2, x._3, x._4, x._5, x._6))\n        val guessesWithScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScores\
    \ = guessesWithScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScores.map(x\
    \ => (x._1, x._2, x._3, x._4, x._5, x._6, x._7))\n        val guessesWithScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScores\
    \ = guessesWithScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScores.map(x\
    \ => (x._1, x._2, x._3, x._4, x._5, x._6, x._7, x._8))\n        val guessesWithScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScores\
    \ = guessesWithScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScores.map(x\
    \ => (x._1, x._2, x._3, x._4, x._5, x._6, x._7, x._8, x._\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgcl2uh89.scala:27:290 --------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScores\e\
    [0m = guessesWithScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScoreAndGameScores.map(\e\
    [36mx\e[0m => (x._1, x._2, x._3, x._4, x._5, x._6, x._7, x._8, x._\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                            \
    \                                                                            \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                   an identifier expected, but\
    \ '_' found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgcl2uh89.scala:21:110\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithScoreAndGameScoreAndGameScores\e[0m = guessesWithScoreAndGameScores.map(\e\
    [36mx\e[0m => (x._1, x._2, x._3))\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \           ^^^^\e[0m\n\e[31m   |\e[0m            value _3 is not a member of\
    \ (Int, Long) - did you mean x._1?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgcl2uh89.scala:22:140\
    \ -----------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithScoreAndGameScoreAndGameScoreAndGameScores\e[0m = guessesWithScoreAndGameScoreAndGameScores.map(\e\
    [36mx\e[0m => (x._1, x._2, x._3, x._4))\n\e[31m\e[31m   |\e[0m               \
    \                                                                            \
    \                                               ^^^^\e[0m\n\e[31m   |\e[0m   value\
    \ _4 is not a member of (Int, Long, Nothing) - did you mean x._1?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpgcl2uh89.scala:23:170 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m       "
  stdout: ''
  timestamp: 1659797770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameLength =\
    \ game.length\n        val guessLength = guess.length\n        val result = new\
    \ mutable.ListBuffer[Long]()\n        val gameScores = game.zipWithIndex.filter(_._1\
    \ == 1).toList\n        val guessScores = guess.zipWithIndex.filter(_._1 == 1).toList\n\
    \        val gameScore = gameScores.head._2\n        val guessScore = guessScores.head._2\n\
    \        val gameScoreIndex = gameScores.head._1\n        val guessScoreIndex\
    \ = guessScores.head._1\n        val gameScoreDiff = gameScore - guessScore\n\
    \        val guessScoreDiff = guessScore - gameScore\n        val gameScoreDiffIndex\
    \ = gameScoreIndex - guessScoreIndex\n        val guessScoreDiffIndex = guessScoreIndex\
    \ - gameScoreIndex\n        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n \
    \       val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val gameScoreDiffIndexAbs\
    \ = Math.abs(gameScoreDiffIndex)\n        val guessScoreDiffIndexAbs = Math.abs(guessScoreDiffIndex)\n\
    \        val gameScoreDiffAbsIndex = Math.abs(gameScoreDiffAbs)\n        val guessScoreDiffAbsIndex\
    \ = Math.abs(guessScoreDiffAbs)\n        val gameScoreDiffAbsIndexAbs = Math.abs(gameScoreDiffAbsIndex)\n\
    \        val guessScoreDiffAbsIndexAbs = Math.abs(guessScoreDiffAbsIndex)\n  \
    \      val gameScoreDiffAbsIndexAbsIndex = Math.abs(gameScoreDiffAbsIndexAbs)\n\
    \        val guessScoreDiffAbsIndexAbsIndex = Math.abs(guessScoreDiffAbsIndexAbs)\n\
    \        val gameScoreDiffAbsIndexAbsIndexAbs = Math.abs(gameScoreDiffAbsIndexAbsIndex)\n\
    \        val guessScoreDiffAbsIndexAbsIndexAbs = Math.abs(guessScoreDiffAbsIndexAbsIndex)\n\
    \        val gameScoreDiffAbsIndexAbsIndexAbsIndex = Math.abs(gameScoreDiffAbsIndexAbsIndexAbs)\n\
    \        val guessScoreDiffAbsIndexAbsIndexAbsIndex = Math.abs(guessScoreDiffAbsIndexAbsIndexAbs)\n\
    \        val gameScoreDiffAbsIndexAbsIndexAbsIndexAbs = Math.abs(gameScoreDiffAbsIndexAbsIndexAbsIndex)\n\
    \        val guessScoreDiffAbsIndexAbsIndexAbsIndexAbs = Math.abs(guessScoreDiffAbsIndexAbsIndexAbsIndex)\n\
    \        val gameScoreDiffAbsIndexAbsIndexAbsIndexAbsIndexAbs = Math.abs(gameScoreDiff\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn3qncyuc.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn3qncyuc.scala:19:25\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpn3qncyuc.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{ case (score, index) => (index, score) }.toMap\n     \
    \   val guessesScores = guess.zipWithIndex.map{ case (score, index) => (index,\
    \ score) }.toMap\n        val guessesWithScores = guessesScores.map{ case (index,\
    \ score) => (index, gameScores(index) - score) }.toMap\n        val guessesWithScores\
    \ = guessesScores.map{ case (index, score) => (index, gameScores(index) - score)\
    \ }.toMap\n        val guessesWithScores = guessesScores.map{ case (index, score)\
    \ => (index, gameScores(index) - score) }.toMap\n        val guessesWithScores\
    \ = guessesScores.map{ case (index, score) => (index, gameScores(index) - score)\
    \ }.toMap\n        val guessesWithScores = guessesScores.map{ case (index, score)\
    \ => (index, gameScores(index) - score) }.toMap\n        val guessesWithScores\
    \ = guessesScores.map{ case (index, score) => (index, gameScores(index) - score)\
    \ }.toMap\n        val guessesWithScores = guessesScores.map{ case (index, score)\
    \ => (index, gameScores(index) - score) }.toMap\n        val guessesWithScores\
    \ = guessesScores.map{ case (index, score) => (index, gameScores(index) - score)\
    \ }.toMap\n        val guessesWithScores = guessesScores.map{ case (index, score)\
    \ => (index, gameScores(index) - score) }.toMap\n        val guessesWithScores\
    \ = guessesScores.map{ case (index, score) => (index, gameScores(index) - score)\
    \ }.toMap\n        val guessesWithScores = guessesScores.map{ case (index, score)\
    \ => (index, gameScores(index) - score) }.toMap\n        val guessesWithScores\
    \ = guessesScores.map{ case (index, score) => (index, gameScores(index) - score)\
    \ }.toMap\n        val guessesWithScores = guessesScores.map{ case (index, score)\
    \ => (index, gameScores(index) - score) }.toMap\n        val guessesWithScores\
    \ = guessesScores.map{ case (index, score) => (index, gameScores(index) - score)\
    \ }.toMap\n        val guessesWithScores = guessesScores.map\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8pwt9dqo.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScores\e[0m =\
    \ guessesScores.map{ \e[33mcase\e[0m (index, score) => (index, gameScores(index)\
    \ - score) }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScores is already defined as \e[33mvalue\e[0m \e\
    [35mguessesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8pwt9dqo.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScores\e[0m =\
    \ guessesScores.map{ \e[33mcase\e[0m (index, score) => (index, gameScores(index)\
    \ - score) }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScores is already defined as \e[33mvalue\e[0m \e\
    [35mguessesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8pwt9dqo.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScores\e[0m =\
    \ guessesScores.map{ \e[33mcase\e[0m (index, score) => (index, gameScores(index)\
    \ - score) }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScores is already defined as \e[33mvalue\e[0m \e\
    [35mguessesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8pwt9dqo.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScores\e[0m =\
    \ guessesScores.map{ \e[33mcase\e[0m (index, score) => (index, gam"
  stdout: ''
  timestamp: 1659797770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => index -> score }.toMap\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSorted\
    \ = guessesWithIndexes.toSeq.sortBy(_._1)\n        val guessesWithIndexesSortedSortedByScore\
    \ = guessesWithIndexesSorted.toSeq.sortBy(_._2)\n        val guessesWithIndexesSortedSortedByScoreWithIndex\
    \ = guessesWithIndexesSortedSortedByScore.map { case (score, index) => index ->\
    \ score }.toMap\n        val guessesWithIndexesSortedSortedByScoreWithIndexSorted\
    \ = guessesWithIndexesSortedSortedByScoreWithIndex.toSeq.sortBy(_._1)\n      \
    \  val guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScore = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScore.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex\
    \ = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex.toSeq.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScore\
    \ = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScore.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex\
    \ = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex.toSeq.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScore\
    \ = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScore.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5x664ldg.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5x664ldg.scala:25:80\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScore\e[0m\
    \ = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScore.map { \e\
    [33mcase\e[0m (score, index) => index -> score }.toMap\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mguessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScore\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5x664ldg.scala:26:89\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex\e\
    [0m = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex.toSeq.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                 ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mguessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5x664ldg.scala:27:108\
    \ --------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScore\e\
    [0m = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScore.map\
    \ { \e[33mcase\e[0m (score, index) => index -> score }.toMap\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalu"
  stdout: ''
  timestamp: 1659797768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessesWithScores = guess.zip(game).map { case (guess,\
    \ score) => guess -> score }.toMap\n        val guessesWithScore = guessesWithScores.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithScoreWithIndex = guessesWithScore.zipWithIndex.map { case\
    \ (guess, score) => (guess, score) }.toMap\n        val guessesWithScoreWithIndexSorted\
    \ = guessesWithScoreWithIndex.toSeq.sortBy(_._1).reverse\n        val guessesWithScoreWithIndexSortedWithIndex\
    \ = guessesWithScoreWithIndexSorted.zipWithIndex.map { case (guess, score, index)\
    \ => (guess, score, index) }.toMap\n        val guessesWithScoreWithIndexSortedWithIndexSorted\
    \ = guessesWithScoreWithIndexSortedWithIndex.sortBy(_._1).reverse\n        val\
    \ guessesWithScoreWithIndexSortedWithIndexSortedWithIndex = guessesWithScoreWithIndexSortedWithIndexSorted.zipWithIndex.map\
    \ { case (guess, score, index, index2) => (guess, score, index, index2) }.toMap\n\
    \        val guessesWithScoreWithIndexSortedWithIndexSortedWithIndexSorted = guessesWithScoreWithIndexSortedWithIndexSortedWithIndex.sortBy(_._1).reverse\n\
    \        val guessesWithScoreWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoreWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex.map\
    \ { case (guess, score, index, index2, index3) => (guess, score, index, index2,\
    \ index3) }.toMap\n        val guessesWithScoreWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithScoreWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortBy(_._1).reverse\n\
    \        val guessesWithScoreWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoreWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex.map\
    \ { case (guess, score, index, index2, index3, index4) => (guess, score, index,\
    \ index2, index3, index4) }.toMap\n        val guessesWithScoreWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_cd7jcak.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp_cd7jcak.scala:23:165\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e\
    [33mval\e[0m \e[36mguessesWithScoreWithIndexSortedWithIndex\e[0m = guessesWithScoreWithIndexSorted.zipWithIndex.map\
    \ { \e[33mcase\e[0m (guess, score, index) => (guess, score, index) }.toMap\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                                            \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \      Cannot prove that (Any, Any, Any) <:< (K, V)\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m                            where:    K is a type variable\n\e[31m  \
    \ |\e[0m                                      V is a type variable\n\e[31m   |\e\
    [0m                            .\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_cd7jcak.scala:27:85\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithScoreWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\e\
    [0m = guessesWithScoreWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex.map\
    \ { \e[33mcase\e[0m (guess, score, index, index2, index3) => (guess, score, index,\
    \ index2, index3) }.toMap\n\e[31m\e[31m   |\e[0m                             \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35mguessesWithScoreWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_cd7jcak.scala:29:100\
    \ --------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithScoreWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\e\
    [0m = guessesWithScoreWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex.map\
    \ { \e[33mcase"
  stdout: ''
  timestamp: 1659797771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < guessesCount) {\n            val guess\
    \ = guesses(i)\n            val score = scores(i)\n            val diff = Math.abs(guess\
    \ - score)\n            if (diff < 0)\n                result.add(-diff)\n   \
    \         else\n                result.add(diff)\n            i += 1\n       \
    \ }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi1njdhru.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpi1njdhru.scala:21:25 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n\
    \        val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreList = gameScoreMap.toList\n    \
    \    val guessScoreList = guessScoreMap.toList\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreList\
    \ = gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n \
    \       val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreList = gameScoreMap.toList\n    \
    \    val guessScoreList = guessScoreMap.toList\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreList\
    \ = gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n \
    \       val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreList = gameScoreMap.toList\n    \
    \    val guessScoreList = guessScoreMap.toList\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreList\
    \ = gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n \
    \       val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreList = gameScoreMap.toList\n    \
    \    val guessScoreList = guessScoreMap.toList\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreList\
    \ = gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n \
    \       val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScoreList = gameScoreMap.toList\n    \
    \    val guessScoreList = guessScoreMap.toList\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScoreList\
    \ = gameScoreMap.to\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp83y9ea19.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreMap.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp83y9ea19.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScoreMap.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp83y9ea19.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreMap.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp83y9ea19.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScoreMap.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp83y9ea19.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreMap.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val result = new mutable.ListBuffer[Long]()\n\
    \        scores.foreach { score =>\n            guesses.foreach { guess =>\n \
    \               if (guess == score) {\n                    result += 0\n     \
    \           } else {\n                    val diff = abs(guess - score)\n    \
    \                result += diff\n                }\n            }\n        }\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpytn55asr.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (index, score) }\n        val\
    \ guessScores = guess.zipWithIndex.map { case (score, index) => (index, score)\
    \ }\n        val gameScoreSet = gameScores.toSet\n        val guessScoreSet =\
    \ guessScores.toSet\n        val gameScoreList = gameScores.toList\n        val\
    \ guessScoreList = guessScores.toList\n        val gameScoreSetSize = gameScoreSet.size\n\
    \        val guessScoreSetSize = guessScoreSet.size\n        val gameScoreListSize\
    \ = gameScoreList.size\n        val guessScoreListSize = guessScoreList.size\n\
    \        val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n   \
    \     val guessScoreListSize = guessScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n   \
    \     val guessScoreListSize = guessScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n   \
    \     val guessScoreListSize = guessScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbxwlqk1l.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSetSize\e[0m =\
    \ gameScoreSetSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreSetSize is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbxwlqk1l.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreSetSize\e[0m =\
    \ guessScoreSetSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreSetSize is already defined as \e[33mvalue\e[0m \e\
    [35mguessScoreSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbxwlqk1l.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m =\
    \ gameScoreListSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreListSize is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbxwlqk1l.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mguessScoreListSize\e[0m\
    \ = guessScoreListSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreListSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbxwlqk1l.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSetSize\e[0m =\
    \ gameScoreSetSize\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1659797778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{ case (score, index) => score -> index }.toMap\n     \
    \   val guessesScores = guess.zipWithIndex.map{ case (score, index) => score ->\
    \ index }.toMap\n        val guessesCorrect = guessesScores.filter(_._1 == gameScores.keys)\n\
    \        val guessesIncorrect = guessesScores.filter(_._1 != gameScores.keys)\n\
    \        val guessesDiff = guessesCorrect ++ guessesIncorrect\n        val guessesDiffMap\
    \ = guessesDiff.map{ case (score, index) => (score, gameScores(index)) }.toMap\n\
    \        val guessesDiffList = guessesDiffMap.keys.toList.sortBy(_._1).reverse\n\
    \        val guessesDiffDiff = guessesDiffList.map{ case (score, index) => (score,\
    \ guessesDiffMap(index) - gameScores(index)) }.toList\n        val guessesDiffDiffMap\
    \ = guessesDiffDiff.map{ case (score, diff) => (score, diff) }.toMap\n       \
    \ val guessesDiffDiffList = guessesDiffDiffMap.keys.toList.sortBy(_._1).reverse\n\
    \        val guessesDiffDiffDiff = guessesDiffDiffList.map{ case (score, diff)\
    \ => (score, guessesDiffDiffMap(diff) - gameScores(diff)) }.toList\n        val\
    \ guessesDiffDiffDiffMap = guessesDiffDiffDiff.map{ case (score, diff) => (score,\
    \ diff) }.toMap\n        val guessesDiffDiffDiffList = guessesDiffDiffDiffMap.keys.toList.sortBy(_._1).reverse\n\
    \        val guessesDiffDiffDiffDiff = guessesDiffDiffDiffList.map{ case (score,\
    \ diff) => (score, guessesDiffDiffDiffMap(diff) - gameScores(diff)) }.toList\n\
    \        val guessesDiffDiffDiffDiffMap = guessesDiffDiffDiffDiff.map{ case (score,\
    \ diff) => (score, diff) }.toMap\n        val guessesDiffDiffDiffDiffList = guessesDiffDiffDiffDiffMap.keys.toList.sortBy(_._1).reverse\n\
    \        val guessesDiffDiffDiffDiffDiff = guessesDiffDiffDiffDiffList.map{ case\
    \ (score, diff) => (score, guessesDiffDiffDiffDiffMap(diff) - gameScores(diff))\
    \ }.toList\n        val guessesDiffDiffDiffDiffDiffMap = guessesDiffDiffDiffDiffDiff.map{\
    \ case (score, diff) => (score, diff) }.toMap\n        val guesses\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp50956vbg.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp50956vbg.scala:19:50\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mguessesCorrect\e[0m = guessesScores.filter(_._1 == gameScores.keys)\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types Long and Iterable[Long] cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp50956vbg.scala:20:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesIncorrect\e[0m =\
    \ guessesScores.filter(_._1 != gameScores.keys)\n\e[31m\e[31m   |\e[0m       \
    \                                             ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mValues of types Long and Iterable[Long] cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp50956vbg.scala:23:66 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mguessesDiffList\e[0m = guessesDiffMap.keys.toList.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                        value\
    \ _1 is not a member of Long\n\e[31m\e[31m-- Error: /tmp/tmp50956vbg.scala:23:69\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33mval\e[0m \e[36mguessesDiffList\e[0m = guessesDiffMap.keys.toList.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \             ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mDeprecatedFloatOrdering\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m\
    \ and \e[33mobject\e[0m \e[35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m\
    \ match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp50956vbg.scala:36:5 --------------"
  stdout: ''
  timestamp: 1659797782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (index, score) }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val gameScoreKeys = gameScores.keys.toList\n       \
    \ val guessScoreKeys = guessScores.keys.toList\n        val gameScoreKeysSet =\
    \ gameScoreKeys.toSet\n        val guessScoreKeysSet = guessScoreKeys.toSet\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessScoreKeysSetSize\
    \ = guessScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessScoreKeysSetSize = guessScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessScoreKeysSetSize = guessScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessScoreKeysSetSize\
    \ = guessScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessScoreKeysSetSize = guessScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessScoreKeysSetSize = guessScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessScoreKeysSetSize\
    \ = guessScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessScoreKeysSetSize = guessScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessScoreKeysSetSize = guessScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessScoreKeysSetSize\
    \ = guessScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessScoreKeysSetSize = guessScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessScoreKeysSetSize = guessScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val guessScoreKeysSetSize\
    \ = guessScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpjbc8km9o.scala:50:11 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpjbc8km9o.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSize\e[0m\
    \ = gameScoreKeysSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreKeysSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjbc8km9o.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreKeysSetSize\e\
    [0m = guessScoreKeysSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreKeysSetSize is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreKeysSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjbc8km9o.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSize\e[0m\
    \ = gameScoreKeysSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreKeysSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjbc8km9o.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreKeysSetSize\e\
    [0m = guessScoreKeysSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessS"
  stdout: ''
  timestamp: 1659797779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = new mutable.ListBuffer[Long]()\n\
    \        val guessScoreList = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach\
    \ { case (score, index) =>\n            val guessScore = guessScoreMap(score)\n\
    \            if (guessScore == -1) {\n                gameScoreList += score\n\
    \                guessScoreList += score\n            } else {\n             \
    \   val diff = abs(guessScore - score)\n                if (diff > 0) {\n    \
    \                gameScoreList += score\n                    guessScoreList +=\
    \ guessScore\n                } else {\n                    gameScoreList += diff\n\
    \                    guessScoreList += diff\n                }\n            }\n\
    \        }\n        gameScoreList.take(gameScoreList.size)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv9j8y515.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = \e\
    [33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpv9j8y515.scala:22:33 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797776
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.filter(_._1 == _).map(_._2)\n        val guessScores = guess.zipWithIndex.filter(_._1\
    \ == _).map(_._2)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScores.toList\n       \
    \ val guessScoreList = guessScores.toList\n        val gameScoreListMap = gameScoreList.toMap\n\
    \        val guessScoreListMap = guessScoreList.toMap\n        val gameScoreListSet\
    \ = gameScoreList.toSet\n        val guessScoreListSet = guessScoreList.toSet\n\
    \        val gameScoreListMap = gameScoreList.toMap\n        val guessScoreListMap\
    \ = guessScoreList.toMap\n        val gameScoreListHashSet = gameScoreList.toHashSet\n\
    \        val guessScoreListHashSet = guessScoreList.toHashSet\n        val gameScoreListHashMap\
    \ = gameScoreList.toHashMap\n        val guessScoreListHashMap = guessScoreList.toHashMap\n\
    \        val gameScoreListHashSet = gameScoreList.toHashSet\n        val guessScoreListHashSet\
    \ = guessScoreList.toHashSet\n        val gameScoreListHashMap = gameScoreList.toHashMap\n\
    \        val guessScoreListHashMap = guessScoreList.toHashMap\n        val gameScoreListHashSet\
    \ = gameScoreList.toHashSet\n        val guessScoreListHashSet = guessScoreList.toHashSet\n\
    \        val gameScoreListHashMap = gameScoreList.toHashMap\n        val guessScoreListHashMap\
    \ = guessScoreList.toHashMap\n        val gameScoreListHashSet = gameScoreList.toHashSet\n\
    \        val guessScoreListHashSet = guessScoreList.toHashSet\n        val gameScoreListHashMap\
    \ = gameScoreList.toHashMap\n        val guessScoreListHashMap = guessScoreList.toHashMap\n\
    \        val gameScoreListHashSet = gameScoreList.toHashSet\n        val guessScoreListHashSet\
    \ = guessScoreList.toHashSet\n        val gameScoreListHashMap = gameScoreList.toHashMap\n\
    \        val guessScoreListHashMap = guessScoreList.toHashMap\n        val gameScoreListHashSet\
    \ = gameScoreList.toHashSet\n        val guessScoreListHashSet = guessScoreList.toHashSet\n\
    \        val gameScoreListHashMap = gameScoreList.toHashMap\n        val guessScoreListHashMap\
    \ = guessScoreList.toHashMap\n        val game\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqg_i7j21.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqg_i7j21.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreListMap\e[0m = gameScoreList.toMap\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScoreListMap\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScoreListMap\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqg_i7j21.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessScoreListMap\e[0m = guessScoreList.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mguessScoreListMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreListMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqg_i7j21.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListHashSet\e[0m = gameScoreList.toHashSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreListHashSet is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreListHashSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqg_i7j21.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mguessScoreListHashSet\e\
    [0m = guessScoreList.toHashSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreListHashSet is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreListHashSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods"
  stdout: ''
  timestamp: 1659797788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsmreliir.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsmreliir.scala:53:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m53 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsmreliir.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => \e[33mif\e[0m (score < \e[31m0\e[0m) -score\
    \ \e[33melse\e[0m score }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsmreliir.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mgameScore\e[0m = gameScores.sum\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScore\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScore\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsmreliir.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScores\e[0m = gameScores.zipWithIndex.map { \e[33mcase\e[0m (score,\
    \ index) => \e[33mif\e[0m (score < \e[31m0\e[0m) -score \e[33melse\e[0m score\
    \ }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming"
  stdout: ''
  timestamp: 1659797743
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{ case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map{ case (score, index) => score }\n        val guessesDiff\
    \ = guessesScores.zip(gameScores).map{ case (guess, game) => math.abs(guess -\
    \ game) }\n        guessesDiff.zipWithIndex.map{ case (diff, index) => diff +\
    \ guessesDiff(index) }\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ormhi6u.scala:23)\n\tat Problem.main(tmp4ormhi6u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val guesses = guess.zipWithIndex.map\
    \ { case (guess, index) => guess - game(index) }\n        val guessesScore = guesses.sum\n\
    \        guessesScore match {\n            case 0 => gameScore\n            case\
    \ _ => gameScore - guessesScore\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmdk9n32w.scala:22:22\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m \e\
    [31m0\e[0m => gameScore\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    (gameScore : Long)\n\e[31m\
    \   |\e[0m                      Required: List[Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpmdk9n32w.scala:23:22 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mcase\e[0m _ => gameScore - guessesScore\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    Long\n\e[31m   |\e[0m              \
    \        Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesWithScores = guesses.zip(scores)\n\
    \        val guessesWithScoresSortedByScore = guessesWithScores.sortBy(_._2)\n\
    \        val guessesWithScoresSortedByScoreWithCorrect = guessesWithScoresSortedByScore\n\
    \            .filter(x => x._2 == 0)\n        val guessesWithScoresSortedByScoreWithIncorrect\
    \ = guessesWithScoresSortedByScore\n            .filter(x => x._2 > 0)\n     \
    \   val guessesWithScoresSortedByScoreWithCorrectAndIncorrect = guessesWithScoresSortedByScoreWithCorrect\n\
    \            .union(guessesWithScoresSortedByScoreWithIncorrect)\n        val\
    \ guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithZero = guessesWithScoresSortedByScoreWithCorrectAndIncorrect\n\
    \            .filter(x => x._2 == 0)\n        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegative\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrect\n            .filter(x\
    \ => x._2 < 0)\n        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegativeAndZero\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegative\n      \
    \      .filter(x => x._2 == 0)\n        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegativeAndNegative\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegative\n      \
    \      .filter(x => x._2 < 0)\n        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegativeAndNegativeAndZero\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegativeAndNegative\n\
    \            .filter(x => x._2 == 0)\n        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegativeAndNegativeAndNegative\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegativeAndNegativeAndZero\n\
    \            .filter(x => x._2 < 0)\n        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegativeAndNegativeAndNegativeAndZero\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegativeAndNegativeAndNegative\n\
    \            .filter(x => x._2 == 0)\n        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectWithNegativeAndNegativeAndNegativeAndNegative\
    \ = guessesWithScoresSortedByScoreWithCorrect\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy3ghin_a.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpy3ghin_a.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.filter(_._1 == _).map(_._2)\n        val guessScores = guess.zipWithIndex.filter(_._1\
    \ == _).map(_._2)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScores.toList\n       \
    \ val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiy40vdoz.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiy40vdoz.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreMap\e[0m = gameScores.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiy40vdoz.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiy40vdoz.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiy40vdoz.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiy40vdoz.scala:29:1"
  stdout: ''
  timestamp: 1659797791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameSet = game.toSet\n\
    \        val guessSet = guess.toSet\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetIterator = gameSet.iterator\n\
    \        val guessSetIterator = guessSet.iterator\n        val gameSetIteratorSize\
    \ = gameSetIterator.size\n        val guessSetIteratorSize = guessSetIterator.size\n\
    \        val gameSetIteratorIterator = gameSetIterator.iterator\n        val guessSetIteratorIterator\
    \ = guessSetIterator.iterator\n        val gameSetIteratorIteratorSize = gameSetIteratorIterator.size\n\
    \        val guessSetIteratorIteratorSize = guessSetIteratorIterator.size\n  \
    \      val gameSetIteratorIteratorIterator = gameSetIteratorIterator.iterator\n\
    \        val guessSetIteratorIteratorIterator = guessSetIteratorIterator.iterator\n\
    \        val gameSetIteratorIteratorIteratorSize = gameSetIteratorIteratorIterator.size\n\
    \        val guessSetIteratorIteratorIteratorSize = guessSetIteratorIteratorIterator.size\n\
    \        val gameSetIteratorIteratorIteratorIterator = gameSetIteratorIteratorIterator.iterator\n\
    \        val guessSetIteratorIteratorIteratorIterator = guessSetIteratorIteratorIterator.iterator\n\
    \        val gameSetIteratorIteratorIteratorIteratorSize = gameSetIteratorIteratorIteratorIterator.size\n\
    \        val guessSetIteratorIteratorIteratorIteratorSize = guessSetIteratorIteratorIteratorIterator.size\n\
    \        val gameSetIteratorIteratorIteratorIteratorIterator = gameSetIteratorIteratorIteratorIterator.iterator\n\
    \        val guessSetIteratorIteratorIteratorIteratorIterator = guessSetIteratorIteratorIteratorIterator.iterator\n\
    \        val gameSetIteratorIteratorIteratorIteratorIteratorSize = gameSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val guessSetIteratorIteratorIteratorIteratorSize = guessSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val gameSetIteratorIteratorIteratorIteratorIteratorIterator = gameSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val guessSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = guessSetIteratorIteratorIteratorIteratorIterator.iterator\n        val gameSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = gameSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ guessSetIteratorIteratorIteratorIteratorIteratorIteratorSize = guessSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val gameSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ gameSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ guessSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator = guessSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val gameSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = gameSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val guessSetIteratorIteratorIteratorIteratorIterator\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg5nqtjaz.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg5nqtjaz.scala:40:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessSetIteratorIteratorIteratorIteratorSize\e[0m = guessSetIteratorIteratorIteratorIteratorIterator.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessSetIteratorIteratorIteratorIteratorSize is already defined\
    \ as \e[33mvalue\e[0m \e[35mguessSetIteratorIteratorIteratorIteratorSize\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpg5nqtjaz.scala:46:87 ------------------------\e[0m\e[0m\n\e[31m46 |\e\
    [0m        \e[33mval\e[0m \e[36mguessSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = guessSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m     Not found: guessSetIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg5nqtjaz.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guess.zipWithIndex.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessesWithIndexes = guess.zipWithIndex.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexes = guess.zipWithIndex.map { case (score,\
    \ index) => index }.toMap\n        val guessesWithIndexesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexesWithIndexes = guess.zipWithIndex.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexesWithIndexesWithIndexes = guess.zipWithIndex.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexes = guess.zipWithIndex.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexes\
    \ = guess.zipWithIndex.map { case (score, index) => index }.toMap\n        val\
    \ guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexesWithIndexesWithIndex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp64gsu6y2.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp64gsu6y2.scala:20:94\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mguessesWithIndexes\e[0m = guess.zipWithIndex.map { \e[33mcase\e\
    [0m (score, index) => index }.toMap\n\e[31m\e[31m   |\e[0m                   \
    \                                                                           ^\e\
    [0m\n\e[31m   |\e[0m                                        Cannot prove that\
    \ Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                           \
    \             where:    K is a type variable\n\e[31m   |\e[0m                \
    \                                  V is a type variable\n\e[31m   |\e[0m     \
    \                                   .\n\e[31m\e[31m-- Error: /tmp/tmp64gsu6y2.scala:22:105\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e\
    [33mval\e[0m \e[36mguessesWithIndexesWithIndexes\e[0m = guess.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => index }.toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \             Cannot prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                                        where:    K is a type variable\n\e\
    [31m   |\e[0m                                                  V is a type variable\n\
    \e[31m   |\e[0m                                        .\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp64gsu6y2.scala:24:116 ----------------------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithIndexesWithIndexes\e\
    [0m = guess.zipWithIndex.map { \e[33mcase\e[0m (score, index) => index }.toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                        Cannot prove that Int <:< (K,\
    \ V)\n\e[3"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (score < 0) -score else score }\n        val gameScore\
    \ = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map { case\
    \ (score, index) => if (\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpt8qnuoq7.scala:43:82 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => \e[33mif\e[0m (\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \     ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpt8qnuoq7.scala:53:0 ----------------------------\e[0m\e[0m\n\e[31m53\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt8qnuoq7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => \e[33mif\e[0m (score < \e[31m0\e[0m) -score\
    \ \e[33melse\e[0m score }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt8qnuoq7.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mgameScore\e[0m = gameScores.sum\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScore\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScore\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt8qnuoq7.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScores\e[0m = gameScores.zipWithIndex.map { \e[33mcase\e[0m (score,\
    \ index) => \e[33mif\e[0m (score < \e[31m0\e[0m) -score \e[33melse\e[0m score\
    \ }\n\e[31m\e[31m   |\e[0m        ^^^^^"
  stdout: ''
  timestamp: 1659797792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessesWithScores = guess.zipWithIndex.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessesWithIndexes = guess.zipWithIndex.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithScoreAndIndex\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> index }.toMap\n\
    \        val guessesWithScoreAndIndexAndScore = guess.zipWithIndex.map { case\
    \ (score, index) => index -> score -> index -> score }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndex\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> index ->\
    \ score -> index }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> index ->\
    \ score -> index -> score }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> index ->\
    \ score -> index -> score -> index }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> index ->\
    \ score -> index -> score -> index -> score -> index }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> index ->\
    \ score -> index -> score -> index -> score -> index -> score }.toMap\n      \
    \  val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> index ->\
    \ score -> index -> score -> index -> score -> index -> score -> index }.toMap\n\
    \        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> index ->\
    \ score -> index -> score -> \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgsnqmgka.scala:29:204 --------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\e\
    [0m = guess.zipWithIndex.map { \e[33mcase\e[0m (score, index) => index -> score\
    \ -> index -> score -> index -> score -> \n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \                                                                            \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgsnqmgka.scala:39:0 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- Error: /tmp/tmpgsnqmgka.scala:20:94 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexes\e[0m\
    \ = guess.zipWithIndex.map { \e[33mcase\e[0m (score, index) => index }.toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                         Cannot prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m                                        where:    K is a type variable\n\
    \e[31m   |\e[0m                                                  V is a type variable\n\
    \e[31m   |\e[0m                                        .\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpgsnqmgka.scala:38:1 ---------------------\e[0m\e\
    [0m\n\e[31m38 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:  \
    \  Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpgsnqmgka.scala:31:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m31 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36m"
  stdout: ''
  timestamp: 1659797794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val gameScoreList = gameScores.toList\n        val guessScoreList\
    \ = guessScores.toList\n        val gameScoreListSize = gameScoreList.size\n \
    \       val guessScoreListSize = guessScoreList.size\n        val gameScoreListSize\
    \ = gameScoreListSize - guessScoreListSize\n        val gameScoreListSize = gameScoreListSize\
    \ - gameScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize -\
    \ gameScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize - gameScoreListSize\
    \ + 1\n        val gameScoreListSize = gameScoreListSize - gameScoreListSize +\
    \ 1\n        val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n\
    \        val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n \
    \       val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n  \
    \      val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n   \
    \     val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n    \
    \    val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n     \
    \   val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n      \
    \  val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n       \
    \ val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n        val\
    \ gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n        val gameScoreListSize\
    \ = gameScoreListSize - gameScoreListSize + 1\n        val gameScoreListSize =\
    \ gameScoreListSize - gameScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize\
    \ - gameScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize -\
    \ gameScoreListSize + 1\n        val gameScoreListSize = gameScoreListSize - gameScoreListSize\
    \ + 1\n        val gameScoreListSize = gameScoreListSize - gameScoreListSize +\
    \ 1\n        val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n\
    \        val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n \
    \       val gameScoreListSize = gameScoreListSize - gameScoreListSize + 1\n  \
    \      val gameScoreListSize = gameScoreListSize - game\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2q_jz6af.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m =\
    \ gameScoreListSize - guessScoreListSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreListSize is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2q_jz6af.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m =\
    \ gameScoreListSize - gameScoreListSize + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgameScoreListSize is already defined as \e[33mvalue\e[0m \e[35mgameScoreListSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2q_jz6af.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m = gameScoreListSize\
    \ - gameScoreListSize + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreListSize is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2q_jz6af.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m =\
    \ gameScoreListSize - gameScoreListSize + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgameScoreListSize is already defined as \e[33mvalue\e[0m \e[35mgameScoreListSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group"
  stdout: ''
  timestamp: 1659797792
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val guessesCorrect = gameScores.zipWithIndex.map { case (score, index) =>\
    \ if (score == 0) 0 else abs(score) }\n        guessesCorrect.zipWithIndex.map\
    \ { case (score, index) => guess(index) - score }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi7nyihbl.scala:22)\n\tat Problem.main(tmpi7nyihbl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val guessesRemaining = guessesCount - 1\n        val scoresRemaining\
    \ = scoresCount - 1\n        val guessesRemainingInScore = guessesRemaining /\
    \ scoresCount\n        val scoresRemainingInScore = scoresRemaining / guessesCount\n\
    \        val guessesRemainingInScoreAbs = guessesRemainingInScore.abs\n      \
    \  val scoresRemainingInScoreAbs = scoresRemainingInScore.abs\n        var guessesRemainingInScoreAbsIndex\
    \ = 0\n        var scoresRemainingInScoreAbsIndex = 0\n        var guessesRemainingInScoreAbsIndex2\
    \ = 0\n        var scoresRemainingInScoreAbsIndex2 = 0\n        var guessesRemainingInScoreAbsIndex3\
    \ = 0\n        var scoresRemainingInScoreAbsIndex3 = 0\n        var guessesRemainingInScoreAbsIndex4\
    \ = 0\n        var scoresRemainingInScoreAbsIndex4 = 0\n        var guessesRemainingInScoreAbsIndex5\
    \ = 0\n        var scoresRemainingInScoreAbsIndex5 = 0\n        var guessesRemainingInScoreAbsIndex6\
    \ = 0\n        var scoresRemainingInScoreAbsIndex6 = 0\n        var guessesRemainingInScoreAbsIndex7\
    \ = 0\n        var scoresRemainingInScoreAbsIndex7 = 0\n        var guessesRemainingInScoreAbsIndex8\
    \ = 0\n        var scoresRemainingInScoreAbsIndex8 = 0\n        var guessesRemainingInScoreAbsIndex9\
    \ = 0\n        var scoresRemainingInScoreAbsIndex9 = 0\n        var guessesRemainingInScoreAbsIndex10\
    \ = 0\n        var scoresRemainingInScoreAbsIndex10 = 0\n        var guessesRemainingInScoreAbsIndex11\
    \ = 0\n        var scoresRemainingInScoreAbsIndex11 = 0\n        var guessesRemainingInScoreAbsIndex12\
    \ = 0\n        var scoresRemainingInScoreAbsIndex12 = 0\n        var guessesRemainingInScoreAbsIndex13\
    \ = 0\n        var scoresRemainingInScoreAbsIndex13 = 0\n        var guessesRemainingInScoreAbsIndex14\
    \ = 0\n        var scoresRemainingInScoreAbsIndex14 = 0\n        var guessesRemainingInScoreAbsIndex15\
    \ = 0\n        var scoresRemainingInScoreAbsIndex15 = 0\n        var guessesRemainingInScoreAbs\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2hza9lqi.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2hza9lqi.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mguesses\e[0m = gues\n\e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: gues\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2hza9lqi.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2hza9lqi.scala:59:5\
    \ ---------------------\e[0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (score, index) }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => (score, index)\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.toSet\n        val guessesScoreSet = guessesScoreList.toSet\n\
    \        val gameScoreList = gameScoreList.filter(gameScoreSet.contains)\n   \
    \     val guessesScoreList = guessesScoreList.filter(guessesScoreSet.contains)\n\
    \        val gameScoreList = gameScoreList.map(gameScoreMap(_))\n        val guessesScoreList\
    \ = guessesScoreList.map(guessesScoreMap(_))\n        val gameScoreList = gameScoreList.sortBy(_._1)\n\
    \        val guessesScoreList = guessesScoreList.sortBy(_._1)\n        val gameScoreList\
    \ = gameScoreList.map(x => x._2 - x._1)\n        val guessesScoreList = guessesScoreList.map(x\
    \ => x._2 - x._1)\n        val gameScoreList = gameScoreList.map(x => x._1)\n\
    \        val guessesScoreList = guessesScoreList.map(x => x._1)\n        val gameScoreList\
    \ = gameScoreList.map(x => x._1)\n        val guessesScoreList = guessesScoreList.map(x\
    \ => x._1)\n        val gameScoreList = gameScoreList.map(x => x._1)\n       \
    \ val guessesScoreList = guessesScoreList.map(x => x._1)\n        val gameScoreList\
    \ = gameScoreList.map(x => x._1)\n        val guessesScoreList = guessesScoreList.map(x\
    \ => x._1)\n        val gameScoreList = gameScoreList.map(x => x._1)\n       \
    \ val guessesScoreList = guessesScoreList.map(x => x._1)\n        val gameScoreList\
    \ = gameScoreList.map(x => x._1)\n        val guessesScoreList = guessesScoreList.map(x\
    \ => x._1)\n        val gameScoreList = gameScoreList.map(x => x._1)\n       \
    \ val guessesScoreList = guessesScoreList.map(x => x._1)\n        val gameScoreList\
    \ = gameScoreList.map(x => x._1)\n        val guessesScoreList = guessesScoreList.map(x\
    \ => \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8g_4tala.scala:48:56 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreList\e[0m =\
    \ guessesScoreList.map(\e[36mx\e[0m => \n\e[31m\e[31m   |\e[0m               \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                           expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8g_4tala.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreList.filter(gameScoreSet.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8g_4tala.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreList\e[0m = guessesScoreList.filter(guessesScoreSet.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreList is already defined as \e[33mvalue\e[0m \e\
    [35mguessesScoreList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8g_4tala.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreList.map(gameScoreMap(_))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8g_4tala.scala:28:12 ----------------"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.filter(_._1 == _).map(_._2)\n        val guessScores = guess.zipWithIndex.filter(_._1\
    \ == _).map(_._2)\n        val gameScoreSet = gameScores.toSet\n        val guessScoreSet\
    \ = guessScores.toSet\n        val gameScoreList = gameScores.toList\n       \
    \ val guessScoreList = guessScores.toList\n        val gameScoreSetList = gameScores.toList\n\
    \        val guessScoreSetList = guessScores.toList\n        val gameScoreSetSet\
    \ = gameScoreSet.toSet\n        val guessScoreSetSet = guessScoreSet.toSet\n \
    \       val gameScoreSetSetList = gameScoreSet.toList\n        val guessScoreSetSetList\
    \ = guessScoreSet.toList\n        val gameScoreSetSetSet = gameScoreSetSet.toSet\n\
    \        val guessScoreSetSetSet = guessScoreSetSet.toSet\n        val gameScoreSetSetSetList\
    \ = gameScoreSetSet.toList\n        val guessScoreSetSetSetList = guessScoreSetSet.toList\n\
    \        val gameScoreSetSetSetSet = gameScoreSetSetSet.toSet\n        val guessScoreSetSetSetSet\
    \ = guessScoreSetSetSet.toSet\n        val gameScoreSetSetSetSetList = gameScoreSetSetSet.toList\n\
    \        val guessScoreSetSetSetSetList = guessScoreSetSetSet.toList\n       \
    \ val gameScoreSetSetSetSetSet = gameScoreSetSetSetSet.toSet\n        val guessScoreSetSetSetSetSet\
    \ = guessScoreSetSetSetSet.toSet\n        val gameScoreSetSetSetSetSetList = gameScoreSetSetSetSet.toList\n\
    \        val guessScoreSetSetSetSetSetList = guessScoreSetSetSetSet.toList\n \
    \       val gameScoreSetSetSetSetSetSet = gameScoreSetSetSetSetSet.toSet\n   \
    \     val guessScoreSetSetSetSetSetSet = guessScoreSetSetSetSetSet.toSet\n   \
    \     val gameScoreSetSetSetSetSetSetList = gameScoreSetSetSetSetSet.toList\n\
    \        val guessScoreSetSetSetSetSetSetList = guessScoreSetSetSetSetSet.toList\n\
    \        val gameScoreSetSetSetSetSetSetSet = gameScoreSetSetSetSetSetSet.toSet\n\
    \        val guessScoreSetSetSetSetSetSetSet = guessScoreSetSetSetSetSet.toSet\n\
    \        val gameScoreSetSetSetSetSetSetSetList = gameScore\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxhk0o8i4.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = game.zipWithIndex.filter(_._1\
    \ == _).map(_._2)\n\e[31m\e[31m   |\e[0m                                     \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \   value _1 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxhk0o8i4.scala:18:54\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mguessScores\e[0m = guess.zipWithIndex.filter(_._1 == _).map(_._2)\n\e[31m\e\
    [31m   |\e[0m                                                    ^^^^\e[0m\n\e\
    [31m   |\e[0m                                        value _1 is not a member\
    \ of Long\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxhk0o8i4.scala:47:49\
    \ ------------------------\e[0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreSetSetSetSetSetSetSetList\e[0m = gameScore\n\e[31m\e[31m   |\e[0m\
    \                                                 ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                 Not found: gameScore\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxhk0o8i4.scala:48:5 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{case (score, index) => score}.toList\n        val guessScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}.toList\n        val gameScore\
    \ = gameScores.sum\n        val guessScore = guessScores.sum\n        val gameScoreDiff\
    \ = gameScore - guessScore\n        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n\
    \        val gameScoreDiffAbsSorted = gameScoreDiffAbs.sortBy(_ < 0)\n       \
    \ val gameScoreDiffAbsSortedIndex = gameScoreDiffAbsSorted.indexWhere(_ < 0)\n\
    \        val gameScoreDiffAbsSortedValue = gameScoreDiffAbsSorted.take(gameScoreDiffAbsSortedIndex).sum\n\
    \        val gameScoreDiffAbsSortedIndex2 = gameScoreDiffAbsSorted.lastIndexWhere(_\
    \ < 0)\n        val gameScoreDiffAbsSortedValue2 = gameScoreDiffAbsSorted.take(gameScoreDiffAbsSortedIndex2).sum\n\
    \        val gameScoreDiffAbsSortedIndex3 = gameScoreDiffAbsSorted.lastIndexWhere(_\
    \ < 0)\n        val gameScoreDiffAbsSortedValue3 = gameScoreDiffAbsSorted.take(gameScoreDiffAbsSortedIndex3).sum\n\
    \        val gameScoreDiffAbsSortedIndex4 = gameScoreDiffAbsSorted.lastIndexWhere(_\
    \ < 0)\n        val gameScoreDiffAbsSortedValue4 = gameScoreDiffAbsSorted.take(gameScoreDiffAbsSortedIndex4).sum\n\
    \        val gameScoreDiffAbsSortedIndex5 = gameScoreDiffAbsSorted.lastIndexWhere(_\
    \ < 0)\n        val gameScoreDiffAbsSortedValue5 = gameScoreDiffAbsSorted.take(gameScoreDiffAbsSortedIndex5).sum\n\
    \        val gameScoreDiffAbsSortedIndex6 = gameScoreDiffAbsSorted.lastIndexWhere(_\
    \ < 0)\n        val gameScoreDiffAbsSortedValue6 = gameScoreDiffAbsSorted.take(gameScoreDiffAbsSortedIndex6).sum\n\
    \        val gameScoreDiffAbsSortedIndex7 = gameScoreDiffAbsSorted.lastIndexWhere(_\
    \ < 0)\n        val gameScoreDiffAbsSortedValue7 = gameScoreDiffAbsSorted.take(gameScoreDiffAbsSortedIndex7).sum\n\
    \        val gameScoreDiffAbsSortedIndex8 = gameScoreDiffAbsSorted.lastIndexWhere(_\
    \ < 0)\n        val gameScoreDiffAbsSortedValue8 = gameScoreDiff\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1pafllkn.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsSorted\e\
    [0m = gameScoreDiffAbs.sortBy(_ < \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                   value sortBy is not a member of Long\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp1pafllkn.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.filter(_._1 == _).map(_._2)\n        val guessScores = guess.zipWithIndex.filter(_._1\
    \ == _).map(_._2)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n     \
    \   val guessScoreList = guessScoreMap.toList\n        val gameScoreSet = gameScoreList.map(x\
    \ => gameScoreMap.get(x))\n        val guessScoreSet = guessScoreList.map(x =>\
    \ guessScoreMap.get(x))\n        val gameScoreSetSet = gameScoreSet.map(x => gameScoreSet.toSet)\n\
    \        val guessScoreSetSet = guessScoreSet.map(x => guessScoreSet.toSet)\n\
    \        val gameScoreSetSetSet = gameScoreSetSet.map(x => gameScoreSetSet.toSet)\n\
    \        val guessScoreSetSetSet = guessScoreSetSet.map(x => guessScoreSetSet.toSet)\n\
    \        val gameScoreSetSetSetSet = gameScoreSetSetSet.map(x => gameScoreSetSetSet.toSet)\n\
    \        val guessScoreSetSetSetSet = guessScoreSetSetSet.map(x => guessScoreSetSetSet.toSet)\n\
    \        val gameScoreSetSetSetSetSet = gameScoreSetSetSetSet.map(x => gameScoreSetSetSet.toSet)\n\
    \        val guessScoreSetSetSetSetSet = guessScoreSetSetSetSet.map(x => guessScoreSetSetSet.toSet)\n\
    \        val gameScoreSetSetSetSetSetSet = gameScoreSetSetSetSetSet.map(x => gameScoreSetSetSetSet.toSet)\n\
    \        val guessScoreSetSetSetSetSetSet = guessScoreSetSetSetSetSet.map(x =>\
    \ guessScoreSetSetSetSet.toSet)\n        val gameScoreSetSetSetSetSetSetSet =\
    \ gameScoreSetSetSetSetSetSet.map(x => gameScoreSetSetSetSetSet.toSet)\n     \
    \   val guessScoreSetSetSetSetSetSetSet = guessScoreSetSetSetSetSetSet.map(x =>\
    \ guessScoreSetSetSetSetSet.toSet)\n        val gameScoreSetSetSetSetSetSetSetSet\
    \ = gameScoreSetSetSetSetSetSetSet.map(x => gameScoreSetSetSetSetSetSet.toSet)\n\
    \        val guessScoreSetSetSetSetSetSetSetSet = guessScoreSetSetSetSetSetSetSet.map(x\
    \ => guessScoreSet\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdbcmp6y5.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdbcmp6y5.scala:17:52\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScores\e[0m = game.zipWithIndex.filter(_._1 == _).map(_._2)\n\e[31m\e\
    [31m   |\e[0m                                                  ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                        value _1 is not a member of\
    \ Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdbcmp6y5.scala:18:54 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mguessScores\e[0m = guess.zipWithIndex.filter(_._1\
    \ == _).map(_._2)\n\e[31m\e[31m   |\e[0m                                     \
    \               ^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \     value _1 is not a member of Long\n\e[31m\e[31m-- Error: /tmp/tmpdbcmp6y5.scala:19:43\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\e[31m\e[31m   |\e\
    [0m                                           ^\e[0m\n\e[31m   |\e[0m        \
    \                                Cannot prove that Int <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                        where:    K is a type\
    \ variable\n\e[31m   |\e[0m                                                  V\
    \ is a type variable\n\e[31m   |\e[0m                                        .\n\
    \e[31m\e[31m-- Error: /tmp/tmpdbcmp6y5.scala:20:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                        Cannot prove that Int <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       \
    \ where:    K is a type variable\n\e[31m   |\e[0m                            \
    \                      V is a type variable\n\e[31m   |\e[0m                 \
    \                  "
  stdout: ''
  timestamp: 1659797795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val diffs = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 0\n        while (i < guessesCount) {\n            val guess\
    \ = guesses(i)\n            val score = scores(i)\n            val diff = Math.abs(guess\
    \ - score)\n            diffs += diff\n            i += 1\n        }\n       \
    \ diffs.toList\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2wkhfwbc.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2wkhfwbc.scala:21:20 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mdiffs\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = new mutable.ListBuffer[Long]()\n\
    \        val guessScoreList = new mutable.ListBuffer[Long]()\n        val gameScoreSet\
    \ = new mutable.HashSet[Long]()\n        val guessScoreSet = new mutable.HashSet[Long]()\n\
    \        gameScoreMap.foreach { case (score, index) =>\n            if (guessScoreMap.contains(index))\
    \ {\n                gameScoreList.add(score)\n                gameScoreSet.add(score)\n\
    \            }\n        }\n        guessScoreMap.foreach { case (score, index)\
    \ =>\n            if (gameScoreMap.contains(index)) {\n                guessScoreList.add(score)\n\
    \                guessScoreSet.add(score)\n            }\n        }\n        gameScoreList.zip(guessScoreList).map\
    \ { case (gameScore, guessScore) =>\n            if (gameScoreSet.contains(guessScore))\
    \ {\n                0\n            } else {\n                Math.abs(guessScore\
    \ - gameScore)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk9eogpr6.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = \e\
    [33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpk9eogpr6.scala:22:33 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk9eogpr6.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk9eogpr6.scala:24:32\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mguessScoreSet\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (index, score) }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val gameScore = gameScores.map { case (index, score)\
    \ => (index, score) }.toMap\n        val guessScore = guessScores.map { case (index,\
    \ score) => (index, score) }.toMap\n        val gameScores = gameScores.map {\
    \ case (index, score) => (index, score) }.toMap\n        val guessScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScore = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScore = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScore = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScore = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScore = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessScores = guessScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdtc3_7dq.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.map\
    \ { \e[33mcase\e[0m (index, score) => (index, score) }.toMap\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdtc3_7dq.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mguessScores\e[0m = guessScores.map {\
    \ \e[33mcase\e[0m (index, score) => (index, score) }.toMap\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScores is already defined as \e[33mvalue\e[0m \e[35mguessScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdtc3_7dq.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScore\e[0m = gameScores.map { \e\
    [33mcase\e[0m (index, score) => (index, score) }.toMap\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScore is already defined as \e[33mvalue\e[0m \e[35mgameScore\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdtc3_7dq.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScore\e[0m = guessScores.map {\
    \ \e[33mcase\e[0m (index, score) => (index, score) }.toMap\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScore is already defined as \e[33mvalue\e[0m \e[35mguessScore\e\
    [0m\n\e[31m   |\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659797798
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val guessesWithScores = guessesScores.map { case (score, index) =>\
    \ gameScores(index) -> score }\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSorted\
    \ = guessesWithIndexes.sortBy(_._1)\n        val guessesWithIndexesSortedReversed\
    \ = guessesWithIndexesSorted.reverse\n        val guessesWithIndexesSortedReversedSorted\
    \ = guessesWithIndexesSortedReversed.sortBy(_._2)\n        val guessesWithIndexesSortedReversedSortedWithIndexes\
    \ = guessesWithIndexesSortedReversedSorted.map { case (index, score) => index\
    \ -> score }\n        val guessesWithIndexesSortedReversedSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedReversedSortedWithIndexes.sortBy(_._1)\n        val\
    \ guessesWithIndexesSortedReversedSortedWithIndexesSortedReversed = guessesWithIndexesSortedReversedSortedWithIndexesSorted.reverse\n\
    \        val guessesWithIndexesSortedReversedSortedWithIndexesSortedReversedSorted\
    \ = guessesWithIndexesSortedReversedSortedWithIndexesSortedReversed.sortBy(_._2)\n\
    \        val guessesWithIndexesSortedReversedSortedWithIndexesSortedReversedSortedWithIndexes\
    \ = guessesWithIndexesSortedReversedSortedWithIndexesSortedReversedSortedWithIndexes.map\
    \ { case (index, score) => index -> score }\n        val guessesWithIndexesSortedReversedSortedWithIndexesSortedReversedSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedReversedSortedWithIndexesSortedReversedSortedWithIndexesSorted.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedReversedSortedWithIndexesSortedReversedSortedWithIndexesSortedReversed\
    \ = guessesWithIndexesSortedReversedSortedWithIndexesSortedReversedSortedWithIndexesSortedReversed.reverse\n\
    \        val guessesWithIndexesSortedReversedSortedWithIndexesSortedReversedSortedWithIndexesSortedReversedSorted\
    \ = guessesWithIndexesSortedReversedSortedWithIndexesSortedReversedSortedWithIndexesSortedReversedSorted.sortBy(_._2)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptfk17jgs.scala:28:95 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesSortedReversedSortedWithIndexesSortedReversedSortedWithIndexes\e\
    [0m = guessesWithIndexesSortedReversedSortedWithIndexesSortedReversedSortedWithIndexes.map\
    \ { \e[33mcase\e[0m (index, score) => index -> score }\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\
    \e[31m   |\e[0m  guessesWithIndexesSortedReversedSortedWithIndexesSortedReversedSortedWithIndexes\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmptfk17jgs.scala:29:101 --------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesSortedReversedSortedWithIndexesSortedReversedSortedWithIndexesSorted\e\
    [0m = guessesWithIndexesSortedReversedSortedWithIndexesSortedReversedSortedWithIndexesSorted.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                             ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  guessesWithIndexesSortedReversedSortedWithIndexesSortedReversedSortedWithIndexesSorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmptfk17jgs.scala:30:109 --------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesSortedReversedSortedWithIndexesSortedReversedSortedWithIndexesSortedReversed\e\
    [0m = guessesWithIndexesSortedReversedSortedWithIndexesSortedReversedSortedWithIndexesSortedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                     ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  guessesWithIndexesSortedReversedSortedWithIndexesSortedRev"
  stdout: ''
  timestamp: 1659797799
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{ case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map{ case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList =\
    \ new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach { case (score,\
    \ index) =>\n            val guessScore = guessScoreMap(index)\n            val\
    \ gameScore = gameScoreMap(index)\n            gameScoreList += gameScore\n  \
    \          guessScoreList += guessScore\n        }\n        guessScoreList.zipWithIndex.map\
    \ { case (score, index) =>\n            val guessScore = guessScoreList(index)\n\
    \            val gameScore = gameScoreList(index)\n            val difference\
    \ = guessScore - gameScore\n            if (difference < 0)\n                difference\n\
    \            else\n                Math.abs(difference)\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprlooyrjx.scala:19:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- Error: /tmp/tmprlooyrjx.scala:20:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprlooyrjx.scala:21:32\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprlooyrjx.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = \e\
    [33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val guessesWithScore = gameScores.zipWithIndex.map\
    \ { case (score, index) => guess(index) + score }\n        val guessesWithScoreWithIndex\
    \ = guessesWithScore.zipWithIndex.map { case (score, index) => index.toLong +\
    \ score }\n        val guessesWithScoreWithIndexAndScore = guessesWithScoreWithIndex.zipWithIndex.map\
    \ { case (score, index) => index.toLong + score }\n        val guessesWithScoreWithIndexAndScoreAndScore\
    \ = guessesWithScoreWithIndexAndScore.zipWithIndex.map { case (score, index) =>\
    \ index.toLong + score }\n        val guessesWithScoreWithIndexAndScoreAndScoreAndScore\
    \ = guessesWithScoreWithIndexAndScoreAndScore.zipWithIndex.map { case (score,\
    \ index) => index.toLong + score }\n        val guessesWithScoreWithIndexAndScoreAndScoreAndScoreAndScore\
    \ = guessesWithScoreWithIndexAndScoreAndScoreAndScore.zipWithIndex.map { case\
    \ (score, index) => index.toLong + score }\n        val guessesWithScoreWithIndexAndScoreAndScoreAndScoreAndScoreAndScore\
    \ = guessesWithScoreWithIndexAndScoreAndScoreAndScoreAndScore.zipWithIndex.map\
    \ { case (score, index) => index.toLong + score }\n        val guessesWithScoreWithIndexAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\
    \ = guessesWithScoreWithIndexAndScoreAndScoreAndScoreAndScoreAndScore.zipWithIndex.map\
    \ { case (score, index) => index.toLong + score }\n        val guessesWithScoreWithIndexAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\
    \ = guessesWithScoreWithIndexAndScoreAndScoreAndScoreAndScoreAndScoreAndScore.zipWithIndex.map\
    \ { case (score, index) => index.toLong + score }\n        val guessesWithScoreWithIndexAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\
    \ = guessesWithScoreWithIndexAndScoreAndScoreAndScoreAndScoreAndScoreAndScore.zipWithIndex.map\
    \ { case (score, index) => index.toLong + score }\n        val guessesWithScoreWithIndexAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphxwfe6c0.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphxwfe6c0.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithScoreWithIndexAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\e\
    [0m = guessesWithScoreWithIndexAndScoreAndScoreAndScoreAndScoreAndScoreAndScore.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => index.toLong + score }\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScoreWithIndexAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  guessesWithScoreWithIndexAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmphxwfe6c0.scala:30:5 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659797802
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guess.zip(gameScores).map\
    \ { case (guess, score) => guess -> score }.toMap\n        val guessesWithIndexes\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> index }.toMap\n \
    \       val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => guess -> index -> score }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> index -> score }.toMap\n\
    \        val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => guess -> index -> score }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> index -> score }.toMap\n\
    \        val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => guess -> index -> score }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> index -> score }.toMap\n\
    \        val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => guess -> index -> score }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> index -> score }.toMap\n\
    \        val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => guess -> index -> score }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> index -> score }.toMap\n\
    \        val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => guess -> index -> score }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> index -> score }.toMap\n\
    \        val guessesWithIndexesWithScore\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpafvfp30s.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpafvfp30s.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesWithScores\e[0m = guess.zipWithIndex.map { \e[33mcase\e\
    [0m (guess, index) => guess -> index -> score }.toMap\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithIndexesWithScores is already defined as \e[33mvalue\e\
    [0m \e[35mguessesWithIndexesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpafvfp30s.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScores\e\
    [0m = guess.zipWithIndex.map { \e[33mcase\e[0m (guess, index) => guess -> index\
    \ -> score }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithIndexesWithScores is already defined as \e[33mvalue\e\
    [0m \e[35mguessesWithIndexesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpafvfp30s.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScores\e\
    [0m = guess.zipWithIndex.map { \e[33mcase\e[0m (guess, index) => guess -> index\
    \ -> score }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithIndexesWithScores is already defined as \e[33mvalue\e\
    [0m \e[35mguessesWithIndexesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded m"
  stdout: ''
  timestamp: 1659797807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val guessesWithScores = guessesScores.map { case (score, index) =>\
    \ score -> gameScores(index) }\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSorted\
    \ = guessesWithIndexes.sortBy(_._1).sortBy(_._2)\n        val guessesWithIndexesSortedWithScores\
    \ = guessesWithIndexesSorted.map { case (index, score) => score -> index }\n \
    \       val guessesWithIndexesSortedWithIndexes = guessesWithIndexesSortedWithScores.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithIndexes.sortBy(_._1).sortBy(_._2)\n        val\
    \ guessesWithIndexesSortedWithIndexesSortedWithScores = guessesWithIndexesSortedWithIndexesSorted.map\
    \ { case (score, index) => score -> index }\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithIndexesSortedWithScores.map { case (score, index)\
    \ => index -> score }\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexes.sortBy(_._1).sortBy(_._2)\n\
    \        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes.map\
    \ { case (score, index) => score -> index }\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores.map {\
    \ case (score, index) => index -> score }\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted.sortBy(_._1).sortBy(_._2)\n\
    \        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores\
    \ = guessesWithIndexes\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6vtxtbdn.scala:29:84 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes\e\
    [0m = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores.map\
    \ { \e[33mcase\e[0m (score, index) => index -> score }\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mguessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6vtxtbdn.scala:30:90\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted\e\
    [0m = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted.sortBy(_._1).sortBy(_._2)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6vtxtbdn.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{ case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map{ case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n\
    \        val gameScoreSet = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n\
    \        val gameScoreList = gameScoreList.filterNot(gameScoreSet.contains)\n\
    \        val guessScoreList = guessScoreList.filterNot(guessScoreSet.contains)\n\
    \        val gameScoreList = gameScoreList.map{ case (score, index) => index.toLong\
    \ }\n        val guessScoreList = guessScoreList.map{ case (score, index) => index.toLong\
    \ }\n        val gameScoreList = gameScoreList.zipWithIndex.map{ case (score,\
    \ index) => score }\n        val guessScoreList = guessScoreList.zipWithIndex.map{\
    \ case (score, index) => score }\n        val gameScoreList = gameScoreList.filterNot(gameScoreSet.contains)\n\
    \        val guessScoreList = guessScoreList.filterNot(guessScoreSet.contains)\n\
    \        val gameScoreList = gameScoreList.map{ case (score, index) => index.toLong\
    \ }\n        val guessScoreList = guessScoreList.map{ case (score, index) => index.toLong\
    \ }\n        val gameScoreList = gameScoreList.zipWithIndex.map{ case (score,\
    \ index) => score }\n        val guessScoreList = guessScoreList.zipWithIndex.map{\
    \ case (score, index) => score }\n        val gameScoreList = gameScoreList.filterNot(gameScoreSet.contains)\n\
    \        val guessScoreList = guessScoreList.filterNot(guessScoreSet.contains)\n\
    \        val gameScoreList = gameScoreList.map{ case (score, index) => index.toLong\
    \ }\n        val guessScoreList = guessScoreList.map{ case (score, index) => index.toLong\
    \ }\n        val gameScoreList = gameScoreList.zipWithIndex.map{ case (score,\
    \ index) => score }\n        val guessScoreList = guessScoreList.zipWithIndex.map{\
    \ case (score, index) => score }\n        val gameScoreList = gameScoreList.filterNot(gameScoreSet.contains)\n\
    \        val guessScoreList = guessScoreList.filterNot(guessScoreSet.contains)\n\
    \        val gameScoreList = gameScoreList.map{ case (score, index) => \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpymh0e5i1.scala:55:0 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpymh0e5i1.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreList\e[0m = gameScoreList.filterNot(gameScoreSet.contains)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpymh0e5i1.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScoreList.filterNot(guessScoreSet.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpymh0e5i1.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreList.map{\
    \ \e[33mcase\e[0m (score, index) => index.toLong }\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpymh0e5i1.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScoreList.map{\
    \ \e[33mcase\e[0m (score, index) => index.toLong }\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => x._2).toList\n        val guessScores = guess.zipWithIndex.map(x\
    \ => x._2).toList\n        val gameScoreMap = gameScores.groupBy(x => x).map(x\
    \ => (x._1, x._2.map(y => y._2).sum)).toMap\n        val guessScoreMap = guessScores.groupBy(x\
    \ => x).map(x => (x._1, x._2.map(y => y._2).sum)).toMap\n        val gameScoreList\
    \ = gameScoreMap.keys.toList.sortWith(_ < _)\n        val guessScoreList = guessScoreMap.keys.toList.sortWith(_\
    \ < _)\n        val gameScores = gameScoreList.map(x => gameScoreMap.get(x))\n\
    \        val guessScores = guessScoreList.map(x => guessScoreMap.get(x))\n   \
    \     val gameScoreDiffs = gameScores.zip(guessScores).map(x => (x._1 - x._2,\
    \ x._1)).toList\n        val gameScoreDiffs = gameScoreDiffs.sortWith(_._1 < _._1).reverse\n\
    \        val gameScoreDiffs = gameScoreDiffs.map(x => x._2).reverse\n        val\
    \ gameScoreDiffs = gameScoreDiffs.map(x => x._1).reverse\n        val gameScoreDiffs\
    \ = gameScoreDiffs.map(x => x._2).reverse\n        val gameScoreDiffs = gameScoreDiffs.map(x\
    \ => x._1).reverse\n        val gameScoreDiffs = gameScoreDiffs.map(x => x._2).reverse\n\
    \        val gameScoreDiffs = gameScoreDiffs.map(x => x._1).reverse\n        val\
    \ gameScoreDiffs = gameScoreDiffs.map(x => x._2).reverse\n        val gameScoreDiffs\
    \ = gameScoreDiffs.map(x => x._1).reverse\n        val gameScoreDiffs = gameScoreDiffs.map(x\
    \ => x._2).reverse\n        val gameScoreDiffs = gameScoreDiffs.map(x => x._1).reverse\n\
    \        val gameScoreDiffs = gameScoreDiffs.map(x => x._2).reverse\n        val\
    \ gameScoreDiffs = gameScoreDiffs.map(x => x._1).reverse\n        val gameScoreDiffs\
    \ = gameScoreDiffs.map(x => x._2).reverse\n        val gameScoreDiffs = gameScoreDiffs.map(x\
    \ => x._1).reverse\n        val gameScoreDiffs = gameScoreDiffs.map(x => x._2).reverse\n\
    \        val gameScoreDiffs = gameScoreDiffs.map(x => x._1).reverse\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4mqfsfww.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScoreList.map(\e\
    [36mx\e[0m => gameScoreMap.get(x))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4mqfsfww.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScores\e[0m = guessScoreList.map(\e\
    [36mx\e[0m => guessScoreMap.get(x))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScores is already defined as \e[33mvalue\e[0m \e[35mguessScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4mqfsfww.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffs\e[0m = gameScoreDiffs.sortWith(_._1\
    \ < _._1).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffs is already defined as \e[33mvalue\e[0m \e[35mgameScoreDiffs\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4mqfsfww.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffs\e[0m = gameScoreDiffs.map(\e\
    [36mx\e[0m => x._2).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffs is already defined as \e[33mvalue\e[0m \e[35mgameScoreDiffs\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /"
  stdout: ''
  timestamp: 1659797814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => score -> gameScores(index) }.toMap\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (score, index) => index -> score }.toMap\n  \
    \      val guessesWithScoreAndIndex = guessesWithScores.map { case (score, index)\
    \ => score -> index }.toMap\n        val guessesWithIndexesAndScore = guessesWithIndexes.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithScoreAndIndexes\
    \ = guessesWithScoreAndIndex.map { case (score, index) => index -> score }.toMap\n\
    \        val guessesWithIndexesAndScoreAndIndex = guessesWithIndexesAndScore.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithScoreAndIndexesAndScore\
    \ = guessesWithIndexesAndScoreAndIndex.map { case (score, index) => index -> score\
    \ }.toMap\n        val guessesWithIndexesAndScoreAndIndexes = guessesWithIndexesAndScoreAndIndex.map\
    \ { case (score, index) => index -> index }.toMap\n        val guessesWithScoreAndIndexesAndIndexesAndScore\
    \ = guessesWithIndexesAndScoreAndIndexesAndIndex.map { case (score, index) =>\
    \ index -> index }.toMap\n        val guessesWithScoreAndIndexesAndIndexesAndIndexesAndScore\
    \ = guessesWithIndexesAndScoreAndIndexesAndIndexesAndIndex.map { case (score,\
    \ index) => index -> index }.toMap\n        val guessesWithScoreAndIndexesAndIndexesAndIndexesAndIndexesAndScore\
    \ = guessesWithIndexesAndScoreAndIndexesAndIndexesAndIndexesAndIndex.map { case\
    \ (score, index) => index -> index }.toMap\n        val guessesWithScoreAndIndexesAndIndexesAndIndexesAndIndexesAndIndexesAndScore\
    \ = guessesWithIndexesAndScoreAndIndexesAndIndexesAndIndexesAndIndexesAndIndex.map\
    \ { case (score, index) => index -> index }.toMap\n        val guessesWithScoreAndIndexesAndIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0_7bt0vb.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0_7bt0vb.scala:27:59\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithScoreAndIndexesAndIndexesAndScore\e[0m = guessesWithIndexesAndScoreAndIndexesAndIndex.map\
    \ { \e[33mcase\e[0m (score, index) => index -> index }.toMap\n\e[31m\e[31m   |\e\
    [0m                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Not found: guessesWithIndexesAndScoreAndIndexesAndIndex\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0_7bt0vb.scala:28:69\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithScoreAndIndexesAndIndexesAndIndexesAndScore\e[0m = guessesWithIndexesAndScoreAndIndexesAndIndexesAndIndex.map\
    \ { \e[33mcase\e[0m (score, index) => index -> index }.toMap\n\e[31m\e[31m   |\e\
    [0m                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m       Not found: guessesWithIndexesAndScoreAndIndexesAndIndexesAndIndex\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0_7bt0vb.scala:29:79\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithScoreAndIndexesAndIndexesAndIndexesAndIndexesAndScore\e[0m = guessesWithIndexesAndScoreAndIndexesAndIndexesAndIndexesAndIndex.map\
    \ { \e[33mcase\e[0m (score, index) => index -> index }.toMap\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mNot found: guessesWithIndexesAndScoreAndIndexesAndIndexesAndIndexesAndIndex\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1659797812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScoreList = gameScoreMap.toList\n        val guessesScoreList = guessesScoreMap.toList\n\
    \        val gameScores = gameScoreList.map { case (score, index) => score }\n\
    \        val guessesScores = guessesScoreList.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScoreMap.toList\n   \
    \     val guessesScoreList = guessesScoreMap.toList\n        val gameScores =\
    \ gameScoreList.map { case (score, index) => score }\n        val guessesScores\
    \ = guessesScoreList.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScoreList = gameScoreMap.toList\n        val guessesScoreList = guessesScoreMap.toList\n\
    \        val gameScores = gameScoreList.map { case (score, index) => score }\n\
    \        val guessesScores = guessesScoreList.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScoreMap.toList\n   \
    \     val guessesScoreList = guessesScoreMap.toList\n        val gameScores =\
    \ gameScoreList.map { case (score, index) => score }\n        val guessesScores\
    \ = guessesScoreList.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScoreList = gameScoreMap.toList\n        val guessesScoreList = guessesScoreMap.toList\n\
    \        val gameScores = gameScoreList.map { case (score, index) => score }\n\
    \        val guessesScores = guessesScoreList.map { case (score, index) => score\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScoreMap.toList\n   \
    \     val guessesScore\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2u6l8vkb.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2u6l8vkb.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScores\e[0m = gameScoreList.map { \e[33mcase\e[0m (score, index) =>\
    \ score }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2u6l8vkb.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessesScores\e[0m = guessesScoreList.map\
    \ { \e[33mcase\e[0m (score, index) => score }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScores is already defined as \e[33mvalue\e[0m \e[35mguessesScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2u6l8vkb.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2u6l8vkb.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreMap\e[0m = guessesScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessesScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessesScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNo"
  stdout: ''
  timestamp: 1659797813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList =\
    \ new mutable.ListBuffer[Long]()\n        val gameScoreDiff = new mutable.ListBuffer[Long]()\n\
    \        val guessScoreDiff = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach\
    \ { case (score, index) =>\n            val guess = guessScoreMap(index)\n   \
    \         if (guess == score) {\n                gameScoreDiff.append(score)\n\
    \                guessScoreDiff.append(guess)\n            } else {\n        \
    \        gameScoreDiff.append(Math.abs(guess - score))\n                guessScoreDiff.append(Math.abs(guess\
    \ - score))\n            }\n        }\n        gameScoreDiff.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpluz6c3gy.scala:19:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                           ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- Error: /tmp/tmpluz6c3gy.scala:20:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpluz6c3gy.scala:21:32\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpluz6c3gy.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = \e\
    [33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpluz6c3gy.scala:23:32 -----------"
  stdout: ''
  timestamp: 1659797813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = new mutable.ListBuffer[Long]()\n\
    \        val guessesScoreList = new mutable.ListBuffer[Long]()\n        val gameScoreMapKeys\
    \ = gameScoreMap.keySet\n        val guessesScoreMapKeys = guessesScoreMap.keySet\n\
    \        gameScoreMapKeys.foreach { key =>\n            val gameScore = gameScoreMap.get(key)\n\
    \            val guessesScore = guessesScoreMap.get(key)\n            val gameScoreDiff\
    \ = abs(gameScore - guessesScore)\n            gameScoreList += gameScoreDiff\n\
    \            guessesScoreList += gameScoreDiff\n        }\n        gameScoreList.take(guessesScoreList.size)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7bjxmjdw.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = \e\
    [33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7bjxmjdw.scala:22:35 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mguessesScoreList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7bjxmjdw.scala:28:46\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m\
    \ \e[36mgameScoreDiff\e[0m = abs(gameScore - guessesScore)\n\e[31m\e[31m   |\e\
    [0m                                    ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ - is not a member of Option[Int], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659797814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guessesCount\
    \ = guess.size\n        val gameCount = game.size\n        val guessesPerGame\
    \ = guessesCount / gameCount\n        val gamesPerGuess = gameCount / guessesCount\n\
    \        val gamesDiff = gamesPerGuess * guessesPerGame\n        val guessesDiff\
    \ = gamesDiff.map(x => Math.abs(x - game))\n        guessesDiff.map(x => if (x\
    \ == 0) 0 else x)\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt8fnpsv_.scala:22:36 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesDiff\e[0m = gamesDiff.map(\e\
    [36mx\e[0m => Math.abs(x - game))\n\e[31m\e[31m   |\e[0m                     \
    \     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value map is\
    \ not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659797813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithScoreAndIndex\
    \ = guessesWithScores.map { case (score, index) => score -> index }.toMap\n  \
    \      val guessesWithIndexesAndScore = guessesWithScores.map { case (score, index)\
    \ => index -> score }.toMap\n        val guessesWithIndexesAndScoreAndIndex =\
    \ guessesWithScores.map { case (score, index) => index -> score -> index }.toMap\n\
    \        val guessesWithIndexesAndScoreAndIndexAndScore = guessesWithScores.map\
    \ { case (score, index) => index -> score -> index -> score }.toMap\n        val\
    \ guessesWithIndexesAndScoreAndIndexAndScoreAndIndex = guessesWithScores.map {\
    \ case (score, index) => index -> score -> index -> score -> index }.toMap\n \
    \       val guessesWithIndexesAndScoreAndIndexAndScoreAndIndexAndScore = guessesWithScores.map\
    \ { case (score, index) => index -> score -> index -> score -> index -> score\
    \ }.toMap\n        val guessesWithIndexesAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guessesWithScores.map { case (score, index) => index -> score -> index ->\
    \ score -> index -> score -> index }.toMap\n        val guessesWithIndexesAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = guessesWithScores.map { case (score, index) => index -> score -> index ->\
    \ score -> index -> score -> index -> score -> index }.toMap\n        val guessesWithIndexesAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guessesWithScores.map { case (score, index) => index -> score -> index ->\
    \ score -> index -> score -> index -> score -> index -> index }.toMap\n      \
    \  val guessesWithIndexesAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = guessesWithScores.map { case (score, index) => index -> score -> \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpccbcb5_t.scala:30:169 --------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\e\
    [0m = guessesWithScores.map { \e[33mcase\e[0m (score, index) => index -> score\
    \ -> \n\e[31m\e[31m   |\e[0m                                                 \
    \                                                                            \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpccbcb5_t.scala:40:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m40 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- Error: /tmp/tmpccbcb5_t.scala:20:93\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mguessesWithIndexes\e[0m = guessesWithScores.map { \e[33mcase\e\
    [0m (score, index) => index }.toMap\n\e[31m\e[31m   |\e[0m                   \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                        Cannot prove that\
    \ Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                           \
    \             where:    K is a type variable\n\e[31m   |\e[0m                \
    \                                  V is a type variable\n\e[31m   |\e[0m     \
    \                                   .\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpccbcb5_t.scala:39:1 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m}\n\
    \e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m\
    \ Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpccbcb5_t.scala:32:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m32 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e["
  stdout: ''
  timestamp: 1659797818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.filter(_._1 == _).map(_._2)\n        val guessScores = guess.zipWithIndex.filter(_._1\
    \ == _).map(_._2)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n     \
    \   val guessScoreList = guessScoreMap.toList\n        val gameScoreList = gameScoreList.sortBy(_._1).reverse\n\
    \        val guessScoreList = guessScoreList.sortBy(_._1).reverse\n        val\
    \ gameScoreList = gameScoreList.take(gameScoreList.size - 1)\n        val guessScoreList\
    \ = guessScoreList.take(guessScoreList.size - 1)\n        val gameScoreList =\
    \ gameScoreList.zipWithIndex.filter(_._2 == gameScoreList.size - 1).map(_._1)\n\
    \        val guessScoreList = guessScoreList.zipWithIndex.filter(_._2 == guessScoreList.size\
    \ - 1).map(_._1)\n        val gameScoreList = gameScoreList.zipWithIndex.filter(_._2\
    \ == gameScoreList.size - 1).map(_._1)\n        val guessScoreList = guessScoreList.zipWithIndex.filter(_._2\
    \ == guessScoreList.size - 1).map(_._1)\n        val gameScoreList = gameScoreList.zipWithIndex.filter(_._2\
    \ == gameScoreList.size - 1).map(_._1)\n        val guessScoreList = guessScoreList.zipWithIndex.filter(_._2\
    \ == guessScoreList.size - 1).map(_._1)\n        val gameScoreList = gameScoreList.zipWithIndex.filter(_._2\
    \ == gameScoreList.size - 1).map(_._1)\n        val guessScoreList = guessScoreList.zipWithIndex.filter(_._2\
    \ == guessScoreList.size - 1).map(_._1)\n        val gameScoreList = gameScoreList.zipWithIndex.filter(_._2\
    \ == gameScoreList.size - 1).map(_._1)\n        val guessScoreList = guessScoreList.zipWithIndex.filter(_._2\
    \ == guessScoreList.size - 1).map(_._1)\n        val gameScoreList = gameScoreList.zipWithIndex.filter(_._2\
    \ == gameScoreList.size - 1).map(_._1)\n        val guessScoreList = guessScoreList.zipWithIndex.filter(_._2\
    \ == guessScoreList.size - 1).map(_._1)\n        val gameScoreList = gameScoreList.zipWithIndex.filter(_._2\
    \ == gameScoreList.size - 1).map(_._1)\n        val guessScoreList = guessScoreList.zipWithIndex.filter(_._2\
    \ == guessScoreList.size - 1).map(_._1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq15bn5zt.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreList.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq15bn5zt.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScoreList.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq15bn5zt.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreList.take(gameScoreList.size\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq15bn5zt.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScoreList.take(guessScoreList.size\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq15bn5zt.s"
  stdout: ''
  timestamp: 1659797816
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameSet = game.distinct\n\
    \        val guessSet = guess.distinct\n        val result = gameSet.diff(guessSet)\n\
    \        result.map(x => if (x == 0) 0 else abs(x - guess(gameSet.indexOf(x))))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3h_pizgu.scala:23)\n\tat Problem.main(tmp3h_pizgu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797817
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val guessesWithScores = guess.zipWithIndex.map { case (score, index) => score\
    \ - game(index) }\n        val guessesWithScoreAndIndex = guessesWithScores.zipWithIndex.map\
    \ { case (score, index) => (score, index) }\n        val guessesWithScoreAndIndexSorted\
    \ = guessesWithScoreAndIndex.sortBy(_._1).reverse\n        val guessesWithScoreAndIndexSortedWithCorrect\
    \ = guessesWithScoreAndIndexSorted.filter(_._1 == 0)\n        val guessesWithScoreAndIndexSortedWithCorrectAndIndex\
    \ = guessesWithScoreAndIndexSortedWithCorrect.zipWithIndex.map { case (score,\
    \ index, index) => (score, index, index) }\n        val guessesWithScoreAndIndexSortedWithCorrectAndIndexSorted\
    \ = guessesWithScoreAndIndexSortedWithCorrectAndIndex.sortBy(_._1).reverse\n \
    \       val guessesWithScoreAndIndexSortedWithCorrectAndIndexSortedWithIndex =\
    \ guessesWithScoreAndIndexSortedWithCorrectAndIndexSorted.zipWithIndex.map { case\
    \ (score, index, index) => (score, index, index) }\n        val guessesWithScoreAndIndexSortedWithCorrectAndIndexSortedWithIndexSorted\
    \ = guessesWithScoreAndIndexSortedWithCorrectAndIndexSortedWithIndex.sortBy(_._1).reverse\n\
    \        val guessesWithScoreAndIndexSortedWithCorrectAndIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithScoreAndIndexSortedWithCorrectAndIndexSortedWithIndexSorted.zipWithIndex.map\
    \ { case (score, index, index) => (score, index, index) }\n        guessesWithScoreAndIndexSortedWithCorrectAndIndexSortedWithIndexSortedWithIndexSortedWithIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E005] Naming Error: /tmp/tmp1t88pqkp.scala:22:145 --------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreAndIndexSortedWithCorrectAndIndex\e\
    [0m = guessesWithScoreAndIndexSortedWithCorrect.zipWithIndex.map { \e[33mcase\e\
    [0m (score, index, index) => (score, index, index) }\n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \                                                                   ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                       duplicate pattern variable:\
    \ index\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp1t88pqkp.scala:23:132 ----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreAndIndexSortedWithCorrectAndIndexSorted\e\
    [0m = guessesWithScoreAndIndexSortedWithCorrectAndIndex.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            ^\e\
    [0m\n\e[31m   |\e[0mNo implicit Ordering defined for Any..\n\e[31m   |\e[0mI found:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mAny\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[Any]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[Any].\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp1t88pqkp.scala:27:8 -------------------------\e[0m\e[0m\n\
    \e[31m27 |\e[0m        guessesWithScoreAndIndexSortedWithCorrectAndIndexSortedWithIndexSortedWithIndexSortedWithIndex\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: guessesWithScoreAndIndexSortedWithCorrectAndIndexSortedWithIndexSortedWithIndexSortedWithIndex\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797817
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => x._1 + x._2)\n        val guessesScores = guess.zipWithIndex.map(x\
    \ => x._1 + x._2)\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScoreMap.toList\n   \
    \     val guessesScoreList = guessesScoreMap.toList\n        val gameScoreSet\
    \ = gameScoreList.toSet\n        val guessesScoreSet = guessesScoreList.toSet\n\
    \        val gameScoreMap = gameScoreSet.map(x => (x, gameScoreMap.get(x)))\n\
    \        val guessesScoreMap = guessesScoreSet.map(x => (x, guessesScoreMap.get(x)))\n\
    \        val gameScoreMap = gameScoreMap.sortBy(x => x._1).reverse\n        val\
    \ guessesScoreMap = guessesScoreMap.sortBy(x => x._1).reverse\n        val gameScoreList\
    \ = gameScoreMap.map(x => x._2)\n        val guessesScoreList = guessesScoreMap.map(x\
    \ => x._2)\n        val gameScoreSet = gameScoreList.toSet\n        val guessesScoreSet\
    \ = guessesScoreList.toSet\n        val gameScoreMap = gameScoreSet.map(x => (x,\
    \ gameScoreMap.get(x)))\n        val guessesScoreMap = guessesScoreSet.map(x =>\
    \ (x, guessesScoreMap.get(x)))\n        val gameScoreMap = gameScoreMap.sortBy(x\
    \ => x._1).reverse\n        val guessesScoreMap = guessesScoreMap.sortBy(x =>\
    \ x._1).reverse\n        val gameScoreList = gameScoreMap.map(x => x._2)\n   \
    \     val guessesScoreList = guessesScoreMap.map(x => x._2)\n        val gameScoreSet\
    \ = gameScoreList.toSet\n        val guessesScoreSet = guessesScoreList.toSet\n\
    \        val gameScoreMap = gameScoreSet.map(x => (x, gameScoreMap.get(x)))\n\
    \        val guessesScoreMap = guessesScoreSet.map(x => (x, guessesScoreMap.get(x)))\n\
    \        val gameScoreMap = gameScoreMap.sortBy(x => x._1).reverse\n        val\
    \ guessesScoreMap = guessesScoreMap.sortBy(x => x._1).reverse\n        val gameScoreList\
    \ = gameScoreMap.map(x => x._2)\n        val guessesScoreList = guessesScoreMap.map(x\
    \ => x._2)\n        val gameScoreSet = gameScoreList.toSet\n        val guessesScoreSet\
    \ = guessesScoreList\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmponazdi_w.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScoreSet.map(\e\
    [36mx\e[0m => (x, gameScoreMap.get(x)))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmponazdi_w.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreMap\e[0m = guessesScoreSet.map(\e\
    [36mx\e[0m => (x, guessesScoreMap.get(x)))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreMap is already defined as \e[33mvalue\e[0m \e\
    [35mguessesScoreMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmponazdi_w.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScoreMap.sortBy(\e\
    [36mx\e[0m => x._1).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmponazdi_w.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreMap\e[0m = guessesScoreMap.sortBy(\e\
    [36mx\e[0m => x._1).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreMap is already defined as \e[33mvalue\e[0m \e\
    [35mguessesScoreMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of topleve"
  stdout: ''
  timestamp: 1659797818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val guessesRemaining = guessesCount - 1\n        val scoresRemaining\
    \ = scoresCount - 1\n        val guessesRemainingCounter = guessesRemaining\n\
    \        val scoresRemainingCounter = scoresRemaining\n        val guessesRemainingCounterCounter\
    \ = guessesRemainingCounter\n        val scoresRemainingCounterCounterCounter\
    \ = scoresRemainingCounterCounter\n        val guessesRemainingCounterCounterCounterCounter\
    \ = guessesRemainingCounterCounterCounter\n        val scoresRemainingCounterCounterCounterCounter\
    \ = scoresRemainingCounterCounterCounterCounter\n        val guessesRemainingCounterCounterCounterCounterCounter\
    \ = guessesRemainingCounterCounterCounterCounterCounter\n        val scoresRemainingCounterCounterCounterCounterCounter\
    \ = scoresRemainingCounterCounterCounterCounterCounterCounter\n        val guessesRemainingCounterCounterCounterCounterCounterCounter\
    \ = guessesRemainingCounterCounterCounterCounterCounterCounter\n        val scoresRemainingCounterCounterCounterCounterCounterCounterCounter\
    \ = scoresRemainingCounterCounterCounterCounterCounterCounterCounterCounter\n\
    \        val guessesRemainingCounterCounterCounterCounterCounterCounterCounter\
    \ = guessesRemainingCounterCounterCounterCounterCounterCounterCounterCounter\n\
    \        val scoresRemainingCounterCounterCounterCounterCounterCounterCounter\
    \ = scoresRemainingCounterCounterCounterCounterCounterCounterCounterCounterCounter\n\
    \        val guessesRemainingCounterCounterCounterCounterCounterCounterCounterCounter\
    \ = guessesRemainingCounterCounterCounterCounterCounterCounterCounterCounter\n\
    \        val scoresRemainingCounterCounterCounterCounterCounterCounterCounterCounter\
    \ = scoresRemainingCounterCounterCounterCounterCounterCounterCounterCounterCounter\n\
    \        val guessesRemainingCounterCounterCounterCounterCounterCounterCounterCounterCounter\
    \ = guessesRemainingCounterCounterCounterCounterCounterCounterCounterCounterCounter\n\
    \        val scoresRemainingCounterCounterCounterCounterCounterCounterCounterCounterCounterCounter\
    \ = scoresRemainingCounterCounterCounterCounterCounterCounterCounterCounterCounterCounterCounter\n\
    \        val guessesRemainingCounterCounterCounterCounterCounterCounterCounterCounterCounterCounter\
    \ = guessesRemainingCounterCounterCounterCounterCounterCounterCounterCounterCounterCounterCounter\n\
    \        val scoresRemainingCounterCounterCounterCounterCounterCounterCounterCounterCounterCounterCounter\
    \ = scoresRemainingCounterCounterCounterCounterCounterCounterCounterCounterCounterCounterCounterCounter\n\
    \        val guessesRemainingCounterCounterCounterCounterCounterCounterCounterCounterCounterCounterCounter\
    \ = guessesRemainingCounterCounterCounterCounterCounterCounterCounterCounterCounterCounterCounter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdfg9uhcp.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mscoresRemainingCounterCounterCounterCounterCounterCounterCounter\e\
    [0m = scoresRemainingCounterCounterCounterCounterCounterCounterCounterCounterCounter\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mscoresRemainingCounterCounterCounterCounterCounterCounterCounter\
    \ is already defined as \e[33mvalue\e[0m \e[35mscoresRemainingCounterCounterCounterCounterCounterCounterCounter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpdfg9uhcp.scala:17:22 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m                   \
    \   Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdfg9uhcp.scala:21:25\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdfg9uhcp.scala:27:51 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m        \e[33mval\e[0m \e[36mscoresRemainingCounterCounterCounter\e[0m = scoresRemainingCounterCounter\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: scoresRemainingCounterCounter\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tm"
  stdout: ''
  timestamp: 1659797815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for (score <- scores) {\n            val guess = guesses.find(_ == score)\n\
    \            if (guess == None) result += score\n            else result += guess\
    \ - score\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplcs3wx3p.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScore\
    \ = gameScores.foldLeft(0L) { (sum, score) => sum + score }\n        val guessScore\
    \ = guessScores.foldLeft(0L) { (sum, score) => sum + score }\n        val difference\
    \ = guessScore - gameScore\n        val differences = guessScores.zip(gameScores).map\
    \ { case (guessScore, gameScore) => Math.abs(guessScore - gameScore) }\n     \
    \   differences.map(difference + gameScore)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkceyw5vy.scala:23:24\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        differences.map(difference\
    \ + gameScore)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    Long\n\e[31m   |\e[0m  \
    \                      Required: Long => Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797816
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val gameScore = gameScores.foldLeft(0L) { (sum, score)\
    \ => sum + gameScores(score) }\n        val guessScore = guessScores.foldLeft(0L)\
    \ { (sum, score) => sum + guessScores(score) }\n        val difference = guessScore\
    \ - gameScore\n        val differences = guess.zipWithIndex.map { case (score,\
    \ index) => score -> difference }.toMap\n        differences.map { case (score,\
    \ difference) => difference }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuz1gj5j0.scala:19:83\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScore\e\
    [0m = gameScores.foldLeft(\e[31m0L\e[0m) { (\e[36msum\e[0m, \e[36mscore\e[0m)\
    \ => sum + gameScores(score) }\n\e[31m\e[31m   |\e[0m                        \
    \                                                           ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                         Found:    (score : (Long, Int))\n\
    \e[31m   |\e[0m                                         Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuz1gj5j0.scala:20:86 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessScore\e[0m = guessScores.foldLeft(\e\
    [31m0L\e[0m) { (\e[36msum\e[0m, \e[36mscore\e[0m) => sum + guessScores(score)\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                                   ^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                           Found:    (score : (Long, Int))\n\e[31m   |\e[0m \
    \                                        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpuz1gj5j0.scala:23:24 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        differences.map { \e[33mcase\e[0m (score, difference)\
    \ => difference }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.immutable.Iterable[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => (x._2, x._1))\n        val guessesScores = guess.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScores\
    \ = gameScoreList.map(x => x._2 - x._1)\n        val guessesScores = guessesScoreList.map(x\
    \ => x._2 - x._1)\n        val gameScores = gameScoreList.map(x => x._2 - x._1)\n\
    \        val guessesScores = guessesScoreList.map(x => x._2 - x._1)\n        val\
    \ gameScores = gameScoreList.map(x => x._2 - x._1)\n        val guessesScores\
    \ = guessesScoreList.map(x => x._2 - x._1)\n        val gameScores = gameScoreList.map(x\
    \ => x._2 - x._1)\n        val guessesScores = guessesScoreList.map(x => x._2\
    \ - x._1)\n        val gameScores = gameScoreList.map(x => x._2 - x._1)\n    \
    \    val guessesScores = guessesScoreList.map(x => x._2 - x._1)\n        val gameScores\
    \ = gameScoreList.map(x => x._2 - x._1)\n        val guessesScores = guessesScoreList.map(x\
    \ => x._2 - x._1)\n        val gameScores = gameScoreList.map(x => x._2 - x._1)\n\
    \        val guessesScores = guessesScoreList.map(x => x._2 - x._1)\n        val\
    \ gameScores = gameScoreList.map(x => x._2 - x._1)\n        val guessesScores\
    \ = guessesScoreList.map(x => x._2 - x._1)\n        val gameScores = gameScoreList.map(x\
    \ => x._2 - x._1)\n        val guessesScores = guessesScoreList.map(x => x._2\
    \ - x._1)\n        val gameScores = gameScoreList.map(x => x._2 - x._1)\n    \
    \    val guessesScores = guessesScoreList.map(x => x._2 - x._1)\n        val gameScores\
    \ = gameScoreList.map(x => x._2 - x._1)\n        val guessesScores = guessesScoreList.map(x\
    \ => x._2 - x._1)\n\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfjg7_y2y.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScoreList.map(\e\
    [36mx\e[0m => x._2 - x._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfjg7_y2y.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessesScores\e[0m = guessesScoreList.map(\e\
    [36mx\e[0m => x._2 - x._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScores is already defined as \e[33mvalue\e[0m \e[35mguessesScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfjg7_y2y.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScoreList.map(\e\
    [36mx\e[0m => x._2 - x._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfjg7_y2y.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesScores\e[0m = guessesScoreList.map(\e\
    [36mx\e[0m => x._2 - x._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScores is already defined as \e[33mvalue\e[0m \e[35mguessesScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfjg7_y2y.scala:27:12 ---------------------"
  stdout: ''
  timestamp: 1659797818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val guesses = gameScores.zipWithIndex.map\
    \ { case (score, index) => index }\n        val guessesWithScore = guesses.zipWithIndex.map\
    \ { case (index, guess) => guess - gameScore(index) }\n        guessesWithScore.map\
    \ { case (guess, score) => if (guess == 0) score else guess }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp9kg8bdv6.scala:20:89 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScore\e[0m =\
    \ guesses.zipWithIndex.map { \e[33mcase\e[0m (index, guess) => guess - gameScore(index)\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                         \e[33mvalue\e[0m \e[35mgameScore\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessesWithScores = guess.zip(gameScores).map { case\
    \ (guess, score) => (guess, score) }.toMap\n        val guessesWithScoreAndIndex\
    \ = guess.zip(gameScores).zipWithIndex.map { case (guess, score, index) => (guess,\
    \ score, index) }.toMap\n        val guessesWithScoreAndIndexAndGuess = guess.zip(gameScores).zipWithIndex.zipWithIndex.map\
    \ { case (guess, score, index, guessIndex) => (guess, score, index, guessIndex)\
    \ }.toMap\n        val guessesWithScoreAndIndexAndGuessAndGuess = guess.zip(gameScores).zipWithIndex.zipWithIndex.zipWithIndex.map\
    \ { case (guess, score, index, guessIndex, guessIndex2) => (guess, score, index,\
    \ guessIndex, guessIndex2) }.toMap\n        val guessesWithScoreAndIndexAndGuessAndGuessAndGuess\
    \ = guess.zip(gameScores).zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.map\
    \ { case (guess, score, index, guessIndex, guessIndex2, guessIndex3) => (guess,\
    \ score, index, guessIndex, guessIndex2, guessIndex3) }.toMap\n        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(gameScores).zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.map\
    \ { case (guess, score, index, guessIndex, guessIndex2, guessIndex3, guessIndex4)\
    \ => (guess, score, index, guessIndex, guessIndex2, guessIndex3, guessIndex4)\
    \ }.toMap\n        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(gameScores).zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.zipWithIndex.map\
    \ { case (guess, score, index, guessIndex, guessIndex2, guessIndex3, guessIndex4,\
    \ guessIndex5) => (guess, score, index, guessIndex, guessIndex2, guessIndex3,\
    \ guessIndex4, guessIndex5) }.toMap\n        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuessAndGue\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbgfqdz9i.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpbgfqdz9i.scala:20:139\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e\
    [33mval\e[0m \e[36mguessesWithScoreAndIndex\e[0m = guess.zip(gameScores).zipWithIndex.map\
    \ { \e[33mcase\e[0m (guess, score, index) => (guess, score, index) }.toMap\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                                            \
    \     ^\e[0m\n\e[31m   |\e[0m                            Cannot prove that (Any,\
    \ Any, Any) <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                     \
    \       where:    K is a type variable\n\e[31m   |\e[0m                      \
    \                V is a type variable\n\e[31m   |\e[0m                       \
    \     .\n\e[31m\e[31m-- Error: /tmp/tmpbgfqdz9i.scala:21:184 ----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreAndIndexAndGuess\e\
    [0m = guess.zip(gameScores).zipWithIndex.zipWithIndex.map { \e[33mcase\e[0m (guess,\
    \ score, index, guessIndex) => (guess, score, index, guessIndex) }.toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \              Cannot prove that (Any, Any, Any, Any) <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                       where:    K is a type variable\n\e\
    [31m   |\e[0m                                 V is a type variable\n\e[31m   |\e\
    [0m                       .\n\e[31m\e[31m-- Error: /tmp/tmpbgfqdz9i.scala:22:231\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e\
    [33mval\e[0m \e[36mguessesWithScoreAndIndexAndGuessAndGuess\e[0m = guess.zip(gameScores).zipWithIndex.zipWithIndex.zipWithIndex.map\
    \ { \e[33mcase\e[0m (guess, score, index, guessIndex, guessIndex2) => (guess, "
  stdout: ''
  timestamp: 1659797821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.filter(_._1 == _).map(_._2)\n        val guessesScores = guess.zipWithIndex.filter(_._1\
    \ == _).map(_._2)\n        val guessesCorrect = guessesScores.filter(x => gameScores.contains(x)).map(x\
    \ => 0)\n        val guessesWrong = guessesScores.filter(x => !gameScores.contains(x)).map(x\
    \ => math.abs(x - gameScores.last))\n        guessesCorrect ++ guessesWrong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzsexz91p.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = game.zipWithIndex.filter(_._1\
    \ == _).map(_._2)\n\e[31m\e[31m   |\e[0m                                     \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \   value _1 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzsexz91p.scala:18:56\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesScores\e[0m = guess.zipWithIndex.filter(_._1 == _).map(_._2)\n\e[31m\e\
    [31m   |\e[0m                                                      ^^^^\e[0m\n\
    \e[31m   |\e[0m                                        value _1 is not a member\
    \ of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzsexz91p.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        guessesCorrect ++ guessesWrong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.filter(_._1 == _).map(_._2)\n        val guessScores = guess.zipWithIndex.filter(_._1\
    \ == _).map(_._2)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScores.toList\n       \
    \ val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiy40vdoz.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiy40vdoz.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreMap\e[0m = gameScores.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiy40vdoz.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiy40vdoz.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiy40vdoz.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiy40vdoz.scala:29:1"
  stdout: ''
  timestamp: 1659797791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guesses_size = guesses.size\n        val\
    \ scores_size = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < guesses_size) {\n            val guess\
    \ = guesses(i)\n            val score = scores(i)\n            val difference\
    \ = abs(guess - score)\n            if (difference < 0)\n                result.add(difference)\n\
    \            else\n                result.add(-difference)\n            i += 1\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzbqthurl.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpzbqthurl.scala:21:25 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score == 0) 0 else abs(score - gameScore) }\n \
    \       gameScores.toList\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdw91q_vm.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => \e[33mif\e[0m (score == \e[31m0\e[0m) \e\
    [31m0\e[0m \e[33melse\e[0m abs(score - gameScore) }\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659797691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (index, score) }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => (index, score)\
    \ }\n        val gameScoreSet = gameScores.toSet\n        val guessesScoreSet\
    \ = guessesScores.toSet\n        val gameScoreList = gameScores.toList\n     \
    \   val guessesScoreList = guessesScores.toList\n        val gameScoreSetSize\
    \ = gameScoreSet.size\n        val guessesScoreSetSize = guessesScoreSet.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreSetSize = gameScoreSetSize\n \
    \       val guessesScoreSetSize = guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessesScoreListSize = guessesScoreListSize\n\
    \        val gameScoreSetSize = gameScoreSetSize\n        val guessesScoreSetSize\
    \ = guessesScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n \
    \       val guessesScoreListSize = guessesScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessesScoreSetSize = guessesScoreSetSize\n\
    \        val gameScoreListSize = gameScoreListSize\n        val guessesScoreListSize\
    \ = guessesScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n  \
    \      val guessesScoreSetSize = guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessesScoreListSize = guessesScoreListSize\n\
    \        val gameScoreSetSize = gameScoreSetSize\n        val guessesScoreSetSize\
    \ = guessesScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n \
    \       val guessesScoreListSize = guessesScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessesScoreSetSize = guessesScoreSetSize\n\
    \        val gameScoreListSize = gameScoreListSize\n        val guessesScoreListSize\
    \ = guessesScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n  \
    \      val guessesScoreSetSize = guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessesScoreListSize = guessesScoreListSize\n\
    \        val gameScoreSetSize = gameScoreSetSize\n        val guessesScoreSetSize\
    \ = guessesScoreSetSize\n        val gameScoreListSize = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmptk9uz2a1.scala:57:31 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptk9uz2a1.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreSetSize\e[0m = gameScoreSetSize\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScoreSetSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScoreSetSize\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptk9uz2a1.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessesScoreSetSize\e[0m = guessesScoreSetSize\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mguessesScoreSetSize is already defined as \e[33mvalue\e[0m \e[35mguessesScoreSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptk9uz2a1.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m = gameScoreListSize\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgameScoreListSize is already defined as \e[33mvalue\e[0m \e[35mgameScoreListSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptk9uz2a1.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreListSize\e[0m = guessesScoreListSize\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => score -> index }.toMap\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithIndexesAndScores\
    \ = guessesWithIndexes.map { case (index, score) => score -> index }.toMap\n \
    \       val guessesWithIndexesAndScoresAndScores = guessesWithIndexesAndScores.map\
    \ { case (index, score, score) => score -> index }.toMap\n        val guessesWithIndexesAndScoresAndScoresAndScores\
    \ = guessesWithIndexesAndScoresAndScores.map { case (index, score, score, score)\
    \ => score -> index }.toMap\n        val guessesWithIndexesAndScoresAndScoresAndScoresAndScores\
    \ = guessesWithIndexesAndScoresAndScoresAndScores.map { case (index, score, score,\
    \ score, score) => score -> index }.toMap\n        val guessesWithIndexesAndScoresAndScoresAndScoresAndScoresAndScores\
    \ = guessesWithIndexesAndScoresAndScoresAndScoresAndScores.map { case (index,\
    \ score, score, score, score, score) => score -> index }.toMap\n        val guessesWithIndexesAndScoresAndScoresAndScoresAndScoresAndScoresAndScores\
    \ = guessesWithIndexesAndScoresAndScoresAndScoresAndScoresAndScoresAndScores.map\
    \ { case (index, score, score, score, score, score, score) => score -> index }.toMap\n\
    \        val guessesWithIndexesAndScoresAndScoresAndScoresAndScoresAndScoresAndScoresAndScoresAndScores\
    \ = guessesWithIndexesAndScoresAndScoresAndScoresAndScoresAndScoresAndScoresAndScores.map\
    \ { case (index, score, score, score, score, score, score, score) => score ->\
    \ index }.toMap\n        val guessesWithIndexesAndScoresAndScoresAndScoresAndScoresAndScoresAndScoresAndScoresAndScoresAndScores\
    \ = guessesWithIndexesAndScoresAndScoresAndScoresAndScoresAndScores\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpr0x_6o0y.scala:20:93 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexes\e[0m\
    \ = guessesWithScores.map { \e[33mcase\e[0m (score, index) => index }.toMap\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                      Cannot prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                        where:    K is a type variable\n\
    \e[31m   |\e[0m                                                  V is a type variable\n\
    \e[31m   |\e[0m                                        .\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpr0x_6o0y.scala:26:87 ---------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesAndScoresAndScoresAndScoresAndScoresAndScoresAndScores\e\
    [0m = guessesWithIndexesAndScoresAndScoresAndScoresAndScoresAndScoresAndScores.map\
    \ { \e[33mcase\e[0m (index, score, score, score, score, score, score) => score\
    \ -> index }.toMap\n\e[31m\e[31m   |\e[0m                                    \
    \                                                   ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35mguessesWithIndexesAndScoresAndScoresAndScoresAndScoresAndScoresAndScores\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr0x_6o0y.scala:27:105\
    \ -----------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesAndScoresAndScoresAndScoresAndScoresAndScoresAndScoresAndScoresAndScores\e\
    [0m = guessesWithIndexesAndScoresAndScoresAndScoresAndScoresAndScoresAndScoresAndScores.map\
    \ { \e[33mcase\e[0m (index, score, score, score, score, score, score, score) =>\
    \ score -> index }.toMap\n\e[31m\e[31m   |\e[0m                              \
    \                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: guesse"
  stdout: ''
  timestamp: 1659797822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two lists of scores and guesses of equal length, where each\
    \ index shows a match. \n    // Return a list of the same length denoting how\
    \ far off each guess was. If they have guessed correctly,\n    // the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val gameScore = gameScores.map { case (score, index)\
    \ => score }\n        val guessScore = guessScores.map { case (score, index) =>\
    \ score }\n        val gameScores = gameScores.map { case (score, index) => score\
    \ - guessScore(index) }\n        val guessScores = guessScores.map { case (score,\
    \ index) => score - gameScore(index) }\n        gameScores.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2emwq6hn.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.map\
    \ { \e[33mcase\e[0m (score, index) => score - guessScore(index) }\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2emwq6hn.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mguessScores\e[0m = guessScores.map {\
    \ \e[33mcase\e[0m (score, index) => score - gameScore(index) }\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScores is already defined as \e[33mvalue\e[0m \e[35mguessScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp2emwq6hn.scala:23:19 --------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m        gameScores.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e[0m\e[1m\e[31m)\e[0m]\n\e[31m   |\e[0m   \
    \     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797822
