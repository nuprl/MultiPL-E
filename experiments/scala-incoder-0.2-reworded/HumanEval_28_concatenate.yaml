name: HumanEval_28_concatenate
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n\
  \    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n  \
  \  // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(concatenate((List[String]())).equals((\"\
  \")));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\"))).equals((\"xyz\"\
  )));\n    assert(concatenate((List[String](\"x\", \"y\", \"z\", \"w\", \"k\"))).equals((\"\
  xyzwk\")));\n    }\n\n}\n"
completions: ['        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(
    (s, s) => s + s)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', "        strings.length match {\n            case 0 => \"\"\n         \
    \   case 1 => strings(0)\n            case _ => {\n                val result\
    \ = strings(0)\n                strings.tail.foreach(x => result += x)\n     \
    \           result\n            }\n        }", '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")( (s, s) => s + s)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")( (s,
    s) => s + s)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', "        strings.length match {\n            case 0 => \"\"\n         \
    \   case 1 => strings.head\n            case _ => strings.head + concatenate(strings.tail)\n\
    \        }", '        strings.foldLeft("")( (s, s) => s + s)', '        strings.foldLeft("")(
    (acc, s) => acc + s)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")( (acc, s) => acc + s )', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")( (s, s) => s + s)', "        strings.length\
    \ match {\n            case 0 => \"\"\n            case 1 => strings.head\n  \
    \          case _ => strings.head + concatenate(strings.tail)\n        }", '        strings.foldLeft("")(_
    + _)', "        strings.length match {\n            case 0 => \"\"\n         \
    \   case _ => strings.head + concatenate(strings.tail)\n        }", '        strings.foldLeft("")(_
    + _)', "        strings.length match {\n            case 0 => \"\"\n         \
    \   case _ => strings.head + concatenate(strings.tail)\n        }", "        strings.length\
    \ match {\n            case 0 => \"\"\n            case _ => strings.mkString(\"\
    \")\n        }", '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")( (acc, s) => acc + s)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', "        strings.length match {\n            case 0 => \"\"\n         \
    \   case 1 => strings(0)\n            case _ => strings.foldLeft(\"\")(_ + _)\n\
    \        }", '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', "        strings.length match {\n            case 0 => \"\"\n         \
    \   case 1 => strings.head\n            case _ => strings.head + concatenate(strings.tail)\n\
    \        }", "        strings.length match {\n            case 0 => \"\"\n   \
    \         case 1 => strings(0)\n            case _ => strings.foldLeft(\"\")(_\
    \ + _)\n        }", '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(
    (acc, s) => acc + s )', '        strings.foldLeft("")( (acc, s) => acc + s)',
  '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(
    (s, s) => s + s)', '        strings.foldLeft("")(_ + _)', "        strings.length\
    \ match {\n            case 0 => \"\"\n            case _ => strings.head + concatenate(strings.tail)\n\
    \        }", '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(
    (s, s) => s + s)', '        strings.foldLeft("")( (s, s) => s + s)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', "        strings.length match {\n\
    \            case 0 => \"\"\n            case _ => strings.mkString(\"\")\n  \
    \      }", '        strings.foldLeft("")( (acc, s) => acc + s)', "        strings.length\
    \ match {\n            case 0 => \"\"\n            case 1 => strings(0)\n    \
    \        case _ => {\n                val result = strings(0)\n              \
    \  strings.tail.foreach(s => result += s)\n                result\n          \
    \  }\n        }", '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', "        strings.length match {\n            case 0 => \"\"\n         \
    \   case 1 => strings(0)\n            case _ => strings.mkString(\"\")\n     \
    \   }", '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', "        strings.length match {\n\
    \            case 0 => \"\"\n            case 1 => strings(0)\n            case\
    \ _ => strings.foldLeft(\"\")(_ + _)\n        }", '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")( (acc,
    s) => acc + s)', '        strings.foldLeft("")( (s, s) => s + s)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', "        strings.length match {\n            case 0 => \"\"\n         \
    \   case 1 => strings(0)\n            case _ => {\n                val result\
    \ = strings(0)\n                for (i <- 1 until strings.length)\n          \
    \          result += strings(i)\n                result\n            }\n     \
    \   }", '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', "        strings.length match {\n            case 0 => \"\"\n         \
    \   case _ => strings.head + concatenate(strings.tail)\n        }", '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', "        strings.length match {\n            case 0 => \"\"\n         \
    \   case 1 => strings(0)\n            case _ => strings.foldLeft(\"\")(_ + _)\n\
    \        }", "        strings.length match {\n            case 0 => \"\"\n   \
    \         case 1 => strings(0)\n            case _ => strings.foldLeft(\"\")(_\
    \ + _)\n        }", '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")( (s,
    s) => s + s)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', "        strings.length match {\n            case 0 => \"\"\n         \
    \   case 1 => strings(0)\n            case _ => strings.foldLeft(\"\")(_ + _)\n\
    \        }", '        strings.foldLeft("")(_ + _)', "        strings.length match\
    \ {\n            case 0 => \"\"\n            case 1 => strings.head\n        \
    \    case _ => strings.head + concatenate(strings.tail)\n        }", '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")(_
    + _)', '        strings.foldLeft("")(_ + _)', '        strings.foldLeft("")( (acc,
    s) => acc + s)', '        strings.foldLeft("")(_ + _)', "        strings.length\
    \ match {\n            case 0 => \"\"\n            case 1 => strings(0)\n    \
    \        case _ => strings.foldLeft(\"\")(_ + _)\n        }", '        strings.foldLeft("")(
    (s, s) => s + s)', '        strings.foldLeft("")(_ + _)']
stop_tokens:
- "\n    }\n"
