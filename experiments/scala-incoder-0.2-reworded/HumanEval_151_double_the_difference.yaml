name: HumanEval_151_double_the_difference
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of numbers, return the sum of squares of the numbers\n    //\
  \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
  \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong, 0l.toLong)))\n\
  \    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong, -2l.toLong,\
  \ 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
  \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
  \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
  \ : List[Float]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
  \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
  \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
  \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
  \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
  \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
  \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
  \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
  \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
completions: ["        val sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum +=\
    \ x * x else 0)\n        sum", "        val sum = 0l\n        for(i <- lst) {\n\
    \            sum += i * i\n        }\n        sum", "        val sum = 0\n   \
    \     for(i <- lst) sum += i.toLong\n        sum", "        val sum = 0\n    \
    \    for(i <- lst) {\n            if(i % 2 == 1) {\n                sum += i\n\
    \            }\n        }\n        sum", "        val sum = 0\n        lst.foreach(x\
    \ => if (x % 2 == 1) sum += x * x else 0)\n        sum", "        val sum = 0\n\
    \        for(i <- lst) {\n            if(i % 2 == 1) {\n                sum +=\
    \ i\n            }\n        }\n        sum.toLong", "        val sum = 0\n   \
    \     val even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x =>\
    \ x % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n\
    \        val evenSumSquare = evenSum * evenSum\n        val oddSumSquare = oddSum\
    \ * oddSum\n        val evenSumSquareOdd = evenSumSquare * oddSum\n        val\
    \ oddSumSquareEven = oddSumSquare * evenSum\n        val evenSumSquareEvenOdd\
    \ = evenSumSquareOdd * oddSum\n        val oddSumSquareEvenOddSum = oddSumSquareEven\
    \ * evenSum\n        val evenSumSquareEvenOddSumSquare = evenSumSquareEvenOddSum\
    \ * oddSumSquareEven\n        val oddSumSquareEvenOddSumSquareOdd = oddSumSquareEvenOddSum\
    \ * evenSumSquareOdd\n        val evenSumSquareEvenOddSumSquareEvenOdd = evenSumSquareEvenOddSumSquare\
    \ * oddSumSquareEven\n        val oddSumSquareEvenOddSumSquareEvenOddSum = oddSumSquareEvenOddSumSquare\
    \ * evenSumSquareOdd\n        val evenSumSquareEvenOddSumSquareEvenOddSumSquare\
    \ = evenSumSquareEvenOddSumSquare * oddSumSquareEven\n        val oddSumSquareEvenOddSumSquareEvenOddSumSquareOdd\
    \ = oddSumSquareEvenOddSumSquare * evenSumSquareOdd\n        val evenSumSquareEvenOddSumSquareEvenOddSumSquareEvenOdd\
    \ = evenSumSquareEvenOddSumSquare * oddSumSquareEven\n        val oddSumSquareEvenOddSumSquareEvenOddSumSquareEvenOddSum\
    \ = oddSumSquareEvenOddSumSquare * evenSumSquareOdd\n        val evenSumSquareEvenOddSumSquareEvenOddSumSquareEvenOddSumSquare\
    \ = evenSumSquareEvenOddSumSquare * oddSumSquareEven\n        val oddSumSquareEvenOddSumSquareEvenOddSumSquareEvenOddSumSquareOdd\
    \ = oddSumSquareEvenOddSumSquare * evenSumSquareOdd\n        val evenSumSquareEvenOddSumSquareEvenOddSumSquareEvenOddSumSquareEvenOdd\
    \ = evenSumSquareEvenOddSumSquare * oddSumSquareEven\n        val oddSumSquareEvenOddSumSquareEvenOddSumSquareEvenOddSumSquare",
  "        val sum = 0\n        val odds = mutable.Set[Float]()\n        lst.foreach(x\
    \ => if (x % 2 == 1) odds += x)\n        odds.foreach(x => sum += x * x)\n   \
    \     sum", "        val sum = 0\n        val oddSum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            val f = lst(i)\n            if(f < 0f || f % 1f !=\
    \ 0f) {\n                sum += f\n                oddSum += f\n            }\n\
    \        }\n        if(lst.size == 0) 0\n        else sum * sum - oddSum * oddSum",
  "        val sum = 0\n        for(i <- lst) {\n            val n = if (i < 0l) 0l\
    \ else i\n            sum += n*n\n        }\n        sum", "        val sum =\
    \ 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      val evenSquare = even.map(x => x * x).sum\n        val oddSquare = odd.map(x\
    \ => x * x).sum\n        val result = evenSum + oddSum - evenSquare - oddSquare\n\
    \        result", "        val sum = 0\n        val odd = lst.filter(x => x %\
    \ 2 == 1).map(x => x * x).sum\n        val even = lst.filter(x => x % 2 == 0).map(x\
    \ => x * x).sum\n        val total = odd + even\n        if (lst.isEmpty) 0\n\
    \        else total", "        val sum = 0l\n        val nums = lst.filter(_ %\
    \ 2 == 1).toList\n        for(i <- nums) {\n            sum += i\n        }\n\
    \        sum", "        val sum = 0\n        lst.foreach(x => if (x % 2 == 1)\
    \ sum += x * x else 0)\n        sum", "        val sum = 0\n        for(i <- 0\
    \ until lst.size) {\n            val x = lst(i)\n            if(x % 2 == 1) {\n\
    \                sum += x\n            }\n        }\n        sum", "        val\
    \ sum = 0\n        for(i <- lst) {\n            val x = i.toLong\n           \
    \ if(x % 2 == 1) {\n                sum += x\n            }\n        }\n     \
    \   sum", "        val sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum +=\
    \ x * x else 0)\n        sum", "        val nums = lst.filter(_ % 2 == 1)\n  \
    \      if (nums.isEmpty) 0\n        else nums.sum * nums.sum", "        val sum\
    \ = 0\n        for(i <- lst) {\n            if(i % 2 != 0) sum += i\n        }\n\
    \        sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n  \
    \          if(lst(i) %2 == 1) {\n                sum += lst(i)\n            }\n\
    \        }\n        sum", "        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i) % 2 == 1) {\n                sum += lst(i)\n      \
    \      }\n        }\n        sum", "        val sum = 0\n        val odds = mutable.Set[Float]()\n\
    \        lst.foreach(x => {\n            if (x % 2 == 1) {\n                sum\
    \ += x\n                odds.add(x)\n            }\n        })\n        if (odds.isEmpty)\
    \ 0\n        else sum * sum", "        val sum = 0\n        for(i <- lst) {\n\
    \            if(i % 2 == 1) {\n                sum += i\n            }\n     \
    \   }\n        sum", "        val sum = 0\n        lst.foreach(x => if (x % 2\
    \ == 1) sum += x * x else 0)\n        sum", "        val sum = 0\n        val\
    \ odd = mutable.Set[Float]()\n        lst.foreach(x => if (x % 2 == 1) odd +=\
    \ x)\n        val even = lst.filter(x => x % 2 == 0)\n        val result = even.foldLeft(0l)\
    \ { (sum, elem) => sum + elem * elem }\n        odd.foldLeft(result) { case (sum,\
    \ elem) => sum + elem * elem }", "        val sum = 0\n        val odd = lst.filter(x\
    \ => x % 2 == 1).map(x => x * x).sum\n        val even = lst.filter(x => x % 2\
    \ == 0).map(x => x * x).sum\n        odd + even", "        val sum = 0\n     \
    \   val odd = mutable.Set[Float]()\n        lst.foreach(x => {\n            if\
    \ (x % 2 == 1) {\n                sum += x\n                odd(x) = true\n  \
    \          }\n        })\n        if (sum > 0) {\n            sum\n        } else\
    \ {\n            0\n        }", "        val sum = 0\n        val odd = new mutable.HashSet[Float]()\n\
    \        for(i <- lst) {\n            if(i % 2 == 1) {\n                sum +=\
    \ i\n                odd(i) = true\n            }\n        }\n        if(sum ==\
    \ 0) 0\n        else sum * sum - sum.filter(x => !odd(x)).sum", "        val sum\
    \ = 0\n        for(i <- lst) sum += i * i\n        sum", "        if (lst.isEmpty)\
    \ 0\n        else lst.foldLeft(0l){ (sum, item) =>\n            if (item % 2 ==\
    \ 1) sum + item\n            else sum\n        }", "        val sum = 0\n    \
    \    lst.foreach(x => if (x % 2 == 1) sum += x * x else 0)\n        sum", "  \
    \      val sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else\
    \ 0)\n        sum", "        val sum = 0\n        val even = lst.filter(_ % 2\
    \ == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val sum = evenSum + oddSum\n        sum",
  "        val sum = 0\n        for(i <- lst) {\n            if(i % 2 == 1) {\n  \
    \              sum += i\n            }\n        }\n        sum", "        val\
    \ sum = 0l\n        for(i <- lst) {\n            if(i % 2 == 1L) {\n         \
    \       sum += i\n            }\n        }\n        sum", "        val sum = 0\n\
    \        val evenSum = 0\n        val oddSum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            if(x % 2 == 0) {\n              \
    \  evenSum += x\n            } else {\n                oddSum += x\n         \
    \   }\n        }\n        val evenSumSquared = evenSum * evenSum\n        val\
    \ oddSumSquared = oddSum * oddSum\n        val sum = evenSumSquared + oddSumSquared\n\
    \        sum", "        val sum = 0\n        for(i <- lst) {\n            if(i\
    \ % 2 == 1) {\n                sum += i\n            }\n        }\n        sum.toLong",
  "        val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.map(x => x * x).sum\n \
    \       val oddSum = odd.map(x => x * x).sum\n        val result = evenSum - oddSum\n\
    \        result", "        val sum = 0\n        lst.foreach(x => if (x % 2 ==\
    \ 1) sum += x * x else 0)\n        sum", "        val sum = 0\n        val even\
    \ = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n       \
    \ val evenSum = even.sum\n        val oddSum = odd.sum\n        val evenSumSquare\
    \ = evenSum * evenSum\n        val oddSumSquare = oddSum * oddSum\n        val\
    \ result = evenSumSquare + oddSumSquare\n        result", "        val sum = 0\n\
    \        for(i <- lst) {\n            if (i % 2 == 1) sum += i\n        }\n  \
    \      sum", "        val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n\
    \        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n  \
    \      val oddSum = odd.sum\n        val result = evenSum + oddSum\n        result",
  "        val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)(_ + _)\n \
    \       val oddSum = odd.foldLeft(0l)(_ + _)\n        val sum = evenSum + oddSum\n\
    \        sum", "        val sum = 0\n        for(i <- lst) {\n            if (i\
    \ % 2 == 1) sum += i\n        }\n        sum", "        val sum = 0\n        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        val evenSumSquare\
    \ = evenSum * evenSum\n        val oddSumSquare = oddSum * oddSum\n        val\
    \ result = evenSumSquare + oddSumSquare\n        result", "        val sum = 0\n\
    \        for(i <- lst) {\n            val x = i.toLong\n            val y = if\
    \ (x < 0) -x else x\n            sum += y * y\n        }\n        sum", "    \
    \    val sum = 0\n        val odd = new mutable.HashSet[Float]()\n        lst.foreach(x\
    \ => if (x % 2 == 1) odd += x)\n        val even = lst.filterNot(x => x % 2 ==\
    \ 1)\n        val result = even.foldLeft(0l) { (acc, x) => acc + x * x }\n   \
    \     val result2 = odd.foldLeft(0l) { (acc, x) => acc + x * x }\n        val\
    \ result3 = even.foldLeft(0l) { (acc, x) => acc + x * x }\n        val result4\
    \ = odd.foldLeft(0l) { (acc, x) => acc + x * x }\n        val result5 = even.foldLeft(0l)\
    \ { (acc, x) => acc + x * x }\n        val result6 = odd.foldLeft(0l) { (acc,\
    \ x) => acc + x * x }\n        val result7 = even.foldLeft(0l) { (acc, x) => acc\
    \ + x * x }\n        val result8 = odd.foldLeft(0l) { (acc, x) => acc + x * x\
    \ }\n        val result9 = even.foldLeft(0l) { (acc, x) => acc + x * x }\n   \
    \     val result10 = odd.foldLeft(0l) { (acc, x) => acc + x * x }\n        val\
    \ result11 = even.foldLeft(0l) { (acc, x) => acc + x * x }\n        val result12\
    \ = odd.foldLeft(0l) { (acc, x) => acc + x * x }\n        val result13 = even.foldLeft(0l)\
    \ { (acc, x) => acc + x * x }\n        val result14 = odd.foldLeft(0l) { (acc,\
    \ x) => acc + x * x }\n        val result15 = even.foldLeft(0l) { (acc, x) =>\
    \ acc + x * x }\n        val result16 = odd.foldLeft(0l) { (acc, x) => acc + x\
    \ * x }\n        val result17 = even.foldLeft(0l) { (acc, x) => acc + x * x }\n\
    \        val result18 = odd.foldLeft(0l) { (acc, x) => acc + x * x }\n       \
    \ val result19 = even.foldLeft(0l) { (acc, x) => acc + x * x }\n        val result20\
    \ = odd.foldLeft(0l) { (acc, x) => acc + x * x }\n        val result21 = even.foldLeft(0l)\
    \ { (acc, ", "        val sum = 0\n        val nums = lst.filter(_ % 2 == 1)\n\
    \        nums.foreach(x => sum += x * x)\n        nums.sum", "        val sum\
    \ = 0\n        val oddSum = 0\n        lst.foreach(x => {\n            if (x %\
    \ 2 == 1) {\n                sum += x\n                oddSum += x\n         \
    \   }\n        })\n        if (sum > 0) {\n            oddSum\n        } else\
    \ {\n            0\n        }", "        val even = lst.filter(x => x % 2 == 0)\n\
    \        val odd = lst.filter(x => x % 2 != 0)\n        val sum = even.sum\n \
    \       val sumOdd = odd.sum\n        val sumOddEven = even.zip(odd).map(x =>\
    \ x._1 + x._2).sum\n        val sumOddEvenOdd = even.zip(odd).zip(odd).map(x =>\
    \ x._1 + x._2 + x._3).sum\n        val sumOddEvenOddOdd = even.zip(odd).zip(odd).zip(odd).map(x\
    \ => x._1 + x._2 + x._3 + x._4).sum\n        val sumOddEvenOddOddOdd = even.zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).map(x\
    \ => x._1 + x._2 + x._3 + x._4 + x._5).sum\n        val sumOddEvenOddOddOddOdd\
    \ = even.zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).map(x\
    \ => x._1 + x._2 + x._3 + x._4 + x._5 + x._6).sum\n        val sumOddEvenOddOddOddOddOdd\
    \ = even.zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).map(x\
    \ => x._1 + x._2 + x._3 + x._4 + x._5 + x._6 + x._7).sum\n        val sumOddEvenOddOddOddOddOddOdd\
    \ = even.zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).map(x\
    \ => x._1 + x._2 + x._3 + x._4 + x._5 + x._6 + x._7 + x._8).sum\n        val sumOddEvenOddOddOddOddOddOddOdd\
    \ = even.zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).zip(odd).map(x\
    \ => x._1 + x._2 + x._3 + x._4 + x._5 + x._6 + x._7 + x._8 + x._9", "        val\
    \ even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n  \
    \      val evenSum = even.sum\n        val oddSum = odd.sum\n        val result\
    \ = evenSum - oddSum\n        result", "        val sum = 0\n        val nums\
    \ = lst.filter(x => x % 2 != 0).toList\n        for(i <- 0 until nums.size) {\n\
    \            sum += nums(i)\n        }\n        sum", "        val sum = 0\n \
    \       val oddSum = 0\n        for(i <- lst) {\n            val isOdd = i % 2\
    \ != 0\n            if(isOdd) {\n                oddSum += i\n            }\n\
    \            sum += i * i\n        }\n        if(oddSum == 0) {\n            return\
    \ 0\n        }\n        sum", "        val sum = 0\n        for(i <- lst) if(i\
    \ % 2 != 0) sum += i\n        sum", "        val sum = 0\n        lst.foreach(x\
    \ => if (x % 2 == 1) sum += x * x else 0)\n        sum", "        val sum = 0\n\
    \        for(i <- lst) {\n            val square = i * i\n            if(i % 2\
    \ == 1) {\n                sum += square\n            }\n        }\n        sum",
  "        val sum = 0\n        for(i <- 0 until lst.size) {\n            val x =\
    \ lst(i)\n            if(x % 2 == 1) {\n                sum += x\n           \
    \ }\n        }\n        sum", "        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)(_\
    \ + _)\n        val oddSum = odd.foldLeft(0l)(_ + _)\n        val sum = evenSum\
    \ + oddSum\n        sum", "        val sum = 0\n        for(i <- lst) {\n    \
    \        if(i % 2 == 1) {\n                sum += i\n            }\n        }\n\
    \        sum", "        val sum = 0\n        val odd = mutable.Set[Float]()\n\
    \        lst.foreach(x => {\n            if (x % 2 == 1) {\n                sum\
    \ += x\n                x match {\n                    case x if x < 0 => odd.add(x)\n\
    \                    case x if x > 0 => odd.remove(x)\n                }\n   \
    \         }\n        })\n        if (odd.isEmpty) 0 else sum * sum", "       \
    \ val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      val evenSquareSum = even.map(x => x * x).sum\n        val oddSquareSum\
    \ = odd.map(x => x * x).sum\n        val evenSquareSumOdd = even.map(x => x *\
    \ x).sum + odd.map(x => x * x).sum\n        val oddSquareSumEven = odd.map(x =>\
    \ x * x).sum + even.map(x => x * x).sum\n        val evenSquareSumEvenOdd = even.map(x\
    \ => x * x).sum + odd.map(x => x * x).sum + even.map(x => x * x).sum\n       \
    \ val oddSquareSumEvenOddSum = odd.map(x => x * x).sum + even.map(x => x * x).sum\
    \ + odd.map(x => x * x).sum + even.map(x => x * x).sum + odd.map(x => x * x).sum\
    \ + even.map(x => x * x).sum + odd.map(x => x * x).sum + even.map(x => x * x).sum\
    \ + odd.map(x => x * x).sum + even.map(x => x * x).sum + odd.map(x => x * x).sum\
    \ + even.map(x => x * x).sum + odd.map(x => x * x).sum + even.map(x => x * x).sum\
    \ + odd.map(x => x * x).sum + even.map(x => x * x).sum + odd.map(x => x * x).sum\
    \ + even.map(x => x * x).sum + odd.map(x => x * x).sum + even.map(x => x * x).sum\
    \ + odd.map(x => x * x).sum + even.map(x => x * x).sum + odd.map(x => x * x).sum\
    \ + even.map(x => x * x).sum + odd.map(x => x * x).sum + even.map(x => x * x).sum\
    \ + odd.map(x => x * x).sum + even.map(x => x * x).sum + odd.map(x => x * x).sum\
    \ + even.map(x => x * x).sum + odd.map(x => x * x).sum + even.map(x => x * x).sum\
    \ + odd.map(x => x * x).sum + even.map(x => x * x).sum + odd.map(x => x * x).sum\
    \ + even.map(x => x * x).sum + odd.map(x => x * x).sum + even.map(x ", "     \
    \   val sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else 0)\n\
    \        sum", "        val sum = 0\n        lst.foreach(x => if (x % 2 == 1)\
    \ sum += x * x else 0)\n        sum", "        val sum = 0\n        for(i <- lst)\
    \ {\n            sum += i * i\n        }\n        sum", "        val sum = 0\n\
    \        val evenSum = 0\n        val oddSum = 0\n        val evenSum2 = 0\n \
    \       val oddSum2 = 0\n        val evenSum3 = 0\n        val oddSum3 = 0\n \
    \       val evenSum4 = 0\n        val oddSum4 = 0\n        val evenSum5 = 0\n\
    \        val oddSum5 = 0\n        val evenSum6 = 0\n        val oddSum6 = 0\n\
    \        val evenSum7 = 0\n        val oddSum7 = 0\n        val evenSum8 = 0\n\
    \        val oddSum8 = 0\n        val evenSum9 = 0\n        val oddSum9 = 0\n\
    \        val evenSum10 = 0\n        val oddSum10 = 0\n        val evenSum11 =\
    \ 0\n        val oddSum11 = 0\n        val evenSum12 = 0\n        val oddSum12\
    \ = 0\n        val evenSum13 = 0\n        val oddSum13 = 0\n        val evenSum14\
    \ = 0\n        val oddSum14 = 0\n        val evenSum15 = 0\n        val oddSum15\
    \ = 0\n        val evenSum16 = 0\n        val oddSum16 = 0\n        val evenSum17\
    \ = 0\n        val oddSum17 = 0\n        val evenSum18 = 0\n        val oddSum18\
    \ = 0\n        val evenSum19 = 0\n        val oddSum19 = 0\n        val evenSum20\
    \ = 0\n        val oddSum20 = 0\n        val evenSum21 = 0\n        val oddSum21\
    \ = 0\n        val evenSum22 = 0\n        val oddSum22 = 0\n        val evenSum23\
    \ = 0\n        val oddSum23 = 0\n        val evenSum24 = 0\n        val oddSum24\
    \ = 0\n        val evenSum25 = 0\n        val oddSum25 = 0\n        val evenSum26\
    \ = 0\n        val oddSum26 = 0\n        val evenSum27 = 0\n        val oddSum27\
    \ = 0\n        val evenSum28 = 0\n        val oddSum28 = 0\n        val evenSum29\
    \ = 0\n        val oddSum29 = 0\n        val evenSum30 = 0\n        val oddSum30\
    \ = 0\n        val evenSum31 = 0\n        val oddSum31 = 0\n        val evenSum32\
    \ = 0\n        val oddSum32 = 0\n        val evenSum33 = 0\n        val oddSum33\
    \ = 0\n        val evenSum34 = 0\n        val oddSum34 = 0\n        val evenSum35\
    \ = 0\n        val oddSum35 = 0\n        val evenSum36 = 0\n        val oddSum36\
    \ = 0\n        val evenSum37", "        val sum = 0\n        val nums = lst.filter(_\
    \ > 0).toList\n        val numsOdd = nums.filter(x => x % 2 != 0).toList\n   \
    \     numsOdd.foreach(x => sum += x * x)\n        sum", "        val sum = 0\n\
    \        val odd = 0\n        for(i <- lst) {\n            val x = i.toLong\n\
    \            val y = if (x < 0) -x else x\n            if (y % 2 == 1) odd +=\
    \ y\n            sum += y\n        }\n        if (sum > 0) sum * sum\n       \
    \ else 0", "        val sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum\
    \ += x * x else 0)\n        sum", "        val sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            if(lst(i) %2 == 1) {\n                sum += lst(i)\n\
    \            }\n        }\n        sum", "        val sum = 0\n        val even\
    \ = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n       \
    \ val evenSum = even.sum\n        val oddSum = odd.sum\n        val evenSquare\
    \ = even.map(x => x * x).sum\n        val oddSquare = odd.map(x => x * x).sum\n\
    \        val sum = evenSum + oddSum\n        val square = evenSquare + oddSquare\n\
    \        val difference = square - sum\n        difference", "        val sum\
    \ = 0\n        val odd = lst.filter(x => x % 2 == 1)\n        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val evenSum = even.map(x => x * x).sum\n        val\
    \ oddSum = odd.map(x => x * x).sum\n        val result = evenSum - oddSum\n  \
    \      result", "        val sum = 0\n        val odds = mutable.Set[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 1) odds += x)\n        val odd = odds.toList\n\
    \        val even = lst.filterNot(x => x % 2 == 0).toList\n        val evenSum\
    \ = even.sum\n        val oddSum = odd.sum\n        val result = evenSum - oddSum\n\
    \        result", "        val sum = 0\n        for(i <- lst) {\n            if(i\
    \ % 2 == 1) {\n                sum += i\n            }\n        }\n        sum",
  "        val result = mutable.ListBuffer.empty[Float]\n        lst.foreach(x =>\
    \ if (x % 2 == 1) result += x)\n        if (result.isEmpty) 0\n        else result.sum",
  "        val sum = 0\n        for(i <- lst) {\n            sum += i * i\n      \
    \  }\n        sum", "        val result = mutable.ListBuffer.empty[Float]\n  \
    \      lst.foreach(x => if (x % 2 == 1) result += x)\n        if (result.isEmpty)\
    \ 0\n        else result.sum", "        val sum = 0\n        lst.foreach(x =>\
    \ if (x % 2 == 1) sum += x * x else 0)\n        sum", "        val sum = 0\n \
    \       val nums = lst.filter(_ % 2 == 1)\n        val numsSet = nums.toSet\n\
    \        nums.foreach(x => sum += x * x)\n        numsSet.foreach(x => sum +=\
    \ x * x)\n        sum", "        val sum = 0\n        for(i <- lst) {\n      \
    \      if(i % 2 != 0) {\n                sum += i\n            }\n        }\n\
    \        sum", "        val sum = 0\n        for(i <- lst) {\n            sum\
    \ += i * i\n        }\n        sum", "        val sum = 0\n        val even =\
    \ lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val\
    \ evenSum = even.foldLeft(0l)(_ + _)\n        val oddSum = odd.foldLeft(0l)(_\
    \ + _)\n        val sum = evenSum + oddSum\n        sum", "        val sum = 0\n\
    \        val odd = new mutable.HashSet[Float]()\n        lst.foreach(x => {\n\
    \            if (x % 2 == 1) {\n                sum += x\n                odd.add(x)\n\
    \            }\n        })\n        if (odd.isEmpty) 0\n        else sum * sum",
  "        val sum = 0l\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else\
    \ 0)\n        sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n\
    \            val x = lst(i)\n            if(x % 2 == 1) {\n                sum\
    \ += x\n            }\n        }\n        sum", "        val sum = 0\n       \
    \ lst.foreach(x => if (x % 2 == 1) sum += x * x else 0)\n        sum", "     \
    \   val sum = 0\n        for(i <- lst) {\n            if(i % 2 == 1) {\n     \
    \           sum += i\n            }\n        }\n        sum", "        val sum\
    \ = 0\n        for(i <- lst) if(i % 2 == 1) sum += i\n        sum", "        val\
    \ sum = 0\n        for(i <- lst) if(i % 2 == 1) sum += i\n        sum", "    \
    \    val sum = 0\n        for(i <- lst) {\n            sum += i * i\n        }\n\
    \        sum", "        val sum = 0l\n        for(i <- lst) {\n            val\
    \ x = if (i < 0l) 0l else i\n            val y = if (i < 0l) 0l else i\n     \
    \       val z = if (i < 0l) 0l else i\n            val d = if (x < y) (x - y)\
    \ * (x - y) else (y - x) * (y - x)\n            sum += d\n        }\n        sum",
  "        val sum = 0\n        val even = lst.filter(x => x % 2 == 0).toList\n  \
    \      val odd = lst.filter(x => x % 2 != 0).toList\n        val evenSum = even.map(x\
    \ => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n        val result\
    \ = evenSum + oddSum\n        result", "        val sum = 0\n        for(i <-\
    \ 0 until lst.size) {\n            val x = lst(i)\n            if(x % 2 == 1)\
    \ {\n                sum += x\n            }\n        }\n        sum", "     \
    \   val sum = 0\n        val even = lst.filter(x => x % 2 == 0)\n        val odd\
    \ = lst.filter(x => x % 2 != 0)\n        val evenSum = even.sum\n        val oddSum\
    \ = odd.sum\n        val sum = evenSum + oddSum\n        sum", "        val sum\
    \ = 0\n        for(i <- lst) {\n            val square = i * i\n            if(i\
    \ % 2 == 1) {\n                sum += square\n            }\n        }\n     \
    \   sum", "        val result = mutable.ListBuffer[Float]()\n        lst.foreach(x\
    \ => if (x % 2 == 1) result += x)\n        if (result.isEmpty) 0\n        else\
    \ result.sum", "        val sum = 0\n        lst.foreach(x => if (x % 2 == 1)\
    \ sum += x * x else 0)\n        sum", "        val sum = 0\n        val odd =\
    \ mutable.Set[Float]()\n        lst.foreach(x => if (x % 2 == 1) odd += x)\n \
    \       odd.foreach(x => sum += x * x)\n        sum", "        if (lst.nonEmpty)\
    \ {\n            val sum = 0\n            lst.foreach(x => if (x % 2 == 1) sum\
    \ += x * x else 0)\n            sum\n        } else {\n            return 0\n\
    \        }", "        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      val result = evenSum + oddSum\n        result * result", "        val sum\
    \ = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      val evenSquare = even.map(x => x * x).sum\n        val oddSquare = odd.map(x\
    \ => x * x).sum\n        val difference = evenSum - oddSum\n        val squareDifference\
    \ = evenSquare - oddSquare\n        val result = if (difference == 0) {\n    \
    \        squareDifference\n        } else {\n            squareDifference + difference\n\
    \        }\n        result", "        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.map(x\
    \ => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n        val result\
    \ = evenSum - oddSum\n        result", "        val sum = 0\n        val odds\
    \ = mutable.Set[Float]()\n        lst.foreach(x => if (x % 2 == 1) odds += x)\n\
    \        lst.foreach(x => sum += x * x)\n        sum - odds.toSet.sum", "    \
    \    val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd =\
    \ lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum =\
    \ odd.sum\n        val result = evenSum - oddSum\n        result", "        val\
    \ sum = 0\n        val odds = mutable.Set[Float]()\n        lst.foreach(x => if\
    \ (x % 2 == 1) odds += x)\n        odds.foreach(x => sum += x * x)\n        sum",
  "        val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum\
    \ = odd.sum\n        val evenSquare = even.map(x => x * x).sum\n        val oddSquare\
    \ = odd.map(x => x * x).sum\n        val sum = evenSum + oddSum\n        val square\
    \ = evenSquare + oddSquare\n        val result = sum * sum - square\n        result",
  "        val sum = 0\n        val evenSum = 0\n        val oddSum = 0\n        val\
    \ evenSumEven = 0\n        val oddSumEven = 0\n        val evenSumOdd = 0\n  \
    \      val oddSumOdd = 0\n        val evenSumEvenOdd = 0\n        val oddSumEvenOdd\
    \ = 0\n        val evenSumOddOdd = 0\n        val oddSumOddOdd = 0\n        val\
    \ evenSumEvenOddOdd = 0\n        val oddSumEvenOddOdd = 0\n        val evenSumOddOddOdd\
    \ = 0\n        val oddSumOddOddOdd = 0\n        val evenSumEvenOddOddOdd = 0\n\
    \        val oddSumEvenOddOddOdd = 0\n        val evenSumOddOddOddOdd = 0\n  \
    \      val oddSumOddOddOddOdd = 0\n        val evenSumEvenOddOddOddOdd = 0\n \
    \       val oddSumEvenOddOddOddOdd = 0\n        val evenSumOddOddOddOddOdd = 0\n\
    \        val oddSumOddOddOddOddOdd = 0\n        val evenSumEvenOddOddOddOddOdd\
    \ = 0\n        val oddSumEvenOddOddOddOddOdd = 0\n        val evenSumOddOddOddOddOddOdd\
    \ = 0\n        val oddSumOddOddOddOddOddOdd = 0\n        val evenSumEvenOddOddOddOddOddOdd\
    \ = 0\n        val oddSumEvenOddOddOddOddOddOdd = 0\n        val evenSumOddOddOddOddOddOddOdd\
    \ = 0\n        val oddSumOddOddOddOddOddOddOdd = 0\n        val evenSumEvenOddOddOddOddOddOddOdd\
    \ = 0\n        val oddSumEvenOddOddOddOddOddOddOdd = 0\n        val evenSumOddOddOddOddOddOddOddOdd\
    \ = 0\n        val oddSumOddOddOddOddOddOddOddOdd = 0\n        val evenSumEvenOddOddOddOddOddOddOddOdd\
    \ = 0\n        val oddSumEvenOddO", "        val sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            val x = lst(i)\n            if(x % 2 == 1) {\n    \
    \            sum += x\n            }\n        }\n        sum.toLong", "      \
    \  val sum = 0\n        val odds = mutable.Set[Float]()\n        lst.foreach(x\
    \ => if (x % 2 != 0) odds += x)\n        odds.foreach(x => sum += x * x)\n   \
    \     sum.toLong", "        val sum = 0\n        for(i <- lst) {\n           \
    \ if(i % 2 == 1) {\n                sum += i\n            }\n        }\n     \
    \   sum", "        val sum = 0\n        for(i <- lst) {\n            if(i % 2\
    \ == 1) {\n                sum += i\n            }\n        }\n        sum.toLong",
  "        val sum = 0\n        val nums = lst.filter(_ % 2 == 1)\n        val numsSum\
    \ = nums.sum\n        val numsSumSquare = nums.map(x => x * x).sum\n        val\
    \ numsSumSquareOdd = numsSumSquare - numsSum\n        val numsSumSquareOddSum\
    \ = numsSumSquareOdd * numsSumSquareOdd\n        val numsSumSquareOddSumSquare\
    \ = numsSumSquareOddSum * numsSumSquareOdd\n        val numsSumSquareOddSumSquareOdd\
    \ = numsSumSquareOddSumSquare * numsSumSquareOdd\n        val numsSumSquareOddSumSquareOddSum\
    \ = numsSumSquareOddSumSquareOdd * numsSumSquareOddSumSquare\n        val numsSumSquareOddSumSquareOddSumSquare\
    \ = numsSumSquareOddSumSquareOddSum * numsSumSquareOddSumSquareOdd\n        val\
    \ numsSumSquareOddSumSquareOddSumSquareOdd = numsSumSquareOddSumSquareOddSumSquare\
    \ * numsSumSquareOddSumSquareOddSum\n        val numsSumSquareOddSumSquareOddSumSquareOddSum\
    \ = numsSumSquareOddSumSquareOddSumSquareOdd * numsSumSquareOddSumSquareOddSumSquare\n\
    \        val numsSumSquareOddSumSquareOddSumSquareOddSumSquare = numsSumSquareOddSumSquareOddSumSquareOddSum\
    \ * numsSumSquareOddSumSquareOddSumSquareOdd\n        val numsSumSquareOddSumSquareOddSumSquareOddSumSquareOdd\
    \ = numsSumSquareOddSumSquareOddSumSquareOddSumSquare * numsSumSquareOddSumSquareOddSumSquareOddSum\n\
    \        val numsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum = numsSumSquareOddSumSquareOddSumSquareOddSumSquareOdd\
    \ * numsSumSquareOddSumSquareOddSumSquareOddSumSquare\n        val numsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSumSquare\
    \ = numsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum * numsSumSquareOdd",
  "        val sum = 0\n        for(i <- 0 until lst.size) {\n            val n =\
    \ lst(i)\n            if(n % 2 == 1) sum += n * n\n        }\n        sum", " \
    \       val sum = 0l\n        for(i <- 0 until lst.size) {\n            val x\
    \ = lst(i)\n            if(x % 2 == 1) {\n                sum += x\n         \
    \   }\n        }\n        sum", "        val sum = 0\n        for(i <- 0 until\
    \ lst.size) {\n            val x = lst(i)\n            if(x % 2 == 1) sum += x\n\
    \        }\n        sum", "        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0f)(_\
    \ + _)\n        val oddSum = odd.foldLeft(0f)(_ + _)\n        val sum = evenSum\
    \ + oddSum\n        sum", "        val sum = 0\n        val nums = lst.filter(_\
    \ % 2 == 1)\n        val numsSum = nums.sum\n        val numsSumSquare = numsSum\
    \ * numsSum\n        nums.foreach(x => sum += x * x)\n        numsSumSquare",
  "        val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)(_ + _)\n \
    \       val oddSum = odd.foldLeft(0l)(_ + _)\n        val result = evenSum + oddSum\n\
    \        result", "        val nums = lst.filter(_ % 2 == 1).toList\n        if\
    \ (nums.isEmpty) 0\n        else nums.sum * nums.sum", "        val sum = 0\n\
    \        val nums = lst.filter(x => x % 2 == 1)\n        val numsSum = nums.sum\n\
    \        val numsSumSquare = numsSum * numsSum\n        nums.foreach(x => sum\
    \ += x * x)\n        sum + numsSumSquare", "        val sum = 0\n        val even\
    \ = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n       \
    \ val evenSum = even.sum\n        val oddSum = odd.sum\n        val evenSquare\
    \ = even.map(x => x * x).sum\n        val oddSquare = odd.map(x => x * x).sum\n\
    \        val sum = evenSum + oddSum\n        val square = evenSquare + oddSquare\n\
    \        val result = sum * sum\n        square", "        val sum = 0\n     \
    \   lst.foreach(x => if (x % 2 == 1) sum += x * x else 0)\n        sum", "   \
    \     val sum = 0\n        val oddSum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i) % 2 == 1) {\n                sum += lst(i)\n      \
    \          oddSum += lst(i)\n            }\n        }\n        if(sum > 0) {\n\
    \            return sum * sum\n        }\n        return oddSum * oddSum", " \
    \       val sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else\
    \ 0)\n        sum", "        val sum = 0\n        val nums = lst.filter(_ % 2\
    \ == 1)\n        val numsSum = nums.sum\n        val numsSumSquare = numsSum *\
    \ numsSum\n        nums.foreach(x => sum += x * x)\n        numsSumSquare", " \
    \       val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum\
    \ = odd.sum\n        val result = evenSum + oddSum\n        if (evenSum == 0)\
    \ 0 else result", "        val sum = 0\n        lst.foreach(x => if (x % 2 ==\
    \ 1) sum += x * x else 0)\n        sum", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach { x =>\n            if (x % 2 == 1) {\n                result\
    \ += x\n            }\n        }\n        if (result.isEmpty) {\n            return\
    \ 0\n        } else {\n            return result.sum\n        }", "        if\
    \ (lst.isEmpty) 0\n        else lst.foldLeft(0l) { (sum, num) => sum + num * num\
    \ }", "        val sum = 0\n        for(i <- lst) {\n            val x = i.toLong\n\
    \            if(x % 2 == 1) {\n                sum += x\n            }\n     \
    \   }\n        sum", "        val sum = 0l\n        val odds = mutable.Set[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 1) odds += x)\n        odds.foreach(x =>\
    \ sum += x * x)\n        sum", "        val sum = 0\n        val oddSum = 0\n\
    \        lst.foreach(x => {\n            if (x % 2 == 1) {\n                sum\
    \ += x\n                oddSum += x\n            }\n        })\n        if (sum\
    \ > 0) {\n            return sum * sum\n        } else {\n            return oddSum\
    \ * oddSum\n        }", "        val result = mutable.ListBuffer.empty[Float]\n\
    \        for(i <- 0 until lst.size) {\n            if(lst(i) % 2 == 1) {\n   \
    \             result += lst(i)\n            }\n        }\n        if(result.isEmpty)\
    \ {\n            return 0\n        } else {\n            return result.sum\n \
    \       }", "        val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n\
    \        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)(_\
    \ + _)\n        val oddSum = odd.foldLeft(0l)(_ + _)\n        val result = evenSum\
    \ - oddSum\n        sum", "        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val diff = evenSum - oddSum\n        val\
    \ result = diff * diff\n        result", "        val sum = 0\n        val odds\
    \ = mutable.Set[Float]()\n        lst.foreach(x => if (x % 2 != 0) odds += x)\n\
    \        odds.foreach(x => sum += x)\n        sum", "        val sum = 0\n   \
    \     val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n        val\
    \ evenSumSquare = evenSum * evenSum\n        val oddSumSquare = oddSum * oddSum\n\
    \        val sum = evenSumSquare + oddSumSquare\n        return sum", "      \
    \  val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_\
    \ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n  \
    \      val evenSquare = even.map(x => x * x).sum\n        val oddSquare = odd.map(x\
    \ => x * x).sum\n        val difference = evenSquare - oddSquare\n        val\
    \ differenceSum = evenSum - oddSum\n        val differenceSquare = evenSquare\
    \ - oddSquare\n        val differenceSumSquare = evenSum - oddSum\n        val\
    \ differenceSquareSum = evenSquare - oddSquare\n        val differenceSumSquareSum\
    \ = evenSum - oddSum\n        val differenceSquareSumSquare = evenSquare - oddSquare\n\
    \        val differenceSumSquareSumSquare = evenSum - oddSum\n        val differenceSquareSumSquareSum\
    \ = evenSquare - oddSquare\n        val differenceSumSquareSumSquare = evenSum\
    \ - oddSum\n        val differenceSquareSumSquareSumSquare = evenSquare - oddSquare\n\
    \        val differenceSumSquareSumSquareSum = evenSum - oddSum\n        val differenceSquareSumSquareSumSquare\
    \ = evenSquare - oddSquare\n        val differenceSumSquareSumSquareSumSquare\
    \ = evenSum - oddSum\n        val differenceSquareSumSquareSumSquareSum = evenSquare\
    \ - oddSquare\n        val differenceSumSquareSumSquareSumSquare = evenSum - oddSum\n\
    \        val differenceSquareSumSquareSumSquareSum = evenSquare - oddSquare\n\
    \        val differenceSumSquareSumSquareSumSquare = evenSum - oddSum\n      \
    \  val differenceSquareSumSquareSumSquareSum = evenSquare - oddSquare\n      \
    \  val differenceSumSquareSumSquareSumSquare = evenSum - oddSum\n        val differenceSquareSumSquareSumSquareSum\
    \ = evenSquare - oddSquare\n        val differenceSumSquareSumSquareSumSquare\
    \ = evenSum - oddSum\n        val differenceSquareSumSquareSumSquareSum = evenSquare\
    \ - oddSquare\n        val differenceSumSquareSumSquareSumSquare = evenSum - oddSum\n\
    \        val differenceSquareSumSquareSumSquareSum = evenSquare - oddSquare\n\
    \        val differenceSumSquareSumSquareSumSquare = evenSum - oddSum\n      \
    \  val differenceSquareSumSquareSumSquareSum = evenSquare - oddSquare\n      \
    \  val differenceSumSquareSumSquareSumSquare = evenSum - oddSum\n        val differenceSquareSumSquareSumSquareSum\
    \ = evenSquare ", "        val sum = 0\n        for(i <- lst) {\n            val\
    \ x = if (i.toLong % 2 == 1) (i.toLong * i.toLong) else 0\n            sum +=\
    \ x\n        }\n        sum", "        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)(_\
    \ + _)\n        val oddSum = odd.foldLeft(0l)(_ + _)\n        val sum = evenSum\
    \ + oddSum\n        sum", "        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)(_\
    \ + _)\n        val oddSum = odd.foldLeft(0l)(_ + _)\n        val sum = evenSum\
    \ + oddSum\n        sum", "        val sum = 0\n        val odds = mutable.Set[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 1) odds += x)\n        odds.foreach(x =>\
    \ sum += x * x)\n        sum.toLong", "        val sum = 0\n        val odds =\
    \ mutable.Set[Float]()\n        lst.foreach(x => if (x % 2 != 0) odds += x)\n\
    \        odds.foreach(x => sum += x * x)\n        sum", "        val sum = 0\n\
    \        for(i <- lst) {\n            sum += i\n        }\n        sum", "   \
    \     val sum = 0l\n        val odd = mutable.Set[Float]()\n        lst.foreach(x\
    \ => {\n            if (x % 2 == 1) {\n                sum += x\n            \
    \    odd(x) = true\n            }\n        })\n        if (odd.isEmpty) 0\n  \
    \      else sum * sum", "        val sum = 0\n        val even = lst.filter(x\
    \ => x % 2 == 0).toList\n        val odd = lst.filter(x => x % 2 != 0).toList\n\
    \        val evenSum = even.map(x => x * x).sum\n        val oddSum = odd.map(x\
    \ => x * x).sum\n        val sum = evenSum + oddSum\n        sum", "        val\
    \ sum = 0\n        for(i <- lst) {\n            if(i % 2 == 1) {\n           \
    \     sum += i\n            }\n        }\n        sum", "        val sum = 0\n\
    \        val even = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2\
    \ != 0)\n        val evenSum = even.sum\n        val oddSum = odd.sum\n      \
    \  val evenSquare = evenSum * evenSum\n        val oddSquare = oddSum * oddSum\n\
    \        val result = evenSquare + oddSquare\n        result", "        val sum\
    \ = 0\n        val even = lst.filter(x => x % 2 == 0)\n        val odd = lst.filter(x\
    \ => x % 2 != 0)\n        val evenSum = even.map(x => x * x).sum\n        val\
    \ oddSum = odd.map(x => x * x).sum\n        val result = evenSum - oddSum\n  \
    \      result", "        val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n\
    \        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)(_\
    \ + _)\n        val oddSum = odd.foldLeft(0l)(_ + _)\n        val sum = evenSum\
    \ + oddSum\n        sum", "        val sum = 0l\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val sum = evenSumSquare +\
    \ oddSumSquare\n        return sum", "        val sum = 0\n        val nums =\
    \ lst.filter(_ % 2 == 1)\n        val numsSum = nums.sum\n        val numsSumSquare\
    \ = nums.map(x => x * x).sum\n        val numsSumSquareOdd = numsSumSquare - numsSum\n\
    \        val numsSumSquareOddSum = numsSumSquareOdd + numsSum\n        val numsSumSquareOddSumSquare\
    \ = numsSumSquareOddSum * numsSumSquareOdd\n        val numsSumSquareOddSumSquareOdd\
    \ = numsSumSquareOddSumSquare * numsSumSquareOddSum\n        val numsSumSquareOddSumSquareOddSum\
    \ = numsSumSquareOddSumSquareOdd + numsSumSquareOddSum\n        val numsSumSquareOddSumSquareOddSumSquare\
    \ = numsSumSquareOddSumSquareOddSum * numsSumSquareOddSumSquareOdd\n        val\
    \ numsSumSquareOddSumSquareOddSumSquareOdd = numsSumSquareOddSumSquareOddSumSquare\
    \ * numsSumSquareOddSumSquareOddSum\n        val numsSumSquareOddSumSquareOddSumSquareOddSum\
    \ = numsSumSquareOddSumSquareOddSumSquareOdd + numsSumSquareOddSumSquareOddSum\n\
    \        val numsSumSquareOddSumSquareOddSumSquareOddSumSquare = numsSumSquareOddSumSquareOddSumSquareOddSum\
    \ * numsSumSquareOddSumSquareOddSumSquareOdd\n        val numsSumSquareOddSumSquareOddSumSquareOddSumSquareOdd\
    \ = numsSumSquareOddSumSquareOddSumSquareOddSumSquare * numsSumSquareOddSumSquareOddSumSquareOddSum\n\
    \        val numsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum = numsSumSquareOddSumSquareOddSumSquareOddSumSquareOdd\
    \ + numsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum\n        val numsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSumSquare\
    \ = numsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum * numsSumSquareOddSum",
  "        val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum\
    \ = odd.sum\n        val evenSumSquare = evenSum * evenSum\n        val oddSumSquare\
    \ = oddSum * oddSum\n        val sum = evenSumSquare + oddSumSquare\n        sum",
  "        val sum = 0\n        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum\
    \ = odd.sum\n        val evenSumSquare = evenSum * evenSum\n        val oddSumSquare\
    \ = oddSum * oddSum\n        val sum = evenSumSquare + oddSumSquare\n        sum",
  "        val sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else\
    \ 0)\n        sum", "        val sum = 0\n        for(i <- lst) {\n          \
    \  if(i % 2 == 1) {\n                sum += i\n            }\n        }\n    \
    \    sum", "        if (lst.nonEmpty) {\n            val sum = 0\n           \
    \ lst.foreach(x => if (x % 2 == 1) sum += x)\n            sum\n        }\n   \
    \     else 0", "        val sum = 0\n        lst.foreach(x => if (x % 2 == 1)\
    \ sum += x * x else 0)\n        sum", "        val sum = 0\n        val odds =\
    \ mutable.Set[Float]()\n        lst.foreach(x => if (x % 2 != 0) odds += x)\n\
    \        lst.foreach(x => sum += x * x)\n        sum - odds sum", "        val\
    \ sum = 0\n        for(i <- lst) {\n            if(i % 2 == 1) {\n           \
    \     sum += i\n            }\n        }\n        sum", "        val sum = 0\n\
    \        for(i <- lst) {\n            if(i % 2 == 1) sum += i\n        }\n   \
    \     sum", "        val sum = 0\n        for(i <- 0 until lst.size) {\n     \
    \       val x = lst(i)\n            if(x % 2 == 1) {\n                sum += x\n\
    \            }\n        }\n        sum", "        val sum = 0\n        val even\
    \ = lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n       \
    \ val evenSum = even.foldLeft(0f) { (sum, element) => sum + element * element\
    \ }\n        val oddSum = odd.foldLeft(0f) { (sum, element) => sum + element *\
    \ element }\n        val result = evenSum - oddSum\n        if (result == 0f)\
    \ 0\n        else result.toLong", "        val sum = 0\n        val nums = lst.filter(_\
    \ % 2 == 1)\n        for(i <- nums) {\n            sum += i\n        }\n     \
    \   sum", "        val sum = 0\n        val odds = mutable.Set[Float]()\n    \
    \    lst.foreach(x => {\n            if (x % 2 == 1) odds += x\n        })\n \
    \       if (odds.isEmpty) 0\n        else odds.toList.sum", "        val sum =\
    \ 0\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else 0)\n        sum",
  "        val sum = 0\n        lst.foreach(x => if (x % 2 == 1) sum += x * x else\
    \ 0)\n        sum", "        val sum = 0l\n        val even = lst.filter(_ % 2\
    \ == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val sum = evenSumSquare +\
    \ oddSumSquare\n        return sum", "        val sum = 0\n        lst.foreach(x\
    \ => if (x % 2 == 1) sum += x * x else 0)\n        sum"]
stop_tokens:
- "\n    }\n"
