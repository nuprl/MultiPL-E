name: HumanEval_11_string_xor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform\
  \ binary XOR on these inputs and return result also as a string.\n    // >>> stringXor((\"\
  010\"), (\"110\"))\n    // (\"100\")\n    def stringXor(a : String, b : String)\
  \ : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(stringXor((\"111000\"\
  ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"\
  0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n   \
  \ }\n\n}\n"
completions: ["        val aList = a.toList\n        val bList = b.toList\n      \
    \  val aLen = aList.length\n        val bLen = bList.length\n        val result\
    \ = new StringBuilder(aLen * bLen)\n        var i = 0\n        while (i < aLen)\
    \ {\n            val aChar = aList(i)\n            val bChar = bList(i)\n    \
    \        if (aChar != bChar) {\n                result(i) = aChar\n          \
    \      i += 1\n            } else {\n                i += 1\n            }\n \
    \       }\n        return result.toString", "        val aBits = a.toIntArray\n\
    \        val bBits = b.toIntArray\n        val xorBits = Array.ofDim[Int](Math.max(aBits.length,\
    \ bBits.length))\n        val xorBitsIndex = 0\n        var i = 0\n        while\
    \ (i < xorBits.length) {\n            xorBits(i) = aBits(i) xor bBits(i)\n   \
    \         i += 1\n        }\n        xorBits.toString.reverse", "        val aList\
    \ = a.toList\n        val bList = b.toList\n        val xorList = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until aList.size) {\n            val xor = aList(i) xor bList(i)\n\
    \            xorList += xor.toString.reverse\n        }\n        xorList.toList.reverse.mkString(\"\
    \")", "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = aArray.zip(\n            bArray\n        ).map(\n    \
    \        x => x._1 ^ x._2\n        ).map(\n            x => x.toString.toChar\n\
    \        ).mkString\n        xorArray", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val result = new Array[Int](a.length)\n\
    \        var i = 0\n        while (i < a.length) {\n            result(i) = aArray(i)\
    \ xor bArray(i)\n            i += 1\n        }\n        new String(result)", " \
    \       val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = ArrayBuffer.empty[Int]\n        for (i <- 0 until aArray.length)\n\
    \            xorArray += (aArray(i) xor bArray(i))\n        xorArray.toString.reverse",
  "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val result = new mutable.ListBuffer[Int]()\n        var carry = 0\n \
    \       for (i <- 0 until aArray.length)\n            result += (aArray(i) xor\
    \ bArray(i) xor carry)\n        result += carry\n        new String(result.toArray)",
  "        val aBits = a.toIntArray\n        val bBits = b.toIntArray\n        val\
    \ xorBits = aBits xor bBits\n        val xorBitsString = xorBits.map(bit => if\
    \ (bit == 1) \"1\" else \"0\").mkString\n        xorBitsString", "        val\
    \ aList = a.toList\n        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        aList.zip(bList).foreach { case (aChar, bChar) =>\n            xorList\
    \ += aChar ^ bChar\n        }\n        xorList.toList.reverse.mkString", "   \
    \     val aBits = a.toInt\n        val bBits = b.toInt\n        val result = new\
    \ mutable.StringBuilder\n        for(i <- 0 until aBits) {\n            result.append(aBits\
    \ XOR bBits XOR i)\n        }\n        return result.toString", "        val aArray\
    \ = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val result = new Array[Int](a.length)\n        var i = 0\n        while\
    \ (i < a.length) {\n            result(i) = aArray(i) xor bArray(i)\n        \
    \    i += 1\n        }\n        new String(result)", "        val aBits = a.toInt\n\
    \        val bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val\
    \ xorBitsString = Integer.toString(xorBits)\n        val xorBitsStringWithZeros\
    \ = xorBitsString.padToLength(xorBitsString.length, \"0\")\n        xorBitsStringWithZeros",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        var result =\
    \ \"\"\n        var carry = 0\n        var i = 0\n        while (i < a.length)\
    \ {\n            val aBit = aBits(i)\n            val bBit = bBits(i)\n      \
    \      val aBitVal = aBit + carry\n            val bBitVal = bBit + carry\n  \
    \          val aBitValStr = aBitVal.toString.reverse\n            val bBitValStr\
    \ = bBitVal.toString.reverse\n            val aBitValStrLen = aBitValStr.length\n\
    \            val bBitValStrLen = bBitValStr.length\n            val aBitValStrPad\
    \ = if (aBitValStrLen < bBitValStrLen) aBitValStrLen else bBitValStrLen\n    \
    \        val bBitValStrPad = if (aBitValStrLen < bBitValStrLen) bBitValStrLen\
    \ else aBitValStrLen\n            val aBitValStrPadChar = if (aBitValStrPad ==\
    \ 0) \"\" else aBitValStr.charAt(aBitValStrPad - 1)\n            val bBitValStrPadChar\
    \ = if (bBitValStrPad == 0) \"\" else bBitValStr.charAt(bBitValStrPad - 1)\n \
    \           val aBitValStrPadCharLen = aBitValStrPadChar.length\n            val\
    \ bBitValStrPadCharLen = bBitValStrPadChar.length\n            val aBitValStrPadCharVal\
    \ = aBitValStrPadChar.toInt\n            val bBitValStrPadCharVal = bBitValStrPadChar.toInt\n\
    \            val aBitValStrPadCharValStr = aBitValStrPadCharVal.toString.reverse\n\
    \            val bBitValStrPadCharValStr = bBitValStrPadCharVal.toString.reverse\n\
    \            val aBitValStrPadCharValStrLen = aBitValStrPadCharValStr.length\n\
    \            val bBitValStrPadCharValStrLen = bBitValStrPadCharValStr.length\n\
    \            val aBitValStrPadCharValStrPad = if (aBitValStrPadCharValStrLen <\
    \ bBitValStrPadCharValStrLen) aBitValStrPadCharValStrLen else bBitValStrPadCharValStrLen\n\
    \            val bBitValStrPadCharValStrPad = if (aBitValStrPadCharValStrLen <\
    \ bBitValStrPadCharValStrLen) bBitValStrPadCharValStrLen else aBit", "       \
    \ val aList = a.toList\n        val bList = b.toList\n        val xorList = mutable.ListBuffer[String]()\n\
    \        var i = 0\n        while (i < aList.size) {\n            xorList += aList(i)\
    \ xor bList(i)\n            i += 1\n        }\n        xorList.toList.reverse.mkString",
  "        val aBits = a.toIntArray\n        val bBits = b.toIntArray\n        var\
    \ result = \"\"\n        var carry = 0\n        var i = 0\n        while (i <\
    \ a.length) {\n            val aBit = aBits(i)\n            val bBit = bBits(i)\n\
    \            val aBitAndBBit = carry + (aBit & bBit)\n            val aBitAndBBitAndCarry\
    \ = aBitAndBBit + carry\n            val aBitAndBBitAndCarryString = Integer.toString(aBitAndBBitAndCarry)\n\
    \            result += aBitAndBBitAndCarryString\n            carry = aBitAndBBitAndCarryString\
    \ match {\n                case \"\" => 0\n                case c => Integer.parseInt(c)\n\
    \            }\n            i += 1\n        }\n        result", "        val aBits\
    \ = a.toInt\n        val bBits = b.toInt\n        val xorBits = aBits xor bBits\n\
    \        val xorBitsString = Integer.toString(xorBits)\n        val xorBitsStringWithZeros\
    \ = xorBitsString.padToLength(xorBitsString.length, \"0\")\n        val xorBitsStringWithZeros\
    \ = xorBitsStringWithZeros.substring(0, xorBitsStringWithZeros.length-1)\n   \
    \     xorBitsStringWithZeros", "        val aList = a.toList\n        val bList\
    \ = b.toList\n        val result = aList.zip(bList).map(x => x._1 ^ x._2).mkString\n\
    \        result", "        val aBits = a.toIntArray\n        val bBits = b.toIntArray\n\
    \        val xorBits = Array.ofDim[Int](aBits.length)\n        for(i <- 0 until\
    \ xorBits.length)\n            xorBits(i) = aBits(i) xor bBits(i)\n        xorBits.mkString(\"\
    \")", "        val aArray = a.toIntArray\n        val bArray = b.toIntArray\n\
    \        val xorArray = Array.ofDim[Int](aArray.length)\n        var i = 0\n \
    \       while (i < xorArray.length) {\n            xorArray(i) = aArray(i) xor\
    \ bArray(i)\n            i += 1\n        }\n        xorArray.toString.reverse",
  "        val aList = a.toList\n        val bList = b.toList\n        val result\
    \ = new StringBuilder\n        var carry = 0\n        for(i <- 0 until aList.size)\
    \ {\n            val aChar = aList(i)\n            val bChar = bList(i)\n    \
    \        val aVal = aChar match {\n                case '1' => 1\n           \
    \     case '0' => 0\n                case _ => throw new IllegalArgumentException(\"\
    Invalid input\")\n            }\n            val bVal = bChar match {\n      \
    \          case '1' => 1\n                case '0' => 0\n                case\
    \ _ => throw new IllegalArgumentException(\"Invalid input\")\n            }\n\
    \            val aValInt = aVal + carry\n            val bValInt = bVal + carry\n\
    \            val result = aValInt.toString + bValInt.toString\n            carry\
    \ = result match {\n                case '1' => 1\n                case '0' =>\
    \ 0\n                case _ => throw new IllegalArgumentException(\"Invalid input\"\
    )\n            }\n            result.append(carry)\n        }\n        return\
    \ result.toString", "        val aBits = a.toInt\n        val bBits = b.toInt\n\
    \        var result = \"\"\n        var carry = 0\n        var i = 0\n       \
    \ while (i < a.length) {\n            val aBit = aBits & (1 << (a.length - i -\
    \ 1))\n            val bBit = bBits & (1 << (b.length - i - 1))\n            val\
    \ aBitAndBBits = aBit | bBit\n            val aBitAndBBitsAsInt = aBitAndBBits\
    \ & 0xff\n            val aBitAndBBitsAsString = aBitAndBBitsAsInt.toString\n\
    \            val aBitAndBBitsAsStringWithLeadingZeros = aBitAndBBitsAsString.padTo(8,\
    \ '0') // pad leading zeros to 8 characters\n            val aBitAndBBitsAsStringWithLeadingZeros\
    \ = aBitAndBBitsAsStringWithLeadingZeros.reverse\n            val aBitAndBBitsAsStringWithLeadingZeros\
    \ = aBitAndBBitsAsStringWithLeadingZeros.reverse\n            val aBitAndBBitsAsStringWithLeadingZeros\
    \ = aBitAndBBitsAsStringWithLeadingZeros.reverse\n            val aBitAndBBitsAsStringWithLeadingZeros\
    \ = aBitAndBBitsAsStringWithLeadingZeros.reverse\n            val aBitAndBBitsAsStringWithLeadingZeros\
    \ = aBitAndBBitsAsStringWithLeadingZeros.reverse\n            val aBitAndBBitsAsStringWithLeadingZeros\
    \ = aBitAndBBitsAsStringWithLeadingZeros.reverse\n            val aBitAndBBitsAsStringWithLeadingZeros\
    \ = aBitAndBBitsAsStringWithLeadingZeros.reverse\n            val aBitAndBBitsAsStringWithLeadingZeros\
    \ = aBitAndBBitsAsStringWithLeadingZeros.reverse\n            val aBitAndBBitsAsStringWithLeadingZeros\
    \ = aBitAndBBitsAsStringWithLeadingZeros.reverse\n            val aBitAndBBitsAsStringWithLeadingZeros\
    \ = aBitAndBBitsAsStringWithLeadingZeros.reverse\n            val aBitAndBBitsAsStringWithLeadingZeros\
    \ = aBitAndBBitsAsStringWithLeadingZeros.reverse\n            val aBitAndBBitsAsStringWithLeadingZeros\
    \ = aBitAndB", "        val aBits = a.toInt\n        val bBits = b.toInt\n   \
    \     var result = \"\"\n        var carry = 0\n        var i = 0\n        while\
    \ (i < a.length) {\n            val aBit = aBits(i)\n            val bBit = bBits(i)\n\
    \            val aBitInt = aBit + carry\n            val bBitInt = bBit + carry\n\
    \            val aBitString = aBitInt.toString\n            val bBitString = bBitInt.toString\n\
    \            val aBitStringLen = aBitString.length\n            val bBitStringLen\
    \ = bBitString.length\n            val aBitStringLenInt = aBitStringLen.toInt\n\
    \            val bBitStringLenInt = bBitStringLen.toInt\n            val aBitStringLenInt\
    \ = aBitStringLen.toInt\n            val bBitStringLenInt = bBitStringLen.toInt\n\
    \            val aBitStringLenInt = aBitStringLen.toInt\n            val bBitStringLenInt\
    \ = bBitStringLen.toInt\n            val aBitStringLenInt = aBitStringLen.toInt\n\
    \            val bBitStringLenInt = bBitStringLen.toInt\n            val aBitStringLenInt\
    \ = aBitStringLen.toInt\n            val bBitStringLenInt = bBitStringLen.toInt\n\
    \            val aBitStringLenInt = aBitStringLen.toInt\n            val bBitStringLenInt\
    \ = bBitStringLen.toInt\n            val aBitStringLenInt = aBitStringLen.toInt\n\
    \            val bBitStringLenInt = bBitStringLen.toInt\n            val aBitStringLenInt\
    \ = aBitStringLen.toInt\n            val bBitStringLenInt = bBitStringLen.toInt\n\
    \            val aBitStringLenInt = aBitStringLen.toInt\n            val bBitStringLenInt\
    \ = bBitStringLen.toInt\n            val aBitStringLenInt = aBitStringLen.toInt\n\
    \            val bBitStringLenInt = bBitStringLen.toInt\n            val aBitStringLenInt\
    \ = aBitStringLen.toInt\n            val bBitStringLenInt = bBitStringLen.toInt\n\
    \            val aBitStringLenInt = aBitStringLen.toInt\n            val bBitStringLenInt\
    \ = bBitStringLen.toInt\n            val aBitStringLenInt = aBitStringLen.toInt\n\
    \            val bBitStringLenInt = bBitStringLen.toInt\n            val aBit",
  "        val aList = a.toList\n        val bList = b.toList\n        var result\
    \ = \"\"\n        var carry = 0\n        for(i <- 0 until aList.size) {\n    \
    \        val aChar = aList(i)\n            val bChar = bList(i)\n            val\
    \ aCharInt = aChar.toInt\n            val bCharInt = bChar.toInt\n           \
    \ val aCharIntInt = aCharInt.toInt\n            val bCharIntInt = bCharInt.toInt\n\
    \            val aCharIntIntInt = aCharIntInt.toInt\n            val bCharIntIntInt\
    \ = bCharIntInt.toInt\n            val aCharIntIntIntInt = aCharIntIntInt.toInt\n\
    \            val bCharIntIntIntInt = bCharIntIntInt.toInt\n            val aCharIntIntIntIntInt\
    \ = aCharIntIntIntInt.toInt\n            val bCharIntIntIntIntInt = bCharIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntInt = aCharIntIntIntIntInt.toInt\n      \
    \      val bCharIntIntIntIntIntInt = bCharIntIntIntIntInt.toInt\n            val\
    \ aCharIntIntIntIntIntIntInt = aCharIntIntIntIntIntInt.toInt\n            val\
    \ bCharIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntInt.toInt\n            val\
    \ aCharIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntInt.toInt\n         \
    \   val bCharIntIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntIntInt",
  "        val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer[String]()\n        var xor = 0\n        for(i <- 0 until\
    \ aList.size) {\n            xor = xor + aList(i) xor bList(i)\n            xorList.add(xor.toString(2))\n\
    \        }\n        xorList.toString", "        val aBits = a.toInt\n        val\
    \ bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val result =\
    \ xorBits.toBinaryString\n        result", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = Array.ofDim[Int](2)\n\
    \        val xorArray2 = Array.ofDim[Int](2)\n        val xorArray3 = Array.ofDim[Int](2)\n\
    \        val xorArray4 = Array.ofDim[Int](2)\n        val xorArray5 = Array.ofDim[Int](2)\n\
    \        val xorArray6 = Array.ofDim[Int](2)\n        val xorArray7 = Array.ofDim[Int](2)\n\
    \        val xorArray8 = Array.ofDim[Int](2)\n        val xorArray9 = Array.ofDim[Int](2)\n\
    \        val xorArray10 = Array.ofDim[Int](2)\n        val xorArray11 = Array.ofDim[Int](2)\n\
    \        val xorArray12 = Array.ofDim[Int](2)\n        val xorArray13 = Array.ofDim[Int](2)\n\
    \        val xorArray14 = Array.ofDim[Int](2)\n        val xorArray15 = Array.ofDim[Int](2)\n\
    \        val xorArray16 = Array.ofDim[Int](2)\n        val xorArray17 = Array.ofDim[Int](2)\n\
    \        val xorArray18 = Array.ofDim[Int](2)\n        val xorArray19 = Array.ofDim[Int](2)\n\
    \        val xorArray20 = Array.ofDim[Int](2)\n        val xorArray21 = Array.ofDim[Int](2)\n\
    \        val xorArray22 = Array.ofDim[Int](2)\n        val xorArray23 = Array.ofDim[Int](2)\n\
    \        val xorArray24 = Array.ofDim[Int](2)\n        val xorArray25 = Array.ofDim[Int](2)\n\
    \        val xorArray26 = Array.ofDim[Int](2)\n        val xorArray27 = Array.ofDim[Int](2)\n\
    \        val xorArray28 = Array.ofDim[Int](2)\n        val xorArray29 = Array.ofDim[Int](2)\n\
    \        val xorArray30 = Array.ofDim[Int](2)\n        val xorArray31 = Array.ofDim[Int](2)\n\
    \        val xorArray32 = Array.ofDim[Int](2)\n        val xorArray33 = Array.ofDim[Int](2)\n\
    \        val xorArray34 = Array.ofDim[Int](2)\n        val xorArray35 = Array.ofDim[Int](2)\n\
    \        val xorArray", "        val aList = a.toList\n        val bList = b.toList\n\
    \        val xorList = mutable.ListBuffer.empty[String]\n        aList.zip(bList).foreach\
    \ { case (aChar, bChar) =>\n            xorList += aChar ^ bChar\n        }\n\
    \        xorList.toList.reverse.mkString", "        val aBits = a.toInt\n    \
    \    val bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val xorBitsString\
    \ = Integer.toBinaryString(xorBits)\n        val xorBitsStringWithoutLeadingZeros\
    \ = xorBitsString.substring(0,xorBitsString.length-1)\n        val xorBitsStringWithoutTrailingZeros\
    \ = xorBitsString.substring(xorBitsString.length-1)\n        (xorBitsStringWithoutLeadingZeros\
    \ ++ xorBitsStringWithoutTrailingZeros)", "        val aList = a.toList\n    \
    \    val bList = b.toList\n        val result = new StringBuilder\n        val\
    \ aLen = aList.length\n        val bLen = bList.length\n        val aIndex = 0\n\
    \        val bIndex = 0\n        while (aIndex < aLen && bIndex < bLen) {\n  \
    \          val aChar = aList(aIndex)\n            val bChar = bList(bIndex)\n\
    \            val aCharInt = aChar match {\n                case '1' => 1\n   \
    \             case '0' => 0\n                case _ => throw new IllegalArgumentException(\"\
    Invalid character in string a: \" + aChar)\n            }\n            val bCharInt\
    \ = bChar match {\n                case '1' => 1\n                case '0' =>\
    \ 0\n                case _ => throw new IllegalArgumentException(\"Invalid character\
    \ in string b: \" + bChar)\n            }\n            val aCharInt = aCharInt\
    \ xor bCharInt\n            val aCharChar = aChar match {\n                case\
    \ '1' => if (aCharInt == 1) '0' else '1'\n                case '0' => if (aCharInt\
    \ == 0) '0' else '1'\n                case _ => throw new IllegalArgumentException(\"\
    Invalid character in string a: \" + aChar)\n            }\n            val bCharChar\
    \ = bChar match {\n                case '1' => if (bCharInt == 1) '0' else '1'\n\
    \                case '0' => if (bCharInt == 0) '0' else '1'\n               \
    \ case _ => throw new IllegalArgumentException(\"Invalid character in string b:\
    \ \" + bChar)\n            }\n            result.append(aCharChar)\n         \
    \   result.append(bCharChar)\n            aIndex += 1\n            bIndex += 1\n\
    \        }\n        if (bIndex < bLen) {\n            val bChar = bList(bIndex)\n\
    \            val bCharInt = bChar match {\n                case '1' => 1\n   \
    \             case '0' => 0\n                case _ => throw new IllegalArgumentException(\"\
    Invalid character in string b: \" + bChar)\n            }\n            val bCharInt\
    \ = bCharInt xor aCharInt\n            val bCharChar = bChar match {\n       \
    \         case '1' => if (bCharInt == 1) '0' else '1'\n                case '0'\
    \ => if (bCharInt == 0) '0' else '1'\n                case _ => throw new IllegalArgumentException(\"\
    Invalid character in string b: \" + bChar)\n            }\n            result.append(bCharChar)\n\
    \        }\n        if (bIndex == aLen) {\n            val aChar = aList(aIndex)\n\
    \            val aCharInt = aChar match {\n                case '1' => 1\n   \
    \             case '0' => 0\n                case _ => throw new IllegalArgumentException(\"",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        var result =\
    \ \"\"\n        var carry = 0\n        var i = 0\n        while (i < a.length)\
    \ {\n            val aBit = aBits(i)\n            val bBit = bBits(i)\n      \
    \      val aBitVal = aBit + carry\n            val bBitVal = bBit + carry\n  \
    \          val aBitValStr = aBitVal.toString.reverse\n            val bBitValStr\
    \ = bBitVal.toString.reverse\n            val aBitValStrLen = aBitValStr.length\n\
    \            val bBitValStrLen = bBitValStr.length\n            val aBitValStrPad\
    \ = if (aBitValStrLen > bBitValStrLen) aBitValStrLen else bBitValStrLen\n    \
    \        val bBitValStrPad = if (aBitValStrLen > bBitValStrLen) bBitValStrLen\
    \ else aBitValStrLen\n            val aBitValStrPadChar = if (aBitValStrPad ==\
    \ 0) \"\" else aBitValStrPad\n            val bBitValStrPadChar = if (bBitValStrPad\
    \ == 0) \"\" else bBitValStrPad\n            val aBitValStrPadChars = aBitValStrPadChar.takeWhile(_\
    \ != '0')\n            val bBitValStrPadChars = bBitValStrPadChar.takeWhile(_\
    \ != '0')\n            val aBitValStrPadCharsLen = aBitValStrPadChars.length\n\
    \            val bBitValStrPadCharsLen = bBitValStrPadChars.length\n         \
    \   val aBitValStrPadCharsPad = if (aBitValStrPadCharsLen > bBitValStrPadCharsLen)\
    \ aBitValStrPadCharsLen else bBitValStrPadCharsLen\n            val bBitValStrPadCharsPad\
    \ = if (aBitValStrPadCharsLen > bBitValStrPadCharsLen) bBitValStrPadCharsLen else\
    \ aBitValStrPadCharsLen\n            val aBitValStrPadCharsPadChar = if (aBitValStrPadCharsPad\
    \ == 0) \"\" else aBitValStrPadCharsPad\n            val bBitValStrPadCharsPadChar\
    \ = if (bBitValStrPadCharsPad == 0) \"\" else bBitValStrPadCharsPad\n        \
    \    val aBitValStrPadCharsPadChars = aBitValStrPadCharsPadChar.takeWhile", " \
    \       val aList = a.toList\n        val bList = b.toList\n        val result\
    \ = aList.zip(bList).map(x => x._1 ^ x._2).mkString\n        result", "      \
    \  val aList = a.toList\n        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until aList.length) xorList += aList(i) xor bList(i)\n   \
    \     xorList.toList.toString", "        val aBits = a.toInt\n        val bBits\
    \ = b.toInt\n        val xorBits = aBits xor bBits\n        val xorBitsString\
    \ = Integer.toString(xorBits)\n        val result = xorBitsString.substring(0,xorBitsString.length-1)\n\
    \        return result", "        val aArray = a.toCharArray.map(_.toInt)\n  \
    \      val bArray = b.toCharArray.map(_.toInt)\n        val result = new mutable.ArrayBuffer(a.length)\n\
    \        var i = 0\n        while (i < a.length) {\n            result(i) = aArray(i)\
    \ xor bArray(i)\n            i += 1\n        }\n        result.mkString.reverse",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val xorBitsString = Integer.toBinaryString(xorBits)\n\
    \        val xorBitsStringLength = xorBitsString.length\n        val xorBitsStringWithZeros\
    \ = Array.fill(xorBitsStringLength)(0)\n        val xorBitsStringWithZeroString\
    \ = xorBitsStringWithZeros.mkString(\"\")\n        val xorBitsStringWithZeroStringLength\
    \ = xorBitsStringWithZeroString.length\n        val xorBitsStringWithZeroStringWithSpaces\
    \ = xorBitsStringWithZeroString + \" \"\n        val xorBitsStringWithZeroStringWithSpacesLength\
    \ = xorBitsStringWithZeroStringWithSpaces.length\n        val xorBitsStringWithZeroStringWithSpacesWithSpaces\
    \ = xorBitsStringWithZeroStringWithSpaces + \" \"\n        val xorBitsStringWithZeroStringWithSpacesWithSpacesLength\
    \ = xorBitsStringWithZeroStringWithSpacesWithSpaces.length\n        val xorBitsStringWithZeroStringWithSpacesWithSpacesWithSpaces\
    \ = xorBitsStringWithZeroStringWithSpacesWithSpaces + \" \"\n        val xorBitsStringWithZeroStringWithSpacesWithSpacesWithSpacesLength\
    \ = xorBitsStringWithZeroStringWithSpacesWithSpacesWithSpaces.length\n       \
    \ val xorBitsStringWithZeroStringWithSpacesWithSpacesWithSpacesWithSpaces = xorBitsStringWithZeroStringWithSpacesWithSpacesWithSpaces\
    \ + \" \"\n        val xorBitsStringWithZeroStringWithSpacesWithSpacesWithSpacesWithSpacesLength\
    \ = xorBitsStringWithZeroStringWithSpacesWithSpacesWithSpacesWithSpaces.length\n\
    \        val xorBitsStringWithZeroStringWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = xorBitsStringWithZeroStringWithSpacesWithSpacesWithSpacesWithSpaces + \" \"\
    \n        val xorBitsStringWithZeroStringWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesLength\
    \ = xorBitsStringWithZeroStringWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces.length\n\
    \        val xorBitsStringWithZeroStringWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = xorBitsStringWithZeroStringWithSpacesWithSpacesWithSpacesWithSpaces", "  \
    \      val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val xorBitsString = xorBits.toBinaryString\n      \
    \  xorBitsString.reverse", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = Array.ofDim[Int](2)\n\
    \        val xorArray2 = Array.ofDim[Int](2)\n        val xorArray3 = Array.ofDim[Int](2)\n\
    \        val xorArray4 = Array.ofDim[Int](2)\n        val xorArray5 = Array.ofDim[Int](2)\n\
    \        val xorArray6 = Array.ofDim[Int](2)\n        val xorArray7 = Array.ofDim[Int](2)\n\
    \        val xorArray8 = Array.ofDim[Int](2)\n        val xorArray9 = Array.ofDim[Int](2)\n\
    \        val xorArray10 = Array.ofDim[Int](2)\n        val xorArray11 = Array.ofDim[Int](2)\n\
    \        val xorArray12 = Array.ofDim[Int](2)\n        val xorArray13 = Array.ofDim[Int](2)\n\
    \        val xorArray14 = Array.ofDim[Int](2)\n        val xorArray15 = Array.ofDim[Int](2)\n\
    \        val xorArray16 = Array.ofDim[Int](2)\n        val xorArray17 = Array.ofDim[Int](2)\n\
    \        val xorArray18 = Array.ofDim[Int](2)\n        val xorArray19 = Array.ofDim[Int](2)\n\
    \        val xorArray20 = Array.ofDim[Int](2)\n        val xorArray21 = Array.ofDim[Int](2)\n\
    \        val xorArray22 = Array.ofDim[Int](2)\n        val xorArray23 = Array.ofDim[Int](2)\n\
    \        val xorArray24 = Array.ofDim[Int](2)\n        val xorArray25 = Array.ofDim[Int](2)\n\
    \        val xorArray26 = Array.ofDim[Int](2)\n        val xorArray27 = Array.ofDim[Int](2)\n\
    \        val xorArray28 = Array.ofDim[Int](2)\n        val xorArray29 = Array.ofDim[Int](2)\n\
    \        val xorArray30 = Array.ofDim[Int](2)\n        val xorArray31 = Array.ofDim[Int](2)\n\
    \        val xorArray32 = Array.ofDim[Int](2)\n        val xorArray33 = Array.ofDim[Int](2)\n\
    \        val xorArray34 = Array.ofDim[Int](2)\n        val xorArray35 = Array.ofDim[Int](2)\n\
    \        val xorArray", "        val aArray = a.toCharArray\n        val bArray\
    \ = b.toCharArray\n        val result = new StringBuilder\n        var i = 0\n\
    \        while (i < aArray.length) {\n            result.append(aArray(i) ^ bArray(i))\n\
    \            i += 1\n        }\n        return result.toString", "        val\
    \ aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits = aBits xor\
    \ bBits\n        val xorBitsString = Integer.toBinaryString(xorBits)\n       \
    \ val xorBitsStringWithoutLeadingZeros = xorBitsString.substring(1,xorBitsString.length)\n\
    \        val xorBitsStringWithoutLeadingZeros = xorBitsStringWithoutLeadingZeros.padToLength(32,\
    \ \"0\")\n        val xorBitsStringWithoutLeadingZeros = xorBitsStringWithoutLeadingZeros.substring(0,\
    \ xorBitsStringWithoutLeadingZeros.length-1)\n        val xorBitsStringWithoutLeadingZeros\
    \ = xorBitsStringWithoutLeadingZeros.padToLength(32, \"0\")\n        val xorBitsStringWithoutLeadingZeros\
    \ = xorBitsStringWithoutLeadingZeros.substring(0, xorBitsStringWithoutLeadingZeros.length-1)\n\
    \        val xorBitsStringWithoutLeadingZeros = xorBitsStringWithoutLeadingZeros.padToLength(32,\
    \ \"0\")\n        val xorBitsStringWithoutLeadingZeros = xorBitsStringWithoutLeadingZeros.substring(0,\
    \ xorBitsStringWithoutLeadingZeros.length-1)\n        val xorBitsStringWithoutLeadingZeros\
    \ = xorBitsStringWithoutLeadingZeros.padToLength(32, \"0\")\n        val xorBitsStringWithoutLeadingZeros\
    \ = xorBitsStringWithoutLeadingZeros.substring(0, xorBitsStringWithoutLeadingZeros.length-1)\n\
    \        val xorBitsStringWithoutLeadingZeros = xorBitsStringWithoutLeadingZeros.padToLength(32,\
    \ \"0\")\n        val xorBitsStringWithoutLeadingZeros = xorBitsStringWithoutLeadingZeros.substring(0,\
    \ xorBitsStringWithoutLeadingZeros.length-1)\n        val xorBitsStringWithoutLeadingZeros\
    \ = xorBitsStringWithoutLeadingZeros.padToLength(32, \"0\")\n        val xorBitsStringWithoutLeadingZeros\
    \ = xorBitsStringWithoutLeadingZeros.substring(0, xorBitsStringWithoutLeadingZeros.length-1)\n\
    \        val xorBitsStringWithoutLeadingZeros = xorBitsStringWithoutLeadingZeros.padToLength(32,\
    \ \"0\")\n        val xorBitsStringWithoutLeadingZeros = xorBitsStringWithoutLeadingZeros.substring(0,\
    \ xorBitsStringWithoutLeadingZeros.length-1)\n        val ", "        val aArray\
    \ = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = Array.ofDim[Int](2)\n        val xorArray2 = Array.ofDim[Int](2)\n\
    \        val xorArray3 = Array.ofDim[Int](2)\n        val xorArray4 = Array.ofDim[Int](2)\n\
    \        val xorArray5 = Array.ofDim[Int](2)\n        val xorArray6 = Array.ofDim[Int](2)\n\
    \        val xorArray7 = Array.ofDim[Int](2)\n        val xorArray8 = Array.ofDim[Int](2)\n\
    \        val xorArray9 = Array.ofDim[Int](2)\n        val xorArray10 = Array.ofDim[Int](2)\n\
    \        val xorArray11 = Array.ofDim[Int](2)\n        val xorArray12 = Array.ofDim[Int](2)\n\
    \        val xorArray13 = Array.ofDim[Int](2)\n        val xorArray14 = Array.ofDim[Int](2)\n\
    \        val xorArray15 = Array.ofDim[Int](2)\n        val xorArray16 = Array.ofDim[Int](2)\n\
    \        val xorArray17 = Array.ofDim[Int](2)\n        val xorArray18 = Array.ofDim[Int](2)\n\
    \        val xorArray19 = Array.ofDim[Int](2)\n        val xorArray20 = Array.ofDim[Int](2)\n\
    \        val xorArray21 = Array.ofDim[Int](2)\n        val xorArray22 = Array.ofDim[Int](2)\n\
    \        val xorArray23 = Array.ofDim[Int](2)\n        val xorArray24 = Array.ofDim[Int](2)\n\
    \        val xorArray25 = Array.ofDim[Int](2)\n        val xorArray26 = Array.ofDim[Int](2)\n\
    \        val xorArray27 = Array.ofDim[Int](2)\n        val xorArray28 = Array.ofDim[Int](2)\n\
    \        val xorArray29 = Array.ofDim[Int](2)\n        val xorArray30 = Array.ofDim[Int](2)\n\
    \        val xorArray31 = Array.ofDim[Int](2)\n        val xorArray32 = Array.ofDim[Int](2)\n\
    \        val xorArray33 = Array.ofDim[Int](2)\n        val xorArray34 = Array.ofDim[Int](2)\n\
    \        val xorArray35 = Array.ofDim[Int](2)\n        val xorArray", "      \
    \  val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits = aBits\
    \ xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n        val\
    \ xorBitsStringLength = xorBitsString.length\n        val xorBitsStringBuilder\
    \ = new StringBuilder(xorBitsStringLength)\n        xorBitsStringBuilder.append(xorBitsString.substring(0,\
    \ xorBitsStringLength - 1))\n        xorBitsStringBuilder.append(xorBitsString.substring(xorBitsStringLength\
    \ - 1))\n        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.toString",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val aLen = aArray.length\n        val bLen = bArray.length\n        val result\
    \ = new Array[Char](aLen + bLen)\n        var i = 0\n        var j = 0\n     \
    \   while (i < aLen && j < bLen) {\n            result(i) = aArray(i) XOR bArray(j)\n\
    \            i += 1\n            j += 1\n        }\n        while (i < aLen) {\n\
    \            result(i) = aArray(i)\n            i += 1\n        }\n        while\
    \ (j < bLen) {\n            result(i) = bArray(j)\n            j += 1\n      \
    \  }\n        new String(result)", "        val aList = a.toList\n        val\
    \ bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n \
    \       for(i <- 0 until aList.length)\n            for(j <- 0 until bList.length)\n\
    \                if(aList(i) == bList(j))\n                    xorList += aList(i)\n\
    \        xorList.toList.reverse.mkString", "        val aBits = a.toInt\n    \
    \    val bBits = b.toInt\n        val xorBits = aBits ^ bBits\n        val xorBitsString\
    \ = Integer.toString(xorBits)\n        val xorBitsStringLength = xorBitsString.length\n\
    \        val xorBitsStringBuilder = new StringBuilder(xorBitsStringLength)\n \
    \       xorBitsStringBuilder.append(xorBitsString)\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuild", "      \
    \  val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = mutable.ArrayBuffer.empty[Int]\n        for (i <- 0 until\
    \ aArray.length)\n            xorArray += (aArray(i) xor bArray(i))\n        xorArray.toString.reverse",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val result = xorBits.toBinaryString\n        return\
    \ result", "        val aBits = a.toInt\n        val bBits = b.toInt\n       \
    \ val xorBits = aBits xor bBits\n        val result = xorBits.toBinaryString\n\
    \        return result", "        val aArray = a.toCharArray\n        val bArray\
    \ = b.toCharArray\n        val xorArray = new Array[Char](b.length)\n        val\
    \ xorArrayIndex = 0\n        for (i <- 0 until a.length) {\n            xorArray(xorArrayIndex)\
    \ = aArray(i) xor bArray(i)\n            xorArrayIndex += 1\n        }\n     \
    \   xorArray.toString", "        val aArray = a.toCharArray\n        val bArray\
    \ = b.toCharArray\n        val xorArray = new Array[Char](a.length)\n        for(i\
    \ <- 0 until xorArray.length)\n            xorArray(i) = aArray(i) xor bArray(i)\n\
    \        new String(xorArray)", "        val aArray = a.toCharArray\n        val\
    \ bArray = b.toCharArray\n        val result = new mutable.StringBuilder\n   \
    \     val xor = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult\
    \ = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult2 = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xorResult3 = mutable.ArrayBuffer.fill(aArray.length)(0)\n       \
    \ val xorResult4 = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult5\
    \ = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult6 = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xorResult7 = mutable.ArrayBuffer.fill(aArray.length)(0)\n       \
    \ val xorResult8 = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult9\
    \ = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult10 = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xorResult11 = mutable.ArrayBuffer.fill(aArray.length)(0)\n      \
    \  val xorResult12 = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult13\
    \ = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult14 = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xorResult15 = mutable.ArrayBuffer.fill(aArray.length)(0)\n      \
    \  val xorResult16 = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult17\
    \ = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult18 = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xorResult19 = mutable.ArrayBuffer.fill(aArray.length)(0)\n      \
    \  val xorResult20 = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult21\
    \ = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult22 = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xorResult23 = mutable.ArrayBuffer.fill(aArray.length)(0)\n      \
    \  val xorResult24 = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult25\
    \ = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult26 = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xorResult27 = mutable.ArrayBuffer.fill(aArray.length)(0)\n      \
    \  val xorResult28 = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n   \
    \     val xorBitsStringLength = xorBitsString.length\n        val xorBitsStringBuilder\
    \ = new StringBuilder(xorBitsStringLength)\n        xorBitsStringBuilder.append(xorBitsString.substring(0,\
    \ xorBitsStringLength - 1))\n        xorBitsStringBuilder.append(xorBitsString.substring(xorBitsStringLength\
    \ - 1))\n        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.toString",
  "        val aBits = a.toIntArray\n        val bBits = b.toIntArray\n        val\
    \ xorBits = Array[Int]()\n        var i = 0\n        while (i < aBits.length &&\
    \ i < bBits.length) {\n            xorBits(i) = aBits(i) xor bBits(i)\n      \
    \      i += 1\n        }\n        xorBits.toString.reverse", "        val aList\
    \ = a.toList\n        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        var xor = 0\n        var i = 0\n        while (i < aList.size) {\n  \
    \          xor = xor + aList(i) xor bList(i)\n            i = i + 1\n        }\n\
    \        xorList.add(xor.toString)\n        xorList.toString", "        val aBits\
    \ = a.toInt\n        val bBits = b.toInt\n        val xorBits = aBits xor bBits\n\
    \        val result = xorBits.toBinaryString\n        return result", "      \
    \  val aList = a.toList\n        val bList = b.toList\n        var result = 0\n\
    \        var carry = 0\n        for(i <- 0 until aList.length){\n            val\
    \ aChar = aList(i)\n            val bChar = bList(i)\n            val aInt = aChar\
    \ match {\n                case '1' => 1\n                case '0' => 0\n    \
    \        }\n            val bInt = bChar match {\n                case '1' =>\
    \ 1\n                case '0' => 0\n            }\n            val aBinary = aInt\
    \ match {\n                case 1 => 1\n                case 0 => 0\n        \
    \    }\n            val bBinary = bInt match {\n                case 1 => 1\n\
    \                case 0 => 0\n            }\n            val aBinString = aBinary.toString\n\
    \            val bBinString = bBinary.toString\n            val aBinStringLen\
    \ = aBinString.length\n            val bBinStringLen = bBinString.length\n   \
    \         val aBinStringLenInt = aBinStringLen.toInt\n            val bBinStringLenInt\
    \ = bBinStringLen.toInt\n            val aBinStringLenInt = aBinStringLen.toInt\n\
    \            val bBinStringLenInt = bBinStringLen.toInt\n            val aBinStringLenInt\
    \ = aBinStringLen.toInt\n            val bBinStringLenInt = bBinStringLen.toInt\n\
    \            val aBinStringLenInt = aBinStringLen.toInt\n            val bBinStringLenInt\
    \ = bBinStringLen.toInt\n            val aBinStringLenInt = aBinStringLen.toInt\n\
    \            val bBinStringLenInt = bBinStringLen.toInt\n            val aBinStringLenInt\
    \ = aBinStringLen.toInt\n            val bBinStringLenInt = bBinStringLen.toInt\n\
    \            val aBinStringLenInt = aBinStringLen.toInt\n            val bBinStringLenInt\
    \ = bBinStringLen.toInt\n            val aBinStringLenInt = aBinStringLen.toInt\n\
    \            val bBinStringLenInt = bBinStringLen.toInt\n            val aBinStringLenInt\
    \ = aBinStringLen.toInt\n            val bBinStringLenInt = bBinStringLen.toInt\n\
    \            val aBinStringLenInt = aBinStringLen.toInt\n            val bBinStringLenInt\
    \ = bBinStringLen.toInt\n            val aBinStringLenInt = aBinStringLen.toInt\n\
    \            val bBinStringLenInt = bBinStringLen.toInt", "        val aList =\
    \ a.toList\n        val bList = b.toList\n        val result = aList.zip(bList).map(x\
    \ => x._1 ^ x._2).mkString\n        result", "        val aBits = a.toInt\n  \
    \      val bBits = b.toInt\n        val result = new StringBuilder\n        val\
    \ xorBits = aBits xor bBits\n        result ++= xorBits.toString.reverse\n   \
    \     result.toString", "        val aBits = a.toIntArray\n        val bBits =\
    \ b.toIntArray\n        val xorBits = aBits xor bBits\n        val xorBitsString\
    \ = xorBits.map(x => if (x == 0) \"0\" else \"1\").mkString\n        xorBitsString",
  "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = aArray.zip(\n            bArray\n        ).map(\n    \
    \        x => x._1 ^ x._2\n        ).map(\n            x => x.toString.toChar\n\
    \        ).mkString\n        xorArray", "        val aList = a.toList\n      \
    \  val bList = b.toList\n        var result = \"\"\n        var carry = 0\n  \
    \      var i = 0\n        while (i < aList.size) {\n            val aChar = aList(i)\n\
    \            val bChar = bList(i)\n            val aCharInt = aChar.toInt\n  \
    \          val bCharInt = bChar.toInt\n            val aCharIntInt = aCharInt.toInt\n\
    \            val bCharIntInt = bCharInt.toInt\n            val aCharIntIntInt\
    \ = aCharIntInt.toInt\n            val bCharIntIntInt = bCharIntInt.toInt\n  \
    \          val aCharIntIntIntInt = aCharIntIntInt.toInt\n            val bCharIntIntIntInt\
    \ = bCharIntIntInt.toInt\n            val aCharIntIntIntIntInt = aCharIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntInt = bCharIntIntIntInt.toInt\n            val\
    \ aCharIntIntIntIntIntInt = aCharIntIntIntIntInt.toInt\n            val bCharIntIntIntIntIntInt\
    \ = bCharIntIntIntIntInt.toInt\n            val aCharIntIntIntIntIntIntInt = aCharIntIntIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntIntIntIntInt",
  "        val aBits = a.toIntArray\n        val bBits = b.toIntArray\n        val\
    \ xorBits = Array.ofDim[Int](Math.max(aBits.length, bBits.length))\n        val\
    \ xorBitsIndex = 0\n        for (i <- 0 until xorBits.length)\n            if\
    \ (aBits(i) != 0 && bBits(i) != 0)\n                xorBits(xorBitsIndex) = xorBits(xorBitsIndex)\
    \ + aBits(i) ^ bBits(i)\n            xorBitsIndex += 1\n        xorBits.mkString(\"\
    \")", "        val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits\
    \ = aBits xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n \
    \       val xorBitsStringWithZeros = xorBitsString.padToLength(xorBitsString.length,\
    \ \"0\")\n        val xorBitsStringWithZeros = xorBitsStringWithZeros.substring(0,\
    \ xorBitsStringWithZeros.length - 1)\n        xorBitsStringWithZeros", "     \
    \   val aList = a.toList\n        val bList = b.toList\n        var result = \"\
    \"\n        var carry = 0\n        for(i <- 0 until aList.length){\n         \
    \   val aChar = aList(i)\n            val bChar = bList(i)\n            val aInt\
    \ = aChar match {\n                case '1' => 1\n                case '0' =>\
    \ 0\n            }\n            val bInt = bChar match {\n                case\
    \ '1' => 1\n                case '0' => 0\n            }\n            val aInt2\
    \ = aInt XOR bInt\n            val aInt3 = aInt2 XOR carry\n            val aChar3\
    \ = aInt3 match {\n                case '1' => 1\n                case '0' =>\
    \ 0\n            }\n            result += \"1\" + (aChar3 match {\n          \
    \      case '1' => 1\n                case '0' => 0\n            })\n        \
    \    carry = aInt3 match {\n                case '1' => 1\n                case\
    \ '0' => 0\n            }\n        }\n        result", "        val aArray = a.toCharArray\n\
    \        val bArray = b.toCharArray\n        val result = new Array[Char](Math.max(aArray.length,\
    \ bArray.length))\n        var i = 0\n        while (i < aArray.length || i <\
    \ bArray.length) {\n            if (i < aArray.length) result(i) = aArray(i) XOR\
    \ bArray(i)\n            if (i < bArray.length) result(i) = aArray(i) XOR bArray(i)\n\
    \            i += 1\n        }\n        new String(result)", "        val aArray\
    \ = a.toCharArray\n        val bArray = b.toCharArray\n        var result = \"\
    \"\n        for (i <- 0 until aArray.length)\n            result += ((aArray(i)\
    \ XOR bArray(i)) XOR 0xff).toChar\n        result", "        val aBits = a.toInt\n\
    \        val bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val\
    \ xorBitsString = Integer.toString(xorBits)\n        val xorBitsStringLength =\
    \ xorBitsString.length\n        val xorBitsStringBuilder = new StringBuilder(xorBitsStringLength)\n\
    \        xorBitsStringBuilder.append(xorBitsString)\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.reverse()\n        xorBitsString", "        val\
    \ aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val result = new mutable.ArrayBuffer(a.length)\n        for(i <- 0 until\
    \ a.length) {\n            result(i) = aArray(i) xor bArray(i)\n        }\n  \
    \      new String(result.toArray)", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = aArray.zip(\n\
    \            bArray\n        ).map(x => x._1 ^ x._2)\n        val xorString =\
    \ xorArray.toString.reverse\n        xorString.substring(0, xorString.length -\
    \ 1)", "        val aList = a.toList\n        val bList = b.toList\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for( i <- 0 until aList.size\
    \ ) {\n            val aChar = aList(i)\n            val bChar = bList(i)\n  \
    \          if( aChar != bChar ) {\n                result.append((aChar ^ bChar))\n\
    \            }\n        }\n        result.toString", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = Array.ofDim[Int](a.length)\n\
    \        for(i <- 0 until xorArray.length)\n            xorArray(i) = aArray(i)\
    \ xor bArray(i)\n        xorArray.toString.reverse", "        val aArray = a.toCharArray\n\
    \        val bArray = b.toCharArray\n        val xorArray = new Array[Char](Math.max(aArray.length,\
    \ bArray.length))\n        var i = 0\n        while (i < xorArray.length) {\n\
    \            xorArray(i) = aArray(i) xor bArray(i)\n            i += 1\n     \
    \   }\n        xorArray.toString.reverse", "        val aBits = a.toIntArray\n\
    \        val bBits = b.toIntArray\n        val xorBits = Array.ofDim[Int](Math.max(aBits.length,\
    \ bBits.length))\n        var i = 0\n        while (i < xorBits.length) {\n  \
    \          xorBits(i) = aBits(i).xor(bBits(i))\n            i += 1\n        }\n\
    \        xorBits.mkString(\"\")", "        val aBits = a.toInt\n        val bBits\
    \ = b.toInt\n        val xorBits = aBits xor bBits\n        val xorBitsString\
    \ = Integer.toString(xorBits)\n        val xorBitsStringWithLeadingZeros = xorBitsString.padToLength(xorBitsString.length,\
    \ \"0\")\n        val xorBitsStringWithLeadingZeros = xorBitsStringWithLeadingZeros.reverse\n\
    \        xorBitsStringWithLeadingZeros", "        val aList = a.toList\n     \
    \   val bList = b.toList\n        val xorList = mutable.ListBuffer[String]()\n\
    \        var i = 0\n        while (i < aList.size) {\n            xorList += aList(i)\
    \ XOR bList(i)\n            i += 1\n        }\n        xorList.toList.reverse.mkString",
  "        val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer.empty[String]\n        aList.zip(bList).foreach {\n   \
    \         case (aChar, bChar) =>\n                val xorChar = aChar xor bChar\n\
    \                xorList += xorChar.toString\n        }\n        xorList.toList.reverse.mkString(\"\
    \")", "        val aBits = a.toIntArray\n        val bBits = b.toIntArray\n  \
    \      val xorBits = Array.ofDim[Int](Math.max(aBits.length, bBits.length))\n\
    \        var i = 0\n        while (i < xorBits.length) {\n            xorBits(i)\
    \ = aBits(i).xor(bBits(i))\n            i += 1\n        }\n        xorBits.mkString(\"\
    \")", "        val aBits = a.toInt\n        val bBits = b.toInt\n        var result\
    \ = \"\"\n        var carry = 0\n        for (i <- 0 until aBits) {\n        \
    \    val aBit = aBits - i\n            val bBit = bBits - i\n            val aBitInt\
    \ = aBit + carry\n            val bBitInt = bBit + carry\n            val aBitString\
    \ = aBitInt.toString\n            val bBitString = bBitInt.toString\n        \
    \    val aBitStringLen = aBitString.length\n            val bBitStringLen = bBitString.length\n\
    \            val aBitStringPad = if (aBitStringLen < bBitStringLen) aBitString\
    \ else bBitString\n            val bBitStringPad = if (aBitStringLen < bBitStringLen)\
    \ bBitString else aBitString\n            val aBitStringPadLen = aBitStringPad.length\n\
    \            val bBitStringPadLen = bBitStringPad.length\n            val aBitStringPadPad\
    \ = if (aBitStringPadLen < bBitStringPadLen) aBitStringPad else bBitStringPad\n\
    \            val bBitStringPadPad = if (aBitStringPadLen < bBitStringPadLen) bBitStringPad\
    \ else aBitStringPadPad\n            val aBitStringPadPadLen = aBitStringPadPad.length\n\
    \            val bBitStringPadPadLen = bBitStringPadPad.length\n            val\
    \ aBitStringPadPadPad = if (aBitStringPadPadLen < bBitStringPadPadLen) aBitStringPadPad\
    \ else bBitStringPadPad\n            val bBitStringPadPad = if (aBitStringPadPadLen\
    \ < bBitStringPadPadLen) bBitStringPadPad else aBitStringPadPadPad\n         \
    \   val aBitStringPadPadPadLen = aBitStringPadPadPad.length\n            val bBitStringPadPadLen\
    \ = bBitStringPadPad.length\n            val aBitStringPadPadPad = if (aBitStringPadPadLen\
    \ < bBitStringPadPadLen) aBitStringPadPadPad else bBitStringPadPadPad\n      \
    \      val bBitStringPadPad = if (aBitStringPadPadLen < bBitStringPadPadLen) bBitStringPadPad\
    \ else aBitStringPadPadPad\n            val aBitStringPadPadPadLen = aBitStringPadPadPad.length\n\
    \            val bBitStringPadPadLen = bBitStringPadPad.length\n            val\
    \ aBitStringPad", "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n\
    \        val xorArray = new Array[Char](a.length)\n        var i = 0\n       \
    \ while (i < xorArray.length) {\n            xorArray(i) = aArray(i) xor bArray(i)\n\
    \            i += 1\n        }\n        xorArray.toString.reverse", "        val\
    \ aList = a.toList\n        val bList = b.toList\n        val result = new StringBuilder\n\
    \        var carry = 0\n        for(i <- 0 until aList.size) {\n            val\
    \ aChar = aList(i)\n            val bChar = bList(i)\n            val aInt = aChar\
    \ match {\n                case '1' => 1\n                case '0' => 0\n    \
    \            case _ => throw new IllegalArgumentException(\"Invalid character\
    \ \" + aChar)\n            }\n            val bInt = bChar match {\n         \
    \       case '1' => 1\n                case '0' => 0\n                case _ =>\
    \ throw new IllegalArgumentException(\"Invalid character \" + bChar)\n       \
    \     }\n            val aBinary = Integer.bitCount(aInt)\n            val bBinary\
    \ = Integer.bitCount(bInt)\n            val aBits = aBinary / 8\n            val\
    \ bBits = bBinary / 8\n            val aBitsRemainder = aBinary % 8\n        \
    \    val bBitsRemainder = bBinary % 8\n            val aBitsCarry = aBitsRemainder\
    \ != 0\n            val bBitsCarry = bBitsRemainder != 0\n            val aBitsCarryInt\
    \ = aBitsCarry match {\n                case true => 1\n                case false\
    \ => 0\n            }\n            val bBitsCarryInt = bBitsCarry match {\n  \
    \              case true => 1\n                case false => 0\n            }\n\
    \            val aBitsCarryBin = aBitsCarryInt match {\n                case true\
    \ => '1'\n                case false => '0'\n            }\n            val bBitsCarryBin\
    \ = bBitsCarryInt match {\n                case true => '1'\n                case\
    \ false => '0'\n            }\n            val aBitsCarryBinString = aBitsCarryBin\
    \ match {\n                case '1' => '1'\n                case '0' => '0'\n\
    \            }\n            val bBitsCarryBinString = bBitsCarryBin match {\n\
    \                case '1' => '1'\n                case '0' => '0'\n          \
    \  }\n            val aBitsCarryBinString2 = aBitsCarryBin match {\n         \
    \       case '1' => '0'\n                case '0' => '1'\n            }\n    \
    \        val bBitsCarryBinString2 = bBitsCarryBin match {\n                case\
    \ '1' => '0'\n                case '0' => '1'\n            }\n            val\
    \ aBitsCarryBinString3 = aBitsCarryBin match {\n                case '1' => '",
  "        val aList = a.toList\n        val bList = b.toList\n        val result\
    \ = new StringBuilder\n        val xor = mutable.ListBuffer[Int]()\n        var\
    \ i = 0\n        while (i < aList.size) {\n            xor.append(aList(i) xor\
    \ bList(i))\n            i += 1\n        }\n        result.appendAll(xor)\n  \
    \      return result.toString", "        val aBits = a.toInt\n        val bBits\
    \ = b.toInt\n        val xorBits = aBits xor bBits\n        val xorBitsString\
    \ = xorBits.toBinaryString\n        val xorBitsStringLength = xorBitsString.length\n\
    \        val xorBitsStringBuilder = new StringBuilder(xorBitsStringLength)\n \
    \       for (i<- 0 until xorBitsStringLength) {\n            xorBitsStringBuilder.append(xorBitsString.charAt(i))\n\
    \        }\n        xorBitsStringBuilder.reverse", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val result = new StringBuilder\n      \
    \  val xor = mutable.BitSet(b.length)\n        val xorResult = mutable.BitSet(b.length)\n\
    \        val xorResult2 = mutable.BitSet(b.length)\n        val xorResult3 = mutable.BitSet(b.length)\n\
    \        val xorResult4 = mutable.BitSet(b.length)\n        val xorResult5 = mutable.BitSet(b.length)\n\
    \        val xorResult6 = mutable.BitSet(b.length)\n        val xorResult7 = mutable.BitSet(b.length)\n\
    \        val xorResult8 = mutable.BitSet(b.length)\n        val xorResult9 = mutable.BitSet(b.length)\n\
    \        val xorResult10 = mutable.BitSet(b.length)\n        val xorResult11 =\
    \ mutable.BitSet(b.length)\n        val xorResult12 = mutable.BitSet(b.length)\n\
    \        val xorResult13 = mutable.BitSet(b.length)\n        val xorResult14 =\
    \ mutable.BitSet(b.length)\n        val xorResult15 = mutable.BitSet(b.length)\n\
    \        val xorResult16 = mutable.BitSet(b.length)\n        val xorResult17 =\
    \ mutable.BitSet(b.length)\n        val xorResult18 = mutable.BitSet(b.length)\n\
    \        val xorResult19 = mutable.BitSet(b.length)\n        val xorResult20 =\
    \ mutable.BitSet(b.length)\n        val xorResult21 = mutable.BitSet(b.length)\n\
    \        val xorResult22 = mutable.BitSet(b.length)\n        val xorResult23 =\
    \ mutable.BitSet(b.length)\n        val xorResult24 = mutable.BitSet(b.length)\n\
    \        val xorResult25 = mutable.BitSet(b.length)\n        val xorResult26 =\
    \ mutable.BitSet(b.length)\n        val xorResult27 = mutable.BitSet(b.length)\n\
    \        val xorResult28 = mutable.BitSet(b.length)\n        val xorResult29 =\
    \ mutable.BitSet(b.length)\n        val xorResult30 = mutable.BitSet(b.length)\n\
    \        val xorResult31 = mutable.BitSet(b.length)\n        val xorResult32 =\
    \ mutable.BitSet(b.length)\n        val xorResult33 = mutable.BitSet(b.length)\n\
    \        val xorResult34 = mutable.BitSet(b.length)\n        val xorResult35 =\
    \ mutable.BitSet(b.length)\n        val xorResult36 = mutable.BitSet(b.length)\n\
    \        val xorResult37 = mutable.BitSet(b.length)\n        val xorResult38 =\
    \ mutable.Bit", "        val aList = a.toList\n        val bList = b.toList\n\
    \        val xorList = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ aList.length) xorList += aList(i) xor bList(i)\n        xorList.toList.reverse.mkString",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n   \
    \     val result = xorBitsString.substring(0,xorBitsString.length-1)\n       \
    \ result", "        val aList = a.toList\n        val bList = b.toList\n     \
    \   val xorList = mutable.ListBuffer.empty[String]\n        val xorResult = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until aList.size) {\n            xorList += aList(i) xor bList(i)\n\
    \            xorResult += xorList(i).toChar\n        }\n        xorResult.toString",
  "        val aList = a.toList\n        val bList = b.toList\n        val xorResult\
    \ = mutable.Buffer.empty[String]\n        for(i <- 0 until aList.size) {\n   \
    \         xorResult += ((aList(i) xor bList(i)) and 1).toChar\n        }\n   \
    \     xorResult.toString", "        val aList = a.toList\n        val bList =\
    \ b.toList\n        val result = new StringBuilder\n        val aLen = aList.length\n\
    \        val bLen = bList.length\n        val aIndex = 0\n        val bIndex =\
    \ 0\n        while(aIndex < aLen && bIndex < bLen) {\n            val aChar =\
    \ aList(aIndex)\n            val bChar = bList(bIndex)\n            if(aChar !=\
    \ bChar) {\n                result.append(aChar)\n            }\n            aIndex\
    \ += 1\n            bIndex += 1\n        }\n        if(result.length == aLen &&\
    \ bLen > 0) {\n            result.append(bList(bIndex))\n        }\n        return\
    \ result.toString", "        val aList = a.toList\n        val bList = b.toList\n\
    \        val xorList = mutable.ListBuffer[String]()\n        aList.zip(bList).foreach\
    \ { case (aChar, bChar) =>\n            xorList += aChar ^ bChar\n        }\n\
    \        xorList.toList.reverse.mkString", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = mutable.ArrayBuffer.empty[Int]\n\
    \        var xor = 0\n        for (i <- 0 until aArray.length)\n            xor\
    \ = xor + aArray(i) xor bArray(i)\n        xorArray = xorArray.toArray\n     \
    \   xorArray.reverse.mkString.reverse", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 0 until aArray.length)\n            for(j <- 0 until bArray.length)\n\
    \                xorArray += (aArray(i) xor bArray(j))\n        xorArray.toString.reverse",
  "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = mutable.ArrayBuffer.empty[Int]\n        for(i <- 0 until\
    \ aArray.length) xorArray += (aArray(i) xor bArray(i))\n        xorArray.toString.reverse",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n   \
    \     val xorBitsStringArray = xorBitsString.toCharArray\n        val xorBitsStringArrayLength\
    \ = xorBitsStringArray.length\n        val xorBitsStringBuilder = new StringBuilder\n\
    \        for (i<-xorBitsStringArrayLength to 0) {\n            xorBitsStringBuilder.append(xorBitsStringArray(i))\n\
    \        }\n        xorBitsStringBuilder.toString", "        val aBits = a.toInt\n\
    \        val bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val\
    \ xorBitsString = Integer.toBinaryString(xorBits)\n        val xorBitsStringWithoutLeadingZeros\
    \ = xorBitsString.substring(0,xorBitsString.length-1)\n        val result = xorBitsStringWithoutLeadingZeros\
    \ + \"0\"\n        return result", "        val aBits = a.toInt\n        val bBits\
    \ = b.toInt\n        var result = \"\"\n        var carry = 0\n        var i =\
    \ 0\n        while (i < a.length) {\n            val aBit = aBits(i)\n       \
    \     val bBit = bBits(i)\n            val aChar = if (aBit == 1) \"1\" else \"\
    0\"\n            val bChar = if (bBit == 1) \"1\" else \"0\"\n            val\
    \ aCharBits = aChar.toInt\n            val bCharBits = bChar.toInt\n         \
    \   val aCharBit = aCharBits(0)\n            val bCharBit = bCharBits(0)\n   \
    \         val aCharBits = aCharBits(1)\n            val bCharBits = bCharBits(1)\n\
    \            val aCharBit = aCharBits(0)\n            val bCharBit = bCharBits(0)\n\
    \            val aCharBits = aCharBits(1)\n            val bCharBits = bCharBits(1)\n\
    \            val aCharBit = aCharBits(0)\n            val bCharBit = bCharBits(0)\n\
    \            val aCharBits = aCharBits(1)\n            val bCharBits = bCharBits(1)\n\
    \            val aCharBit = aCharBits(0)\n            val bCharBit = bCharBits(0)\n\
    \            val aCharBits = aCharBits(1)\n            val bCharBits = bCharBits(1)\n\
    \            val aCharBit = aCharBits(0)\n            val bCharBit = bCharBits(0)\n\
    \            val aCharBits = aCharBits(1)\n            val bCharBits = bCharBits(1)\n\
    \            val aCharBit = aCharBits(0)\n            val bCharBit = bCharBits(0)\n\
    \            val aCharBits = aCharBits(1)\n            val bCharBits = bCharBits(1)\n\
    \            val aCharBit = aCharBits(0)\n            val bCharBit = bCharBits(0)\n\
    \            val aCharBits = aCharBits(1)\n            val bCharBits = bCharBits(1)\n\
    \            val aCharBit = aCharBits(0)\n            val bCharBit = bCharBits(0)\n\
    \            val aCharBits = aCharBits(1)\n            val bCharBits = bCharBits(1)\n\
    \            val aCharBit = aCharBits(0)\n            val bCharBit = bCharBits(0)\n\
    \            val aCharBits = aCharBits(1)\n            val bCharBits = ", "  \
    \      val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n   \
    \     val xorBitsStringLength = xorBitsString.length\n        val xorBitsStringBuilder\
    \ = new StringBuilder(xorBitsStringLength)\n        xorBitsStringBuilder.append(xorBitsString.substring(0,\
    \ xorBitsStringLength - 1))\n        xorBitsStringBuilder.append(xorBitsString.substring(xorBitsStringLength\
    \ - 1))\n        xorBitsStringBuilder.reverse", "        val aArray = a.toCharArray\n\
    \        val bArray = b.toCharArray\n        val xorArray = new Array[Char](Math.max(aArray.length,\
    \ bArray.length))\n        var i = 0\n        while (i < xorArray.length) {\n\
    \            xorArray(i) = aArray(i) xor bArray(i)\n            i += 1\n     \
    \   }\n        xorArray.toString.reverse", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val result = new mutable.StringBuilder\n\
    \        val xor = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult\
    \ = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult2 = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xorResult3 = mutable.ArrayBuffer.fill(aArray.length)(0)\n       \
    \ val xorResult4 = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult5\
    \ = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult6 = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xorResult7 = mutable.ArrayBuffer.fill(aArray.length)(0)\n       \
    \ val xorResult8 = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult9\
    \ = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult10 = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xorResult11 = mutable.ArrayBuffer.fill(aArray.length)(0)\n      \
    \  val xorResult12 = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult13\
    \ = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult14 = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xorResult15 = mutable.ArrayBuffer.fill(aArray.length)(0)\n      \
    \  val xorResult16 = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult17\
    \ = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult18 = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xorResult19 = mutable.ArrayBuffer.fill(aArray.length)(0)\n      \
    \  val xorResult20 = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult21\
    \ = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult22 = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xorResult23 = mutable.ArrayBuffer.fill(aArray.length)(0)\n      \
    \  val xorResult24 = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult25\
    \ = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult26 = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xorResult27 = mutable.ArrayBuffer.fill(aArray.length)(0)\n      \
    \  val xorResult28 = mutable.ArrayBuffer.fill", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val xorList = mutable.ListBuffer[String]()\n\
    \        val xorListSize = a.length\n        val xorListSize2 = b.length\n   \
    \     val xorListSize3 = xorListSize + xorListSize2\n        val xorListSize4\
    \ = xorListSize3 / 2\n        val xorListSize5 = xorListSize4 / 2\n        val\
    \ xorListSize6 = xorListSize5 / 2\n        val xorListSize7 = xorListSize6 / 2\n\
    \        val xorListSize8 = xorListSize7 / 2\n        val xorListSize9 = xorListSize8\
    \ / 2\n        val xorListSize10 = xorListSize9 / 2\n        val xorListSize11\
    \ = xorListSize10 / 2\n        val xorListSize12 = xorListSize11 / 2\n       \
    \ val xorListSize13 = xorListSize12 / 2\n        val xorListSize14 = xorListSize13\
    \ / 2\n        val xorListSize15 = xorListSize14 / 2\n        val xorListSize16\
    \ = xorListSize15 / 2\n        val xorListSize17 = xorListSize16 / 2\n       \
    \ val xorListSize18 = xorListSize17 / 2\n        val xorListSize19 = xorListSize18\
    \ / 2\n        val xorListSize20 = xorListSize19 / 2\n        val xorListSize21\
    \ = xorListSize20 / 2\n        val xorListSize22 = xorListSize21 / 2\n       \
    \ val xorListSize23 = xorListSize22 / 2\n        val xorListSize24 = xorListSize23\
    \ / 2\n        val xorListSize25 = xorListSize24 / 2\n        val xorListSize26\
    \ = xorListSize25 / 2\n        val xorListSize27 = xorListSize26 / 2\n       \
    \ val xorListSize28 = xorListSize27 / 2\n        val xorListSize29 = xorListSize28\
    \ / 2\n        val xorListSize30 = xorListSize29 / 2\n        val xorListSize31\
    \ = xorListSize30 / 2\n        val xorListSize32 = xorListSize31 / 2\n       \
    \ val xorListSize33 = xorListSize32 / 2\n        val xorListSize34 = xorListSize33\
    \ / 2\n        val xorListSize35 = xorListSize34 / 2\n        val xorListSize36\
    \ = x", "        val aBits = a.toIntArray\n        val bBits = b.toIntArray\n\
    \        val xorBits = Array.ofDim[Int](Math.max(aBits.length, bBits.length))\n\
    \        var i = 0\n        while (i < xorBits.length) {\n            xorBits(i)\
    \ = aBits(i) xor bBits(i)\n            i += 1\n        }\n        new String(xorBits)",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](aArray.length)\n        for(i <- 0 until xorArray.length)\n\
    \            xorArray(i) = aArray(i) xor bArray(i)\n        new String(xorArray)",
  "        val aList = a.toList\n        val bList = b.toList\n        val result\
    \ = new StringBuilder\n        val aLen = aList.size\n        val bLen = bList.size\n\
    \        val aIndex = 0\n        val bIndex = 0\n        while(aIndex < aLen &&\
    \ bIndex < bLen) {\n            val aChar = aList(aIndex)\n            val bChar\
    \ = bList(bIndex)\n            if(aChar != bChar) {\n                result +=\
    \ aChar\n            }\n            aIndex += 1\n            bIndex += 1\n   \
    \     }\n        if(!aIndex == aLen) {\n            result += aList(aIndex)\n\
    \        }\n        if(!bIndex == bLen) {\n            result += bList(bIndex)\n\
    \        }\n        return result.toString", "        val aBits = a.toInt\n  \
    \      val bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val\
    \ xorBitsString = Integer.toString(xorBits)\n        val xorBitsStringWithZeros\
    \ = xorBitsString.padToLength(xorBitsString.length, \"0\")\n        val xorBitsStringWithZeros\
    \ = xorBitsStringWithZeros.substring(0, xorBitsStringWithZeros.length - 1)\n \
    \       xorBitsStringWithZeros", "        val aBits = a.toInt\n        val bBits\
    \ = b.toInt\n        val xorBits = aBits ^ bBits\n        val xorBitsString =\
    \ Integer.toBinaryString(xorBits)\n        val xorBitsStringWithoutZeros = xorBitsString.filter(_\
    \ != '0')\n        val xorBitsStringWithoutZeros = xorBitsStringWithoutZeros.reverse\n\
    \        xorBitsStringWithoutZeros.reverse", "        val aList = a.toList\n \
    \       val bList = b.toList\n        val result = new StringBuilder\n       \
    \ val xor = new mutable.HashMap[Int, Int]()\n        val xorResult = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResult2 = new mutable.HashMap[Int, Int]()\n        val\
    \ xorResult3 = new mutable.HashMap[Int, Int]()\n        val xorResult4 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResult5 = new mutable.HashMap[Int, Int]()\n        val\
    \ xorResult6 = new mutable.HashMap[Int, Int]()\n        val xorResult7 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResult8 = new mutable.HashMap[Int, Int]()\n        val\
    \ xorResult9 = new mutable.HashMap[Int, Int]()\n        val xorResult10 = new\
    \ mutable.HashMap[Int, Int]()\n        val xorResult11 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResult12 = new mutable.HashMap[Int, Int]()\n        val\
    \ xorResult13 = new mutable.HashMap[Int, Int]()\n        val xorResult14 = new\
    \ mutable.HashMap[Int, Int]()\n        val xorResult15 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResult16 = new mutable.HashMap[Int, Int]()\n        val\
    \ xorResult17 = new mutable.HashMap[Int, Int]()\n        val xorResult18 = new\
    \ mutable.HashMap[Int, Int]()\n        val xorResult19 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResult20 = new mutable.HashMap[Int, Int]()\n        val\
    \ xorResult21 = new mutable.HashMap[Int, Int]()\n        val xorResult22 = new\
    \ mutable.HashMap[Int, Int]()\n        val xorResult23 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResult24 = new mutable.HashMap[Int, Int]()\n        val\
    \ xorResult25 = new mutable.HashMap[Int, Int]()\n        val xorResult26 = new\
    \ mutable.HashMap[Int, Int]()\n        val xorResult27 = new mutable.HashMap[Int,\
    \ Int]()\n        val xorResult28 = new mutable.HashMap[Int, Int]()\n        val\
    \ xorResult29 = new mutable.HashMap[Int, Int]()\n        val xorResult30 = new\
    \ mutable.HashMap[In", "        val aArray = a.toCharArray.map(_.toInt)\n    \
    \    val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = ArrayBuffer.empty[Int]\n\
    \        val xorArray2 = ArrayBuffer.empty[Int]\n        val xorArray3 = ArrayBuffer.empty[Int]\n\
    \        val xorArray4 = ArrayBuffer.empty[Int]\n        val xorArray5 = ArrayBuffer.empty[Int]\n\
    \        val xorArray6 = ArrayBuffer.empty[Int]\n        val xorArray7 = ArrayBuffer.empty[Int]\n\
    \        val xorArray8 = ArrayBuffer.empty[Int]\n        val xorArray9 = ArrayBuffer.empty[Int]\n\
    \        val xorArray10 = ArrayBuffer.empty[Int]\n        val xorArray11 = ArrayBuffer.empty[Int]\n\
    \        val xorArray12 = ArrayBuffer.empty[Int]\n        val xorArray13 = ArrayBuffer.empty[Int]\n\
    \        val xorArray14 = ArrayBuffer.empty[Int]\n        val xorArray15 = ArrayBuffer.empty[Int]\n\
    \        val xorArray16 = ArrayBuffer.empty[Int]\n        val xorArray17 = ArrayBuffer.empty[Int]\n\
    \        val xorArray18 = ArrayBuffer.empty[Int]\n        val xorArray19 = ArrayBuffer.empty[Int]\n\
    \        val xorArray20 = ArrayBuffer.empty[Int]\n        val xorArray21 = ArrayBuffer.empty[Int]\n\
    \        val xorArray22 = ArrayBuffer.empty[Int]\n        val xorArray23 = ArrayBuffer.empty[Int]\n\
    \        val xorArray24 = ArrayBuffer.empty[Int]\n        val xorArray25 = ArrayBuffer.empty[Int]\n\
    \        val xorArray26 = ArrayBuffer.empty[Int]\n        val xorArray27 = ArrayBuffer.empty[Int]\n\
    \        val xorArray28 = ArrayBuffer.empty[Int]\n        val xorArray29 = ArrayBuffer.empty[Int]\n\
    \        val xorArray30 = ArrayBuffer.empty[Int]\n        val xorArray31 = ArrayBuffer.empty[Int]\n\
    \        val xorArray32 = ArrayBuffer.empty[Int]\n        val xorArray33 = ArrayBuffer.empty[Int]\n\
    \        val xorArray34 = ArrayBuffer.empty[Int]\n        val xorArray35 = ArrayBuffer.empty[Int]\n\
    \        val xorArray36 = ArrayBuffer.empty[Int]\n        val xorArray37 = ArrayBuffer.empty[Int]\n\
    \        val xorArray38 = ArrayBuffer.empty[Int]\n", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until aList.size) {\n            xorList += aList(i) xor bList(i)\n\
    \        }\n        xorList.toList.reverse.mkString", "        val aBits = a.toInt\n\
    \        val bBits = b.toInt\n        var result = \"\"\n        for(i <- 0 until\
    \ aBits.length)\n            result += ((aBits & (1 << i)) != (bBits & (1 << i))\
    \ ? \"1\" : \"0\")\n        result", "        val aBits = a.toInt\n        val\
    \ bBits = b.toInt\n        var result = \"\"\n        for(i <- 0 until aBits)\
    \ {\n            result += (if (aBits & (1 << i)) \"1\" else \"0\") + \"^\" +\
    \ (if (bBits & (1 << i)) \"1\" else \"0\") + \" = \" + (if (aBits & (1 << i))\
    \ \"1\" else \"0\") + \"^\" + (if (bBits & (1 << i)) \"1\" else \"0\") + \"\\\
    n\"\n        }\n        result", "        val aBits = a.toInt\n        val bBits\
    \ = b.toInt\n        val xorBits = aBits xor bBits\n        val xorBitsString\
    \ = Integer.toString(xorBits)\n        val xorBitsStringWithZeros = xorBitsString.padToLength(xorBitsString.length,\
    \ \"0\")\n        val xorBitsStringWithZeros = xorBitsStringWithZeros.substring(0,\
    \ xorBitsStringWithZeros.length - 1)\n        xorBitsStringWithZeros", "     \
    \   val aList = a.toList\n        val bList = b.toList\n        val result = new\
    \ StringBuilder\n        val xor = mutable.BitSet(b.length)\n        val xorResult\
    \ = mutable.BitSet(b.length)\n        val xorResult2 = mutable.BitSet(b.length)\n\
    \        val xorResult3 = mutable.BitSet(b.length)\n        val xorResult4 = mutable.BitSet(b.length)\n\
    \        val xorResult5 = mutable.BitSet(b.length)\n        val xorResult6 = mutable.BitSet(b.length)\n\
    \        val xorResult7 = mutable.BitSet(b.length)\n        val xorResult8 = mutable.BitSet(b.length)\n\
    \        val xorResult9 = mutable.BitSet(b.length)\n        val xorResult10 =\
    \ mutable.BitSet(b.length)\n        val xorResult11 = mutable.BitSet(b.length)\n\
    \        val xorResult12 = mutable.BitSet(b.length)\n        val xorResult13 =\
    \ mutable.BitSet(b.length)\n        val xorResult14 = mutable.BitSet(b.length)\n\
    \        val xorResult15 = mutable.BitSet(b.length)\n        val xorResult16 =\
    \ mutable.BitSet(b.length)\n        val xorResult17 = mutable.BitSet(b.length)\n\
    \        val xorResult18 = mutable.BitSet(b.length)\n        val xorResult19 =\
    \ mutable.BitSet(b.length)\n        val xorResult20 = mutable.BitSet(b.length)\n\
    \        val xorResult21 = mutable.BitSet(b.length)\n        val xorResult22 =\
    \ mutable.BitSet(b.length)\n        val xorResult23 = mutable.BitSet(b.length)\n\
    \        val xorResult24 = mutable.BitSet(b.length)\n        val xorResult25 =\
    \ mutable.BitSet(b.length)\n        val xorResult26 = mutable.BitSet(b.length)\n\
    \        val xorResult27 = mutable.BitSet(b.length)\n        val xorResult28 =\
    \ mutable.BitSet(b.length)\n        val xorResult29 = mutable.BitSet(b.length)\n\
    \        val xorResult30 = mutable.BitSet(b.length)\n        val xorResult31 =\
    \ mutable.BitSet(b.length)\n        val xorResult32 = mutable.BitSet(b.length)\n\
    \        val xorResult33 = mutable.BitSet(b.length)\n        val xorResult34 =\
    \ mutable.BitSet(b.length)\n        val xorResult35 = mutable.BitSet(b.length)\n\
    \        val xorResult36 = mutable.BitSet(b.length)\n        val xorResult37 =\
    \ mutable.BitSet(b.length)\n        val xorResult38 = mutable.Bit", "        val\
    \ aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits = aBits ^\
    \ bBits\n        val xorBitsString = Integer.toString(xorBits)\n        val xorBitsStringWithZeros\
    \ = xorBitsString.padToLength(xorBitsString.length, \"0\")\n        xorBitsStringWithZeros.reverse",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val result = xorBits.toBinaryString\n        return\
    \ result", "        val aList = a.toList\n        val bList = b.toList\n     \
    \   val xorList = mutable.ListBuffer.empty[String]\n        for(i <- 0 until aList.length)\n\
    \            for(j <- 0 until bList.length)\n                if(aList(i) == bList(j))\n\
    \                    xorList += aList(i)\n        xorList.toList.reverse.mkString(\"\
    \")", "        val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits\
    \ = aBits xor bBits\n        val xorBitsString = xorBits.toBinaryString\n    \
    \    val xorBitsStringLength = xorBitsString.length\n        val xorBitsStringWithZeros\
    \ = Array.fill(xorBitsStringLength)(0)\n        val xorBitsStringWithZerosString\
    \ = String.join(xorBitsStringWithZeros, \"\")\n        val xorBitsStringWithZerosLength\
    \ = xorBitsStringWithZeros.length\n        val xorBitsStringWithZerosWithZeros\
    \ = Array.fill(xorBitsStringWithZerosLength)(0)\n        val xorBitsStringWithZerosWithZerosString\
    \ = String.join(xorBitsStringWithZerosWithZeros, \"\")\n        val xorBitsStringWithZerosWithZerosLength\
    \ = xorBitsStringWithZerosWithZeros.length\n        val xorBitsStringWithZerosWithZerosWithZeros\
    \ = Array.fill(xorBitsStringWithZerosWithZerosLength)(0)\n        val xorBitsStringWithZerosWithZerosWithZerosString\
    \ = String.join(xorBitsStringWithZerosWithZerosWithZeros, \"\")\n        val xorBitsStringWithZerosWithZerosWithZerosLength\
    \ = xorBitsStringWithZerosWithZerosWithZeros.length\n        val xorBitsStringWithZerosWithZerosWithZerosWithZeros\
    \ = Array.fill(xorBitsStringWithZerosWithZerosWithZerosLength)(0)\n        val\
    \ xorBitsStringWithZerosWithZerosWithZerosWithZerosString = String.join(xorBitsStringWithZerosWithZerosWithZerosWithZeros,\
    \ \"\")\n        val xorBitsStringWithZerosWithZerosWithZerosWithZerosLength =\
    \ xorBitsStringWithZerosWithZerosWithZerosWithZeros.length\n        val xorBitsStringWithZerosWithZerosWithZerosWithZerosWithZeros\
    \ = Array.fill(xorBitsStringWithZerosWithZerosWithZerosWithZerosLength)(0)", " \
    \       val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits\
    \ = aBits xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n \
    \       val xorBitsStringWithZeros = xorBitsString.padToLength(xorBitsString.length,\
    \ \"0\")\n        val result = xorBitsStringWithZeros.substring(0, xorBitsStringWithZeros.length\
    \ - 1)\n        return result", "        val aArray = a.toCharArray\n        val\
    \ bArray = b.toCharArray\n        val xorArray = new Array[Char](a.length)\n \
    \       for(i <- 0 until xorArray.length)\n            xorArray(i) = aArray(i)\
    \ xor bArray(i)\n        new String(xorArray)", "        val aBits = a.toInt\n\
    \        val bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val\
    \ result = xorBits.toBinaryString\n        return result", "        val aList\
    \ = a.toList\n        val bList = b.toList\n        var result = \"\"\n      \
    \  var carry = 0\n        for(i <- 0 until aList.length){\n            val aChar\
    \ = aList(i)\n            val bChar = bList(i)\n            val aCharInt = aChar\
    \ match {\n                case '1' => 1\n                case '0' => 0\n    \
    \            case _ => throw new IllegalArgumentException(\"Invalid character\
    \ in string a: \" + aChar)\n            }\n            val bCharInt = bChar match\
    \ {\n                case '1' => 1\n                case '0' => 0\n          \
    \      case _ => throw new IllegalArgumentException(\"Invalid character in string\
    \ b: \" + bChar)\n            }\n            val aCharIntInt = aCharInt xor bCharInt\n\
    \            val aCharIntIntInt = aCharIntInt\n            val aCharIntIntIntInt\
    \ = aCharIntIntIntInt\n            val aCharIntIntIntIntInt = aCharIntIntIntIntIntInt\n\
    \            val aCharIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntInt\n   \
    \         val aCharIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntIntIntIntInt\n\
    \            val aCharIntIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n   \
    \     return xorBitsString", "        val aList = a.toList\n        val bList\
    \ = b.toList\n        var result = 0\n        for (i <- 0 until aList.length)\n\
    \            for (j <- 0 until bList.length)\n                result += (if (aList(i)\
    \ XOR bList(j) == 1) 1 else 0)\n        result XOR a.length", "        val aList\
    \ = a.toList\n        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[Int]\n\
    \        var i = 0\n        while (i < aList.size) {\n            xorList += (aList(i)\
    \ xor bList(i))\n            i += 1\n        }\n        xorList.toString.reverse",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        val result =\
    \ new StringBuilder\n        val xorBits = aBits xor bBits\n        val bits =\
    \ xorBits shr 8\n        val remainder = xorBits rem 8\n        result ++= bits\n\
    \        result ++= remainder\n        return result.toString", "        val aArray\
    \ = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val result = new mutable.StringBuilder\n        val xor = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xorResult = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val\
    \ xorResult2 = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult3\
    \ = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult4 = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xorResult5 = mutable.ArrayBuffer.fill(aArray.length)(0)\n       \
    \ val xorResult6 = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult7\
    \ = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult8 = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xorResult9 = mutable.ArrayBuffer.fill(aArray.length)(0)\n       \
    \ val xorResult10 = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult11\
    \ = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult12 = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xorResult13 = mutable.ArrayBuffer.fill(aArray.length)(0)\n      \
    \  val xorResult14 = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult15\
    \ = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult16 = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xorResult17 = mutable.ArrayBuffer.fill(aArray.length)(0)\n      \
    \  val xorResult18 = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult19\
    \ = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult20 = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xorResult21 = mutable.ArrayBuffer.fill(aArray.length)(0)\n      \
    \  val xorResult22 = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult23\
    \ = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult24 = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xorResult25 = mutable.ArrayBuffer.fill(aArray.length)(0)\n      \
    \  val xorResult26 = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult27\
    \ = mutable.ArrayBuffer.fill(aArray.length)(0)\n        val xorResult28 = mutable.ArrayBuffer.fill",
  "        val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer.empty[String]\n        aList.zip(\n            bList.zip(\n\
    \                aList.map(x => x ^ bList(0))\n            )\n        ).foreach(x\
    \ => xorList += x._2)\n        xorList.toList.reverse.mkString(\"\")", "     \
    \   val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits = aBits\
    \ xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n        val\
    \ xorBitsStringLength = xorBitsString.length\n        val xorBitsStringBuilder\
    \ = new StringBuilder(xorBitsStringLength)\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.insert(0, xorBitsString)\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.insert(0, xorBitsString.substring(0, xorBitsStringLength\
    \ - 1))\n        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.insert(0,\
    \ xorBitsString.substring(0, xorBitsStringLength - 1))\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.insert(0, xorBitsString.substring(0, xorBitsStringLength\
    \ - 1))\n        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.insert(0,\
    \ xorBitsString.substring(0, xorBitsStringLength - 1))\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.insert(0, xorBitsString.substring(0, xorBitsStringLength\
    \ - 1))\n        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.insert(0,\
    \ xorBitsString.substring(0, xorBitsStringLength - 1))\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.insert(0, xorBitsString.substring(0, xorBitsStringLength\
    \ - 1))\n        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.insert(0,\
    \ xorBitsString.substring(0, xorBitsStringLength - 1))\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.insert(0, xorBitsString.substring(0, xorBitsStringLength\
    \ - 1))\n        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.insert(0,\
    \ xorBitsString.substring(0, xorBitsStringLength - 1))\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.insert(0, xorBitsString.substring(0, xorBitsStringLength\
    \ - 1))\n        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.insert(0,\
    \ xorBitsString.substring(0, xorBitsStringLength - 1))\n        xorBitsStringBuilder.reverse()\n\
    \        xorBitsStringBuilder.insert(0, xorBitsString.substring(0, xorBitsStringLength\
    \ - 1))\n        xorBitsStringBuilder.reverse()\n        xor", "        val aList\
    \ = a.toList\n        val bList = b.toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        val xor = mutable.ListBuffer[Int]()\n        var i = 0\n        while(i\
    \ < aList.size) {\n            xor.append(aList(i) xor bList(i))\n           \
    \ i += 1\n        }\n        while(i < aList.size) {\n            result.append(xor.remove(0))\n\
    \            i += 1\n        }\n        result.toString", "        val aArray\
    \ = a.toCharArray\n        val bArray = b.toCharArray\n        val xorArray =\
    \ new Array[Char](a.length)\n        for(i <- 0 until xorArray.length) xorArray(i)\
    \ = aArray(i) xor bArray(i)\n        new String(xorArray)", "        val aArray\
    \ = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = ArrayBuffer.empty[Int]\n        for(i <- 0 until aArray.length)\
    \ xorArray += (aArray(i) xor bArray(i))\n        xorArray.toString.toCharArray",
  "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = mutable.ArrayBuffer.empty[Int]\n        for(i <- 0 until\
    \ a.length) xorArray += (aArray(i) xor bArray(i))\n        xorArray.toString.reverse",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val xorBitsString = xorBits.toBinaryString\n      \
    \  val xorBitsStringLength = xorBitsString.length\n        val xorBitsStringBuilder\
    \ = new StringBuilder(xorBitsStringLength)\n        for(i <- 0 until xorBitsStringLength)\
    \ {\n            xorBitsStringBuilder.append(xorBitsString(i))\n        }\n  \
    \      xorBitsStringBuilder.reverse", "        val aBits = a.toInt\n        val\
    \ bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val result =\
    \ xorBits.toBinaryString\n        return result", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val result = new mutable.StringBuilder\n\
    \        val xorResult = mutable.ArrayBuffer.empty[Int]\n        var i = 0\n \
    \       while (i < a.length && i < b.length) {\n            xorResult += (aArray(i)\
    \ xor bArray(i))\n            i += 1\n        }\n        result.append((xorResult.toList.reverse.mkString))\n\
    \        return result.toString", "        val aList = a.toList\n        val bList\
    \ = b.toList\n        val result = new mutable.ListBuffer[String]()\n        var\
    \ carry = 0\n        var i = 0\n        while (i < aList.size) {\n           \
    \ val aChar = aList(i)\n            val bChar = bList(i)\n            val aInt\
    \ = aChar match {\n                case '1' => 1\n                case '0' =>\
    \ 0\n                case _ => throw new IllegalArgumentException(\"Invalid input\"\
    )\n            }\n            val bInt = bChar match {\n                case '1'\
    \ => 1\n                case '0' => 0\n                case _ => throw new IllegalArgumentException(\"\
    Invalid input\")\n            }\n            val aInt2 = aInt XOR bInt\n     \
    \       val aInt3 = aInt2 XOR carry\n            val aInt4 = aInt3 XOR carry\n\
    \            val aInt5 = aInt4 XOR carry\n            val aInt6 = aInt5 XOR carry\n\
    \            val aInt7 = aInt6 XOR carry\n            val aInt8 = aInt7 XOR carry\n\
    \            val aInt9 = aInt8 XOR carry\n            val aInt10 = aInt9 XOR carry\n\
    \            val aInt11 = aInt10 XOR carry\n            val aInt12 = aInt11 XOR\
    \ carry\n            val aInt13 = aInt12 XOR carry\n            val aInt14 = aInt13\
    \ XOR carry\n            val aInt15 = aInt14 XOR carry\n            val aInt16\
    \ = aInt15 XOR carry\n            val aInt17 = aInt16 XOR carry\n            val\
    \ aInt18 = aInt17 XOR carry\n            val aInt19 = aInt18 XOR carry\n     \
    \       val aInt20 = aInt19 XOR carry\n            val aInt21 = aInt20 XOR carry\n\
    \            val aInt22 = aInt21 XOR carry\n            val aInt23 = aInt22 XOR\
    \ carry\n            val aInt24 = aInt23 XOR carry\n            val aInt25 = aInt24\
    \ XOR carry\n            val aInt26 = aInt25 XOR carry\n            val aInt27\
    \ = aInt26 XOR carry\n            val aInt28 = aInt27 XOR carry\n            val\
    \ aInt29 = aInt28 XOR carry\n            val aInt30 = aInt29 XOR carry\n     \
    \       val aInt31 = aInt30 XOR carry\n            val aInt32 = aInt31 XOR carry\n\
    \            val aInt33 = aInt32 XOR carry\n", "        val aBits = a.toInt\n\
    \        val bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val\
    \ xorBitsString = Integer.toString(xorBits)\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsString.padToLength(xorBitsString.length, \"0\")\n        val result\
    \ = xorBitsStringWithLeadingZeros + \"0\"\n        result", "        val aBits\
    \ = a.toInt\n        val bBits = b.toInt\n        val xorBits = aBits xor bBits\n\
    \        val result = xorBits.toBinaryString\n        return result", "      \
    \  val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits = aBits\
    \ xor bBits\n        val xorBitsString = Integer.toBinaryString(xorBits)\n   \
    \     val xorBitsStringWithoutLeadingZeros = xorBitsString.substring(1,xorBitsString.length)\n\
    \        val xorBitsStringWithoutLeadingZeros = xorBitsStringWithoutLeadingZeros.reverse\n\
    \        xorBitsStringWithoutLeadingZeros", "        val aBits = a.toInt\n   \
    \     val bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val\
    \ result = xorBits.toBinaryString\n        return result", "        val aBits\
    \ = a.toInt\n        val bBits = b.toInt\n        val xorBits = aBits xor bBits\n\
    \        val xorBitsString = Integer.toString(xorBits)\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsString.padToLength(xorBitsString.length, \"0\")\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsStringWithLeadingZeros.reverse\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsStringWithLeadingZeros.reverse\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsStringWithLeadingZeros.reverse\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsStringWithLeadingZeros.reverse\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsStringWithLeadingZeros.reverse\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsStringWithLeadingZeros.reverse\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsStringWithLeadingZeros.reverse\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsStringWithLeadingZeros.reverse\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsStringWithLeadingZeros.reverse\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsStringWithLeadingZeros.reverse\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsStringWithLeadingZeros.reverse\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsStringWithLeadingZeros.reverse\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsStringWithLeadingZeros.reverse\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsStringWithLeadingZeros.reverse\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsStringWithLeadingZeros.reverse\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsStringWithLeadingZeros.reverse\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsStringWithLeadingZeros.reverse\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsStringWithLeadingZeros.reverse\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsStringWithLeadingZeros.reverse\n        val xorBit", "        val aList\
    \ = a.toList\n        val bList = b.toList\n        val result = new mutable.ListBuffer[String]()\n\
    \        var carry = 0\n        for (i <- 0 until aList.size) {\n            val\
    \ aChar = aList(i)\n            val bChar = bList(i)\n            val aCharInt\
    \ = aChar.toInt\n            val bCharInt = bChar.toInt\n            val aCharIntInt\
    \ = aCharInt.toInt\n            val bCharIntInt = bCharInt.toInt\n           \
    \ val aCharIntIntInt = aCharIntInt.toInt\n            val bCharIntIntInt = bCharIntInt.toInt\n\
    \            val aCharIntIntIntInt = aCharIntIntInt.toInt\n            val bCharIntIntIntInt\
    \ = bCharIntIntInt.toInt\n            val aCharIntIntIntIntInt = aCharIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntInt = bCharIntIntIntInt.toInt\n            val\
    \ aCharIntIntIntIntIntInt = aCharIntIntIntIntInt.toInt\n            val bCharIntIntIntIntIntInt\
    \ = bCharIntIntIntIntInt.toInt\n            val aCharIntIntIntIntIntIntInt = aCharIntIntIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntIntIntInt = bCharIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntIntIntIntIntIntInt = aCharIntInt",
  "        val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer.empty[String]\n        for(i <- 0 until aList.size) {\n\
    \            xorList += ((aList(i) xor bList(i)).toString + aList(i))\n      \
    \  }\n        xorList.toList.reverse.mkString(\"\")", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[Int]\n\
    \        var i = 0\n        while (i < aList.size) {\n            xorList += (aList(i)\
    \ xor bList(i))\n            i += 1\n        }\n        xorList.toString.reverse",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n   \
    \     val xorBitsStringWithZeros = xorBitsString.padToLength(xorBitsString.length,\
    \ \"0\")\n        xorBitsStringWithZeros", "        val aList = a.toList\n   \
    \     val bList = b.toList\n        val result = aList.zip(bList).map(x => x._1\
    \ ^ x._2).mkString\n        result", "        val aBits = a.toIntArray\n     \
    \   val bBits = b.toIntArray\n        val xorBits = Array[Int]()\n        val\
    \ xorResult = Array[Int]()\n        val aLen = aBits.length\n        val bLen\
    \ = bBits.length\n        val aLenInt = aLen.toInt\n        val bLenInt = bLen.toInt\n\
    \        val aLenBits = aLen.toBinaryString\n        val bLenBits = bLen.toBinaryString\n\
    \        val xorLen = (aLen + bLen).toBinaryString\n        val xorLenInt = xorLen.toInt\n\
    \        val xorLenBits = xorLen.toBinaryString\n        val xorResultLen = (aLen\
    \ + bLen).toBinaryString\n        val xorResultLenInt = xorResultLen.toInt\n \
    \       val xorResultLenBits = xorResultLen.toBinaryString\n        val xorBitsLen\
    \ = (aLen + bLen).toBinaryString\n        val xorBitsLenInt = xorBitsLen.toInt\n\
    \        val xorBitsLenBits = xorBitsLen.toBinaryString\n        val xorBitsResultLen\
    \ = (aLen + bLen).toBinaryString\n        val xorBitsResultLenInt = xorBitsResultLen.toInt\n\
    \        val xorBitsResultLenBits = xorBitsResultLen.toBinaryString\n        val\
    \ xorBitsResult = (aLen + bLen).toBinaryString\n        val xorBitsResultInt =\
    \ xorBitsResult.toInt\n        val xorBitsResultBits = xorBitsResult.toBinaryString\n\
    \        val xorBitsResultLen = (aLen + bLen).toBinaryString\n        val xorBitsResultLenInt\
    \ = xorBitsResultLen.toInt\n        val xorBitsResultLenBits = xorBitsResultLen.toBinaryString\n\
    \        val xorBitsResult = (aLen + bLen).toBinaryString\n        val xorBitsResultInt\
    \ = xorBitsResult.toInt\n        val xorBitsResultBits = xorBitsResult.toBinaryString\n\
    \        val xorBitsResultLen = (aLen + bLen).toBinaryString\n        val xorBitsResultLenInt\
    \ = xorBitsResultLen.toInt\n        val xorBitsResultLenBits = xorBitsResultLen.toBinaryString\n\
    \        val xorBitsResult = (aLen + bLen).toBinaryString\n        val xorBitsResultInt\
    \ = xorBitsResult.toInt\n        val xorBitsResultBits = xorBit", "        val\
    \ aArray = a.toCharArray\n        val bArray = b.toCharArray\n        val result\
    \ = new StringBuilder\n        val xor = new mutable.HashSet[Int]()\n        val\
    \ xorArray = new mutable.ArrayBuilder[Int]()\n        val xorArray2 = new mutable.ArrayBuilder[Int]()\n\
    \        val xorArray3 = new mutable.ArrayBuilder[Int]()\n        val xorArray4\
    \ = new mutable.ArrayBuilder[Int]()\n        val xorArray5 = new mutable.ArrayBuilder[Int]()\n\
    \        val xorArray6 = new mutable.ArrayBuilder[Int]()\n        val xorArray7\
    \ = new mutable.ArrayBuilder[Int]()\n        val xorArray8 = new mutable.ArrayBuilder[Int]()\n\
    \        val xorArray9 = new mutable.ArrayBuilder[Int]()\n        val xorArray10\
    \ = new mutable.ArrayBuilder[Int]()\n        val xorArray11 = new mutable.ArrayBuilder[Int]()\n\
    \        val xorArray12 = new mutable.ArrayBuilder[Int]()\n        val xorArray13\
    \ = new mutable.ArrayBuilder[Int]()\n        val xorArray14 = new mutable.ArrayBuilder[Int]()\n\
    \        val xorArray15 = new mutable.ArrayBuilder[Int]()\n        val xorArray16\
    \ = new mutable.ArrayBuilder[Int]()\n        val xorArray17 = new mutable.ArrayBuilder[Int]()\n\
    \        val xorArray18 = new mutable.ArrayBuilder[Int]()\n        val xorArray19\
    \ = new mutable.ArrayBuilder[Int]()\n        val xorArray20 = new mutable.ArrayBuilder[Int]()\n\
    \        val xorArray21 = new mutable.ArrayBuilder[Int]()\n        val xorArray22\
    \ = new mutable.ArrayBuilder[Int]()\n        val xorArray23 = new mutable.ArrayBuilder[Int]()\n\
    \        val xorArray24 = new mutable.ArrayBuilder[Int]()\n        val xorArray25\
    \ = new mutable.ArrayBuilder[Int]()\n        val xorArray26 = new mutable.ArrayBuilder[Int]()\n\
    \        val xorArray27 = new mutable.ArrayBuilder[Int]()\n        val xorArray28\
    \ = new mutable.ArrayBuilder[Int]()\n        val xorArray29 = new mutable.ArrayBuilder[Int]()\n\
    \        val xorArray30 = new mutable.ArrayBuilder[Int]()\n        val xorArray31\
    \ = new mutable.ArrayBuilder[Int]()\n        val xorArray32 = new ", "       \
    \ val aList = a.toList\n        val bList = b.toList\n        var result = \"\"\
    \n        val length = aList.length\n        val length2 = bList.length\n    \
    \    val maxLength = Math.max(length, length2)\n        val aSet = scala.collection.mutable.Set[Int]()\n\
    \        val bSet = scala.collection.mutable.Set[Int]()\n        var i = 0\n \
    \       var j = 0\n        while (i < maxLength) {\n            if (aList(i) ==\
    \ bList(j)) {\n                aSet += aList(i)\n                bSet += bList(j)\n\
    \                i += 1\n                j += 1\n            } else if (aList(i)\
    \ != bList(j)) {\n                result += aList(i)\n                i += 1\n\
    \            } else {\n                result += bList(j)\n                j +=\
    \ 1\n            }\n        }\n        result += aList.last\n        result +=\
    \ bList.last\n        result", "        val aList = a.toList\n        val bList\
    \ = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n       \
    \ var xor = 0\n        for (i <- 0 until aList.size) {\n            xor = xor\
    \ + aList(i) xor bList(i)\n        }\n        xorList.add(xor.toString.reverse)\n\
    \        xorList.toString", "        val aArray = a.toCharArray\n        val bArray\
    \ = b.toCharArray\n        val xorArray = new Array[Int](a.length)\n        var\
    \ xor = 0\n        var i = 0\n        while (i < xorArray.length) {\n        \
    \    xor = xor + aArray(i) xor bArray(i)\n            i += 1\n        }\n    \
    \    xor.toString", "        val aBits = a.toIntArray\n        val bBits = b.toIntArray\n\
    \        val xorBits = aBits XOR bBits\n        val xorBitsString = xorBits.map(_\
    \ + 48).map(_.toString).mkString(\"\")\n        xorBitsString", "        val aBits\
    \ = a.toInt\n        val bBits = b.toInt\n        var result = \"\"\n        var\
    \ carry = 0\n        for (i <- 0 until aBits) {\n            val aBit = aBits\
    \ - i\n            val bBit = bBits - i\n            val aBitMask = aBit - 1\n\
    \            val bBitMask = bBit - 1\n            val aBitValue = aBits & aBitMask\n\
    \            val bBitValue = bBits & bBitMask\n            val aBitResult = aBitValue\
    \ ^ bBitValue\n            val bBitResult = bBitValue ^ aBitValue\n          \
    \  val aBitResultMask = aBitResult - 1\n            val bBitResultMask = bBitResult\
    \ - 1\n            val aBitResultValue = aBitResult & aBitResultMask\n       \
    \     val bBitResultValue = bBitResult & bBitResultMask\n            val aBitResultValueMask\
    \ = aBitResultValue - 1\n            val bBitResultValueMask = bBitResultValue\
    \ - 1\n            val aBitResultValueValue = aBitResultValue & aBitResultValueMask\n\
    \            val bBitResultValueValue = bBitResultValue & bBitResultValueMask\n\
    \            val aBitResultValueValueMask = aBitResultValueValue - 1\n       \
    \     val bBitResultValueValueMask = bBitResultValueValue - 1\n            val\
    \ aBitResultValueValueValue = aBitResultValueValue & aBitResultValueValueMask\n\
    \            val bBitResultValueValueValue = bBitResultValueValue & bBitResultValueValueMask\n\
    \            val aBitResultValueValueValueMask = aBitResultValueValueValue - 1\n\
    \            val bBitResultValueValueValueMask = bBitResultValueValueValue - 1\n\
    \            val aBitResultValueValueValueValue = aBitResultValueValueValue &\
    \ aBitResultValueValueValueMask\n            val bBitResultValueValueValueValue\
    \ = bBitResultValueValueValue & bBitResultValueValueValueMask\n            val\
    \ aBitResultValueValueValueValueMask = aBitResultValueValueValueValue - 1\n  \
    \          val bBitResultValueValueValueValueMask = bBitResultValueValueValueValue\
    \ - 1\n            val aBitResultValueValueValueValueValue = aBitResultValueValueValueValueValue\
    \ & aBitResultValueValueValueValueValueMask\n            val bBitResultValueValueValueValueValue\
    \ = bBitResultValueValueValueValueValue & bBitResultValueValueValueValueValueMask\n\
    \            val aBitResultValueValueValueValueValueMask = aBitResultValueValueValueValueValueValue\
    \ - 1\n            val bBitResult", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 0 until aArray.length) xorArray += (aArray(i) xor bArray(i))\n\
    \        xorArray.toString.reverse", "        val aList = a.toList\n        val\
    \ bList = b.toList\n        val result = new mutable.ListBuffer[String]()\n  \
    \      var carry = 0\n        for(i <- 0 until aList.length){\n            val\
    \ aChar = aList(i)\n            val bChar = bList(i)\n            val aCharInt\
    \ = aChar match {\n                case '1' => 1\n                case '0' =>\
    \ 0\n                case _ => throw new IllegalArgumentException(\"Invalid character\
    \ in string \" + aChar)\n            }\n            val bCharInt = bChar match\
    \ {\n                case '1' => 1\n                case '0' => 0\n          \
    \      case _ => throw new IllegalArgumentException(\"Invalid character in string\
    \ \" + bChar)\n            }\n            val aCharInt = aCharInt xor bCharInt\n\
    \            val aCharChar = aCharInt match {\n                case 1 => '1'\n\
    \                case 0 => '0'\n                case _ => throw new IllegalArgumentException(\"\
    Invalid character in string \" + aChar)\n            }\n            val bCharChar\
    \ = bCharInt match {\n                case 1 => '1'\n                case 0 =>\
    \ '0'\n                case _ => throw new IllegalArgumentException(\"Invalid\
    \ character in string \" + bChar)\n            }\n            val aCharCharInt\
    \ = aCharChar match {\n                case '1' => 1\n                case '0'\
    \ => 0\n                case _ => throw new IllegalArgumentException(\"Invalid\
    \ character in string \" + aChar)\n            }\n            val bCharCharInt\
    \ = bCharChar match {\n                case '1' => 1\n                case '0'\
    \ => 0\n                case _ => throw new IllegalArgumentException(\"Invalid\
    \ character in string \" + bChar)\n            }\n            val aCharCharChar\
    \ = aCharCharInt xor bCharCharInt\n            val aCharCharCharChar = aCharCharChar\
    \ match {\n                case '1' => 1\n                case '0' => 0\n    \
    \            case _ => throw new IllegalArgumentException(\"Invalid character\
    \ in string \" + aChar)\n            }\n            val bCharCharCharInt = bCharCharInt\
    \ match {\n                case 1 => 1\n                case 0 => 0\n        \
    \        case _ => throw new IllegalArgumentException(\"Invalid character in string\
    \ \" + bChar)\n            }\n            val aCharCharCharChar = bCharCharChar\
    \ match {\n                case '1' => 1\n                case '0' => 0\n    \
    \            case _ => throw new IllegalArgumentException(\"Invalid character\
    \ in string \" + aChar)\n            }\n            val aCharCharCharCharChar\
    \ = aCharCharCharCharInt xor bCharCharCharCharInt\n            val aCharCharCharCharCharChar\
    \ = aCharCharCharCharCh", "        val aList = a.toList\n        val bList = b.toList\n\
    \        var result = \"\"\n        var carry = 0\n        var i = 0\n       \
    \ while (i < aList.size) {\n            val aChar = aList(i)\n            val\
    \ bChar = bList(i)\n            val aCharInt = aChar.toInt\n            val bCharInt\
    \ = bChar.toInt\n            val aCharIntInt = aCharInt.toInt\n            val\
    \ bCharIntInt = bCharInt.toInt\n            val aCharIntIntInt = aCharIntInt.toInt\n\
    \            val bCharIntIntInt = bCharIntInt.toInt\n            val aCharIntIntIntInt\
    \ = aCharIntIntInt.toInt\n            val bCharIntIntIntInt = bCharIntIntInt.toInt\n\
    \            val aCharIntIntIntIntInt = aCharIntIntIntInt.toInt\n            val\
    \ bCharIntIntIntIntInt = bCharIntIntIntInt.toInt\n            val aCharIntIntIntIntIntInt\
    \ = aCharIntIntIntIntInt.toInt\n            val bCharIntIntIntIntIntInt = bCharIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntInt = aCharIntIntIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntIntIntIntInt",
  "        val aList = a.toList\n        val bList = b.toList\n        var result\
    \ = 0\n        var carry = 0\n        var i = 0\n        while (i < aList.size)\
    \ {\n            val aChar = aList(i)\n            val bChar = bList(i)\n    \
    \        val aCharInt = aChar.toInt\n            val bCharInt = bChar.toInt\n\
    \            val aCharIntInt = aCharInt.toInt\n            val bCharIntInt = bCharInt.toInt\n\
    \            val aCharIntIntInt = aCharIntInt.toInt\n            val bCharIntIntInt\
    \ = bCharIntInt.toInt\n            val aCharIntIntIntInt = aCharIntIntInt.toInt\n\
    \            val bCharIntIntIntInt = bCharIntIntInt.toInt\n            val aCharIntIntIntIntInt\
    \ = aCharIntIntIntInt.toInt\n            val bCharIntIntIntIntInt = bCharIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntInt = aCharIntIntIntIntInt.toInt\n      \
    \      val bCharIntIntIntIntIntInt = bCharIntIntIntIntInt.toInt\n            val\
    \ aCharIntIntIntIntIntIntInt = aCharIntIntIntIntIntInt.toInt\n            val\
    \ bCharIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntInt.toInt\n            val\
    \ aCharIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntInt.toInt\n         \
    \   val bCharIntIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntIntIntIntInt",
  "        val aBits = a.toIntArray\n        val bBits = b.toIntArray\n        val\
    \ xorBits = aBits XOR bBits\n        val xorBitsString = xorBits.map(bit => if\
    \ (bit == 1) \"1\" else \"0\").mkString\n        xorBitsString", "        val\
    \ aList = a.toList\n        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        var i = 0\n        while (i < aList.size) {\n            xorList += aList(i)\
    \ XOR bList(i)\n            i += 1\n        }\n        xorList.toString.reverse",
  "        val aList = a.toList\n        val bList = b.toList\n        val result\
    \ = new StringBuilder\n        var carry = 0\n        for (i <- 0 until aList.size)\
    \ {\n            val aChar = aList(i)\n            val bChar = bList(i)\n    \
    \        val xor = aChar xor bChar\n            val newCarry = xor and carry\n\
    \            carry = newCarry\n            result.append(newCarry)\n        }\n\
    \        carry match {\n            case 0 => result.toString\n            case\
    \ _ => result.toString + \"1\"\n        }", "        val aList = a.toList\n  \
    \      val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until aList.length){\n            xorList += aList(i) xor\
    \ bList(i)\n        }\n        xorList.toList.toString", "        val aList =\
    \ a.toList\n        val bList = b.toList\n        val result = new StringBuilder\n\
    \        var carry = 0\n        var i = 0\n        while (i < aList.size) {\n\
    \            val aChar = aList(i)\n            val bChar = bList(i)\n        \
    \    val aCharInt = aChar.toInt\n            val bCharInt = bChar.toInt\n    \
    \        val aCharIntInt = aCharInt.toInt\n            val bCharIntInt = bCharInt.toInt\n\
    \            val aCharIntIntInt = aCharIntInt.toInt\n            val bCharIntIntInt\
    \ = bCharIntInt.toInt\n            val aCharIntIntIntInt = aCharIntIntInt.toInt\n\
    \            val bCharIntIntIntInt = bCharIntIntInt.toInt\n            val aCharIntIntIntIntInt\
    \ = aCharIntIntIntInt.toInt\n            val bCharIntIntIntIntInt = bCharIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntInt = aCharIntIntIntIntInt.toInt\n      \
    \      val bCharIntIntIntIntIntInt = bCharIntIntIntIntInt.toInt\n            val\
    \ aCharIntIntIntIntIntIntInt = aCharIntIntIntIntIntInt.toInt\n            val\
    \ bCharIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntInt.toInt\n            val\
    \ aCharIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntInt.toInt\n      \
    \      val bCharIntIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntInt",
  "        val aBits = a.toIntArray\n        val bBits = b.toIntArray\n        val\
    \ result = new mutable.StringBuilder\n        var carry = 0\n        var i = 0\n\
    \        while (i < a.length) {\n            val aBit = aBits(i)\n           \
    \ val bBit = bBits(i)\n            val xor = (aBit xor bBit) xor carry\n     \
    \       carry = xor shr 1\n            result.append(xor and 255)\n          \
    \  i += 1\n        }\n        result.toString", "        val aArray = a.toCharArray\n\
    \        val bArray = b.toCharArray\n        val result = new StringBuilder\n\
    \        var i = 0\n        while (i < a.length) {\n            result.append(aArray(i)\
    \ ^ bArray(i))\n            i += 1\n        }\n        return result.toString",
  "        val aBits = a.toIntArray\n        val bBits = b.toIntArray\n        val\
    \ xorBits = Array.ofDim[Int](aBits.length)\n        var i = 0\n        while (i\
    \ < xorBits.length) {\n            xorBits(i) = aBits(i) xor bBits(i)\n      \
    \      i += 1\n        }\n        xorBits.toString.reverse", "        val aList\
    \ = a.toList\n        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        aList.zip(bList).foreach { case (aChar, bChar) =>\n            xorList\
    \ += aChar ^ bChar\n        }\n        xorList.toList.toString", "        val\
    \ aList = a.toList\n        val bList = b.toList\n        val result = new StringBuilder\n\
    \        val xor = mutable.ListBuffer[Int]()\n        val xorResult = mutable.ListBuffer[Int]()\n\
    \        val xorResultCount = mutable.ListBuffer[Int]()\n        val xorResultCount2\
    \ = mutable.ListBuffer[Int]()\n        val xorResultCount3 = mutable.ListBuffer[Int]()\n\
    \        val xorResultCount4 = mutable.ListBuffer[Int]()\n        val xorResultCount5\
    \ = mutable.ListBuffer[Int]()\n        val xorResultCount6 = mutable.ListBuffer[Int]()\n\
    \        val xorResultCount7 = mutable.ListBuffer[Int]()\n        val xorResultCount8\
    \ = mutable.ListBuffer[Int]()\n        val xorResultCount9 = mutable.ListBuffer[Int]()\n\
    \        val xorResultCount10 = mutable.ListBuffer[Int]()\n        val xorResultCount11\
    \ = mutable.ListBuffer[Int]()\n        val xorResultCount12 = mutable.ListBuffer[Int]()\n\
    \        val xorResultCount13 = mutable.ListBuffer[Int]()\n        val xorResultCount14\
    \ = mutable.ListBuffer[Int]()\n        val xorResultCount15 = mutable.ListBuffer[Int]()\n\
    \        val xorResultCount16 = mutable.ListBuffer[Int]()\n        val xorResultCount17\
    \ = mutable.ListBuffer[Int]()\n        val xorResultCount18 = mutable.ListBuffer[Int]()\n\
    \        val xorResultCount19 = mutable.ListBuffer[Int]()\n        val xorResultCount20\
    \ = mutable.ListBuffer[Int]()\n        val xorResultCount21 = mutable.ListBuffer[Int]()\n\
    \        val xorResultCount22 = mutable.ListBuffer[Int]()\n        val xorResultCount23\
    \ = mutable.ListBuffer[Int]()\n        val xorResultCount24 = mutable.ListBuffer[Int]()\n\
    \        val xorResultCount25 = mutable.ListBuffer[Int]()\n        val xorResultCount26\
    \ = mutable.ListBuffer[Int]()\n        val xorResultCount27 = mutable.ListBuffer[Int]()\n\
    \        val xorResultCount28 = mutable.ListBuffer[Int]()\n        val xorResultCount29\
    \ = mutable.ListBuffer[Int]()\n        val xorResultCount30 = mutable.ListBuffer",
  "        val aList = a.toList\n        val bList = b.toList\n        val result\
    \ = aList.foldLeft(\"\") { (result, x) =>\n            val y = bList.find(_ ==\
    \ x)\n            result + (if (y == None) 0 else 1)\n        }\n        result",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n   \
    \     val xorBitsStringWithZeros = xorBitsString.padToLength(xorBitsString.length,\
    \ \"0\")\n        val result = xorBitsStringWithZeros.padToLength(xorBitsStringWithZeros.length,\
    \ \"0\")\n        result", "        val aBits = a.toInt\n        val bBits = b.toInt\n\
    \        var result = \"\"\n        var carry = 0\n        for(i <- 0 until aBits.length){\n\
    \            val aBit = aBits(i)\n            val bBit = bBits(i)\n          \
    \  val aBitVal = aBit + carry\n            val bBitVal = bBit + carry\n      \
    \      val aBitValInt = aBitVal % 2\n            val bBitValInt = bBitVal % 2\n\
    \            val aBitValString = aBitValInt.toString\n            val bBitValString\
    \ = bBitValInt.toString\n            val aBitValStringWithCarry = aBitValString\
    \ + aBitValString + aBitValString\n            val bBitValStringWithCarry = bBitValString\
    \ + bBitValString + bBitValString\n            val aBitValStringWithCarryInt =\
    \ aBitValStringWithCarry.toInt\n            val bBitValStringWithCarryInt = bBitValStringWithCarry.toInt\n\
    \            val aBitValStringWithCarryString = aBitValStringWithCarryInt.toString\n\
    \            val bBitValStringWithCarryString = bBitValStringWithCarryInt.toString\n\
    \            val aBitValStringWithCarryStringWithCarry = aBitValStringWithCarryString\
    \ + aBitValStringWithCarryString + aBitValStringWithCarryString\n            val\
    \ bBitValStringWithCarryStringWithCarry = bBitValStringWithCarryString + bBitValStringWithCarryString\
    \ + bBitValStringWithCarryString\n            val aBitValStringWithCarryStringWithCarryInt\
    \ = aBitValStringWithCarryStringWithCarry.toInt\n            val bBitValStringWithCarryStringWithCarryInt\
    \ = bBitValStringWithCarryStringWithCarry.toInt\n            val aBitValStringWithCarryStringWithCarryString\
    \ = aBitValStringWithCarryStringWithCarryInt.toString\n            val bBitValStringWithCarryStringWithCarryString\
    \ = bBitValStringWithCarryStringWithCarryInt.toString\n            val aBitValStringWithCarryStringWithCarryStringWithCarry\
    \ = a", "        val aList = a.toList\n        val bList = b.toList\n        val\
    \ xorList = mutable.ListBuffer[String]()\n        val xor = mutable.ListBuffer[String]()\n\
    \        val xorResult = mutable.ListBuffer[String]()\n        val xorResultString\
    \ = mutable.ListBuffer[String]()\n        val xorResultString2 = mutable.ListBuffer[String]()\n\
    \        val xorResultString3 = mutable.ListBuffer[String]()\n        val xorResultString4\
    \ = mutable.ListBuffer[String]()\n        val xorResultString5 = mutable.ListBuffer[String]()\n\
    \        val xorResultString6 = mutable.ListBuffer[String]()\n        val xorResultString7\
    \ = mutable.ListBuffer[String]()\n        val xorResultString8 = mutable.ListBuffer[String]()\n\
    \        val xorResultString9 = mutable.ListBuffer[String]()\n        val xorResultString10\
    \ = mutable.ListBuffer[String]()\n        val xorResultString11 = mutable.ListBuffer[String]()\n\
    \        val xorResultString12 = mutable.ListBuffer[String]()\n        val xorResultString13\
    \ = mutable.ListBuffer[String]()\n        val xorResultString14 = mutable.ListBuffer[String]()\n\
    \        val xorResultString15 = mutable.ListBuffer[String]()\n        val xorResultString16\
    \ = mutable.ListBuffer[String]()\n        val xorResultString17 = mutable.ListBuffer[String]()\n\
    \        val xorResultString18 = mutable.ListBuffer[String]()\n        val xorResultString19\
    \ = mutable.ListBuffer[String]()\n        val xorResultString20 = mutable.ListBuffer[String]()\n\
    \        val xorResultString21 = mutable.ListBuffer[String]()\n        val xorResultString22\
    \ = mutable.ListBuffer[String]()\n        val xorResultString23 = mutable.ListBuffer[String]()\n\
    \        val xorResultString24 = mutable.ListBuffer[String]()\n        val xorResultString25\
    \ = mutable.ListBuffer[String]()\n        val xorResultString26 = mutable.ListBuffer[String]()\n\
    \        val xorResultString27 = mutable.ListBuffer[String]()\n        val xorResultString28\
    \ = mutable.ListBuffer[String]()\n        val xorResultString29 = mutable.ListBuffer[String]()\n\
    \        val xorResultString"]
stop_tokens:
- "\n    }\n"
