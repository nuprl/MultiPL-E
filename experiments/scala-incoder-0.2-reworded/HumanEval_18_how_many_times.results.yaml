language: scala
name: HumanEval_18_how_many_times
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        string.split(substring).foreach(x\
    \ => count += 1)\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpklffnpw2.scala:17)\n\tat Problem.main(tmpklffnpw2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ string.indexOfSubstring(substring, i)\n            if (start != -1) {\n    \
    \            val end = start + substring.length\n                val count = count.get(substring)\n\
    \                if (count == null) {\n                    count.put(substring,\
    \ 1)\n                } else {\n                    count.put(substring, count\
    \ + 1)\n                }\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptv42a471.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptv42a471.scala:14:31\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36mstart\e[0m = string.indexOfSubstring(substring, i)\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   value indexOfSubstring is not a member of String\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1))\n        count.getOrElse(substring, 0L)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxs4w1oka.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val char =\
    \ string(i)\n            val substringChar = substring(0,i)\n            if (char\
    \ == substringChar) {\n                count.put(substringChar, count.getOrElse(substringChar,\
    \ 0l) + 1)\n            }\n        }\n        count.values.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcaaz7x43.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcaaz7x43.scala:15:42\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e\
    [36msubstringChar\e[0m = substring(\e[31m0\e[0m,i)\n\e[31m\e[31m   |\e[0m    \
    \                                      ^^^\e[0m\n\e[31m   |\e[0m             \
    \                             Found:    (Int, Int)\n\e[31m   |\e[0m          \
    \                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val sub = string.substring(i,\
    \ i + substring.length)\n            if (count.contains(sub)) {\n            \
    \    count(sub) += 1\n            } else {\n                count(sub) = 1 //\
    \ first time we see this substring\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt2ieozpj.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797670
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        val stringArray = string.split(substring)\n        val substringArray\
    \ = substring.split(string)\n        val stringArrayLength = stringArray.length\n\
    \        val substringArrayLength = substringArray.length\n        var i = 0\n\
    \        while (i < stringArrayLength) {\n            val currentString = stringArray(i)\n\
    \            val currentSubstring = substringArray(i)\n            val currentSubstringLength\
    \ = currentSubstring.length\n            val currentStringLength = currentString.length\n\
    \            while (i < stringArrayLength && i < substringArrayLength && currentSubstringLength\
    \ > 0) {\n                val currentSubstringLength = currentSubstring.length\n\
    \                val currentStringLength = currentString.length\n            \
    \    if (currentStringLength == currentSubstringLength) {\n                  \
    \  val currentSubstringArray = currentSubstring.split(currentString)\n       \
    \             val currentSubstringArrayLength = currentSubstringArray.length\n\
    \                    val currentStringArray = currentString.split(currentSubstring)\n\
    \                    val currentStringArrayLength = currentStringArray.length\n\
    \                    val currentSubstringArrayLength = currentSubstringArrayLength\n\
    \                    val currentStringArrayLength = currentStringArrayLength\n\
    \                    val currentSubstringArrayLength = currentSubstringArrayLength\n\
    \                    val currentStringArrayLength = currentStringArrayLength\n\
    \                    val currentSubstringArrayLength = currentSubstringArrayLength\n\
    \                    val currentStringArrayLength = currentStringArrayLength\n\
    \                    val currentSubstringArrayLength = currentSubstringArrayLength\n\
    \                    val currentStringArrayLength = currentStringArrayLength\n\
    \                    val currentSubstringArrayLength = currentSubstringArrayLength\n\
    \                    val currentStringArrayLength = currentStringArrayLength\n\
    \                    val currentSubstringArrayLength = currentSubstringArrayLength\n\
    \                    val currentStringArrayLength = currentStringArrayLength\n\
    \                    val currentSubstringArrayLength = currentSubstringArrayLength\n\
    \                    val currentStringArrayLength = currentStringArrayLength\n\
    \                    val currentSubstringArrayLength = currentSubstringArrayLength\n\
    \                    val currentStringArrayLength = currentStringArrayLength\n\
    \                    val currentSubstringArrayLength = currentSubstringArrayLength\n\
    \                    val currentStringArrayLength = currentStringArrayLength\n\
    \                    val currentSubstringArrayLength = currentSubstringArrayLength\n\
    \                    val currentStringArrayLength = currentStringArrayLength\n\
    \                    val currentSubstringArrayLength = currentSubstringArrayLength\n\
    \                    val currentStringArrayLength = currentStringArrayLength\n\
    \                    val currentSubstringArrayLength = currentSubstringArrayLength\n\
    \                    val currentStringArrayLength = currentStringArrayLength\n\
    \                    val currentSubstringArrayLength = currentSubstringArrayLength\n\
    \                    val currentStringArrayLength = currentStringArrayLength\n\
    \                    \n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpptl5suxp.scala:67:0 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpptl5suxp.scala:12:24\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpptl5suxp.scala:31:24 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    \e[33mval\e[0m \e[36mcurrentSubstringArrayLength\e\
    [0m = currentSubstringArrayLength\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentSubstringArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mcurrentSubstringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpptl5suxp.scala:32:24 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                    \e[33mval\e[0m \e[36mcurrentStringArrayLength\e\
    [0m = currentStringArrayLength\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentStringArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mcurrentStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpptl5suxp.scala:33:24 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                    \e[33mval\e[0m \e[36mcurrentSubstringArrayLength\e\
    [0m = currentSubstringArrayLength\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentSubstringArrayLength is already defined as "
  stdout: ''
  timestamp: 1659797670
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val sub = string.substring(i,\
    \ i + substring.length)\n            val count = count.get(sub) match {\n    \
    \            case Some(count) => count + 1\n                case None => 1\n \
    \           }\n            count.foreach { case (k, v) => count.put(k, v + 1)\
    \ }\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyi8mkk0g.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        val stringArray = string.split(substring)\n        val substringArray\
    \ = substring.split(string)\n        val stringArrayLength = stringArray.length\n\
    \        val substringArrayLength = substringArray.length\n        var i = 0\n\
    \        while (i < stringArrayLength) {\n            val stringArrayElement =\
    \ stringArray(i)\n            val substringArrayElement = substringArray(i)\n\
    \            if (stringArrayElement == substringArrayElement) {\n            \
    \    count.put(stringArrayElement, count.getOrElse(stringArrayElement, 0l) + 1)\n\
    \                i += 1\n            } else {\n                val stringArrayElementLength\
    \ = stringArrayElement.length\n                val substringArrayElementLength\
    \ = substringArrayElement.length\n                val stringArrayElementSubstringArrayLength\
    \ = stringArrayElement.length - substringArrayElementLength\n                val\
    \ substringArrayElementSubstringArrayLength = substringArrayElement.length - stringArrayElementLength\n\
    \                val stringArrayElementSubstringArray = stringArrayElement.substring(stringArrayElementSubstringArrayLength)\n\
    \                val substringArrayElementSubstringArray = substringArrayElement.substring(substringArrayElementSubstringArrayLength)\n\
    \                val stringArrayElementSubstringArrayLength = stringArrayElementSubstringArray.length\n\
    \                val substringArrayElementSubstringArrayLength = substringArrayElementSubstringArray.length\n\
    \                val stringArrayElementSubstringArray = stringArrayElement.substring(stringArrayElementSubstringArrayLength)\n\
    \                val substringArrayElementSubstringArray = substringArrayElement.substring(substringArrayElementSubstringArrayLength)\n\
    \                val stringArrayElementSubstringArrayLength = stringArrayElementSubstringArray.length\n\
    \                val substringArrayElementSubstringArrayLength = substringArrayElementSubstringArray.length\n\
    \                val stringArrayElementSubstringArray = stringArrayElement.substring(stringArrayElementSubstringArrayLength)\n\
    \                val substringArrayElementSubstringArray = substringArrayElement.substring(substringArrayElementSubstringArrayLength)\n\
    \                val stringArrayElementSubstringArrayLength = stringArrayElementSubstringArray.length\n\
    \                val substringArrayElementSubstringArrayLength = substringArrayElementSubstringArray.length\n\
    \                val stringArrayElementSubstringArray = stringArrayElement.substring(stringArrayElementSubstringArrayLength)\n\
    \                val substringArrayElementSubstringArray = substringArrayElement.substring(substringArrayElementSubstringArrayLength)\n\
    \                val stringArrayElementSubstringArrayLength = stringArrayElementSubstringArray.length\n\
    \                val substringArrayElementSubstringArrayLength = substringArrayElementSubstringArray.length\n\
    \                val stringArrayElementSubstringArray = stringArrayElement.substring(stringArrayElementSubstringArrayLength)\n\
    \                val substringArrayElementSubstring\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoo_t7e2i.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoo_t7e2i.scala:56:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m56 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpoo_t7e2i.scala:12:20 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e[35mString\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpoo_t7e2i.scala:31:20 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                \e[33mval\e[0m \e[36mstringArrayElementSubstringArrayLength\e\
    [0m = stringArrayElementSubstringArray.length\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstringArrayElementSubstringArrayLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mstringArrayElementSubstringArrayLength\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpoo_t7e2i.scala:32:20 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m                \e[33mval\e[0m \e[36msubstringArrayElementSubstringArrayLength\e\
    [0m = substringArrayElementSubstringArray.length\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msubstringArrayElementSubstringArrayLength is already defined\
    \ as \e[33mvalue\e[0m \e[35msubstringArrayElementSubstringArrayLength\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpoo_t7e2i.sc"
  stdout: ''
  timestamp: 1659797670
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            if (string.charAt(i)\
    \ == substring.charAt(0)) {\n                val count = count.get(string.substring(0,\
    \ i)) match {\n                    case Some(count) => count + 1\n           \
    \         case None => 1\n                }\n                count.toMap += (string.substring(i,\
    \ string.length) -> 1)\n            }\n        }\n        count.values.sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprn5k70vr.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797670
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val chars = string.split(substring).toList\n\
    \        val counts = chars.groupBy(c => c).mapValues(_.length)\n        val maxCount\
    \ = counts.max\n        val maxCount = maxCount.toLong\n        val totalCount\
    \ = chars.count(c => c == substring)\n        val totalCount = totalCount.toLong\n\
    \        val overlapCount = totalCount - maxCount\n        val overlapCount =\
    \ overlapCount.toLong\n        val overlapCount = overlapCount * -1\n        val\
    \ overlapCount = overlapCount.toLong\n        val overlapCount = overlapCount\
    \ * -1\n        val overlapCount = overlapCount.toLong\n        val overlapCount\
    \ = overlapCount * -1\n        val overlapCount = overlapCount * -1\n        val\
    \ overlapCount = overlapCount * -1\n        val overlapCount = overlapCount *\
    \ -1\n        val overlapCount = overlapCount * -1\n        val overlapCount =\
    \ overlapCount * -1\n        val overlapCount = overlapCount * -1\n        val\
    \ overlapCount = overlapCount * -1\n        val overlapCount = overlapCount *\
    \ -1\n        val overlapCount = overlapCount * -1\n        val overlapCount =\
    \ overlapCount * -1\n        val overlapCount = overlapCount * -1\n        val\
    \ overlapCount = overlapCount * -1\n        val overlapCount = overlapCount *\
    \ -1\n        val overlapCount = overlapCount * -1\n        val overlapCount =\
    \ overlapCount * -1\n        val overlapCount = overlapCount * -1\n        val\
    \ overlapCount = overlapCount * -1\n        val overlapCount = overlapCount *\
    \ -1\n        val overlapCount = overlapCount * -1\n        val overlapCount =\
    \ overlapCount * -1\n        val overlapCount = overlapCount * -1\n        val\
    \ overlapCount = overlapCount * -1\n        val overlapCount = overlapCount *\
    \ -1\n        val overlapCount = overlapCount * -1\n        val overlapCount =\
    \ overlapCount * -1\n        val overlapCount = overlapCount * -1\n        val\
    \ overlapCount = overlapCount * -1\n        val overlapCount = overlapCount *\
    \ -1\n        val overlapCount = overlapCount * -1\n        val overlapCount =\
    \ overlapCount * -1\n        val overlapCount = overlapCount * -1\n        val\
    \ overlapCount = overlapCount * -1\n        val overlapCount = overlapCount *\
    \ -1\n        val overlapCount = overlapCount * -1\n        val overlapCount =\
    \ overlapCount * -1\n        val overlapCount = overlapCount * -1\n        val\
    \ overlapCount = overlapCount * -1\n        val overlapCount = overlapCount *\
    \ -1\n        val overlapCount = overlapCount * -1\n        val overlapCount =\
    \ overlapCount * -1\n        val overlapCount = overlapCount * -1\n        val\
    \ overlapCount = overlapCount * -1\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuw76153u.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = maxCount.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxCount is already defined as \e[33mvalue\e[0m \e[35mmaxCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpuw76153u.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mtotalCount\e[0m = totalCount.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mtotalCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mtotalCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuw76153u.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36moverlapCount\e[0m = overlapCount.toLong\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0moverlapCount is\
    \ already defined as \e[33mvalue\e[0m \e[35moverlapCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuw76153u.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36moverlapCount\e[0m = overlapCount * -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0moverlapCount\
    \ is already defined as \e[33mvalue\e[0m \e[35moverlapCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuw76153u.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36moverlapCount\e[0m = overlapCount.toLong\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0moverlapCount is\
    \ already "
  stdout: ''
  timestamp: 1659797673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        val chars = string.split(substring).toList\n        chars.foreach(c\
    \ => count.putIfAbsent(c, 0l))\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_gu14nll.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringSet = string.toSet\n\
    \        val substringSet = substring.toSet\n        var count = 0\n        for\
    \ (i <- 0 until string.length)\n            if (stringSet(i) && substringSet.contains(string.charAt(i)))\n\
    \                count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwdahd5fs.scala:16:26\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (stringSet(i)\
    \ && substringSet.contains(string.charAt(i)))\n\e[31m\e[31m   |\e[0m         \
    \                 ^\e[0m\n\e[31m   |\e[0m                          Found:    (i\
    \ : Int)\n\e[31m   |\e[0m                          Required: Char\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val counts = mutable.HashMap.empty[String,\
    \ Long]\n        string.split(substring).foreach(s => {\n            counts +=\
    \ (s -> counts.getOrElse(s, 0L) + 1)\n        })\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkplc2_q1.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797670
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val counts = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length)\n            if (string.charAt(i)\
    \ == substring.charAt(0)) counts += (substring -> (counts.getOrElse(substring,0)\
    \ + 1l))\n        counts\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp_2urfwx.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797670
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        val strings = string.split(substring)\n        strings.foreach(s\
    \ => {\n            val count = mutable.HashMap.empty[String, Long]\n        \
    \    val strings = s.split(substring)\n            strings.foreach(ss => {\n \
    \               val count = mutable.HashMap.empty[String, Long]\n            \
    \    val strings = ss.split(substring)\n                strings.foreach(sss =>\
    \ {\n                    val count = mutable.HashMap.empty[String, Long]\n   \
    \                 val strings = sss.split(substring)\n                    strings.foreach(ssss\
    \ => {\n                        val count = mutable.HashMap.empty[String, Long]\n\
    \                        val strings = ssss.split(substring)\n               \
    \         strings.foreach(sssss => {\n                            val count =\
    \ mutable.HashMap.empty[String, Long]\n                            val strings\
    \ = sssss.split(substring)\n                            strings.foreach(ssssss\
    \ => {\n                                val count = mutable.HashMap.empty[String,\
    \ Long]\n                                val strings = ssssss.split(substring)\n\
    \                                strings.foreach(ssssss => {\n               \
    \                     val count = mutable.HashMap.empty[String, Long]\n      \
    \                              val strings = ssssss.split(substring)\n       \
    \                             strings.foreach(ssssss => {\n                  \
    \                      val count = mutable.HashMap.empty[String, Long]\n     \
    \                                   val strings = ssssss.split(substring)\n  \
    \                                      strings.foreach(ssssss => {\n         \
    \                                   val count = mutable.HashMap.empty[String,\
    \ Long]\n                                            val strings = ssssss.split(substring)\n\
    \                                            strings.foreach(ssssss => {\n   \
    \                                             val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                val strings = ssssss.split(substring)\n\
    \                                                strings.foreach(ssssss => {\n\
    \                                                    val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                    val strings = ssssss.split(substring)\n\
    \                                                    strings.foreach(ssssss =>\
    \ {\n                                                        val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                        val strings =\
    \ ssssss.split(substring)\n                                                  \
    \      strings.foreach(ssssss => {\n                                         \
    \                   val count = mutable.HashMap.empty[String, Long]\n        \
    \                                                    val strings = ssssss.split(substring)\n\
    \                                                            strings.foreach(ssssss\
    \ => {\n                                                                val count\
    \ = mutable.HashMap.empty[String, Long]\n                                    \
    \                            val strings = ssssss.split(substring)\n         \
    \                                                       strings.foreach(ssssss\
    \ => {\n                                                                    val\
    \ count = mutable.HashMap.empty[String, Long]\n                              \
    \                                      val strings = ssssss.split(substring)\n\
    \                                                                    strings.foreach(ss\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_endezas.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_endezas.scala:61:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m61 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp_endezas.scala:69:0 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_endezas.scala:12:20\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.HashMap.empty[\e[35mString\e[0m, \e[35mLong\e[0m]\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp_endezas.scala:15:24 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m            \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e[35mString\e\
    [0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_endezas.scala:18:28 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_endezas.scala:21:32\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    \e[33mval\e\
    [0m \e[36mcount\e[0m = mutable.HashMap.empty[\e[35m"
  stdout: ''
  timestamp: 1659797673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            val sub = string.substring(start,\
    \ end)\n            if (count.contains(sub)) {\n                count(sub, count)\n\
    \            } else {\n                count(sub, 1L)\n            }\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvt8a62lx.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvt8a62lx.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until string.length) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e\
    [31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\e\
    [31m14 |\e[0m            \e[33mval\e[0m \e[36mstart\e[0m = i\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mend\e[0m = i + substring.length\n\e[31m16 |\e\
    [0m            \e[33mval\e[0m \e[36msub\e[0m = string.substring(start, end)\n\e\
    [31m17 |\e[0m            \e[33mif\e[0m (count.contains(sub)) {\n\e[31m18 |\e[0m\
    \                count(sub, count)\n\e[31m19 |\e[0m            } \e[33melse\e\
    [0m {\n\e[31m20 |\e[0m                count(sub, \e[31m1L\e[0m)\n\e[31m21 |\e\
    [0m            }\n\e[31m22 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            if (start < string.length\
    \ && end < string.length && string.substring(start, end) == substring) {\n   \
    \             count.put(string.substring(start, end), count.getOrElse(string.substring(start,\
    \ end), 0l) + 1)\n            }\n        }\n        count.values.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpam7c3he7.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        var\
    \ i = 0\n        while (i < string.length && i < substring.length) {\n       \
    \     if (string.charAt(i) == substring.charAt(i)) {\n                count +=\
    \ 1\n                i += 1\n            } else {\n                count = 0\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3zv0dkc5.scala:26)\n\tat Problem.main(tmp3zv0dkc5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = i\n\
    \            val end = i + substring.length\n            if (start < string.length\
    \ && end < string.length) {\n                if (string.substring(start, end)\
    \ == substring) {\n                    val value = count.get(string.substring(start,\
    \ end)).getOrElse(0l)\n                    count.put(string.substring(start, end),\
    \ value + 1)\n                }\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb25qpw7x.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797670
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        string.split(substring).foreach(x => result.put(x, result.getOrElse(x,\
    \ 0L) + 1))\n        result.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_o1_sbvq.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        string.split(substring).foreach(x\
    \ => {\n            if (string.indexOf(x) != -1) {\n                count += 1\n\
    \            }\n        })\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9ymabz9x.scala:21)\n\tat Problem.main(tmp9ymabz9x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringSet = string.toSet\n\
    \        val substringSet = substring.toSet\n        val result = mutable.HashMap.empty[String,\
    \ Long]\n        for(i <- 0 until string.length)\n            for(j <- 0 until\
    \ substring.length)\n                if(stringSet(i) == substringSet(j))\n   \
    \                 result += (substringSet(j) -> 1L)\n        result.toSeq.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv7hg1ljj.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv7hg1ljj.scala:17:29 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m(stringSet(i) == substringSet(j))\n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         Found:    (i : Int)\n\e[31m   |\e[0m               \
    \              Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpv7hg1ljj.scala:17:48 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m                \e[33mif\e[0m(stringSet(i) == substringSet(j))\n\e[31m\e\
    [31m   |\e[0m                                                ^\e[0m\n\e[31m  \
    \ |\e[0m                                                Found:    (j : Int)\n\e\
    [31m   |\e[0m                                                Required: Char\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        val stringArray = string.split(substring)\n        stringArray.foreach(s\
    \ => {\n            val key = s\n            val value = count.get(key)\n    \
    \        if (value == null) {\n                count.put(key, 1L)\n          \
    \  } else {\n                count.put(key, value + 1L)\n            }\n     \
    \   })\n        count.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsv8ohfhp.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringSet = string.toSet\n\
    \        val substringSet = substring.toSet\n        val stringSetSize = stringSet.size\n\
    \        val substringSetSize = substringSet.size\n        val stringSetIterator\
    \ = stringSet.iterator\n        val substringSetIterator = substringSet.iterator\n\
    \        var count = 0\n        var i = 0\n        while (i < stringSetSize) {\n\
    \            val stringSetElement = stringSetIterator.next\n            val substringSetElement\
    \ = substringSetIterator.next\n            if (stringSetElement == substringSetElement)\
    \ {\n                count += 1\n            }\n            i += 1\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: next on empty iterator\n\tat scala.collection.Iterator$$anon$19.next(Iterator.scala:966)\n\
    \tat scala.collection.Iterator$$anon$19.next(Iterator.scala:964)\n\tat scala.collection.Iterator$$anon$20.next(Iterator.scala:985)\n\
    \tat Problem$.howManyTimes(tmpad820ivl.scala:22)\n\tat Problem$.main(tmpad820ivl.scala:32)\n\
    \tat Problem.main(tmpad820ivl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        string.split(substring).foreach(x => result(x) -> result(x))\n\
    \        result.values.sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0gk10qlg.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = i\n\
    \            val end = i + substring.length\n            val sub = string.substring(start,\
    \ end)\n            val count = count.get(sub) match {\n                case Some(count)\
    \ => count + 1\n                case None => 1\n            }\n            count.put(sub,\
    \ count)\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptcf5telz.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = i\n\
    \            val end = i + substring.length\n            if (start < string.length\
    \ && end < string.length) {\n                if (string.substring(start, end)\
    \ == substring) {\n                    val value = count.get(string.substring(start,\
    \ end)).getOrElse(0) + 1\n                    count.put(string.substring(start,\
    \ end), value)\n                }\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyjcibfj9.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val chars = string.split(substring).toList\n\
    \        val charsSet = chars.toSet\n        val charsSetSize = charsSet.size\n\
    \        val charsSetSize = charsSetSize.toLong\n        val charsSetSize = charsSetSize\
    \ * charsSetSize\n        charsSetSize / string.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg9gbl5_d.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcharsSetSize\e[0m = charsSetSize.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mcharsSetSize is already defined as \e[33mvalue\e[0m \e[35mcharsSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg9gbl5_d.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mcharsSetSize\e[0m = charsSetSize * charsSetSize\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcharsSetSize is already defined as \e[33mvalue\e[0m \e[35mcharsSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659797677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val charSet = string.split(\"\
    \").toSet\n        val substringSet = substring.split(\"\").toSet\n        val\
    \ result = new mutable.HashMap[String, Long]()\n        for (i <- 0 until string.length)\n\
    \            if (charSet.contains(substringSet(i)))\n                result(substringSet(i))\
    \ = result.getOrElse(substringSet(i), 0) + 1\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsshmwbqv.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsshmwbqv.scala:16:46 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            \e[33mif\e[0m (charSet.contains(substringSet(i)))\n\e[31m\e\
    [31m   |\e[0m                                              ^\e[0m\n\e[31m   |\e\
    [0m                                              Found:    (i : Int)\n\e[31m \
    \  |\e[0m                                              Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringList = string.split(substring).toList\n\
    \        val stringSet = stringList.map(_.toLowerCase).toSet\n        val stringSetSize\
    \ = stringSet.size\n        val substringList = substring.split(\"\").toList\n\
    \        val substringSet = substringList.map(_.toLowerCase).toSet\n        val\
    \ substringSetSize = substringSet.size\n        val substringSetSize = substringSetSize\
    \ - substringSet.size\n        val stringSetSize = stringSetSize - substringSetSize\n\
    \        stringSetSize * substringSetSize\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphjr2erow.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36msubstringSetSize\e[0m =\
    \ substringSetSize - substringSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msubstringSetSize is already defined as \e[33mvalue\e[0m \e\
    [35msubstringSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphjr2erow.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mstringSetSize\e[0m = stringSetSize\
    \ - substringSetSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstringSetSize is already defined as \e[33mvalue\e[0m \e[35mstringSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659797678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val strings = string.split(substring)\n\
    \        val stringSet = string.toSet\n        val stringSetSize = stringSet.size\n\
    \        val stringSetIterator = stringSet.iterator\n        val stringSetIteratorSize\
    \ = stringSetIterator.size\n        val stringSetIteratorIterator = stringSetIterator.iterator\n\
    \        val stringSetIteratorIteratorSize = stringSetIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIterator = stringSetIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorSize = stringSetIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIteratorIterator = stringSetIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorSize = stringSetIteratorIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIteratorIteratorIterator = stringSetIteratorIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorSize = stringSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIterator = stringSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorSize = stringSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n \
    \       val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcnavygvy.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcnavygvy.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mstringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpcnavygvy.scala:27:80 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mstringSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mstringSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcnavygvy.scala:29:96\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mstringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                "
  stdout: ''
  timestamp: 1659797680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            val substr = string.substring(start,\
    \ end)\n            val count = count.get(substr)\n            if (count == null)\
    \ {\n                count(substr) = 1\n            } else {\n               \
    \ count(substr) += 1\n            }\n        }\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcplv242a.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            val sub = string.substring(start,\
    \ end)\n            if (count.contains(sub)) {\n                count(sub, count)\n\
    \            } else {\n                count(sub, 1L)\n            }\n       \
    \ }\n        count.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnza5a3e4.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1))\n        count.getOrElse(substring, 0L)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxs4w1oka.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = i\n\
    \            val end = i + substring.length\n            if (start < string.length\
    \ && end < string.length && string.substring(start, end) == substring) {\n   \
    \             val value = count.get(string.substring(start, end)).getOrElse(0)\
    \ + 1\n                count.put(string.substring(start, end), value)\n      \
    \      }\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8jf215fi.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        val stringArray = string.split(substring)\n        stringArray.foreach(s\
    \ => {\n            val count = mutable.HashMap.empty[String, Long]\n        \
    \    val stringArray = s.split(substring)\n            stringArray.foreach(ss\
    \ => {\n                val count = mutable.HashMap.empty[String, Long]\n    \
    \            val stringArray = ss.split(substring)\n                stringArray.foreach(sss\
    \ => {\n                    val count = mutable.HashMap.empty[String, Long]\n\
    \                    val stringArray = sss.split(substring)\n                \
    \    stringArray.foreach(ssss => {\n                        val count = mutable.HashMap.empty[String,\
    \ Long]\n                        val stringArray = ssss.split(substring)\n   \
    \                     stringArray.foreach(sssss => {\n                       \
    \     val count = mutable.HashMap.empty[String, Long]\n                      \
    \      val stringArray = sssss.split(substring)\n                            stringArray.foreach(ssssss\
    \ => {\n                                val count = mutable.HashMap.empty[String,\
    \ Long]\n                                val stringArray = ssssss.split(substring)\n\
    \                                stringArray.foreach(sssssss => {\n          \
    \                          val count = mutable.HashMap.empty[String, Long]\n \
    \                                   val stringArray = sssssss.split(substring)\n\
    \                                    stringArray.foreach(ssssssss => {\n     \
    \                                   val count = mutable.HashMap.empty[String,\
    \ Long]\n                                        val stringArray = ssssssss.split(substring)\n\
    \                                        stringArray.foreach(sssssssss => {\n\
    \                                            val count = mutable.HashMap.empty[String,\
    \ Long]\n                                            val stringArray = sssssssss.split(substring)\n\
    \                                            stringArray.foreach(ssssssssss =>\
    \ {\n                                                val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                val stringArray = ssssssssss.split(substring)\n\
    \                                                stringArray.foreach(sssssssssss\
    \ => {\n                                                    val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                    val stringArray =\
    \ sssssssssss.split(substring)\n                                             \
    \       stringArray.foreach(ssssssssssss => {\n                              \
    \                          val count = mutable.HashMap.empty[String, Long]\n \
    \                                                       val stringArray = ssssssssssss.split(substring)\n\
    \                                                        stringArray.foreach(sssssssssssss\
    \ => {\n                                                            val count\
    \ = mutable.HashMap.empty[String, Long]\n                                    \
    \                        val stringArray = ssssssssssssss.split(substring)\n \
    \                                                           stringArray.foreach(ssssssssssssss\
    \ => {\n                                                                \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu8e_rhby.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpu8e_rhby.scala:64:0 ----------------------------\e[0m\e[0m\n\e[31m64\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu8e_rhby.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpu8e_rhby.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu8e_rhby.scala:18:28\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e\
    [0m \e[36mcount\e[0m = mutable.HashMap.empty[\e[35mString\e[0m, \e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpu8e_rhby.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33mval\e[0m \e[36mcount\e[0m =\
    \ mutable.HashMap.empty[\e[35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ exp"
  stdout: ''
  timestamp: 1659797679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            if (start < string.length\
    \ && end < string.length && string.substring(start, end) == substring) {\n   \
    \             count.put(string.substring(start, end), count.getOrElse(string.substring(start,\
    \ end), 0l) + 1)\n            }\n        }\n        count.values.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpam7c3he7.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val countMap = mutable.HashMap.empty[String,\
    \ Long]\n        val stringList = string.split(substring)\n        stringList.foreach(s\
    \ => countMap += (s -> 1))\n        val count = countMap.values.sum\n        countMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9pqiulg7.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcountMap\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val char =\
    \ string.charAt(i)\n            val subChar = substring.charAt(i)\n          \
    \  if (char == subChar) {\n                count.get(char) match {\n         \
    \           case Some(count) => count.get += 1\n                    case None\
    \ => count.put(char, 1L)\n                }\n            } else {\n          \
    \      count.get(char) match {\n                    case Some(count) => count.get\
    \ += 1\n                    case None => count.put(char, 1L)\n               \
    \ }\n            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0vgjrvt2.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797679
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        var\
    \ i = 0\n        var j = 0\n        var k = 0\n        var l = string.length\n\
    \        while (i < l) {\n            while (j < l && string.charAt(i) == substring.charAt(j))\
    \ {\n                count += 1\n                j += 1\n            }\n     \
    \       while (k < l && string.charAt(i) == substring.charAt(k)) {\n         \
    \       count += 1\n                k += 1\n            }\n            while (k\
    \ < l && string.charAt(i) == substring.charAt(k)) {\n                count +=\
    \ 1\n                k += 1\n            }\n            i += 1\n        }\n  \
    \      count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.howManyTimes(tmp9i1d_xmo.scala:18)\n\tat Problem$.main(tmp9i1d_xmo.scala:36)\n\
    \tat Problem.main(tmp9i1d_xmo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = i\n\
    \            val end = i + substring.length\n            if (end > string.length)\
    \ end = string.length\n            val sub = string.substring(start, end)\n  \
    \          if (count.contains(sub)) {\n                count(sub) += 1\n     \
    \       } else {\n                count(sub) = 1 // count the substring only once\n\
    \            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa9d4bo96.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpa9d4bo96.scala:16:41 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (end > string.length) end =\
    \ string.length\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Reassignment to val end\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val chars = string.split(substring).toList\n\
    \        val charsSet = chars.toSet\n        val charsSetSize = charsSet.size\n\
    \        val charsSetIterator = charsSet.iterator\n        val charsSetIteratorSize\
    \ = charsSetIterator.size\n        val charsSetIteratorIterator = charsSetIterator.iterator\n\
    \        val charsSetIteratorIteratorSize = charsSetIteratorIterator.size\n  \
    \      val charsSetIteratorIteratorIterator = charsSetIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorSize = charsSetIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIterator = charsSetIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorSize = charsSetIteratorIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIteratorIterator = charsSetIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorSize = charsSetIteratorIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIteratorIterator = charsSetIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorSize = charsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIterator = charsSetIteratorIteratorIterator.iterator\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = charsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charsSetIteratorIteratorIterator.iterator\n        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charsSetIteratorIteratorIteratorIteratorIterator.size\n        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charsSetIteratorIteratorIterator.iterator\n        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charsSetIteratorIteratorIteratorIteratorIterator.size\n        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charsSetIteratorIteratorIterator.iterator\n        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charsSetIteratorIteratorIteratorIteratorIterator.size\n        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charsSetIteratorIteratorIterator.iterator\n        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = charsSetIteratorIteratorIteratorIteratorIterator.size\n        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = charsSetIteratorIteratorIterator.iterator\n        val charsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpj71q5cnz.scala:38:90 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mcharsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj71q5cnz.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcharsSetIteratorIteratorIteratorIteratorSize\e[0m = charsSetIteratorIteratorIteratorIterator.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcharsSetIteratorIteratorIteratorIteratorSize is already defined\
    \ as \e[33mvalue\e[0m \e[35mcharsSetIteratorIteratorIteratorIteratorSize\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj71q5cnz.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcharsSetIteratorIteratorIteratorIteratorIterator\e\
    [0m = charsSetIteratorIteratorIterator.iterator\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcharsSetIteratorIteratorIteratorIteratorIterator is already\
    \ defined as \e[33mvalue\e[0m \e[35mcharsSetIteratorIteratorIteratorIteratorIterator\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpj71q5cnz.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mcharsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = charsSetIteratorIteratorIteratorIteratorIterator.size\n\e[31"
  stdout: ''
  timestamp: 1659797682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = i\n\
    \            val end = i + substring.length\n            val sub = string.substring(start,\
    \ end)\n            if (count.contains(sub)) {\n                count(sub) +=\
    \ 1\n            } else {\n                count(sub) = 1 // count first occurrence\n\
    \            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp_ml_z6t.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = string.indexOfSubstring(substring,\
    \ i)\n            if (start >= 0) {\n                val end = start + substring.length\n\
    \                val value = count(substring)\n                if (value == 0)\
    \ count(substring) = value + 1\n                else {\n                    count(substring)\
    \ = value + 1\n                    if (end - start > 1) count(substring) = count(substring)\
    \ + 1 // count overlaping cases\n                }\n            }\n        }\n\
    \        count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv6ey4ze1.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpv6ey4ze1.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mstart\e[0m = string.indexOfSubstring(substring,\
    \ i)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        value indexOfSubstring is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659797682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length)\n            if (string.charAt(i)\
    \ == substring.charAt(0))\n                count.put(string.charAt(i), count.getOrElse(string.charAt(i),\
    \ 0l) + 1)\n                else\n                count.put(string.charAt(i),\
    \ count.getOrElse(string.charAt(i), 0l))\n        count.values.sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph0uahcyh.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val strings = string.split(substring)\n\
    \        val stringSet = string.toSet\n        val stringSetSize = stringSet.size\n\
    \        val stringSetIterator = stringSet.iterator\n        val stringSetIteratorSize\
    \ = stringSetIterator.size\n        val stringSetIteratorIterator = stringSetIterator.iterator\n\
    \        val stringSetIteratorIteratorSize = stringSetIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIterator = stringSetIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorSize = stringSetIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIteratorIterator = stringSetIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorSize = stringSetIteratorIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIteratorIteratorIterator = stringSetIteratorIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorSize = stringSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIterator = stringSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorSize = stringSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n \
    \       val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcnavygvy.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcnavygvy.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mstringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpcnavygvy.scala:27:80 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mstringSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mstringSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcnavygvy.scala:29:96\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mstringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                "
  stdout: ''
  timestamp: 1659797680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        string.split(substring).foreach(x => count.update(x, count.getOrElse(x,\
    \ 0L) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq8natdos.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val sub = string.substring(i,\
    \ i + substring.length)\n            val count = count.getOrElseUpdate(sub, 0)\
    \ + 1\n            count.put(sub, count)\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfgwd8ysa.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797680
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        var\
    \ i = 0\n        var j = 0\n        while (i < string.length && j < substring.length)\
    \ {\n            if (string.charAt(i) == substring.charAt(j)) {\n            \
    \    count += 1\n                i += 1\n                j += 1\n            }\
    \ else {\n                if (string.charAt(i) > substring.charAt(j)) {\n    \
    \                count += 1\n                    i += 1\n                } else\
    \ {\n                    count += 1\n                    j += 1\n            \
    \    }\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2qhgj29b.scala:34)\n\tat Problem.main(tmp2qhgj29b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797683
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        var\
    \ start = 0\n        var end = string.length\n        while (start < end) {\n\
    \            val mid = (start + end) / 2\n            if (string.charAt(mid) ==\
    \ substring.charAt(0)) {\n                count += 1\n                start =\
    \ mid + 1\n            } else if (string.charAt(mid) == substring.charAt(1)) {\n\
    \                count += 1\n                end = mid - 1\n            } else\
    \ {\n                start = mid + 1\n                end = mid - 1\n        \
    \    }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.howManyTimes(tmptqu_1954.scala:20)\n\tat Problem$.main(tmptqu_1954.scala:32)\n\
    \tat Problem.main(tmptqu_1954.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringSet = string.toSet\n\
    \        val substringSet = substring.toSet\n        var count = 0\n        for(i\
    \ <- 0 until string.length){\n            if(stringSet(i) == substringSet){\n\
    \                count += 1\n            }\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfd4mv70v.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m(stringSet(i)\
    \ == substringSet){\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (i : Int)\n\e[31m   |\e[0m   \
    \                      Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length)\n            if (string.charAt(i)\
    \ == substring.charAt(0))\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkqtce5u9.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length)\n            if (string.charAt(i)\
    \ == substring.charAt(0))\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkqtce5u9.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val sub = string.substring(i,\
    \ i + substring.length)\n            val count = count.getOrElse(sub, 0)\n   \
    \         count.update(sub, count + 1)\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8df1kllv.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        string.split(substring).foreach(s => {\n            val count\
    \ = count.get(s)\n            if (count == null) count(0) = 1\n            else\
    \ count(0) += 1\n        })\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy9hl5h_l.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val sub = string.substring(i,\
    \ i + substring.length)\n            val count = count.get(sub) match {\n    \
    \            case Some(count) => count + 1\n                case None => 1\n \
    \           }\n            count.toLong match {\n                case 0 => count.toLong\n\
    \                case 1 => count.toLong + 1\n                case _ => count.toLong\
    \ + 1\n            }\n            count.put(sub, count.toLong)\n        }\n  \
    \      count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmco39i4t.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            val substr = string.substring(start,\
    \ end)\n            if (count.contains(substr)) {\n                count(substr)\
    \ += 1\n            } else {\n                count(substr) = 1 // start from\
    \ 0\n            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdzd8nbwj.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            val sub = substring.charAt(i)\n            if (c == sub) {\n    \
    \            count(c) += 1\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv60r0526.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        var count = 0\n        for (i <- 0 until string.length) {\n\
    \            val start = string.indexOfSubstring(substring)\n            if (start\
    \ != -1) {\n                count += 1\n                val end = start + substring.length\n\
    \                val key = string.substring(start, end)\n                val value\
    \ = result.getOrElse(key, 0L)\n                result.put(string.substring(start,\
    \ end), value + 1)\n            }\n        }\n        count.toLong\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpced4ym1z.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpced4ym1z.scala:15:31 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m            \e[33mval\e[0m \e[36mstart\e[0m = string.indexOfSubstring(substring)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        value indexOfSubstring is not a member of\
    \ String\n2 errors found\n"
  stdout: ''
  timestamp: 1659797688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val char =\
    \ string.charAt(i)\n            if (char == substring(0)) {\n                val\
    \ sub = substring.substring(1)\n                val count = count.get(sub)\n \
    \               if (count == null) count.put(sub, 1l) else count.put(sub, count\
    \ + 1l)\n            } else {\n                val count = count.get(char)\n \
    \               if (count == null) count.put(char, 1l) else count.put(char, count\
    \ + 1l)\n            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3az3kf1o.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797686
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringList = string.split(substring)\n\
    \        val substringList = substring.split(string)\n        var count = 0\n\
    \        for(i <- 0 until stringList.length){\n            for(j <- 0 until substringList.length){\n\
    \                if(stringList(i) == substringList(j)){\n                    count\
    \ += 1\n                }\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz7t1q44u.scala:26)\n\tat Problem.main(tmpz7t1q44u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        val chars = string.split(\"\").toList\n        val substrings\
    \ = substring.split(\"\").toList\n        val charsLength = chars.length\n   \
    \     val substringsLength = substrings.length\n        var i = 0\n        while\
    \ (i < charsLength) {\n            val char = chars(i)\n            val substring\
    \ = substrings(i)\n            if (chars.contains(substring)) {\n            \
    \    val count = chars.count(_ == char)\n                count.get(substring)\
    \ match {\n                    case Some(count) => count.toLong + 1\n        \
    \            case None => count.toLong\n                }\n            } else\
    \ {\n                count.put(substring, 1L)\n            }\n            i +=\
    \ 1\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7m2tfl_7.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7m2tfl_7.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                count.get(substring) \e[33mmatch\e[0m\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \            value get is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659797689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val char =\
    \ string.charAt(i)\n            val substringChar = substring.charAt(i)\n    \
    \        if (char == substringChar) {\n                count.put(substringChar,\
    \ count.getOrElse(substringChar, 0l) + 1)\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbjtskwgu.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val counts = mutable.HashMap[String,\
    \ Long]()\n        val startIndex = string.indexOf(substring)\n        val endIndex\
    \ = startIndex + substring.length\n        val subStrings = string.substring(startIndex,\
    \ endIndex).split(\"\")\n        for (subString <- subStrings) {\n           \
    \ val count = counts.getOrElse(subString, 0) + 1\n            counts.put(subString,\
    \ count)\n        }\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjoasai_a.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val chars = string.split(substring).length\n\
    \        val charsSet = string.split(substring).toSet\n        val charsSet2 =\
    \ string.split(substring).toSet.toSet\n        val charsSet3 = string.split(substring).toSet.toSet.toSet\n\
    \        val charsSet4 = string.split(substring).toSet.toSet.toSet.toSet\n   \
    \     val charsSet5 = string.split(substring).toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val charsSet6 = string.split(substring).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val charsSet7 = string.split(substring).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val charsSet8 = string.split(substring).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val charsSet9 = string.split(substring).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val charsSet10 = string.split(substring).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val charsSet11 = string.split(substring).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val charsSet12 = string.split(substring).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val charsSet13 = string.split(substring).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val charsSet14 = string.split(substring).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val charsSet15 = string.split(substring).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val charsSet16 = string.split(substring).toSet.toSet.toSet.toSet.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9cgmhek4.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val counts = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            if (start < string.length\
    \ && end < string.length) {\n                val sub = string.substring(start,\
    \ end)\n                if (counts.contains(sub)) {\n                    counts(sub)\
    \ += 1\n                } else {\n                    counts.put(sub, 1)\n   \
    \             }\n            }\n        }\n        counts.values.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplkwavb8a.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = i\n\
    \            val end = i + substring.length\n            if (start < string.length\
    \ && end < string.length && string.substring(start, end) == substring) {\n   \
    \             val value = count.get(string.substring(start, end)).getOrElse(0)\n\
    \                count.put(string.substring(start, end), value + 1)\n        \
    \    }\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3a14qv3r.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = i\n\
    \            val end = i + substring.length\n            if (start < string.length\
    \ && end < string.length && string.substring(start, end) == substring) {\n   \
    \             val value = count.get(string.substring(start, end)).getOrElse(0)\n\
    \                count.put(string.substring(start, end), value + 1)\n        \
    \    }\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3a14qv3r.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringSet = string.toSet\n\
    \        val substringSet = substring.toSet\n        val stringSetSize = stringSet.size\n\
    \        val substringSetSize = substringSet.size\n        var count = 0\n   \
    \     for(i <- 0 until stringSetSize) {\n            val stringChar = stringSet(i)\n\
    \            val substringChar = substringSet(i)\n            if(stringChar ==\
    \ substringChar) {\n                count += 1\n            }\n            else\
    \ if(stringChar < substringChar) {\n                count += substringSetSize\
    \ - substringSet\n            }\n            else {\n                count +=\
    \ stringSetSize - stringSet\n            }\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyck7jje8.scala:18:39\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e\
    [36mstringChar\e[0m = stringSet(i)\n\e[31m\e[31m   |\e[0m                    \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \     Found:    (i : Int)\n\e[31m   |\e[0m                                   \
    \    Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyck7jje8.scala:19:45\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e\
    [36msubstringChar\e[0m = substringSet(i)\n\e[31m\e[31m   |\e[0m              \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                       Found:    (i : Int)\n\e[31m   |\e[0m                 \
    \                            Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpyck7jje8.scala:24:22 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                count += substringSetSize - substringSet\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m--\
    \ [E134] Type Error: /tmp/tmpyck7jje8.scala:24:42 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                count += substringSetSize - substringSet\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e\
    [0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double):\
    \ Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\
    \e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e\
    [0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments\
    \ ((substringSet : Set[Char]))\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyck7jje8.scala:27:22\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                count +=\
    \ stringSetSize - stringSet\n\e["
  stdout: ''
  timestamp: 1659797691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        string.split(substring).foreach(s => count.put(s, count.getOrElse(s,\
    \ 0L) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_bnbol_j.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797688
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        var\
    \ i = 0\n        var j = 0\n        var k = 0\n        var l = string.length\n\
    \        while (i < l) {\n            while (j < l) {\n                while (k\
    \ < l) {\n                    if (string.charAt(i) == substring.charAt(j) && string.charAt(i)\
    \ == substring.charAt(k)) {\n                        count += 1\n            \
    \        }\n                    k += 1\n                }\n                j +=\
    \ 1\n            }\n            i += 1\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.howManyTimes(tmplu7t6nm7.scala:20)\n\tat Problem$.main(tmplu7t6nm7.scala:33)\n\
    \tat Problem.main(tmplu7t6nm7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val strings = string.split(substring)\n\
    \        val stringSet = string.toSet\n        val stringSetSize = stringSet.size\n\
    \        val stringSetIterator = stringSet.iterator\n        val stringSetIteratorSize\
    \ = stringSetIterator.size\n        val stringSetIteratorIterator = stringSetIterator.iterator\n\
    \        val stringSetIteratorIteratorSize = stringSetIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIterator = stringSetIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorSize = stringSetIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIteratorIterator = stringSetIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorSize = stringSetIteratorIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIteratorIteratorIterator = stringSetIteratorIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorSize = stringSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIterator = stringSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorSize = stringSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n \
    \       val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val stringSetIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcnavygvy.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcnavygvy.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mstringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpcnavygvy.scala:27:80 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mstringSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mstringSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcnavygvy.scala:29:96\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mstringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = stringSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                "
  stdout: ''
  timestamp: 1659797680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        val chars = string.split(\"\").toList\n        val substrings\
    \ = substring.split(\"\").toList\n        var i = 0\n        while (i < chars.length)\
    \ {\n            if (chars(i) == substrings(0)) {\n                val currentCount\
    \ = count.get(chars(i))\n                if (currentCount == null) {\n       \
    \             count.put(chars(i), 1L)\n                } else {\n            \
    \        count.put(chars(i), currentCount.get + 1L)\n                }\n     \
    \           i += 1\n            } else if (chars(i) != substrings(0)) {\n    \
    \            val currentCount = count.get(substrings(0))\n                if (currentCount\
    \ == null) {\n                    count.put(substrings(0), 1L)\n             \
    \   } else {\n                    count.put(substrings(0), currentCount.get +\
    \ 1L)\n                }\n                i += 1\n            } else {\n     \
    \           i += 1\n            }\n        }\n        count.values.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn3ni9x42.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val countMap = new mutable.HashMap[String,\
    \ Long]()\n        val stringArray = string.split(substring)\n        stringArray.foreach(s\
    \ => {\n            val count = countMap.getOrElse(s, 0L)\n            countMap.put(s,\
    \ count + 1)\n        })\n        countMap.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvd6x7w2a.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcountMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797689
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        var\
    \ index = 0\n        var stringLength = string.length\n        var substringLength\
    \ = substring.length\n        while (index < stringLength) {\n            if (string.charAt(index)\
    \ == substring.charAt(0)) {\n                count += 1\n                index\
    \ += substringLength\n            } else {\n                count = 0\n      \
    \          index += substringLength\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0hgm7n5n.scala:29)\n\tat Problem.main(tmp0hgm7n5n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length)\n            if (string.substring(i,\
    \ i + substring.length).equals(substring))\n                count(substring) =\
    \ count(substring) + 1 // count overlaping cases\n        count.values.sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprereygdi.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        val stringArray = string.split(substring)\n        val substringArray\
    \ = substring.split(string)\n        var i = 0\n        while (i < stringArray.length\
    \ && i < substringArray.length) {\n            val stringChar = stringArray(i)\n\
    \            val substringChar = substringArray(i)\n            if (count.contains(substringChar))\
    \ {\n                count(substringChar, stringChar, count)\n            } else\
    \ {\n                count(substringChar, stringChar, count)\n            }\n\
    \            i += 1\n        }\n        count.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm7lws_v3.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length)\n            if (string.charAt(i)\
    \ == substring.charAt(0))\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq9u5txom.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq9u5txom.scala:12:24\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpq9u5txom.scala:13:8 ---------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until string.length)\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e\
    [31m   |\e[0m        Required: Long\n\e[31m14 |\e[0m            \e[33mif\e[0m\
    \ (string.charAt(i) == substring.charAt(\e[31m0\e[0m))\n\e[31m15 |\e[0m      \
    \          count.put(string.substring(\e[31m0\e[0m,i), count.getOrElse(string.substring(\e\
    [31m0\e[0m,i), \e[31m0l\e[0m) + \e[31m1\e[0m)\n\e[31m16 |\e[0m               \
    \ count.put(string.substring(\e[31m0\e[0m,i), count.getOrElse(string.substring(\e\
    [31m0\e[0m,i), \e[31m0l\e[0m) + \e[31m1\e[0m)\n\e[31m17 |\e[0m               \
    \ count.put(string.substring(\e[31m0\e[0m,i), count.getOrElse(string.substring(\e\
    [31m0\e[0m,i), \e[31m0l\e[0m) + \e[31m1\e[0m)\n\e[31m18 |\e[0m               \
    \ count.put(string.substring(\e[31m0\e[0m,i), count.getOrElse(string.substring(\e\
    [31m0\e[0m,i), \e[31m0l\e[0m) + \e[31m1\e[0m)\n\e[31m19 |\e[0m               \
    \ count.put(string.substring(\e[31m0\e[0m,i), count.getOrElse(string.substring(\e\
    [31m0\e[0m,i), \e[31m0l\e[0m) + \e[31m1\e[0m)\n\e[31m20 |\e[0m               \
    \ count.put(string.substring(\e[31m0\e[0m,i), count.getOrElse(string.substring(\e\
    [31m0\e[0m,i), \e[31m0l\e[0m) + \e[31m1\e[0m)\n\e[31m21 |\e[0m               \
    \ count.put(string.substring(\e[31m0\e[0m,i), count.getOrElse(string.substring(\e\
    [31m0\e[0m,i), \e[31m0l\e[0m) + \e[31m1\e[0m)\n\e[31m22 |\e[0m               \
    \ count.put(string.substring(\e[31m"
  stdout: ''
  timestamp: 1659797694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            val substr = string.substring(start,\
    \ end)\n            val count = count.getOrElse(substr, 0L)\n            count(substr)\
    \ = count(substr) + 1\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplyv51bra.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val subStringIndex\
    \ = string.indexOf(substring, i)\n            if (subStringIndex > -1) {\n   \
    \             val count = result.getOrElse(substring, (0l))\n                val\
    \ newCount = count + 1\n                result.put(substring, newCount)\n    \
    \        }\n        }\n        result.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp26l1aiqs.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            val sub = string.substring(start,\
    \ end)\n            val count = count.getOrElse(sub, 0)\n            count.update(sub,\
    \ count + 1)\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvs1oqlmg.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val counts = mutable.HashMap.empty[String,\
    \ Long]\n        val chars = string.split(\"\").toList\n        val substrings\
    \ = substring.split(\"\").toList\n        chars.foreach { char =>\n          \
    \  substrings.foreach { substring =>\n                if (char == substring) {\n\
    \                    counts += (substring -> 1L)\n                }\n        \
    \    }\n        }\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7d4upkn4.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        string.split(substring).foreach(x => result.put(x, result.getOrElse(x,\
    \ 0L) + 1))\n        result.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_o1_sbvq.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797670
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringArray = string.split(substring).toList\n\
    \        val substringArray = substring.split(string).toList\n        var count\
    \ = 0\n        var i = 0\n        while (i < stringArray.size) {\n           \
    \ val stringArraySub = stringArray(i)\n            val substringArraySub = substringArray(i)\n\
    \            if (stringArraySub == substringArraySub) {\n                count\
    \ += 1\n            }\n            i += 1\n        }\n        count\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.howManyTimes(tmpq12g8bnj.scala:18)\n\tat Problem$.main(tmpq12g8bnj.scala:28)\n\
    \tat Problem.main(tmpq12g8bnj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val char = string.charAt(i)\n\
    \            val sub = substring.charAt(i)\n            if (char == sub) {\n \
    \               count(sub) += 1\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqfl8a7u2.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797694
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringList = string.split(substring).toList\n\
    \        val substringList = substring.split(string).toList\n        val stringSet\
    \ = stringList.toSet\n        val substringSet = substringList.toSet\n       \
    \ val intersection = stringSet.intersect(substringSet)\n        intersection.size\
    \ * (substringList.size - 1)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2di4qrp0.scala:21)\n\tat Problem.main(tmp2di4qrp0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797698
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringList = string.split(substring).toList\n\
    \        val substringList = substring.split(string).toList\n        val stringSet\
    \ = stringList.toSet\n        val substringSet = substringList.toSet\n       \
    \ val intersection = stringSet.intersect(substringSet)\n        intersection.size\
    \ * (substringList.size + 1).toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr8pxwueq.scala:21)\n\tat Problem.main(tmpr8pxwueq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        val chars = string.split(\"\").toList\n        val substrings\
    \ = substring.split(\"\").toList\n        val substringsCount = substrings.count(x\
    \ => chars.contains(x))\n        val charsCount = chars.count(x => substrings.contains(x))\n\
    \        val overlap = substringsCount - charsCount\n        count.put(substring,\
    \ substringsCount)\n        count.put(chars, charsCount)\n        count.put(\"\
    overlap\", overlap)\n        count.get(\"overlap\").getOrElse(0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp63hjjd8j.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val counts = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = i\n\
    \            val end = i + substring.length\n            val substr = string.substring(start,\
    \ end)\n            val count = counts.getOrElse(substr, 0) + 1\n            counts.put(substr,\
    \ count)\n        }\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp64r7mk59.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ string.indexOfSubstring(substring, i)\n            if (start > 0) {\n      \
    \          val end = start + substring.length\n                val count = count.get(substring)\n\
    \                if (count == null) {\n                    count.put(substring,\
    \ 1)\n                } else {\n                    count.put(substring, count.get\
    \ + 1)\n                }\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa2xkhpiw.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa2xkhpiw.scala:14:31\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36mstart\e[0m = string.indexOfSubstring(substring, i)\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   value indexOfSubstring is not a member of String\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        val\
    \ chars = string.split(\"\").toList\n        for (i <- 0 until chars.length)\n\
    \            if (chars(i) == substring(0))\n                count += howManyTimes(string.substring(1),\
    \ substring)\n            else\n                count += howManyTimes(string.substring(1),\
    \ substring.substring(1))\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpavn7eu9m.scala:15:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (chars(i) == substring(\e[31m0\e\
    [0m))\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types String and Char cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpavn7eu9m.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                count += howManyTimes(string.substring(\e\
    [31m1\e[0m), substring)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpavn7eu9m.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                count += howManyTimes(string.substring(\e\
    [31m1\e[0m), substring.substring(\e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659797699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = i\n\
    \            val end = i + substring.length\n            val sub = string.substring(start,\
    \ end)\n            val count = count.get(sub) match {\n                case None\
    \ => count.put(sub, 1L)\n                case Some(count) => count.toLong + 1\n\
    \            }\n            count.put(sub, count)\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaeqnlu1l.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringList = string.split(substring).toList\n\
    \        val substringList = substring.split(string).toList\n        val stringSet\
    \ = stringList.toSet\n        val substringSet = substringList.toSet\n       \
    \ val intersection = stringSet.intersect(substringSet)\n        intersection.size\
    \ * (stringList.size * (substringList.size - 1))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpce90omtd.scala:21)\n\tat Problem.main(tmpce90omtd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797702
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        var\
    \ i = 0\n        var j = 0\n        while(i < string.length && j < substring.length)\
    \ {\n            if(string.charAt(i) == substring.charAt(j)) {\n             \
    \   count += 1\n                i += 1\n                j += 1\n            }\
    \ else if(string.charAt(i) > substring.charAt(j)) {\n                i += 1\n\
    \            } else {\n                j += 1\n            }\n        }\n    \
    \    count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnl6zoooq.scala:30)\n\tat Problem.main(tmpnl6zoooq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        val stringArray = string.split(substring)\n        stringArray.foreach(s\
    \ => count.update(s, count.getOrElse(s, 0L) + 1))\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcqs54i9x.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797698
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringSet = string.toSet\n\
    \        val substringSet = substring.toSet\n        val stringSetSize = stringSet.size\n\
    \        val substringSetSize = substringSet.size\n        val stringSetIterator\
    \ = stringSet.iterator\n        val substringSetIterator = substringSet.iterator\n\
    \        var count = 0\n        var i = 0\n        while (i < stringSetSize) {\n\
    \            while (i < stringSetSize && stringSetIterator.hasNext) {\n      \
    \          if (stringSetIterator.next() == substringSetIterator.next()) {\n  \
    \                  count += 1\n                }\n                i += 1\n   \
    \         }\n            i += 1\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: next on empty iterator\n\tat scala.collection.Iterator$$anon$19.next(Iterator.scala:966)\n\
    \tat scala.collection.Iterator$$anon$19.next(Iterator.scala:964)\n\tat scala.collection.Iterator$$anon$20.next(Iterator.scala:985)\n\
    \tat Problem$.howManyTimes(tmpm1r9r8tw.scala:22)\n\tat Problem$.main(tmpm1r9r8tw.scala:33)\n\
    \tat Problem.main(tmpm1r9r8tw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val index =\
    \ string.indexOf(substring, i)\n            if (index >= 0) {\n              \
    \  val substringIndex = string.indexOf(substring, index + 1)\n               \
    \ if (substringIndex >= 0) {\n                    val substringLength = substring.length\n\
    \                    val substringIndex = substringIndex + substringLength\n \
    \                   val substringLength = substringIndex - index\n           \
    \         count.put(string.substring(index, substringIndex), substringLength)\n\
    \                }\n            }\n        }\n        count.values.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxfe_rdcx.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxfe_rdcx.scala:20:24 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    \e[33mval\e[0m \e[36msubstringLength\e\
    [0m = substringIndex - index\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msubstringLength is already defined as \e[33mvalue\e[0m \e\
    [35msubstringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = string.indexOfSubstring(substring,\
    \ i)\n            if (start >= 0) {\n                val end = start + substring.length\n\
    \                val key = string.substring(start, end)\n                val value\
    \ = count.get(key)\n                if (value == null) {\n                   \
    \ count.put(key, 1L)\n                } else {\n                    count.put(key,\
    \ value + 1L)\n                }\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgkuc6jvb.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpgkuc6jvb.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mstart\e[0m = string.indexOfSubstring(substring,\
    \ i)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        value indexOfSubstring is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659797700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        val stringArray = string.split(substring)\n        stringArray.foreach(x\
    \ => count.put(x, count.getOrElse(x, 0l) + 1))\n        count.getOrElse(substring,\
    \ 0l)\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1h9_8la.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            if (start < string.length\
    \ && end < string.length && string.substring(start, end) == substring) {\n   \
    \             val value = count.get(string.substring(start, end)).getOrElse(0)\
    \ + 1\n                count.put(string.substring(start, end), value)\n      \
    \      }\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoggnqb7v.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797699
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        var\
    \ index = 0\n        var length = string.length\n        while (index < length)\
    \ {\n            val c = string.charAt(index)\n            if (c == substring(0))\
    \ {\n                count += 1\n                index += substring.length\n \
    \           } else if (c == substring(substring.length)) {\n                count\
    \ += 1\n                index += substring.length\n            } else {\n    \
    \            index += substring.length\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.howManyTimes(tmpm3oc6rla.scala:20)\n\
    \tat Problem$.main(tmpm3oc6rla.scala:31)\n\tat Problem.main(tmpm3oc6rla.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        string.split(substring).foreach(s => {\n            val count\
    \ = count.get(s).getOrElse(0L)\n            count(s) = count(s) + 1 // count overlaping\
    \ cases\n        })\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprh2zxoj_.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val subStringIndex\
    \ = string.indexOf(substring, i)\n            if (subStringIndex >= 0) {\n   \
    \             val subStringLength = subString.length\n                val substringLength\
    \ = substring.length\n                val substringIndex = subString.indexOf(substring,\
    \ subStringIndex + 1)\n                if (substringIndex >= 0) {\n          \
    \          val substringLength = substring.length\n                    val substringIndex\
    \ = subString.indexOf(substring, substringIndex + 1)\n                    if (substringIndex\
    \ >= 0) {\n                        val substringLength = substring.length\n  \
    \                      val substringIndex = subString.indexOf(substring, substringIndex\
    \ + 1)\n                        if (substringIndex >= 0) {\n                 \
    \           val substringLength = substring.length\n                         \
    \   val substringIndex = subString.indexOf(substring, substringIndex + 1)\n  \
    \                          if (substringIndex >= 0) {\n                      \
    \          val substringLength = substring.length\n                          \
    \      val substringIndex = subString.indexOf(substring, substringIndex + 1)\n\
    \                                if (substringIndex >= 0) {\n                \
    \                    val substringLength = substring.length\n                \
    \                    val substringIndex = subString.indexOf(substring, substringIndex\
    \ + 1)\n                                    if (substringIndex >= 0) {\n     \
    \                                   val substringLength = substring.length\n \
    \                                       val substringIndex = subString.indexOf(substring,\
    \ substringIndex + 1)\n                                        if (substringIndex\
    \ >= 0) {\n                                            val substringLength = substring.length\n\
    \                                            val substringIndex = subString.indexOf(substring,\
    \ substringIndex + 1)\n                                            if (substringIndex\
    \ >= 0) {\n                                                val substringLength\
    \ = substring.length\n                                                val substringIndex\
    \ = subString.indexOf(substring, substringIndex + 1)\n                       \
    \                         if (substringIndex >= 0) {\n                       \
    \                             val substringLength = substring.length\n       \
    \                                             val substringIndex = subString.indexOf(substring,\
    \ substringIndex + 1)\n                                                    if\
    \ (substringIndex >= 0) {\n                                                  \
    \      val substringLength = substring.length\n                              \
    \                          val substringIndex = subString.indexOf(substring, substringIndex\
    \ + 1)\n                                                        if (substringIndex\
    \ >= 0) {\n                                                            val substringLength\
    \ = substring.length\n                                                       \
    \     val substringIndex = subString.indexOf(substring, substringIndex + 1)\n\
    \                                                            if (substringIndex\
    \ >= 0) {\n                                                                val\
    \ substringLength = substring.length\n                                       \
    \                         val substringIndex = subString.indexOf(substring, substringIndex\
    \ + 1)\n                                                                if (substringIndex\
    \ >= 0) {\n                                                                  \
    \  val substringLength = substring.length\n                                  \
    \                                  val substringIndex = subString.indexOf(substring,\
    \ substringIndex + 1)\n                                                      \
    \              if (substringIndex >= 0) {\n                                  \
    \                                      val substringLength = substring.length\n\
    \                                                                        val substringIndex\
    \ = subString.indexOf(substring, substringIndex + 1)\n                       \
    \                                                 if (substringIndex >= 0) {\n\
    \                                                                            val\
    \ substringLength = substring.length\n                                       \
    \                                     val substringIndex = subString.indexOf(substring,\
    \ substringIndex + 1)\n                                                      \
    \                      if (substringIndex >= 0) {\n                          \
    \                                                      val substringLength = substring.length\n\
    \                                                                            \
    \    val substringIndex = subString.indexOf(substring, substringIndex + 1)\n \
    \                                                                            \
    \   if (substringIndex\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpypchosxn.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpypchosxn.scala:77:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m77 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpypchosxn.scala:12:20 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpypchosxn.scala:16:38 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36msubStringLength\e\
    [0m = subString.length\n\e[31m\e[31m   |\e[0m                                \
    \      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                      Not\
    \ found: subString\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpypchosxn.scala:18:37\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e\
    [0m \e[36msubstringIndex\e[0m = subString.indexOf(substring, subStringIndex +\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Not found: subString\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpypchosxn.scala:21:41\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    \e[33mval\e\
    [0m \e[36msubstringIndex\e[0m = subString.indexOf(substring, substringIndex +\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                         Not\
    \ found: subString\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer expla"
  stdout: ''
  timestamp: 1659797700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringArray = string.split(substring).toList\n\
    \        val substringArray = substring.split(string).toList\n        var count\
    \ = 0\n        for (i <- 0 until stringArray.length) {\n            for (j <-\
    \ 0 until substringArray.length) {\n                if (stringArray(i) == substringArray(j))\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphtqxarfi.scala:26)\n\tat Problem.main(tmphtqxarfi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        val chars = string.split(substring)\n        chars.foreach(c\
    \ => count.putIfAbsent(c, 0l) += 1)\n        count.values.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsliv87h_.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val counts = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            val sub = string.substring(start,\
    \ end)\n            val count = counts.getOrElse(sub, 0)\n            counts.put(sub,\
    \ count + 1)\n        }\n        counts.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb34vz4mw.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjy5y4k0y.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797701
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        var\
    \ start = 0\n        var end = string.length\n        while (start < end) {\n\
    \            val mid = (start + end) / 2\n            if (string.charAt(mid) ==\
    \ substring.charAt(0)) {\n                count += 1\n                if (mid\
    \ < string.length && string.charAt(mid) == substring.charAt(1)) {\n          \
    \          count += 1\n                }\n                start = mid + 1\n  \
    \          } else if (string.charAt(mid) == substring.charAt(1)) {\n         \
    \       count += 1\n                start = mid + 1\n            } else {\n  \
    \              end = mid\n            }\n        }\n        count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.howManyTimes(tmpfbkqxu2k.scala:23)\n\tat Problem$.main(tmpfbkqxu2k.scala:34)\n\
    \tat Problem.main(tmpfbkqxu2k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        val stringArray = string.split(substring)\n        stringArray.foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5pqrc00q.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        string.split(substring).foreach(x => count.update(x, count.getOrElse(x,\
    \ 0L) + 1L))\n        count.getOrElse(substring, 0L)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ipa1tsd.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length)\n            if (string.substring(i,\
    \ i + substring.length) == substring)\n                count.put(string.substring(i,\
    \ i + substring.length), count.getOrElse(string.substring(i, i + substring.length),\
    \ 0l) + 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3h1678fn.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797705
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        var\
    \ i = 0\n        var j = 0\n        while (i < string.length && j < substring.length)\
    \ {\n            if (string.charAt(i) == substring.charAt(j)) {\n            \
    \    count += 1\n                i += 1\n                j += 1\n            }\
    \ else if (string.charAt(i) > substring.charAt(j)) {\n                j += 1\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppgyfxnmg.scala:30)\n\tat Problem.main(tmppgyfxnmg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797708
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        var\
    \ index = 0\n        var start = 0\n        var end = 0\n        while(index <\
    \ string.length) {\n            start = index\n            end = index\n     \
    \       while(end < string.length && string.charAt(end) == substring.charAt(0))\
    \ {\n                end = end + 1\n            }\n            count = count +\
    \ (end - start)\n            index = end + 1\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpapm6tab3.scala:30)\n\tat Problem.main(tmpapm6tab3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc1_zo5ka.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length)\n            if (string.substring(i,\
    \ i + substring.length) == substring)\n                count.put(string.substring(i,\
    \ i + substring.length), count.getOrElse(string.substring(i, i + substring.length),\
    \ 0l) + 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3h1678fn.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797705
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringList = string.split(substring).toList\n\
    \        val substringList = substring.split(string).toList\n        var count\
    \ = 0\n        var i = 0\n        while (i < stringList.size) {\n            val\
    \ j = substringList.indexOf(stringList(i))\n            if (j >= 0) {\n      \
    \          count = count + 1\n                i = j + 1\n            } else {\n\
    \                i = i + 1\n            }\n        }\n        count\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg2g59hz3.scala:29)\n\tat Problem.main(tmpg2g59hz3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val char =\
    \ string.charAt(i)\n            val sub = substring.charAt(i)\n            if\
    \ (char == sub) {\n                count(sub) += 1\n            }\n        }\n\
    \        count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz2e76ahr.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            if (string.charAt(i)\
    \ == substring.charAt(0)) {\n                val currentCount = count.get(string.charAt(i)).getOrElse(0)\n\
    \                count.put(string.charAt(i), currentCount + 1)\n            }\n\
    \        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt70ossv0.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        val stringArray = string.split(substring)\n        val substringArray\
    \ = substring.split(string)\n        for(i <- 0 until stringArray.length){\n \
    \           val substringArrayIndex = substringArray.indexOf(stringArray(i))\n\
    \            if(substringArrayIndex != -1){\n                val substringArrayIndex2\
    \ = substringArray.indexOf(stringArray(i+1))\n                val substringArrayIndex3\
    \ = substringArray.indexOf(stringArray(i+2))\n                val substringArrayIndex4\
    \ = substringArray.indexOf(stringArray(i+3))\n                val substringArrayIndex5\
    \ = substringArray.indexOf(stringArray(i+4))\n                val substringArrayIndex6\
    \ = substringArray.indexOf(stringArray(i+5))\n                val substringArrayIndex7\
    \ = substringArray.indexOf(stringArray(i+6))\n                val substringArrayIndex8\
    \ = substringArray.indexOf(stringArray(i+7))\n                val substringArrayIndex9\
    \ = substringArray.indexOf(stringArray(i+8))\n                val substringArrayIndex10\
    \ = substringArray.indexOf(stringArray(i+9))\n                val substringArrayIndex11\
    \ = substringArray.indexOf(stringArray(i+10))\n                val substringArrayIndex12\
    \ = substringArray.indexOf(stringArray(i+11))\n                val substringArrayIndex13\
    \ = substringArray.indexOf(stringArray(i+12))\n                val substringArrayIndex14\
    \ = substringArray.indexOf(stringArray(i+13))\n                val substringArrayIndex15\
    \ = substringArray.indexOf(stringArray(i+14))\n                val substringArrayIndex16\
    \ = substringArray.indexOf(stringArray(i+15))\n                val substringArrayIndex17\
    \ = substringArray.indexOf(stringArray(i+16))\n                val substringArrayIndex18\
    \ = substringArray.indexOf(stringArray(i+17))\n                val substringArrayIndex19\
    \ = substringArray.indexOf(stringArray(i+18))\n                val substringArrayIndex20\
    \ = substringArray.indexOf(stringArray(i+19))\n                val substringArrayIndex21\
    \ = substringArray.indexOf(stringArray(i+20))\n                val substringArrayIndex22\
    \ = substringArray.indexOf(stringArray(i+21))\n                val substringArrayIndex23\
    \ = substringArray.indexOf(stringArray(i+22))\n                val substringArrayIndex24\
    \ = substringArray.indexOf(stringArray(i+23))\n                val substringArrayIndex25\
    \ = substringArray.indexOf(stringArray(i+24))\n                val substringArrayIndex26\
    \ = substringArray.indexOf(stringArray(i+25))\n                val substringArrayIndex27\
    \ = substringArray.indexOf(stringArray(i+26))\n                val substringArrayIndex28\
    \ = substringArray.indexOf(stringArray(i+27))\n                val substringArrayIndex29\
    \ = substringArray.indexOf\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoovblxkw.scala:55:0 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoovblxkw.scala:12:24\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpoovblxkw.scala:15:8 ---------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until stringArray.length){\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e\
    [31m   |\e[0m        Required: Long\n\e[31m16 |\e[0m            \e[33mval\e[0m\
    \ \e[36msubstringArrayIndex\e[0m = substringArray.indexOf(stringArray(i))\n\e\
    [31m17 |\e[0m            \e[33mif\e[0m(substringArrayIndex != -\e[31m1\e[0m){\n\
    \e[31m18 |\e[0m                \e[33mval\e[0m \e[36msubstringArrayIndex2\e[0m\
    \ = substringArray.indexOf(stringArray(i+\e[31m1\e[0m))\n\e[31m19 |\e[0m     \
    \           \e[33mval\e[0m \e[36msubstringArrayIndex3\e[0m = substringArray.indexOf(stringArray(i+\e\
    [31m2\e[0m))\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36msubstringArrayIndex4\e\
    [0m = substringArray.indexOf(stringArray(i+\e[31m3\e[0m))\n\e[31m21 |\e[0m   \
    \             \e[33mval\e[0m \e[36msubstringArrayIndex5\e[0m = substringArray.indexOf(stringArray(i+\e\
    [31m4\e[0m))\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36msubstringArrayIndex6\e\
    [0m = substringArray.indexOf(stringArray(i+\e[31m5\e[0m))\n\e[31m23 |\e[0m   \
    \             \e[33mval\e[0m \e[36msubstringArrayIndex7\e[0m = substringArray.indexOf(stringArray(i+\e\
    [31m6\e[0m))\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36msubstringArrayIndex8\e\
    [0m = substringArray.indexOf(stringArray(i+\e[31m7\e[0m))\n\e[31m25 |\e[0m   \
    \             \e[33mval\e[0m \e[36msubstringArrayIndex9\e[0m = substringArray.indexOf(stringArray(i+\e\
    [31m8\e[0m))\n\e[31m"
  stdout: ''
  timestamp: 1659797710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjy5y4k0y.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            val sub = string.substring(start,\
    \ end)\n            val count = count.get(sub)\n            if (count == null)\
    \ {\n                count.put(sub, 1L)\n            } else {\n              \
    \  count.put(sub, count.get(sub) + 1)\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxx33s580.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val index = string.indexOf(substring,\
    \ i)\n            if (index >= 0) {\n                val substringLength = substring.length\n\
    \                val substringIndex = index - substringLength\n              \
    \  val substringEnd = index + substringLength\n                val substring =\
    \ string.substring(substringIndex, substringEnd)\n                val substringLength\
    \ = substring.length\n                val substringIndex = index - substringLength\n\
    \                val substringEnd = index + substringLength\n                val\
    \ substring = string.substring(substringIndex, substringEnd)\n               \
    \ val substringLength = substring.length\n                val substringIndex =\
    \ index - substringLength\n                val substringEnd = index + substringLength\n\
    \                val substring = string.substring(substringIndex, substringEnd)\n\
    \                val substringLength = substring.length\n                val substringIndex\
    \ = index - substringLength\n                val substringEnd = index + substringLength\n\
    \                val substring = string.substring(substringIndex, substringEnd)\n\
    \                val substringLength = substring.length\n                val substringIndex\
    \ = index - substringLength\n                val substringEnd = index + substringLength\n\
    \                val substring = string.substring(substringIndex, substringEnd)\n\
    \                val substringLength = substring.length\n                val substringIndex\
    \ = index - substringLength\n                val substringEnd = index + substringLength\n\
    \                val substring = string.substring(substringIndex, substringEnd)\n\
    \                val substringLength = substring.length\n                val substringIndex\
    \ = index - substringLength\n                val substringEnd = index + substringLength\n\
    \                val substring = string.substring(substringIndex, substringEnd)\n\
    \                val substringLength = substring.length\n                val substringIndex\
    \ = index - substringLength\n                val substringEnd = index + substringLength\n\
    \                val substring = string.substring(substringIndex, substringEnd)\n\
    \                val substringLength = substring.length\n                val substringIndex\
    \ = index - substringLength\n                val substringEnd = index + substringLength\n\
    \                val substring = string.substring(substringIndex, substringEnd)\n\
    \                val substringLength = substring.length\n                val substringIndex\
    \ = index - substringLength\n                val substringEnd = index + substringLength\n\
    \                val substring = string.substring(substringIndex, substringEnd)\n\
    \                val substringLength = substring.length\n                val substringIndex\
    \ = index - substringLength\n                val substringEnd = index + substringLength\n\
    \                val substring = string.substring(substringIndex, substringEnd)\n\
    \                val substringLength = substring.length\n                val substringIndex\
    \ = index - substringLength\n                val substringEnd = index + substringLength\n\
    \                val substring = string.substring(substringIndex, substringEnd)\n\
    \                val substringLength = substring.length\n                val substringIndex\
    \ = index - substringLength\n                val substringEnd = index + substringLength\n\
    \                val substring = string.substring(substringIndex, substringEnd)\n\
    \                val substringLength = substring.length\n                val \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp0r61mn0a.scala:69:19 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m                \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m\
    \                   ^\e[0m\n\e[31m   |\e[0m                   pattern expected\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0r61mn0a.scala:79:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m79 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp0r61mn0a.scala:12:20 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp0r61mn0a.scala:20:20 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e[0m \e[36msubstringLength\e\
    [0m = substring.length\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msubstringLength is already defined as \e[33mvalue\e[0m \e\
    [35msubstringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0r61mn0a.scala:23:20 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36msubstring\e[0m =\
    \ string.substring(substringIndex, substringEnd)\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0msubstring is already defined as \e[33mvalue\e[0m \e[35msubstring\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0r61mn0a.scala:24:20 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m                \e[33mval\e[0m \e[36msubstringLength\e[0m = substrin"
  stdout: ''
  timestamp: 1659797707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val sub = string.substring(i,\
    \ i + substring.length)\n            val count = count.get(sub) match {\n    \
    \            case Some(count) => count + 1\n                case None => 1\n \
    \           }\n            count.put(sub, count)\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3jgo9th4.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0l) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwwhevvks.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val counts = mutable.HashMap[String,\
    \ Long]()\n        string.split(substring).foreach(x => counts += (x -> 1L))\n\
    \        counts.values.sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2wjx8x0v.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            if (start < string.length\
    \ && end < string.length) {\n                val sub = string.substring(start,\
    \ end)\n                if (count.contains(sub)) {\n                    count(sub)\
    \ += 1\n                } else {\n                    count(sub) = count(sub)\
    \ + 1\n                }\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmproxu2dg7.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val counts = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            val substr = string.substring(start,\
    \ end)\n            if (counts.contains(substr)) {\n                counts(substr)\
    \ += 1\n            } else {\n                counts.put(substr, 1L)\n       \
    \     }\n        }\n        counts.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3w5lxgmx.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val sub = string.substring(i,\
    \ i + substring.length)\n            val found = count.get(sub)\n            if\
    \ (found == null) {\n                count(sub) = i + 1\n            } else {\n\
    \                count(sub) = found + 1\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmr6bpbv9.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        val stringArray = string.split(substring)\n        stringArray.foreach(x\
    \ => {\n            val count = count.getOrElse(x, 0) + 1\n            count.put(x,\
    \ count)\n        })\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7v9wpou6.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        string.split(substring).foreach(x => result.getOrElse(x, 0l)\
    \ += 1L)\n        result.size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp15l2g3jd.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val countMap = new mutable.HashMap[String,\
    \ Long]()\n        var count = 0\n        for (i <- 0 until string.length) {\n\
    \            val char = string.charAt(i)\n            val subChar = substring.charAt(i)\n\
    \            if (char == subChar) {\n                count += 1\n            }\
    \ else {\n                countMap.put(subChar, countMap.getOrElse(subChar, 0l)\
    \ + 1)\n            }\n        }\n        countMap.getOrElse(substring, 0l) +\
    \ 1\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpccgudnak.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcountMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        val substrings = string.split(substring)\n        substrings.foreach(s\
    \ => {\n            val substringCount = count.get(s)\n            if (substringCount\
    \ == null) count.put(s, 1L) else count.put(s, substringCount + 1L)\n        })\n\
    \        count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp03tapl6_.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        string.split(substring).foreach(x => count(x) += 1L)\n    \
    \    count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzwv9vh3i.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjy5y4k0y.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            val sub = string.substring(start,\
    \ end)\n            val count = count.get(sub)\n            if (count == null)\
    \ {\n                count.put(sub, 1L)\n            } else {\n              \
    \  count.put(sub, count.get(sub) + 1)\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxx33s580.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        val chars = string.split(substring)\n        chars.foreach(c\
    \ => count.putIfAbsent(c, 0l))\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm8itl4pq.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797711
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringList = string.split(substring).toList\n\
    \        val substringList = substring.split(string).toList\n        val stringSet\
    \ = stringList.map(_.toUpperCase)\n        val substringSet = substringList.map(_.toUpperCase)\n\
    \        val intersection = stringSet.intersect(substringSet)\n        intersection.size\
    \ * (substringList.size - stringList.size)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoln304rp.scala:21)\n\tat Problem.main(tmpoln304rp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797715
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringArray = string.split(substring)\n\
    \        val substringArray = substring.split(string)\n        val substringArrayLength\
    \ = substringArray.length\n        var count = 0\n        for (i <- 0 until stringArray.length)\
    \ {\n            val stringArrayLength = stringArray(i).length\n            val\
    \ substringArrayLength = substringArray(i).length\n            val overlap = stringArrayLength\
    \ - substringArrayLength\n            if (overlap > 0) {\n                count\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.howManyTimes$$anonfun$1(tmpfnb6gtkn.scala:18)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.howManyTimes(tmpfnb6gtkn.scala:23)\n\
    \tat Problem$.main(tmpfnb6gtkn.scala:28)\n\tat Problem.main(tmpfnb6gtkn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        string.split(substring).foreach(x => count.update(x -> count.getOrElse(x,\
    \ 0L) + 1L))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8nz16m1p.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val counts = mutable.HashMap[String,\
    \ Long]()\n        val strings = string.split(substring)\n        for (s <- strings)\
    \ {\n            val count = counts.getOrElse(s, 0L)\n            counts.put(s,\
    \ count + 1)\n        }\n        counts.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgf13dvtz.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val counts = mutable.HashMap.empty[String,\
    \ Long]\n        string.split(substring).foreach(s => counts += (s -> 1))\n  \
    \      counts.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyn6s7ise.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        string.split(substring).foreach(x => count(x) = count(x) + 1)\n\
    \        count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0c6udi25.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        val strings = string.split(substring)\n        for (s <- strings)\
    \ {\n            val count = mutable.HashMap[String, Long]()\n            for\
    \ (i <- 0 until string.length) {\n                if (s(i) != substring(i)) {\n\
    \                    count.put(s(i), count.getOrElse(s(i), 0l) + 1)\n        \
    \        }\n            }\n            count.foreach {\n                case (k,\
    \ v) => count.put(k, v)\n            }\n            count.foreach {\n        \
    \        case (k, v) => count.put(k, v)\n            }\n            count.foreach\
    \ {\n                case (k, v) => count.put(k, v)\n            }\n         \
    \   count.foreach {\n                case (k, v) => count.put(k, v)\n        \
    \    }\n            count.foreach {\n                case (k, v) => count.put(k,\
    \ v)\n            }\n            count.foreach {\n                case (k, v)\
    \ => count.put(k, v)\n            }\n            count.foreach {\n           \
    \     case (k, v) => count.put(k, v)\n            }\n            count.foreach\
    \ {\n                case (k, v) => count.put(k, v)\n            }\n         \
    \   count.foreach {\n                case (k, v) => count.put(k, v)\n        \
    \    }\n            count.foreach {\n                case (k, v) => count.put(k,\
    \ v)\n            }\n            count.foreach {\n                case (k, v)\
    \ => count.put(k, v)\n            }\n            count.foreach {\n           \
    \     case (k, v) => count.put(k, v)\n            }\n            count.foreach\
    \ {\n                case (k, v) => count.put(k, v)\n            }\n         \
    \   count.foreach {\n                case (k, v) => count.put(k, v)\n        \
    \    }\n            count.foreach {\n                case (k, v) => count.put(k,\
    \ v)\n            }\n            count.foreach {\n                case (k, v)\
    \ => count.put(k, v)\n            }\n            count.foreach {\n           \
    \     case (k, v) => count.put(k, v)\n            }\n            count.foreach\
    \ {\n                case (k, v) => count.put(k, v)\n            }\n         \
    \   count.foreach {\n                case (k, v) => count.put(k, v)\n        \
    \    }\n            count.foreach {\n                case (k, v) => count.put(k,\
    \ v)\n            }\n            count.foreach {\n                case (k, v)\
    \ => count.put(k, v)\n            }\n            count.foreach {\n           \
    \     case (k, v) => count.put(k, v)\n            }\n            count.foreach\
    \ {\n                case (k, v) => count.put(k, v)\n            }\n         \
    \   count.foreach {\n                case (k, v) => count.put(k, v)\n        \
    \    }\n            count.foreach {\n                case (k, v) => count.put(k,\
    \ v)\n            }\n            count.foreach {\n                case (k, v)\
    \ => \n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmputwrwamq.scala:107:0 ---------------------------\e\
    [0m\e[0m\n\e[31m107 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmputwrwamq.scala:12:20\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmputwrwamq.scala:15:24 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m            \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e[35mString\e\
    [0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- Warning: /tmp/tmputwrwamq.scala:99:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m99 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659797714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val subStringIndex\
    \ = string.indexOf(substring, i)\n            if (subStringIndex > -1) {\n   \
    \             val substringIndex = subStringIndex + substring.length\n       \
    \         val substringLength = substring.length\n                val substringIndex\
    \ = string.indexOf(substring, substringIndex)\n                if (substringIndex\
    \ > -1) {\n                    val substringLength = substring.length\n      \
    \              val substringIndex = string.indexOf(substring, substringIndex +\
    \ substringLength)\n                    if (substringIndex > -1) {\n         \
    \               val substringLength = substring.length\n                     \
    \   val substringIndex = string.indexOf(substring, substringIndex + substringLength)\n\
    \                        if (substringIndex > -1) {\n                        \
    \    val substringLength = substring.length\n                            val substringIndex\
    \ = string.indexOf(substring, substringIndex + substringLength)\n            \
    \                if (substringIndex > -1) {\n                                val\
    \ substringLength = substring.length\n                                val substringIndex\
    \ = string.indexOf(substring, substringIndex + substringLength)\n            \
    \                    if (substringIndex > -1) {\n                            \
    \        val substringLength = substring.length\n                            \
    \        val substringIndex = string.indexOf(substring, substringIndex + substringLength)\n\
    \                                    if (substringIndex > -1) {\n            \
    \                            val substringLength = substring.length\n        \
    \                                val substringIndex = string.indexOf(substring,\
    \ substringIndex + substringLength)\n                                        if\
    \ (substringIndex > -1) {\n                                            val substringLength\
    \ = substring.length\n                                            val substringIndex\
    \ = string.indexOf(substring, substringIndex + substringLength)\n            \
    \                                if (substringIndex > -1) {\n                \
    \                                val substringLength = substring.length\n    \
    \                                            val substringIndex = string.indexOf(substring,\
    \ substringIndex + substringLength)\n                                        \
    \        if (substringIndex > -1) {\n                                        \
    \            val substringLength = substring.length\n                        \
    \                            val substringIndex = string.indexOf(substring, substringIndex\
    \ + substringLength)\n                                                    if (substringIndex\
    \ > -1) {\n                                                        val substringLength\
    \ = substring.length\n                                                       \
    \ val substringIndex = string.indexOf(substring, substringIndex + substringLength)\n\
    \                                                        if (substringIndex >\
    \ -1) {\n                                                            val substringLength\
    \ = substring.length\n                                                       \
    \     val substringIndex = string.indexOf(substring, substringIndex + substringLength)\n\
    \                                                            if (substringIndex\
    \ > -1) {\n                                                                val\
    \ substringLength = substring.length\n                                       \
    \                         val substringIndex = string.indexOf(substring, substringIndex\
    \ + substringLength)\n                                                       \
    \         if (substringIndex > -1) {\n                                       \
    \                             val substringLength = substring.length\n       \
    \                                                             val substringIndex\
    \ = string.indexOf(substring, substringIndex + substringLength)\n            \
    \                                                        if (substringIndex >\
    \ -1) {\n                                                                    \
    \    val substringLength = substring.length\n                                \
    \                                        val substringIndex = string.indexOf(substring,\
    \ substringIndex + substringLength)\n                                        \
    \                                if (substringIndex > -1) {\n                \
    \                                                            val substringLength\
    \ = substring.length\n                                                       \
    \                     val substringIndex = string.indexOf(substring, substringIndex\
    \ + substringLength)\n                                                       \
    \                     if (substringIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphlop2mgg.scala:65:4 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphlop2mgg.scala:74:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmphlop2mgg.scala:12:24 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphlop2mgg.scala:18:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e\
    [0m \e[36msubstringIndex\e[0m = string.indexOf(substring, substringIndex)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msubstringIndex is already defined as \e[33mvalue\e[0m \e[35msubstringIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmphlop2mgg.scala:21:67 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m                    \e[33mval\e[0m \e[36msubstringIndex\e[0m = string.indexOf(substring,\
    \ substringIndex + substringLength)\n\e[31m\e[31m   |\e[0m                   \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                          Recursive \e[33mvalue\e[0m \e[35msubstringIndex\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphlop2mgg.scala:24:71\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                     \
    \   \e[33mval\e[0m \e[36msubstringIndex\e[0m = string.indexOf(substring, substringIndex\
    \ + substringLength)\n\e["
  stdout: ''
  timestamp: 1659797718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val index =\
    \ string.indexOf(substring, i)\n            if (index >= 0) {\n              \
    \  val substringIndex = string.indexOf(substring, index + 1)\n               \
    \ if (substringIndex >= 0) {\n                    count.put(string.substring(i,\
    \ index + 1), count.get(string.substring(i, index + 1)) + 1)\n               \
    \ }\n            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf5eg3y3b.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0l) + 1))\n        count.getOrElse(substring, 0l)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn4fsrpig.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797715
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringSet = string.toSet\n\
    \        val substringSet = substring.toSet\n        val stringSetSize = stringSet.size\n\
    \        val substringSetSize = substringSet.size\n        val stringSetIterator\
    \ = stringSet.iterator\n        val substringSetIterator = substringSet.iterator\n\
    \        var count = 0\n        while (stringSetIterator.hasNext && substringSetIterator.hasNext)\
    \ {\n            val stringChar = stringSetIterator.next\n            val substringChar\
    \ = substringSetIterator.next\n            if (stringChar == substringChar) {\n\
    \                count += 1\n            }\n        }\n        count * substringSetSize\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu4yltrjc.scala:30)\n\tat Problem.main(tmpu4yltrjc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        val chars = string.split(substring).toList\n        chars.foreach\
    \ { c =>\n            val count = mutable.HashMap.empty[String, Long]\n      \
    \      val chars = string.split(substring).toList\n            chars.foreach {\
    \ c2 =>\n                if (c == c2) {\n                    count += ((c, 1L))\n\
    \                } else {\n                    count += ((c, count.getOrElse(c2,\
    \ 0L) + 1L))\n                }\n            }\n            count += ((c, count.getOrElse(c2,\
    \ 0L) + 1L))\n            count += ((c, count.getOrElse(c2, 0L) + 1L))\n     \
    \       count += ((c, count.getOrElse(c2, 0L) + 1L))\n            count += ((c,\
    \ count.getOrElse(c2, 0L) + 1L))\n            count += ((c, count.getOrElse(c2,\
    \ 0L) + 1L))\n            count += ((c, count.getOrElse(c2, 0L) + 1L))\n     \
    \       count += ((c, count.getOrElse(c2, 0L) + 1L))\n            count += ((c,\
    \ count.getOrElse(c2, 0L) + 1L))\n            count += ((c, count.getOrElse(c2,\
    \ 0L) + 1L))\n            count += ((c, count.getOrElse(c2, 0L) + 1L))\n     \
    \       count += ((c, count.getOrElse(c2, 0L) + 1L))\n            count += ((c,\
    \ count.getOrElse(c2, 0L) + 1L))\n            count += ((c, count.getOrElse(c2,\
    \ 0L) + 1L))\n            count += ((c, count.getOrElse(c2, 0L) + 1L))\n     \
    \       count += ((c, count.getOrElse(c2, 0L) + 1L))\n            count += ((c,\
    \ count.getOrElse(c2, 0L) + 1L))\n            count += ((c, count.getOrElse(c2,\
    \ 0L) + 1L))\n            count += ((c, count.getOrElse(c2, 0L) + 1L))\n     \
    \       count += ((c, count.getOrElse(c2, 0L) + 1L))\n            count += ((c,\
    \ count.getOrElse(c2, 0L) + 1L))\n            count += ((c, count.getOrElse(c2,\
    \ 0L) + 1L))\n            count += ((c, count.getOrElse(c2, 0L) + 1L))\n     \
    \       count += ((c, count.getOrElse(c2, 0L) + 1L))\n            count += ((c,\
    \ count.getOrElse(c2, 0L) + 1L))\n            count += ((c, count.getOrElse(c2,\
    \ 0L) + 1L))\n            count += ((c, count.getOrElse(c2, 0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp24h3n48z.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp24h3n48z.scala:59:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m59 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp24h3n48z.scala:12:20 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp24h3n48z.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp24h3n48z.scala:58:1\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmp24h3n48z.scala:51:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m51 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659797718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringList = string.split(substring)\n\
    \        val stringSet = stringList.toSet\n        val stringListLength = stringList.length\n\
    \        val substringSet = substring.split(\"\").toSet\n        val substringListLength\
    \ = substring.length\n        var count = 0\n        for (i <- 0 until stringListLength)\
    \ {\n            val stringChar = stringList(i)\n            if (stringSet.contains(stringChar))\
    \ {\n                count += 1\n            }\n        }\n        for (i <- 0\
    \ until substringListLength) {\n            val substringChar = substring(i)\n\
    \            if (substringSet.contains(substringChar)) {\n                count\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp01dbawu8.scala:26:38\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m (substringSet.contains(substringChar))\
    \ {\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Found:    (substringChar\
    \ : Char)\n\e[31m   |\e[0m                                      Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val counts = mutable.HashMap[String,\
    \ Long]()\n        val substrings = mutable.HashSet[String]()\n        substrings\
    \ ++= substring\n        string ++= substring\n        substrings.foreach { substring\
    \ =>\n            val count = counts.getOrElse(substring, (0l))\n            counts\
    \ += (substring -> count + 1)\n        }\n        counts.values.sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp32rx2bwi.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp32rx2bwi.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msubstrings\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp32rx2bwi.scala:15:15 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        string ++= substring\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value ++= is not a member of String\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659797717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val sub = string.substring(i,\
    \ i + substring.length)\n            val count = count.get(sub) match {\n    \
    \            case Some(count) => count + 1\n                case None => 1\n \
    \           }\n            count.foreach { case (k, v) => count.put(k, v + 1)\
    \ }\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9v33r1__.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val index = string.indexOf(substring,\
    \ i)\n            if (index >= 0) {\n                val substringIndex = string.indexOf(substring,\
    \ index + 1)\n                if (substringIndex >= 0) {\n                   \
    \ val substringLength = substring.length\n                    val substringIndex\
    \ = substringIndex + substringLength\n                    val substringLength\
    \ = substringIndex - index\n                    val substring = string.substring(index,\
    \ substringIndex)\n                    val substringLength = substring.length\n\
    \                    val substring = string.substring(index, substringIndex)\n\
    \                    val substringLength = substring.length\n                \
    \    val substring = string.substring(index, substringIndex)\n               \
    \     val substringLength = substring.length\n                    val substring\
    \ = string.substring(index, substringIndex)\n                    val substringLength\
    \ = substring.length\n                    val substring = string.substring(index,\
    \ substringIndex)\n                    val substringLength = substring.length\n\
    \                    val substring = string.substring(index, substringIndex)\n\
    \                    val substringLength = substring.length\n                \
    \    val substring = string.substring(index, substringIndex)\n               \
    \     val substringLength = substring.length\n                    val substring\
    \ = string.substring(index, substringIndex)\n                    val substringLength\
    \ = substring.length\n                    val substring = string.substring(index,\
    \ substringIndex)\n                    val substringLength = substring.length\n\
    \                    val substring = string.substring(index, substringIndex)\n\
    \                    val substringLength = substring.length\n                \
    \    val substring = string.substring(index, substringIndex)\n               \
    \     val substringLength = substring.length\n                    val substring\
    \ = string.substring(index, substringIndex)\n                    val substringLength\
    \ = substring.length\n                    val substring = string.substring(index,\
    \ substringIndex)\n                    val substringLength = substring.length\n\
    \                    val substring = string.substring(index, substringIndex)\n\
    \                    val substringLength = substring.length\n                \
    \    val substring = string.substring(index, substringIndex)\n               \
    \     val substringLength = substring.length\n                    val substring\
    \ = string.substring(index, substringIndex)\n                    val substringLength\
    \ = substring.length\n                    val substring = string.substring(index,\
    \ substringIndex)\n                    val substringLength = substring.length\n\
    \                    val substring = string.substring(index, substringIndex)\n\
    \                    val substringLength = substring.length\n                \
    \    val substring = string.substring(index, substringIndex)\n               \
    \     val substringLength = substring.length\n                    val substring\
    \ = string.substring(index, substringIndex)\n                    val substringLength\
    \ = substring.length\n                    val substring = string.substring(index,\
    \ substringIndex)\n                    val substringLength = substring.length\n\
    \                    val substring = string.substring(index, substringIndex)\n\
    \                    val substringLength = substring.length\n                \
    \    val substring = string.substring(index, substringIndex)\n               \
    \     val substringLength = substring.length\n                    val substring\
    \ = string.substring(index, substringIndex)\n                    val substringLength\
    \ = substring.length\n                    val substring = string.substring(index,\
    \ substringIndex)\n                    val substringLength = substring.length\n\
    \                    val substring = string.substring(index, substringIndex)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt2jzumuk.scala:81:0 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt2jzumuk.scala:12:20\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.HashMap.empty[\e[35mString\e[0m, \e[35mLong\e[0m]\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpt2jzumuk.scala:20:24 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                    \e[33mval\e[0m \e[36msubstringLength\e[0m = substringIndex\
    \ - index\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msubstringLength is already defined as \e[33mvalue\e[0m \e\
    [35msubstringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpt2jzumuk.scala:22:24 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mval\e[0m \e[36msubstringLength\e\
    [0m = substring.length\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msubstringLength is already defined as \e[33mvalue\e[0m \e\
    [35msubstringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpt2jzumuk.scala:23:24 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    \e[33mval\e[0m \e[36msubstring\e\
    [0m = string.substring(index, substringIndex)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0msubstring is already defined as \e[33mvalue\e[0m \e[35msubstring\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m"
  stdout: ''
  timestamp: 1659797715
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringList = string.split(substring).toList\n\
    \        val substringList = substring.split(string).toList\n        var count\
    \ = 0\n        var i = 0\n        while (i < stringList.size) {\n            val\
    \ stringListSize = stringList(i)\n            if (stringListSize == substringList(i))\
    \ {\n                count += 1\n                i += 1\n            } else {\n\
    \                while (i < stringList.size && stringList(i) == substringList(i))\
    \ {\n                    i += 1\n                }\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659797722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringList = string.split(substring).toList\n\
    \        val substringList = substring.split(string).toList\n        var count\
    \ = 0\n        for (i <- 0 until stringList.length) {\n            for (j <- 0\
    \ until substringList.length) {\n                if (stringList(i) == substringList(j))\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoiy8enn1.scala:26)\n\tat Problem.main(tmpoiy8enn1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringSet = string.toSet\n\
    \        val substringSet = substring.toSet\n        var count = 0\n        for\
    \ (i <- 0 until stringSet.size) {\n            if (stringSet.contains(substringSet))\
    \ {\n                count += 1\n            }\n        }\n        count\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpivndiixb.scala:16:35\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (stringSet.contains(substringSet))\
    \ {\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (substringSet : Set[Char])\n\
    \e[31m   |\e[0m                                   Required: Char\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797719
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        var\
    \ i = 0\n        var j = 0\n        while(i < string.length && j < substring.length)\
    \ {\n            if(string.charAt(i) == substring.charAt(j)) {\n             \
    \   count += 1\n                i += 1\n                j += 1\n            }\
    \ else if(string.charAt(i) > substring.charAt(j)) {\n                j += 1\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps0hy4p8p.scala:30)\n\tat Problem.main(tmps0hy4p8p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjy5y4k0y.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val sub = string.substring(i,\
    \ i + substring.length)\n            val count = count.get(sub) match {\n    \
    \            case Some(count) => count + 1\n                case None => 1\n \
    \           }\n            count.toLong match {\n                case 0 => count.toLong\n\
    \                case _ => count.toLong + 1\n            }\n            count.put(sub,\
    \ count.toLong)\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_r4bd9n6.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ string.indexOfSubstring(i, substring)\n            if (start > -1) {\n     \
    \           val end = start + substring.length\n                val value = count.get(substring)\n\
    \                if (value == null) {\n                    count.put(substring,\
    \ 1)\n                } else {\n                    count.put(substring, value\
    \ + 1)\n                }\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyllnsadp.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyllnsadp.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mstart\e[0m = string.indexOfSubstring(i,\
    \ substring)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value indexOfSubstring is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659797720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringArray = string.split(substring)\n\
    \        val stringArrayLength = stringArray.length\n        val substringArray\
    \ = substring.split(\"\")\n        val substringArrayLength = substringArray.length\n\
    \        var count = 0\n        var i = 0\n        var j = 0\n        while (i\
    \ < stringArrayLength) {\n            while (j < substringArrayLength) {\n   \
    \             if (stringArray(i) == substringArray(j)) {\n                   \
    \ count += 1\n                }\n                j += 1\n            }\n     \
    \       i += 1\n            j = 0\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq3bv3ilc.scala:33)\n\tat Problem.main(tmpq3bv3ilc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        string.split(substring).foreach(x => count(x) += 1L)\n      \
    \  count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudqxin8j.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val strings = string.split(substring)\n\
    \        val stringSet = string.toSet\n        val stringSetSize = stringSet.size\n\
    \        val substringSize = substring.toSet.size\n        var count = 0\n   \
    \     var i = 0\n        var j = 0\n        while (i < stringSetSize && j < substringSize)\
    \ {\n            if (stringSet(i) == substringSet(j)) {\n                count\
    \ += 1\n                i += 1\n                j += 1\n            }\n      \
    \      else if (stringSet(i) < substringSet(j)) {\n                i += 1\n  \
    \          }\n            else {\n                j += 1\n            }\n    \
    \    }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp63ox2w05.scala:20:26\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (stringSet(i)\
    \ == substringSet(j)) {\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\
    \e[31m   |\e[0m                          Found:    (i : Int)\n\e[31m   |\e[0m\
    \                          Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp63ox2w05.scala:20:32 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (stringSet(i) == substringSet(j))\
    \ {\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                Not found: substringSet\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp63ox2w05.scala:25:31 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (stringSet(i)\
    \ < substringSet(j)) {\n\e[31m\e[31m   |\e[0m                               ^\e\
    [0m\n\e[31m   |\e[0m                               Found:    (i : Int)\n\e[31m\
    \   |\e[0m                               Required: Char\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp63ox2w05.scala:25:36 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (stringSet(i)\
    \ < substringSet(j)) {\n\e[31m\e[31m   |\e[0m                                \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    Not\
    \ found: substringSet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            val sub = string.substring(start,\
    \ end)\n            val count = count.get(sub) match {\n                case Some(count)\
    \ => count + 1\n                case None => 1\n            }\n            count.put(sub,\
    \ count)\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7fwe3u7c.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val counts = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ string.indexOfSubstring(substring)\n            if (start != -1) {\n       \
    \         val end = start + substring.length\n                val count = counts.getOrElse(substring,\
    \ 0L)\n                counts += (substring -> count + end - start)\n        \
    \    }\n        }\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppcuut3qr.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppcuut3qr.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mstart\e[0m = string.indexOfSubstring(substring)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        value indexOfSubstring is not a member of\
    \ String\n2 errors found\n"
  stdout: ''
  timestamp: 1659797723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val countMap = mutable.Map[String,\
    \ Long]()\n        string.split(substring).foreach(x => countMap += x -> 1)\n\
    \        countMap.size\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc2keetj9.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcountMap\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            val sub = string.substring(start,\
    \ end)\n            if (count.contains(sub)) {\n                count(sub, count)\n\
    \            } else {\n                count(sub, 1L)\n            }\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvt8a62lx.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvt8a62lx.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until string.length) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e\
    [31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\e\
    [31m14 |\e[0m            \e[33mval\e[0m \e[36mstart\e[0m = i\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mend\e[0m = i + substring.length\n\e[31m16 |\e\
    [0m            \e[33mval\e[0m \e[36msub\e[0m = string.substring(start, end)\n\e\
    [31m17 |\e[0m            \e[33mif\e[0m (count.contains(sub)) {\n\e[31m18 |\e[0m\
    \                count(sub, count)\n\e[31m19 |\e[0m            } \e[33melse\e\
    [0m {\n\e[31m20 |\e[0m                count(sub, \e[31m1L\e[0m)\n\e[31m21 |\e\
    [0m            }\n\e[31m22 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val charSet = string.chars\n\
    \        val charSetSub = substring.chars\n        val charSetSubSet = charSetSub.filter(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(x))\n        val charSetSubSetCount = charSetSubSet.count(x\
    \ => charSet.contains(\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbkec4_t_.scala:39:75 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mcharSetSubSetCount\e[0m\
    \ = charSetSubSet.count(\e[36mx\e[0m => charSet.contains(\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \ ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbkec4_t_.scala:16:12 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mcharSetSubSetCount\e[0m = charSetSubSet.count(\e\
    [36mx\e[0m => charSet.contains(x))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcharSetSubSetCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mcharSetSubSetCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbkec4_t_.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcharSetSubSetCount\e[0m\
    \ = charSetSubSet.count(\e[36mx\e[0m => charSet.contains(x))\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcharSetSubSetCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mcharSetSubSetCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbkec4_t_.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mcharSetSubSetCount\e[0m\
    \ = charSetSubSet.count(\e[36mx\e[0m => charSet.contains(x))\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcharSetSubSetCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mcharSetSubSetCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be"
  stdout: ''
  timestamp: 1659797725
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        string.split(substring).foreach(x\
    \ => count += 1)\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpklffnpw2.scala:17)\n\tat Problem.main(tmpklffnpw2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797673
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        val stringArray = string.split(substring)\n        stringArray.foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.getOrElse(substring,\
    \ 0L)\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpixblz22x.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val subStringIndex\
    \ = string.indexOf(substring, i)\n            if (subStringIndex >= 0) {\n   \
    \             val substringIndex = subStringIndex + substring.length\n       \
    \         val substringLength = substring.length\n                if (substringIndex\
    \ < string.length) {\n                    val substringEnd = string.length - substringIndex\n\
    \                    val substringStart = substringIndex - substringLength\n \
    \                   val substring = string.substring(substringStart, substringEnd)\n\
    \                    val substringLength = substring.length\n                \
    \    val substringIndex = string.indexOf(substring, substringIndex + 1)\n    \
    \                if (substringIndex >= 0) {\n                        val substringIndex\
    \ = substringIndex + substringLength\n                        val substringLength\
    \ = substring.length\n                        val substringEnd = string.length\
    \ - substringIndex\n                        val substringStart = substringIndex\
    \ - substringLength\n                        val substring = string.substring(substringStart,\
    \ substringEnd)\n                        val substringLength = substring.length\n\
    \                        val substringIndex = string.indexOf(substring, substringIndex\
    \ + 1)\n                        if (substringIndex >= 0) {\n                 \
    \           val substringIndex = substringIndex + substringLength\n          \
    \                  val substringLength = substring.length\n                  \
    \          val substringEnd = string.length - substringIndex\n               \
    \             val substringStart = substringIndex - substringLength\n        \
    \                    val substring = string.substring(substringStart, substringEnd)\n\
    \                            val substringLength = substring.length\n        \
    \                    val substringIndex = string.indexOf(substring, substringIndex\
    \ + 1)\n                            if (substringIndex >= 0) {\n             \
    \                   val substringIndex = substringIndex + substringLength\n  \
    \                              val substringLength = substring.length\n      \
    \                          val substringEnd = string.length - substringIndex\n\
    \                                val substringStart = substringIndex - substringLength\n\
    \                                val substring = string.substring(substringStart,\
    \ substringEnd)\n                                val substringLength = substring.length\n\
    \                                val substringIndex = string.indexOf(substring,\
    \ substringIndex + 1)\n                                if (substringIndex >= 0)\
    \ {\n                                    val substringIndex = substringIndex +\
    \ substringLength\n                                    val substringLength = substring.length\n\
    \                                    val substringEnd = string.length - substringIndex\n\
    \                                    val substringStart = substringIndex - substringLength\n\
    \                                    val substring = string.substring(substringStart,\
    \ substringEnd)\n                                    val substringLength = substring.length\n\
    \                                    val substringIndex = string.indexOf(substring,\
    \ substringIndex + 1)\n                                    if (substringIndex\
    \ >= 0) {\n                                        val substringIndex = substringIndex\
    \ + substringLength\n                                        val substringLength\
    \ = substring.length\n                                        val substringEnd\
    \ = string.length - substringIndex\n                                        val\
    \ substringStart = substringIndex - substringLength\n                        \
    \                val substring = string.substring(substringStart, substringEnd)\n\
    \                                        val substringLength = substring.length\n\
    \                                        val substringIndex = string.indexOf(substring,\
    \ substringIndex + 1)\n                                        if (substringIndex\
    \ >= 0) {\n                                            val substringIndex = substringIndex\
    \ + substringLength\n                                            val substringLength\
    \ = substring.length\n                                            val substringEnd\
    \ = string.length - substring\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplaqqree3.scala:77:0 ----------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplaqqree3.scala:12:20\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmplaqqree3.scala:20:41 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                    \e[33mval\e[0m \e[36msubstringStart\e[0m = substringIndex\
    \ - substringLength\n\e[31m\e[31m   |\e[0m                                   \
    \      ^\e[0m\n\e[31m   |\e[0m                               Recursive \e[33mvalue\e\
    [0m \e[35msubstringIndex\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmplaqqree3.scala:21:69 ---------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                    \e[33mval\e[0m \e[36msubstring\e[0m =\
    \ string.substring(substringStart, substringEnd)\n\e[31m\e[31m   |\e[0m      \
    \                                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                 Recursive \e[33mvalue\e[0m \e[35msubstringEnd\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplaqqree3.scala:23:67\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                    \e\
    [33mval\e[0m \e[36msubstringIndex\e[0m = string.indexOf(substring, substringIndex\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \        Recursive \e[33mvalue\e[0m \e[35msubstringIndex\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m--"
  stdout: ''
  timestamp: 1659797723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringList = string.split(substring).toList\n\
    \        val substringList = substring.split(string).toList\n        val stringSet\
    \ = stringList.map(_.toUpperCase)\n        val substringSet = substringList.map(_.toUpperCase)\n\
    \        val intersection = stringSet.intersect(substringSet)\n        intersection.size\
    \ * (stringList.size - substringList.size)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwb1v_97v.scala:21)\n\tat Problem.main(tmpwb1v_97v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797727
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringArray = string.split(substring).toList\n\
    \        val substringArray = substring.split(string).toList\n        var count\
    \ = 0\n        for (i <- 0 until stringArray.length)\n            for (j <- 0\
    \ until substringArray.length)\n                if (stringArray(i) == substringArray(j))\n\
    \                    count += 1\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkr2eyplu.scala:23)\n\tat Problem.main(tmpkr2eyplu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = i\n\
    \            val end = i + substring.length\n            val sub = string.substring(start,\
    \ end)\n            val count = count.get(sub) match {\n                case Some(count)\
    \ => count + 1\n                case None => 1\n            }\n            count.put(sub,\
    \ count)\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptcf5telz.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        var\
    \ index = 0\n        var startIndex = -1\n        var endIndex = -1\n        var\
    \ found = false\n        while(index < string.length){\n            val c = string.charAt(index)\n\
    \            if(found){\n                endIndex = index\n                found\
    \ = false\n            }\n            if(c == substring(0)){ // found the start\
    \ of a substring\n                startIndex = index\n                found =\
    \ true\n            }\n            index += 1\n        }\n        if(startIndex\
    \ == -1){\n            return 0\n        }\n        if(endIndex == -1){\n    \
    \        return string.length\n        }\n        val start = string.substring(startIndex,\
    \ substring.length)\n        val end = string.substring(endIndex, substring.length)\n\
    \        val result = end.length\n        if(startIndex == endIndex){\n      \
    \      result += howManyTimes(string, substring)\n        }\n        else{\n \
    \           result += howManyTimes(start, substring) + howManyTimes(end, substring)\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoh0e2pny.scala:39:19 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            result += howManyTimes(string, substring)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Int - did you mean result.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpoh0e2pny.scala:42:19 ------------------------\e[0m\e[0m\n\
    \e[31m42 |\e[0m            result += howManyTimes(start, substring) + howManyTimes(end,\
    \ substring)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value += is not a member of Int - did you mean result.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val counts = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            val substr = string.substring(start,\
    \ end)\n            if (counts.contains(substr)) {\n                counts(substr)\
    \ += 1\n            } else {\n                counts.put(substr, 1L)\n       \
    \     }\n        }\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpon7bt3v9.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringList = string.split(substring)\n\
    \        val stringSet = stringList.toSet\n        val stringListSet = stringList.map(_.toSet)\n\
    \        val stringSetSet = stringSet.map(_.toSet)\n        val stringListSetSet\
    \ = stringListSet.map(_.toSet)\n        val stringSetSetSet = stringSetSet.map(_.toSet)\n\
    \        val stringListSetSetSet = stringListSetSet.map(_.toSet)\n        val\
    \ stringSetSetSetSet = stringSetSetSet.map(_.toSet)\n        val stringListSetSetSetSet\
    \ = stringListSetSetSet.map(_.toSet)\n        val stringSetSetSetSetSet = stringSetSetSetSet.map(_.toSet)\n\
    \        val stringListSetSetSetSetSet = stringListSetSetSetSet.map(_.toSet)\n\
    \        val stringSetSetSetSetSetSet = stringSetSetSetSetSet.map(_.toSet)\n \
    \       val stringListSetSetSetSetSetSet = stringListSetSetSetSetSet.map(_.toSet)\n\
    \        val stringSetSetSetSetSetSetSet = stringSetSetSetSetSetSet.map(_.toSet)\n\
    \        val stringListSetSetSetSetSetSet = stringListSetSetSetSetSetSet.map(_.toSet)\n\
    \        val stringSetSetSetSetSetSetSet = stringSetSetSetSetSetSetSet.map(_.toSet)\n\
    \        val stringListSetSetSetSetSetSetSet = stringListSetSetSetSetSetSetSet.map(_.toSet)\n\
    \        val stringSetSetSetSetSetSetSetSet = stringSetSetSetSetSetSetSetSet.map(_.toSet)\n\
    \        val stringListSetSetSetSetSetSetSet = stringListSetSetSetSetSetSetSet.map(_.toSet)\n\
    \        val stringSetSetSetSetSetSetSetSet = stringSetSetSetSetSetSetSetSet.map(_.toSet)\n\
    \        val stringListSetSetSetSetSetSetSet = stringListSetSetSetSetSetSetSet.map(_.toSet)\n\
    \        val stringSetSetSetSetSetSetSetSet = stringSetSetSetSetSetSetSetSet.map(_.toSet)\n\
    \        val stringListSetSetSetSetSetSetSet = stringListSetSetSetSetSetSetSet.map(_.toSet)\n\
    \        val stringSetSetSetSetSetSetSetSet = stringSetSetSetSetSetSetSetSet.map(_.toSet)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp26evq73d.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mstringListSetSetSetSetSetSet\e\
    [0m = stringListSetSetSetSetSetSet.map(_.toSet)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstringListSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mstringListSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp26evq73d.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mstringSetSetSetSetSetSetSet\e\
    [0m = stringSetSetSetSetSetSetSet.map(_.toSet)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstringSetSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mstringSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp26evq73d.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mstringListSetSetSetSetSetSetSet\e\
    [0m = stringListSetSetSetSetSetSetSet.map(_.toSet)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstringListSetSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mstringListSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp26evq73d.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mstringSetSetSetSetSetSetSetSet\e[0m = stringSetSetSetSetSetSetSetSet.map(_.toSet)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstringSetSetSetSetSetS"
  stdout: ''
  timestamp: 1659797727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        string.split(substring).foreach(x => count.update(x -> count.getOrElse(x,\
    \ 0l) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoaoegakt.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        val chars = string.split(substring).toList\n        chars.foreach(c\
    \ => count.putIfAbsent(c, 0l))\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpleozg46m.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringSet = string.split(substring).toSet\n\
    \        val substringSet = substring.split(string).toSet\n        val stringSetSize\
    \ = stringSet.size\n        val substringSetSize = substringSet.size\n       \
    \ var count = 0\n        var i = 0\n        while (i < stringSetSize) {\n    \
    \        val stringSetElement = stringSet(i)\n            val substringSetElement\
    \ = substringSet(i)\n            if (stringSetElement == substringSetElement)\
    \ {\n                count += 1\n                i += 1\n            } else {\n\
    \                while (i < stringSetSize && stringSetElement == substringSet(i))\
    \ {\n                    i += 1\n                }\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzwce9xxy.scala:19:45\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e\
    [36mstringSetElement\e[0m = stringSet(i)\n\e[31m\e[31m   |\e[0m              \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                       Found:    (i : Int)\n\e[31m   |\e[0m                 \
    \                            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpzwce9xxy.scala:20:51 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36msubstringSetElement\e\
    [0m = substringSet(i)\n\e[31m\e[31m   |\e[0m                                 \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \                Found:    (i : Int)\n\e[31m   |\e[0m                        \
    \                           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpzwce9xxy.scala:25:77 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mwhile\e[0m (i < stringSetSize &&\
    \ stringSetElement == substringSet(i)) {\n\e[31m\e[31m   |\e[0m              \
    \                                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                                     Found:    (i :\
    \ Int)\n\e[31m   |\e[0m                                                     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        val stringArray = string.split(substring)\n        for (i <-\
    \ 0 until stringArray.length)\n            count.put(stringArray(i), count.getOrElse(stringArray(i),\
    \ 0l) + 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpteivaxi6.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        string.split(substring).foreach(x => count(x) += 1l)\n      \
    \  count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfsj7j63a.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797725
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        var\
    \ i = 0\n        var j = 0\n        var k = 0\n        var l = string.length\n\
    \        while (i < l) {\n            while (j < l && string.charAt(i) == substring.charAt(j))\
    \ {\n                count += 1\n                j += 1\n            }\n     \
    \       while (k < l && string.charAt(i) == substring.charAt(k)) {\n         \
    \       count += 1\n                k += 1\n            }\n            while (k\
    \ < l && string.charAt(i) == substring.charAt(k)) {\n                count +=\
    \ 1\n                k += 1\n            }\n            i += 1\n        }\n  \
    \      count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.howManyTimes(tmp9i1d_xmo.scala:18)\n\tat Problem$.main(tmp9i1d_xmo.scala:36)\n\
    \tat Problem.main(tmp9i1d_xmo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = i\n\
    \            val end = i + substring.length\n            if (start < string.length\
    \ && end < string.length && string.substring(start, end) == substring) {\n   \
    \             val value = count.get(string.substring(start, end)).getOrElse(0)\n\
    \                count.put(string.substring(start, end), value + 1)\n        \
    \    }\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3a14qv3r.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = i\n\
    \            val end = i + substring.length\n            val substr = string.substring(start,\
    \ end)\n            if (count.contains(substr)) {\n                count(substr)\
    \ = count(substr) + 1 // count overlaping cases\n            } else {\n      \
    \          count(substr) = 1\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7ig6_qxd.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797726
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        var\
    \ start = 0\n        var end = string.length\n        while (start < end) {\n\
    \            val mid = start + (end - start) / 2\n            if (string.charAt(mid)\
    \ == substring.charAt(0)) {\n                count = count + 1\n             \
    \   start = mid + 1\n            } else if (string.charAt(mid) == substring.charAt(1))\
    \ {\n                count = count + 1\n                start = mid + 1\n    \
    \            end = mid - 1\n            } else {\n                start = mid\
    \ + 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.howManyTimes(tmpenelto_0.scala:20)\n\tat Problem$.main(tmpenelto_0.scala:32)\n\
    \tat Problem.main(tmpenelto_0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        val strings = string.split(substring)\n        strings.foreach\
    \ { s =>\n            val count = mutable.HashMap.empty[String, Long]\n      \
    \      val strings = s.split(substring)\n            strings.foreach { s2 =>\n\
    \                val count = mutable.HashMap.empty[String, Long]\n           \
    \     val strings = s2.split(substring)\n                strings.foreach { s3\
    \ =>\n                    val count = mutable.HashMap.empty[String, Long]\n  \
    \                  val strings = s3.split(substring)\n                    strings.foreach\
    \ { s4 =>\n                        val count = mutable.HashMap.empty[String, Long]\n\
    \                        val strings = s4.split(substring)\n                 \
    \       strings.foreach { s5 =>\n                            val count = mutable.HashMap.empty[String,\
    \ Long]\n                            val strings = s5.split(substring)\n     \
    \                       strings.foreach { s6 =>\n                            \
    \    val count = mutable.HashMap.empty[String, Long]\n                       \
    \         val strings = s6.split(substring)\n                                strings.foreach\
    \ { s7 =>\n                                    val count = mutable.HashMap.empty[String,\
    \ Long]\n                                    val strings = s7.split(substring)\n\
    \                                    strings.foreach { s8 =>\n               \
    \                         val count = mutable.HashMap.empty[String, Long]\n  \
    \                                      val strings = s8.split(substring)\n   \
    \                                     strings.foreach { s9 =>\n              \
    \                              val count = mutable.HashMap.empty[String, Long]\n\
    \                                            val strings = s9.split(substring)\n\
    \                                            strings.foreach { s10 =>\n      \
    \                                          val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                val strings = s10.split(substring)\n\
    \                                                strings.foreach { s11 =>\n  \
    \                                                  val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                    val strings = s11.split(substring)\n\
    \                                                    strings.foreach { s12 =>\n\
    \                                                        val count = mutable.HashMap.empty[String,\
    \ Long]\n                                                        val strings =\
    \ s12.split(substring)\n                                                     \
    \   strings.foreach { s13 =>\n                                               \
    \             val count = mutable.HashMap.empty[String, Long]\n              \
    \                                              val strings = s13.split(substring)\n\
    \                                                            strings.foreach {\
    \ s14 =>\n                                                                val\
    \ count = mutable.HashMap.empty[String, Long]\n                              \
    \                                  val strings = s14.split(substring)\n      \
    \                                                          strings.foreach { s15\
    \ =>\n                                                                    val\
    \ count = mutable.HashMap.empty[String, Long]\n                              \
    \                                      val strings = s15.split(substring)\n  \
    \                                                                  strings.foreach\
    \ { s16 =>\n                                                                 \
    \       val \n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpxd26cmbf.scala:60:75 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m                                                    \
    \                    \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m                  \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                                        pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxd26cmbf.scala:70:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpxd26cmbf.scala:12:20 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpxd26cmbf.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxd26cmbf.scala:18:28\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e\
    [0m \e[36mcount\e[0m = mutable.HashMap.empty[\e[35mString\e[0m, \e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxd26cmbf.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33mval\e[0m \e[36mcount\e[0m =\
    \ mutable.HashMap.emp"
  stdout: ''
  timestamp: 1659797728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = i\n\
    \            val end = i + substring.length\n            val sub = string.substring(start,\
    \ end)\n            if (count.contains(sub)) {\n                count(sub) +=\
    \ 1\n            } else {\n                count(sub) = 1 // count the first occurrence\n\
    \            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9o_t9r2t.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length)\n            if (string.charAt(i)\
    \ == substring.charAt(0)) count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n            else count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l))\n        count.get(substring).map(_.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8sco9nm_.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val counts = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            val substr = string.substring(start,\
    \ end)\n            if (counts.contains(substr)) {\n                counts(substr)\
    \ += 1\n            } else {\n                counts.put(substr, 1L)\n       \
    \     }\n        }\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpon7bt3v9.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = i\n\
    \            val end = i + substring.length\n            if (start < string.length\
    \ && end < string.length && string.substring(start, end) == substring) {\n   \
    \             val value = count.get(string.substring(start, end))\n          \
    \      if (value == null) {\n                    count.put(string.substring(start,\
    \ end), 1L)\n                } else {\n                    count.put(string.substring(start,\
    \ end), value + 1L)\n                }\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkqg3x1jq.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            val sub = string.substring(start,\
    \ end)\n            val count = count.get(sub) match {\n                case Some(count)\
    \ => count + 1\n                case None => 1\n            }\n            count.put(sub,\
    \ count)\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpegifys2f.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val strings = string.split(substring)\n\
    \        val stringSet = string.toSet\n        val stringSetSize = stringSet.size\n\
    \        var count = 0\n        for(i <- 0 until stringSetSize) {\n          \
    \  val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val string\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb4qbh8bb.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb4qbh8bb.scala:79:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m79 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb4qbh8bb.scala:18:16 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m            \e[33mval\e[0m \e[36mstringSetSize\e[0m = stringSet.size\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mstringSetSize is already defined as \e[33mvalue\e[0m \e[35mstringSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb4qbh8bb.scala:19:16 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m            \e[33mval\e[0m \e[36mstringSetSize\e[0m = stringSet.size\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mstringSetSize is already defined as \e[33mvalue\e[0m \e[35mstringSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb4qbh8bb.scala:20:16 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m            \e[33mval\e[0m \e[36mstringSetSize\e[0m = stringSet.size\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mstringSetSize is already defined as \e[33mvalue\e[0m \e[35mstringSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb4qbh8bb.scala:21:16 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m            \e[33mval\e[0m \e[36mstringSetSize\e[0m = stringSet.size\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mstringSetSize is already defined as \e[33mvalue\e[0m \e[35mstringSetSi"
  stdout: ''
  timestamp: 1659797730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val sub = string.substring(i,\
    \ i + substring.length)\n            if (count.contains(sub)) {\n            \
    \    count(sub, count) + 1\n            } else {\n                count(sub, 1)\n\
    \            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzx8i8hqa.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = i\n\
    \            val end = i + substring.length\n            if (start < string.length\
    \ && end < string.length && string.substring(start, end) == substring) {\n   \
    \             val value = count.get(string.substring(start, end)).getOrElse(0)\n\
    \                count.put(string.substring(start, end), value + 1)\n        \
    \    }\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3a14qv3r.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ string.indexOfSubstring(substring, i)\n            if (start > -1) {\n     \
    \           val end = start + substring.length\n                val count = count.get(substring)\n\
    \                if (count == null) count.putIfAbsent(substring, 1L)\n       \
    \         else count.put(substring, count.get + 1) + (end - i)\n            }\n\
    \        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpva_ava5j.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpva_ava5j.scala:14:31\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36mstart\e[0m = string.indexOfSubstring(substring, i)\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   value indexOfSubstring is not a member of String\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        var\
    \ index = 0\n        var length = string.length\n        while (index < length)\
    \ {\n            if (string.charAt(index) == substring.charAt(0)) {\n        \
    \        count += 1\n                index += substring.length\n            }\
    \ else {\n                count = 0\n                index += substring.length\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprriklzs6.scala:28)\n\tat Problem.main(tmprriklzs6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        var\
    \ i = 0\n        var j = 0\n        while (i < string.length && j < substring.length)\
    \ {\n            if (string.charAt(i) == substring.charAt(j)) {\n            \
    \    count += 1\n                i += 1\n                j += 1\n            }\
    \ else if (string.charAt(i) > substring.charAt(j)) {\n                i += 1\n\
    \            } else {\n                j += 1\n            }\n        }\n    \
    \    count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptz33__qf.scala:30)\n\tat Problem.main(tmptz33__qf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        string.split(substring).foreach(s => count.update(s, count.getOrElse(s,\
    \ 0L) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbkwxbcnc.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        val stringArray = string.split(substring)\n        for (i <-\
    \ 0 until stringArray.length)\n            if (stringArray(i).nonEmpty) {\n  \
    \              val currentString = stringArray(i)\n                val currentCount\
    \ = count.get(currentString)\n                if (currentCount == null) {\n  \
    \                  count.put(currentString, 1L)\n                } else {\n  \
    \                  count.put(currentString, currentCount.toLong + 1)\n       \
    \         }\n            }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp44_kctd5.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        var count = 0\n        var\
    \ i = 0\n        var j = 0\n        while (i < string.length && j < substring.length)\
    \ {\n            if (string.charAt(i) == substring.charAt(j)) {\n            \
    \    count += 1\n                i += 1\n                j += 1\n            }\
    \ else {\n                if (string.charAt(i) > substring.charAt(j)) {\n    \
    \                count += 1\n                    i += 1\n                } else\
    \ {\n                    count += 1\n                    j += 1\n            \
    \    }\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2qhgj29b.scala:34)\n\tat Problem.main(tmp2qhgj29b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797683
