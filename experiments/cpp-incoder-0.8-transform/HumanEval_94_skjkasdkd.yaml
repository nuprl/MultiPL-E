name: HumanEval_94_skjkasdkd
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of integers.\n\
  // You need to find the largest prime value and return the sum of its digits.\n\
  // Examples:\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)3, (long)2, (long)1,\
  \ (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181,\
  \ (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\n\
  // (10)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)0, (long)1, (long)8,\
  \ (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1,\
  \ (long)2, (long)4, (long)2, (long)5, (long)1})))\n// (25)\n// >>> skjkasdkd((std::vector<long>({(long)1,\
  \ (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163,\
  \ (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3})))\n// (13)\n\
  // >>> skjkasdkd((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99,\
  \ (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6})))\n\
  // (11)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)81, (long)12, (long)3,\
  \ (long)1, (long)21})))\n// (3)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)8,\
  \ (long)1, (long)2, (long)1, (long)7})))\n// (7)\nlong skjkasdkd(std::vector<long>\
  \ lst) {\n"
tests: "}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5,\
  \ (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32,\
  \ (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40,\
  \ (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) ==\
  \ (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32,\
  \ (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323,\
  \ (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5,\
  \ (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191})))\
  \ == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456,\
  \ (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127,\
  \ (long)97, (long)8192}))) == (10));\n}\n"
completions: []
stop_tokens:
- "\n}"
