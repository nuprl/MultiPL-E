name: HumanEval_27_flip_case
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // For a given string, flip lowercase characters to uppercase and\
  \ uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\")\n\
  \    public static string FlipCase(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
  \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
  )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\")).Equals((\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        int strLength = str.Length;\n        char[] chars = new char[strLength];\n\
    \        for (int i = 0; i < strLength; i++) {\n            chars[i] = (char)\
    \ (str[i] + (int) 'A' - (int) 'a');\n        }\n        return new string(chars);",
  "        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n            \
    \    chars[i] -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A'\
    \ && chars[i] <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n\
    \        }\n        return new string(chars);", '        return String.Join("",
    str.ToLower().Select(x => (char)x.ToUpper()));', '        return String.Join("",
    str.Select(x => (char)x.ToUpper()).ToArray());', '        return String.Join("",
    str.ToLower().Select(x => (char)(x.ToUpper())));', "        int strLength = str.Length;\n\
    \        char[] chars = new char[strLength];\n        for (int i = 0; i < strLength;\
    \ i++) {\n            chars[i] = (char) (str[i] ^ 128);\n        }\n        return\
    \ new string(chars);", '        return String.Join("", str.Select(x => (char)(x.ToLower()
    + 32)).ToArray());', '        return String.Join("", str.Select(x => (x.ToLower()
    == x) ? x.ToUpper() : x));', '        return String.Join("", str.Select(x => (char)x.ToUpper()));',
  "        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n            \
    \    chars[i] -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A'\
    \ && chars[i] <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n\
    \        }\n        return new string(chars);", "        return String.Join(\"\
    \",\n            Enumerable.Of<string>(str.ToLower()).Select(x => (char)x.ToUpper()).ToList());",
  "        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n            \
    \    chars[i] -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A'\
    \ && chars[i] <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n\
    \        }\n        return new string(chars);", "        int i = 0;\n        while\
    \ (i < str.Length) {\n            if (Char.IsLower(str[i]))\n                str[i]\
    \ = Char.ToUpper(str[i]);\n            else\n                str[i] = Char.ToLower(str[i]);\n\
    \            i++;\n        }\n        return str;", '        return String.Join("",
    str.ToLower().Select(x => String.ToUpper[x]));', "        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >=\
    \ 'a' && chars[i] <= 'z')\n                chars[i] -= 'a' - 'A';\n          \
    \  else if (chars[i] >= 'A' && chars[i] <= 'Z')\n                chars[i] += 'a'\
    \ - 'A';\n        }\n        return new string(chars);", '        return String.Join("",
    str.ToLower().Select(x => (char)(x.ToUpper())));', '        return str.ToUpper().ToLower();',
  "        int strLen = str.Length;\n        char[] chars = new char[strLen];\n  \
    \      for (int i = 0; i < strLen; i++) {\n            chars[i] = (char)((str[i]\
    \ >= 'a' && str[i] <= 'z') ? (str[i] - 'a' + 'A') : str[i]);\n        }\n    \
    \    return new String(chars);", "        return String.Join(\"\",\n         \
    \   Enumerable.Of(str).Select(x => {\n                if (x.ToLower() != x) {\n\
    \                    return x.ToUpper();\n                }\n                else\
    \ {\n                    return x.ToLower();\n                }\n            }).ToArray());",
  "        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n            \
    \    chars[i] -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A'\
    \ && chars[i] <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n\
    \        }\n        return new string(chars);", '        return String.Join("",
    str.Select(x => (x.ToLower() == x) ? x.ToUpper() : x.ToLower()));', "        for\
    \ (int i = 0; i < str.Length; i++) {\n            str[i] = str[i].ToUpper();\n\
    \        }\n        for (int i = 0; i < str.Length; i++) {\n            str[i]\
    \ = str[i].ToLower();\n        }\n        return str;", '        return String.Join("",
    str.Select(x => (char)x.ToUpper()));', '        return String.Join("", str.ToLower().Select(x
    => String.ToUpper(x)));', "        var result = \"\";\n        for (var i = 0;\
    \ i < str.Length; i++) {\n            var c = str[i];\n            if (c >= 'a'\
    \ && c <= 'z') {\n                result += (char)(c - 32);\n            }\n \
    \           else {\n                result += c;\n            }\n        }\n \
    \       return result;", "        char[] chars = str.ToCharArray();\n        for\
    \ (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >= 'a' && chars[i]\
    \ <= 'z') {\n                chars[i] = (char)(chars[i] - 'a' + 'A');\n      \
    \      }\n        }\n        return new string(chars);", "        var result =\
    \ new StringBuilder();\n        for (var i = 0; i < str.Length; i++) {\n     \
    \       var c = str[i];\n            if (c >= 'a' && c <= 'z') {\n           \
    \     result.Append(c.ToUpper());\n            }\n            else {\n       \
    \         result.Append(c.ToLower());\n            }\n        }\n        return\
    \ result.ToString();\n    }\n\n    // Given a string, return a string where \"\
    not \" has been added to the front,\n    // and \"not\" has been removed from\
    \ the back.\n    // >>> PrependNot(\"not hello\")\n    // (\"hello not\")\n  \
    \  public static string PrependNot(string str) {\n        return \"not \" + str;\n\
    \    }\n\n    // Given a string, return a string where \"!\" has been removed\
    \ from the front,\n    // and \"!\" has been removed from the back.\n    // >>>\
    \ PrependExclamation(\"Hello, World!\")\n    // (\"Hello, World\")\n    public\
    \ static string PrependExclamation(string str) {\n        return str.Remove(0,\
    \ 1).Remove(str.Length - 1, 1);\n    }\n\n    // Given a string, return a string\
    \ where the first and last characters have been exchanged,\n    // and all other\
    \ characters have been left intact.\n    // >>> FirstAndLast('Hello World')\n\
    \    // ('Wlllo World')\n    public static string FirstAndLast(string str) {\n\
    \        return str.Substring(1, str.Length - 1);\n    }\n\n    // Given a string,\
    \ return a string where \"not\" has been added to the front,\n    // \"not\" has\
    \ been removed from the back,\n    // and all other characters have been left\
    \ intact.\n    // >>> PrependNot(\"Hello, World!\")\n    // (\"not Hello, World!\"\
    )\n    public static string PrependNot(string str) {\n        return \"not \"\
    \ + str;\n    }\n\n    // Given a string, return a string where the first and\
    \ last characters have been exchanged,\n    // and all other characters have been\
    \ left intact.\n    // >>> FirstAndLast('Hello World')\n    // ('Wlllo World')\n\
    \    public static string FirstAndLast(string str", '        return String.Join("",
    str.Select(x => (char)x.ToUpper()));', "        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (Char.IsLower(str[i])) {\n                str[i] = Char.ToUpper(str[i]);\n\
    \            }\n            else {\n                str[i] = Char.ToLower(str[i]);\n\
    \            }\n        }\n        return str;", "        int i;\n        char[]\
    \ chars = str.ToCharArray();\n        for (i = 0; i < chars.Length; i++) {\n \
    \           if (chars[i] >= 'a' && chars[i] <= 'z')\n                chars[i]\
    \ -= 'a' - 'A';\n            else if (chars[i] >= 'A' && chars[i] <= 'Z')\n  \
    \              chars[i] += 'a' - 'A';\n        }\n        return new string(chars);",
  '        return String.Join("", str.ToLower().Select(x => String.ToUpper(x)));',
  "        for (int i = 0; i < str.Length; i++) {\n            if (Char.IsLower(str[i]))\n\
    \                str[i] = Char.ToUpper(str[i]);\n            else\n          \
    \      str[i] = Char.ToLower(str[i]);\n        }\n        return str;", "    \
    \    char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n            \
    \    chars[i] -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A'\
    \ && chars[i] <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n\
    \        }\n        return new string(chars);", "        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >=\
    \ 'a' && chars[i] <= 'z') {\n                chars[i] -= 'a' - 'A';\n        \
    \    }\n            else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n         \
    \       chars[i] += 'a' - 'A';\n            }\n        }\n        return new string(chars);",
  "        return String.Join(\"\",\n            Enumerable.Of(str).Select(x => {\n\
    \                if (x.ToLower() != x)\n                    return x.ToUpper();\n\
    \                else\n                    return x.ToLower();\n            }).ToArray());",
  "        int strLength = str.Length;\n        char[] chars = new char[strLength];\n\
    \        for (int i = 0; i < strLength; i++) {\n            chars[i] = (char)\
    \ (str[i] + ('a' - 'A'));\n        }\n        return new String(chars);", "  \
    \      return String.Join(\"\",\n            Enumerable.Of(str.ToCharArray())\n\
    \                .Select(c => (char) ((c >= 'a' && c <= 'z') ? (c - 32) : c))\n\
    \                .ToArray());", '        return String.Join("", str.ToLower().Select(x
    => (char)(x.ToUpper())));', "        return String.Join(\"\",\n            Enumerable.Of<string>(str.ToLower()).Select(x\
    \ => String.ToUpper(x)).ToList());", "        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >=\
    \ 'a' && chars[i] <= 'z') {\n                chars[i] = (char)(chars[i] - 'a'\
    \ + 'A');\n            }\n        }\n        return new string(chars);", "   \
    \     var result = \"\";\n        for (var i = 0; i < str.Length; i++) {\n   \
    \         var c = str[i];\n            if (c >= 'a' && c <= 'z') {\n         \
    \       result += (char)(c - 32);\n            }\n            else {\n       \
    \         result += c;\n            }\n        }\n        return result;", '        return
    String.Join("", str.ToLower().Select(x => (char)(x.ToUpper())));', '        return
    String.Join("", str.ToLower().Select(c => (char)(c.ToUpper())));', '        return
    String.Join("", str.ToLower().Select(x => (char)(x.ToUpper())));', "        return\
    \ String.Join(\"\", str.Select(x => x.ToUpper()));\n    }\n\n    // Given a string,\
    \ return a string where the first and last characters have been exchanged,\n \
    \   // but all other characters are left intact.\n    // >>> FlipFirstAndLast(\"\
    code\")\n    // \"eodc\"\n    // >>> FlipFirstAndLast(\"a\")\n    // \"a\"\n \
    \   public static string FlipFirstAndLast(string str) {\n        return str.Substring(1,\
    \ str.Length - 1) + str.Substring(0, 1);\n    }\n\n    // Given a string, return\
    \ a string where every lowercase character has been changed to\n    // uppercase,\
    \ but all other characters are left intact.\n    // >>> FlipCaseInsensitive(\"\
    hello\")\n    // \"HELLO\"\n    public static string FlipCaseInsensitive(string\
    \ str) {\n        return str.ToUpper();\n    }\n\n    // Given a string, return\
    \ a string where every uppercase character has been changed to\n    // lowercase,\
    \ but all other characters are left intact.\n    // >>> FlipCaseSensitive(\"HELLO\"\
    )\n    // \"hello\"\n    public static string FlipCaseSensitive(string str) {\n\
    \        return str.ToLower();\n    }\n\n    // Given a string, return a string\
    \ where the first and last characters have been exchanged,\n    // but all other\
    \ characters are left intact.\n    // >>> FlipFirstAndLast(\"code\")\n    // \"\
    eodc\"\n    // >>> FlipFirstAndLast(\"a\")\n    // \"a\"\n    public static string\
    \ FlipFirstAndLast(string str) {\n        return str.Substring(1, str.Length -\
    \ 1) + str.Substring(0, 1);\n    }\n\n    // Given a string, return a string where\
    \ the first character is now uppercase,\n    // but the remaining characters are\
    \ left as-is.\n    // >>> Capitalize(\"hello\")\n    // \"Hello\"\n    public\
    \ static string Capitalize(string str) {\n        return str.Substring(0, 1).ToUpper()\
    \ + str.Substring(1);\n    }\n\n    // Given a string, return a string where the\
    \ first character is now uppercase,\n    // but the", '        return String.Join("",
    str.Select(x => (x.ToLower() == x) ? x.ToUpper() : x.ToLower()));', "        char[]\
    \ chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length; i++) {\n\
    \            if (chars[i] >= 'a' && chars[i] <= 'z')\n                chars[i]\
    \ -= 'a' - 'A';\n            else if (chars[i] >= 'A' && chars[i] <= 'Z')\n  \
    \              chars[i] += 'a' - 'A';\n        }\n        return new string(chars);",
  '        return String.Join("", str.ToLower().Select(x => (char)x.ToUpper()));',
  '        return String.Join("", str.Select(x => (x.ToLower() == x) ? x.ToUpper()
    : x));', "        return String.Join(\"\",\n            Enumerable.Of(str).Select(x\
    \ => (char)x.ToUpper()).ToArray());", "        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (str[i] >= 'a' && str[i] <= 'z') {\n                str[i]\
    \ = (char)(str[i] - 'a' + 'A');\n            }\n        }\n        return str;",
  '        return String.Join("", str.Select(x => (char)x.ToUpper()));', '        return
    String.Join("", str.Select(x => (x.ToLower() == x) ? x.ToUpper() : x.ToLower()));',
  "        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z')\n              \
    \  chars[i] -= 'a' - 'A';\n            else if (chars[i] >= 'A' && chars[i] <=\
    \ 'Z')\n                chars[i] += 'a' - 'A';\n        }\n        return new\
    \ string(chars);", "        char[] chars = str.ToCharArray();\n        for (int\
    \ i = 0; i < chars.Length; i++) {\n            if (chars[i] >= 'a' && chars[i]\
    \ <= 'z')\n                chars[i] -= 'a' - 'A';\n            else if (chars[i]\
    \ >= 'A' && chars[i] <= 'Z')\n                chars[i] += 'a' - 'A';\n       \
    \ }\n        return new string(chars);", '        return String.Join("", str.ToLower().Select(x
    => (char)x.ToUpper()));', "        int strLength = str.Length;\n        string\
    \ result = \"\";\n        for (int i = 0; i < strLength; i++) {\n            if\
    \ (str[i] >= 'a' && str[i] <= 'z') {\n                result += (char)(str[i]\
    \ - 32);\n            }\n            else {\n                result += str[i];\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ StringBuilder();\n        for (var i = 0; i < str.Length; i++) {\n         \
    \   var c = str[i];\n            if (c >= 'a' && c <= 'z') {\n               \
    \ result.Append(c.ToUpper());\n            }\n            else {\n           \
    \     result.Append(c.ToLower());\n            }\n        }\n        return result.ToString();",
  '        return String.Join("", str.ToLower().Select(x => String.ToUpper(x)));',
  "        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n            \
    \    chars[i] -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A'\
    \ && chars[i] <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n\
    \        }\n        return new string(chars);", "        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (Char.IsLower(str[i]))\n                str[i] = Char.ToUpper(str[i]);\n\
    \            else\n                str[i] = Char.ToLower(str[i]);\n        }\n\
    \        return str;", '        return String.Join("", str.ToLower().Select(x
    => (char)(x.ToUpper())));', "        return String.Join(\"\", str.Select(x =>\
    \ (x.ToLower() == x) ? x.ToUpper() : x));\n    }\n\n    // For a given string,\
    \ return the number of times a substring is repeated.\n    // >>> RepeatCount(\"\
    abcabcabc\", \"abc\")\n    // 3\n    public static int RepeatCount(string str,\
    \ string sub) {\n        int count = 0;\n        int index = 0;\n        while\
    \ ((index = str.IndexOf(sub, index)) != -1) {\n            count++;\n        \
    \    index += sub.Length;\n        }\n        return count;\n    }\n\n    // For\
    \ a given string, return the number of times a character is repeated.\n    //\
    \ >>> RepeatCount(\"abcabcabc\", 'a')\n    // 3\n    public static int RepeatCount(string\
    \ str, char ch) {\n        int count = 0;\n        int index = 0;\n        while\
    \ ((index = str.IndexOf(ch, index)) != -1) {\n            count++;\n         \
    \   index++;\n        }\n        return count;\n    }\n\n    // For a given string,\
    \ return the number of times a character is repeated.\n    // >>> RepeatCount(\"\
    abcabcabc\", 'a', 'b')\n    // 1\n    public static int RepeatCount(string str,\
    \ char ch1, char ch2) {\n        int count = 0;\n        int index = 0;\n    \
    \    while ((index = str.IndexOf(ch1, index)) != -1) {\n            count++;\n\
    \            index++;\n            if (index >= str.Length) break;\n         \
    \   if (str[index] == ch2) {\n                index++;\n                break;\n\
    \            }\n        }\n        return count;\n    }\n\n    // For a given\
    \ string, return the number of times a character is repeated.\n    // >>> RepeatCount(\"\
    abcabcabc\", 'a', 'b', 'c')\n    // 2\n    public static int RepeatCount(string\
    \ str, char ch1, char ch2, char ch3) {\n        int count = 0;\n        int index\
    \ = 0;\n        while ((index = str.IndexOf(ch1, index)) != -1) {\n          \
    \  count++;\n            index++;\n            if (index >=", "        char[]\
    \ chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length; i++) {\n\
    \            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i]\
    \ -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A' && chars[i]\
    \ <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n        }\n\
    \        return new string(chars);", "        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >=\
    \ 'a' && chars[i] <= 'z') {\n                chars[i] -= 'a' - 'A';\n        \
    \    }\n            else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n         \
    \       chars[i] += 'a' - 'A';\n            }\n        }\n        return new string(chars);",
  "        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n            \
    \    chars[i] -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A'\
    \ && chars[i] <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n\
    \        }\n        return new string(chars);", "        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >=\
    \ 'a' && chars[i] <= 'z') {\n                chars[i] = (char)(chars[i] - 'a'\
    \ + 'A');\n            }\n        }\n        return new string(chars);", "   \
    \     int len = str.Length;\n        char[] chars = new char[len];\n        for\
    \ (int i = 0; i < len; i++) {\n            chars[i] = str[i];\n            if\
    \ (chars[i] >= 'a' && chars[i] <= 'z')\n                chars[i] -= 'a' - 'A';\n\
    \        }\n        return new string(chars);", "        var result = \"\";\n\
    \        for (var i = 0; i < str.Length; i++) {\n            var c = str[i];\n\
    \            if (c >= 'a' && c <= 'z') {\n                c = c.ToUpper();\n \
    \           }\n            else if (c >= 'A' && c <= 'Z') {\n                c\
    \ = c.ToLower();\n            }\n            result += c;\n        }\n       \
    \ return result;", "        int len = str.Length;\n        char[] chars = new\
    \ char[len];\n        for (int i = 0; i < len; i++) {\n            char c = str[i];\n\
    \            if (c >= 'a' && c <= 'z') {\n                chars[i] = (char)(c\
    \ - ('a' - 'A'));\n            }\n            else {\n                chars[i]\
    \ = c;\n            }\n        }\n        return new string(chars);", "      \
    \  char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n            \
    \    chars[i] -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A'\
    \ && chars[i] <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n\
    \        }\n        return new string(chars);", "        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >=\
    \ 'a' && chars[i] <= 'z') {\n                chars[i] = (char)(chars[i] - 'a'\
    \ + 'A');\n            }\n        }\n        return new string(chars);", "   \
    \     var result = new char[str.Length];\n        for (var i = 0; i < str.Length;\
    \ i++) {\n            result[i] = str[i] >= 'a' && str[i] <= 'z' ? (char)((int)str[i]\
    \ + ('A' - 'a')) : str[i];\n        }\n        return string(result);", '        return
    String.Join("", str.Select(x => (char)(x.ToUpper() + 32)).ToArray());', "    \
    \    char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n            \
    \    chars[i] -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A'\
    \ && chars[i] <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n\
    \        }\n        return new string(chars);", '        return String.Join("",
    str.Select(x => (char)x.ToUpper()));', '        return String.Join("", str.Select(x
    => (x.ToLower() == x) ? x.ToUpper() : x));', "        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >=\
    \ 'a' && chars[i] <= 'z') {\n                chars[i] = (char)(chars[i] - 'a'\
    \ + 'A');\n            }\n        }\n        return new string(chars);", '        return
    String.Join("", str.ToLower().Select(x => (char)x.ToUpper()));', '        return
    String.Join("", str.Select(x => (x.ToLower() == x) ? x.ToUpper() : x));', '        return
    String.Join("", str.Select(x => (x.ToLower() == x) ? x.ToUpper() : x.ToLower()));',
  '        return String.Join("", str.ToLower().Select(x => (char)(x.ToUpper())));',
  "        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n            \
    \    chars[i] -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A'\
    \ && chars[i] <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n\
    \        }\n        return new string(chars);", "        int i = 0;\n        while\
    \ (i < str.Length) {\n            if (Char.IsLower(str[i]))\n                str[i]\
    \ = Char.ToUpper(str[i]);\n            else\n                str[i] = Char.ToLower(str[i]);\n\
    \            i++;\n        }\n        return str;", "        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >=\
    \ 'a' && chars[i] <= 'z') {\n                chars[i] -= 'a' - 'A';\n        \
    \    }\n            else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n         \
    \       chars[i] += 'a' - 'A';\n            }\n        }\n        return new string(chars);",
  '        return String.Join("", str.ToLower().Select(x => (char)x.ToUpper()));',
  '        return String.Join("", str.ToLower().Select(x => (char)(x.ToUpper())));',
  "        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n            \
    \    chars[i] -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A'\
    \ && chars[i] <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n\
    \        }\n        return new string(chars);", '        return String.Join("",
    str.Select(x => (char)x.ToUpper()));', '        return String.Join("", str.Select(x
    => (x.ToLower())));', '        return str.ToUpper();', "        char[] chars =\
    \ str.ToCharArray();\n        for (int i = 0; i < chars.Length; i++) {\n     \
    \       if (chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] -=\
    \ 'a' - 'A';\n            }\n            else if (chars[i] >= 'A' && chars[i]\
    \ <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n        }\n\
    \        return new string(chars);", "        var result = new StringBuilder();\n\
    \        for (var i = 0; i < str.Length; i++) {\n            var c = str[i];\n\
    \            if (c >= 'a' && c <= 'z')\n                c = (char)(c + ('A' -\
    \ 'a'));\n            result.Append(c);\n        }\n        return result.ToString();",
  "        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n            \
    \    chars[i] -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A'\
    \ && chars[i] <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n\
    \        }\n        return new string(chars);", "        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >=\
    \ 'a' && chars[i] <= 'z') {\n                chars[i] = (char)(chars[i] - 'a'\
    \ + 'A');\n            }\n        }\n        return new string(chars);", '        return
    String.Join("", str.Select(x => x.ToUpper()).ToArray());', "        var result\
    \ = \"\";\n        for (var i = 0; i < str.Length; i++) {\n            var c =\
    \ str[i];\n            if (c >= 'a' && c <= 'z') {\n                c = (char)(c\
    \ - 'a' + 'A');\n            }\n            result += c;\n        }\n        return\
    \ result;", '        return String.Join("", str.Select(x => (char)x.ToUpper()));',
  '        return String.Join("", str.ToLower().Select(c => (char)c.ToUpper()));',
  '        return String.Join("", str.Select(x => x.ToUpper()));', "        char[]\
    \ chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length; i++) {\n\
    \            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i]\
    \ -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A' && chars[i]\
    \ <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n        }\n\
    \        return new string(chars);", '        return String.Join("", str.Select(x
    => (char)x.ToUpper()));', '        return String.Join("", str.ToLower().Select(x
    => (char)x.ToUpper()));', '        return String.Join("", str.Select(x => (x.ToLower()
    == x) ? x.ToUpper() : x));', '        return String.Join("", str.ToLower().Select(x
    => String.ToUpper(x)));', '        return String.Join("", str.Select(x => (x.ToLower()
    == x) ? x.ToUpper() : x.ToLower()));', "        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >=\
    \ 'a' && chars[i] <= 'z') {\n                chars[i] = (char)(chars[i] - 'a'\
    \ + 'A');\n            }\n        }\n        return new string(chars);", "   \
    \     var result = new char[str.Length];\n        for (var i = 0; i < str.Length;\
    \ i++) {\n            result[i] = str[i] >= 'a' && str[i] <= 'z' ? (char)((int)str[i]\
    \ + (int)'A' - (int)'a') : str[i];\n        }\n        return string(result);",
  "        return String.Join(\"\",\n            Enumerable.Of(str).Select(c => (char)c).Select(c\
    \ => (char)(((int)c - (int)'a') + (int)'A')).ToArray());\n    }\n\n    // For\
    \ a given string, return the number of times that a substring is repeated in the\
    \ string.\n    // >>> CountSubstring(\"abcabcabc\", \"abc\")\n    // 2\n    public\
    \ static int CountSubstring(string str, string sub) {\n        int count = 0;\n\
    \        int index = 0;\n        while ((index = str.IndexOf(sub, index)) != -1)\
    \ {\n            count++;\n            index += sub.Length;\n        }\n     \
    \   return count;\n    }\n\n    // For a given string, return the number of times\
    \ that a substring is repeated in the string.\n    // >>> CountSubstring(\"abcabcabc\"\
    , \"abc\", 2)\n    // 1\n    public static int CountSubstring(string str, string\
    \ sub, int count) {\n        int index = 0;\n        while ((index = str.IndexOf(sub,\
    \ index)) != -1 && count > 0) {\n            count--;\n            index += sub.Length;\n\
    \        }\n        return count;\n    }\n\n    // For a given string, return\
    \ the number of times that a substring is repeated in the string.\n    // >>>\
    \ CountSubstring(\"abcabcabc\", \"abc\", 2)\n    // 1\n    public static int CountSubstring(string\
    \ str, string sub, int count, int startIndex) {\n        int index = startIndex;\n\
    \        while ((index = str.IndexOf(sub, index)) != -1 && count > 0) {\n    \
    \        count--;\n            index += sub.Length;\n        }\n        return\
    \ count;\n    }\n\n    // For a given string, return the number of times that\
    \ a substring is repeated in the string.\n    // >>> CountSubstring(\"abcabcabc\"\
    , \"abc\", 2, 2)\n    // 0\n    public static int CountSubstring(string str, string\
    \ sub, int count, int startIndex, int endIndex) {\n        int index = startIndex;\n\
    \        while ((index = str.IndexOf(sub, index)) != -1 && count", "        char[]\
    \ chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length; i++) {\n\
    \            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i]\
    \ -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A' && chars[i]\
    \ <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n        }\n\
    \        return new string(chars);", '        return String.Join("", str.Select(x
    => x.ToUpper()));', "        return String.Join(\"\", str.Select(x => (x >= 'a'\
    \ && x <= 'z') ? (char)(x - 32) : x));", "        int strLength = str.Length;\n\
    \        char[] chars = new char[strLength];\n        for (int i = 0; i < strLength;\
    \ i++) {\n            chars[i] = str[i];\n            if (chars[i] >= 'a' && chars[i]\
    \ <= 'z') {\n                chars[i] -= ('a' - 'A');\n            }\n       \
    \ }\n        return new string(chars);\n    }\n\n    // For a given string, return\
    \ the string reversed.\n    // >>> Reverse(\"Hello\")\n    // (\"olleH\")\n  \
    \  public static string Reverse(string str) {\n        int strLength = str.Length;\n\
    \        char[] chars = new char[strLength];\n        for (int i = 0; i < strLength;\
    \ i++) {\n            chars[i] = str[strLength - i - 1];\n        }\n        return\
    \ new string(chars);\n    }\n\n    // For a given string, return the string with\
    \ the first and last characters exchanged.\n    // >>> FirstAndLastChar(\"Hello\"\
    )\n    // (\"ellO\")\n    public static string FirstAndLastChar(string str) {\n\
    \        return str.Substring(1, str.Length - 1) + str.Substring(0, 1);\n    }\n\
    \n    // For a given string, return a string where adjacent characters that are\
    \ the same have been reduced to a single character.\n    // >>> Simplify(\"code\"\
    )\n    // (\"cod\")\n    public static string Simplify(string str) {\n       \
    \ int strLength = str.Length;\n        char[] chars = new char[strLength];\n \
    \       int index = 0;\n        for (int i = 0; i < strLength; i++) {\n      \
    \      char c = str[i];\n            if (i == 0 || str[i - 1] != c) {\n      \
    \          chars[index++] = c;\n            }\n        }\n        return new string(chars,\
    \ 0, index);\n    }\n\n    // For a given string, return the string with all the\
    \ vowels removed.\n    // >>> RemoveVowels(\"Hello\")\n    // (\"llo\")\n    public\
    \ static string RemoveVowels(string str) {\n        int strLength = str", "  \
    \      for (int i = 0; i < str.Length; i++) {\n            if (Char.IsLower(str[i]))\n\
    \                str[i] = Char.ToUpper(str[i]);\n            else\n          \
    \      str[i] = Char.ToLower(str[i]);\n        }\n        return str;", "    \
    \    char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n            \
    \    chars[i] = (char)(chars[i] - 'a' + 'A');\n            }\n        }\n    \
    \    return new string(chars);\n    }\n\n    // Given a string, return a string\
    \ where the first and last characters have been exchanged.\n    // The original\
    \ string will be length 2 or more.\n    // >>> ReversePolishNotation(\"1->2->3\"\
    )\n    // \"3->2->1\"\n    public static string ReversePolishNotation(string str)\
    \ {\n        if (str.Length < 2) {\n            throw new Exception(\"Invalid\
    \ input\");\n        }\n        Stack<char> stack = new Stack<char>();\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            char c = str[i];\n   \
    \         if (c == '-') {\n                if (stack.Count == 0) {\n         \
    \           throw new Exception(\"Invalid input\");\n                }\n     \
    \           char top = stack.Peek();\n                if (top == '-') {\n    \
    \                stack.Pop();\n                }\n                else {\n   \
    \                 stack.Push('-');\n                }\n            }\n       \
    \     else {\n                stack.Push(c);\n            }\n        }\n     \
    \   if (stack.Count != 1) {\n            throw new Exception(\"Invalid input\"\
    );\n        }\n        return stack.Peek() + \"->\" + stack.Pop() + \"->\" + stack.Pop();\n\
    \    }\n\n    // Given a string, return a string where \"not \" has been added\
    \ to the front.\n    // The original string will be length 1 or more.\n    //\
    \ >>> PrefixTheNot(\"not hello\")\n    // \"not hello\"\n    public static string\
    \ PrefixTheNot(string str) {\n        if (str.Length < 2) {\n            throw\
    \ new Exception(\"Invalid input\");\n        }\n        return \"not \" + str;\n\
    \    }\n\n    // Given a string, return a string where the first character is\
    \ in uppercase and the rest are in lowercase.\n", "        var result = \"\";\n\
    \        for (var i = 0; i < str.Length; i++) {\n            var c = str[i];\n\
    \            if (c >= 'a' && c <= 'z') {\n                c = (char)(c - 'a' +\
    \ 'A');\n            }\n            result += c;\n        }\n        return result;",
  "        var result = \"\";\n        for (var i = 0; i < str.Length; i++) {\n  \
    \          var c = str[i];\n            if (c >= 'a' && c <= 'z') {\n        \
    \        result += (char)(c - 32);\n            }\n            else {\n      \
    \          result += c;\n            }\n        }\n        return result;", " \
    \       char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n            \
    \    chars[i] -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A'\
    \ && chars[i] <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n\
    \        }\n        return new string(chars);", "        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >=\
    \ 'a' && chars[i] <= 'z') {\n                chars[i] = (char)(chars[i] - 'a'\
    \ + 'A');\n            }\n        }\n        return new string(chars);", '        return
    String.Join("", str.Select(x => x.ToUpper()));', '        return str.ToUpper()
    + str.ToLower().Substring(1);', '        return String.Join("", str.Select(x =>
    (x.ToLower() == x) ? x.ToUpper() : x.ToLower()));', "        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >=\
    \ 'a' && chars[i] <= 'z') {\n                chars[i] -= 'a' - 'A';\n        \
    \    }\n            else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n         \
    \       chars[i] += 'a' - 'A';\n            }\n        }\n        return new string(chars);",
  "        return String.Join(\"\",\n            Enumerable.Of(str).Select(x => (char)x.ToUpper()).ToArray());\n\
    \    }\n\n    // For a given string, return the number of times that a substring\
    \ is repeated.\n    // >>> CountSubstring(\"abcabcabc\", \"abc\")\n    // 2\n\
    \    public static int CountSubstring(string str, string sub) {\n        int count\
    \ = 0;\n        int index = 0;\n        while ((index = str.IndexOf(sub, index))\
    \ != -1) {\n            count++;\n            index += sub.Length;\n        }\n\
    \        return count;\n    }\n\n    // For a given string, return the number\
    \ of times that a substring is repeated.\n    // >>> CountSubstring(\"abcabcabc\"\
    , \"abc\", 2)\n    // 1\n    public static int CountSubstring(string str, string\
    \ sub, int count) {\n        int index = 0;\n        while ((index = str.IndexOf(sub,\
    \ index)) != -1 && count > 0) {\n            count--;\n            index += sub.Length;\n\
    \        }\n        return count;\n    }\n\n    // For a given string, return\
    \ the number of times that a substring is repeated.\n    // >>> CountSubstring(\"\
    abcabcabc\", \"abc\", 2)\n    // 1\n    public static int CountSubstring(string\
    \ str, string sub, int count, int startIndex) {\n        int index = startIndex;\n\
    \        while ((index = str.IndexOf(sub, index)) != -1 && count > 0) {\n    \
    \        count--;\n            index += sub.Length;\n        }\n        return\
    \ count;\n    }\n\n    // For a given string, return the number of times that\
    \ a substring is repeated.\n    // >>> CountSubstring(\"abcabcabc\", \"abc\",\
    \ 2, 2)\n    // 0\n    public static int CountSubstring(string str, string sub,\
    \ int count, int startIndex, int endIndex) {\n        int index = startIndex;\n\
    \        while ((index = str.IndexOf(sub, index)) != -1 && count > 0 && index\
    \ < endIndex) {\n            count--;\n            index += sub.Length;\n    \
    \    }\n        return count;\n", '        return String.Join("", str.Select(x
    => (x.ToLower() == x) ? x.ToUpper() : x));', "        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (str[i] >= 'a' && str[i] <= 'z') {\n                str[i]\
    \ = (char)(str[i] - 'a' + 'A');\n            }\n        }\n        return str;",
  "        return String.Join(\"\",\n            Enumerable.Of(str.ToCharArray())\n\
    \                .Select(x => (char)(x >= 'a' && x <= 'z' ? x + ('A' - 'a') :\
    \ x))\n                .ToArray());", "        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >=\
    \ 'a' && chars[i] <= 'z')\n                chars[i] -= 'a' - 'A';\n          \
    \  else if (chars[i] >= 'A' && chars[i] <= 'Z')\n                chars[i] += 'a'\
    \ - 'A';\n        }\n        return new string(chars);", "        char[] chars\
    \ = str.ToCharArray();\n        for (int i = 0; i < chars.Length; i++) {\n   \
    \         if (chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i]\
    \ -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A' && chars[i]\
    \ <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n        }\n\
    \        return new string(chars);", "        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >=\
    \ 'a' && chars[i] <= 'z') {\n                chars[i] -= 'a' - 'A';\n        \
    \    }\n            else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n         \
    \       chars[i] += 'a' - 'A';\n            }\n        }\n        return new string(chars);",
  '        return String.Join("", str.ToLower().Select(x => (char)x.ToUpper()));',
  "        var result = new StringBuilder();\n        for (var i = 0; i < str.Length;\
    \ i++) {\n            var c = str[i];\n            if (c >= 'a' && c <= 'z') {\n\
    \                result.Append(c.ToUpper());\n            }\n            else\
    \ {\n                result.Append(c.ToLower());\n            }\n        }\n \
    \       return result.ToString();", "        return String.Join(\"\",\n      \
    \      Enumerable.Of(str).Select(c => (char)c.ToUpper()).ToArray());", "     \
    \   char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n            \
    \    chars[i] -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A'\
    \ && chars[i] <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n\
    \        }\n        return new string(chars);", '        return String.Join("",
    str.Select(x => (char)(x.ToUpper() + 32)).ToArray());', "        return String.Join(\"\
    \", str.Select(x => (x >= 'a' && x <= 'z') ? (char)(x - 32) : x));", '        return
    String.Join("", str.ToLower().Select(x => (char)(x.ToUpper())));', "        var\
    \ result = new char[str.Length];\n        for (var i = 0; i < str.Length; i++)\
    \ {\n            var c = str[i];\n            if (c >= 'a' && c <= 'z') {\n  \
    \              c = (char)(c - ('a' - 'A'));\n            }\n            result[i]\
    \ = c;\n        }\n        return string(result);", '        return String.Join("",
    str.Select(x => (char)x.ToUpper()));', '        return String.Join("", str.Select(x
    => (char)(x.ToUpper() + 32)).ToArray());', "        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >=\
    \ 'a' && chars[i] <= 'z') {\n                chars[i] -= 'a' - 'A';\n        \
    \    }\n            else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n         \
    \       chars[i] += 'a' - 'A';\n            }\n        }\n        return new string(chars);",
  '        return String.Join("", str.ToLower().Select(x => (char)(x.ToUpper())));',
  '        return String.Join("", str.Select(x => (char)x.ToUpper()));', "       \
    \ var result = new char[str.Length];\n        for (var i = 0; i < str.Length;\
    \ i++) {\n            result[i] = (char) (str[i] >= 'a' && str[i] <= 'z' ? (char)\
    \ (str[i] - 'a' + 'A') : str[i]);\n        }\n        return string.Copy(result);",
  "        int i = 0;\n        while (i < str.Length) {\n            char c = str[i];\n\
    \            if (c >= 'a' && c <= 'z') {\n                str[i] = (char)(c -\
    \ ('a' - 'A'));\n            }\n            i++;\n        }\n        return str;",
  "        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n            \
    \    chars[i] -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A'\
    \ && chars[i] <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n\
    \        }\n        return new string(chars);", "        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (Char.IsLower(str[i]))\n                str[i] = Char.ToUpper(str[i]);\n\
    \            else\n                str[i] = Char.ToLower(str[i]);\n        }\n\
    \        return str;", '        return String.Join("", str.Select(x => (char)x.ToUpper()));',
  '        return String.Join("", str.Select(x => (x.ToLower() == x) ? x.ToUpper()
    : x.ToLower()));', "        return String.Join(\"\",\n            Enumerable.Of(str).Select(x\
    \ => (char)x.ToUpper()).ToArray());", '        return String.Join("", str.Select(x
    => (x.ToLower() == x) ? x.ToUpper() : x.ToLower()));', "        return String.Join(\"\
    \",\n            Enumerable.Of<string>\n                .Select(x => x.ToUpper())\n\
    \                .Concat(Enumerable.Of<string>\n                    .Select(x\
    \ => x.ToLower()))\n                .ToList());", "        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >=\
    \ 'a' && chars[i] <= 'z')\n                chars[i] -= 'a' - 'A';\n          \
    \  else if (chars[i] >= 'A' && chars[i] <= 'Z')\n                chars[i] += 'a'\
    \ - 'A';\n        }\n        return new string(chars);", "        int len = str.Length;\n\
    \        char[] chars = new char[len];\n        for (int i = 0; i < len; i++)\
    \ {\n            char c = str[i];\n            if (c >= 'a' && c <= 'z') {\n \
    \               chars[i] = (char)(c - ('a' - 'A'));\n            }\n         \
    \   else {\n                chars[i] = c;\n            }\n        }\n        return\
    \ new string(chars);", '        return String.Join("", str.ToLower().Select(x
    => (char)x.ToUpper()));', '        return String.Join("", str.ToLower().Select(x
    => (char)x.ToUpper()));', "        char[] chars = str.ToCharArray();\n       \
    \ for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >= 'a' &&\
    \ chars[i] <= 'z') {\n                chars[i] = (char)(chars[i] - 'a' + 'A');\n\
    \            }\n        }\n        return new string(chars);", "        char[]\
    \ chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length; i++) {\n\
    \            if (chars[i] >= 'a' && chars[i] <= 'z')\n                chars[i]\
    \ -= 'a' - 'A';\n            else if (chars[i] >= 'A' && chars[i] <= 'Z')\n  \
    \              chars[i] += 'a' - 'A';\n        }\n        return new string(chars);",
  '        return String.Join("", str.ToLower().Select(x => (char)x.ToUpper()));',
  '        return String.Join("", str.Select(x => (char)x.ToUpper()));', "       \
    \ return String.Join(\"\",\n            Enumerable.Range(0, str.Length)\n    \
    \            .Select(i => (i % 2 == 0) ? str[i].ToUpper() : str[i].ToLower())\n\
    \                .ToArray());", "        for (int i = 0; i < str.Length; i++)\
    \ {\n            char c = str[i];\n            if (c >= 'a' && c <= 'z')\n   \
    \             str[i] = (char)(c - ('a' - 'A'));\n        }\n        return str;",
  "        var result = \"\";\n        for (var i = 0; i < str.Length; i++) {\n  \
    \          var c = str[i];\n            if (c >= 'a' && c <= 'z') {\n        \
    \        c = (char)(c - 'a' + 'A');\n            }\n            result += c;\n\
    \        }\n        return result;", '        return str.ToUpper();', "      \
    \  return String.Join(\"\",\n            Enumerable.Of<string>(str.ToLower()).Select(x\
    \ => String.ToUpper(x)).ToList());", "        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >=\
    \ 'a' && chars[i] <= 'z') {\n                chars[i] -= 'a' - 'A';\n        \
    \    }\n            else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n         \
    \       chars[i] += 'a' - 'A';\n            }\n        }\n        return new string(chars);",
  "        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n            \
    \    chars[i] -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A'\
    \ && chars[i] <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n\
    \        }\n        return new string(chars);", '        return String.Join("",
    str.ToLower().Select(x => (char)x.ToUpper()));', '        return String.Join("",
    str.Select(x => x.ToUpper()));', '        return String.Join("", str.Select(x
    => x.ToUpper()));', "        return String.Join(\"\",\n            Enumerable.Of<string>(str.ToLower()).Select(x\
    \ => String.ToUpper(x)).ToList());", "        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (str[i] >= 'a' && str[i] <= 'z') {\n                str[i]\
    \ = (char)(str[i] - ('a' - 'A'));\n            }\n        }\n        return str;",
  "        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z')\n              \
    \  chars[i] -= 'a' - 'A';\n            else if (chars[i] >= 'A' && chars[i] <=\
    \ 'Z')\n                chars[i] += 'a' - 'A';\n        }\n        return new\
    \ string(chars);", "        char[] chars = str.ToCharArray();\n        for (int\
    \ i = 0; i < chars.Length; i++) {\n            if (chars[i] >= 'a' && chars[i]\
    \ <= 'z') {\n                chars[i] -= 'a' - 'A';\n            }\n         \
    \   else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] +=\
    \ 'a' - 'A';\n            }\n        }\n        return new string(chars);", '        return
    String.Join("", str.Select(x => (x.ToLower() == x) ? x.ToUpper() : x.ToLower()));',
  '        return String.Join("", str.Select(x => (x.ToLower() == x) ? x.ToUpper()
    : x.ToLower()));', "        for (int i = 0; i < str.Length; i++) {\n         \
    \   char c = str[i];\n            if (c >= 'a' && c <= 'z') {\n              \
    \  str[i] = (char)(c - ('a' - 'A'));\n            }\n        }\n        return\
    \ str;", "        var result = \"\";\n        for (var i = 0; i < str.Length;\
    \ i++) {\n            var c = str[i];\n            if (c >= 'a' && c <= 'z') {\n\
    \                result += (char)(c - ('a' - 'A'));\n            }\n         \
    \   else {\n                result += c;\n            }\n        }\n        return\
    \ result;", '        return String.Join("", str.Select(x => (char)x.ToUpper()));',
  '        return str.ToUpper() + str.ToLower().Substring(1);', "        int len =\
    \ str.Length;\n        char[] chars = new char[len];\n        for (int i = 0;\
    \ i < len; i++) {\n            chars[i] = str[i];\n            if (chars[i] >=\
    \ 'a' && chars[i] <= 'z') {\n                chars[i] -= ('a' - 'A');\n      \
    \      }\n        }\n        return new string(chars);", "        return String.Join(\"\
    \",\n            Enumerable.Of<string>(str.ToLower()).Select(x => (char)x.ToUpper()).ToArray());",
  "        var result = \"\";\n        for (var i = 0; i < str.Length; i++) {\n  \
    \          var c = str[i];\n            if (c >= 'a' && c <= 'z') {\n        \
    \        c = (char)(c - 'a' + 'A');\n            }\n            result += c;\n\
    \        }\n        return result;", '        return String.Join("", str.ToLower().Select(c
    => (char)c.ToUpper()));', "        char[] chars = str.ToCharArray();\n       \
    \ for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >= 'a' &&\
    \ chars[i] <= 'z') {\n                chars[i] -= 'a' - 'A';\n            }\n\
    \            else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i]\
    \ += 'a' - 'A';\n            }\n        }\n        return new string(chars);",
  "        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n            \
    \    chars[i] = (char)(chars[i] - 'a' + 'A');\n            }\n        }\n    \
    \    return new string(chars);", "        int i = 0;\n        while (i < str.Length)\
    \ {\n            if (Char.IsLower(str[i])) {\n                str[i] = Char.ToUpper(str[i]);\n\
    \            }\n            else {\n                str[i] = Char.ToLower(str[i]);\n\
    \            }\n            i++;\n        }\n        return str;", '        return
    String.Join("", str.Select(x => (char)x.ToUpper()));', '        return String.Join("",
    str.Select(x => x.ToUpper()));', '        return String.Join("", str.Select(x
    => x.ToUpper()).ToList());', '        return String.Join("", str.ToLower().Select(x
    => (char)(x.ToUpper())));', "        char[] chars = str.ToCharArray();\n     \
    \   for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >= 'a'\
    \ && chars[i] <= 'z') {\n                chars[i] -= 'a' - 'A';\n            }\n\
    \            else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i]\
    \ += 'a' - 'A';\n            }\n        }\n        return new string(chars);",
  "        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n            \
    \    chars[i] -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A'\
    \ && chars[i] <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n\
    \        }\n        return new string(chars);", '        return String.Join("",
    str.Select(x => (x.ToLower() == x) ? x.ToUpper() : x.ToLower()));', '        return
    String.Join("", str.Select(x => (x.ToLower() == x) ? x.ToUpper() : x.ToLower()));',
  "        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n            \
    \    chars[i] -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A'\
    \ && chars[i] <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n\
    \        }\n        return new string(chars);", '        return String.Join("",
    str.Select(x => (x.ToLower() == x) ? x.ToUpper() : x.ToLower()));', "        char[]\
    \ chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length; i++) {\n\
    \            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i]\
    \ -= 'a' - 'A';\n            }\n            else if (chars[i] >= 'A' && chars[i]\
    \ <= 'Z') {\n                chars[i] += 'a' - 'A';\n            }\n        }\n\
    \        return new string(chars);", '        return String.Join("", str.Select(x
    => (x.ToLower() == x) ? x.ToUpper() : x.ToLower()));', "        for (int i = 0;\
    \ i < str.Length; i++) {\n            if (str[i] >= 'a' && str[i] <= 'z') {\n\
    \                str[i] = (char)(str[i] - 'a' + 'A');\n            }\n       \
    \ }\n        return str;"]
stop_tokens:
- "\n    }\n"
