{
  "name": "HumanEval_130_tri",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long> Tri(long n) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n",
  "completions": [
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.Last + result.Last / 2);\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        List<long> result = new List<long>(new long[] { 1, 3, 2, 8 });\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result;\n        if (n == 2)\n            return result;\n        if (n == 3)\n            return result;\n        if (n == 4)\n            return result;\n        if (n == 5)\n            return result;\n        if (n == 6)\n            return result;\n        if (n == 7)\n            return result;\n        if (n == 8)\n            return result;\n        if (n == 9)\n            return result;\n        if (n == 10)\n            return result;\n        if (n == 11)\n            return result;\n        if (n == 12)\n            return result;\n        if (n == 13)\n            return result;\n        if (n == 14)\n            return result;\n        if (n == 15)\n            return result;\n        if (n == 16)\n            return result;\n        if (n == 17)\n            return result;\n        if (n == 18)\n            return result;\n        if (n == 19)\n            return result;\n        if (n == 20)\n            return result;\n        if (n == 21)\n            return result;\n        if (n == 22)\n            return result;\n        if (n == 23)\n            return result;\n        if (n == 24)\n            return result;\n        if (n == 25)\n            return result;\n        if (n == 26)\n            return result;\n        if (n == 27)\n            return result;\n        if (n == 28)\n            return result;\n        if (n == 29)\n            return result;\n        if (n == 30)\n            return result;\n        if (n == 31)\n            return result;\n        if (n == 32)\n            return result;\n        if (n == 33)\n            return result;\n        if (n == 34)\n            return result;\n        if (n == 35)\n            return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            return result;\n        }\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        ",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n        if (n == 0) {\n            return new List<long>(new long[]{0L});\n        }\n        if (n == 1) {\n            return new List<long>(new long[]{1L});\n        }\n        List<long> result = new List<long>(new long[]{1L, 3L});\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 1));\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n % 2 == 0) {\n            for (int i = 2; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        else {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result[i - 1] + result[i - 2] + result[i]);\n            }\n        } else {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result[i - 1] + result[i - 2] + result[i]);\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        List<long> result = new List<long>();\n        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n            result.Add(1);\n        else {\n            long first = 1;\n            long second = 1;\n            long third = 1;\n            long previous = 1;\n            long current = 1;\n            for (int i = 1; i <= n; i++) {\n                current = first + second + third;\n                third = second;\n                second = first;\n                first = previous;\n                previous = current;\n                result.Add(current);\n            }\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1L);\n        result.Add(3L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2L);\n            result.Add(8L);\n            return result;\n        }\n        result.Add(2L);\n        result.Add(8L);\n        result.Add(3L);\n        result.Add(7L);\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n == 0) {\n            return new List<long>(new long[]{0L});\n        }\n        if (n == 1) {\n            return new List<long>(new long[]{1L});\n        }\n        List<long> result = new List<long>(new long[]{1L, 1L});\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        for (int i = 4; i <= n; i++) {\n            result.Add(result.Last() + result.Last() + result.Last());\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        long prev = 1;\n        long next = 3;\n        for (int i = 3; i <= n; i++) {\n            result.Add(prev + next);\n            prev = next;\n            next = result[i - 1] + result[i - 2];\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        List<long> result = new List<long>();\n        result.Add(1);\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result;\n        if (n % 2 == 0) {\n            result.Add(n / 2);\n            result.Add(n / 2 + 1);\n            result.Add(n / 2 + 2);\n            return result;\n        }\n        result.Add(n / 2);\n        result.Add(n / 2 + 1);\n        result.Add(n / 2 + 2);\n        result.Add(n / 2 + 3);\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n == 2) {\n            return result;\n        }\n        if (n == 3) {\n            return result;\n        }\n        if (n == 4) {\n            return result;\n        }\n        if (n == 5) {\n            return result;\n        }\n        if (n == 6) {\n            return result;\n        }\n        if (n == 7) {\n            return result;\n        }\n        if (n == 8) {\n            return result;\n        }\n        if (n == 9) {\n            return result;\n        }\n        if (n == 10) {\n            return result;\n        }\n        if (n == 11) {\n            return result;\n        }\n        if (n == 12) {\n            return result;\n        }\n        if (n == 13) {\n            return result;\n        }\n        if (n == 14) {\n            return result;\n        }\n        if (n == 15) {\n            return result;\n        }\n        if (n == 16) {\n            return result;\n        }\n        if (n == 17) {\n            return result;\n        }\n        if (n == 18) {\n            return result;\n        }\n        if (n == 19) {\n            return result;\n        }\n        if (n == 20) {\n            return result;\n        }\n        if (n == 21) {\n            return result;\n        }\n        if (n == 22) {\n            return result;\n        }\n        if (n == 23) {\n            return result;\n        }\n        if (n == 24) {\n            return result;\n        }\n        if (n == 25) {\n            return result;\n        }\n        if (n == 26) {\n            return result;\n        }\n        if (",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.Last() + result.Last() + result.Last());\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0L });\n        if (n == 1)\n            return new List<long>(new long[] { 1L });\n        if (n == 2)\n            return new List<long>(new long[] { 1L, 3L });\n        if (n == 3)\n            return new List<long>(new long[] { 1L, 3L, 2L, 8L });\n        List<long> result = new List<long>(new long[] { 1L, 1L });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.Last() + (i / 2));\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        else {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n\");\n        }\n        if (n == 0) {\n            return new List<long>(new long[]{0L});\n        }\n        if (n == 1) {\n            return new List<long>(new long[]{1L});\n        }\n        List<long> result = new List<long>(new long[]{1L, 3L});\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.Last() + result.Last() + result.Last());\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[]{0});\n        if (n == 1)\n            return new List<long>(new long[]{1});\n        if (n == 2)\n            return new List<long>(new long[]{1, 3});\n        if (n == 3)\n            return new List<long>(new long[]{1, 3, 2, 8});\n        if (n == 4)\n            return new List<long>(new long[]{1, 3, 2, 8, 3, 5, 2, 3, 5, 8});\n        List<long> result = new List<long>(new long[]{1, 3});\n        for (int i = 2; i <= n; i++) {\n            result = result.Concat(Tri(i - 1).Concat(Tri(i - 2).Concat(Tri(i + 1))));\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        List<long> result = new List<long>();\n        result.Add(1);\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result;\n        if (n % 2 == 0) {\n            result.Add(n / 2);\n            result.Add(n / 2);\n            result.Add(n / 2);\n            return result;\n        }\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            return result;\n        }\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        ",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n        if (n == 0) {\n            return new List<long>(new long[] { 0 });\n        }\n        if (n == 1) {\n            return new List<long>(new long[] { 1 });\n        }\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 1));\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        if (n == 4)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3 });\n        if (n == 5)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3, 2, 2, 2, 2, 2 });\n        if (n == 6)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3, 2, 2, 2, 2, 2, 2, 2 });\n        if (n == 7)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 });\n        if (n == 8)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 });\n        if (n == 9)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 });\n        if (n == 10)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 });\n        if (n == 11)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n\");\n        }\n        List<long> result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 3) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 4) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 5) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 6) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 7) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 8) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 9) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 10) {\n",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 1, 3 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        for (int i = 4; i <= n; i++) {\n            result.Add(result.Last() + result.Item(i - 2) + result.Item(i - 1));\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0L });\n        if (n == 1)\n            return new List<long>(new long[] { 1L });\n        if (n == 2)\n            return new List<long>(new long[] { 1L, 3L });\n        if (n == 3)\n            return new List<long>(new long[] { 1L, 3L, 2L, 8L });\n        List<long> result = new List<long>(new long[] { 1L, 1L });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        List<long> result = new List<long>();\n        result.Add(1);\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result;\n        if (n == 2)\n            return result;\n        if (n % 2 == 0) {\n            result.Add(n / 2);\n            result.Add(n / 2 + 1);\n            result.Add(n / 2 + 2);\n            return result;\n        }\n        result.Add(n / 2);\n        result.Add(n / 2 + 1);\n        result.Add(n / 2 + 2);\n        result.Add(n / 2 + 3);\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        List<long> result = new List<long>(new long[] { 1, 3, 2, 8 });\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result;\n        if (n == 2)\n            return result;\n        if (n == 3)\n            return result;\n        if (n == 4)\n            return result;\n        if (n == 5)\n            return result;\n        if (n == 6)\n            return result;\n        if (n == 7)\n            return result;\n        if (n == 8)\n            return result;\n        if (n == 9)\n            return result;\n        if (n == 10)\n            return result;\n        if (n == 11)\n            return result;\n        if (n == 12)\n            return result;\n        if (n == 13)\n            return result;\n        if (n == 14)\n            return result;\n        if (n == 15)\n            return result;\n        if (n == 16)\n            return result;\n        if (n == 17)\n            return result;\n        if (n == 18)\n            return result;\n        if (n == 19)\n            return result;\n        if (n == 20)\n            return result;\n        if (n == 21)\n            return result;\n        if (n == 22)\n            return result;\n        if (n == 23)\n            return result;\n        if (n == 24)\n            return result;\n        if (n == 25)\n            return result;\n        if (n == 26)\n            return result;\n        if (n == 27)\n            return result;\n        if (n == 28)\n            return result;\n        if (n == 29)\n            return result;\n        if (n == 30)\n            return result;\n        if (n == 31)\n            return result;\n        if (n == 32)\n            return result;\n        if (n == 33)\n            return result;\n        if (n == 34)\n            return result;\n        if (n == 35)\n            return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        for (int i = 4; i <= n; i++) {\n            result.Add(result.Last() + result.Item(i - 1) + result.Item(i - 2) + result.Item(i - 3));\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n == 0) {\n            return new List<long>(new long[] { 0 });\n        }\n        List<long> result = new List<long>(new long[] { 1, 3 });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 1));\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        for (int i = 4; i <= n; i++) {\n            result.Add(result.Last() + result.Item(i - 1) + result.Item(i - 2) + result.Item(i - 3));\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 3; i <= n; i++) {\n            List<long> temp = new List<long>(new long[] { 1, 1 });\n            if (i % 2 == 0) {\n                temp.Add(result.Last());\n                temp.Add(result.Last() + result.Last());\n            }\n            else {\n                temp.Add(result.Last());\n                temp.Add(result.Last() + result.Last() + result.Last());\n            }\n            result = temp;\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        if (n % 2 == 0) {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + i / 2);\n            }\n        }\n        else {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + i);\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        if (n % 2 == 0) {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        else {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0L });\n        if (n == 1)\n            return new List<long>(new long[] { 1L });\n        if (n == 2)\n            return new List<long>(new long[] { 1L, 3L });\n        if (n == 3)\n            return new List<long>(new long[] { 1L, 3L, 2L, 8L });\n        if (n == 4)\n            return new List<long>(new long[] { 1L, 3L, 2L, 8L, 3L });\n        if (n == 5)\n            return new List<long>(new long[] { 1L, 3L, 2L, 8L, 3L, 2L, 8L });\n        if (n == 6)\n            return new List<long>(new long[] { 1L, 3L, 2L, 8L, 3L, 2L, 8L, 3L });\n        if (n == 7)\n            return new List<long>(new long[] { 1L, 3L, 2L, 8L, 3L, 2L, 8L, 3L, 2L, 8L });\n        if (n == 8)\n            return new List<long>(new long[] { 1L, 3L, 2L, 8L, 3L, 2L, 8L, 3L, 2L, 8L, 3L });\n        if (n == 9)\n            return new List<long>(new long[] { 1L, 3L, 2L, 8L, 3L, 2L, 8L, 3L, 2L, 8L, 3L, 2L, 8L });\n        if (n == 10)\n            return new List<long>(new long[] { 1L, 3L, 2L, 8L, 3L, 2L, 8L, 3L, 2L, 8L, 3L, 2L, 8L, 3L });\n        if (n == 11)\n            return new List<long>(new long[] { 1L, 3L, 2L, 8L, 3L, 2L, 8L, 3L, 2",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i++) {\n                result.Add(result[i - 1] + result[i - 2] + result[i]);\n            }\n        }\n        else {\n            result.Add(2);\n            result.Add(3);\n            for (int i = 3; i <= n; i++) {\n                result.Add(result[i - 1] + result[i - 2] + result[i]);\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            ",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        List<long> result = new List<long>();\n        result.Add(1L);\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result;\n        if (n % 2 == 0) {\n            result.Add(2L);\n            result.Add(3L);\n            result.Add(1L);\n            result.Add(8L);\n            return result;\n        }\n        result.Add(3L);\n        result.Add(1L);\n        result.Add(2L);\n        result.Add(8L);\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            result.Add(3);\n            return result;\n        }\n        result.Add(3);\n        result.Add(2);\n        result.Add(1);\n        result.Add(8);\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>(new long[]{0, 1, 3});\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n == 2) {\n            return result;\n        }\n        if (n == 3) {\n            return result;\n        }\n        if (n == 4) {\n            return result;\n        }\n        if (n == 5) {\n            return result;\n        }\n        if (n == 6) {\n            return result;\n        }\n        if (n == 7) {\n            return result;\n        }\n        if (n == 8) {\n            return result;\n        }\n        if (n == 9) {\n            return result;\n        }\n        if (n == 10) {\n            return result;\n        }\n        if (n == 11) {\n            return result;\n        }\n        if (n == 12) {\n            return result;\n        }\n        if (n == 13) {\n            return result;\n        }\n        if (n == 14) {\n            return result;\n        }\n        if (n == 15) {\n            return result;\n        }\n        if (n == 16) {\n            return result;\n        }\n        if (n == 17) {\n            return result;\n        }\n        if (n == 18) {\n            return result;\n        }\n        if (n == 19) {\n            return result;\n        }\n        if (n == 20) {\n            return result;\n        }\n        if (n == 21) {\n            return result;\n        }\n        if (n == 22) {\n            return result;\n        }\n        if (n == 23) {\n            return result;\n        }\n        if (n == 24) {\n            return result;\n        }\n        if (n == 25) {\n            return result;\n        }\n        if (n == 26) {\n            return result;\n        }\n        if (n == 27",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n == 2) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(result[n - 1] + result[n - 2] + result[n + 1]);\n            return result;\n        }\n        result.Add(result[n - 1] + result[n - 2] + result[n + 1]);\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.Last() + (i / 2));\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n == 0) {\n            return new List<long>(new long[]{0L});\n        }\n        if (n == 1) {\n            return new List<long>(new long[]{1L, 3L});\n        }\n        List<long> result = new List<long>();\n        result.Add(1L);\n        result.Add(3L);\n        result.Add(2L);\n        if (n % 2 == 0) {\n            result.Add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        else {\n            result.Add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last() + result.Last());\n            }\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(3);\n            result.Add(1);\n            result.Add(8);\n            return result;\n        }\n        result.Add(3);\n        result.Add(1);\n        result.Add(2);\n        result.Add(8);\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.Last() + result.Last() + result.Last());\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        if (n == 4)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 23 });\n        if (n == 5)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 23, 14, 43 });\n        if (n == 6)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 23, 14, 43, 34, 89 });\n        if (n == 7)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 23, 14, 43, 34, 89, 55, 144, 233 });\n        if (n == 8)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 23, 14, 43, 34, 89, 55, 144, 233, 34, 89, 55, 144, 233, 34, 89, 55, 144, 233, 34, 89, 55, 144, 233, 34, 89, 55, 144, 233, 34, 89, 55, 144, 233, 34, 89, 55, 144, 233, 34, 89, 55, 144, 233, 34, 89, 55, 144, 233, 34, 89, 55, 144, 233, 34, 89, 55, 144, 233, 34, 89, 55, 144, 233, 34, 89, 55, 144, 233, 34, 89, 55, 144, 233, 34, 89, 55, 144, 233, 34, 89, 55, 144, 233, 34, 89, 55, 144, 233, 34, 89, 55, 144, 233, 34, 89, 55, 144, 233, 34, 89, 55, 144, 233, 34, 89",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            return result;\n        }\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        if (n % 2 == 0) {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + i / 2);\n            }\n        }\n        else {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + i);\n            }\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>(new long[]{0, 1, 1, 2});\n        if (n == 0) {\n            return result;\n        }\n        for (int i = 1; i <= n; i++) {\n            result.Add(result[i - 1] + result[i - 2] + result[i]);\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            return result;\n        }\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n == 0) {\n            return new List<long>(new long[] { 0 });\n        }\n        if (n == 1) {\n            return new List<long>(new long[] { 1 });\n        }\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 1));\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.Last() + (i / 2));\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.Last() + (i / 2));\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        List<long> result = new List<long>();\n        if (n == 0) {\n            result.Add(1);\n            return result;\n        }\n        if (n == 1) {\n            result.Add(3);\n            return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n            return result;\n        }\n        if (n == 3) {\n            result.Add(3);\n            return result;\n        }\n        if (n == 4) {\n            result.Add(8);\n            return result;\n        }\n        if (n == 5) {\n            result.Add(13);\n            return result;\n        }\n        if (n == 6) {\n            result.Add(21);\n            return result;\n        }\n        if (n == 7) {\n            result.Add(34);\n            return result;\n        }\n        if (n == 8) {\n            result.Add(55);\n            return result;\n        }\n        if (n == 9) {\n            result.Add(89);\n            return result;\n        }\n        if (n == 10) {\n            result.Add(144);\n            return result;\n        }\n        if (n == 11) {\n            result.Add(233);\n            return result;\n        }\n        if (n == 12) {\n            result.Add(377);\n            return result;\n        }\n        if (n == 13) {\n            result.Add(610);\n            return result;\n        }\n        if (n == 14) {\n            result.Add(986);\n            return result;\n        }\n        if (n == 15) {\n            result.Add(1597);\n            return result;\n        }\n        if (n == 16) {\n            result.Add(2584);\n            return result;\n        }\n        if (n == 17) {\n            result.Add(4181);\n            return result;\n        }\n        if (n == 18) {\n            result.Add(6765);\n            return result",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        if (n == 0) {\n            return new List<long>(new long[] { 0 });\n        }\n        List<long> result = new List<long>(new long[] { 1, 3 });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.Last + result.Last + result.Last);\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.Last + (i / 2));\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        List<long> result = new List<long>(new long[] { 1, 1, 3 });\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result;\n        if (n == 2)\n            return result;\n        if (n == 3)\n            return result;\n        if (n == 4)\n            return result;\n        if (n == 5)\n            return result;\n        if (n == 6)\n            return result;\n        if (n == 7)\n            return result;\n        if (n == 8)\n            return result;\n        if (n == 9)\n            return result;\n        if (n == 10)\n            return result;\n        if (n == 11)\n            return result;\n        if (n == 12)\n            return result;\n        if (n == 13)\n            return result;\n        if (n == 14)\n            return result;\n        if (n == 15)\n            return result;\n        if (n == 16)\n            return result;\n        if (n == 17)\n            return result;\n        if (n == 18)\n            return result;\n        if (n == 19)\n            return result;\n        if (n == 20)\n            return result;\n        if (n == 21)\n            return result;\n        if (n == 22)\n            return result;\n        if (n == 23)\n            return result;\n        if (n == 24)\n            return result;\n        if (n == 25)\n            return result;\n        if (n == 26)\n            return result;\n        if (n == 27)\n            return result;\n        if (n == 28)\n            return result;\n        if (n == 29)\n            return result;\n        if (n == 30)\n            return result;\n        if (n == 31)\n            return result;\n        if (n == 32)\n            return result;\n        if (n == 33)\n            return result;\n        if (n == 34)\n            return result;\n        if (n == 35)\n            return result;\n        ",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.Last() + (i / 2));\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>(new long[]{0, 1, 1, 2});\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.Last() + result.Item(i - 1) + result.Item(i - 2));\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result;\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i));\n            }\n        }\n        else {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i));\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        List<long> result = new List<long>(new long[] { 1, 3 });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.Last() + (i / 2));\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        List<long> result = new List<long>(new long[] { 1, 3, 2, 8 });\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result;\n        if (n == 2)\n            return result;\n        if (n == 3)\n            return result;\n        if (n % 2 == 0) {\n            result.Add(n / 2);\n            result.Add(n / 2);\n            result.Add(n / 2);\n            return result;\n        }\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            return result;\n        }\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n == 0) {\n            return new List<long>(new long[] { 0 });\n        }\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            n -= 2;\n        }\n        for (int i = 3; i <= n; i += 2) {\n            result.Add(result.Last() + result.Last() + result.Last());\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            return result;\n        }\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(6);\n        result.Add(5);\n        result.Add(4);\n        result.Add(3);\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        List<long> result = new List<long>();\n        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n            result.Add(1);\n        else if (n == 2)\n            result.Add(2);\n        else {\n            long a = 1;\n            long b = 1;\n            long c = 1;\n            for (int i = 3; i <= n; i++) {\n                long temp = a + b + c;\n                a = b;\n                b = c;\n                c = temp;\n                result.Add(temp);\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.Last() + (i / 2));\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0L });\n        if (n == 1)\n            return new List<long>(new long[] { 1L });\n        if (n == 2)\n            return new List<long>(new long[] { 1L, 3L });\n        List<long> result = new List<long>(new long[] { 1L });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.Last() + (i / 2));\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        if (n == 4)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3 });\n        List<long> result = new List<long>(new long[] { 1, 3, 2, 8, 3 });\n        for (int i = 5; i <= n; i++) {\n            result.Add(result.Last() + result.Item(i - 1) + result.Item(i - 2) + result.Item(i - 3));\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        if (n % 2 == 0) {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + i / 2);\n            }\n        }\n        else {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + i);\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.Last() + result.Last() + result.Last());\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[]{0L});\n        if (n == 1)\n            return new List<long>(new long[]{1L});\n        if (n == 2)\n            return new List<long>(new long[]{1L, 3L, 2L, 8L});\n        List<long> result = new List<long>();\n        result.Add(1L);\n        result.Add(3L);\n        result.Add(2L);\n        result.Add(8L);\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.Last() + result.Last() + result.Last());\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        if (n == 0) {\n            return new List<long>(new long[]{0L});\n        }\n        if (n == 1) {\n            return new List<long>(new long[]{1L});\n        }\n        List<long> result = new List<long>(new long[]{1L, 3L});\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.Last() + (i / 2));\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        if (n % 2 == 0) {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        else {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n        if (n == 0) {\n            return new List<long>(new long[] { 0 });\n        }\n        if (n == 1) {\n            return new List<long>(new long[] { 1 });\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        else {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[]{0L});\n        if (n == 1)\n            return new List<long>(new long[]{1L});\n        if (n == 2)\n            return new List<long>(new long[]{1L, 3L, 2L, 8L});\n        List<long> result = new List<long>(new long[]{1L, 1L});\n        for (int i = 2; i <= n; i++) {\n            List<long> temp = new List<long>(new long[]{1L, 1L});\n            for (int j = 0; j < i / 2; j++) {\n                temp = temp.Concat(new List<long>(new long[]{result.get(j), result.get(j + 1)}));\n            }\n            if (i % 2 == 0) {\n                temp = temp.Concat(new List<long>(new long[]{result.get(i / 2), result.get(i / 2) + result.get(i / 2 - 1), result.get(i / 2 - 2) + result.get(i / 2 - 1)}));\n            }\n            else {\n                temp = temp.Concat(new List<long>(new long[]{result.get(i / 2), result.get(i / 2) + result.get(i / 2 - 1), result.get(i / 2 - 1) + result.get(i / 2 - 2), result.get(i / 2 - 2) + result.get(i / 2 - 1)}));\n            }\n            result = temp;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        if (n == 0) {\n            result.Add(0L);\n            return result;\n        }\n        if (n == 1) {\n            result.Add(1L);\n            result.Add(3L);\n            result.Add(2L);\n            result.Add(8L);\n            return result;\n        }\n        if (n == 2) {\n            result.Add(1L);\n            result.Add(3L);\n            result.Add(2L);\n            result.Add(8L);\n            return result;\n        }\n        if (n == 3) {\n            result.Add(1L);\n            result.Add(3L);\n            result.Add(2L);\n            result.Add(8L);\n            return result;\n        }\n        if (n == 4) {\n            result.Add(1L);\n            result.Add(3L);\n            result.Add(2L);\n            result.Add(8L);\n            return result;\n        }\n        if (n == 5) {\n            result.Add(1L);\n            result.Add(3L);\n            result.Add(2L);\n            result.Add(8L);\n            return result;\n        }\n        if (n == 6) {\n            result.Add(1L);\n            result.Add(3L);\n            result.Add(2L);\n            result.Add(8L);\n            return result;\n        }\n        if (n == 7) {\n            result.Add(1L);\n            result.Add(3L);\n            result.Add(2L);\n            result.Add(8L);\n            return result;\n        }\n        if (n == 8) {\n            result.Add(1L);\n            result.Add(3L);\n            result.Add(2L);\n            result.Add(8L);\n            return result;\n        }\n        if (n == 9) {\n            result.Add(1L);\n            result",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n        if (n == 0) {\n            return new List<long>(new long[] { 0 });\n        }\n        List<long> result = new List<long>(new long[] { 1, 3, 2, 8 });\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.Last + result.Last + result.Last);\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        else {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        if (n % 2 == 0) {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + i / 2);\n            }\n        }\n        else {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + i);\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        List<long> result = new List<long>(new long[] { 1, 1, 1 });\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 3) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 4) {\n            result.Add(3);\n            return result;\n        }\n        if (n == 5) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 6) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 7) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 8) {\n            result.Add(3);\n            return result;\n        }\n        if (n == 9) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 10) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result;\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i));\n            }\n        }\n        else {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i));\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n == 0) {\n            return new List<long>(new long[]{0L});\n        }\n        if (n == 1) {\n            return new List<long>(new long[]{1L});\n        }\n        List<long> result = new List<long>();\n        result.Add(1L);\n        result.Add(3L);\n        result.Add(2L);\n        if (n % 2 == 0) {\n            result.Add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        else {\n            result.Add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        result.Add(2);\n        result.Add(3);\n        result.Add(1);\n        result.Add(8);\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last + result.Last + result.Last);\n            }\n        }\n        else {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last + result.Last + result.Last);\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.Last + (i / 2));\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            return result;\n        }\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        ",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        List<long> result = new List<long>();\n        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n            result.Add(1);\n        else {\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            if (n % 2 == 0) {\n                for (int i = 3; i <= n; i += 2) {\n                    result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n                }\n            }\n            else {\n                for (int i = 3; i <= n; i += 2) {\n                    result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n                }\n                result.Add(result.get(n - 1) + result.get(n - 2) + result.get(n - 3));\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        List<long> result = new List<long>(new long[] { 1 });\n        for (int i = 1; i < n + 1; i++) {\n            result.Add(result.Last() + (i / 2));\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        else {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.Last() + result.Last() + result.Last());\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.Last + result.Last / 2);\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 3) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 4) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 5) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 6) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 7) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 8) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 9) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        if (n == 0) {\n            return new List<long>(new long[] { 0 });\n        }\n        if (n == 1) {\n            return new List<long>(new long[] { 1 });\n        }\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 1));\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n % 2 == 0) {\n            for (int i = 2; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        else {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result;\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            result.Add(3);\n            return result;\n        }\n        result.Add(2);\n        result.Add(3);\n        result.Add(3);\n        result.Add(8);\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        List<long> result = new List<long>();\n        result.Add(1);\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result;\n        if (n % 2 == 0) {\n            result.Add(n / 2);\n            result.Add(n / 2 + 1);\n            result.Add(n / 2 + 2);\n            return result;\n        }\n        result.Add(n / 2);\n        result.Add(n / 2 + 1);\n        result.Add(n / 2 + 2);\n        result.Add(n / 2 + 3);\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        List<long> result = new List<long>(new long[] { 1, 1, 1 });\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            return result;\n        }\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(6);\n        result.Add(4);\n        result.Add(5);\n        result.Add(7);\n        result.Add(9);\n        result.Add(10);\n        result.Add(12);\n        result.Add(11);\n        result.Add(13);\n        result.Add(14);\n        result.Add(15);\n        result.Add(16);\n        result.Add(17);\n        result.Add(18);\n        result.Add(19);\n        result.Add(20);\n        result.Add(21);\n        result.Add(22);\n        result.Add(23);\n        result.Add(24);\n        result.Add(25);\n        result.Add(26);\n        result.Add(27);\n        result.Add(28);\n        result.Add(29);\n        result.Add(30);\n        result.Add(31);\n        result.Add(32);\n        result.Add(33);\n        result.Add(34);\n        result.Add(35);\n        result.Add(36);\n        result.Add(37);\n        result.Add(38);\n        result.Add(39);\n        result.Add(40);\n        result.Add(41);\n        result.Add(42);\n        result.Add(43);\n        result.Add(44);\n        result.Add(45);\n        result.Add(46);\n        result.Add(47);\n        result.Add(48",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0L });\n        if (n == 1)\n            return new List<long>(new long[] { 1L });\n        if (n == 2)\n            return new List<long>(new long[] { 1L, 3L });\n        if (n == 3)\n            return new List<long>(new long[] { 1L, 3L, 2L, 8L });\n        List<long> result = new List<long>(new long[] { 1L, 1L });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.Last() + (i / 2));\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i++) {\n                result.Add(result[i - 1] + result[i - 2] + result[i]);\n            }\n        }\n        else {\n            result.Add(2);\n            result.Add(3);\n            for (int i = 3; i <= n; i++) {\n                result.Add(result[i - 1] + result[i - 2] + result[i]);\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0L });\n        if (n == 1)\n            return new List<long>(new long[] { 1L });\n        if (n == 2)\n            return new List<long>(new long[] { 1L, 3L });\n        List<long> result = new List<long>(new long[] { 1L });\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.Last() + (i / 2));\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        List<long> result = new List<long>();\n        result.Add(1L);\n        result.Add(3L);\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result;\n        if (n % 2 == 0) {\n            result.Add(2L);\n            result.Add(8L);\n            return result;\n        }\n        result.Add(2L);\n        result.Add(3L);\n        result.Add(1L);\n        result.Add(8L);\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        if (n == 0) {\n            return new List<long>(new long[]{0L});\n        }\n        if (n == 1) {\n            return new List<long>(new long[]{1L});\n        }\n        if (n == 2) {\n            return new List<long>(new long[]{1L, 3L, 2L, 8L});\n        }\n        List<long> result = new List<long>(new long[]{1L, 1L});\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.Last() + (i / 2));\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>(new long[]{0L, 1L, 1L});\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n == 2) {\n            return result;\n        }\n        if (n == 3) {\n            return result;\n        }\n        if (n == 4) {\n            return result;\n        }\n        if (n == 5) {\n            return result;\n        }\n        if (n == 6) {\n            return result;\n        }\n        if (n == 7) {\n            return result;\n        }\n        if (n == 8) {\n            return result;\n        }\n        if (n == 9) {\n            return result;\n        }\n        if (n == 10) {\n            return result;\n        }\n        if (n == 11) {\n            return result;\n        }\n        if (n == 12) {\n            return result;\n        }\n        if (n == 13) {\n            return result;\n        }\n        if (n == 14) {\n            return result;\n        }\n        if (n == 15) {\n            return result;\n        }\n        if (n == 16) {\n            return result;\n        }\n        if (n == 17) {\n            return result;\n        }\n        if (n == 18) {\n            return result;\n        }\n        if (n == 19) {\n            return result;\n        }\n        if (n == 20) {\n            return result;\n        }\n        if (n == 21) {\n            return result;\n        }\n        if (n == 22) {\n            return result;\n        }\n        if (n == 23) {\n            return result;\n        }\n        if (n == 24) {\n            return result;\n        }\n        if (n == 25) {\n            return result;\n        }\n        if (n == 26) {\n            return result;\n        }",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        if (n == 4)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13 });\n        if (n == 5)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 10, 34 });\n        if (n == 6)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 10, 34, 21, 55 });\n        if (n == 7)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 10, 34, 21, 55, 18, 89 });\n        if (n == 8)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 10, 34, 21, 55, 18, 89, 34, 121 });\n        if (n == 9)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 10, 34, 21, 55, 18, 89, 34, 121, 30, 149 });\n        if (n == 10)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 10, 34, 21, 55, 18, 89, 34, 121, 30, 149, 23, 197 });\n        if (n == 11)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 10, 34, 21, 55, 18, 89, 34, 121, 30, 149, 23, 197, 36, 276 });\n        if (n == 12)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        List<long> result = new List<long>();\n        result.Add(1L);\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result;\n        if (n == 2)\n            return result;\n        if (n % 2 == 0) {\n            result.Add(n / 2);\n            result.Add(n / 2 + 1);\n            result.Add(n / 2 + 2);\n            return result;\n        }\n        result.Add(n / 2);\n        result.Add(n / 2 + 1);\n        result.Add(n / 2 + 2);\n        result.Add(n / 2 + 3);\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        List<long> result = new List<long>(new long[] { 1, 1, 3 });\n        for (long i = 2; i <= n; i++) {\n            result.Add(result.Last() + result.Item(i - 1) + result.Item(i - 2));\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n == 2) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1));\n            return result;\n        }\n        result.Add(result.get(n - 1) + result.get(n - 2) + result.get(n - 1));\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 3) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 4) {\n            result.Add(3);\n            return result;\n        }\n        if (n == 5) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 6) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 7) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 8) {\n            result.Add(3);\n            return result;\n        }\n        if (n == 9) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 10) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0L });\n        if (n == 1)\n            return new List<long>(new long[] { 1L });\n        if (n == 2)\n            return new List<long>(new long[] { 1L, 3L });\n        if (n == 3)\n            return new List<long>(new long[] { 1L, 3L, 2L, 8L });\n        if (n == 4)\n            return new List<long>(new long[] { 1L, 3L, 2L, 8L, 3L, 2L, 1L, 3L });\n        if (n == 5)\n            return new List<long>(new long[] { 1L, 3L, 2L, 8L, 3L, 2L, 1L, 3L, 2L, 8L });\n        if (n == 6)\n            return new List<long>(new long[] { 1L, 3L, 2L, 8L, 3L, 2L, 1L, 3L, 2L, 8L, 3L, 2L, 1L, 3L });\n        if (n == 7)\n            return new List<long>(new long[] { 1L, 3L, 2L, 8L, 3L, 2L, 1L, 3L, 2L, 8L, 3L, 2L, 1L, 3L, 2L, 8L });\n        if (n == 8)\n            return new List<long>(new long[] { 1L, 3L, 2L, 8L, 3L, 2L, 1L, 3L, 2L, 8L, 3L, 2L, 1L, 3L, 2L, 8L, 3L, 2L, 1L, 3L });\n        if (n == 9)\n            return new List<long>(new long[] { 1L, 3L, 2L, 8L, 3L, 2L, 1L, 3L, 2L, 8L, 3L, 2L, 1L, 3L, 2L, 8L, 3L, 2L, 1L, 3L, 2L, 8L",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        if (n == 4)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(5);\n        for (int i = 5; i < n; i++) {\n            result.Add(result.Last() + result.Last() + result.Last());\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 3) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 4) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 5) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 6) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 7) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 8) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 9) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        List<long> result = new List<long>();\n        if (n == 0)\n            result.Add(0);\n        else {\n            result.Add(1);\n            result.Add(3);\n            if (n == 1)\n                return result;\n            if (n % 2 == 0) {\n                result.Add(2);\n                result.Add(8);\n                for (int i = 3; i <= n; i += 2) {\n                    result.Add(result.Last() + result.Last() + result.Last());\n                }\n            }\n            else {\n                result.Add(3);\n                result.Add(2);\n                for (int i = 3; i <= n; i += 2) {\n                    result.Add(result.Last() + result.Last() + result.Last());\n                }\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result;\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(1);\n            result.Add(3);\n            return result;\n        }\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.Last + (i / 2));\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        List<long> result = new List<long>(new long[] { 1, 1, 3 });\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result;\n        if (n == 2)\n            return result;\n        if (n == 3)\n            return result;\n        if (n % 2 == 0) {\n            result.Add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2 + 1));\n            return result;\n        }\n        result.Add(result.get(n / 2) + result.get(n / 2 - 1) + result.get(n / 2));\n        result.Add(result.get(n / 2) + result.get(n / 2) + result.get(n / 2 + 1));\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n == 0) {\n            return new List<long>(new long[] { 0L });\n        }\n        List<long> result = new List<long>(new long[] { 1L, 1L });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 1));\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n == 2) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            return result;\n        }\n        result.Add(2);\n        result.Add(3);\n        result.Add(1);\n        result.Add(8);\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 1));\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        List<long> result = new List<long>(new long[]{1, 3, 2, 8});\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result;\n        if (n == 2)\n            return result;\n        if (n == 3)\n            return result;\n        if (n == 4)\n            return result;\n        if (n == 5)\n            return result;\n        if (n == 6)\n            return result;\n        if (n == 7)\n            return result;\n        if (n == 8)\n            return result;\n        if (n == 9)\n            return result;\n        if (n == 10)\n            return result;\n        if (n == 11)\n            return result;\n        if (n == 12)\n            return result;\n        if (n == 13)\n            return result;\n        if (n == 14)\n            return result;\n        if (n == 15)\n            return result;\n        if (n == 16)\n            return result;\n        if (n == 17)\n            return result;\n        if (n == 18)\n            return result;\n        if (n == 19)\n            return result;\n        if (n == 20)\n            return result;\n        if (n == 21)\n            return result;\n        if (n == 22)\n            return result;\n        if (n == 23)\n            return result;\n        if (n == 24)\n            return result;\n        if (n == 25)\n            return result;\n        if (n == 26)\n            return result;\n        if (n == 27)\n            return result;\n        if (n == 28)\n            return result;\n        if (n == 29)\n            return result;\n        if (n == 30)\n            return result;\n        if (n == 31)\n            return result;\n        if (n == 32)\n            return result;\n        if (n == 33)\n            return result;\n        if (n == 34)\n            return result;\n        if (n == 35)\n",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result;\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        else {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n == 2) {\n            return result;\n        }\n        if (n == 3) {\n            return result;\n        }\n        if (n == 4) {\n            return result;\n        }\n        if (n == 5) {\n            return result;\n        }\n        if (n == 6) {\n            return result;\n        }\n        if (n == 7) {\n            return result;\n        }\n        if (n == 8) {\n            return result;\n        }\n        if (n == 9) {\n            return result;\n        }\n        if (n == 10) {\n            return result;\n        }\n        if (n == 11) {\n            return result;\n        }\n        if (n == 12) {\n            return result;\n        }\n        if (n == 13) {\n            return result;\n        }\n        if (n == 14) {\n            return result;\n        }\n        if (n == 15) {\n            return result;\n        }\n        if (n == 16) {\n            return result;\n        }\n        if (n == 17) {\n            return result;\n        }\n        if (n == 18) {\n            return result;\n        }\n        if (n == 19) {\n            return result;\n        }\n        if (n == 20) {\n            return result;\n        }\n        if (n == 21) {\n            return result;\n        }\n        if (n == 22) {\n            return result;\n        }\n        if (n == 23) {\n            return result;\n        }\n        if (n == 24) {\n            return result;\n        }\n        if (n == 25) {\n            return result;\n        }\n        if (n",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.Last() + (i / 2));\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        List<long> result = new List<long>();\n        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n            result.Add(1);\n        else {\n            long a = 1, b = 1, c = 1;\n            for (int i = 0; i < n; i++) {\n                if (i % 2 == 0) {\n                    result.Add(a + b + c);\n                    a = b;\n                    b = c;\n                    c = a + b + c;\n                }\n                else {\n                    result.Add(a + b);\n                    a = b;\n                    b = c;\n                    c = a + b;\n                }\n            }\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 3) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 4) {\n            result.Add(3);\n            return result;\n        }\n        if (n == 5) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 6) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 7) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 8) {\n            result.Add(3);\n            return result;\n        }\n        if (n == 9) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 10) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 11)",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result;\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result[i - 1] + result[i - 2] + result[i]);\n            }\n        }\n        else {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result[i - 1] + result[i - 2] + result[i]);\n            }\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        if (n == 0) {\n            return new List<long>(new long[] { 0 });\n        }\n        List<long> result = new List<long>(new long[] { 1, 3 });\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            n = n / 2;\n        }\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.Last() + result.Last() + result.Last());\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 1, 3 });\n        if (n == 4)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        List<long> result = new List<long>(new long[] { 1, 1, 1, 1 });\n        for (int i = 0; i < n - 1; i++) {\n            result.Add(result.Last() + result.Item(i) + result.Item(i + 1));\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        if (n == 4)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5 });\n        if (n == 5)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13 });\n        if (n == 6)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 4, 25 });\n        if (n == 7)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 4, 25, 9, 34 });\n        if (n == 8)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 4, 25, 9, 34, 18, 57 });\n        if (n == 9)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 4, 25, 9, 34, 18, 57, 8, 41, 67, 110 });\n        if (n == 10)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 4, 25, 9, 34, 18, 57, 8, 41, 67, 110, 13, 85, 324, 1471 });\n        if (n == 11)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 4, 25, 9, 34, 18, 57, 8, 41, 67, 110, 13, 85, 324, 1471, 8, 45, 115, 327, 2197, 15110 });\n        if (n == 12)\n            return new List<long>(new long[] { 1, 3, 2, 8",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 3) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 4) {\n            result.Add(3);\n            return result;\n        }\n        if (n == 5) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 6) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 7) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 8) {\n            result.Add(3);\n            return result;\n        }\n        if (n == 9) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 10) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        if (n == 4)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 23 });\n        List<long> result = new List<long>(new long[] { 1, 3, 2, 8 });\n        for (int i = 5; i <= n; i++) {\n            result.Add(result.Last() + result.Item(i - 2) + result.Item(i - 1));\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        if (n == 0) {\n            return new List<long>(new long[] { 0 });\n        }\n        List<long> result = new List<long>(new long[] { 1, 3 });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.Last() + (i / 2));\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(result.get(n - 1) + result.get(n - 2) + result.get(n - 3));\n            return result;\n        }\n        result.Add(result.get(n - 1) + result.get(n - 2) + result.get(n - 3));\n        result.Add(result.get(n - 1) + result.get(n - 2) + result.get(n - 3));\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        if (n == 4)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3 });\n        if (n == 5)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3, 2, 2, 2, 2, 2 });\n        if (n == 6)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 });\n        if (n == 7)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 });\n        if (n == 8)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0L });\n        if (n == 1)\n            return new List<long>(new long[] { 1L });\n        if (n == 2)\n            return new List<long>(new long[] { 1L, 3L });\n        List<long> result = new List<long>();\n        result.Add(1L);\n        result.Add(3L);\n        if (n % 2 == 0) {\n            for (int i = 2; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        else {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        if (n == 4)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3 });\n        if (n == 5)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3, 2, 2, 2, 2, 2 });\n        if (n == 6)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3, 2, 2, 2, 2, 2, 2, 2 });\n        if (n == 7)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2 });\n        if (n == 8)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 });\n        if (n == 9)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 });\n        if (n == 10)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 });\n        if (n == 11)\n            return new List<long>(new long[] { 1, 3, 2, 8, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 });\n        if (n == 12)\n            return new List<long>(new long[] { 1, 3",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        List<long> result = new List<long>();\n        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n            result.Add(1);\n        else if (n == 2)\n            result.Add(2);\n        else {\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        List<long> result = new List<long>();\n        result.Add(1L);\n        result.Add(3L);\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result;\n        if (n % 2 == 0) {\n            result.Add(2L);\n            result.Add(8L);\n            result.Add(3L);\n            return result;\n        }\n        result.Add(2L);\n        result.Add(8L);\n        result.Add(3L);\n        result.Add(1L);\n        result.Add(5L);\n        result.Add(8L);\n        result.Add(4L);\n        result.Add(13L);\n        result.Add(21L);\n        result.Add(34L);\n        result.Add(55L);\n        result.Add(89L);\n        result.Add(144L);\n        result.Add(233L);\n        result.Add(377L);\n        result.Add(610L);\n        result.Add(987L);\n        result.Add(1597L);\n        result.Add(2584L);\n        result.Add(4181L);\n        result.Add(6765L);\n        result.Add(10946L);\n        result.Add(17711L);\n        result.Add(28657L);\n        result.Add(46368L);\n        result.Add(75025L);\n        result.Add(121393L);\n        result.Add(196418L);\n        result.Add(317819L);\n        result.Add(514229L);\n        result.Add(832040L);\n        result.Add(1346269L);\n        result.Add(2178309L);\n        result.Add(3524578L);\n        result.Add(5702887L);\n        result.Add(9227465L);\n        result.Add(14930352L);\n        result.Add(24157817L);\n        result.Add(39088169L);\n        result",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result[i - 1] + result[i - 2] + result[i]);\n            }\n        }\n        else {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result[i - 1] + result[i - 2] + result[i]);\n            }\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            return result;\n        }\n        result.Add(3);\n        result.Add(2);\n        result.Add(1);\n        result.Add(8);\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 1L });\n        if (n == 1)\n            return new List<long>(new long[] { 1L, 3L });\n        if (n == 2)\n            return new List<long>(new long[] { 1L, 2L, 8L });\n        List<long> result = new List<long>(new long[] { 1L, 1L });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            return result;\n        }\n        result.Add(2);\n        result.Add(3);\n        result.Add(1);\n        result.Add(8);\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        List<long> result = new List<long>();\n        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n            result.Add(1);\n        else {\n            long first = 1;\n            long second = 1;\n            long third = 1;\n            long next = 0;\n            for (int i = 2; i <= n; i++) {\n                next = first + second + third;\n                result.Add(next);\n                first = second;\n                second = third;\n                third = next;\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        if (n == 4)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5 });\n        if (n == 5)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13 });\n        if (n == 6)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 6 });\n        if (n == 7)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 6, 4 });\n        if (n == 8)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 6, 4, 12 });\n        if (n == 9)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 6, 4, 12, 9 });\n        if (n == 10)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 6, 4, 12, 9, 5 });\n        if (n == 11)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 6, 4, 12, 9, 5, 14 });\n        if (n == 12)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 6, 4, 12, 9, 5, 14, 10 });\n        if (n == 13)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 6, 4, 12, 9, 5, 14, 10, 11 });\n        if (n == 14",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        result.Add(2);\n        result.Add(3);\n        result.Add(1);\n        result.Add(8);\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 2; i <= n; i++) {\n            List<long> temp = new List<long>(new long[] { 1, 1 });\n            for (int j = 0; j < i / 2; j++) {\n                temp.Add(result.Item(j));\n            }\n            for (int j = 0; j < i - 1; j++) {\n                temp.Add(result.Item(j) + result.Item(i - j - 1));\n            }\n            temp.Add(result.Item(i / 2));\n            result = temp;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>(new long[]{1L, 3L, 2L, 8L});\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n == 2) {\n            return result;\n        }\n        if (n == 3) {\n            return result;\n        }\n        if (n == 4) {\n            return result;\n        }\n        if (n == 5) {\n            return result;\n        }\n        if (n == 6) {\n            return result;\n        }\n        if (n == 7) {\n            return result;\n        }\n        if (n == 8) {\n            return result;\n        }\n        if (n == 9) {\n            return result;\n        }\n        if (n == 10) {\n            return result;\n        }\n        if (n == 11) {\n            return result;\n        }\n        if (n == 12) {\n            return result;\n        }\n        if (n == 13) {\n            return result;\n        }\n        if (n == 14) {\n            return result;\n        }\n        if (n == 15) {\n            return result;\n        }\n        if (n == 16) {\n            return result;\n        }\n        if (n == 17) {\n            return result;\n        }\n        if (n == 18) {\n            return result;\n        }\n        if (n == 19) {\n            return result;\n        }\n        if (n == 20) {\n            return result;\n        }\n        if (n == 21) {\n            return result;\n        }\n        if (n == 22) {\n            return result;\n        }\n        if (n == 23) {\n            return result;\n        }\n        if (n == 24) {\n            return result;\n        }\n        if (n == 25) {\n            return result;\n        }\n        if (n == 26) {\n            return result;\n        }\n",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n == 2) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(n / 2);\n            result.Add(n / 2 + 1);\n            result.Add(n / 2 + 2);\n            return result;\n        }\n        result.Add(n / 2);\n        result.Add(n / 2 + 1);\n        result.Add(n / 2 + 2);\n        result.Add(n / 2 + 3);\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n        List<long> result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        for (long i = 3; i <= n; i++) {\n            result.Add(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[]{0L});\n        if (n == 1)\n            return new List<long>(new long[]{1L});\n        if (n == 2)\n            return new List<long>(new long[]{1L, 3L});\n        List<long> result = new List<long>();\n        result.Add(1L);\n        result.Add(3L);\n        if (n % 2 == 0) {\n            for (int i = 2; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        else {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result[i - 1] + result[i - 2] + result[i]);\n            }\n        }\n        else {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result[i - 1] + result[i - 2] + result[i]);\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        List<long> result = new List<long>();\n        if (n == 0)\n            return result;\n        result.Add(1);\n        if (n == 1)\n            return result;\n        if (n % 2 == 0) {\n            result.Add(n / 2);\n            result.Add(n / 2 + 1);\n            result.Add(n / 2 + 2);\n            return result;\n        }\n        result.Add(n / 2);\n        result.Add(n / 2 + 1);\n        result.Add(n / 2 + 2);\n        result.Add(n / 2 + 3);\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n % 2 == 0) {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + i / 2);\n            }\n        }\n        else {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + i);\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        List<long> result = new List<long>();\n        if (n == 0)\n            result.Add(0);\n        else {\n            result.Add(1);\n            result.Add(3);\n            if (n == 1)\n                return result;\n            if (n % 2 == 0) {\n                for (int i = 2; i <= n; i += 2) {\n                    result.Add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n                }\n            }\n            else {\n                for (int i = 3; i <= n; i += 2) {\n                    result.Add(result.get(i - 2) + result.get(i - 1) + result.get(i));\n                }\n            }\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>(n + 1);\n        result.Add(1L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(n / 2);\n            result.Add(n / 2);\n            result.Add(n / 2);\n            return result;\n        }\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        result.Add(n / 2);\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>(new long[] { 1L, 3L, 2L });\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n == 2) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2L);\n            result.Add(1L);\n            result.Add(8L);\n            return result;\n        }\n        result.Add(3L);\n        result.Add(1L);\n        result.Add(2L);\n        result.Add(8L);\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 2; i <= n; i++) {\n            List<long> temp = result.ToList();\n            if (i % 2 == 0) {\n                temp.Add(result.get(i / 2) + result.get(i / 2 - 1) + result.get(i / 2 - 2));\n            }\n            else {\n                temp.Add(result.get(i / 2) + result.get(i / 2 - 1) + result.get(i / 2 - 2) + result.get(i / 2 - 1));\n            }\n            result = temp;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result[i - 1] + result[i - 2] + result[i]);\n            }\n        }\n        else {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result[i - 1] + result[i - 2] + result[i]);\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.Last() + (i / 2));\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            result.Add(3);\n            return result;\n        }\n        result.Add(2);\n        result.Add(8);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        ",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[]{0L});\n        List<long> result = new List<long>(new long[]{0L, 1L});\n        for (long i = 2; i <= n; i++) {\n            result.Add(result.Last() + result.Last() + result.Last());\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0L });\n        if (n == 1)\n            return new List<long>(new long[] { 1L });\n        if (n == 2)\n            return new List<long>(new long[] { 1L, 3L });\n        if (n == 3)\n            return new List<long>(new long[] { 1L, 3L, 2L, 8L });\n        List<long> result = new List<long>(new long[] { 1L, 1L });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.Last() + result.Last() + result.Last());\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            return result;\n        }\n        result.Add(2);\n        result.Add(3);\n        result.Add(1);\n        result.Add(8);\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        List<long> result = new List<long>(new long[] { 1, 1, 1 });\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.Last + (i / 2));\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0L });\n        if (n == 1)\n            return new List<long>(new long[] { 1L });\n        if (n == 2)\n            return new List<long>(new long[] { 1L, 3L });\n        List<long> result = new List<long>(new long[] { 1L });\n        for (int i = 1; i < n; i++) {\n            result.Add(1L + (i / 2));\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        List<long> result = new List<long>();\n        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n            result.Add(1);\n        else if (n == 2)\n            result.Add(2);\n        else {\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n == 2) {\n            return result;\n        }\n        if (n == 3) {\n            return result;\n        }\n        if (n == 4) {\n            return result;\n        }\n        if (n == 5) {\n            return result;\n        }\n        if (n == 6) {\n            return result;\n        }\n        if (n == 7) {\n            return result;\n        }\n        if (n == 8) {\n            return result;\n        }\n        if (n == 9) {\n            return result;\n        }\n        if (n == 10) {\n            return result;\n        }\n        if (n == 11) {\n            return result;\n        }\n        if (n == 12) {\n            return result;\n        }\n        if (n == 13) {\n            return result;\n        }\n        if (n == 14) {\n            return result;\n        }\n        if (n == 15) {\n            return result;\n        }\n        if (n == 16) {\n            return result;\n        }\n        if (n == 17) {\n            return result;\n        }\n        if (n == 18) {\n            return result;\n        }\n        if (n == 19) {\n            return result;\n        }\n        if (n == 20) {\n            return result;\n        }\n        if (n == 21) {\n            return result;\n        }\n        if (n == 22) {\n            return result;\n        }\n        if (n == 23) {\n            return result;\n        }\n        if (n == 24) {\n            return result;\n        }\n        if (n == 25) {\n            return result;\n        }\n        if (n == 26) {\n            return result;\n        }\n        if (n == 27)",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        if (n == 0) {\n            return new List<long>(new long[]{0L});\n        }\n        List<long> result = new List<long>(new long[]{0L, 1L});\n        for (long i = 2; i <= n; i++) {\n            result.Add(result.Last() + (i / 2));\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        else {\n            result.Add(2);\n            result.Add(3);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        result.Add(2);\n        result.Add(8);\n        result.Add(3);\n        result.Add(1);\n        result.Add(6);\n        result.Add(4);\n        result.Add(5);\n        result.Add(7);\n        result.Add(9);\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.Last() + (i / 2));\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        if (n % 2 == 0) {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        else {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        List<long> result = new List<long>();\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result.Add(1);\n        if (n == 2)\n            return result.Add(1).Add(2);\n        if (n == 3)\n            return result.Add(1).Add(3).Add(2);\n        if (n == 4)\n            return result.Add(1).Add(3).Add(2).Add(8);\n        if (n == 5)\n            return result.Add(1).Add(4).Add(5).Add(3).Add(2);\n        if (n == 6)\n            return result.Add(1).Add(4).Add(5).Add(3).Add(2).Add(8);\n        if (n == 7)\n            return result.Add(1).Add(4).Add(6).Add(7).Add(5).Add(3).Add(2);\n        if (n == 8)\n            return result.Add(1).Add(4).Add(6).Add(7).Add(5).Add(3).Add(2).Add(8);\n        if (n == 9)\n            return result.Add(1).Add(4).Add(6).Add(7).Add(5).Add(3).Add(2).Add(8).Add(9);\n        if (n == 10)\n            return result.Add(1).Add(4).Add(6).Add(7).Add(5).Add(3).Add(2).Add(8).Add(9).Add(10);\n        if (n == 11)\n            return result.Add(1).Add(4).Add(6).Add(7).Add(5).Add(3).Add(2).Add(8).Add(9).Add(10).Add(11);\n        if (n == 12)\n            return result.Add(1).Add(4).Add(6).Add(7).Add(5).Add(3).Add(2).Add(8).Add(9).Add(10).Add(",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 3) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 4) {\n            result.Add(3);\n            return result;\n        }\n        if (n == 5) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 6) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 7) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 8) {\n            result.Add(3);\n            return result;\n        }\n        if (n == 9) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 10) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1L);\n        result.Add(3L);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2L);\n            result.Add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        } else {\n            result.Add(2L);\n            result.Add(8L);\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        return result;",
    "        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        }\n        List<long> result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 3) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 4) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 5) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 6) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 7) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 8) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n == 9) {\n            result.Add(1);\n            result.Add(3);\n            result.Add(2);\n            result.Add(8);\n            return result;\n        }\n        if (n",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        List<long> result = new List<long>(new long[] { 1, 1, 1 });\n        for (int i = 3; i <= n; i++) {\n            result.Add(result.Last() + (i / 2));\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        if (n == 3)\n            return new List<long>(new long[] { 1, 3, 2, 8 });\n        if (n == 4)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13 });\n        if (n == 5)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 10, 34 });\n        if (n == 6)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 10, 34, 21, 55 });\n        if (n == 7)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 10, 34, 21, 55, 18, 89 });\n        if (n == 8)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 10, 34, 21, 55, 18, 89, 34, 121 });\n        if (n == 9)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 10, 34, 21, 55, 18, 89, 34, 121, 13, 34, 121, 13, 34, 121 });\n        if (n == 10)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 10, 34, 21, 55, 18, 89, 34, 121, 13, 34, 121, 13, 34, 121, 13, 34, 121 });\n        if (n == 11)\n            return new List<long>(new long[] { 1, 3, 2, 8, 5, 13, 10, 34, 21, 55, 18, 89, 34, 121, 13, 34, 121, 13, 34, 121, 13, 34, 121, 13",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0L });\n        if (n == 1)\n            return new List<long>(new long[] { 1L });\n        if (n == 2)\n            return new List<long>(new long[] { 1L, 3L });\n        List<long> result = new List<long>();\n        result.Add(1L);\n        result.Add(3L);\n        result.Add(2L);\n        if (n % 2 == 0) {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + (i / 2));\n            }\n        }\n        else {\n            for (int i = 3; i <= n; i += 2) {\n                result.Add(result.Last() + (result.Last() + (i / 2)));\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        List<long> result = new List<long>(new long[] { 1L, 3L, 2L, 8L });\n        if (n == 0)\n            return result;\n        if (n == 1)\n            return result;\n        if (n % 2 == 0) {\n            result.Add(n / 2);\n            return result;\n        }\n        result.Add(n / 2);\n        result.Add(n / 2 + 1);\n        result.Add(n / 2 + 2);\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            result.Add(3);\n            return result;\n        }\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        result.Add(8);\n        result.Add(1);\n        result.Add(3);\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 1));\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(2);\n            result.Add(8);\n            result.Add(1);\n            return result;\n        }\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(8);\n        result.Add(2);\n        result.Add(1);\n        result.Add(3);\n        result.Add(",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        List<long> result = new List<long>();\n        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n            result.Add(1);\n        else {\n            result.Add(1);\n            result.Add(1);\n            result.Add(1);\n            for (int i = 3; i <= n; i++) {\n                result.Add(result[i - 1] + result[i - 2] + result[i - 3]);\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        if (n == 2)\n            return new List<long>(new long[] { 1, 3 });\n        List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n        if (n % 2 == 0) {\n            for (int i = 2; i < n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        else {\n            for (int i = 3; i < n; i += 2) {\n                result.Add(result.Last() + result.Last() + result.Last());\n            }\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        List<long> result = new List<long>();\n        if (n == 0) {\n            result.Add(1);\n            return result;\n        }\n        if (n == 1) {\n            result.Add(3);\n            return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n            return result;\n        }\n        if (n == 3) {\n            result.Add(3);\n            return result;\n        }\n        if (n == 4) {\n            result.Add(8);\n            return result;\n        }\n        long tri1 = 1;\n        long tri2 = 1;\n        long tri3 = 2;\n        long tri4 = 3;\n        long tri5 = 0;\n        for (int i = 0; i < n; i++) {\n            tri5 = tri1 + tri2 + tri3;\n            tri1 = tri2;\n            tri2 = tri3;\n            tri3 = tri4;\n            tri4 = tri5;\n            result.Add(tri5);\n        }\n        return result;",
    "        if (n < 0)\n            throw new IllegalArgumentException(\"n should be non-negative\");\n        if (n == 0)\n            return new List<long>(new long[] { 0 });\n        if (n == 1)\n            return new List<long>(new long[] { 1 });\n        List<long> result = new List<long>(new long[] { 1, 1 });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.Last() + result.Last() + result.Last());\n        }\n        return result;",
    "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n        if (n == 0)\n            return new List<long>(new long[] { 1L });\n        if (n == 1)\n            return new List<long>(new long[] { 1L, 3L });\n        if (n == 2)\n            return new List<long>(new long[] { 1L, 2L, 8L });\n        List<long> result = new List<long>(new long[] { 1L, 1L });\n        for (int i = 2; i <= n; i++) {\n            result.Add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}