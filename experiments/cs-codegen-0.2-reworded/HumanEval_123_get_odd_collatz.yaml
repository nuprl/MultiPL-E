name: HumanEval_123_get_odd_collatz
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a positive integer n, return a sorted list that has the\
  \ odd numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture\
  \ in mathematics that concerns a sequence defined\n    // as follows: start with\
  \ any positive integer n. Then each term is obtained from the \n    // previous\
  \ term as follows: if the previous term is even, the next term is one half of \n\
  \    // the previous term. If the previous term is odd, the next term is 3 times\
  \ the previous\n    // term plus 1. The conjecture is that no matter what value\
  \ of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1) is\
  \ [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n\
  \    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16,\
  \ 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> GetOddCollatz((5L))\n\
  \    // (new List<long>(new long[]{(long)1L, (long)5L}))\n    public static List<long>\
  \ GetOddCollatz(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetOddCollatz((14L)).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L}))));\n\
  \    Debug.Assert(GetOddCollatz((5L)).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)5L}))));\n    Debug.Assert(GetOddCollatz((12L)).Equals((new List<long>(new\
  \ long[]{(long)1L, (long)3L, (long)5L}))));\n    Debug.Assert(GetOddCollatz((1L)).Equals((new\
  \ List<long>(new long[]{(long)1L}))));\n    }\n\n}\n"
completions: []
stop_tokens:
- "\n    }\n"
