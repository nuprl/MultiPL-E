{
  "name": "HumanEval_107_even_odd_palindrome",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> EvenOddPalindrome((3L))\n    // (Tuple.Create(1L, 2L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> EvenOddPalindrome((12L))\n    // (Tuple.Create(4L, 6L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    public static Tuple<long, long> EvenOddPalindrome(long n) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(EvenOddPalindrome((123L)).Equals((Tuple.Create(8L, 13L))));\n    Debug.Assert(EvenOddPalindrome((12L)).Equals((Tuple.Create(4L, 6L))));\n    Debug.Assert(EvenOddPalindrome((3L)).Equals((Tuple.Create(1L, 2L))));\n    Debug.Assert(EvenOddPalindrome((63L)).Equals((Tuple.Create(6L, 8L))));\n    Debug.Assert(EvenOddPalindrome((25L)).Equals((Tuple.Create(5L, 6L))));\n    Debug.Assert(EvenOddPalindrome((19L)).Equals((Tuple.Create(4L, 6L))));\n    Debug.Assert(EvenOddPalindrome((9L)).Equals((Tuple.Create(4L, 5L))));\n    Debug.Assert(EvenOddPalindrome((1L)).Equals((Tuple.Create(0L, 1L))));\n    }\n\n}\n",
  "completions": [
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        String s = String.Format(\"{0}\", n);\n        return s.ToLower().Equals(s.Reverse().ToLower());",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (IsEven(i)) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Check whether the given integer is palindrome.\n    // Return true if the given integer is palindrome, otherwise return false.\n    private static bool IsPalindrome(long n) {\n        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        long half = n / 2;\n        if (half * 2 != n) {\n            return false;\n        }\n        for (long i = 1; i <= half; i++) {\n            if (n % i != n / i) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Check whether the given integer is even.\n    // Return true if the given integer is even, otherwise return false.\n    private static bool IsEven(long n) {\n        return n % 2 == 0;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool IsPalindrome(long n) {\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    public static boolean isPalindrome(long n) {\n        long reverse = 0;\n        while (n > reverse) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return n == reverse;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool IsPalindrome(long n) {\n        if (n < 0) {\n            throw new InvalidOperationException(\"n should be positive\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        long half = (n - 1) / 2;\n        for (long i = 0; i < half; i++) {\n            if (n % 10 != n / 10) {\n                return false;\n            }\n            n /= 10;\n        }\n        return true;",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (IsEven(i)) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        long reverse = 0;\n        while (n > 0) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return reverse == n;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        long i = 1;\n        while (i <= n) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n            i++;\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    public static bool isPalindrome(long n) {\n        // Write your code here\n        long i = 0;\n        long j = n - 1;\n        while (i < j) {\n            if (n % 10 != n % 10.0 / 10) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;",
    "        // Write your code here\n        long[] even = new long[n + 1];\n        long[] odd = new long[n + 1];\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                even[i] = i;\n            }\n            else {\n                odd[i] = i;\n            }\n        }\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (even[i] == i) {\n                count++;\n            }\n            if (odd[i] == i) {\n                count++;\n            }\n        }\n        return Tuple.Create(count, n - count);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool IsPalindrome(long n) {\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the number is palindrome.\n    // The number is palindrome if it's equal to the reverse of the number.\n    // Example:\n    // >>> IsPalindrome(12)\n    // True\n    // >>> IsPalindrome(21)\n    // False\n    // >>> IsPalindrome(1)\n    // True\n    // >>> IsPalindrome(0)\n    // True\n    // >>> IsPalindrome(-1)\n    // False\n    // >>> IsPalindrome(10)\n    // False\n    // >>> IsPalindrome(11)\n    // False\n    // >>> IsPalindrome(101)\n    // False\n    // >>> IsPalindrome(100)\n    // True\n    // >>> IsPalindrome(1011)\n    // False\n    // >>> IsPalindrome(1101)\n    // True\n    // >>> IsPalindrome(1110)\n    // False\n    // >>> IsPalindrome(1111)\n    // False\n    // >>> IsPalindrome
    "        // Write your code here\n        long[] even = new long[n + 1];\n        long[] odd = new long[n + 1];\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                even[i] = i;\n            }\n            else {\n                odd[i] = i;\n            }\n        }\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (odd[i] > i) {\n                count += odd[i] - i;\n            }\n            if (even[i] > i) {\n                count += even[i] - i;\n            }\n        }\n        return Tuple.Create(count, n - count);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        // Write your code here\n        if (n < 0)\n            return false;\n        if (n == 0)\n            return true;\n        long left = 0, right = n - 1;\n        while (left < right) {\n            if (n % 10 != n % 10 - 1)\n                return false;\n            n /= 10;\n            left++;\n        }\n        return true;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Check if the number is palindrome.\n    private static bool isPalindrome(long n) {\n        if (n < 0) {\n            throw new InvalidOperationException(\"Negative number is not palindrome.\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        long half = (long) Math.floor(n / 2);\n        return n == half * 2;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        long reverse = 0;\n        while (n > reverse) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return n == reverse;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> EvenOddPalindrome((3L))\n    // (Tuple.Create(1L, 2L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> EvenOddPalindrome((12L))\n    // (Tuple.Create(4L, 6L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    public static Tuple<long, long> EvenOddPalindrome(long n) {\n        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> EvenOddPalindrome((3L))\n    // (Tuple.Create(1L, 2L))\n    // Explanation:\n    // Integer palind",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the number is palindrome.\n    private static bool isPalindrome(long n) {\n        if (n < 0)\n            return false;\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Given a positive integer n, return the sum of the factorial of the numbers\n    // that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> FactorialSum((3L))\n    // 6L\n    // Explanation:\n    // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\n    // 1! + 2! + 3! + 4! + 5! + 6! + 7! + 8! + 9! + 10! + 11! + 12! = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 = 66\n    // Example 2:\n    // >>> FactorialSum((12L))\n    // 479L\n    // Explanation:\n    // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\n    // 1! + 2! + 3! + 4! + 5! + 6! + 7! + 8! + 9! + 10! + 11! + 12! = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 = 66 + 24 + 120 + 720 + 5040 + 40320 = 479\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned value is the sum of the factorial of the numbers that fall within the range(1, n), inclusive.\n    public static long FactorialSum(long n) {\n        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            sum += Factorial(i);\n        }\n        return sum;\n    }\n\n    // Given a positive integer n, return the sum of the factorial of the numbers\n    // that fall within the range(1, n), inclusive.\n    // Example",
    "        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> EvenOddPalindrome((3L))\n    // (Tuple.Create(1L, 2L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> EvenOddPalindrome((12L))\n    // (Tuple.Create(4L, 6L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    public static Tuple<long, long> EvenOddPalindrome(long n) {\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> EvenOddPalindrome((3L))\n    // (Tuple.Create(1L, 2L))\n    // Explanation:\n    ",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long[] even = new long[n + 1];\n        long[] odd = new long[n + 1];\n        for (int i = 1; i <= n; i++) {\n            even[i] = odd[i] = 0;\n        }\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                even[i]++;\n            }\n            else {\n                odd[i]++;\n            }\n        }\n        return Tuple.Create(even[n], odd[n]);\n    }\n\n    private static boolean isPalindrome(long n) {\n        String s = Long.toString(n);\n        int len = s.Length;\n        for (int i = 0; i < len / 2; i++) {\n            if (s[i] != s[len - i - 1]) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (IsEven(i)) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool IsPalindrome(long n) {\n        if (n < 0) {\n            throw new Exception(\"n should be positive\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        long half = n / 2;\n        if (half * 2 != n) {\n            return false;\n        }\n        long start = 1;\n        long end = half;\n        while (start <= end) {\n            if (n % start != n % end) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n\n    private static bool IsEven(long n) {\n        return (n % 2) == 0;",
    "        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> EvenOddPalindrome((3L))\n    // (Tuple.Create(1L, 2L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> EvenOddPalindrome((12L))\n    // (Tuple.Create(4L, 6L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    public static Tuple<long, long> EvenOddPalindrome(long n) {\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> EvenOddPalindrome((3L))\n    // (Tuple.Create(1L, 2L))\n    // Explan",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the given integer is a palindrome.\n    // Example:\n    // >>> IsPalindrome(12)\n    // True\n    // >>> IsPalindrome(21)\n    // False\n    // >>> IsPalindrome(1)\n    // True\n    // >>> IsPalindrome(0)\n    // False\n    // >>> IsPalindrome(-1)\n    // False\n    // >>> IsPalindrome(-12)\n    // False\n    // >>> IsPalindrome(0.0)\n    // False\n    // >>> IsPalindrome(0.1)\n    // False\n    // >>> IsPalindrome(0.9)\n    // True\n    // >>> IsPalindrome(0.99)\n    // True\n    // >>> IsPalindrome(0.999)\n    // True\n    // >>> IsPalindrome(0.9999)\n    // True\n    // >>> IsPalindrome(0.99999)\n    // True\n    // >>> IsPalindrome(0.999999)\n    // True\n    // >>> IsPalindrome(0.9999999)\n    // True\n    // >>> IsPalindrome(0.99999999)\n    // True\n    // >>> IsPalindrome(0.999999999)\n    // True\n    // >>> IsPalindrome(0.9999999999)\n    // True\n    // >>> IsPalindrome(0.99999999999)\n    // True\n    // >>> IsPalindrome(0.999999999999)\n    // True\n    // >>> IsPalindrome(0.9999999999999)\n    // True\n    // >>> IsPalindrome(0.99999999999999)\n    // True\n    // >>> IsPalindrome(0.999999999999999)\n    // True\n    // >>> IsPalindrome(0.9999",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Check if a number is palindrome\n    public static bool IsPalindrome(long n) {\n        if (n < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> EvenOddPalindrome((3L))\n    // (Tuple.Create(1L, 2L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> EvenOddPalindrome((12L))\n    // (Tuple.Create(4L, 6L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    public static Tuple<long, long> EvenOddPalindrome(long n) {\n        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> EvenOddPalindrome((3L))\n    // (T",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        if (n < 0)\n            return false;\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    public static bool IsPalindrome(long n) {\n        if (n < 0) {\n            throw new Exception(\"Invalid input\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        long half = n / 2;\n        long half_rev = 0;\n        while (half > 0) {\n            half_rev = half_rev * 10 + (half % 10);\n            half /= 10;\n        }\n        return half_rev == n;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool IsPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        int length = 0;\n        while (n > 0) {\n            length++;\n            n /= 10;\n        }\n        int start = 0, end = length - 1;\n        while (start < end) {\n            if (n % 10 != n / 10) {\n                return false;\n            }\n            n /= 10;\n            start++;\n            end--;\n        }\n        return true;",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the given integer is a palindrome.\n    // Example:\n    // >>> IsPalindrome(12)\n    // True\n    // >>> IsPalindrome(21)\n    // False\n    // >>> IsPalindrome(1)\n    // True\n    // >>> IsPalindrome(0)\n    // True\n    // >>> IsPalindrome(-1)\n    // False\n    // >>> IsPalindrome(-12)\n    // False\n    // >>> IsPalindrome(10)\n    // False\n    // >>> IsPalindrome(11)\n    // True\n    // >>> IsPalindrome(121)\n    // False\n    public static bool IsPalindrome(long n) {\n        if (n < 0)\n            return false;\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        long reverse = 0;\n        while (n > reverse) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return n == reverse;",
    "        // Write your code here\n        long[] even = new long[n + 1];\n        long[] odd = new long[n + 1];\n        long evenSum = 0;\n        long oddSum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                even[i] = even[i / 2] + 1;\n                evenSum += even[i];\n            }\n            else {\n                odd[i] = odd[i / 2] + 1;\n                oddSum += odd[i];\n            }\n        }\n        return Tuple.Create(evenSum, oddSum);",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Check if a number is palindrome.\n    public static bool IsPalindrome(long n) {\n        if (n < 0)\n            return false;\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long[] even = new long[n + 1];\n        long[] odd = new long[n + 1];\n        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                even[i] = even[i / 2] + 1;\n            }\n            else {\n                odd[i] = odd[i / 2] + 1;\n            }\n            sum += even[i] + odd[i];\n        }\n        return Tuple.Create(even[n], odd[n]);",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        if (n < 0)\n            return false;\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        long left = 0, right = n - 1;\n        while (left < right) {\n            if (n % 10 != n % 10 - 1) {\n                return false;\n            }\n            n /= 10;\n            left++;\n            right--;\n        }\n        return true;",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the integer is a palindrome.\n    // Example:\n    // >>> IsPalindrome(12)\n    // True\n    // >>> IsPalindrome(21)\n    // False\n    // >>> IsPalindrome(1)\n    // True\n    // >>> IsPalindrome(0)\n    // False\n    // >>> IsPalindrome(-1)\n    // False\n    // >>> IsPalindrome(-12)\n    // False\n    // >>> IsPalindrome(10)\n    // True\n    // >>> IsPalindrome(11)\n    // True\n    // >>> IsPalindrome(100)\n    // True\n    // >>> IsPalindrome(101)\n    // False\n    // >>> IsPalindrome(100000000)\n    // True\n    // >>> IsPalindrome(1000000001)\n    // False\n    // >>> IsPalindrome(10000000000)\n    // False\n    // >>> IsPalindrome(10000000001)\n    // False\n    // >>> IsPalindrome(10000000010)\n    // False\n    // >>> IsPalindrome(10000000011)\n    // False\n    // >>> IsPalindrome(100000000100)\n    // False\n    // >>> IsPalindrome(100000000101)\n    // False\n    // >>> IsPalindrome(100000000110)\n    // False\n    // >>> IsPalindrome(100000000111)\n    // False\n    // >>> IsPalindrome(1000000001100)\n    // False\n    // >>> IsPalindrome(1000000001101)\n    // False\n    // >>> IsPalindrome(1000000001110)\n    // False\n    // >>> IsPalindrome(1000000001111)\n    // False\n    // >>> IsPalindrome(10000000011111)\n    // False\n    // >>> IsPal",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        long n1 = n, n2 = 0;\n        while (n1 > 0) {\n            n2 = n2 * 10 + n1 % 10;\n            n1 /= 10;\n        }\n        return n2 == n1;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        // Write your code here\n        long n_copy = n;\n        long reverse = 0;\n        while (n_copy > 0) {\n            reverse = reverse * 10 + n_copy % 10;\n            n_copy = n_copy / 10;\n        }\n        return reverse == n;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the number is palindrome.\n    // Time complexity: O(n)\n    // Space complexity: O(1)\n    private static bool IsPalindrome(long n) {\n        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    public static bool IsPalindrome(long n) {\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Check if a number is palindrome\n    public static boolean IsPalindrome(long n) {\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean IsPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        long reverse = 0;\n        while (n > reverse) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return n == reverse;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        long reverse = 0;\n        while (n > reverse) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return n == reverse;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool IsPalindrome(long n) {\n        if (n < 0)\n            return false;\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool IsPalindrome(long n) {\n        if (n < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        long half = n / 2;\n        long half_half = half / 2;\n        if (half_half == half) {\n            return true;\n        }\n        return false;",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the number is palindrome.\n    private static bool IsPalindrome(long n) {\n        if (n < 0) {\n            throw new Exception(\"Negative number is not palindrome.\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> EvenOddPalindrome((3L))\n    // (Tuple.Create(1L, 2L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> EvenOddPalindrome((12L))\n    // (Tuple.Create(4L, 6L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    public static Tuple<long, long> EvenOddPalindrome(long n) {\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> EvenOddPalindrome((3L))\n    // (Tuple.Create(1L, 2L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even,",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        long reverse = 0;\n        while (n > reverse) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return n == reverse;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool IsPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        int length = 0;\n        while (n != 0) {\n            length++;\n            n /= 10;\n        }\n        int start = 0, end = length - 1;\n        while (start < end) {\n            if (n % 10 != n / 10) {\n                return false;\n            }\n            n /= 10;\n            start++;\n            end--;\n        }\n        return true;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool IsPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return IsPalindrome(n / 2);\n        }\n        else {\n            return IsPalindrome(n * 3 + 1);\n        }",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    public static bool IsPalindrome(long n) {\n        long i = 0, j = n - 1;\n        while (i < j) {\n            if (n % 10 != n % 10.0) {\n                return false;\n            }\n            i = i * 10 + n % 10;\n            n /= 10;\n            j = j / 10;\n        }\n        return true;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be positive\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        long half = n / 2;\n        long left = 0, right = n - 1;\n        while (left <= right) {\n            if (n % 2 == 0) {\n                if (n != 2 * left) {\n                    return false;\n                }\n            } else {\n                if (n != 2 * left + 1) {\n                    return false;\n                }\n            }\n            left++;\n            right--;\n        }\n        return true;",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the number is palindrome.\n    private static bool IsPalindrome(long n) {\n        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        long half = (n - 1) / 2;\n        return n == Long.Reverse(half) + half;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0) {\n                if (j % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n                j /= 2;\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        long reverse = 0;\n        while (n > reverse) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return n == reverse;",
    "        // Write your code here\n        long sum = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    sum += i;\n                }\n                else {\n                    odd += i;\n                }\n            }\n        }\n        return Tuple.Create(sum, odd);\n    }\n\n    public static bool IsPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        if (n == 0) {\n            return true;\n        }\n        long left = 0;\n        long right = n - 1;\n        while (left <= right) {\n            if (n % 10 != n / 10) {\n                return false;\n            }\n            n /= 10;\n            left *= 10;\n            right /= 10;\n        }\n        return true;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Check if a number is palindrome\n    private static bool IsPalindrome(long n) {\n        if (n < 0) {\n            throw new InvalidOperationException(\"n should be positive\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long[] even = new long[n + 1];\n        long[] odd = new long[n + 1];\n        long evenSum = 0;\n        long oddSum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                even[i] = even[i / 2] + 1;\n                evenSum += even[i];\n            }\n            else {\n                odd[i] = odd[i / 2] + 1;\n                oddSum += odd[i];\n            }\n        }\n        return Tuple.Create(evenSum, oddSum);",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (IsEven(i)) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        long reverse = 0;\n        while (n > reverse) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return n == reverse;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    public static bool IsPalindrome(long n) {\n        // Write your code here\n        if (n < 0) {\n            return false;\n        }\n        if (n == 0) {\n            return true;\n        }\n        long left = 0;\n        long right = n - 1;\n        while (left < right) {\n            if (n % 10 != n % 10.0) {\n                return false;\n            }\n            n /= 10;\n            left++;\n            right--;\n        }\n        return true;",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the number is palindrome.\n    private static bool isPalindrome(long n) {\n        long reverse = 0;\n        while (n > reverse) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return n == reverse;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool IsPalindrome(long n) {\n        if (n < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        long half = n / 2;\n        if (n % 2 == 0) {\n            return IsPalindrome(half) && IsPalindrome(n - half);\n        }\n        else {\n            return IsPalindrome(half) || IsPalindrome(n - half);\n        }",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        long reverse = 0;\n        while (n > reverse) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return n == reverse;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Check if the number is palindrome\n    public static bool IsPalindrome(long n) {\n        // Write your code here\n        if (n < 0) {\n            return false;\n        }\n        if (n == 0) {\n            return true;\n        }\n        int length = 0;\n        while (n != 0) {\n            length++;\n            n /= 10;\n        }\n        int left = 0;\n        int right = length - 1;\n        while (left < right) {\n            if (n % 10 != n / 10) {\n                return false;\n            }\n            n /= 10;\n            left++;\n            right--;\n        }\n        return true;",
    "        // Write your code here\n        long sum = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    sum += i;\n                }\n                else {\n                    odd += i;\n                }\n            }\n        }\n        return Tuple.Create(sum, odd);\n    }\n\n    private static bool IsPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        int length = 0;\n        while (n != 0) {\n            length++;\n            n /= 10;\n        }\n        int left = 0;\n        int right = length - 1;\n        while (left < right) {\n            if (n % 10 != n / 10) {\n                return false;\n            }\n            n /= 10;\n            left++;\n            right--;\n        }\n        return true;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        if (n < 0)\n            return false;\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        long half = n / 2;\n        for (long i = 1; i <= half; i++) {\n            if (n % i != n / i) {\n                return false;\n            }\n        }\n        return true;",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        long s = 0, e = n;\n        while (s < e) {\n            if (n % 10 != n % 10 - 1) {\n                return false;\n            }\n            n /= 10;\n            s++;\n        }\n        return true;",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool IsPalindrome(long n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n should be positive\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        long half = (long) Math.floor(n / 2);\n        return n == half * 2;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Check if the number is palindrome\n    private static boolean IsPalindrome(long n) {\n        long reverse = 0;\n        while (n > 0) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return reverse == n;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        if (n < 0)\n            return false;\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        long reverse = 0;\n        while (n > reverse) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return n == reverse;",
    "        // Write your code here\n        long[] even = new long[n + 1];\n        long[] odd = new long[n + 1];\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0)\n                even[i] = i;\n            else\n                odd[i] = i;\n        }\n        long evenCount = 0;\n        long oddCount = 0;\n        for (long i = 1; i <= n; i++) {\n            if (even[i] > n)\n                break;\n            if (odd[i] > n)\n                oddCount++;\n            else if (odd[i] == even[i])\n                evenCount++;\n        }\n        return Tuple.Create(evenCount, oddCount);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        // Write your code here\n        long n_copy = n;\n        long reverse = 0;\n        while (n_copy != 0) {\n            reverse = reverse * 10 + n_copy % 10;\n            n_copy /= 10;\n        }\n        return reverse == n;",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the given integer is a palindrome.\n    // The integer is a palindrome if it reads the same backward as forward.\n    // Example:\n    // >>> IsPalindrome(0)\n    // False\n    // >>> IsPalindrome(1)\n    // True\n    // >>> IsPalindrome(-1)\n    // False\n    // >>> IsPalindrome(121)\n    // True\n    // >>> IsPalindrome(1221)\n    // False\n    // >>> IsPalindrome(12211221)\n    // True\n    // >>> IsPalindrome(1221122112211221)\n    // False\n    // >>> IsPalindrome(1221122112211221122112211221)\n    // True\n    // >>> IsPalindrome(12211221122112211221122112211221)\n    // False\n    // >>> IsPalindrome(122112211221122112211221122112211221)\n    // True\n    // >>> IsPalindrome(1221122112211221122112211221122112211221)\n    // False\n    // >>> IsPalindrome(12211221122112211221122112211221122112211221)\n    // True\n    // >>> IsPalindrome(122112211221122112211221122112211221122112211221)\n    // False\n    // >>> IsPalindrome(1221122112211221122112211221122112211221122112211221)\n    // True\n    // >>> IsPalindrome(12211221122112211221122112211221122112211221",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the given integer is a palindrome.\n    // Example:\n    // >>> IsPalindrome(12)\n    // True\n    // >>> IsPalindrome(21)\n    // False\n    // >>> IsPalindrome(0)\n    // False\n    // >>> IsPalindrome(-12)\n    // False\n    // >>> IsPalindrome(1)\n    // True\n    // >>> IsPalindrome(-1)\n    // True\n    // >>> IsPalindrome(2147483647)\n    // True\n    // >>> IsPalindrome(-2147483647)\n    // True\n    // >>> IsPalindrome(2147483648)\n    // False\n    // >>> IsPalindrome(-2147483648)\n    // False\n    // >>> IsPalindrome(2147483648)\n    // False\n    // >>> IsPalindrome(-2147483648)\n    // False\n    // >>> IsPalindrome(2147483647)\n    // False\n    // >>> IsPalindrome(-2147483647)\n    // False\n    // >>> IsPalindrome(2147483647)\n    // False\n    // >>> IsPalindrome(-2147483647)\n    // False\n    // >>> IsPalindrome(2147483647)\n    // False\n    // >>> IsPalindrome(-2147483647)\n    // False\n    // >>> IsPalindrome(2147483647)\n    // False\n    // >>> IsPalindrome(-2147483647)\n    // False\n    // >>> IsPalindrome(2147483647)\n    // False\n    // >>> IsPalindrome(-2147483647)\n    // False\n    // >>> IsPalindrome(2147483647)\n    //",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the integer is a palindrome.\n    // Example:\n    // >>> IsPalindrome(12)\n    // True\n    // >>> IsPalindrome(21)\n    // False\n    // >>> IsPalindrome(0)\n    // False\n    // >>> IsPalindrome(-1)\n    // False\n    // >>> IsPalindrome(-12)\n    // False\n    // >>> IsPalindrome(10)\n    // False\n    // >>> IsPalindrome(1)\n    // False\n    // >>> IsPalindrome(11)\n    // True\n    // >>> IsPalindrome(121)\n    // True\n    // >>> IsPalindrome(12121)\n    // True\n    // >>> IsPalindrome(1212121)\n    // True\n    // >>> IsPalindrome(12321)\n    // False\n    // >>> IsPalindrome(1232112)\n    // False\n    // >>> IsPalindrome(123211212)\n    // False\n    // >>> IsPalindrome(1232112121)\n    // False\n    // >>> IsPalindrome(12321121212)\n    // False\n    // >>> IsPalindrome(123211212121)\n    // False\n    // >>> IsPalindrome(1232112121212)\n    // False\n    // >>> IsPalindrome(12321121212121)\n    // False\n    // >>> IsPalindrome(123211212121212)\n    // False\n    // >>> IsPalindrome(1232112121212121)\n    // False\n    // >>> IsPalindrome(12321121212121212)\n    // False\n    // >>> IsPalindrome(123211212121212121)\n    // False\n    // >>> IsPalindrome(1232112",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the integer is a palindrome.\n    // Example:\n    // >>> IsPalindrome(1)\n    // True\n    // >>> IsPalindrome(2)\n    // True\n    // >>> IsPalindrome(3)\n    // True\n    // >>> IsPalindrome(4)\n    // False\n    // >>> IsPalindrome(123)\n    // True\n    // >>> IsPalindrome(1234)\n    // False\n    // >>> IsPalindrome(12345)\n    // False\n    // >>> IsPalindrome(1234567)\n    // False\n    // >>> IsPalindrome(12345678)\n    // False\n    // >>> IsPalindrome(123456789)\n    // False\n    // >>> IsPalindrome(1234567890)\n    // False\n    // >>> IsPalindrome(12345678901)\n    // False\n    // >>> IsPalindrome(123456789012)\n    // False\n    // >>> IsPalindrome(1234567890123)\n    // False\n    // >>> IsPalindrome(12345678901234)\n    // False\n    // >>> IsPalindrome(123456789012345)\n    // False\n    // >>> IsPalindrome(1234567890123456)\n    // False\n    // >>> IsPalindrome(12345678901234567)\n    // False\n    // >>> IsPalindrome(123456789012345678)\n    // False\n    // >>> IsPalindrome(1234567890123456789)\n    // False\n    // >>> IsPalindrome(12345678901234567890)\n    // False\n    // >>> IsPalindrome(123456789012345678901)\n    // False\n    ",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    public static bool isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        long half = n / 2;\n        long half_rev = 0;\n        while (half > 0) {\n            half_rev = half_rev * 10 + (half % 10);\n            half /= 10;\n        }\n        return half_rev == n;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Check if a number is palindrome\n    public static boolean IsPalindrome(long n) {\n        if (n < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        long reverse = 0;\n        while (n > reverse) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return n == reverse;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        // Write your code here\n        long n1 = n, n2 = 0;\n        while (n1 != 0) {\n            n2 = n2 * 10 + n1 % 10;\n            n1 /= 10;\n        }\n        return n2 == n;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool IsPalindrome(long n) {\n        long i = 0, j = n - 1;\n        while (i < j) {\n            if (n % 10 != n % 10.0 / 10) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        if (n < 0)\n            return false;\n        if (n == 0 || n == 1)\n            return true;\n        long half = n / 2;\n        if (n % 2 == 0)\n            return isPalindrome(half) && isPalindrome(n - half);\n        else\n            return isPalindrome(half) || isPalindrome(n - half);",
    "        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the integer is a palindrome.\n    // Example:\n    // >>> IsPalindrome(12)\n    // True\n    // >>> IsPalindrome(1234)\n    // False\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> IsPalindrome(1234)\n    // True\n    // >>> Is",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the given integer is a palindrome.\n    // Example:\n    // >>> IsPalindrome(12)\n    // True\n    // >>> IsPalindrome(21)\n    // False\n    // >>> IsPalindrome(1)\n    // True\n    // >>> IsPalindrome(0)\n    // True\n    // >>> IsPalindrome(-1)\n    // False\n    // >>> IsPalindrome(-12)\n    // False\n    // >>> IsPalindrome(10)\n    // False\n    // >>> IsPalindrome(11)\n    // True\n    // >>> IsPalindrome(101)\n    // False\n    // >>> IsPalindrome(100)\n    // True\n    // >>> IsPalindrome(10101)\n    // True\n    // >>> IsPalindrome(1010101)\n    // True\n    // >>> IsPalindrome(10101010)\n    // False\n    // >>> IsPalindrome(10101010101)\n    // True\n    // >>> IsPalindrome(1010101010101)\n    // True\n    // >>> IsPalindrome(101010101010101)\n    // False\n    // >>> IsPalindrome(10101010101010101)\n    // False\n    // >>> IsPalindrome(1010101010101010101)\n    // False\n    // >>> IsPalindrome(101010101010101010101)\n    // False\n    // >>> IsPalindrome(10101010101010101010101)\n    // False\n    // >>> IsPalindrome(1010101010101010101010101)\n    // False\n    // >>> IsPalindrome(101010101010101010101010101)\n    // False\n    // >>> Is",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Check if the number is palindrome\n    private static bool IsPalindrome(long n) {\n        long reverse = 0;\n        while (n > reverse) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return n == reverse;",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    public static bool isPalindrome(long n) {\n        if (n < 0)\n            return false;\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Check if the given number is a palindrome.\n    // Return true if the number is palindrome, false otherwise.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. The number is represented in string format.\n    public static bool IsPalindrome(long n) {\n        if (n < 0) {\n            throw new InvalidOperationException(\"Number must be positive.\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        String s = String.Format(\"{0}\", n);\n        int len = s.Length;\n        for (int i = 0; i < len / 2; i++) {\n            if (s[i] != s[len - i - 1]) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> EvenOddPalindrome((3L))\n    // (Tuple.Create(1L, 2L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> EvenOddPalindrome((12L))\n    // (Tuple.Create(4L, 6L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    public static Tuple<long, long> EvenOddPalindrome(long n) {\n        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> EvenOddPalindrome((3L))\n    // (Tuple.Create(1L",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the given integer is a palindrome.\n    // Example:\n    // >>> isPalindrome(1)\n    // True\n    // >>> isPalindrome(2)\n    // True\n    // >>> isPalindrome(3)\n    // True\n    // >>> isPalindrome(4)\n    // False\n    // >>> isPalindrome(12321)\n    // True\n    // >>> isPalindrome(123321)\n    // False\n    // >>> isPalindrome(123421)\n    // False\n    // >>> isPalindrome(12345)\n    // False\n    // >>> isPalindrome(1234567)\n    // False\n    // >>> isPalindrome(123456789)\n    // False\n    // >>> isPalindrome(12345678901)\n    // False\n    // >>> isPalindrome(123456789012)\n    // False\n    // >>> isPalindrome(1234567890123)\n    // False\n    // >>> isPalindrome(12345678901234)\n    // False\n    // >>> isPalindrome(123456789012345)\n    // False\n    // >>> isPalindrome(1234567890123456)\n    // False\n    // >>> isPalindrome(12345678901234567)\n    // False\n    // >>> isPalindrome(123456789012345678)\n    // False\n    // >>> isPalindrome(1234567890123456789)\n    // False\n    // >>> isPalindrome(12345678901234567890)\n    // False\n    // >>> isPalindrome(123456789012345678901)\n    // False\n    // >>> isPalindrome(12345",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool IsPalindrome(long n) {\n        // Write your code here\n        if (n < 0) {\n            return false;\n        }\n        int length = 0;\n        while (n != 0) {\n            length++;\n            n /= 10;\n        }\n        int start = 0, end = length - 1;\n        while (start < end) {\n            if (n % 10 != n / 10) {\n                return false;\n            }\n            n /= 10;\n            start++;\n            end--;\n        }\n        return true;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Given a positive integer n, return the sum of the first n odd integer palindromes.\n    // Example 1:\n    // >>> OddPalindromeSum((3L))\n    // 6\n    // Explanation:\n    // The odd palindromes are 1, 3, 5, 7, 9, 11, ...\n    // So the sum of the first 6 odd palindromes is 6.\n    // Example 2:\n    // >>> OddPalindromeSum((12L))\n    // 23\n    // Explanation:\n    // The odd palindromes are 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, ...\n    // So the sum of the first 12 odd palindromes is 23.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned value is the sum of the first n odd palindromes.\n    public static long OddPalindromeSum(long n) {\n        // Write your code here\n        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n\n    // Given a positive integer n, return the sum of the first n even integer palindromes.\n    // Example 1:\n    // >>> EvenPalindromeSum((3L))\n    // 6\n    // Explanation:\n    // The even palindromes are 2, 4, 6, 8, 10, 12, ...\n    // So the sum of the first 6 even palindromes is 6.\n    // Example 2:\n    // >>> EvenPalindromeSum((12L))\n    // 23\n    // Explanation",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    public static bool isPalindrome(long n) {\n        if (n < 0) {\n            throw new InvalidOperationException(\"n should be positive\");\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (IsEven(i)) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool IsPalindrome(long n) {\n        // Write your code here\n        long n1 = n;\n        long n2 = 0;\n        while (n1 != 0) {\n            n2 = n2 * 10 + n1 % 10;\n            n1 /= 10;\n        }\n        return n2 == n1;\n    }\n\n    private static bool IsEven(long n) {\n        // Write your code here\n        return n % 2 == 0;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        if (n < 0)\n            return false;\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Check if a number is palindrome\n    private static bool IsPalindrome(long n) {\n        long s = 0, e = 0;\n        while (s < n) {\n            if (n % 10 != n % (n / 10)) {\n                return false;\n            }\n            n /= 10;\n            s++;\n        }\n        return true;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool IsPalindrome(long n) {\n        long s = 0, e = n;\n        while (s < e) {\n            if (n % 10 != n / 10) {\n                return false;\n            }\n            s = s * 10 + n % 10;\n            n /= 10;\n            e /= 10;\n        }\n        return true;",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the given integer is a palindrome.\n    // Example:\n    // >>> IsPalindrome(1)\n    // True\n    // >>> IsPalindrome(2)\n    // True\n    // >>> IsPalindrome(3)\n    // False\n    // >>> IsPalindrome(12)\n    // True\n    // >>> IsPalindrome(21)\n    // False\n    // >>> IsPalindrome(123)\n    // False\n    // >>> IsPalindrome(1234)\n    // False\n    // >>> IsPalindrome(12345)\n    // False\n    // >>> IsPalindrome(123456)\n    // False\n    // >>> IsPalindrome(1234567)\n    // False\n    // >>> IsPalindrome(12345678)\n    // False\n    // >>> IsPalindrome(123456789)\n    // False\n    // >>> IsPalindrome(1234567890)\n    // False\n    // >>> IsPalindrome(12345678901)\n    // False\n    // >>> IsPalindrome(123456789012)\n    // False\n    // >>> IsPalindrome(1234567890123)\n    // False\n    // >>> IsPalindrome(12345678901234)\n    // False\n    // >>> IsPalindrome(123456789012345)\n    // False\n    // >>> IsPalindrome(1234567890123456)\n    // False\n    // >>> IsPalindrome(12345678901234567)\n    // False\n    // >>> IsPalindrome(123456789012345678)\n    // False\n    // >>> IsPalindrome(1234567890123456789)\n    // False\n    // >>> IsPalindrome(123456789012345678",
    "        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Given a positive integer n, return the sum of the factorial of the digits of n.\n    // Example 1:\n    // >>> FactorialDigitSum(123)\n    // 45228\n    // Explanation:\n    // 123 = (3 * 10 + 2) * (2 * 1)\n    // The sum of the factorial of the digits is 45228.\n    // Example 2:\n    // >>> FactorialDigitSum(1234)\n    // 45228\n    // Explanation:\n    // 1234 = (3 * 10 + 2) * (2 * 1) * (4 * 1)\n    // The sum of the factorial of the digits is 45228.\n    // Note:\n    // 1. 1 <= n <= 10^9\n    // 2. The sum of the factorial of the digits of n is a positive integer.\n    public static long FactorialDigitSum(long n) {\n        long sum = 0;\n        while (n > 0) {\n            sum += n / 10;\n            n = n % 10;\n        }\n        return sum;\n    }\n\n    // Given a string s, return the number of palindromic strings in the string.\n    // Example 1:\n    // >>> PalindromeCount(\"a\")\n    // 1\n    // Example 2:\n    // >>> PalindromeCount(\"abccba\")\n    // 2\n    // Explanation:\n    // \"a\" and \"bccba\" are palindromes.\n    // Note:\n    // 1. The length of s will not exceed 10^5.\n    // 2. The characters in s are lowercase letters.\n    public static int PalindromeCount(string s) {\n        int count = 0;\n        for (int i = 0; i < s.Length / 2; i++) {\n            if (s[",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        long reverse = 0;\n        while (n > reverse) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return n == reverse;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    public static long IsPalindrome(long n) {\n        long sum = 0;\n        while (n > 0) {\n            sum = sum * 10 + n % 10;\n            n = n / 10;\n        }\n        return sum == 0 ? 1 : 0;",
    "        // Write your code here\n        long[] odd = new long[n + 1];\n        long[] even = new long[n + 1];\n        odd[0] = 0;\n        even[0] = 0;\n        for (long i = 1; i <= n; i++) {\n            odd[i] = odd[i - 1] + (i % 2 == 0 ? 1 : 0);\n            even[i] = even[i - 1] + (i % 2 == 1 ? 1 : 0);\n        }\n        return Tuple.Create(odd[n], even[n]);",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> EvenOddPalindrome((3L))\n    // (Tuple.Create(1L, 2L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> EvenOddPalindrome((12L))\n    // (Tuple.Create(4L, 6L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    public static Tuple<long, long> EvenOddPalindrome(long n) {\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> EvenOddPalindrome((3L))\n    // (Tuple.Create(1L, 2L))\n    // Explanation:\n    // Integer",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> EvenOddPalindrome((3L))\n    // (Tuple.Create(1L, 2L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> EvenOddPalindrome((12L))\n    // (Tuple.Create(4L, 6L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    public static Tuple<long, long> EvenOddPalindrome(long n) {\n        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> EvenOddPalindrome((3L))\n    // (T",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        long half = n / 2;\n        for (long i = 1; i <= half; i++) {\n            if (n % i != n / i) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0 && j % 2 == 0) {\n                j /= 2;\n                even++;\n            }\n            while (j > 0 && j % 2 != 0) {\n                j /= 2;\n                odd++;\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0 && j % 2 == 0) {\n                j /= 2;\n                even++;\n            }\n            while (j > 0 && j % 2 != 0) {\n                j /= 2;\n                odd++;\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the integer is a palindrome.\n    private static bool IsPalindrome(long n) {\n        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        long reverse = 0;\n        while (n > reverse) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return n == reverse;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (IsEven(i)) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool IsPalindrome(long n) {\n        long i = 0;\n        long j = n - 1;\n        while (i < j) {\n            if (n % 10 != n % 10 - 1) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    private static bool IsEven(long n) {\n        return (n % 2 == 0);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool IsPalindrome(long n) {\n        if (n < 0)\n            return false;\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long[] even = new long[n + 1];\n        long[] odd = new long[n + 1];\n        long evenCount = 0;\n        long oddCount = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even[evenCount] = i;\n                    evenCount++;\n                } else {\n                    odd[oddCount] = i;\n                    oddCount++;\n                }\n            }\n        }\n        return Tuple.Create(evenCount, oddCount);\n    }\n\n    private static boolean IsPalindrome(long n) {\n        long reverse = 0;\n        while (n > reverse) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return n == reverse;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    public static bool IsPalindrome(long n) {\n        if (n < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        long left = 1, right = n;\n        while (left <= right) {\n            if (n % left != n % right) {\n                return false;\n            }\n            left *= 10;\n            right /= 10;\n        }\n        return true;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool IsPalindrome(long n) {\n        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        long half = n / 2;\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (long i = 1; i <= half; i++) {\n            if (n % i != n / i) {\n                return false;\n            }\n        }\n        return true;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    public static bool IsPalindrome(long n) {\n        long i = 0, j = n - 1;\n        while (i < j) {\n            if (n % 10 != n % 10 - 1)\n                return false;\n            n /= 10;\n            i++;\n            j--;\n        }\n        return true;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        int length = 0;\n        while (n != 0) {\n            length++;\n            n /= 10;\n        }\n        int start = 0, end = length - 1;\n        while (start < end) {\n            if (n != (n / 10) * 10 + n % 10) {\n                return false;\n            }\n            n /= 10;\n            start++;\n            end--;\n        }\n        return true;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the number is palindrome.\n    private static bool isPalindrome(long n) {\n        long reverse = 0;\n        while (n > reverse) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return n == reverse;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Check if the number is palindrome\n    private static bool IsPalindrome(long n) {\n        if (n < 0) {\n            throw new InvalidOperationException(\"Negative number is not palindrome\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        int length = 0;\n        while (n != 0) {\n            length++;\n            n = n / 10;\n        }\n        int start = 0, end = length - 1;\n        while (start < end) {\n            if (n % 10 != n / 10) {\n                return false;\n            }\n            n = n / 10;\n            start++;\n            end--;\n        }\n        return true;",
    "        // Write your code here\n        long[] even = new long[n + 1];\n        long[] odd = new long[n + 1];\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even[count] = i;\n                    count++;\n                }\n                else {\n                    odd[count] = i;\n                    count++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        long reverse = 0;\n        while (n > 0) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return reverse == n;",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Given a positive integer n, return the number of integer palindromes that fall\n    // within the range(1, n), inclusive.\n    // Example 1:\n    // >>> PalindromeCount((3L))\n    // 2\n    // Explanation:\n    // Integer palindrome are 1, 2, 3.\n    // Example 2:\n    // >>> PalindromeCount((12L))\n    // 6\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned value is the number of integer palindromes that fall within the range(1, n), inclusive.\n    public static long PalindromeCount(long n) {\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    // Given a positive integer n, return the number of integer palindromes that fall\n    // within the range(1, n), inclusive.\n    // Example 1:\n    // >>> PalindromeCount2((3L))\n    // 2\n    // Explanation:\n    // Integer palindrome are 1, 2, 3.\n    // Example 2:\n    // >>> PalindromeCount2((12L))\n    // 6\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned value is the number of integer palindromes that fall within the range(1, n), inclusive.\n    public static long",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    public static bool isPalindrome(long n) {\n        long s = 0, e = n - 1;\n        while (s < e) {\n            if (n % 10 != n / 10) {\n                return false;\n            }\n            n /= 10;\n            s++;\n            e--;\n        }\n        return true;",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the integer is a palindrome.\n    // Example:\n    // >>> IsPalindrome(1)\n    // True\n    // >>> IsPalindrome(2)\n    // True\n    // >>> IsPalindrome(3)\n    // False\n    // >>> IsPalindrome(4)\n    // True\n    // >>> IsPalindrome(5)\n    // True\n    // >>> IsPalindrome(6)\n    // False\n    // >>> IsPalindrome(7)\n    // True\n    // >>> IsPalindrome(8)\n    // True\n    // >>> IsPalindrome(9)\n    // False\n    // >>> IsPalindrome(10)\n    // True\n    // >>> IsPalindrome(11)\n    // True\n    // >>> IsPalindrome(12)\n    // False\n    // >>> IsPalindrome(13)\n    // False\n    // >>> IsPalindrome(14)\n    // False\n    // >>> IsPalindrome(15)\n    // False\n    // >>> IsPalindrome(16)\n    // False\n    // >>> IsPalindrome(17)\n    // False\n    // >>> IsPalindrome(18)\n    // False\n    // >>> IsPalindrome(19)\n    // False\n    // >>> IsPalindrome(20)\n    // False\n    // >>> IsPalindrome(21)\n    // False\n    // >>> IsPalindrome(22)\n    // False\n    // >>> IsPalindrome(23)\n    // False\n    // >>> IsPalindrome(24)\n    // False\n    // >>> IsPalindrome(25)\n    // False\n    // >>> IsPalindrome(26)\n    // False\n    // >>> IsPalindrome(27)\n    // False\n    // >>> IsPalindrome",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean IsPalindrome(long n) {\n        if (n < 0)\n            return false;\n        int length = 0;\n        while (n != 0) {\n            length++;\n            n /= 10;\n        }\n        int start = 0, end = length - 1;\n        while (start < end) {\n            if (n % 10 != n / 10)\n                return false;\n            n /= 10;\n            start++;\n            end--;\n        }\n        return true;",
    "        // Write your code here\n        long[] even = new long[n + 1];\n        long[] odd = new long[n + 1];\n        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                even[i] = i;\n            }\n            else {\n                odd[i] = i;\n            }\n        }\n        long evenCount = 0;\n        long oddCount = 0;\n        for (long i = 1; i <= n; i++) {\n            if (even[i] == i) {\n                evenCount++;\n            }\n            if (odd[i] == i) {\n                oddCount++;\n            }\n        }\n        return Tuple.Create(evenCount, oddCount);",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        long i = 1;\n        while (i <= n) {\n            if (i % 2 == 0) {\n                even++;\n            }\n            else {\n                odd++;\n            }\n            i++;\n        }\n        return Tuple.Create(even, odd);",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Check whether the number is palindrome.\n    private static bool IsPalindrome(long n) {\n        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        long n_copy = n;\n        long reverse = 0;\n        while (n_copy > 0) {\n            reverse = reverse * 10 + n_copy % 10;\n            n_copy /= 10;\n        }\n        return reverse == n;",
    "        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        long reverse = 0;\n        while (n > reverse) {\n            reverse = reverse * 10 + n % 10;\n            n /= 10;\n        }\n        return n == reverse;",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the given integer is a palindrome.\n    // Example:\n    // >>> IsPalindrome(12)\n    // True\n    // >>> IsPalindrome(21)\n    // False\n    // >>> IsPalindrome(0)\n    // False\n    // >>> IsPalindrome(-1)\n    // False\n    // >>> IsPalindrome(1)\n    // True\n    // >>> IsPalindrome(10)\n    // True\n    // >>> IsPalindrome(100)\n    // True\n    // >>> IsPalindrome(101)\n    // False\n    // >>> IsPalindrome(11)\n    // True\n    // >>> IsPalindrome(121)\n    // False\n    // >>> IsPalindrome(1221)\n    // False\n    // >>> IsPalindrome(1221)\n    // False\n    // >>> IsPalindrome(1221)\n    // False\n    // >>> IsPalindrome(1221)\n    // False\n    // >>> IsPalindrome(1221)\n    // False\n    // >>> IsPalindrome(1221)\n    // False\n    // >>> IsPalindrome(1221)\n    // False\n    // >>> IsPalindrome(1221)\n    // False\n    // >>> IsPalindrome(1221)\n    // False\n    // >>> IsPalindrome(1221)\n    // False\n    // >>> IsPalindrome(1221)\n    // False\n    // >>> IsPalindrome(1221)\n    // False\n    // >>> IsPalindrome(1221)\n    // False\n    // >>> IsPalindrome(1221)\n    // False\n    // >>> IsPalindrome(1221)\n    // False\n    // >>> IsPalindrome(1221)\n    // False\n    // >>> IsPal",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Check if the number is palindrome\n    private static bool IsPalindrome(long n) {\n        if (n < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        long half = n / 2;\n        if (n % 2 == 0) {\n            return n == half * 2;\n        }\n        else {\n            return n == half * 2 + 1;\n        }",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (IsEven(i)) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool IsPalindrome(long n) {\n        // Write your code here\n        long n1 = n;\n        long n2 = 0;\n        while (n1 != 0) {\n            n2 = n2 * 10 + n1 % 10;\n            n1 /= 10;\n        }\n        return n2 == n1;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        int length = 0;\n        while (n != 0) {\n            length++;\n            n /= 10;\n        }\n        int start = 0, end = length - 1;\n        while (start < end) {\n            if (n != (n / 10) * 10 + n % 10) {\n                return false;\n            }\n            n /= 10;\n            start++;\n            end--;\n        }\n        return true;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        String s = String.valueOf(n);\n        return s.Reverse().Equals(s);",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the given integer is a palindrome.\n    // Example:\n    // >>> isPalindrome(12)\n    // True\n    // >>> isPalindrome(21)\n    // True\n    // >>> isPalindrome(11)\n    // False\n    // >>> isPalindrome(1)\n    // False\n    // >>> isPalindrome(0)\n    // False\n    // >>> isPalindrome(-1)\n    // False\n    // >>> isPalindrome(-12)\n    // False\n    // >>> isPalindrome(0)\n    // False\n    // >>> isPalindrome(0)\n    // False\n    // >>> isPalindrome(0)\n    // False\n    // >>> isPalindrome(0)\n    // False\n    public static bool isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        long half = n / 2;\n        if (n % 2 == 0) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        return isPalindrome(half);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            long j = i;\n            while (j > 0) {\n                if (j % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n                j /= 2;\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long[] even = new long[n + 1];\n        long[] odd = new long[n + 1];\n        long[] result = new long[2];\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                even[i] = i;\n            }\n            else {\n                odd[i] = i;\n            }\n        }\n        for (int i = 2; i <= n; i++) {\n            for (int j = i; j <= n; j++) {\n                if (even[i] == odd[j]) {\n                    even[i] = even[i] * 2;\n                    odd[j] = odd[j] * 2;\n                }\n            }\n        }\n        for (int i = 1; i <= n; i++) {\n            if (even[i] > odd[i]) {\n                result[0] += even[i];\n                result[1] += odd[i];\n            }\n            else {\n                result[0] += odd[i];\n                result[1] += even[i];\n            }\n        }\n        return Tuple.Create(result[0], result[1]);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool isPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        if (n == 0) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        long half = n / 2;\n        for (long i = 1; i <= half; i++) {\n            if (n % i != n / i) {\n                return false;\n            }\n        }\n        return true;",
    "        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (IsEven(i)) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the number is palindrome.\n    private static bool IsPalindrome(long n) {\n        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;\n    }\n\n    // Return true if the number is even.\n    private static bool IsEven(long n) {\n        return n % 2 == 0;",
    "        // Write your code here\n        long even = 0;\n        long odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static boolean isPalindrome(long n) {\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool IsPalindrome(long n) {\n        if (n < 0) {\n            return false;\n        }\n        if (n == 0) {\n            return true;\n        }\n        long half = (long) Math.floor(Math.sqrt(n));\n        for (long i = 1; i <= half; i++) {\n            if (n % i != n / i) {\n                return false;\n            }\n        }\n        return true;",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0)\n                    even++;\n                else\n                    odd++;\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Return true if the integer is a palindrome.\n    // Example:\n    // >>> IsPalindrome(1)\n    // True\n    // >>> IsPalindrome(2)\n    // True\n    // >>> IsPalindrome(3)\n    // True\n    // >>> IsPalindrome(4)\n    // False\n    // >>> IsPalindrome(5)\n    // False\n    // >>> IsPalindrome(6)\n    // True\n    // >>> IsPalindrome(7)\n    // True\n    // >>> IsPalindrome(8)\n    // True\n    // >>> IsPalindrome(9)\n    // True\n    // >>> IsPalindrome(10)\n    // False\n    // >>> IsPalindrome(11)\n    // False\n    // >>> IsPalindrome(12)\n    // False\n    // >>> IsPalindrome(13)\n    // False\n    // >>> IsPalindrome(14)\n    // False\n    // >>> IsPalindrome(15)\n    // False\n    // >>> IsPalindrome(16)\n    // False\n    // >>> IsPalindrome(17)\n    // False\n    // >>> IsPalindrome(18)\n    // False\n    // >>> IsPalindrome(19)\n    // False\n    // >>> IsPalindrome(20)\n    // False\n    // >>> IsPalindrome(21)\n    // False\n    // >>> IsPalindrome(22)\n    // False\n    // >>> IsPalindrome(23)\n    // False\n    // >>> IsPalindrome(24)\n    // False\n    // >>> IsPalindrome(25)\n    // False\n    // >>> IsPalindrome(26)\n    // False\n    // >>> IsPalindrome(27)\n    // False\n    // >>> IsPalindrome",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (IsEven(i)) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    private static bool IsPalindrome(long i) {\n        if (i < 0) {\n            throw new ArgumentOutOfRangeException(\"i\");\n        }\n        if (i == 0) {\n            return true;\n        }\n        long half = i / 2;\n        return i == IsPalindrome(half) * IsPalindrome(i - half);\n    }\n\n    private static bool IsEven(long i) {\n        return i % 2 == 0;",
    "        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Check if the given number is palindrome.\n    private static bool isPalindrome(long n) {\n        if (n < 0) {\n            throw new InvalidOperationException(\"Negative number is not palindrome.\");\n        }\n        if (n == 0) {\n            return true;\n        }\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Check if a number is palindrome\n    private static bool IsPalindrome(long n) {\n        long rev = 0;\n        while (n > rev) {\n            rev = rev * 10 + n % 10;\n            n /= 10;\n        }\n        return n == rev;",
    "        // Write your code here\n        long even = 0, odd = 0;\n        for (long i = 1; i <= n; i++) {\n            if (IsPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                }\n                else {\n                    odd++;\n                }\n            }\n        }\n        return Tuple.Create(even, odd);\n    }\n\n    // Check if the number is palindrome\n    public static bool IsPalindrome(long n) {\n        // Write your code here\n        if (n < 0) {\n            return false;\n        }\n        int length = 0;\n        while (n != 0) {\n            length++;\n            n = n / 10;\n        }\n        int i = 0;\n        int j = length - 1;\n        while (i < j) {\n            if (n % 10 != n / 10) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}