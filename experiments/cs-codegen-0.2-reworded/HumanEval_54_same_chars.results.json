{
  "name": "HumanEval_54_same_chars",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict0.Add(s0[i], 0);\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 0);\n        }\n\n        // Check if the dictionaries are the same.\n        return dict0.Count == dict1.Count && dict0.Keys.Count == dict1.Keys.Count;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"dcba\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzz\")\n    // (false)\n    public static bool Anagram(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict0.Add(s0[i], 0);\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 0);\n        }\n\n        // Check if the dictionaries are the same.\n        return dict0.Count == dict1.Count && dict0.Keys.Count == dict1.Keys.Count;\n    }\n\n    // Check if a string is a permutation of another string.\n    // >>> Permutation(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Permutation\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyk77nn07.cs(80,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0 and s1.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++)\n            d0.Add(s0[i], 0);\n        for (int i = 0; i < s1.Length; i++)\n            d0.Add(s1[i], 0);\n\n        // Check if the dictionary is empty.\n        if (d0.Count == 0)\n            return true;\n\n        // Check if the dictionary contains all characters in s0.\n        for (int i = 0; i < s0.Length; i++)\n            if (d0[s0[i]] == 0)\n                return false;\n\n        // Check if the dictionary contains all characters in s1.\n        for (int i = 0; i < s1.Length; i++)\n            if (d0[s1[i]] == 0)\n                return false;\n\n        // Check if the dictionary contains all characters in s0 and s1.\n        return true;\n    }\n\n    // Check if two strings are anagrams.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcde\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptqiwgsy0.cs(69,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        var dict = s0.ToCharArray().Select(c => (int)c).ToDictionary();\n        // Create a dictionary of characters in s1.\n        var dict1 = s1.ToCharArray().Select(c => (int)c).ToDictionary();\n        // Check if the dictionaries are equal.\n        return dict.Equals(dict1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpir3w70pj.cs(24,57): error CS1501: No overload for method 'ToDictionary' takes 0 arguments\n/tmp/tmpir3w70pj.cs(26,58): error CS1501: No overload for method 'ToDictionary' takes 0 arguments\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0 and s1.\n        Dictionary<char, char> dict = new Dictionary<char, char>();\n        for (char c : s0)\n            dict[c] = c;\n        for (char c : s1)\n            dict[c] = c;\n\n        // Check if there are any characters that are not in the dictionary.\n        for (char c : dict.Keys)\n            if (dict[c] == c)\n                return true;\n\n        return false;\n    }\n\n    // Check if a word is a permutation of another word.\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abdc\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abdd\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcc\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzz\"))\n    // (true)\n    public static bool Permutation(string s0, string s1) {\n        // Create a dictionary of characters in s0 and s1.\n        Dictionary<char, char> dict = new Dictionary<char, char>();\n        for (char c : s0)\n            dict[c] = c;\n        for (char c : s1)\n            dict[c] = c;\n\n        // Check if there are any characters that are not in the dictionary.\n        for (char c : dict.Keys)\n            if (dict[c] == c)\n                return true;\n\n        return false;\n    }\n\n    // Check if a word is a permutation of another word.\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abdc\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abdd\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcc\"))\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppmm9bdht.cs(25,21): error CS1002: ; expected\n/tmp/tmppmm9bdht.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmppmm9bdht.cs(25,21): error CS1001: Identifier expected\n/tmp/tmppmm9bdht.cs(27,21): error CS1002: ; expected\n/tmp/tmppmm9bdht.cs(27,21): error CS1525: Invalid expression term ':'\n/tmp/tmppmm9bdht.cs(27,21): error CS1001: Identifier expected\n/tmp/tmppmm9bdht.cs(31,21): error CS1002: ; expected\n/tmp/tmppmm9bdht.cs(31,21): error CS1525: Invalid expression term ':'\n/tmp/tmppmm9bdht.cs(31,21): error CS1001: Identifier expected\n/tmp/tmppmm9bdht.cs(54,21): error CS1002: ; expected\n/tmp/tmppmm9bdht.cs(54,21): error CS1525: Invalid expression term ':'\n/tmp/tmppmm9bdht.cs(54,21): error CS1001: Identifier expected\n/tmp/tmppmm9bdht.cs(56,21): error CS1002: ; expected\n/tmp/tmppmm9bdht.cs(56,21): error CS1525: Invalid expression term ':'\n/tmp/tmppmm9bdht.cs(56,21): error CS1001: Identifier expected\n/tmp/tmppmm9bdht.cs(60,21): error CS1002: ; expected\n/tmp/tmppmm9bdht.cs(60,21): error CS1525: Invalid expression term ':'\n/tmp/tmppmm9bdht.cs(60,21): error CS1001: Identifier expected\n/tmp/tmppmm9bdht.cs(86,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (!d0.ContainsKey(c)) {\n                d0.Add(c, 0);\n            }\n            d0[c]++;\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (!d1.ContainsKey(c)) {\n                d1.Add(c, 0);\n            }\n            d1[c]++;\n        }\n        // Check if the two dictionaries have the same characters.\n        return d0.Keys().All(x => d1.ContainsKey(x) && d0[x] == d1[x]);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_xkatk66.cs(42,19): error CS1955: Non-invocable member 'Dictionary<char, int>.Keys' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d862e98c30b24ffabaa7369d205d358b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d862e98c30b24ffabaa7369d205d358b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c))\n                d0[c]++;\n            else\n                d0[c] = 1;\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c))\n                d1[c]++;\n            else\n                d1[c] = 1;\n        }\n        // Check if the two dictionaries have the same characters.\n        return d0.Keys().All(x => d1.ContainsKey(x) && d0[x] == d1[x]);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkl5t95id.cs(42,19): error CS1955: Non-invocable member 'Dictionary<char, int>.Keys' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            d0.Add(s0[i], 0);\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            d1.Add(s1[i], 0);\n        }\n\n        // Check if the dictionaries are the same.\n        return d0.Equals(d1);\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdz\")\n    // (false)\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_8698s5z.cs(84,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d862e98c30b24ffabaa7369d205d358b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d862e98c30b24ffabaa7369d205d358b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\",\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqxppz_jo.cs(87,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Convert to lower case\n        s0 = s0.ToLower();\n        s1 = s1.ToLower();\n        // Check if the length is different\n        if (s0.Length != s1.Length) return false;\n        // Check if the first character is different\n        if (s0[0] != s1[0]) return false;\n        // Check if the second character is different\n        if (s0[1] != s1[1]) return false;\n        // Check if the third character is different\n        if (s0[2] != s1[2]) return false;\n        // Check if the fourth character is different\n        if (s0[3] != s1[3]) return false;\n        // Check if the fifth character is different\n        if (s0[4] != s1[4]) return false;\n        // Check if the sixth character is different\n        if (s0[5] != s1[5]) return false;\n        // Check if the seventh character is different\n        if (s0[6] != s1[6]) return false;\n        // Check if the eighth character is different\n        if (s0[7] != s1[7]) return false;\n        // Check if the ninth character is different\n        if (s0[8] != s1[8]) return false;\n        // Check if the tenth character is different\n        if (s0[9] != s1[9]) return false;\n        // Check if the eleventh character is different\n        if (s0[10] != s1[10]) return false;\n        // Check if the twelfth character is different\n        if (s0[11] != s1[11]) return false;\n        // Check if the thirteenth character is different\n        if (s0[12] != s1[12]) return false;\n        // Check if the fourteenth character is different\n        if (s0[13] != s1[13]) return false;\n        // Check if the fifteenth character is different\n        if (s0[14] != s1[14]) return false;\n        // Check if the sixteenth character is different\n        if (s0[15] != s1[15]) return false;\n        //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0k0o9bxt.cs(22,24): error CS0161: 'Problem.SameChars(string, string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            d0.Add(s0[i], 0);\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            d1.Add(s1[i], 0);\n        }\n        // Check if the dictionaries are the same.\n        return d0.Equals(d1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <dff83ec1065d49e2820a4eb13a4a751f>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <dff83ec1065d49e2820a4eb13a4a751f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <dff83ec1065d49e2820a4eb13a4a751f>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <dff83ec1065d49e2820a4eb13a4a751f>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict0.Add(s0[i], 0);\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 0);\n        }\n        // Check if the dictionaries are the same.\n        return dict0.Count == dict1.Count && dict0.Keys.Count == dict1.Keys.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <d10a9f28d1b54df6bed51ec92ed427ad>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <d10a9f28d1b54df6bed51ec92ed427ad>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <d10a9f28d1b54df6bed51ec92ed427ad>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <d10a9f28d1b54df6bed51ec92ed427ad>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i]) return false;\n        return true;\n    }\n\n    // Check if a word is a permutation of another word.\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abdd\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzz\"))\n    // (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnj0i5rws.cs(77,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc580mqis.cs(87,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int start, int end) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = start; i < end; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"ab\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprmku45vi.cs(80,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Check if the lengths are the same.\n        if (s0.Length != s1.Length)\n            return false;\n        // Check if the lengths are the same.\n        if (s0.Length != s1.Length)\n            return false;\n        // Check if the characters are the same.\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        // Check if the characters are the same.\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9f54e9d173464c0aa87f7e7b71b0b640>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9f54e9d173464c0aa87f7e7b71b0b640>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0 and s1.\n        Dictionary<char, int> dict0 = CreateDict(s0);\n        Dictionary<char, int> dict1 = CreateDict(s1);\n        // Check if the dictionaries are the same.\n        return dict0.Equals(dict1);\n    }\n\n    // Create a dictionary of characters in a string.\n    // >>> CreateDict(\"abcd\")\n    // { 'a': 1, 'b': 1, 'c': 1, 'd': 1 }\n    // >>> CreateDict(\"abcd\")\n    // { 'a': 1, 'b': 1, 'c': 1, 'd': 1 }\n    // >>> CreateDict(\"abcd\")\n    // { 'a': 1, 'b': 1, 'c': 1, 'd': 1 }\n    // >>> CreateDict(\"abcd\")\n    // { 'a': 1, 'b': 1, 'c': 1, 'd': 1 }\n    // >>> CreateDict(\"abcd\")\n    // { 'a': 1, 'b': 1, 'c': 1, 'd': 1 }\n    // >>> CreateDict(\"abcd\")\n    // { 'a': 1, 'b': 1, 'c': 1, 'd': 1 }\n    // >>> CreateDict(\"abcd\")\n    // { 'a': 1, 'b': 1, 'c': 1, 'd': 1 }\n    // >>> CreateDict(\"abcd\")\n    // { 'a': 1, 'b': 1, 'c': 1, 'd': 1 }\n    // >>> CreateDict(\"abcd\")\n    // { 'a': 1, 'b': 1, 'c': 1, 'd': 1 }\n    // >>> CreateDict(\"abcd\")\n    // { 'a': 1, 'b': 1, 'c': 1, 'd': 1 }\n    // >>> CreateDict(\"abcd\")\n    // { 'a': 1, 'b': 1, 'c': 1, 'd': 1 }\n    // >>> CreateDict(\"abcd\")\n    // { 'a': 1, 'b': 1, 'c': 1, 'd': 1 }\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfua7_8n9.cs(67,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict0.Add(s0[i], 0);\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 0);\n        }\n        // Check if the dictionaries are the same.\n        return dict0.Count == dict1.Count && dict0.Keys.Count == dict1.Keys.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <d10a9f28d1b54df6bed51ec92ed427ad>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <d10a9f28d1b54df6bed51ec92ed427ad>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <d10a9f28d1b54df6bed51ec92ed427ad>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <d10a9f28d1b54df6bed51ec92ed427ad>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0 and s1.\n        var dict = s0.ToLower().ToCharArray().ToSortedList();\n        for (var i = 0; i < s1.Length(); i++) {\n            dict.Add(s1[i].ToLower());\n        }\n        // Check if the dictionary is empty.\n        if (dict.Count == 0) {\n            return true;\n        }\n        // Check if the dictionary contains all characters in s1.\n        for (var i = 0; i < s1.Length(); i++) {\n            if (!dict.Contains(s1[i].ToLower())) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp44reavot.cs(24,47): error CS1061: 'char[]' does not contain a definition for 'ToSortedList' and no accessible extension method 'ToSortedList' accepting a first argument of type 'char[]' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp44reavot.cs(25,32): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmp44reavot.cs(26,28): error CS1501: No overload for method 'ToLower' takes 0 arguments\n/tmp/tmp44reavot.cs(29,13): error CS0019: Operator '==' cannot be applied to operands of type 'method group' and 'int'\n/tmp/tmp44reavot.cs(33,32): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmp44reavot.cs(34,38): error CS1501: No overload for method 'ToLower' takes 0 arguments\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null) return false;\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7fcbc1ab6e449679b054a17a15d10a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7fcbc1ab6e449679b054a17a15d10a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null) return false;\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppdxxb6u9.cs(85,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var s0_ = s0.ToLower();\n        var s1_ = s1.ToLower();\n        if (s0_ == s1_)\n            return true;\n        var s0_ = s0.ToUpper();\n        var s1_ = s1.ToUpper();\n        if (s0_ == s1_)\n            return true;\n        return false;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int min_length) {\n        var s0_ = s0.ToLower();\n        var s1_ = s1.ToLower();\n        if (s0_ == s1_)\n            return true;\n        var s0_ = s0.ToUpper();\n        var s1_ = s1.ToUpper();\n        if (s0_ == s1_)\n            return true;\n        if (s0_.Length < min_length || s1_.Length < min_length)\n            return false;\n        return s0_ == s1_;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dd\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5imbui81.cs(78,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict0.Add(s0[i], 0);\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 0);\n        }\n\n        // Check if the dictionaries are equal.\n        return dict0.Count == dict1.Count && dict0.Keys.Count == dict1.Keys.Count;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcwaggn0c.cs(84,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null) return false;\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int start, int end) {\n        if (s0 == null || s1 == null) return false;\n        if (start < 0 || end < 0 || start > s0.Length || end > s0.Length) return false;\n        if (start > end) return false;\n        for (int i = start; i < end; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9dpf_18p.cs(74,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int minLength) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length < minLength || s1.Length < minLength)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptdw348x6.cs(80,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\",\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkaeh3sly.cs(87,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f3a51143eb084ed9a13ff44fe4aae17a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f3a51143eb084ed9a13ff44fe4aae17a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c]++;\n            }\n            else {\n                d0[c] = 1;\n            }\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c]++;\n            }\n            else {\n                d1[c] = 1;\n            }\n        }\n\n        // Check if the two dictionaries have the same characters.\n        return d0.Keys().All(x => d1.ContainsKey(x) && d0[x] == d1[x]);\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3lfp_lfu.cs(87,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var s0_ = s0.ToLower();\n        var s1_ = s1.ToLower();\n        return s0_ == s1_;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"dcba\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptv0mew0_.cs(49,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\",\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy5vp1cu5.cs(87,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict0.Add(s0[i], 0);\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 0);\n        }\n        // Check if the dictionaries are the same.\n        return dict0.Count == dict1.Count && dict0.Keys.Count == dict1.Keys.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <d10a9f28d1b54df6bed51ec92ed427ad>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <d10a9f28d1b54df6bed51ec92ed427ad>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <d10a9f28d1b54df6bed51ec92ed427ad>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <d10a9f28d1b54df6bed51ec92ed427ad>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var chars0 = s0.ToCharArray();\n        var chars1 = s1.ToCharArray();\n        var len0 = chars0.Length;\n        var len1 = chars1.Length;\n        if (len0 != len1) return false;\n        for (var i = 0; i < len0; i++) {\n            if (chars0[i] != chars1[i]) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4b864bde665f4c85866063389af6d78a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4b864bde665f4c85866063389af6d78a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c]++;\n            }\n            else {\n                d0.Add(c, 1);\n            }\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c]++;\n            }\n            else {\n                d1.Add(c, 1);\n            }\n        }\n        // Check if the two dictionaries have the same characters.\n        return d0.Keys().All(x => d1.ContainsKey(x) && d0[x] == d1[x]);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpihw_4765.cs(46,19): error CS1955: Non-invocable member 'Dictionary<char, int>.Keys' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c]++;\n            } else {\n                d0.Add(c, 1);\n            }\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c]++;\n            } else {\n                d1.Add(c, 1);\n            }\n        }\n        // Check if the two dictionaries are the same.\n        return d0.Equals(d1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f5acdbcab7844e4faa5d8f0e8bdf4885>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f5acdbcab7844e4faa5d8f0e8bdf4885>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int i0, int i1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = i0; i < i1; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameCh\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzq6ltxtq.cs(80,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i])\n                return false;\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <528cdf40ec394d1886683b4fd32e09c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <528cdf40ec394d1886683b4fd32e09c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var chars0 = s0.ToCharArray();\n        var chars1 = s1.ToCharArray();\n        if (chars0.Length != chars1.Length)\n            return false;\n        for (int i = 0; i < chars0.Length; i++) {\n            if (chars0[i] != chars1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars2((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars2((\"eabcdzzzz\"), (\"dddzzzz\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp57wf43cs.cs(73,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c]++;\n            }\n            else {\n                d0[c] = 1;\n            }\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c]++;\n            }\n            else {\n                d1[c] = 1;\n            }\n        }\n\n        // Check if the dictionaries are the same.\n        return d0.Equals(d1);\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"ddd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzzzzzz\")\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkwgtu3co.cs(85,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c] += 1;\n            }\n            else {\n                d0[c] = 1;\n            }\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c] += 1;\n            }\n            else {\n                d1[c] = 1;\n            }\n        }\n\n        // Check if the two dictionaries are equal.\n        return d0.Equals(d1);\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"ddd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdd\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzzzz\")\n    // (true)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyz1gpsc5.cs(85,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var s0_ = s0.ToLower();\n        var s1_ = s1.ToLower();\n        var s0_len = s0_.Length;\n        var s1_len = s1_.Length;\n        if (s0_len != s1_len)\n            return false;\n        for (var i = 0; i < s0_len; i++) {\n            if (s0_[i] != s1_[i])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5d676284870a4dbca50469adb01006f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5d676284870a4dbca50469adb01006f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\",\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqxppz_jo.cs(87,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c]++;\n            }\n            else {\n                d0[c] = 1;\n            }\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c]++;\n            }\n            else {\n                d1[c] = 1;\n            }\n        }\n        // Check if the dictionaries are the same.\n        return d0.Equals(d1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2929b5c1eeac4a82baad9595d662a5dd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2929b5c1eeac4a82baad9595d662a5dd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzz\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg9j16d6_.cs(77,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0 and s1.\n        Dictionary<char, char> dict0 = new Dictionary<char, char>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict0.Add(s0[i], s0[i]);\n        }\n        for (int i = 0; i < s1.Length; i++) {\n            dict0.Add(s1[i], s1[i]);\n        }\n        // Check if the dictionary is empty.\n        if (dict0.Count == 0) {\n            return true;\n        }\n        // Check if the dictionary contains all characters in s0 and s1.\n        for (int i = 0; i < s0.Length; i++) {\n            if (!dict0.ContainsKey(s0[i])) {\n                return false;\n            }\n        }\n        for (int i = 0; i < s1.Length; i++) {\n            if (!dict0.ContainsKey(s1[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x0001b] in <2a5d41e7b00b42ab95b03a99a9968233>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <2a5d41e7b00b42ab95b03a99a9968233>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x0001b] in <2a5d41e7b00b42ab95b03a99a9968233>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <2a5d41e7b00b42ab95b03a99a9968233>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int i0, int i1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = i0; i < i1; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameCh\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzq6ltxtq.cs(80,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null) return false;\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7fcbc1ab6e449679b054a17a15d10a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7fcbc1ab6e449679b054a17a15d10a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i])\n                return false;\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int k) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i])\n                return false;\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptda92c9b.cs(77,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int minLength) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length < minLength || s1.Length < minLength)\n            return false;\n        for (int i = 0; i < minLength; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> Same\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi1pwwobf.cs(80,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0 and s1.\n        var dict = s0.ToLower().ToCharArray();\n        for (var i = 0; i < s1.Length; i++)\n            dict[dict.IndexOf(s1[i])] = true;\n        // Check if all characters in s0 are in dict.\n        return dict.All(x => x);\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int minLength) {\n        // Create a dictionary of characters in s0 and s1.\n        var dict = s0.ToLower().ToCharArray();\n        for (var i = 0; i < s1.Length; i++)\n            dict[dict.IndexOf(s1[i])] = true;\n        // Check if all characters in s0 are in dict.\n        return dict.All(x => x) && s0.Length >= minLength;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxmi1fdst.cs(72,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Check if the strings are empty.\n        if (s0.Length == 0 && s1.Length == 0) return true;\n        // Check if the strings are the same.\n        if (s0 == s1) return true;\n        // Check if the strings are not the same.\n        if (s0.Length != s1.Length) return false;\n        // Check if the strings are not empty.\n        if (s0.Length == 0 || s1.Length == 0) return false;\n        // Check if the strings are not the same.\n        if (s0.Length == 1 && s1.Length == 1) return false;\n        // Check if the strings are not the same.\n        if (s0.Length > 1 && s1.Length > 1) return false;\n        // Check if the strings are not the same.\n        if (s0.Length == 1 && s1.Length == 1) return false;\n        // Check if the strings are not the same.\n        if (s0.Length == 1 && s1.Length == 2) return false;\n        // Check if the strings are not the same.\n        if (s0.Length == 2 && s1.Length == 1) return false;\n        // Check if the strings are not the same.\n        if (s0.Length == 2 && s1.Length == 2) return false;\n        // Check if the strings are not the same.\n        if (s0.Length == 2 && s1.Length == 3) return false;\n        // Check if the strings are not the same.\n        if (s0.Length == 3 && s1.Length == 2) return false;\n        // Check if the strings are not the same.\n        if (s0.Length == 3 && s1.Length == 3) return false;\n        // Check if the strings are not the same.\n        if (s0.Length == 3 && s1.Length == 4) return false;\n        // Check if the strings are not the same.\n        if (s0.Length == 4 && s1.Length == 3) return false;\n        // Check if the strings are not the same.\n        if (s0.Length == 4 && s1.Length == 4) return false;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpue02ovs7.cs(22,24): error CS0161: 'Problem.SameChars(string, string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if a word is a permutation of another word.\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abdd\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abdd\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abddzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abddzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abddzzzzzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abddzzzzzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abddzzzzzzzzzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abddzzzzzzzzzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abddzzzzzzzzzzzzzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abddzzzzzzzzzzzzzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abddzzzzzzzzzzzzzzzzzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abddzzzzzzzzzzzzzzzzzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"ab\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmymx3nax.cs(77,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var s = s0.ToLower();\n        var t = s1.ToLower();\n        if (s.Length != t.Length)\n            return false;\n        for (var i = 0; i < s.Length; i++) {\n            if (s[i] != t[i])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <216b39c6e52b43a0801afe882c78d2fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <216b39c6e52b43a0801afe882c78d2fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null) return false;\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7fcbc1ab6e449679b054a17a15d10a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7fcbc1ab6e449679b054a17a15d10a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0 and s1.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            d0.Add(s0[i], 0);\n        }\n        for (int i = 0; i < s1.Length; i++) {\n            d0.Add(s1[i], 0);\n        }\n        // Check if the dictionary is empty.\n        if (d0.Count == 0) {\n            return true;\n        }\n        // Check if the dictionary contains all characters in s0.\n        for (int i = 0; i < s0.Length; i++) {\n            if (d0[s0[i]] == 0) {\n                return false;\n            }\n        }\n        // Check if the dictionary contains all characters in s1.\n        for (int i = 0; i < s1.Length; i++) {\n            if (d0[s1[i]] == 0) {\n                return false;\n            }\n        }\n        // Check if the dictionary contains all characters in s0 and s1.\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <6d3f2466909947649bd3837f3e31ed19>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <6d3f2466909947649bd3837f3e31ed19>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <6d3f2466909947649bd3837f3e31ed19>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <6d3f2466909947649bd3837f3e31ed19>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        var dict = s0.ToCharArray().Select(c => (char)c).ToDictionary(k => k, v => v);\n        // Create a dictionary of characters in s1.\n        var dict1 = s1.ToCharArray().Select(c => (char)c).ToDictionary(k => k, v => v);\n        // Check if the dictionaries are equal.\n        return dict.Equals(dict1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement] (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult] keySelector, System.Func`2[T,TResult] elementSelector, System.Collections.Generic.IEqualityComparer`1[T] comparer) [0x0009e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement] (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult] keySelector, System.Func`2[T,TResult] elementSelector) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x0002b] in <473b8e03b9784e57bb90ce216204c4a0>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <473b8e03b9784e57bb90ce216204c4a0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement] (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult] keySelector, System.Func`2[T,TResult] elementSelector, System.Collections.Generic.IEqualityComparer`1[T] comparer) [0x0009e] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement] (System.Collections.",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            d0.Add(s0[i], 0);\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            d1.Add(s1[i], 0);\n        }\n        // Check if the two dictionaries have the same characters.\n        return d0.Keys().All(d1.Keys());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps6ulh6w0.cs(34,19): error CS1955: Non-invocable member 'Dictionary<char, int>.Keys' cannot be used like a method.\n/tmp/tmps6ulh6w0.cs(34,33): error CS1955: Non-invocable member 'Dictionary<char, int>.Keys' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var s = s0.ToLower();\n        var t = s1.ToLower();\n        var count = 0;\n        for (var i = 0; i < s.Length; i++) {\n            if (s[i] != t[i]) {\n                count++;\n            }\n        }\n        return count == 0;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"dddzzzzzzzddeddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7ugklfs8.cs(74,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null) return false;\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7fcbc1ab6e449679b054a17a15d10a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7fcbc1ab6e449679b054a17a15d10a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d862e98c30b24ffabaa7369d205d358b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d862e98c30b24ffabaa7369d205d358b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c]++;\n            }\n            else {\n                d0.Add(c, 1);\n            }\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c]++;\n            }\n            else {\n                d1.Add(c, 1);\n            }\n        }\n        // Check if the dictionaries are the same.\n        return d0.Equals(d1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <00b951c431e64014bbf1ea6aaed629c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <00b951c431e64014bbf1ea6aaed629c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var s = s0.ToLower();\n        var t = s1.ToLower();\n        var i = 0;\n        var j = 0;\n        while (i < s.Length && j < t.Length) {\n            if (s[i] == t[j]) {\n                i++;\n                j++;\n            }\n            else {\n                i = 0;\n                j = 0;\n            }\n        }\n        return i == s.Length && j == t.Length;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293414,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0 and s1.\n        // Dictionary<char, int> chars = new Dictionary<char, int>();\n        // foreach (char c in s0) {\n        //     chars.Add(c, 0);\n        // }\n        // foreach (char c in s1) {\n        //     chars.Add(c, 0);\n        // }\n        // foreach (char c in chars.Keys) {\n        //     if (chars[c] > 0) {\n        //         chars[c] = chars[c] + 1;\n        //     }\n        // }\n        // return chars.Keys.Count == chars.Values.Count;\n        return s0.ToLower().Equals(s1.ToLower());\n    }\n\n    // Check if a word is a permutation of another word.\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abdc\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzzzzzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzzzzzzzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzzzzzzzzzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzzzzzzzzzzzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzzzzzzzzzzzzzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzz\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnvj9f3t6.cs(75,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            d0.Add(s0[i], 0);\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            d1.Add(s1[i], 0);\n        }\n\n        // Check if the two dictionaries are the same.\n        return d0.Count == d1.Count && d0.Count == d1.Count;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9tx6zucr.cs(84,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict0.Add(s0[i], 0);\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 0);\n        }\n        // Check if the dictionaries are the same.\n        return dict0.Equals(dict1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <dab553d5e8154b1c81bbe1408cd1b007>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <dab553d5e8154b1c81bbe1408cd1b007>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <dab553d5e8154b1c81bbe1408cd1b007>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <dab553d5e8154b1c81bbe1408cd1b007>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0 and s1.\n        var dict = s0.ToCharArray().Concat(s1.ToCharArray()).Distinct().ToDictionary(\n            (x, y) => x == y,\n            (x, y) => x);\n\n        // Check if the dictionary is empty.\n        if (dict.Count == 0) return true;\n\n        // Check if the dictionary contains all characters in s0 and s1.\n        return dict.Count == s0.Length() + s1.Length();\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"cdab\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\",\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd_vugl1s.cs(84,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\",\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkaeh3sly.cs(87,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Check if the lengths are equal.\n        if (s0.Length != s1.Length)\n            return false;\n\n        // Check if the characters are the same.\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n\n        // All checks passed.\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int minLength) {\n        // Check if the lengths are equal.\n        if (s0.Length < minLength || s1.Length < minLength)\n            return false;\n\n        // Check if the characters are the same.\n        for (int i = 0; i < minLength; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n\n        // All checks passed.\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"),\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk8ipbdy7.cs(84,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Check if the lengths are the same.\n        if (s0.Length != s1.Length)\n            return false;\n        // Check if the strings are the same.\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        // All checks passed.\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a400d7514cfa40f9b2293a243d51537b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a400d7514cfa40f9b2293a243d51537b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var s0_lower = s0.ToLower();\n        var s1_lower = s1.ToLower();\n        if (s0_lower.Length != s1_lower.Length)\n            return false;\n        for (var i = 0; i < s0_lower.Length; i++) {\n            if (s0_lower[i] != s1_lower[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwpqv1wig.cs(85,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i])\n                return false;\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcde\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_2_y35iz.cs(86,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (!d0.ContainsKey(c)) {\n                d0.Add(c, 0);\n            }\n            d0[c]++;\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (!d1.ContainsKey(c)) {\n                d1.Add(c, 0);\n            }\n            d1[c]++;\n        }\n        // Check if the two dictionaries have the same characters.\n        for (char c : d0.Keys) {\n            if (d1.ContainsKey(c)) {\n                if (d0[c] != d1[c]) {\n                    return false;\n                }\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpueqorbxy.cs(42,21): error CS1002: ; expected\n/tmp/tmpueqorbxy.cs(42,21): error CS1525: Invalid expression term ':'\n/tmp/tmpueqorbxy.cs(42,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\",\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqxppz_jo.cs(87,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c]++;\n            }\n            else {\n                d0[c] = 1;\n            }\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c]++;\n            }\n            else {\n                d1[c] = 1;\n            }\n        }\n        // Check if the dictionaries are the same.\n        return d0.Equals(d1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2929b5c1eeac4a82baad9595d662a5dd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2929b5c1eeac4a82baad9595d662a5dd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict0.Add(s0[i], 0);\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 0);\n        }\n        // Check if the dictionaries are the same.\n        return dict0.Equals(dict1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <dab553d5e8154b1c81bbe1408cd1b007>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <dab553d5e8154b1c81bbe1408cd1b007>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <dab553d5e8154b1c81bbe1408cd1b007>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <dab553d5e8154b1c81bbe1408cd1b007>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        int[] chars = new int[26];\n        for (int i = 0; i < s0.Length; i++) {\n            chars[s0[i] - 'a']++;\n        }\n        for (int i = 0; i < s1.Length; i++) {\n            chars[s1[i] - 'a']--;\n            if (chars[s1[i] - 'a'] < 0)\n                return false;\n        }\n        return true;\n    }\n\n    // Check if a word is a permutation of another word.\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abdc\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzzzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw1t9wtxt.cs(60,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int start, int end) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = start; i < end; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzz\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuncgt7lp.cs(78,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null) return false;\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7fcbc1ab6e449679b054a17a15d10a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7fcbc1ab6e449679b054a17a15d10a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var s0_chars = s0.ToCharArray();\n        var s1_chars = s1.ToCharArray();\n        if (s0_chars.Length != s1_chars.Length)\n            return false;\n        for (int i = 0; i < s0_chars.Length; i++) {\n            if (s0_chars[i] != s1_chars[i])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d877d620591645baa73a3cfefa200f8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d877d620591645baa73a3cfefa200f8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i])\n                return false;\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int i0, int i1) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = i0; i < i1; i++)\n            if (s0[i] != s1[i])\n                return false;\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprwoucjl2.cs(76,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\",\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqxppz_jo.cs(87,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptwmcyihd.cs(87,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\",\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqxppz_jo.cs(87,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c]++;\n            }\n            else {\n                d0[c] = 1;\n            }\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c]++;\n            }\n            else {\n                d1[c] = 1;\n            }\n        }\n\n        // Check if the two dictionaries are the same.\n        return d0.Equals(d1);\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3gldt1zb.cs(89,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i])\n                return false;\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <528cdf40ec394d1886683b4fd32e09c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <528cdf40ec394d1886683b4fd32e09c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c]++;\n            }\n            else {\n                d0.Add(c, 1);\n            }\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c]++;\n            }\n            else {\n                d1.Add(c, 1);\n            }\n        }\n\n        // Check if the two dictionaries are the same.\n        return d0.Equals(d1);\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9nmid0wy.cs(89,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict[s0[i]] = 0;\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1[s1[i]] = 0;\n        }\n        // Check if the dictionaries are the same.\n        return dict.Count == dict1.Count;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpx7vga33y.cs(83,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict0.Add(s0[i], 0);\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 0);\n        }\n        // Check if the dictionaries are the same.\n        return dict0.Count == dict1.Count && dict0.Keys.Count == dict1.Keys.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <d10a9f28d1b54df6bed51ec92ed427ad>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <d10a9f28d1b54df6bed51ec92ed427ad>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <d10a9f28d1b54df6bed51ec92ed427ad>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <d10a9f28d1b54df6bed51ec92ed427ad>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpf4nmajsm.cs(85,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict0.Add(s0[i], 0);\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 0);\n        }\n        // Check if the dictionaries are equal.\n        return dict0.Count == dict1.Count && dict0.Keys.Count == dict1.Keys.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <00487979e9334b689fe941cfd292f8b1>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <00487979e9334b689fe941cfd292f8b1>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <00487979e9334b689fe941cfd292f8b1>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <00487979e9334b689fe941cfd292f8b1>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int minLength) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length < minLength || s1.Length < minLength)\n            return false;\n        for (int i = 0; i < minLength; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> Same\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi1pwwobf.cs(80,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptwmcyihd.cs(87,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c] += 1;\n            } else {\n                d0[c] = 1;\n            }\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c] += 1;\n            } else {\n                d1[c] = 1;\n            }\n        }\n        // Check if the dictionaries are the same.\n        return d0.Equals(d1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5da0d1da1f6e4c8391bf56c5c62abf58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5da0d1da1f6e4c8391bf56c5c62abf58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var chars = s0.ToCharArray();\n        var chars1 = s1.ToCharArray();\n        var count = chars.Length;\n        if (count != chars1.Length)\n            return false;\n        for (var i = 0; i < count; i++) {\n            if (chars[i] != chars1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> An\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp27u3qw90.cs(88,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i])\n                return false;\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0d2f485f5e524bcf8111a37b8fccc030>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0d2f485f5e524bcf8111a37b8fccc030>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var s = s0 + s1;\n        var chars = s.ToCharArray();\n        var count = chars.Length;\n        var i = 0;\n        while (i < count) {\n            if (chars[i] != chars[count - 1])\n                return false;\n            i++;\n            count--;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"dcba\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt0uvbul7.cs(57,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0 and s1.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            d0.Add(s0[i], 0);\n        }\n        for (int i = 0; i < s1.Length; i++) {\n            d0.Add(s1[i], 0);\n        }\n        // Check if the dictionary is empty.\n        if (d0.Count == 0) {\n            return true;\n        }\n        // Check if the dictionary contains all characters in s0.\n        for (int i = 0; i < s0.Length; i++) {\n            if (d0[s0[i]] == 0) {\n                return false;\n            }\n        }\n        // Check if the dictionary contains all characters in s1.\n        for (int i = 0; i < s1.Length; i++) {\n            if (d0[s1[i]] == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <8c770e1fd7c94d47b47ac00fe5184229>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <8c770e1fd7c94d47b47ac00fe5184229>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <8c770e1fd7c94d47b47ac00fe5184229>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <8c770e1fd7c94d47b47ac00fe5184229>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null) return false;\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7fcbc1ab6e449679b054a17a15d10a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7fcbc1ab6e449679b054a17a15d10a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        var dict = s0.ToCharArray().Select(c => (char)c).ToDictionary();\n        // Check if all characters in s1 are in the dictionary.\n        return s1.ToCharArray().All(c => dict.ContainsKey((char)c));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3hn74fmr.cs(24,58): error CS1501: No overload for method 'ToDictionary' takes 0 arguments\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var s0_ = s0.ToLower();\n        var s1_ = s1.ToLower();\n        var s0_len = s0_.Length;\n        var s1_len = s1_.Length;\n        if (s0_len != s1_len) return false;\n        for (var i = 0; i < s0_len; i++) {\n            if (s0_[i] != s1_[i]) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <efdcf3438fbb455bbbdbe0c8976e78e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <efdcf3438fbb455bbbdbe0c8976e78e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c]++;\n            }\n            else {\n                d0[c] = 1;\n            }\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c]++;\n            }\n            else {\n                d1[c] = 1;\n            }\n        }\n        // Check if the dictionaries are the same.\n        return d0.Equals(d1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2929b5c1eeac4a82baad9595d662a5dd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2929b5c1eeac4a82baad9595d662a5dd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int start, int end) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (start < 0 || end < 0 || start > s0.Length || end > s0.Length)\n            throw new IndexOutOfRangeException();\n        if (start > end)\n            throw new IndexOutOfRangeException();\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = start; i < end; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6tqu8bp7.cs(80,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict0.Add(s0[i], 0);\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 0);\n        }\n\n        // Check if the dictionaries are the same.\n        return dict0.Count == dict1.Count && dict0.Keys.Count == dict1.Keys.Count;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8o7rmg5l.cs(84,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var s0_chars = s0.ToCharArray();\n        var s1_chars = s1.ToCharArray();\n        var s0_count = s0_chars.Length;\n        var s1_count = s1_chars.Length;\n        if (s0_count != s1_count)\n            return false;\n        for (var i = 0; i < s0_count; i++) {\n            if (s0_chars[i] != s1_chars[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int max_distance) {\n        var s0_chars = s0.ToCharArray();\n        var s1_chars = s1.ToCharArray();\n        var s0_count = s0_chars.Length;\n        var s1_count = s1_chars.Length;\n        if (s0_count != s1_count)\n            return false;\n        for (var i = 0; i < s0_count; i++) {\n            if (Math.Abs(s0_chars[i] - s1_chars[i]) > max_distance)\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzz\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp76yid9q1.cs(76,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict0.Add(s0[i], 0);\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 0);\n        }\n\n        // Check if the dictionaries are equal.\n        return dict0.Count == dict1.Count && dict0.Count == dict1.Count;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> An\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcvv9sewy.cs(84,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict0.Add(s0[i], 0);\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 0);\n        }\n        // Check if the dictionaries are the same.\n        return dict0.Count == dict1.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <8aadb2938ec54b82be2c61690b4e1c87>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <8aadb2938ec54b82be2c61690b4e1c87>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <8aadb2938ec54b82be2c61690b4e1c87>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <8aadb2938ec54b82be2c61690b4e1c87>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int start, int end) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (start < 0 || end < 0 || start > s0.Length || end > s0.Length)\n            throw new IndexOutOfRangeException();\n        if (start > end)\n            throw new IndexOutOfRangeException();\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = start; i < end; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6tqu8bp7.cs(80,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int start, int end) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (start < 0 || end < 0 || start > s0.Length || end > s0.Length)\n            throw new IndexOutOfRangeException();\n        if (start > end)\n            throw new IndexOutOfRangeException();\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = start; i < end; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6tqu8bp7.cs(80,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptwmcyihd.cs(87,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict0.Add(s0[i], 0);\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 0);\n        }\n\n        // Check if the dictionaries are the same.\n        return dict0.Count == dict1.Count && dict0.Keys.Count == dict1.Keys.Count;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq0w129z3.cs(83,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0 and s1.\n        var dict = s0.ToCharArray().Concat(s1.ToCharArray()).ToHashCode()\n            .Select(x => (int)x).ToArray();\n        // If the dictionary is empty, the strings are the same.\n        if (dict.Length == 0) return true;\n        // If the dictionary is not empty, the strings are not the same.\n        return dict.Length == s0.Length;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp092pbdgp.cs(24,62): error CS1061: 'IEnumerable<char>' does not contain a definition for 'ToHashCode' and no accessible extension method 'ToHashCode' accepting a first argument of type 'IEnumerable<char>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c]++;\n            }\n            else {\n                d0[c] = 1;\n            }\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c]++;\n            }\n            else {\n                d1[c] = 1;\n            }\n        }\n\n        // Check if the two dictionaries are the same.\n        return d0.Equals(d1);\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"dcba\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkaq60jmf.cs(89,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var s = s0.ToLower();\n        var t = s1.ToLower();\n        if (s.Length != t.Length)\n            return false;\n        for (var i = 0; i < s.Length; i++) {\n            if (s[i] != t[i])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <216b39c6e52b43a0801afe882c78d2fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <216b39c6e52b43a0801afe882c78d2fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var s = s0.ToLower();\n        var t = s1.ToLower();\n        var count = 0;\n        for (var i = 0; i < s.Length; i++) {\n            if (s[i] != t[i]) {\n                count++;\n            }\n        }\n        return count == 0;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int min) {\n        var s = s0.ToLower();\n        var t = s1.ToLower();\n        var count = 0;\n        for (var i = 0; i < s.Length; i++) {\n            if (s[i] != t[i]) {\n                count++;\n                if (count >= min) {\n                    return false;\n                }\n            }\n        }\n        return count >= min;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy2h2axay.cs(83,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict.Add(s0[i], 0);\n        }\n\n        // Check if s1 has the same characters.\n        for (int i = 0; i < s1.Length; i++) {\n            if (dict.ContainsKey(s1[i])) {\n                dict[s1[i]]++;\n            }\n            else {\n                return false;\n            }\n        }\n\n        // Check if all characters in s0 are in s1.\n        for (int i = 0; i < s0.Length; i++) {\n            if (dict[s0[i]] == 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcde\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcde\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"ab\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8ksmhdtz.cs(90,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c))\n                d0[c]++;\n            else\n                d0.Add(c, 1);\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c))\n                d1[c]++;\n            else\n                d1.Add(c, 1);\n        }\n        // Check if the dictionaries are the same.\n        return d0.Count == d1.Count && d0.Keys.Count == d1.Keys.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c45e0146cf7f4330b1640066978b5993>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c] += 1;\n            }\n            else {\n                d0[c] = 1;\n            }\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c] += 1;\n            }\n            else {\n                d1[c] = 1;\n            }\n        }\n\n        // Check if the two dictionaries are the same.\n        return d0.Equals(d1);\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpeyt_pm5u.cs(88,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var s0_lower = s0.ToLower();\n        var s1_lower = s1.ToLower();\n        var s0_upper = s0.ToUpper();\n        var s1_upper = s1.ToUpper();\n        if (s0_lower == s1_lower || s0_upper == s1_upper)\n            return true;\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1183326bbccb488f8d57fb249eb0ca90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1183326bbccb488f8d57fb249eb0ca90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null) return false;\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcde\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph2f0sviy.cs(85,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c]++;\n            }\n            else {\n                d0.Add(c, 1);\n            }\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c]++;\n            }\n            else {\n                d1.Add(c, 1);\n            }\n        }\n\n        // Check if the dictionaries are the same.\n        return d0.Count == d1.Count;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars2((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars2(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6eno41z2.cs(69,20): error CS1001: Identifier expected\n/tmp/tmp6eno41z2.cs(69,20): error CS1026: ) expected\n/tmp/tmp6eno41z2.cs(69,20): error CS1525: Invalid expression term '}'\n/tmp/tmp6eno41z2.cs(69,20): error CS1002: ; expected\n/tmp/tmp6eno41z2.cs(71,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp6eno41z2.cs(81,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0 and s1.\n        Dictionary<char, char> dict = new Dictionary<char, char>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict.Add(s0[i], s0[i]);\n        }\n        for (int i = 0; i < s1.Length; i++) {\n            dict.Add(s1[i], s1[i]);\n        }\n        // Check if the dictionary is empty.\n        if (dict.Count == 0) {\n            return true;\n        }\n        // Check if the dictionary contains all characters in s0 and s1.\n        for (int i = 0; i < s0.Length; i++) {\n            if (!dict.ContainsKey(s0[i])) {\n                return false;\n            }\n        }\n        for (int i = 0; i < s1.Length; i++) {\n            if (!dict.ContainsKey(s1[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x0001b] in <208cd9b61f4e426fba83b27fc7ed6a5b>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <208cd9b61f4e426fba83b27fc7ed6a5b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x0001b] in <208cd9b61f4e426fba83b27fc7ed6a5b>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <208cd9b61f4e426fba83b27fc7ed6a5b>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            d0.Add(s0[i], 0);\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            d1.Add(s1[i], 0);\n        }\n\n        // Check if the dictionaries are equal.\n        return d0.Count == d1.Count;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzz\")\n    // (true)\n    public static bool Anagram(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            d0.Add(s0[i], 0);\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            d1.Add(s1[i], 0);\n        }\n\n        // Check if the dictionaries are equal.\n        return d0.Count == d1.Count;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcsqjiyx6.cs(82,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c]++;\n            }\n            else {\n                d0.Add(c, 1);\n            }\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c]++;\n            }\n            else {\n                d1.Add(c, 1);\n            }\n        }\n\n        // Check if the dictionaries are the same.\n        return d0.Equals(d1);\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxtg4cun5.cs(89,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            d0.Add(s0[i], 0);\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            d1.Add(s1[i], 0);\n        }\n        // Check if the two dictionaries have the same characters.\n        return d0.Keys().All(d1.Keys());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps6ulh6w0.cs(34,19): error CS1955: Non-invocable member 'Dictionary<char, int>.Keys' cannot be used like a method.\n/tmp/tmps6ulh6w0.cs(34,33): error CS1955: Non-invocable member 'Dictionary<char, int>.Keys' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d862e98c30b24ffabaa7369d205d358b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d862e98c30b24ffabaa7369d205d358b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c] += 1;\n            }\n            else {\n                d0[c] = 1;\n            }\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c] += 1;\n            }\n            else {\n                d1[c] = 1;\n            }\n        }\n\n        // Check if the dictionaries are the same.\n        return d0.Equals(d1);\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpx7_lwhez.cs(89,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i])\n                return false;\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <528cdf40ec394d1886683b4fd32e09c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <528cdf40ec394d1886683b4fd32e09c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i])\n                return false;\n        return true;\n    }\n\n    // Check if a word is a permutation of another word.\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abdc\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2q7w7kx7.cs(81,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Check if the lengths are the same.\n        if (s0.Length != s1.Length)\n            return false;\n        // Check if the characters are the same.\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        // All checks passed.\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9c292804fe284b3c825d862fe7933107>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9c292804fe284b3c825d862fe7933107>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict0.Add(s0[i], 0);\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 0);\n        }\n        // Check if the dictionaries are the same.\n        return dict0.Count == dict1.Count && dict0.Count == dict1.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <be3f62b3414d4b23a23d10904decaec5>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <be3f62b3414d4b23a23d10904decaec5>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <be3f62b3414d4b23a23d10904decaec5>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <be3f62b3414d4b23a23d10904decaec5>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i])\n                return false;\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int i0, int i1) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = i0; i < i1; i++)\n            if (s0[i] != s1[i])\n                return false;\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgpru6h69.cs(76,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var s0_ = s0.ToLower();\n        var s1_ = s1.ToLower();\n        var s0_len = s0_.Length;\n        var s1_len = s1_.Length;\n        if (s0_len != s1_len)\n            return false;\n        for (var i = 0; i < s0_len; i++) {\n            if (s0_[i] != s1_[i])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5d676284870a4dbca50469adb01006f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5d676284870a4dbca50469adb01006f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict0.Add(s0[i], 0);\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 0);\n        }\n        // Compare the two dictionaries.\n        for (char c : dict0.Keys) {\n            if (dict1.ContainsKey(c)) {\n                if (dict0[c] != dict1[c]) {\n                    return false;\n                }\n            }\n            else {\n                return false;\n            }\n        }\n        // All characters in s0 are in s1.\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_j8w3q7b.cs(34,21): error CS1002: ; expected\n/tmp/tmp_j8w3q7b.cs(34,21): error CS1525: Invalid expression term ':'\n/tmp/tmp_j8w3q7b.cs(34,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzz\")\n    // (false)\n    // >>> Anagram(\"abcdzzzz\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzz\")\n    // (true)\n    // >>> Anagram(\"abcdzzzz\", \"abcdzzzz\")\n    // (true)\n    // >>> Anagram(\"abcdzzzz\", \"abcdzzzzzz\")\n    // (false)\n    // >>> Anagram(\"abcdzzzzzz\", \"abcdzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcdzzzzzz\", \"abcdzzzzzzzz\")\n    // (false)\n    // >>> Anagram(\"abcdzzzzzzzz\", \"abcdzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcdzzzzzzzz\", \"abcdzzzzzzzzzz\")\n    // (false)\n    // >>> Anagram(\"abcdzzzzzzzzzz\", \"abcdzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcdzzzzzzzzzzzz\", \"abcdzzzzzzzzzzzzzz\")\n    // (false)\n    // >>> Anagram(\"abcdzzzzzzzzzzzzzz\", \"abcdzzzzzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcdzzzzzzzzzzzzzzzz\", \"abcdzzzzzzzzzzzz\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppsr87vjr.cs(77,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c]++;\n            }\n            else {\n                d0.Add(c, 1);\n            }\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c]++;\n            }\n            else {\n                d1.Add(c, 1);\n            }\n        }\n\n        // Check if the dictionaries are the same.\n        return d0.Equals(d1);\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp29frobiy.cs(89,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d862e98c30b24ffabaa7369d205d358b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d862e98c30b24ffabaa7369d205d358b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            d0.Add(s0[i], 0);\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            d1.Add(s1[i], 0);\n        }\n        // Check if the two dictionaries are the same.\n        return d0.Equals(d1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <51a32027742542b2bcfdc3fd9252c529>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <51a32027742542b2bcfdc3fd9252c529>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <51a32027742542b2bcfdc3fd9252c529>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <51a32027742542b2bcfdc3fd9252c529>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int k) {\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpecl4ipll.cs(75,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c]++;\n            }\n            else {\n                d0.Add(c, 1);\n            }\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c]++;\n            }\n            else {\n                d1.Add(c, 1);\n            }\n        }\n\n        // Check if the dictionaries are the same.\n        return d0.Equals(d1);\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxtg4cun5.cs(89,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d862e98c30b24ffabaa7369d205d358b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d862e98c30b24ffabaa7369d205d358b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i])\n                return false;\n        return true;\n    }\n\n    // Check if a word is a permutation of another word.\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abdd\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzzzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzzzzzzzz\"))\n    // (false)\n    public static bool Permutation(string s0, string s1) {\n        if (s0.Length != s1.Length)\n            return false;\n        int[] chars = new int[26];\n        for (int i = 0; i < s0.Length; i++)\n            chars[s0[i] - 'a']++;\n        for (int i = 0; i < s1.Length; i++)\n            chars[s1[i] - 'a']--;\n        for (int i = 0; i < chars.Length; i++)\n            if (chars[i] != 0)\n                return false;\n        return true;\n    }\n\n    // Check if a word is a permutation of another word.\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abdd\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzz\"))\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsu04og17.cs(79,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict0.Add(s0[i], 0);\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 0);\n        }\n        // Check if the dictionaries are the same.\n        return dict0.Count == dict1.Count && dict0.Keys.Count == dict1.Keys.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <d10a9f28d1b54df6bed51ec92ed427ad>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <d10a9f28d1b54df6bed51ec92ed427ad>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <d10a9f28d1b54df6bed51ec92ed427ad>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <d10a9f28d1b54df6bed51ec92ed427ad>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0 and s1.\n        Dictionary<char, char> dict = new Dictionary<char, char>();\n        for (int i = 0; i < s0.Length; i++)\n            dict[s0[i]] = s1[i];\n\n        // Check if the dictionary is empty.\n        if (dict.Count == 0)\n            return true;\n\n        // Check if the dictionary contains all characters in s0.\n        for (int i = 0; i < s0.Length; i++)\n            if (dict[s0[i]] == '\\0')\n                return false;\n\n        // Check if the dictionary contains all characters in s1.\n        for (int i = 0; i < s1.Length; i++)\n            if (dict[s1[i]] == '\\0')\n                return false;\n\n        // All checks passed.\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzyaxecbb.cs(67,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var s0_ = s0.ToLower();\n        var s1_ = s1.ToLower();\n        if (s0_ == s1_)\n            return true;\n        var s0_len = s0_.Length;\n        var s1_len = s1_.Length;\n        if (s0_len != s1_len)\n            return false;\n        var s0_chars = s0_.ToCharArray();\n        var s1_chars = s1_.ToCharArray();\n        for (var i = 0; i < s0_len; i++) {\n            if (s0_chars[i] != s1_chars[i])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0ef3dea53d644964803f3b9c8ccbdb5e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0ef3dea53d644964803f3b9c8ccbdb5e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddzzzzzzzddeddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int k) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n            if (i >= k)\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddzzzzzzzddeddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzclrhaaa.cs(80,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c]++;\n            }\n            else {\n                d0[c] = 1;\n            }\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c]++;\n            }\n            else {\n                d1[c] = 1;\n            }\n        }\n        // Check if the two dictionaries are the same.\n        return d0.Equals(d1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a6c74347ef3449f8b832a28d530c3235>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a6c74347ef3449f8b832a28d530c3235>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict0.Add(s0[i], 0);\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 0);\n        }\n\n        // Check if the dictionaries are the same.\n        return dict0.Count == dict1.Count && dict0.Count == dict1.Count;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>>\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd5ue03z9.cs(84,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int n) {\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < n; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoh9a6eui.cs(76,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var s0_chars = s0.ToCharArray();\n        var s1_chars = s1.ToCharArray();\n        if (s0_chars.Length != s1_chars.Length)\n            return false;\n        for (var i = 0; i < s0_chars.Length; i++) {\n            if (s0_chars[i] != s1_chars[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9rsum84m.cs(85,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            d0.Add(s0[i], 1);\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            d1.Add(s1[i], 1);\n        }\n        // Check if the dictionaries are the same.\n        return d0.Equals(d1);\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpycydwya0.cs(83,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var s0_ = s0.ToLower();\n        var s1_ = s1.ToLower();\n        if (s0_ == s1_) return true;\n        var s0_ = s0.ToUpper();\n        var s1_ = s1.ToUpper();\n        if (s0_ == s1_) return true;\n        var s0_ = s0.Trim();\n        var s1_ = s1.Trim();\n        if (s0_ == s1_) return true;\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp45akfcul.cs(26,13): error CS0128: A local variable or function named 's0_' is already defined in this scope\n/tmp/tmp45akfcul.cs(27,13): error CS0128: A local variable or function named 's1_' is already defined in this scope\n/tmp/tmp45akfcul.cs(29,13): error CS0128: A local variable or function named 's0_' is already defined in this scope\n/tmp/tmp45akfcul.cs(30,13): error CS0128: A local variable or function named 's1_' is already defined in this scope\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i])\n                return false;\n        return true;\n    }\n\n    // Check if a word is a permutation of another word.\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abdc\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2q7w7kx7.cs(81,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int i0, int i1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = i0; i < i1; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameCh\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzq6ltxtq.cs(80,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c] += 1;\n            } else {\n                d0[c] = 1;\n            }\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c] += 1;\n            } else {\n                d1[c] = 1;\n            }\n        }\n        // Check if the two dictionaries are the same.\n        return d0.Equals(d1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <45dcc22df92d48a284e8cdbb03abe78b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <45dcc22df92d48a284e8cdbb03abe78b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int n) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < n; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpncbkm06b.cs(78,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null) return false;\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppdxxb6u9.cs(85,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddzzzzzzzddeddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzz\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7rl6qf4q.cs(73,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Check if the lengths are the same.\n        if (s0.Length != s1.Length)\n            return false;\n        // Check if the characters are the same.\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        // All checks passed.\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9c292804fe284b3c825d862fe7933107>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9c292804fe284b3c825d862fe7933107>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null) return false;\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz44kl_0d.cs(85,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            d0.Add(s0[i], 0);\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            d1.Add(s1[i], 0);\n        }\n        // Check if the dictionaries are the same.\n        return d0.Equals(d1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <dff83ec1065d49e2820a4eb13a4a751f>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <dff83ec1065d49e2820a4eb13a4a751f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <dff83ec1065d49e2820a4eb13a4a751f>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <dff83ec1065d49e2820a4eb13a4a751f>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i])\n                return false;\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <528cdf40ec394d1886683b4fd32e09c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <528cdf40ec394d1886683b4fd32e09c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0 and s1.\n        Dictionary<char, char> dict = new Dictionary<char, char>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict.Add(s0[i], s0[i]);\n        }\n        for (int i = 0; i < s1.Length; i++) {\n            dict.Add(s1[i], s1[i]);\n        }\n        // Check if the dictionary is empty.\n        if (dict.Count == 0) {\n            return true;\n        }\n        // Check if the dictionary contains all characters in s0 and s1.\n        for (int i = 0; i < s0.Length; i++) {\n            if (!dict.ContainsKey(s0[i])) {\n                return false;\n            }\n        }\n        for (int i = 0; i < s1.Length; i++) {\n            if (!dict.ContainsKey(s1[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x0001b] in <208cd9b61f4e426fba83b27fc7ed6a5b>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <208cd9b61f4e426fba83b27fc7ed6a5b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x0001b] in <208cd9b61f4e426fba83b27fc7ed6a5b>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <208cd9b61f4e426fba83b27fc7ed6a5b>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d862e98c30b24ffabaa7369d205d358b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d862e98c30b24ffabaa7369d205d358b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i]) return false;\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <cbe3a091a6d94dff98e653399c570168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <cbe3a091a6d94dff98e653399c570168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict0.Add(s0[i], 0);\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 0);\n        }\n\n        // Check if the dictionaries are the same.\n        return dict0.Count == dict1.Count && dict0.Keys.Count == dict1.Keys.Count;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq0w129z3.cs(83,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i]) return false;\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcd\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw3tlqh7q.cs(72,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int start, int end) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = start; i < end; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"ab\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprmku45vi.cs(80,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict.Add(s0[i], 0);\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 0);\n        }\n        // Check if the dictionaries are the same.\n        return dict.Count == dict1.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <a6e26259d42c464c989b90e9e7582e51>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a6e26259d42c464c989b90e9e7582e51>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <a6e26259d42c464c989b90e9e7582e51>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a6e26259d42c464c989b90e9e7582e51>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if a word is a permutation of another word.\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abdd\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"ab\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpu9hi8642.cs(83,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i])\n                return false;\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdrys_te8.cs(86,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0 and s1.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            d0.Add(c, 0);\n        }\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            d1.Add(c, 0);\n        }\n        // Check if the two dictionaries are the same.\n        if (d0.Count != d1.Count)\n            return false;\n        for (KeyValuePair<char, int> kvp : d0) {\n            if (d1.ContainsKey(kvp.Key)) {\n                if (d1[kvp.Key] != kvp.Value)\n                    return false;\n            }\n            else\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_uts4jmb.cs(37,42): error CS1002: ; expected\n/tmp/tmp_uts4jmb.cs(37,42): error CS1525: Invalid expression term ':'\n/tmp/tmp_uts4jmb.cs(37,42): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0 and s1.\n        Dictionary<char, char> dict = new Dictionary<char, char>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict.Add(s0[i], s1[i]);\n        }\n        // Check if the dictionary is empty.\n        if (dict.Count == 0) {\n            return true;\n        }\n        // Check if the dictionary is not empty.\n        else {\n            return false;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x0001b] in <89483a4acdba462cb546d89a7aef8d0d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <89483a4acdba462cb546d89a7aef8d0d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x0001b] in <89483a4acdba462cb546d89a7aef8d0d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <89483a4acdba462cb546d89a7aef8d0d>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzzzzzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzzzzzzzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzzzzzzzzzzzzzzzzzzzz\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp91ij11c2.cs(77,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var s0_lower = s0.ToLower();\n        var s1_lower = s1.ToLower();\n        if (s0_lower.Length != s1_lower.Length)\n            return false;\n        for (var i = 0; i < s0_lower.Length; i++) {\n            if (s0_lower[i] != s1_lower[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if a word is a permutation of another word.\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abdc\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzzzzzz\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzzzzzzzzzz\"))\n    // (false)\n    public static bool Permutation(string s0, string s1) {\n        if (s0.Length != s1.Length)\n            return false;\n        var s0_lower = s0.ToLower();\n        var s1_lower = s1.ToLower();\n        for (var i = 0; i < s0_lower.Length; i++) {\n            if (s0_lower[i] != s1_lower[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if a word is a permutation of another word.\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abdc\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdzzzz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl832b649.cs(80,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null) return false;\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars2((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars2((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars2((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars2((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars2((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    public static bool SameChars2(string s0, string s1) {\n        if (s0 == null || s1 == null) return false;\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars3((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars3((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars3((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars3((\"eabcd\"),\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq130_eh0.cs(74,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int n) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < n; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp41amh8on.cs(80,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null) return false;\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppdxxb6u9.cs(85,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null) return false;\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcde\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpacqwx5tg.cs(85,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0 and s1.\n        Dictionary<char, char> dict = new Dictionary<char, char>();\n        for (char c : s0) dict[c] = c;\n        for (char c : s1) dict[c] = c;\n\n        // Check if the dictionary is empty.\n        if (dict.Count == 0) return true;\n\n        // Check if the dictionary contains all characters in s0.\n        for (char c : s0)\n            if (dict[c] == '\\0') return false;\n\n        // Check if the dictionary contains all characters in s1.\n        for (char c : s1)\n            if (dict[c] == '\\0') return false;\n\n        // Check if the dictionary contains all characters in s0 and s1.\n        for (char c : s0)\n            if (dict[c] != c) return false;\n\n        for (char c : s1)\n            if (dict[c] != c) return false;\n\n        return true;\n    }\n\n    // Check if two strings are anagrams.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi02793jn.cs(25,21): error CS1002: ; expected\n/tmp/tmpi02793jn.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpi02793jn.cs(25,21): error CS1001: Identifier expected\n/tmp/tmpi02793jn.cs(26,21): error CS1002: ; expected\n/tmp/tmpi02793jn.cs(26,21): error CS1525: Invalid expression term ':'\n/tmp/tmpi02793jn.cs(26,21): error CS1001: Identifier expected\n/tmp/tmpi02793jn.cs(32,21): error CS1002: ; expected\n/tmp/tmpi02793jn.cs(32,21): error CS1525: Invalid expression term ':'\n/tmp/tmpi02793jn.cs(32,21): error CS1001: Identifier expected\n/tmp/tmpi02793jn.cs(36,21): error CS1002: ; expected\n/tmp/tmpi02793jn.cs(36,21): error CS1525: Invalid expression term ':'\n/tmp/tmpi02793jn.cs(36,21): error CS1001: Identifier expected\n/tmp/tmpi02793jn.cs(40,21): error CS1002: ; expected\n/tmp/tmpi02793jn.cs(40,21): error CS1525: Invalid expression term ':'\n/tmp/tmpi02793jn.cs(40,21): error CS1001: Identifier expected\n/tmp/tmpi02793jn.cs(43,21): error CS1002: ; expected\n/tmp/tmpi02793jn.cs(43,21): error CS1525: Invalid expression term ':'\n/tmp/tmpi02793jn.cs(43,21): error CS1001: Identifier expected\n/tmp/tmpi02793jn.cs(87,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict0.Add(s0[i], 0);\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 0);\n        }\n\n        // Check if the dictionaries are the same.\n        return dict0.Count == dict1.Count && dict0.Keys.Count == dict1.Keys.Count;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq0w129z3.cs(83,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c]++;\n            }\n            else {\n                d0[c] = 1;\n            }\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c]++;\n            }\n            else {\n                d1[c] = 1;\n            }\n        }\n        // Check if the two dictionaries are the same.\n        return d0.Equals(d1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a6c74347ef3449f8b832a28d530c3235>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a6c74347ef3449f8b832a28d530c3235>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            dict.Add(s0[i], 1);\n        }\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> dict1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            dict1.Add(s1[i], 1);\n        }\n        // Check if the dictionaries are equal.\n        return dict.Count == dict1.Count && dict.Count == dict1.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <6d2b628ffb11461f9b00a5be48cff2f4>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <6d2b628ffb11461f9b00a5be48cff2f4>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: z\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SameChars (System.String s0, System.String s1) [0x00014] in <6d2b628ffb11461f9b00a5be48cff2f4>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <6d2b628ffb11461f9b00a5be48cff2f4>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        var chars0 = s0.ToCharArray();\n        var chars1 = s1.ToCharArray();\n        var len0 = chars0.Length;\n        var len1 = chars1.Length;\n        if (len0 != len1) return false;\n        for (var i = 0; i < len0; i++) {\n            if (chars0[i] != chars1[i]) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4b864bde665f4c85866063389af6d78a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4b864bde665f4c85866063389af6d78a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f3a51143eb084ed9a13ff44fe4aae17a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f3a51143eb084ed9a13ff44fe4aae17a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i])\n                return false;\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzz\")\n    // (false)\n    // >>> Anagram(\"abcdzzzz\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcdzzzz\")\n    // (true)\n    // >>> Anagram(\"abcdzzzz\", \"abcdzzzz\")\n    // (true)\n    // >>> Anagram(\"abcdzzzz\", \"abcdzzzzzz\")\n    // (false)\n    // >>> Anagram(\"abcdzzzzzz\", \"abcdzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcdzzzzzz\", \"abcdzzzzzzzz\")\n    // (false)\n    public static bool Anagram(string s0, string s1) {\n        if (s0.Length != s1.Length)\n            return false;\n        int[] counts = new int[26];\n        for (int i = 0; i < s0.Length; i++)\n            counts[s0[i] - 'a']++;\n        for (int i = 0; i < s1.Length; i++)\n            counts[s1[i] - 'a']--;\n        for (int i = 0; i < 26; i++)\n            if (counts[i] != 0)\n                return false;\n        return true;\n    }\n\n    // Check if a string is a permutation of another string.\n    // >>> Permutation(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Permutation(\"abcd\", \"abdc\")\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsb2efpso.cs(82,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i])\n                return false;\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <528cdf40ec394d1886683b4fd32e09c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <528cdf40ec394d1886683b4fd32e09c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i])\n                return false;\n        return true;\n    }\n\n    // Check if a word is a permutation of another word.\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abdd\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcd\"))\n    // (true)\n    // >>> Permutation((\"abcd\"), (\"abdd\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    // >>> Permutation((\"abcd\"), (\"abcdz\"))\n    // (false)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8_ufup5x.cs(81,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Check if the lengths are the same.\n        if (s0.Length != s1.Length)\n            return false;\n        // Check if the characters are the same.\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i])\n                return false;\n        // All characters are the same.\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d3f81f85e5f3415d891404b036010d3f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d3f81f85e5f3415d891404b036010d3f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Check if the strings are the same length.\n        if (s0.Length != s1.Length)\n            return false;\n\n        // Check if the strings are the same.\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n\n        // All checks passed.\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzz\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcdzzzzzz\")\n    // (false)\n    // >>> Anagram(\"abcdzzzzzz\", \"abcdzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcdzzzzzz\", \"abcdzzzzzzzz\")\n    // (false)\n    // >>> Anagram(\"abcdzzzzzzzz\", \"abcdzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcdzzzzzzzz\", \"abcdzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcdzzzzzzzzzz\", \"abcdzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcdzzzzzzzzzzzz\", \"abcdzzzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcdzzzzzzzzzzzzzz\", \"abcdzzzzzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcdzzzzzzzzzzzzzzzz\", \"abcdzzzzzzzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcdzzzzzzzzzzzzzzzzzz\", \"abcdzzzzzzzzzzzzzzzzzzzz\")\n    // (true)\n    // >>> Anagram(\"abcdzzzzzzzzzzzzzzzzzzzz\", \"abcdzzzzzzzzzzzz\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcgvrpvfm.cs(76,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null) return false;\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppdxxb6u9.cs(85,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Check if the lengths are equal.\n        if (s0.Length != s1.Length)\n            return false;\n        // Check if the strings are the same.\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        // All checks passed.\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d3e95e29a80441efb2c4386a41664702>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d3e95e29a80441efb2c4386a41664702>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int start, int end) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (start < 0 || end < 0 || start > s0.Length || end > s0.Length)\n            throw new IndexOutOfRangeException();\n        if (start > end)\n            throw new IndexOutOfRangeException();\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = start; i < end; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6tqu8bp7.cs(80,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null) return false;\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppdxxb6u9.cs(85,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1, int minLength) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length < minLength || s1.Length < minLength)\n            return false;\n        for (int i = 0; i < minLength; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (false)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> Same\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi1pwwobf.cs(80,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d862e98c30b24ffabaa7369d205d358b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d862e98c30b24ffabaa7369d205d358b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Convert to lower case.\n        s0 = s0.ToLower();\n        s1 = s1.ToLower();\n        // Check if the lengths are the same.\n        if (s0.Length != s1.Length) return false;\n        // Check if the characters are the same.\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <84d61a9c7c464e6586e0af7d1ecc97a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <84d61a9c7c464e6586e0af7d1ecc97a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null) return false;\n        if (s0.Length != s1.Length) return false;\n        for (int i = 0; i < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7fcbc1ab6e449679b054a17a15d10a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b7fcbc1ab6e449679b054a17a15d10a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c)) {\n                d0[c]++;\n            }\n            else {\n                d0[c] = 1;\n            }\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c)) {\n                d1[c]++;\n            }\n            else {\n                d1[c] = 1;\n            }\n        }\n\n        // Check if the two dictionaries are the same.\n        return d0.Equals(d1);\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpv4zoxn6d.cs(89,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        // Create a dictionary of characters in s0.\n        Dictionary<char, int> d0 = new Dictionary<char, int>();\n        for (int i = 0; i < s0.Length; i++) {\n            char c = s0[i];\n            if (d0.ContainsKey(c))\n                d0[c]++;\n            else\n                d0[c] = 1;\n        }\n\n        // Create a dictionary of characters in s1.\n        Dictionary<char, int> d1 = new Dictionary<char, int>();\n        for (int i = 0; i < s1.Length; i++) {\n            char c = s1[i];\n            if (d1.ContainsKey(c))\n                d1[c]++;\n            else\n                d1[c] = 1;\n        }\n\n        // Check if the two dictionaries have the same characters.\n        return d0.Keys().All(x => d1.ContainsKey(x) && d0[x] == d1[x]);\n    }\n\n    // Check if two strings are anagrams of each other.\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abdc\")\n    // (false)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"abcd\")\n    // (true)\n    // >>> Anagram(\"abcd\", \"ab\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpduabqfjj.cs(84,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0 == null || s1 == null)\n            return false;\n        if (s0.Length != s1.Length)\n            return false;\n        for (int i = 0; i < s0.Length; i++)\n            if (s0[i] != s1[i])\n                return false;\n        return true;\n    }\n\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"dddzzzzzzzddeddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzdddd\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp93vkcqxe.cs(72,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}