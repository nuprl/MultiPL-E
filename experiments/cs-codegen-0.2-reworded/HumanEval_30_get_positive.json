{
  "name": "HumanEval_30_get_positive",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return only positive numbers in the list.\n    // >>> GetPositive((new List<long>(new long[]{(long)-1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\n    // (new List<long>(new long[]{(long)2L, (long)5L, (long)6L}))\n    // >>> GetPositive((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n    // (new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)3L, (long)9L, (long)123L, (long)1L}))\n    public static List<long> GetPositive(List<long> l) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPositive((new List<long>(new long[]{(long)-1L, (long)-2L, (long)4L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)4L, (long)5L, (long)6L}))));\n    Debug.Assert(GetPositive((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L}))).Equals((new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)3L, (long)3L, (long)9L, (long)123L, (long)1L}))));\n    Debug.Assert(GetPositive((new List<long>(new long[]{(long)-1L, (long)-2L}))).Equals((new List<long>())));\n    Debug.Assert(GetPositive((new List<long>())).Equals((new List<long>())));\n    }\n\n}\n",
  "completions": [
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        return l.Where(x => x > 0).ToList();",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> ret = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                ret.Add(i);\n            }\n        }\n        return ret;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        // Write your code here\n        return l.Where(x => x > 0).ToList();",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        // Write your code here\n        return l.Where(x => x > 0).ToList();",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> ret = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                ret.Add(i);\n            }\n        }\n        return ret;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> ret = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                ret.Add(i);\n            }\n        }\n        return ret;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        // Write your code here\n        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        // Write your code here\n        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;\n    }\n\n    // Return only negative numbers in the list.\n    // >>> GetNegative((new List<long>(new long[]{(long)-1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\n    // (new List<long>(new long[]{(long)-1L, (long)2L, (long)-4L, (long)5L, (long)6L}))\n    // >>> GetNegative((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n    // (new List<long>(new long[]{(long)-5L, (long)3L, (long)-3L, (long)9L, (long)123L, (long)1L}))\n    public static List<long> GetNegative(List<long> l) {\n        // Write your code here\n        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i < 0) {\n                result.Add(i);\n            }\n        }\n        return result;\n    }\n\n    // Return only even numbers in the list.\n    // >>> GetEven((new List<long>(new long[]{(long)-1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\n    // (new List<long>(new long[]{(long)2L, (long)4L, (long)6L}))\n    // >>> GetEven((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-",
    "        // Write your code here\n        return l.Where(x => x > 0).ToList();",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> ret = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                ret.Add(i);\n            }\n        }\n        return ret;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;\n    }\n\n    // Return only positive numbers in the list.\n    // >>> GetPositive((new List<long>(new long[]{(long)-1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\n    // (new List<long>(new long[]{(long)2L, (long)5L, (long)6L}))\n    // >>> GetPositive((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n    // (new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)3L, (long)9L, (long)123L, (long)1L}))\n    public static List<long> GetPositive(long[] l) {\n        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;\n    }\n\n    // Return only positive numbers in the list.\n    // >>> GetPositive((new List<long>(new long[]{(long)-1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\n    // (new List<long>(new long[]{(long)2L, (long)5L, (long)6L}))\n    // >>> GetPositive((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        return l.Where(x => x > 0).ToList();",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;\n    }\n\n    // Return only positive numbers in the list.\n    // >>> GetPositive((new List<long>(new long[]{(long)-1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\n    // (new List<long>(new long[]{(long)2L, (long)5L, (long)6L}))\n    // >>> GetPositive((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n    // (new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)3L, (long)9L, (long)123L, (long)1L}))\n    public static List<long> GetPositive(long[] l) {\n        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;\n    }\n\n    // Return only positive numbers in the list.\n    // >>> GetPositive((new List<long>(new long[]{(long)-1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\n    // (new List<long>(new long[]{(long)2L, (long)5L, (long)6L}))\n    // >>> GetPositive((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        // Write your code here\n        return l.Where(x => x > 0).ToList();",
    "        // Write your code here\n        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<long> l = new List<long>();\n        l.Add(1);\n        l.Add(-1);\n        l.Add(2);\n        l.Add(-4);\n        l.Add(5);\n        l.Add(6);\n        l.Add(-3);\n        l.Add(9);\n        l.Add(0);\n        l.Add(123);\n        l.Add(1);\n        l.Add(-10);\n        List<long> result = GetPositive(l);\n        for (long i : result) {\n            System.out.println(i);\n        }",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        // Write your code here\n        return l.Where(x => x > 0).ToList();",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> ret = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                ret.Add(i);\n            }\n        }\n        return ret;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;\n    }\n\n    // Return only positive numbers in the list.\n    // >>> GetPositive((new List<long>(new long[]{(long)-1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\n    // (new List<long>(new long[]{(long)2L, (long)5L, (long)6L}))\n    // >>> GetPositive((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n    // (new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)3L, (long)9L, (long)123L, (long)1L}))\n    public static List<long> GetPositive(long[] l) {\n        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;\n    }\n\n    // Return only positive numbers in the list.\n    // >>> GetPositive((new List<long>(new long[]{(long)-1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\n    // (new List<long>(new long[]{(long)2L, (long)5L, (long)6L}))\n    // >>> GetPositive((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;\n    }\n\n    // Return only positive numbers in the list.\n    // >>> GetPositive((new List<long>(new long[]{(long)-1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\n    // (new List<long>(new long[]{(long)2L, (long)5L, (long)6L}))\n    // >>> GetPositive((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n    // (new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)3L, (long)9L, (long)123L, (long)1L}))\n    public static List<long> GetPositive(IEnumerable<long> l) {\n        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;\n    }\n\n    // Return only positive numbers in the list.\n    // >>> GetPositive((new List<long>(new long[]{(long)-1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\n    // (new List<long>(new long[]{(long)2L, (long)5L, (long)6L}))\n    // >>> GetPositive((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (",
    "        // Write your code here\n        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        // Write your code here\n        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> ret = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                ret.Add(i);\n            }\n        }\n        return ret;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;\n    }\n\n    // Return only positive numbers in the list.\n    // >>> GetPositive((new List<long>(new long[]{(long)-1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\n    // (new List<long>(new long[]{(long)2L, (long)5L, (long)6L}))\n    // >>> GetPositive((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n    // (new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)3L, (long)9L, (long)123L, (long)1L}))\n    public static List<long> GetPositive(List<long> l) {\n        // Write your code here\n        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;\n    }\n\n    // Return only positive numbers in the list.\n    // >>> GetPositive((new List<long>(new long[]{(long)-1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\n    // (new List<long>(new long[]{(long)2L, (long)5L, (long)6L}))\n    // >>> GetPositive((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        // Write your code here\n        return l.Where(x => x > 0).ToList();",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        return l.Where(x => x > 0).ToList();",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        for (int i = 0; i < l.Count; i++) {\n            if (l[i] < 0) {\n                l.RemoveAt(i);\n                i--;\n            }\n        }\n        return l;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        for (long i : l) {\n            if (i > 0) {\n                result.Add(i);\n            }\n        }\n        return result;"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}