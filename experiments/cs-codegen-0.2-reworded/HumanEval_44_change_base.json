{
  "name": "HumanEval_44_change_base",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Change numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>> ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeBase((8L), (3L)).Equals((\"22\")));\n    Debug.Assert(ChangeBase((9L), (3L)).Equals((\"100\")));\n    Debug.Assert(ChangeBase((234L), (2L)).Equals((\"11101010\")));\n    Debug.Assert(ChangeBase((16L), (2L)).Equals((\"10000\")));\n    Debug.Assert(ChangeBase((8L), (2L)).Equals((\"1000\")));\n    Debug.Assert(ChangeBase((7L), (2L)).Equals((\"111\")));\n    Debug.Assert(ChangeBase((2L), (3L)).Equals((\"2\")));\n    Debug.Assert(ChangeBase((3L), (4L)).Equals((\"3\")));\n    Debug.Assert(ChangeBase((4L), (5L)).Equals((\"4\")));\n    Debug.Assert(ChangeBase((5L), (6L)).Equals((\"5\")));\n    Debug.Assert(ChangeBase((6L), (7L)).Equals((\"6\")));\n    Debug.Assert(ChangeBase((7L), (8L)).Equals((\"7\")));\n    }\n\n}\n",
  "completions": [
    "        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base.\");\n        }\n        if (x < 0) {\n            throw new Exception(\"Negative number.\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        string result = \"\";\n        while (x > 0) {\n            int digit = (int)(x % numBase);\n            x /= numBase;\n            result = digit.ToString() + result;\n        }\n        return result;",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x /= numBase;\n        }\n        return result.ToString();",
    "        string result = \"\";\n        long num = x;\n        while (num > 0) {\n            long digit = num % numBase;\n            result = digit.ToString() + result;\n            num /= numBase;\n        }\n        return result;",
    "        // Write your code here\n        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        if (x < 0)\n            throw new Exception(\"Negative number\");\n        if (x == 0)\n            return \"0\";\n        if (numBase == 10)\n            return Long.ToString(x);\n        long num = x;\n        long base = numBase;\n        long rem = 0;\n        string result = \"\";\n        while (num > 0) {\n            rem = num % base;\n            num = num / base;\n            result = rem + result;\n        }\n        return result;",
    "        if (x < 0)\n            throw new Exception(\"Negative number cannot be converted.\");\n        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base.\");\n        if (x == 0)\n            return \"0\";\n        if (numBase == 10)\n            return Long.ToString(x);\n        if (numBase == 2)\n            return Long.ToBinaryString(x);\n        if (numBase == 3)\n            return Long.ToOctalString(x);\n        if (numBase == 4)\n            return Long.ToHexString(x);\n        if (numBase == 5)\n            return Long.ToString(x, 5);\n        if (numBase == 6)\n            return Long.ToString(x, 6);\n        if (numBase == 7)\n            return Long.ToString(x, 7);\n        if (numBase == 8)\n            return Long.ToString(x, 8);\n        if (numBase == 9)\n            return Long.ToString(x, 9);\n        throw new Exception(\"Invalid base.\");",
    "        // Write your code here\n        if (numBase < 2)\n            throw new Exception(\"Invalid base\");\n        if (x < 0)\n            throw new Exception(\"Negative number\");\n        if (x == 0)\n            return \"0\";\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.Insert(0, (char)((int)x % numBase + '0'));\n            x /= numBase;\n        }\n        return sb.ToString();",
    "        long result = 0;\n        long power = 1;\n        while (numBase < 10) {\n            numBase *= 10;\n            power *= 10;\n        }\n        while (numBase > 10) {\n            numBase /= 10;\n            power /= 10;\n        }\n        while (x > 0) {\n            result += (x % numBase) * power;\n            x /= numBase;\n            power /= numBase;\n        }\n        return result.ToString();",
    "        long result = 0;\n        long power = 1;\n        while (numBase < 10) {\n            numBase *= 10;\n            power *= 10;\n        }\n        while (numBase > 10) {\n            numBase /= 10;\n            power /= 10;\n        }\n        while (x > 0) {\n            result += (x % numBase) * power;\n            x /= numBase;\n            power /= numBase;\n        }\n        if (result == 0 && x != 0)\n            result = 1;\n        return (new string(Convert.ToString(result)));",
    "        if (x < 0) {\n            throw new Exception(\"Negative number cannot be converted.\");\n        }\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid number base.\");\n        }\n        if (numBase == 10) {\n            return Long.ToString(x);\n        }\n        int digits = 0;\n        while (x > 0) {\n            x /= numBase;\n            digits++;\n        }\n        char[] digitsArray = new char[digits];\n        while (digits > 0) {\n            digitsArray[digits - 1] = (char)('0' + (x % numBase));\n            x /= numBase;\n            digits--;\n        }\n        return new String(digitsArray);",
    "        // Write your code here\n        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result = result * 10 + x % 10;\n            x /= 10;\n        }\n        return result.ToString();",
    "        long[] digits = new long[numBase];\n        for (int i = 0; i < numBase; i++) {\n            digits[i] = x % numBase;\n            x /= numBase;\n        }\n        return String.Join(\"\", digits);",
    "        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        if (x < 0)\n            throw new Exception(\"Negative number\");\n        if (x == 0)\n            return \"0\";\n        int digits = 0;\n        while (x > 0) {\n            x /= numBase;\n            digits++;\n        }\n        StringBuilder sb = new StringBuilder();\n        while (digits-- > 0) {\n            sb.Append(Convert.ToChar((int) (x % numBase)));\n            x /= numBase;\n        }\n        return sb.ToString();",
    "        if (x == 0) return \"0\";\n        if (numBase < 2 || numBase > 10) return \"\";\n        if (numBase == 10) return Long.ToString(x);\n        if (numBase == 2) return Long.ToBinaryString(x);\n        if (numBase == 3) return Long.ToOctalString(x);\n        if (numBase == 4) return Long.ToHexString(x);\n        if (numBase == 5) return Long.ToString(x, 5);\n        if (numBase == 6) return Long.ToString(x, 6);\n        if (numBase == 7) return Long.ToString(x, 7);\n        if (numBase == 8) return Long.ToString(x, 8);\n        if (numBase == 9) return Long.ToString(x, 9);\n        return \"\";",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        string result = \"\";\n        while (x > 0) {\n            int digit = (int)(x % numBase);\n            x /= numBase;\n            result = (char)(digit + '0') + result;\n        }\n        return result;",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x /= numBase;\n        }\n        return result.ToString();",
    "        string result = \"\";\n        long n = x;\n        while (n > 0) {\n            result = (char)(n % numBase + '0') + result;\n            n = n / numBase;\n        }\n        return result;",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        // Write your code here\n        long n = x;\n        long base = numBase;\n        string result = \"\";\n        while (n > 0) {\n            long digit = n % base;\n            result = digit.ToString() + result;\n            n = n / base;\n        }\n        return result;",
    "        long result = 0;\n        long base = numBase;\n        while (x > 0) {\n            result = result * base + x % base;\n            x = x / base;\n        }\n        return result.ToString();",
    "        long[] digits = new long[numBase];\n        long[] base = new long[numBase];\n        long[] result = new long[numBase];\n        long[] temp = new long[numBase];\n        long[] temp2 = new long[numBase];\n        long[] temp3 = new long[numBase];\n        long[] temp4 = new long[numBase];\n        long[] temp5 = new long[numBase];\n        long[] temp6 = new long[numBase];\n        long[] temp7 = new long[numBase];\n        long[] temp8 = new long[numBase];\n        long[] temp9 = new long[numBase];\n        long[] temp10 = new long[numBase];\n        long[] temp11 = new long[numBase];\n        long[] temp12 = new long[numBase];\n        long[] temp13 = new long[numBase];\n        long[] temp14 = new long[numBase];\n        long[] temp15 = new long[numBase];\n        long[] temp16 = new long[numBase];\n        long[] temp17 = new long[numBase];\n        long[] temp18 = new long[numBase];\n        long[] temp19 = new long[numBase];\n        long[] temp20 = new long[numBase];\n        long[] temp21 = new long[numBase];\n        long[] temp22 = new long[numBase];\n        long[] temp23 = new long[numBase];\n        long[] temp24 = new long[numBase];\n        long[] temp25 = new long[numBase];\n        long[] temp26 = new long[numBase];\n        long[] temp27 = new long[numBase];\n        long[] temp28 = new long[numBase];\n        long[] temp29 = new long[numBase];\n        long[] temp30 = new long[numBase];\n        long[] temp31 = new long[numBase];\n        long[] temp32 = new long[numBase];\n        long[] temp33 = new long[numBase];\n        long[] temp34 = new long[numBase];\n        long[] temp35 = new long[numBase];\n        long[] temp36 = new long[numBase];\n        long[] temp37 = new long[",
    "        // Write your code here\n        if (x < 0)\n            return \"\";\n        if (numBase < 2 || numBase > 36)\n            return \"\";\n        if (x == 0)\n            return \"0\";\n        if (numBase == 2) {\n            return \"1\" + ChangeBase(x / 2, 2);\n        }\n        if (numBase == 10) {\n            return Long.ToString(x);\n        }\n        if (numBase == 16) {\n            return Long.ToString(x, 16);\n        }\n        if (numBase == 8) {\n            return Long.ToString(x, 8);\n        }\n        if (numBase == 3) {\n            return Long.ToString(x, 3);\n        }\n        if (numBase == 5) {\n            return Long.ToString(x, 5);\n        }\n        if (numBase == 7) {\n            return Long.ToString(x, 7);\n        }\n        if (numBase == 11) {\n            return Long.ToString(x, 11);\n        }\n        if (numBase == 13) {\n            return Long.ToString(x, 13);\n        }\n        if (numBase == 17) {\n            return Long.ToString(x, 17);\n        }\n        if (numBase == 19) {\n            return Long.ToString(x, 19);\n        }\n        if (numBase == 23) {\n            return Long.ToString(x, 23);\n        }\n        if (numBase == 29) {\n            return Long.ToString(x, 29);\n        }\n        if (numBase == 31) {\n            return Long.ToString(x, 31);\n        }\n        if (numBase == 37) {\n            return Long.ToString(x, 37);\n        }\n        return \"\";",
    "        if (x < 0)\n            throw new Exception(\"Negative number\");\n        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        if (x == 0)\n            return \"0\";\n        string result = \"\";\n        while (x > 0) {\n            int digit = (int) (x % numBase);\n            x /= numBase;\n            result = digit.ToString() + result;\n        }\n        return result;\n    }\n\n    // Convert a string representation of a number in base b to a number.\n    // >>> ConvertBase(\"22\", (3L))\n    // (8L)\n    // >>> ConvertBase(\"1000\", (2L))\n    // (8L)\n    // >>> ConvertBase(\"111\", (2L))\n    // (7L)\n    // >>> ConvertBase(\"100\", (2L))\n    // (100L)\n    public static long ConvertBase(string s, long b) {\n        if (s == \"0\")\n            return 0;\n        long result = 0;\n        for (int i = 0; i < s.Length; i++) {\n            int digit = s[i] - '0';\n            result = result * b + digit;\n        }\n        return result;\n    }\n\n    // Convert a string representation of a number in base b to a number.\n    // >>> ConvertBase(\"22\", (3L))\n    // (8L)\n    // >>> ConvertBase(\"1000\", (2L))\n    // (8L)\n    // >>> ConvertBase(\"111\", (2L))\n    // (7L)\n    // >>> ConvertBase(\"100\", (2L))\n    // (100L)\n    public static long ConvertBase(string s, int b) {\n        if (s == \"0\")\n            return 0;\n        long result = 0;\n        for (int i = 0; i < s.Length; i++) {\n            int digit = s[i] - '0';\n            result = result * b + digit;\n        }\n        return result;\n    }\n\n    // Convert a string representation of a number in base b to a number.\n    // >>> ConvertBase(\"22\", (",
    "        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result = result * 10 + x % 10;\n            x /= 10;\n        }\n        return result.ToString();",
    "        // Write your code here\n        if (x == 0)\n            return \"0\";\n        if (numBase < 2 || numBase > 36)\n            throw new Exception(\"Invalid base\");\n        string result = \"\";\n        while (x > 0) {\n            int digit = (int) (x % numBase);\n            result = digit + result;\n            x = x / numBase;\n        }\n        return result;",
    "        // Write your code here\n        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        string result = \"\";\n        long n = x;\n        while (n > 0) {\n            int digit = (int)(n % numBase);\n            result = digit + result;\n            n /= numBase;\n        }\n        return result;",
    "        // Write your code here\n        if (x < 0) {\n            throw new Exception(\"Negative number cannot be converted.\");\n        }\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base.\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        if (x < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        string result = \"\";\n        while (x > 0) {\n            int digit = (int)(x % numBase);\n            x /= numBase;\n            result = digit.ToString() + result;\n        }\n        return result;",
    "        // Write your code here\n        if (x == 0) return \"0\";\n        if (numBase < 2) return \"Error\";\n        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        long result = 0;\n        long base = numBase;\n        while (x > 0) {\n            result = result * base + x % base;\n            x = x / base;\n        }\n        return result.ToString();",
    "        long result = 0;\n        long power = 1;\n        while (numBase <= x) {\n            result += power * (x % numBase);\n            x /= numBase;\n            power *= numBase;\n        }\n        return result.ToString();",
    "        // Write your code here\n        long result = 0;\n        long base = numBase;\n        while (x > 0) {\n            result = result * base + x % base;\n            x = x / base;\n        }\n        return result.ToString();",
    "        if (x < 0) {\n            throw new Exception(\"Negative number is not supported.\");\n        }\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base number.\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        long num = x;\n        long base = numBase;\n        string result = \"\";\n        while (num > 0) {\n            long remainder = num % base;\n            num = num / base;\n            result = remainder + result;\n        }\n        return result;",
    "        if (x < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base\");\n        }\n        long n = x;\n        long result = 0;\n        while (n > 0) {\n            result = result * numBase + n % numBase;\n            n = n / numBase;\n        }\n        if (result < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        return result.ToString();",
    "        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result = result * 10 + x % 10;\n            x = x / 10;\n        }\n        return result.ToString();",
    "        if (x < 0)\n            throw new Exception(\"Negative number cannot be converted.\");\n        if (numBase < 2 || numBase > 36)\n            throw new Exception(\"Invalid number base.\");\n        if (numBase == 2)\n            return BinaryToString(x);\n        if (numBase == 10)\n            return Long.ToString(x);\n        if (numBase == 16)\n            return HexToString(x);\n        if (numBase == 8)\n            return OctToString(x);\n        if (numBase == 3)\n            return TriToString(x);\n        if (numBase == 4)\n            return QuadToString(x);\n        if (numBase == 5)\n            return QuintToString(x);\n        if (numBase == 6)\n            return SextToString(x);\n        if (numBase == 7)\n            return SeptToString(x);\n        if (numBase == 8)\n            return OctToString(x);\n        if (numBase == 9)\n            return NovToString(x);\n        if (numBase == 10)\n            return DecToString(x);\n        if (numBase == 11)\n            return UndecToString(x);\n        if (numBase == 12)\n            return DuodecToString(x);\n        if (numBase == 13)\n            return UndecToString(x);\n        if (numBase == 14)\n            return DuodecToString(x);\n        if (numBase == 15)\n            return UndecToString(x);\n        if (numBase == 16)\n            return HexToString(x);\n        if (numBase == 17)\n            return UndecToString(x);\n        if (numBase == 18)\n            return DuodecToString(x);\n        if (numBase == 19)\n            return UndecToString(x);\n        if (numBase == 20)\n            return DuodecToString(x);\n        if (numBase == 21)\n            return UndecToString(x);\n        if (numBase == 22)\n            return DuodecToString(x);\n        if (numBase == 23)\n            return UndecToString",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        // Write your code here\n        if (numBase < 2) {\n            throw new Exception(\"Invalid base\");\n        }\n        if (x < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        int base = (int) numBase;\n        int digits = 0;\n        while (x > 0) {\n            x /= base;\n            digits++;\n        }\n        StringBuilder sb = new StringBuilder();\n        while (digits-- > 0) {\n            sb.Append(Convert.ToString((int) (x % base), base));\n            x /= base;\n        }\n        return sb.ToString();",
    "        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        if (x < 0)\n            throw new Exception(\"Negative number\");\n        if (x == 0)\n            return \"0\";\n        long num = x;\n        string result = \"\";\n        while (num > 0) {\n            result = (char)(num % numBase + '0') + result;\n            num /= numBase;\n        }\n        return result;",
    "        // Write your code here\n        long result = 0;\n        long power = 1;\n        while (x > 0) {\n            result += (x % numBase) * power;\n            x /= numBase;\n            power *= numBase;\n        }\n        return result.ToString();",
    "        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result = result * 10 + x % 10;\n            x /= 10;\n        }\n        return result.ToString();",
    "        // Write your code here\n        long n = x;\n        long base = numBase;\n        long result = 0;\n        while (n > 0) {\n            result = result * base + n % base;\n            n = n / base;\n        }\n        return result.ToString();",
    "        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result = result * 10 + x % 10;\n            x = x / 10;\n        }\n        return result.ToString();\n    }\n\n    // Convert string to long.\n    // >>> Convert(\"22\")\n    // (22)\n    // >>> Convert(\"1000\")\n    // (8)\n    // >>> Convert(\"111\")\n    // (7)\n    public static long Convert(string str) {\n        long result = 0;\n        for (int i = 0; i < str.Length; i++) {\n            result = result * 10 + str[i] - '0';\n        }\n        return result;\n    }\n\n    // Convert string to long.\n    // >>> Convert(\"22\")\n    // (22)\n    // >>> Convert(\"1000\")\n    // (8)\n    // >>> Convert(\"111\")\n    // (7)\n    public static long Convert(string str, int base) {\n        long result = 0;\n        for (int i = 0; i < str.Length; i++) {\n            result = result * base + str[i] - '0';\n        }\n        return result;\n    }\n\n    // Convert string to long.\n    // >>> Convert(\"22\")\n    // (22)\n    // >>> Convert(\"1000\")\n    // (8)\n    // >>> Convert(\"111\")\n    // (7)\n    public static long Convert(string str, int base, int radix) {\n        long result = 0;\n        for (int i = 0; i < str.Length; i++) {\n            result = result * radix + str[i] - '0';\n        }\n        return result;\n    }\n\n    // Convert string to long.\n    // >>> Convert(\"22\")\n    // (22)\n    // >>> Convert(\"1000\")\n    // (8)\n    // >>> Convert(\"111\")\n    // (7)\n    public static long Convert(string str, int base, int radix, int digits) {\n        long result = 0;\n        for (int i = 0; i < str.Length; i++) {\n            result = result * radix +",
    "        // Write your code here\n        if (numBase < 2)\n            throw new Exception(\"Base must be greater than 1\");\n        if (numBase > 10)\n            throw new Exception(\"Base must be less than 10\");\n        if (x < 0)\n            throw new Exception(\"Negative numbers are not supported\");\n        if (x == 0)\n            return \"0\";\n        long n = x;\n        long result = 0;\n        while (n > 0) {\n            result = result * numBase + n % numBase;\n            n = n / numBase;\n        }\n        return result.ToString();",
    "        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result = result * 10 + x % 10;\n            x = x / 10;\n        }\n        return result.ToString();",
    "        if (x == 0) return \"0\";\n        if (numBase < 2 || numBase > 36) return \"\";\n        string result = \"\";\n        while (x > 0) {\n            int digit = (int)(x % numBase);\n            result = digit + result;\n            x /= numBase;\n        }\n        return result;",
    "        // Write your code here\n        long[] digits = new long[1];\n        long[] result = new long[1];\n        long power = 1;\n        while (x > 0) {\n            digits[0] = x % numBase;\n            x = x / numBase;\n            result[0] = digits[0] * power;\n            power = power * numBase;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = result.Length - 1; i >= 0; i--) {\n            sb.Append(result[i]);\n        }\n        return sb.ToString();",
    "        long result = 0;\n        long base = numBase;\n        while (x > 0) {\n            result = result * base + x % base;\n            x = x / base;\n        }\n        return result.ToString();\n    }\n\n    // Convert a number in base 10 to base 2.\n    // >>> ConvertBase(10L, 2L)\n    // (\"100\")\n    // >>> ConvertBase(100L, 2L)\n    // (\"100\")\n    // >>> ConvertBase(100L, 10L)\n    // (\"10000000000\")\n    // >>> ConvertBase(100L, 16L)\n    // (\"100\")\n    public static string ConvertBase(long x, long numBase) {\n        long result = 0;\n        long base = numBase;\n        while (x > 0) {\n            result = result * base + x % base;\n            x = x / base;\n        }\n        return result.ToString();\n    }\n\n    // Convert a number in base 10 to base 2.\n    // >>> ConvertBase(10L, 2L)\n    // (\"100\")\n    // >>> ConvertBase(100L, 2L)\n    // (\"100\")\n    // >>> ConvertBase(100L, 10L)\n    // (\"10000000000\")\n    // >>> ConvertBase(100L, 16L)\n    // (\"100\")\n    public static long ConvertBase(long x, long numBase) {\n        long result = 0;\n        long base = numBase;\n        while (x > 0) {\n            result = result * base + x % base;\n            x = x / base;\n        }\n        return result;\n    }\n\n    // Convert a number in base 10 to base 2.\n    // >>> ConvertBase(10L, 2L)\n    // (\"100\")\n    // >>> ConvertBase(100L, 2L)\n    // (\"100\")\n    // >>> ConvertBase(100L, 10L)\n    // (\"10000000000\")\n    // >>> ConvertBase(100L, 16L)\n    // (\"100\")\n    public static long ConvertBase(long x, long numBase) {\n        long result = 0;\n        long base = numBase;\n        while (x >",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        if (x == 0) return \"0\";\n        if (numBase < 2 || numBase > 10) return \"\";\n        long n = x;\n        long num = numBase;\n        string s = \"\";\n        while (n > 0) {\n            s = (char)(n % num + '0') + s;\n            n = n / num;\n        }\n        return s;",
    "        // Write your code here\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base\");\n        }\n        if (x < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        long n = x;\n        long result = 0;\n        while (n > 0) {\n            result = result * numBase + n % numBase;\n            n = n / numBase;\n        }\n        return result.ToString();",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        if (x < 0)\n            throw new Exception(\"Negative number\");\n        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        if (x == 0)\n            return \"0\";\n        if (numBase == 10)\n            return Long.ToString(x);\n        long n = x;\n        long r = 0;\n        while (n > 0) {\n            r = r * numBase + n % numBase;\n            n = n / numBase;\n        }\n        return Long.ToString(r);",
    "        long result = 0;\n        long base = numBase;\n        while (x > 0) {\n            result = result * base + x % base;\n            x = x / base;\n        }\n        if (result < 0) {\n            result = -result;\n        }\n        return result.ToString();",
    "        string result = \"\";\n        while (x > 0) {\n            int digit = (int) (x % numBase);\n            result = digit.ToString() + result;\n            x /= numBase;\n        }\n        return result;\n    }\n\n    // Convert a number to its decimal representation.\n    // >>> ConvertToDecimal(12)\n    // (12)\n    // >>> ConvertToDecimal(12L)\n    // (12)\n    // >>> ConvertToDecimal(12.5)\n    // (12.5)\n    // >>> ConvertToDecimal(12.5f)\n    // (12.5)\n    // >>> ConvertToDecimal(12.5d)\n    // (12.5)\n    // >>> ConvertToDecimal(12.5)\n    // (12.5)\n    public static double ConvertToDecimal(double x) {\n        return x;\n    }\n\n    // Convert a number to its hexadecimal representation.\n    // >>> ConvertToHexadecimal(12)\n    // (\"C\")\n    // >>> ConvertToHexadecimal(12L)\n    // (\"C\")\n    // >>> ConvertToHexadecimal(12.5)\n    // (\"C\")\n    // >>> ConvertToHexadecimal(12.5f)\n    // (\"C\")\n    // >>> ConvertToHexadecimal(12.5d)\n    // (\"C\")\n    // >>> ConvertToHexadecimal(12.5)\n    // (\"C\")\n    public static string ConvertToHexadecimal(double x) {\n        return \"C\";\n    }\n\n    // Convert a number to its octal representation.\n    // >>> ConvertToOctal(12)\n    // (\"12\")\n    // >>> ConvertToOctal(12L)\n    // (\"12\")\n    // >>> ConvertToOctal(12.5)\n    // (\"12\")\n    // >>> ConvertToOctal(12.5f)\n    // (\"12\")\n    // >>> ConvertToOctal(12.5d)\n    // (\"12\")\n    // >>> ConvertToOctal(12.5)\n    // (\"12\")\n    ",
    "        // Write your code here\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base\");\n        }\n        if (x < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        int base = (int) numBase;\n        int digit = 0;\n        int i = 0;\n        while (x > 0) {\n            digit = (int) (x % base);\n            x = x / base;\n            i++;\n        }\n        StringBuilder sb = new StringBuilder();\n        while (i > 0) {\n            sb.Append(digit);\n            i--;\n        }\n        return sb.ToString();",
    "        // Write your code here\n        long result = 0;\n        long base = 1;\n        while (numBase > 1) {\n            result = result + (x % numBase) * base;\n            x = x / numBase;\n            base = base * numBase;\n        }\n        return result.ToString();",
    "        if (x < 0) {\n            throw new Exception(\"Negative number is not allowed.\");\n        }\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid number base.\");\n        }\n        string result = \"\";\n        while (x > 0) {\n            result = (char)((int)x % numBase + '0') + result;\n            x = x / numBase;\n        }\n        return result;",
    "        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base\");\n        }\n        string result = \"\";\n        while (x > 0) {\n            int digit = (int) (x % numBase);\n            result = digit.ToString() + result;\n            x /= numBase;\n        }\n        return result;",
    "        if (x < 0)\n            throw new Exception(\"Negative number is not supported.\");\n        if (numBase < 2 || numBase > 36)\n            throw new Exception(\"Base should be in the range [2, 36].\");\n        if (numBase == 2)\n            return BinaryToString(x);\n        if (numBase == 10)\n            return Long.ToString(x);\n        if (numBase == 16)\n            return HexToString(x);\n        if (numBase == 8)\n            return OctToString(x);\n        if (numBase == 3)\n            return TriToString(x);\n        if (numBase == 4)\n            return QuadToString(x);\n        if (numBase == 5)\n            return QuintToString(x);\n        if (numBase == 6)\n            return SextToString(x);\n        if (numBase == 7)\n            return SeptToString(x);\n        if (numBase == 8)\n            return OctToString(x);\n        if (numBase == 9)\n            return NovToString(x);\n        if (numBase == 10)\n            return DecToString(x);\n        if (numBase == 11)\n            return UndecToString(x);\n        if (numBase == 12)\n            return DuodecToString(x);\n        if (numBase == 13)\n            return UndecToString(x);\n        if (numBase == 14)\n            return DuodecToString(x);\n        if (numBase == 15)\n            return UndecToString(x);\n        if (numBase == 16)\n            return HexToString(x);\n        if (numBase == 17)\n            return UndecToString(x);\n        if (numBase == 18)\n            return DuodecToString(x);\n        if (numBase == 19)\n            return UndecToString(x);\n        if (numBase == 20)\n            return DuodecToString(x);\n        if (numBase == 21)\n            return UndecToString(x);\n        if (numBase == 22)\n            return DuodecToString(x);\n        if (numBase == 23)",
    "        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result = result * 10 + x % 10;\n            x /= 10;\n        }\n        return result.ToString();",
    "        long result = 0;\n        long base = numBase;\n        while (x > 0) {\n            result = result * base + x % base;\n            x = x / base;\n        }\n        return result.ToString();",
    "        long result = 0;\n        long base = 1;\n        while (numBase > 1) {\n            if (numBase % 2 == 1) {\n                result += x * base;\n            }\n            base *= numBase;\n            numBase /= 2;\n        }\n        return result.ToString();",
    "        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result = result * 10 + x % 10;\n            x = x / 10;\n        }\n        return result.ToString();",
    "        // Write your code here\n        long result = 0;\n        long base = numBase;\n        while (x > 0) {\n            result = result * base + x % base;\n            x /= base;\n        }\n        return result.ToString();",
    "        string result = \"\";\n        long temp = x;\n        while (temp > 0) {\n            result = (char)((int)temp % numBase + '0') + result;\n            temp = temp / numBase;\n        }\n        return result;",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        // Write your code here\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base\");\n        }\n        if (x < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        if (numBase == 10) {\n            return Long.ToString(x);\n        }\n        long[] digits = new long[1];\n        digits[0] = x;\n        int n = digits.Length;\n        long[] newDigits = new long[n * numBase];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < numBase; j++) {\n                newDigits[i * numBase + j] = digits[i] * numBase + j;\n            }\n        }\n        return String.Join(\"\", Enumerable.Of(newDigits).Select(d => Long.ToString(d)).ToList());",
    "        long[] digits = new long[numBase];\n        for (int i = 0; i < numBase; i++) {\n            digits[i] = x % numBase;\n            x = x / numBase;\n        }\n        return String.Join(\"\", digits);",
    "        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result += (x % numBase) * Math.pow(numBase, i);\n            x /= numBase;\n        }\n        return result.ToString();",
    "        if (x < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base\");\n        }\n        if (numBase == 10) {\n            return Long.ToString(x);\n        }\n        if (numBase == 2) {\n            return Long.ToBinaryString(x);\n        }\n        if (numBase == 3) {\n            return Long.ToOctalString(x);\n        }\n        if (numBase == 4) {\n            return Long.ToHexString(x);\n        }\n        if (numBase == 5) {\n            return Long.ToString(x, 5);\n        }\n        if (numBase == 6) {\n            return Long.ToString(x, 6);\n        }\n        if (numBase == 7) {\n            return Long.ToString(x, 7);\n        }\n        if (numBase == 8) {\n            return Long.ToString(x, 8);\n        }\n        if (numBase == 9) {\n            return Long.ToString(x, 9);\n        }\n        return \"\";",
    "        long result = 0;\n        long base = numBase;\n        while (x > 0) {\n            result = result * base + x % base;\n            x = x / base;\n        }\n        return result.ToString();",
    "        string result = \"\";\n        long remainder = x;\n        while (remainder != 0) {\n            int digit = remainder % numBase;\n            remainder = remainder / numBase;\n            result = digit.ToString() + result;\n        }\n        return result;",
    "        long[] digits = new long[numBase];\n        for (int i = 0; i < numBase; i++) {\n            digits[i] = x % numBase;\n            x /= numBase;\n        }\n        return String.Join(\"\", digits);",
    "        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result = result * 10 + x % 10;\n            x /= 10;\n        }\n        return result.ToString();",
    "        if (x < 0)\n            throw new Exception(\"Negative number cannot be converted.\");\n        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base.\");\n        if (numBase == 10)\n            return Long.ToString(x);\n        long result = 0;\n        while (x > 0) {\n            result = result * 10 + x % numBase;\n            x = x / numBase;\n        }\n        return Long.ToString(result);",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        string result = \"\";\n        while (x > 0) {\n            int digit = (int) (x % numBase);\n            x /= numBase;\n            result = (char) (digit + 48) + result;\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result = result * 10 + x % 10;\n            x = x / 10;\n        }\n        return result.ToString();\n    }\n\n    // Convert string representation of number to base 10.\n    // Return number representation of the string.\n    // >>> ConvertBase(\"22\", (3L))\n    // (2)\n    // >>> ConvertBase(\"1000\", (2L))\n    // (8)\n    // >>> ConvertBase(\"111\", (2L))\n    // (7)\n    public static long ConvertBase(string s, long base) {\n        long result = 0;\n        for (int i = 0; i < s.Length; i++) {\n            result = result * base + s[i] - '0';\n        }\n        return result;\n    }\n\n    // Convert string representation of number to base 10.\n    // Return number representation of the string.\n    // >>> ConvertBase(\"22\", (3L))\n    // (2)\n    // >>> ConvertBase(\"1000\", (2L))\n    // (8)\n    // >>> ConvertBase(\"111\", (2L))\n    // (7)\n    public static long ConvertBase(string s) {\n        return ConvertBase(s, 10);\n    }\n\n    // Convert string representation of number to base 10.\n    // Return number representation of the string.\n    // >>> ConvertBase(\"22\", (3L))\n    // (2)\n    // >>> ConvertBase(\"1000\", (2L))\n    // (8)\n    // >>> ConvertBase(\"111\", (2L))\n    // (7)\n    public static long ConvertBase(long x, long base) {\n        long result = 0;\n        for (int i = 0; i < base; i++) {\n            result = result * base + x % base;\n            x = x / base;\n        }\n        return result;\n    }\n\n    // Convert string representation of number to base 10.\n    // Return number representation of the string.\n    // >>> ConvertBase(\"22\", (3L))\n    // (2)\n    // >>> ConvertBase(\"1000\", (2L))\n    //",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();\n    }\n\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>> ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n    // (\"111\")\n    public static long ChangeBase(long x, int numBase) {\n        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result;\n    }\n\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>> ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n    // (\"111\")\n    public static long ChangeBase(long x, int numBase, int mod) {\n        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result % mod;\n    }\n\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>> ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n    // (\"111\")\n    public static long ChangeBase(long x, int numBase, int mod, int mod2) {\n        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result % mod2;\n    }\n\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>> ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n    // (\"111\")\n    public static long ChangeBase",
    "        string result = \"\";\n        long temp = x;\n        while (temp != 0) {\n            result = (char)((int)(temp % numBase) + '0') + result;\n            temp = temp / numBase;\n        }\n        return result;",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result = result * 10 + x % 10;\n            x = x / 10;\n        }\n        return result.ToString();\n    }\n\n    // Convert string representation of number to numerical base.\n    // Return the number.\n    // >>> ConvertBase(\"22\", (3L))\n    // (2L)\n    // >>> ConvertBase(\"1000\", (2L))\n    // (8L)\n    // >>> ConvertBase(\"111\", (2L))\n    // (7L)\n    public static long ConvertBase(string x, long numBase) {\n        long result = 0;\n        for (int i = 0; i < x.Length; i++) {\n            result = result * numBase + (x[i] - '0');\n        }\n        return result;\n    }\n\n    // Convert string representation of number to another numerical base.\n    // Return the number.\n    // >>> ConvertBase(\"22\", (3L), (2L))\n    // (2L)\n    // >>> ConvertBase(\"1000\", (2L), (8L))\n    // (8L)\n    // >>> ConvertBase(\"111\", (2L), (7L))\n    // (7L)\n    public static long ConvertBase(string x, long numBase1, long numBase2) {\n        long result = 0;\n        for (int i = 0; i < x.Length; i++) {\n            result = result * numBase1 + (x[i] - '0');\n        }\n        return result * numBase2 / numBase1;\n    }\n\n    // Convert string representation of number to numerical base.\n    // Return the number.\n    // >>> ConvertBase(\"22\", (3L), (2L))\n    // (2L)\n    // >>> ConvertBase(\"1000\", (2L), (8L))\n    // (8L)\n    // >>> ConvertBase(\"111\", (2L), (7L))\n    // (7L)\n    public static long ConvertBase(string x, long numBase1, long numBase2) {\n        long result = 0;\n        for (int i = 0;",
    "        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        string result = \"\";\n        while (x > 0) {\n            int digit = (int)(x % numBase);\n            result = digit.ToString() + result;\n            x /= numBase;\n        }\n        return result;",
    "        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result = result * 10 + x % 10;\n            x /= 10;\n        }\n        return result.ToString();",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        // Write your code here\n        if (x == 0) return \"0\";\n        if (numBase < 2 || numBase > 36) return \"\";\n        if (x < 0) return \"\";\n        int len = 0;\n        while (x > 0) {\n            len++;\n            x /= numBase;\n        }\n        char[] result = new char[len];\n        int index = len - 1;\n        while (index >= 0) {\n            int digit = (int)(x % numBase);\n            result[index] = (char)(digit < 10 ? digit + '0' : digit + 'a' - 10);\n            x /= numBase;\n            index--;\n        }\n        return new string(result);",
    "        if (x == 0) return \"0\";\n        if (numBase < 2 || numBase > 36) return \"\";\n        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        if (x < 0)\n            throw new Exception(\"Negative number\");\n        if (x == 0)\n            return \"0\";\n        string result = \"\";\n        while (x > 0) {\n            int digit = (int)(x % numBase);\n            x /= numBase;\n            result = digit.ToString() + result;\n        }\n        return result;",
    "        if (x < 0) {\n            throw new Exception(\"Negative number is not supported.\");\n        }\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid number base.\");\n        }\n        string result = \"\";\n        while (x > 0) {\n            int digit = (int)(x % numBase);\n            x /= numBase;\n            result = digit.ToString() + result;\n        }\n        return result;",
    "        long result = 0;\n        long base = 1;\n        while (numBase > 1) {\n            result = result + (x % numBase) * base;\n            x = x / numBase;\n            base = base * numBase;\n        }\n        return result.ToString();",
    "        // Write your code here\n        if (x < 0)\n            return \"\";\n        if (x == 0)\n            return \"0\";\n        if (numBase < 2)\n            return \"\";\n        if (numBase > 36)\n            return \"\";\n        long n = numBase;\n        long r = 0;\n        while (n > 0) {\n            r = r * n + x % n;\n            x = x / n;\n            n = n / numBase;\n        }\n        return r.ToString();",
    "        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result = result * 10 + x % 10;\n            x = x / 10;\n        }\n        return result.ToString();",
    "        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        if (x < 0)\n            throw new Exception(\"Negative number\");\n        if (x == 0)\n            return \"0\";\n        if (numBase == 10)\n            return Long.ToString(x);\n        int base = (int) numBase;\n        int digits = 0;\n        while (x > 0) {\n            x /= base;\n            digits++;\n        }\n        char[] result = new char[digits];\n        while (digits > 0) {\n            int digit = (int) (x % base);\n            result[--digits] = (char) (digit + '0');\n            x /= base;\n        }\n        return new String(result);",
    "        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result = result * 10 + x % 10;\n            x = x / 10;\n        }\n        return result.ToString();",
    "        long result = 0;\n        long mod = 1;\n        while (x > 0) {\n            result += (x % numBase) * mod;\n            x /= numBase;\n            mod *= numBase;\n        }\n        return result.ToString();",
    "        long[] digits = new long[numBase];\n        for (int i = 0; i < numBase; i++) {\n            digits[i] = x % numBase;\n            x /= numBase;\n        }\n        return string.Join(\"\", digits);",
    "        long result = 0;\n        long base = 1;\n        while (numBase > 1) {\n            result = result + (x % numBase) * base;\n            x = x / numBase;\n            base = base * numBase;\n        }\n        return result.ToString();",
    "        long n = x;\n        string s = \"\";\n        while (n > 0) {\n            s = (char)((n % numBase) + '0') + s;\n            n /= numBase;\n        }\n        return s;",
    "        long result = 0;\n        long base = numBase;\n        while (x > 0) {\n            result = result * base + x % base;\n            x = x / base;\n        }\n        return result.ToString();",
    "        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result = result * 10 + x % 10;\n            x = x / 10;\n        }\n        return result.ToString();",
    "        if (x < 0)\n            throw new Exception(\"Negative number cannot be converted.\");\n        if (numBase < 2 || numBase > 36)\n            throw new Exception(\"Invalid base.\");\n        if (x == 0)\n            return \"0\";\n        string result = \"\";\n        while (x > 0) {\n            int digit = (int)(x % numBase);\n            x /= numBase;\n            result = digit.ToString() + result;\n        }\n        return result;",
    "        string result = \"\";\n        long n = x;\n        while (n > 0) {\n            int digit = (int)(n % numBase);\n            n /= numBase;\n            result = digit + result;\n        }\n        return result;",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        // Write your code here\n        long n = numBase;\n        long r = 0;\n        while (x > 0) {\n            r = x % n;\n            x = x / n;\n            n = n / numBase;\n        }\n        return r.ToString();",
    "        if (x < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid number base\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        int numDigits = 0;\n        while (x > 0) {\n            x /= numBase;\n            numDigits++;\n        }\n        StringBuilder sb = new StringBuilder();\n        while (numDigits-- > 0) {\n            sb.Append(Convert.ToString(x % numBase));\n            x /= numBase;\n        }\n        return sb.ToString();",
    "        if (x < 0)\n            throw new Exception(\"Negative number cannot be converted.\");\n        if (numBase < 2 || numBase > 36)\n            throw new Exception(\"Invalid base.\");\n        if (x == 0)\n            return \"0\";\n        if (numBase == 10)\n            return Long.ToString(x);\n        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return Long.ToString(result);",
    "        long[] digits = new long[1];\n        long[] result = new long[1];\n        long power = 1;\n        while (x > 0) {\n            digits[0] = x % numBase;\n            x /= numBase;\n            result[0] = digits[0] * power;\n            power *= numBase;\n        }\n        string resultString = \"\";\n        for (int i = 0; i < result.Length; i++) {\n            resultString += result[i].ToString();\n        }\n        return resultString;",
    "        long result = 0;\n        long base = numBase;\n        while (x > 0) {\n            result = result * base + x % base;\n            x = x / base;\n        }\n        return result.ToString();",
    "        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base\");\n        }\n        string result = \"\";\n        while (x > 0) {\n            int digit = (int)(x % numBase);\n            x /= numBase;\n            result = (char)(digit + '0') + result;\n        }\n        return result;",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();\n    }\n\n    // Convert a string representation of a number in base b to base 10.\n    // >>> ConvertBase(\"1111\", (2L))\n    // (11)\n    // >>> ConvertBase(\"1000\", (3L))\n    // (8)\n    // >>> ConvertBase(\"100\", (2L))\n    // (100)\n    // >>> ConvertBase(\"100\", (10L))\n    // (100)\n    public static long ConvertBase(string s, long b) {\n        long result = 0;\n        for (int i = 0; i < s.Length; i++) {\n            result = result * b + ConvertBase(s[i], b);\n        }\n        return result;\n    }\n\n    // Convert a string representation of a number in base b to base 10.\n    // >>> ConvertBase(\"1111\", (2L))\n    // (11)\n    // >>> ConvertBase(\"1000\", (3L))\n    // (8)\n    // >>> ConvertBase(\"100\", (2L))\n    // (100)\n    // >>> ConvertBase(\"100\", (10L))\n    // (100)\n    public static long ConvertBase(char c, long b) {\n        return ConvertBase(c, b, 10);\n    }\n\n    // Convert a string representation of a number in base b to base 10.\n    // >>> ConvertBase(\"1111\", (2L))\n    // (11)\n    // >>> ConvertBase(\"1000\", (3L))\n    // (8)\n    // >>> ConvertBase(\"100\", (2L))\n    // (100)\n    // >>> ConvertBase(\"100\", (10L))\n    // (100)\n    public static long ConvertBase(char c, long b, long base) {\n        return ConvertBase(c, base);\n    }\n\n    // Convert a string representation of a number in base b to base 10.\n    // >>> ConvertBase(\"1111\", (2L))\n    // (11)\n    // >>> ConvertBase(\"1000\", (3L))\n    //",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        long result = 0;\n        long power = 1;\n        while (x > 0) {\n            result += (x % numBase) * power;\n            x /= numBase;\n            power *= numBase;\n        }\n        return result.ToString();",
    "        if (x < 0)\n            throw new Exception(\"Negative number cannot be converted.\");\n        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base.\");\n        if (x == 0)\n            return \"0\";\n        if (numBase == 10)\n            return Long.ToString(x);\n        if (numBase == 2) {\n            return Long.ToBinaryString(x);\n        }\n        if (numBase == 3) {\n            return Long.ToOctalString(x);\n        }\n        if (numBase == 4) {\n            return Long.ToHexString(x);\n        }\n        if (numBase == 5) {\n            return Long.ToString(x, 5);\n        }\n        if (numBase == 6) {\n            return Long.ToString(x, 6);\n        }\n        if (numBase == 7) {\n            return Long.ToString(x, 7);\n        }\n        if (numBase == 8) {\n            return Long.ToString(x, 8);\n        }\n        if (numBase == 9) {\n            return Long.ToString(x, 9);\n        }\n        throw new Exception(\"Invalid base.\");",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> ConvertBase(\"22\", 10)\n    // 22\n    // >>> ConvertBase(\"1000\", 10)\n    // 8\n    // >>> ConvertBase(\"111\", 10)\n    // 7\n    // >>> ConvertBase(\"100\", 2)\n    // 4\n    // >>> ConvertBase(\"100\", 10)\n    // 100\n    // >>> ConvertBase(\"100\", 16)\n    // 64\n    public static long ConvertBase(string s, long base) {\n        long result = 0;\n        for (int i = 0; i < s.Length; i++) {\n            result = result * base + s[i] - '0';\n        }\n        return result;\n    }\n\n    // Convert a number to a string representation in a given base.\n    // >>> ConvertBase(22, 10)\n    // \"22\"\n    // >>> ConvertBase(22, 2)\n    // \"100\"\n    // >>> ConvertBase(22, 16)\n    // \"3e\"\n    public static string ConvertToBase(long x, long base) {\n        string result = \"\";\n        while (x > 0) {\n            result = (char)(x % base + '0') + result;\n            x = x / base;\n        }\n        return result;\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> ConvertBase(\"22\", 10)\n    // 22\n    // >>> ConvertBase(\"1000\", 10)\n    // 8\n    // >>> ConvertBase(\"111\", 10)\n    // 7\n    // >>> ConvertBase(\"100\", 2)\n    // 4\n    // >>> ConvertBase(\"100\", 10)\n    // 100\n    // >>> ConvertBase(\"100\", 16)\n    // 64\n    public static long ConvertBase(string s, long base) {\n        long result = 0;\n        for (int i",
    "        long[] digits = new long[numBase];\n        for (int i = 0; i < numBase; i++)\n            digits[i] = 0;\n        long curDigit = x;\n        for (int i = numBase - 1; i >= 0; i--) {\n            digits[i] = curDigit % numBase;\n            curDigit /= numBase;\n        }\n        return string.Join(\"\", digits);",
    "        if (x < 0) {\n            throw new Exception(\"Negative number cannot be converted.\");\n        }\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base.\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        long num = x;\n        long base = numBase;\n        string result = \"\";\n        while (num > 0) {\n            long remainder = num % base;\n            num = num / base;\n            result = remainder + result;\n        }\n        return result;",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        // Write your code here\n        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x /= numBase;\n        }\n        return result.ToString();",
    "        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        if (x < 0)\n            throw new Exception(\"Negative number\");\n        long n = x;\n        long num = 1;\n        string result = \"\";\n        while (n > 0) {\n            if (n % numBase == 0) {\n                n /= numBase;\n                result = (char)(num + 48) + result;\n            }\n            else {\n                num *= numBase;\n            }\n        }\n        return result;",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        // Write your code here\n        if (x == 0)\n            return \"0\";\n        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        if (numBase == 2)\n            return BinaryToString(x);\n        if (numBase == 10)\n            return Long.ToString(x);\n        if (numBase == 16)\n            return HexToString(x);\n        if (numBase == 8)\n            return OctToString(x);\n        return \"\";\n    }\n\n    // Convert binary number to string.\n    // >>> BinaryToString(12)\n    // \"1100\"\n    // >>> BinaryToString(12L)\n    // \"1100\"\n    // >>> BinaryToString(12L)\n    // \"1100\"\n    // >>> BinaryToString(12L)\n    // \"1100\"\n    // >>> BinaryToString(12L)\n    // \"1100\"\n    // >>> BinaryToString(12L)\n    // \"1100\"\n    // >>> BinaryToString(12L)\n    // \"1100\"\n    // >>> BinaryToString(12L)\n    // \"1100\"\n    // >>> BinaryToString(12L)\n    // \"1100\"\n    // >>> BinaryToString(12L)\n    // \"1100\"\n    // >>> BinaryToString(12L)\n    // \"1100\"\n    // >>> BinaryToString(12L)\n    // \"1100\"\n    // >>> BinaryToString(12L)\n    // \"1100\"\n    // >>> BinaryToString(12L)\n    // \"1100\"\n    // >>> BinaryToString(12L)\n    // \"1100\"\n    // >>> BinaryToString(12L)\n    // \"1100\"\n    // >>> BinaryToString(12L)\n    // \"1100\"\n    // >>> BinaryToString(12L)\n    // \"1100\"\n    // >>> BinaryToString(12L)\n    // \"1100\"\n    // >>> BinaryToString(12L)\n    // \"1100\"\n    // >>> BinaryToString(12L)\n    // \"1100\"\n    // >>> BinaryToString(12L)\n    // \"1100\"\n    // >>> BinaryTo",
    "        long result = 0;\n        long power = 1;\n        while (x > 0) {\n            result += (x % numBase) * power;\n            x /= numBase;\n            power *= numBase;\n        }\n        return result.ToString();\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> Convert(\"22\")\n    // (22)\n    // >>> Convert(\"1000\")\n    // (8)\n    // >>> Convert(\"111\")\n    // (7)\n    public static long Convert(string s) {\n        long result = 0;\n        for (int i = 0; i < s.Length; i++) {\n            result += (s[i] - '0') * Math.Pow(10, s.Length - i - 1);\n        }\n        return result;\n    }\n\n    // Convert a number to a string representation in a given base.\n    // >>> Convert(22, 2)\n    // (\"100\")\n    // >>> Convert(22, 3)\n    // (\"22\")\n    // >>> Convert(22, 4)\n    // (\"22\")\n    // >>> Convert(22, 5)\n    // (\"22\")\n    // >>> Convert(22, 6)\n    // (\"22\")\n    // >>> Convert(22, 7)\n    // (\"22\")\n    // >>> Convert(22, 8)\n    // (\"22\")\n    // >>> Convert(22, 9)\n    // (\"22\")\n    // >>> Convert(22, 10)\n    // (\"22\")\n    // >>> Convert(22, 11)\n    // (\"22\")\n    // >>> Convert(22, 12)\n    // (\"22\")\n    public static string Convert(long x, long base) {\n        long result = 0;\n        while (x > 0) {\n            result += (x % base) * Math.Pow(base, base - 1);\n            x /= base;\n        }\n        return result.ToString();\n    }\n\n    // Convert a number to a string representation in a given base.\n    // >>> Convert(22, 2)\n    // (\"100\")\n    // >>> Convert(22, 3)",
    "        string result = \"\";\n        long temp = x;\n        while (temp != 0) {\n            long remainder = temp % numBase;\n            temp = temp / numBase;\n            result = remainder + result;\n        }\n        return result;\n    }\n\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>> ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n    // (\"111\")\n    public static long ChangeBase(long x, long base) {\n        long result = 0;\n        long temp = x;\n        while (temp != 0) {\n            long remainder = temp % base;\n            temp = temp / base;\n            result = result + remainder;\n        }\n        return result;\n    }\n\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>> ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n    // (\"111\")\n    public static long ChangeBase(long x, int base) {\n        long result = 0;\n        long temp = x;\n        while (temp != 0) {\n            long remainder = temp % base;\n            temp = temp / base;\n            result = result + remainder;\n        }\n        return result;\n    }\n\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>> ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n    // (\"111\")\n    public static long ChangeBase(long x, short base) {\n        long result = 0;\n        long temp = x;\n        while (temp != 0) {\n            long remainder = temp % base;\n            temp = temp / base;\n            result = result + remainder;\n        }\n        return result;\n    }\n\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>> ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L),",
    "        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base.\");\n        if (x < 0)\n            throw new Exception(\"Negative number.\");\n        if (x == 0)\n            return \"0\";\n        long n = x;\n        string result = \"\";\n        while (n > 0) {\n            int digit = (int)(n % numBase);\n            result = digit + result;\n            n /= numBase;\n        }\n        return result;",
    "        // Write your code here\n        if (x == 0) return \"0\";\n        if (numBase < 2 || numBase > 10) return \"\";\n        if (numBase == 10) return Long.ToString(x);\n        if (numBase == 2) return Long.ToBinaryString(x);\n        if (numBase == 3) return Long.ToOctalString(x);\n        if (numBase == 4) return Long.ToHexString(x);\n        return \"\";",
    "        if (x < 0)\n            throw new Exception(\"Negative number cannot be converted.\");\n        if (numBase < 2 || numBase > 36)\n            throw new Exception(\"Invalid base.\");\n        if (x == 0)\n            return \"0\";\n        long num = x;\n        string result = \"\";\n        while (num > 0) {\n            int digit = (int)(num % numBase);\n            result = digit + result;\n            num /= numBase;\n        }\n        return result;",
    "        if (x < 0) {\n            throw new Exception(\"Negative number cannot be converted.\");\n        }\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid number base.\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        long num = x;\n        long base = numBase;\n        long result = 0;\n        while (num > 0) {\n            result = result * base + num % base;\n            num = num / base;\n        }\n        return (new string(Long.toString(result)));",
    "        // Write your code here\n        long result = 0;\n        long power = 1;\n        while (numBase < 10) {\n            numBase *= 10;\n            power *= 10;\n        }\n        while (x > 0) {\n            result += (x % numBase) * power;\n            x /= numBase;\n            power /= numBase;\n        }\n        return result.ToString();",
    "        // Write your code here\n        if (x == 0) return \"0\";\n        if (numBase < 2) return \"\";\n        if (numBase > 36) return \"\";\n        if (x < 0) return \"\";\n        if (numBase == 2) return Long.toBinaryString(x);\n        if (numBase == 3) return Long.toOctalString(x);\n        if (numBase == 4) return Long.toHexString(x);\n        if (numBase == 5) return Long.toString(x);\n        if (numBase == 6) return Long.toString(x);\n        if (numBase == 7) return Long.toString(x);\n        if (numBase == 8) return Long.toString(x);\n        if (numBase == 9) return Long.toString(x);\n        if (numBase == 10) return Long.toString(x);\n        if (numBase == 11) return Long.toString(x);\n        if (numBase == 12) return Long.toString(x);\n        if (numBase == 13) return Long.toString(x);\n        if (numBase == 14) return Long.toString(x);\n        if (numBase == 15) return Long.toString(x);\n        if (numBase == 16) return Long.toString(x);\n        if (numBase == 17) return Long.toString(x);\n        if (numBase == 18) return Long.toString(x);\n        if (numBase == 19) return Long.toString(x);\n        if (numBase == 20) return Long.toString(x);\n        if (numBase == 21) return Long.toString(x);\n        if (numBase == 22) return Long.toString(x);\n        if (numBase == 23) return Long.toString(x);\n        if (numBase == 24) return Long.toString(x);\n        if (numBase == 25) return Long.toString(x);\n        if (numBase == 26) return Long.toString(x);\n        if (numBase == 27) return Long.toString(x);\n        if (numBase == 28) return Long",
    "        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base.\");\n        }\n        if (x < 0) {\n            throw new Exception(\"Negative number.\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        // Convert to string.\n        string s = Long.toString(x);\n        // Convert to base.\n        string s2 = \"\";\n        for (int i = s.Length() - 1; i >= 0; i--) {\n            s2 = s2 + s[i] + \"0\";\n        }\n        // Convert back to number.\n        long y = 0;\n        for (int i = s2.Length() - 1; i >= 0; i--) {\n            y = y * numBase + s2[i] - '0';\n        }\n        return y.ToString();",
    "        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        if (x < 0)\n            throw new Exception(\"Negative number\");\n        if (x == 0)\n            return \"0\";\n        if (numBase == 10)\n            return Long.ToString(x);\n        long result = 0;\n        while (x > 0) {\n            result = result * 10 + x % numBase;\n            x /= numBase;\n        }\n        return Long.ToString(result);",
    "        string result = \"\";\n        while (x > 0) {\n            result = (char)((int)x % numBase + '0') + result;\n            x /= numBase;\n        }\n        return result;",
    "        if (x < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base\");\n        }\n        if (numBase == 10) {\n            return Long.ToString(x);\n        }\n        long n = numBase;\n        long r = 0;\n        while (x > 0) {\n            r = x % n;\n            x = x / n;\n            n = n / numBase;\n        }\n        return Long.ToString(r);",
    "        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        if (x < 0)\n            throw new Exception(\"Negative number\");\n        if (x == 0)\n            return \"0\";\n        int digits = 0;\n        while (x > 0) {\n            x /= numBase;\n            digits++;\n        }\n        char[] digitsStr = new char[digits];\n        while (digits > 0) {\n            digitsStr[digits - 1] = (char)('0' + (x % numBase));\n            x /= numBase;\n            digits--;\n        }\n        return new string(digitsStr);",
    "        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result = result * 10 + x % 10;\n            x /= 10;\n        }\n        return result.ToString();",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();\n    }\n\n    // Convert a string representation of a number to a number.\n    // The string representation is in base 10.\n    // >>> Convert(\"22\")\n    // (22)\n    // >>> Convert(\"1000\")\n    // (8)\n    // >>> Convert(\"111\")\n    // (7)\n    public static long Convert(string s) {\n        long result = 0;\n        for (int i = 0; i < s.Length; i++) {\n            result = result * 10 + s[i] - '0';\n        }\n        return result;\n    }\n\n    // Convert a number to a string representation in base 10.\n    // >>> Convert(22)\n    // (\"22\")\n    // >>> Convert(8)\n    // (\"1000\")\n    // >>> Convert(7)\n    // (\"111\")\n    public static string Convert(long n) {\n        string result = \"\";\n        while (n > 0) {\n            result = (char)(n % 10 + '0') + result;\n            n = n / 10;\n        }\n        return result;\n    }\n\n    // Convert a number to a string representation in base numBase.\n    // >>> Convert(22, 3)\n    // (\"2\")\n    // >>> Convert(8, 2)\n    // (\"100\")\n    // >>> Convert(7, 2)\n    // (\"11\")\n    public static string Convert(long n, long numBase) {\n        string result = \"\";\n        while (n > 0) {\n            result = (char)(n % numBase + '0') + result;\n            n = n / numBase;\n        }\n        return result;\n    }\n\n    // Return the number of 1-bits in the binary representation of a number.\n    // >>> CountBits(22)\n    // (1)\n    // >>> CountBits(8)\n    // (3)\n    // >>> CountBits(7)\n    // (2)\n    public static int CountBits(long n) {",
    "        string result = \"\";\n        long n = x;\n        while (n > 0) {\n            int digit = (int)(n % numBase);\n            result = digit + result;\n            n = n / numBase;\n        }\n        return result;",
    "        // Write your code here\n        if (numBase < 2)\n            throw new Exception(\"Invalid base\");\n        if (x < 0)\n            throw new Exception(\"Negative number\");\n        if (x == 0)\n            return \"0\";\n        if (numBase == 2)\n            return (x % 2 == 0) ? \"0\" : \"1\";\n        if (numBase == 10)\n            return Long.ToString(x);\n        if (numBase == 16)\n            return Long.ToString(x, 16);\n        if (numBase == 8)\n            return Long.ToString(x, 2);\n        if (numBase == 3)\n            return Long.ToString(x, 2);\n        return \"\";",
    "        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result = result * 10 + x % 10;\n            x = x / 10;\n        }\n        return result.ToString();",
    "        // Write your code here\n        if (x < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        long[] digits = new long[1];\n        digits[0] = x;\n        int i = 0;\n        while (digits[i] != 0) {\n            digits[i] = digits[i] % numBase;\n            i++;\n        }\n        StringBuilder sb = new StringBuilder();\n        while (i > 0) {\n            sb.Append(digits[i - 1]);\n            i--;\n        }\n        return sb.ToString();",
    "        string result = \"\";\n        long n = x;\n        while (n > 0) {\n            int digit = (int)(n % numBase);\n            result = digit + result;\n            n /= numBase;\n        }\n        return result;",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        string result = \"\";\n        while (x > 0) {\n            int digit = (int)(x % numBase);\n            result = digit.ToString() + result;\n            x /= numBase;\n        }\n        return result;",
    "        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        string result = \"\";\n        while (x > 0) {\n            int digit = (int) (x % numBase);\n            result = digit.ToString() + result;\n            x /= numBase;\n        }\n        return result;",
    "        // Write your code here\n        if (x == 0)\n            return \"0\";\n        if (numBase < 2 || numBase > 36)\n            throw new Exception(\"Invalid base\");\n        string result = \"\";\n        while (x > 0) {\n            int digit = (int) (x % numBase);\n            result = digit + result;\n            x = x / numBase;\n        }\n        return result;",
    "        // Write your code here\n        if (x < 0) {\n            return \"\";\n        }\n        if (numBase < 2 || numBase > 10) {\n            return \"\";\n        }\n        if (numBase == 2) {\n            return \"1\" + ChangeBase(x, 10);\n        }\n        if (numBase == 10) {\n            return Long.ToString(x);\n        }\n        if (numBase == 3) {\n            return \"11\" + ChangeBase(x, 2);\n        }\n        if (numBase == 4) {\n            return \"100\" + ChangeBase(x, 2);\n        }\n        if (numBase == 5) {\n            return \"101\" + ChangeBase(x, 2);\n        }\n        if (numBase == 6) {\n            return \"110\" + ChangeBase(x, 2);\n        }\n        if (numBase == 7) {\n            return \"111\" + ChangeBase(x, 2);\n        }\n        if (numBase == 8) {\n            return \"1000\" + ChangeBase(x, 2);\n        }\n        if (numBase == 9) {\n            return \"1001\" + ChangeBase(x, 2);\n        }\n        return \"\";",
    "        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result = result * 10 + x % 10;\n            x /= 10;\n        }\n        return result.ToString();",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base\");\n        }\n        string result = \"\";\n        while (x > 0) {\n            int digit = (int)(x % numBase);\n            result = digit + result;\n            x = x / numBase;\n        }\n        return result;",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x /= numBase;\n        }\n        return result.ToString();",
    "        string result = \"\";\n        long remainder = x;\n        while (remainder != 0) {\n            int digit = (int)(remainder % numBase);\n            remainder = remainder / numBase;\n            result = digit.ToString() + result;\n        }\n        return result;",
    "        // Write your code here\n        if (numBase < 2) {\n            throw new Exception(\"Invalid base\");\n        }\n        if (x < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        long[] digits = new long[1];\n        digits[0] = x;\n        long[] result = new long[1];\n        int i = 0;\n        while (i < 1) {\n            result[i] = digits[i] * numBase;\n            i++;\n        }\n        string resultStr = \"\";\n        for (int j = 0; j < 1; j++) {\n            resultStr += result[j];\n        }\n        return resultStr;",
    "        if (x < 0) {\n            throw new Exception(\"Negative number is not supported.\");\n        }\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Base should be 2 to 10.\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        long[] digits = new long[1];\n        digits[0] = x;\n        int[] base = new int[1];\n        base[0] = (int) numBase;\n        return ConvertToBase(digits, base);\n    }\n\n    // Convert number x from base numBase to base 10.\n    // return string representation after the conversion.\n    // numBase should be 2 to 10.\n    // >>> ConvertToBase((8L), (3L))\n    // (\"22\")\n    // >>> ConvertToBase((8L), (2L))\n    // (\"1000\")\n    // >>> ConvertToBase((7L), (2L))\n    // (\"111\")\n    public static string ConvertToBase(long x, long numBase) {\n        if (x < 0) {\n            throw new Exception(\"Negative number is not supported.\");\n        }\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Base should be 2 to 10.\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        long[] digits = new long[1];\n        digits[0] = x;\n        int[] base = new int[1];\n        base[0] = (int) numBase;\n        return ConvertToBase(digits, base);\n    }\n\n    // Convert number x from base numBase to base 10.\n    // return string representation after the conversion.\n    // numBase should be 2 to 10.\n    // >>> ConvertToBase((8L), (3L))\n    // (\"22\")\n    // >>> ConvertToBase((8L), (2L))\n    // (\"1000\")\n    // >>> ConvertToBase((7L), (2L))\n    // (\"111\")\n    public static string ConvertToBase(long[] x, int[] numBase) {\n        if (x == null) {",
    "        // Write your code here\n        long result = 0;\n        long base = numBase;\n        while (x > 0) {\n            result = result * base + x % base;\n            x = x / base;\n        }\n        return result.ToString();",
    "        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base\");\n        }\n        if (x < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        long num = x;\n        long base = numBase;\n        string result = \"\";\n        while (num > 0) {\n            long remainder = num % base;\n            num = num / base;\n            result = remainder + result;\n        }\n        return result;",
    "        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        string result = \"\";\n        while (x > 0) {\n            int digit = (int)(x % numBase);\n            x /= numBase;\n            result = digit.ToString() + result;\n        }\n        return result;",
    "        long result = 0;\n        long base = numBase;\n        while (x > 0) {\n            result = result * base + x % base;\n            x = x / base;\n        }\n        if (result < 0) {\n            result = result * -1;\n        }\n        return result.ToString();",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x /= numBase;\n        }\n        return result.ToString();",
    "        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result = result * 10 + x % 10;\n            x = x / 10;\n        }\n        return result.ToString();",
    "        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        if (x < 0)\n            throw new Exception(\"Negative number\");\n        if (x == 0)\n            return \"0\";\n        int base = (int)numBase;\n        int digits = 0;\n        while (x > 0) {\n            x /= base;\n            digits++;\n        }\n        char[] result = new char[digits];\n        while (digits > 0) {\n            int digit = (int)(x % base);\n            result[--digits] = (char)(digit + '0');\n            x /= base;\n        }\n        return new string(result);",
    "        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        if (x < 0)\n            throw new Exception(\"Negative number\");\n        if (x == 0)\n            return \"0\";\n        string result = \"\";\n        while (x > 0) {\n            int digit = (int)(x % numBase);\n            result = digit + result;\n            x /= numBase;\n        }\n        return result;",
    "        // Write your code here\n        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x /= numBase;\n        }\n        return result.ToString();",
    "        // Write your code here\n        if (x < 0) {\n            return \"\";\n        }\n        if (numBase < 2 || numBase > 10) {\n            return \"\";\n        }\n        long[] digits = new long[numBase];\n        int i = 0;\n        while (x != 0) {\n            digits[i] = x % numBase;\n            x /= numBase;\n            i++;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int j = i - 1; j >= 0; j--) {\n            sb.Append(digits[j]);\n        }\n        return sb.ToString();",
    "        // Write your code here\n        if (x == 0)\n            return \"0\";\n        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        if (numBase == 2)\n            return BinaryToString(x);\n        if (numBase == 10)\n            return Long.ToString(x);\n        if (numBase == 16)\n            return HexToString(x);\n        if (numBase == 8)\n            return OctToString(x);\n        return \"\";\n    }\n\n    // Convert binary number to string.\n    // >>> BinaryToString(1101)\n    // (\"10011\")\n    public static string BinaryToString(long x) {\n        // Write your code here\n        if (x == 0)\n            return \"0\";\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x % 2);\n            x = x / 2;\n        }\n        return sb.ToString();\n    }\n\n    // Convert hexadecimal number to string.\n    // >>> HexToString(1101)\n    // (\"10011\")\n    public static string HexToString(long x) {\n        // Write your code here\n        if (x == 0)\n            return \"0\";\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(Convert.ToString((char) (x % 16), 16));\n            x = x / 16;\n        }\n        return sb.ToString();\n    }\n\n    // Convert octal number to string.\n    // >>> OctToString(1101)\n    // (\"10011\")\n    public static string OctToString(long x) {\n        // Write your code here\n        if (x == 0)\n            return \"0\";\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(Convert.ToString((char) (x % 8), 8));\n            x = x / 8;\n        }\n        return sb.ToString();\n    }\n\n    // Convert number to string.\n    // >>> Long.ToString(",
    "        // Write your code here\n        if (x == 0)\n            return \"0\";\n        if (numBase < 2 || numBase > 36)\n            throw new Exception(\"Invalid base\");\n        if (x < 0)\n            throw new Exception(\"Negative number\");\n        if (x == 1)\n            return \"1\";\n        if (x == 2)\n            return \"2\";\n        if (x == 3)\n            return \"3\";\n        if (x == 4)\n            return \"4\";\n        if (x == 5)\n            return \"5\";\n        if (x == 6)\n            return \"6\";\n        if (x == 7)\n            return \"7\";\n        if (x == 8)\n            return \"8\";\n        if (x == 9)\n            return \"9\";\n        if (x == 10)\n            return \"10\";\n        if (x == 11)\n            return \"11\";\n        if (x == 12)\n            return \"12\";\n        if (x == 13)\n            return \"13\";\n        if (x == 14)\n            return \"14\";\n        if (x == 15)\n            return \"15\";\n        if (x == 16)\n            return \"16\";\n        if (x == 17)\n            return \"17\";\n        if (x == 18)\n            return \"18\";\n        if (x == 19)\n            return \"19\";\n        if (x == 20)\n            return \"20\";\n        if (x == 21)\n            return \"21\";\n        if (x == 22)\n            return \"22\";\n        if (x == 23)\n            return \"23\";\n        if (x == 24)\n            return \"24\";\n        if (x == 25)\n            return \"25\";\n        if (x == 26)\n            return \"26\";\n        if (x == 27)\n            return \"27\";\n        if (x == 28)\n            return \"28\";\n        if (x == 29)\n            return \"29\";\n        if (x == 30)\n            return \"30\";\n        if (x == 31)\n            return \"31\";\n        if (x == 32)\n            return \"32\";\n        if",
    "        // Write your code here\n        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result = result * 10 + x % 10;\n            x /= 10;\n        }\n        return result.ToString();",
    "        long result = 0;\n        long power = 1;\n        while (numBase < 10) {\n            numBase *= 10;\n            power *= 10;\n        }\n        while (x > 0) {\n            result += (x % numBase) * power;\n            x /= numBase;\n            power /= numBase;\n        }\n        if (result == 0) {\n            return \"0\";\n        }\n        StringBuilder sb = new StringBuilder();\n        while (result > 0) {\n            sb.Insert(0, result % 10);\n            result /= 10;\n        }\n        return sb.ToString();\n    }\n\n    // Convert string to integer.\n    // Return null if the string is invalid.\n    // >>> Convert(\"123\")\n    // 123\n    // >>> Convert(\"12.3\")\n    // 12\n    // >>> Convert(\"abc\")\n    // null\n    public static int Convert(string s) {\n        if (s.Length == 0) {\n            return 0;\n        }\n        int result = 0;\n        int index = 0;\n        while (index < s.Length && s[index] >= '0' && s[index] <= '9') {\n            result = result * 10 + (s[index] - '0');\n            index++;\n        }\n        if (index == s.Length) {\n            return result;\n        }\n        return 0;\n    }\n\n    // Convert string to long.\n    // Return null if the string is invalid.\n    // >>> Convert(\"123\")\n    // 123\n    // >>> Convert(\"12.3\")\n    // 12\n    // >>> Convert(\"abc\")\n    // null\n    public static long ConvertToLong(string s) {\n        if (s.Length == 0) {\n            return 0;\n        }\n        int result = 0;\n        int index = 0;\n        while (index < s.Length && s[index] >= '0' && s[index] <= '9') {\n            result = result * 10 + (s[index] - '0');\n            index++;\n        }\n        if (index == s.Length) {\n            return result;\n        }\n        return 0",
    "        // Write your code here\n        long n = x;\n        string result = \"\";\n        while (n != 0) {\n            int digit = (int) (n % numBase);\n            result = digit + result;\n            n = n / numBase;\n        }\n        return result;",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        string result = \"\";\n        long n = x;\n        while (n > 0) {\n            long digit = n % numBase;\n            n /= numBase;\n            result = digit.ToString() + result;\n        }\n        return result;",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x /= numBase;\n        }\n        return result.ToString();",
    "        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base\");\n        }\n        if (x < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        long num = x;\n        long base = numBase;\n        string result = \"\";\n        while (num > 0) {\n            long remainder = num % base;\n            num = num / base;\n            result = remainder + result;\n        }\n        return result;",
    "        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base\");\n        }\n        if (x < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        // Convert to string\n        string s = Long.toString(x);\n        // Convert to base\n        string result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            int digit = s[i] - '0';\n            result += (char)(digit + numBase - 1);\n        }\n        return result;",
    "        // Write your code here\n        if (x == 0) return \"0\";\n        if (numBase < 2 || numBase > 36) return \"\";\n        if (numBase == 2) return Long.toBinaryString(x);\n        if (numBase == 10) return Long.toString(x);\n        if (numBase == 16) return Long.toHexString(x);\n        if (numBase == 8) return Long.toOctalString(x);\n        if (numBase == 3) return Long.toString(x, 3);\n        if (numBase == 5) return Long.toString(x, 5);\n        if (numBase == 6) return Long.toString(x, 6);\n        if (numBase == 7) return Long.toString(x, 7);\n        if (numBase == 9) return Long.toString(x, 9);\n        return \"\";",
    "        long result = 0;\n        for (int i = 0; i < numBase; i++) {\n            result = result * 10 + x % 10;\n            x /= 10;\n        }\n        return result.ToString();\n    }\n\n    // Return the number of digits in the number.\n    // >>> NumDigits(123)\n    // (3)\n    // >>> NumDigits(12345)\n    // (5)\n    // >>> NumDigits(123456789)\n    // (9)\n    public static int NumDigits(long x) {\n        int result = 0;\n        while (x > 0) {\n            result++;\n            x /= 10;\n        }\n        return result;\n    }\n\n    // Return the number of digits in the number.\n    // >>> NumDigits(123.45)\n    // (4)\n    // >>> NumDigits(12345.6789)\n    // (8)\n    public static int NumDigits(double x) {\n        int result = 0;\n        while (x > 0) {\n            result++;\n            x /= 10;\n        }\n        return result;\n    }\n\n    // Return the number of digits in the number.\n    // >>> NumDigits(123.45)\n    // (4)\n    // >>> NumDigits(12345.6789)\n    // (8)\n    public static int NumDigits(float x) {\n        int result = 0;\n        while (x > 0) {\n            result++;\n            x /= 10;\n        }\n        return result;\n    }\n\n    // Return the number of digits in the number.\n    // >>> NumDigits(123.45)\n    // (4)\n    // >>> NumDigits(12345.6789)\n    // (8)\n    public static int NumDigits(short x) {\n        int result = 0;\n        while (x > 0) {\n            result++;\n            x /= 10;\n        }\n        return result;\n    }\n\n    // Return the number of digits in the number.\n    // >>> NumDigits(123.45)\n    // (4)\n    // >>> NumDigits(",
    "        if (x < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid number base\");\n        }\n        if (numBase == 10) {\n            return Long.ToString(x);\n        }\n        int digits = 0;\n        while (x > 0) {\n            x /= numBase;\n            digits++;\n        }\n        StringBuilder sb = new StringBuilder();\n        while (digits-- > 0) {\n            sb.Append(x % numBase);\n            x /= numBase;\n        }\n        return sb.ToString();",
    "        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        if (x < 0)\n            throw new Exception(\"Negative number\");\n        if (x == 0)\n            return \"0\";\n        int digits = 0;\n        while (x > 0) {\n            x /= numBase;\n            digits++;\n        }\n        char[] result = new char[digits];\n        while (digits > 0) {\n            int digit = (int) (x % numBase);\n            result[digits - 1] = (char) (digit < 10 ? digit + '0' : digit + 'A' - 10);\n            x /= numBase;\n            digits--;\n        }\n        return new string(result);",
    "        if (x < 0) {\n            throw new Exception(\"Negative number cannot be converted.\");\n        }\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base.\");\n        }\n        string result = \"\";\n        while (x > 0) {\n            int digit = (int)(x % numBase);\n            result = digit + result;\n            x /= numBase;\n        }\n        return result;",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        if (x < 0) {\n            throw new Exception(\"Negative number is not supported.\");\n        }\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid number base.\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        long[] digits = new long[1];\n        while (x > 0) {\n            digits[0] = x % numBase;\n            x /= numBase;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = digits.Length - 1; i >= 0; i--) {\n            sb.Append(digits[i]);\n        }\n        return sb.ToString();",
    "        if (x < 0)\n            throw new Exception(\"Negative number\");\n        if (numBase < 2 || numBase > 36)\n            throw new Exception(\"Invalid base\");\n        if (numBase == 2)\n            return BinaryToString(x);\n        if (numBase == 10)\n            return Long.ToString(x);\n        if (numBase == 16)\n            return HexToString(x);\n        if (numBase == 8)\n            return OctToString(x);\n        if (numBase == 3)\n            return TriToString(x);\n        return \"\";\n    }\n\n    // Convert binary number to string.\n    // >>> BinaryToString(11)\n    // (\"11\")\n    // >>> BinaryToString(11L)\n    // (\"11\")\n    // >>> BinaryToString(11L)\n    // (\"11\")\n    // >>> BinaryToString(11)\n    // (\"11\")\n    // >>> BinaryToString(11L)\n    // (\"11\")\n    // >>> BinaryToString(11L)\n    // (\"11\")\n    // >>> BinaryToString(11)\n    // (\"11\")\n    public static string BinaryToString(long x) {\n        if (x < 0)\n            throw new Exception(\"Negative number\");\n        if (x == 0)\n            return \"0\";\n        if (x == 1)\n            return \"1\";\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x % 2);\n            x /= 2;\n        }\n        return sb.ToString();\n    }\n\n    // Convert octal number to string.\n    // >>> OctToString(11)\n    // (\"17\")\n    // >>> OctToString(11L)\n    // (\"17\")\n    // >>> OctToString(11L)\n    // (\"17\")\n    // >>> OctToString(11)\n    // (\"17\")\n    // >>> OctToString(11L)\n    // (\"17\")\n    // >>> OctToString(11L)\n    // (\"17\")\n    // >>> OctToString(11)\n    // (\"17\")\n    public static string OctToString(long",
    "        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        string result = \"\";\n        while (x > 0) {\n            int digit = (int)(x % numBase);\n            result = (char)(digit + 48) + result;\n            x /= numBase;\n        }\n        return result;",
    "        // Write your code here\n        if (x == 0) return \"0\";\n        if (numBase < 2 || numBase > 36) return \"\";\n        if (x < 0) return \"\";\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            sb.Insert(0, (char)((int)x % numBase + '0'));\n            x = x / numBase;\n        }\n        return sb.ToString();",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x /= numBase;\n        }\n        if (result < 0) {\n            result = -result;\n        }\n        return result.ToString();\n    }\n\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>> ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n    // (\"111\")\n    public static long ChangeBase(long x, int numBase) {\n        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x /= numBase;\n        }\n        if (result < 0) {\n            result = -result;\n        }\n        return result;\n    }\n\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>> ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n    // (\"111\")\n    public static long ChangeBase(long x, int numBase, int base) {\n        long result = 0;\n        while (x > 0) {\n            result = result * base + x % numBase;\n            x /= numBase;\n        }\n        if (result < 0) {\n            result = -result;\n        }\n        return result;\n    }\n\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>> ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n    // (\"111\")\n    public static long ChangeBase(long x, int numBase, int base, int base2) {\n        long result = 0;\n        while (x > 0) {\n            result = result * base + x % numBase;\n            x /= numBase;\n        }\n        if (result < 0) {\n            result = -result;\n        }\n        return result;\n    }\n\n    ",
    "        string result = \"\";\n        while (x > 0) {\n            result = (char)((int)x % numBase + '0') + result;\n            x /= numBase;\n        }\n        return result;",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        // Write your code here\n        long result = 0;\n        long base = numBase;\n        while (x > 0) {\n            result = result + (x % base);\n            x = x / base;\n        }\n        return result.ToString();",
    "        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        if (x < 0)\n            throw new Exception(\"Negative number\");\n        if (x == 0)\n            return \"0\";\n        // convert to string\n        string s = Long.toString(x);\n        // convert to base\n        string result = \"\";\n        for (int i = s.Length() - 1; i >= 0; i--) {\n            int digit = (int)s[i] - 48;\n            result = digit + result;\n        }\n        // convert to number\n        long y = 0;\n        for (int i = result.Length() - 1; i >= 0; i--) {\n            int digit = (int)result[i] - 48;\n            y = y * numBase + digit;\n        }\n        return y.ToString();",
    "        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base\");\n        string result = \"\";\n        while (x > 0) {\n            int digit = (int)(x % numBase);\n            result = digit.ToString() + result;\n            x /= numBase;\n        }\n        return result;",
    "        if (numBase < 2 || numBase > 10)\n            throw new Exception(\"Invalid base.\");\n        if (x < 0)\n            throw new Exception(\"Negative number.\");\n        if (x == 0)\n            return \"0\";\n        long num = x;\n        string result = \"\";\n        while (num > 0) {\n            long digit = num % numBase;\n            if (digit < 0 || digit > 9)\n                throw new Exception(\"Invalid digit.\");\n            result = digit.ToString() + result;\n            num /= numBase;\n        }\n        return result;",
    "        if (x < 0) {\n            throw new Exception(\"Negative number cannot be converted.\");\n        }\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base.\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        long result = 0;\n        while (x > 0) {\n            result = result * numBase + x % numBase;\n            x = x / numBase;\n        }\n        return result.ToString();",
    "        // Write your code here\n        if (x < 0) {\n            throw new Exception(\"Negative number\");\n        }\n        if (numBase < 2 || numBase > 10) {\n            throw new Exception(\"Invalid base\");\n        }\n        if (x == 0) {\n            return \"0\";\n        }\n        if (numBase == 2) {\n            return \"1\" + ChangeBase(x / 2, numBase);\n        }\n        if (numBase == 10) {\n            return \"\" + x;\n        }\n        if (numBase == 3) {\n            return \"11\" + ChangeBase(x / 3, numBase);\n        }\n        if (numBase == 4) {\n            return \"111\" + ChangeBase(x / 4, numBase);\n        }\n        if (numBase == 5) {\n            return \"1111\" + ChangeBase(x / 5, numBase);\n        }\n        if (numBase == 6) {\n            return \"11111\" + ChangeBase(x / 6, numBase);\n        }\n        if (numBase == 7) {\n            return \"111111\" + ChangeBase(x / 7, numBase);\n        }\n        if (numBase == 8) {\n            return \"1111111\" + ChangeBase(x / 8, numBase);\n        }\n        if (numBase == 9) {\n            return \"11111111\" + ChangeBase(x / 9, numBase);\n        }\n        return \"\";"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}