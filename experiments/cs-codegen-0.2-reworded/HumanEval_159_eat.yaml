name: HumanEval_159_eat
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
  \ number of carrots,\n    // but now you need to eat more carrots to complete the\
  \ day's meals.\n    // you should return a list of [ total number of eaten carrots\
  \ after your meals,\n    // the number of carrots left after your meals ]\n    //\
  \ if there are not enough remaining carrots, you will eat all remaining carrots,\
  \ but will still be hungry.\n    // Example:\n    // >>> Eat((5L), (6L), (10L))\n\
  \    // (new List<long>(new long[]{(long)11L, (long)4L}))\n    // >>> Eat((4L),\
  \ (8L), (9L))\n    // (new List<long>(new long[]{(long)12L, (long)1L}))\n    //\
  \ >>> Eat((1L), (10L), (10L))\n    // (new List<long>(new long[]{(long)11L, (long)0L}))\n\
  \    // >>> Eat((2L), (11L), (5L))\n    // (new List<long>(new long[]{(long)7L,\
  \ (long)0L}))\n    // Variables:\n    // @number : integer\n    // the number of\
  \ carrots that you have eaten.\n    // @need : integer\n    // the number of carrots\
  \ that you need to eat.\n    // @remaining : integer\n    // the number of remaining\
  \ carrots thet exist in stock\n    // Constrain:\n    // * 0 <= number <= 1000\n\
  \    // * 0 <= need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have fun :)\n\
  \    public static List<long> Eat(long number, long need, long remaining) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Eat((5L),\
  \ (6L), (10L)).Equals((new List<long>(new long[]{(long)11L, (long)4L}))));\n   \
  \ Debug.Assert(Eat((4L), (8L), (9L)).Equals((new List<long>(new long[]{(long)12L,\
  \ (long)1L}))));\n    Debug.Assert(Eat((1L), (10L), (10L)).Equals((new List<long>(new\
  \ long[]{(long)11L, (long)0L}))));\n    Debug.Assert(Eat((2L), (11L), (5L)).Equals((new\
  \ List<long>(new long[]{(long)7L, (long)0L}))));\n    Debug.Assert(Eat((4L), (5L),\
  \ (7L)).Equals((new List<long>(new long[]{(long)9L, (long)2L}))));\n    Debug.Assert(Eat((4L),\
  \ (5L), (1L)).Equals((new List<long>(new long[]{(long)5L, (long)0L}))));\n    }\n\
  \n}\n"
completions: ["        List<long> result = new List<long>();\n        if (number >=\
    \ need) {\n            result.Add(number - need);\n            result.Add(remaining\
    \ - need);\n        }\n        else {\n            result.Add(number);\n     \
    \       result.Add(remaining);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n        }\n        else {\n  \
    \          result.Add(number);\n            result.Add(remaining - number);\n\
    \        }\n        return result;", "        List<long> list = new List<long>();\n\
    \        if (number >= need) {\n            list.Add(number - need);\n       \
    \     list.Add(remaining);\n        }\n        else {\n            list.Add(number);\n\
    \            list.Add(remaining - number);\n        }\n        return list;",
  "        List<long> result = new List<long>(new long[]{number, remaining});\n  \
    \      if (number >= need) {\n            result.Add(need);\n            result.Add(remaining\
    \ - need);\n            return result;\n        }\n        if (remaining < need)\
    \ {\n            result.Add(need);\n            result.Add(0);\n            return\
    \ result;\n        }\n        if (number < need) {\n            result.Add(number);\n\
    \            result.Add(need - number);\n            return result;\n        }\n\
    \        result.Add(number);\n        result.Add(need);\n        result.Add(0);\n\
    \        return result;", "        // Write your code here\n        if (number\
    \ == 0 && need == 0 && remaining == 0) {\n            return new List<long>(new\
    \ long[]{0, 0});\n        }\n        if (number == 0 && need == 0 && remaining\
    \ > 0) {\n            return new List<long>(new long[]{0, remaining});\n     \
    \   }\n        if (number == 0 && need > 0 && remaining == 0) {\n            return\
    \ new List<long>(new long[]{need, 0});\n        }\n        if (number == 0 &&\
    \ need > 0 && remaining > 0) {\n            return new List<long>(new long[]{need,\
    \ remaining - need});\n        }\n        if (number > 0 && need == 0 && remaining\
    \ == 0) {\n            return new List<long>(new long[]{number, 0});\n       \
    \ }\n        if (number > 0 && need == 0 && remaining > 0) {\n            return\
    \ new List<long>(new long[]{number, remaining});\n        }\n        if (number\
    \ > 0 && need > 0 && remaining == 0) {\n            return new List<long>(new\
    \ long[]{number - need, 0});\n        }\n        if (number > 0 && need > 0 &&\
    \ remaining > 0) {\n            return new List<long>(new long[]{number - need,\
    \ remaining - need});\n        }\n        return new List<long>(new long[]{0,\
    \ 0});", "        List<long> res = new List<long>();\n        long eaten = 0;\n\
    \        long eatenNeed = 0;\n        long eatenRemaining = 0;\n        if (number\
    \ >= need) {\n            res.Add(number - need);\n            res.Add(remaining);\n\
    \            return res;\n        }\n        if (number < need) {\n          \
    \  res.Add(number);\n            res.Add(need - number);\n            return res;\n\
    \        }\n        while (need > 0) {\n            if (need > remaining) {\n\
    \                res.Add(number + eatenNeed);\n                res.Add(remaining\
    \ - eatenRemaining);\n                return res;\n            }\n           \
    \ if (need > number) {\n                res.Add(number);\n                res.Add(need\
    \ - number);\n                return res;\n            }\n            if (need\
    \ < number) {\n                res.Add(number);\n                res.Add(need);\n\
    \                return res;\n            }\n            if (need == number) {\n\
    \                res.Add(number);\n                res.Add(need);\n          \
    \      return res;\n            }\n            if (need == 0) {\n            \
    \    res.Add(number);\n                res.Add(need);\n                return\
    \ res;\n            }\n            if (need == remaining) {\n                res.Add(number\
    \ + eatenNeed);\n                res.Add(remaining - eatenRemaining);\n      \
    \          return res;\n            }\n            if (need == number + remaining)\
    \ {\n                res.Add(number + eatenNeed);\n                res.Add(remaining\
    \ - eatenRemaining);\n                return res;\n            }\n           \
    \ if (need == number - remaining) {\n                res.Add(number + eatenNeed);\n\
    \                res.Add(remaining - eatenRemaining);\n                return\
    \ res;\n            }\n            if (need == number + remaining - remaining)\
    \ {\n                res.Add(number + eatenNeed);\n                res.Add(remaining\
    \ - eatenRemaining);\n                return res;\n            }\n           \
    \ if (need == number - remaining + remaining) {\n                res.Add(number\
    \ + eatenNeed);\n                res.Add(remaining - eatenRemaining);\n      \
    \          return res;\n            }\n            if", "        List<long> result\
    \ = new List<long>(new long[]{number, remaining});\n        if (need <= remaining)\
    \ {\n            result.Add(need);\n            result.Add(remaining - need);\n\
    \        }\n        else {\n            result.Add(remaining);\n            result.Add(0);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (remaining < need) {\n            result.Add(remaining);\n       \
    \     result.Add(0);\n            return result;\n        }\n        else {\n\
    \            result.Add(number + need);\n            result.Add(remaining - need);\n\
    \            return result;\n        }", "        if (number < 0 || need < 0 ||\
    \ remaining < 0)\n            throw new Exception(\"Invalid input\");\n      \
    \  if (number > 1000 || need > 1000 || remaining > 1000)\n            throw new\
    \ Exception(\"Invalid input\");\n        List<long> result = new List<long>();\n\
    \        long eaten = 0;\n        long eatenNeed = 0;\n        while (need > 0)\
    \ {\n            if (need > remaining) {\n                eaten = remaining;\n\
    \                eatenNeed = need - remaining;\n                result.Add(eaten);\n\
    \                result.Add(eatenNeed);\n                break;\n            }\n\
    \            else {\n                eaten = need;\n                eatenNeed\
    \ = 0;\n                result.Add(eaten);\n                result.Add(eatenNeed);\n\
    \                remaining -= eaten;\n                need -= eaten;\n       \
    \     }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (number < need) {\n            result.Add(number);\n\
    \            result.Add(remaining);\n            return result;\n        }\n \
    \       else if (number == need) {\n            result.Add(number);\n        \
    \    result.Add(remaining - need);\n            return result;\n        }\n  \
    \      else {\n            result.Add(number - need);\n            result.Add(remaining);\n\
    \            return result;\n        }", "        List<long> result = new List<long>();\n\
    \        if (number >= need) {\n            result.Add(number - need);\n     \
    \       result.Add(remaining);\n        }\n        else {\n            result.Add(number);\n\
    \            result.Add(remaining - number);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (number < need) {\n \
    \           result.Add(number);\n            result.Add(remaining);\n        }\n\
    \        else {\n            result.Add(need);\n            result.Add(remaining\
    \ - need);\n        }\n        return result;", "        if (number < 0 || need\
    \ < 0 || remaining < 0) {\n            throw new Exception(\"Invalid arguments\"\
    );\n        }\n        if (need > remaining) {\n            return new List<long>(new\
    \ long[]{number, 0});\n        }\n        if (need == 0) {\n            return\
    \ new List<long>(new long[]{number, remaining});\n        }\n        if (need\
    \ == remaining) {\n            return new List<long>(new long[]{number, 0});\n\
    \        }\n        if (number == 0) {\n            return new List<long>(new\
    \ long[]{0, remaining - need});\n        }\n        if (number == remaining) {\n\
    \            return new List<long>(new long[]{number, 0});\n        }\n      \
    \  if (number == need) {\n            return new List<long>(new long[]{number,\
    \ remaining});\n        }\n        return new List<long>(new long[]{number, remaining\
    \ - need});", "        List<long> result = new List<long>();\n        long eaten\
    \ = 0;\n        long eatenNeed = 0;\n        long eatenRemaining = 0;\n      \
    \  if (number < need) {\n            eaten = number;\n            eatenNeed =\
    \ need - number;\n            eatenRemaining = remaining - eaten;\n        }\n\
    \        else {\n            eaten = need;\n            eatenRemaining = remaining\
    \ - eaten;\n        }\n        result.Add(eaten);\n        result.Add(eatenNeed);\n\
    \        result.Add(eatenRemaining);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (remaining < need) {\n            result.Add(remaining);\n\
    \            result.Add(0);\n        }\n        else {\n            result.Add(need);\n\
    \            result.Add(remaining - need);\n        }\n        return result;",
  "        List<long> result = new List<long>(new long[]{number, remaining});\n  \
    \      if (need <= remaining) {\n            result.Add(need);\n            result.Add(remaining\
    \ - need);\n        }\n        else {\n            result.Add(remaining);\n  \
    \          result.Add(0);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (need <= remaining) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        }\n        else\
    \ {\n            result.Add(number + remaining);\n            result.Add(0);\n\
    \        }\n        return result;", "        if (number < 0 || need < 0 || remaining\
    \ < 0)\n            throw new ArgumentOutOfRangeException(\"number\", \"need\"\
    , \"remaining\");\n        if (number > 1000 || need > 1000 || remaining > 1000)\n\
    \            throw new ArgumentOutOfRangeException(\"number\", \"need\", \"remaining\"\
    );\n        if (number == 0 && need == 0 && remaining == 0)\n            return\
    \ new List<long>(new long[]{0, 0});\n        if (number == 0 && need == 0 && remaining\
    \ > 0)\n            return new List<long>(new long[]{remaining, 0});\n       \
    \ if (number == 0 && need > 0 && remaining == 0)\n            return new List<long>(new\
    \ long[]{need, 0});\n        if (number == 0 && need > 0 && remaining > 0)\n \
    \           return new List<long>(new long[]{need, remaining - need});\n     \
    \   if (number > 0 && need == 0 && remaining == 0)\n            return new List<long>(new\
    \ long[]{number, 0});\n        if (number > 0 && need == 0 && remaining > 0)\n\
    \            return new List<long>(new long[]{number, remaining});\n        if\
    \ (number > 0 && need > 0 && remaining == 0)\n            return new List<long>(new\
    \ long[]{number, need});\n        if (number > 0 && need > 0 && remaining > 0)\n\
    \            return new List<long>(new long[]{number, need + remaining - need});\n\
    \        return new List<long>(new long[]{number, need});", "        List<long>\
    \ result = new List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n        }\n        else {\n  \
    \          result.Add(number);\n            result.Add(remaining - number);\n\
    \        }\n        return result;", "        List<long> result = new List<long>(new\
    \ long[]{number, remaining});\n        if (need > remaining) {\n            result.Add(need);\n\
    \            result.Add(0);\n            return result;\n        }\n        if\
    \ (need == remaining) {\n            result.Add(need);\n            result.Add(0);\n\
    \            return result;\n        }\n        if (need > 0) {\n            result.Add(need);\n\
    \            result.Add(remaining - need);\n            return result;\n     \
    \   }\n        if (need == 0) {\n            result.Add(need);\n            result.Add(remaining);\n\
    \            return result;\n        }\n        if (need < 0) {\n            result.Add(need);\n\
    \            result.Add(remaining);\n            return result;\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    if (number >= need) {\n            result.Add(number - need);\n         \
    \   result.Add(remaining);\n        }\n        else {\n            result.Add(number);\n\
    \            result.Add(remaining - number);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (number >= need) {\n\
    \            result.Add(number - need);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(number);\n            result.Add(remaining\
    \ - number);\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n        }\n        else {\n  \
    \          result.Add(number);\n            result.Add(remaining - number);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (number < need) {\n            result.Add(number);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(need);\n            result.Add(remaining\
    \ - need);\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (need > remaining) {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n            return result;\n    \
    \    }\n        else {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n            return result;\n        }", "        List<long> result\
    \ = new List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n        }\n        else {\n  \
    \          result.Add(number);\n            result.Add(remaining - number);\n\
    \        }\n        return result;", "        List<long> result = new List<long>(new\
    \ long[]{number, remaining});\n        if (number >= need) {\n            result.Add(need);\n\
    \            result.Add(remaining - need);\n            return result;\n     \
    \   }\n        if (number > 0) {\n            result.Add(number);\n          \
    \  result.Add(remaining - number);\n            return result;\n        }\n  \
    \      if (need > 0) {\n            result.Add(need);\n            result.Add(remaining\
    \ - need);\n            return result;\n        }\n        if (remaining > 0)\
    \ {\n            result.Add(remaining);\n            result.Add(0);\n        \
    \    return result;\n        }\n        result.Add(0);\n        result.Add(0);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (number >= need) {\n            result.Add(number - need);\n        \
    \    result.Add(remaining);\n        }\n        else {\n            result.Add(number);\n\
    \            result.Add(remaining - number);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (number < need) {\n \
    \           result.Add(need - number);\n            result.Add(remaining);\n \
    \       }\n        else {\n            result.Add(number);\n            result.Add(0);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (number < need) {\n            result.Add(need - number);\n      \
    \      result.Add(remaining);\n        }\n        else {\n            result.Add(number);\n\
    \            result.Add(0);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n        }\n        else {\n  \
    \          result.Add(number);\n            result.Add(remaining - number);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (number >= need) {\n            result.Add(number - need);\n     \
    \       result.Add(remaining);\n        }\n        else {\n            result.Add(need);\n\
    \            result.Add(remaining - number);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (number < need) {\n \
    \           result.Add(number);\n            result.Add(remaining);\n        }\n\
    \        else {\n            result.Add(need);\n            result.Add(remaining\
    \ - need);\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n            return result;\n \
    \       }\n        if (number == 0) {\n            result.Add(0);\n          \
    \  result.Add(remaining);\n            return result;\n        }\n        if (need\
    \ == 0) {\n            result.Add(0);\n            result.Add(remaining);\n  \
    \          return result;\n        }\n        if (remaining == 0) {\n        \
    \    result.Add(0);\n            result.Add(0);\n            return result;\n\
    \        }\n        if (number == 1) {\n            result.Add(1);\n         \
    \   result.Add(remaining - 1);\n            return result;\n        }\n      \
    \  if (number == 2) {\n            result.Add(2);\n            result.Add(remaining\
    \ - 2);\n            return result;\n        }\n        if (number == 3) {\n \
    \           result.Add(3);\n            result.Add(remaining - 3);\n         \
    \   return result;\n        }\n        if (number == 4) {\n            result.Add(4);\n\
    \            result.Add(remaining - 4);\n            return result;\n        }\n\
    \        if (number == 5) {\n            result.Add(5);\n            result.Add(remaining\
    \ - 5);\n            return result;\n        }\n        if (number == 6) {\n \
    \           result.Add(6);\n            result.Add(remaining - 6);\n         \
    \   return result;\n        }\n        if (number == 7) {\n            result.Add(7);\n\
    \            result.Add(remaining - 7);\n            return result;\n        }\n\
    \        if (number == 8) {\n            result.Add(8);\n            result.Add(remaining\
    \ - 8);\n            return result;\n        }\n        if (number == 9) {\n \
    \           result.Add(9);\n            result.Add(remaining - 9);\n         \
    \   return result;\n        }\n        if (number == 10) {\n            result.Add(10);\n\
    \            result.Add(remaining - 10);\n            return result;\n       \
    \ }\n", "        if (number < 0 || need < 0 || remaining < 0)\n            throw\
    \ new ArgumentOutOfRangeException(\"number\", \"need\", \"remaining\");\n    \
    \    if (number > 1000 || need > 1000 || remaining > 1000)\n            throw\
    \ new ArgumentOutOfRangeException(\"number\", \"need\", \"remaining\");\n    \
    \    List<long> result = new List<long>();\n        long eaten = 0;\n        while\
    \ (need > 0) {\n            if (need > remaining) {\n                eaten +=\
    \ remaining;\n                result.Add(eaten);\n                result.Add(need\
    \ - remaining);\n                break;\n            }\n            else {\n \
    \               eaten += need;\n                result.Add(eaten);\n         \
    \       result.Add(need);\n                remaining -= need;\n              \
    \  need = 0;\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (number < need) {\n            result.Add(number);\n\
    \            result.Add(remaining);\n            return result;\n        }\n \
    \       if (number == need) {\n            result.Add(number);\n            result.Add(remaining\
    \ - need);\n            return result;\n        }\n        if (number > need)\
    \ {\n            result.Add(number - need);\n            result.Add(remaining);\n\
    \            return result;\n        }\n        if (number == 0) {\n         \
    \   result.Add(0);\n            result.Add(remaining);\n            return result;\n\
    \        }\n        if (number == 1) {\n            result.Add(1);\n         \
    \   result.Add(remaining - 1);\n            return result;\n        }\n      \
    \  if (number == 2) {\n            result.Add(2);\n            result.Add(remaining\
    \ - 2);\n            return result;\n        }\n        if (number == 3) {\n \
    \           result.Add(3);\n            result.Add(remaining - 3);\n         \
    \   return result;\n        }\n        if (number == 4) {\n            result.Add(4);\n\
    \            result.Add(remaining - 4);\n            return result;\n        }\n\
    \        if (number == 5) {\n            result.Add(5);\n            result.Add(remaining\
    \ - 5);\n            return result;\n        }\n        if (number == 6) {\n \
    \           result.Add(6);\n            result.Add(remaining - 6);\n         \
    \   return result;\n        }\n        if (number == 7) {\n            result.Add(7);\n\
    \            result.Add(remaining - 7);\n            return result;\n        }\n\
    \        if (number == 8) {\n            result.Add(8);\n            result.Add(remaining\
    \ - 8);\n            return result;\n        }\n        if (number == 9) {\n \
    \           result.Add(9);\n            result.Add(remaining - 9);\n         \
    \   return result;\n        }\n        if (number == 10) {\n            result.Add(10);\n\
    \            result.Add(remaining - 10);\n            return result;\n        ",
  "        List<long> list = new List<long>();\n        if (number >= need) {\n  \
    \          list.Add(number - need);\n            list.Add(remaining);\n      \
    \  }\n        else {\n            list.Add(number);\n            list.Add(remaining\
    \ - number);\n        }\n        return list;", "        if (number < 0 || need\
    \ < 0 || remaining < 0)\n            throw new Exception(\"Invalid parameters\"\
    );\n        if (number == 0 && need == 0 && remaining == 0)\n            return\
    \ new List<long>(new long[]{0, 0});\n        if (number == 0 && need == 0 && remaining\
    \ > 0)\n            return new List<long>(new long[]{remaining, 0});\n       \
    \ if (number == 0 && need > 0 && remaining == 0)\n            return new List<long>(new\
    \ long[]{need, 0});\n        if (number == 0 && need > 0 && remaining > 0)\n \
    \           return new List<long>(new long[]{need, remaining - need});\n     \
    \   if (number > 0 && need == 0 && remaining == 0)\n            return new List<long>(new\
    \ long[]{number, 0});\n        if (number > 0 && need == 0 && remaining > 0)\n\
    \            return new List<long>(new long[]{number, remaining});\n        if\
    \ (number > 0 && need > 0 && remaining == 0)\n            return new List<long>(new\
    \ long[]{number, need});\n        if (number > 0 && need > 0 && remaining > 0)\n\
    \            return new List<long>(new long[]{number, need + remaining - number});\n\
    \        return new List<long>(new long[]{number, need});", "        List<long>\
    \ result = new List<long>(new long[]{number, remaining});\n        if (need >\
    \ remaining) {\n            result.Add(need);\n            result.Add(0);\n  \
    \          return result;\n        }\n        if (need == 0) {\n            result.Add(need);\n\
    \            result.Add(remaining);\n            return result;\n        }\n \
    \       if (need < remaining) {\n            result.Add(need);\n            result.Add(remaining\
    \ - need);\n            return result;\n        }\n        result.Add(need);\n\
    \        result.Add(0);\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (number < need) {\n            result.Add(need\
    \ - number);\n            result.Add(remaining);\n        }\n        else {\n\
    \            result.Add(number);\n            result.Add(0);\n        }\n    \
    \    return result;", "        List<long> result = new List<long>(new long[]{number,\
    \ remaining});\n        if (number >= need) {\n            result.Add(number -\
    \ need);\n            result.Add(remaining - need);\n        }\n        else {\n\
    \            result.Add(number);\n            result.Add(remaining);\n       \
    \ }\n        return result;", "        List<long> res = new List<long>();\n  \
    \      if (number >= need) {\n            res.Add(number - need);\n          \
    \  res.Add(remaining);\n        }\n        else {\n            res.Add(number);\n\
    \            res.Add(remaining - number);\n        }\n        return res;", " \
    \       List<long> res = new List<long>();\n        if (number >= need) {\n  \
    \          res.Add(number - need);\n            res.Add(remaining);\n        }\n\
    \        else {\n            res.Add(number);\n            res.Add(remaining -\
    \ number);\n        }\n        return res;", "        List<long> result = new\
    \ List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (number >= need) {\n            result.Add(number - need);\n     \
    \       result.Add(remaining);\n        }\n        else {\n            result.Add(number);\n\
    \            result.Add(remaining - number);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (number >= need) {\n\
    \            result.Add(number - need);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(number);\n            result.Add(remaining\
    \ - number);\n        }\n        return result;", "        List<long> res = new\
    \ List<long>();\n        if (number >= need) {\n            res.Add(number - need);\n\
    \            res.Add(remaining);\n        }\n        else {\n            res.Add(number);\n\
    \            res.Add(remaining - number);\n        }\n        return res;", " \
    \       List<long> result = new List<long>();\n        if (number >= need) {\n\
    \            result.Add(number - need);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(number);\n            result.Add(remaining\
    \ - number);\n        }\n        return result;", "        if (number < 0 || need\
    \ < 0 || remaining < 0)\n            throw new ArgumentOutOfRangeException(\"\
    number\", \"need\", \"remaining\");\n        if (number > 1000 || need > 1000\
    \ || remaining > 1000)\n            throw new ArgumentOutOfRangeException(\"number\"\
    , \"need\", \"remaining\");\n        if (number == 0 && need == 0 && remaining\
    \ == 0)\n            return new List<long>(new long[]{0, 0});\n        if (number\
    \ == 0 && need == 0 && remaining == 1)\n            return new List<long>(new\
    \ long[]{1, 0});\n        if (number == 0 && need == 1 && remaining == 1)\n  \
    \          return new List<long>(new long[]{2, 0});\n        if (number == 0 &&\
    \ need == 1 && remaining == 2)\n            return new List<long>(new long[]{3,\
    \ 0});\n        if (number == 0 && need == 2 && remaining == 2)\n            return\
    \ new List<long>(new long[]{4, 0});\n        if (number == 0 && need == 2 && remaining\
    \ == 3)\n            return new List<long>(new long[]{5, 0});\n        if (number\
    \ == 0 && need == 3 && remaining == 3)\n            return new List<long>(new\
    \ long[]{6, 0});\n        if (number == 0 && need == 3 && remaining == 4)\n  \
    \          return new List<long>(new long[]{7, 0});\n        if (number == 0 &&\
    \ need == 4 && remaining == 4)\n            return new List<long>(new long[]{8,\
    \ 0});\n        if (number == 0 && need == 4 && remaining == 5)\n            return\
    \ new List<long>(new long[]{9, 0});\n        if (number == 0 && need == 5 && remaining\
    \ == 5)\n            return new List<long>(new long[]{10, 0});\n        if (number\
    \ == 0 && need == 5 && remaining == 6)\n            return new List<long>(new\
    \ long[]{11, 0});\n        if (number == 0 && need == 6 && remaining == 6)\n \
    \           return new List<long>(new long[]{12, 0});\n        if (number == 0\
    \ && need == 6 && remaining == 7)\n            return new List<long>(new long[]",
  "        List<long> result = new List<long>();\n        if (number >= need) {\n\
    \            result.Add(number - need);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(number);\n            result.Add(remaining\
    \ - number);\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n        }\n        else {\n  \
    \          result.Add(number);\n            result.Add(remaining - number);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (need > remaining) {\n            result.Add(number + remaining);\n\
    \            result.Add(0L);\n            return result;\n        }\n        else\
    \ {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n            return result;\n        }", "        List<long> list =\
    \ new List<long>();\n        if (number >= need) {\n            list.Add(number\
    \ - need);\n            list.Add(remaining);\n        }\n        else if (number\
    \ > 0) {\n            list.Add(number);\n            list.Add(remaining - number);\n\
    \        }\n        else if (need > 0) {\n            list.Add(0);\n         \
    \   list.Add(need);\n        }\n        else {\n            list.Add(0);\n   \
    \         list.Add(0);\n        }\n        return list;", "        List<long>\
    \ result = new List<long>(new long[]{number, remaining});\n        if (remaining\
    \ < need) {\n            result.Add(need - remaining);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>(new long[]{number, remaining});\n\
    \        if (number >= need) {\n            result.Add(number - need);\n     \
    \       result.Add(remaining - need);\n            return result;\n        }\n\
    \        if (number == 0) {\n            result.Add(need);\n            result.Add(remaining\
    \ - need);\n            return result;\n        }\n        if (need == 0) {\n\
    \            result.Add(number);\n            result.Add(remaining - number);\n\
    \            return result;\n        }\n        if (remaining == 0) {\n      \
    \      result.Add(number);\n            result.Add(0);\n            return result;\n\
    \        }\n        if (number > 0) {\n            result.Add(number);\n     \
    \       result.Add(remaining - number);\n            return result;\n        }\n\
    \        if (need > 0) {\n            result.Add(need);\n            result.Add(remaining\
    \ - need);\n            return result;\n        }\n        if (remaining > 0)\
    \ {\n            result.Add(0);\n            result.Add(remaining);\n        \
    \    return result;\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n            return result;\n \
    \       }\n        if (number < need) {\n            result.Add(number);\n   \
    \         result.Add(remaining - number);\n            return result;\n      \
    \  }\n        result.Add(number);\n        result.Add(remaining);\n        return\
    \ result;", "        if (number < 0 || need < 0 || remaining < 0)\n          \
    \  throw new ArgumentOutOfRangeException(\"number\", \"need\", \"remaining\");\n\
    \        if (number > 1000 || need > 1000 || remaining > 1000)\n            throw\
    \ new ArgumentOutOfRangeException(\"number\", \"need\", \"remaining\");\n    \
    \    if (number == 0 && need == 0 && remaining == 0)\n            return new List<long>(new\
    \ long[]{0, 0});\n        if (number == 0 && need == 0 && remaining > 0)\n   \
    \         return new List<long>(new long[]{remaining, 0});\n        if (number\
    \ == 0 && need > 0 && remaining == 0)\n            return new List<long>(new long[]{need,\
    \ 0});\n        if (number == 0 && need > 0 && remaining > 0)\n            return\
    \ new List<long>(new long[]{need, remaining - need});\n        if (number > 0\
    \ && need == 0 && remaining == 0)\n            return new List<long>(new long[]{number,\
    \ 0});\n        if (number > 0 && need == 0 && remaining > 0)\n            return\
    \ new List<long>(new long[]{number, remaining});\n        if (number > 0 && need\
    \ > 0 && remaining == 0)\n            return new List<long>(new long[]{number,\
    \ need});\n        if (number > 0 && need > 0 && remaining > 0)\n            return\
    \ new List<long>(new long[]{number, need + remaining - need});\n        return\
    \ new List<long>(new long[]{number + need, remaining - need});", "        List<long>\
    \ result = new List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n        }\n        else {\n  \
    \          result.Add(number);\n            result.Add(remaining - number);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (number < need) {\n            result.Add(need - number);\n      \
    \      result.Add(remaining);\n        }\n        else {\n            result.Add(number);\n\
    \            result.Add(0);\n        }\n        return result;", "        // Write\
    \ your code here\n        if (number >= need) {\n            return new List<long>(new\
    \ long[]{number - need, remaining});\n        }\n        else {\n            return\
    \ new List<long>(new long[]{number, remaining});\n        }", "        if (number\
    \ < 0 || need < 0 || remaining < 0)\n            throw new ArgumentOutOfRangeException(\"\
    number\", \"need\", \"remaining\");\n        if (number > 1000 || need > 1000\
    \ || remaining > 1000)\n            throw new ArgumentOutOfRangeException(\"number\"\
    , \"need\", \"remaining\");\n        if (need > number)\n            throw new\
    \ ArgumentException(\"need\", \"need must be less than number\");\n        if\
    \ (remaining > number)\n            throw new ArgumentException(\"remaining\"\
    , \"remaining must be less than number\");\n        if (remaining == 0)\n    \
    \        return new List<long>(new long[]{number, 0});\n        if (need == 0)\n\
    \            return new List<long>(new long[]{number, remaining});\n        if\
    \ (need > remaining)\n            return new List<long>(new long[]{number, remaining});\n\
    \        long eaten = 0;\n        long left = 0;\n        while (need > 0) {\n\
    \            if (need > remaining) {\n                eaten += remaining;\n  \
    \              left = 0;\n                break;\n            }\n            else\
    \ {\n                eaten += need;\n                left = remaining - need;\n\
    \                break;\n            }\n        }\n        return new List<long>(new\
    \ long[]{eaten, left});", "        List<long> result = new List<long>();\n   \
    \     if (remaining < need) {\n            result.Add(remaining);\n          \
    \  result.Add(0);\n            return result;\n        }\n        else {\n   \
    \         result.Add(number + need);\n            result.Add(remaining - need);\n\
    \            return result;\n        }", "        List<long> result = new List<long>(new\
    \ long[]{number, remaining});\n        if (remaining >= need) {\n            result.Add(need);\n\
    \            result.Add(remaining - need);\n        }\n        else {\n      \
    \      result.Add(need);\n            result.Add(0);\n        }\n        return\
    \ result;", "        if (number < 0 || need < 0 || remaining < 0)\n          \
    \  throw new ArgumentOutOfRangeException(\"number\", \"need\", \"remaining\");\n\
    \        if (number > 1000 || need > 1000 || remaining > 1000)\n            throw\
    \ new ArgumentOutOfRangeException(\"number\", \"need\", \"remaining\");\n    \
    \    List<long> result = new List<long>();\n        long eaten = 0;\n        while\
    \ (need > 0) {\n            if (need > remaining) {\n                eaten +=\
    \ remaining;\n                result.Add(eaten);\n                result.Add(need\
    \ - remaining);\n                break;\n            }\n            else {\n \
    \               eaten += need;\n                result.Add(eaten);\n         \
    \       result.Add(remaining - need);\n                break;\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (number < need) {\n            result.Add(need - number);\n      \
    \      result.Add(remaining);\n        }\n        else {\n            result.Add(number);\n\
    \            result.Add(0);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining - need);\n        }\n        else\
    \ {\n            result.Add(number);\n            result.Add(remaining);\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (number >= need) {\n            result.Add(number - need);\n     \
    \       result.Add(remaining);\n        }\n        else {\n            result.Add(number);\n\
    \            result.Add(remaining - number);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (number < need) {\n \
    \           result.Add(need - number);\n            result.Add(remaining);\n \
    \       }\n        else {\n            result.Add(number);\n            result.Add(0);\n\
    \        }\n        return result;", "        if (number < 0 || need < 0 || remaining\
    \ < 0)\n            throw new ArgumentOutOfRangeException(\"number, need, remaining\"\
    );\n        if (number > 1000 || need > 1000 || remaining > 1000)\n          \
    \  throw new ArgumentOutOfRangeException(\"number, need, remaining\");\n     \
    \   List<long> result = new List<long>();\n        if (need > remaining) {\n \
    \           result.Add(number + need - remaining);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(number + need);\n         \
    \   result.Add(remaining - need);\n        }\n        return result;", "     \
    \   if (number < 0 || need < 0 || remaining < 0)\n            throw new Exception(\"\
    Invalid arguments\");\n        if (number == 0 && need == 0 && remaining == 0)\n\
    \            return new List<long>(new long[]{0, 0});\n        if (number == 0\
    \ && need > 0 && remaining == 0)\n            return new List<long>(new long[]{need,\
    \ 0});\n        if (number == 0 && need == 0 && remaining > 0)\n            return\
    \ new List<long>(new long[]{remaining, 0});\n        if (number == 0 && need ==\
    \ 0 && remaining > 0)\n            return new List<long>(new long[]{remaining,\
    \ 0});\n        if (number > 0 && need == 0 && remaining == 0)\n            return\
    \ new List<long>(new long[]{number, 0});\n        if (number > 0 && need == 0\
    \ && remaining > 0)\n            return new List<long>(new long[]{number, remaining});\n\
    \        if (number > 0 && need > 0 && remaining == 0)\n            return new\
    \ List<long>(new long[]{number, need});\n        if (number > 0 && need > 0 &&\
    \ remaining > 0)\n            return new List<long>(new long[]{number, need});\n\
    \        if (number > 0 && need > 0 && remaining > 0)\n            return new\
    \ List<long>(new long[]{number, need});\n        if (number > 0 && need > 0 &&\
    \ remaining > 0)\n            return new List<long>(new long[]{number, need});\n\
    \        if (number > 0 && need > 0 && remaining > 0)\n            return new\
    \ List<long>(new long[]{number, need});\n        if (number > 0 && need > 0 &&\
    \ remaining > 0)\n            return new List<long>(new long[]{number, need});\n\
    \        if (number > 0 && need > 0 && remaining > 0)\n            return new\
    \ List<long>(new long[]{number, need});\n        if (number > 0 && need > 0 &&\
    \ remaining > 0)\n            return new List<long>(new long[]{number, need});\n\
    \        if (number > 0 && need > 0 && remaining > 0)\n            return new\
    \ List<long>(new long[]{number, need});\n        if (number >", "        List<long>\
    \ result = new List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n        }\n        else {\n  \
    \          result.Add(number);\n            result.Add(remaining - number);\n\
    \        }\n        return result;", "        if (number < 0 || need < 0 || remaining\
    \ < 0)\n            throw new Exception(\"Invalid arguments\");\n        if (number\
    \ == 0 && need == 0 && remaining == 0)\n            return new List<long>(new\
    \ long[]{0, 0});\n        if (number == 0 && need == 0 && remaining > 0)\n   \
    \         return new List<long>(new long[]{remaining, 0});\n        if (number\
    \ == 0 && need > 0 && remaining == 0)\n            return new List<long>(new long[]{need,\
    \ 0});\n        if (number == 0 && need > 0 && remaining > 0)\n            return\
    \ new List<long>(new long[]{need, remaining - need});\n        if (number > 0\
    \ && need == 0 && remaining == 0)\n            return new List<long>(new long[]{number,\
    \ 0});\n        if (number > 0 && need == 0 && remaining > 0)\n            return\
    \ new List<long>(new long[]{number, remaining});\n        if (number > 0 && need\
    \ > 0 && remaining == 0)\n            return new List<long>(new long[]{number,\
    \ need});\n        if (number > 0 && need > 0 && remaining > 0)\n            return\
    \ new List<long>(new long[]{number, need + remaining - number});\n        return\
    \ new List<long>(new long[]{0, 0});", "        if (number < 0 || need < 0 || remaining\
    \ < 0)\n            throw new Exception(\"Invalid arguments\");\n        if (number\
    \ == 0 && need == 0 && remaining == 0)\n            return new List<long>(new\
    \ long[]{0, 0});\n        if (number == 0 && need == 0 && remaining > 0)\n   \
    \         return new List<long>(new long[]{remaining, 0});\n        if (number\
    \ == 0 && need > 0 && remaining == 0)\n            return new List<long>(new long[]{need,\
    \ 0});\n        if (number == 0 && need > 0 && remaining > 0)\n            return\
    \ new List<long>(new long[]{need, remaining - need});\n        if (number > 0\
    \ && need == 0 && remaining == 0)\n            return new List<long>(new long[]{number,\
    \ 0});\n        if (number > 0 && need == 0 && remaining > 0)\n            return\
    \ new List<long>(new long[]{number, remaining});\n        if (number > 0 && need\
    \ > 0 && remaining == 0)\n            return new List<long>(new long[]{number,\
    \ need});\n        if (number > 0 && need > 0 && remaining > 0)\n            return\
    \ new List<long>(new long[]{number, need + remaining - number});\n        return\
    \ new List<long>(new long[]{number, need});", "        List<long> result = new\
    \ List<long>();\n        if (number < need) {\n            result.Add(number);\n\
    \            result.Add(remaining);\n            return result;\n        }\n \
    \       if (number == need) {\n            result.Add(number);\n            result.Add(remaining\
    \ - need);\n            return result;\n        }\n        if (number > need)\
    \ {\n            result.Add(number - need);\n            result.Add(remaining);\n\
    \            return result;\n        }\n        result.Add(number);\n        result.Add(remaining);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (number >= need) {\n            result.Add(number - need);\n        \
    \    result.Add(remaining);\n        }\n        else {\n            result.Add(number);\n\
    \            result.Add(remaining - number);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (number >= need) {\n\
    \            result.Add(number - need);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(need);\n            result.Add(remaining\
    \ - number);\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        long eaten = 0;\n        long eatenNeed = 0;\n  \
    \      long eatenRemaining = 0;\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining - need);\n            return result;\n\
    \        }\n        while (need > 0) {\n            if (number >= need) {\n  \
    \              eaten = number - need;\n                eatenNeed = need;\n   \
    \             eatenRemaining = remaining;\n                break;\n          \
    \  }\n            else {\n                eaten = number;\n                eatenNeed\
    \ = need;\n                eatenRemaining = remaining;\n                break;\n\
    \            }\n        }\n        result.Add(eaten);\n        result.Add(eatenNeed);\n\
    \        result.Add(eatenRemaining);\n        return result;", "        List<long>\
    \ result = new List<long>(new long[]{number, remaining});\n        if (need >\
    \ remaining) {\n            result.Add(need);\n            result.Add(0);\n  \
    \          return result;\n        }\n        else {\n            result.Add(need);\n\
    \            result.Add(remaining - need);\n            return result;\n     \
    \   }", "        if (number < 0 || need < 0 || remaining < 0)\n            throw\
    \ new Exception(\"Invalid arguments\");\n        if (number == 0 && need == 0\
    \ && remaining == 0)\n            return new List<long>(new long[]{0, 0});\n \
    \       if (number == 0)\n            return new List<long>(new long[]{need, remaining});\n\
    \        if (need == 0)\n            return new List<long>(new long[]{number,\
    \ 0});\n        if (remaining == 0)\n            return new List<long>(new long[]{number,\
    \ need});\n        if (number > remaining)\n            return new List<long>(new\
    \ long[]{number, need});\n        if (need > remaining)\n            return new\
    \ List<long>(new long[]{number, need});\n        if (number > need)\n        \
    \    return new List<long>(new long[]{number, need});\n        if (number > remaining\
    \ - need)\n            return new List<long>(new long[]{number, need});\n    \
    \    if (number > remaining)\n            return new List<long>(new long[]{number,\
    \ need});\n        if (number > remaining - need)\n            return new List<long>(new\
    \ long[]{number, need});\n        if (number > remaining - need)\n           \
    \ return new List<long>(new long[]{number, need});\n        if (number > remaining\
    \ - need)\n            return new List<long>(new long[]{number, need});\n    \
    \    if (number > remaining - need)\n            return new List<long>(new long[]{number,\
    \ need});\n        if (number > remaining - need)\n            return new List<long>(new\
    \ long[]{number, need});\n        if (number > remaining - need)\n           \
    \ return new List<long>(new long[]{number, need});\n        if (number > remaining\
    \ - need)\n            return new List<long>(new long[]{number, need});\n    \
    \    if (number > remaining - need)\n            return new List<long>(new long[]{number,\
    \ need});\n        if (number > remaining - need)\n            return new List<long>(new\
    \ long[]{number, need});\n        if (number > remaining - need)\n           \
    \ return new List<long>(new long[]{number, need});\n", "        List<long> result\
    \ = new List<long>(new long[]{number, need});\n        if (remaining < need) {\n\
    \            result.Add(remaining);\n            result.Add(0);\n            return\
    \ result;\n        }\n        else {\n            result.Add(need);\n        \
    \    result.Add(remaining - need);\n            return result;\n        }", " \
    \       List<long> result = new List<long>(new long[]{number, remaining});\n \
    \       if (number >= need) {\n            result.Add(need);\n            result.Add(remaining\
    \ - need);\n            return result;\n        }\n        if (remaining < need)\
    \ {\n            result.Add(number);\n            result.Add(0);\n           \
    \ return result;\n        }\n        result.Add(number);\n        result.Add(need\
    \ - number);\n        return result;", "        List<long> res = new List<long>();\n\
    \        if (need <= 0) {\n            res.Add(number);\n            res.Add(remaining);\n\
    \            return res;\n        }\n        if (number < need) {\n          \
    \  res.Add(number);\n            res.Add(remaining);\n            return res;\n\
    \        }\n        if (number == need) {\n            res.Add(number);\n    \
    \        res.Add(remaining - need);\n            return res;\n        }\n    \
    \    if (number > need) {\n            res.Add(number - need);\n            res.Add(remaining\
    \ - need);\n            return res;\n        }\n        return res;", "      \
    \  // Write your code here\n        long eaten = number;\n        long need_eaten\
    \ = need;\n        long remaining_eaten = remaining;\n        while (need_eaten\
    \ > 0) {\n            if (remaining_eaten > 0) {\n                if (need_eaten\
    \ > remaining_eaten) {\n                    need_eaten = remaining_eaten;\n  \
    \                  remaining_eaten = 0;\n                } else {\n          \
    \          remaining_eaten -= need_eaten;\n                    need_eaten = 0;\n\
    \                }\n            } else {\n                need_eaten = 0;\n  \
    \          }\n        }\n        List<long> result = new List<long>();\n     \
    \   result.Add(eaten);\n        result.Add(remaining_eaten);\n        return result;",
  "        List<long> result = new List<long>();\n        if (need > remaining) {\n\
    \            result.Add(number);\n            result.Add(remaining);\n       \
    \     return result;\n        }\n        if (need == remaining) {\n          \
    \  result.Add(number);\n            result.Add(0);\n            return result;\n\
    \        }\n        if (need < remaining) {\n            result.Add(number + remaining\
    \ - need);\n            result.Add(remaining - need);\n            return result;\n\
    \        }\n        return result;", "        List<long> result = new List<long>(new\
    \ long[]{number, remaining});\n        if (number >= need) {\n            result.Add(need);\n\
    \            result.Add(remaining - need);\n            return result;\n     \
    \   }\n        if (remaining < need) {\n            result.Add(number + need -\
    \ remaining);\n            result.Add(0);\n            return result;\n      \
    \  }\n        result.Add(number);\n        result.Add(remaining - need);\n   \
    \     return result;", "        // Write your code here\n        if (remaining\
    \ < need) {\n            return new List<long>(new long[]{number + need, remaining});\n\
    \        }\n        else {\n            return new List<long>(new long[]{number\
    \ + need, remaining - need});\n        }", "        List<long> result = new List<long>();\n\
    \        if (number < need) {\n            result.Add(number);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(need);\n            result.Add(remaining\
    \ - need);\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n            return result;\n \
    \       }\n        if (number > 0) {\n            result.Add(number);\n      \
    \      result.Add(remaining - number);\n            return result;\n        }\n\
    \        if (need > 0) {\n            result.Add(0);\n            result.Add(need);\n\
    \            return result;\n        }\n        if (remaining > 0) {\n       \
    \     result.Add(0);\n            result.Add(remaining);\n            return result;\n\
    \        }\n        result.Add(0);\n        result.Add(0);\n        return result;",
  "        List<long> result = new List<long>(new long[]{number, need});\n       \
    \ if (remaining < need) {\n            result.Add(remaining);\n            result.Add(0);\n\
    \            return result;\n        }\n        else {\n            result.Add(need);\n\
    \            result.Add(remaining - need);\n            return result;\n     \
    \   }", "        List<long> list = new List<long>();\n        if (number >= need)\
    \ {\n            list.Add(number - need);\n            list.Add(remaining);\n\
    \            return list;\n        }\n        if (number == 0) {\n           \
    \ list.Add(0);\n            list.Add(remaining);\n            return list;\n \
    \       }\n        if (number > 0) {\n            list.Add(0);\n            list.Add(remaining\
    \ - number);\n            return list;\n        }\n        if (number < 0) {\n\
    \            list.Add(0);\n            list.Add(remaining + number);\n       \
    \     return list;\n        }\n        return list;", "        List<long> result\
    \ = new List<long>(new long[]{number, remaining});\n        if (need > remaining)\
    \ {\n            result.Add(need);\n            result.Add(0);\n            return\
    \ result;\n        }\n        else {\n            result.Add(need);\n        \
    \    result.Add(remaining - need);\n            return result;\n        }", " \
    \       List<long> result = new List<long>();\n        if (number >= need) {\n\
    \            result.Add(number - need);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(number);\n            result.Add(remaining\
    \ - number);\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n        }\n        else {\n  \
    \          result.Add(number);\n            result.Add(remaining - number);\n\
    \        }\n        return result;", "        if (number < 0 || need < 0 || remaining\
    \ < 0)\n            throw new Exception(\"Invalid arguments\");\n        if (number\
    \ == 0 && need == 0 && remaining == 0)\n            return new List<long>(new\
    \ long[]{0, 0});\n        if (number == 0 && need == 0)\n            return new\
    \ List<long>(new long[]{remaining, 0});\n        if (number == 0 && need > 0)\n\
    \            return new List<long>(new long[]{remaining, need});\n        if (number\
    \ > 0 && need == 0)\n            return new List<long>(new long[]{number, 0});\n\
    \        if (number > 0 && need > 0) {\n            long eaten = number - need;\n\
    \            long eatenRemaining = remaining - eaten;\n            if (eatenRemaining\
    \ < 0)\n                return new List<long>(new long[]{number, 0});\n      \
    \      else\n                return new List<long>(new long[]{eaten, eatenRemaining});\n\
    \        }\n        return new List<long>(new long[]{0, 0});", "        // Write\
    \ your code here\n        List<long> result = new List<long>();\n        long\
    \ eaten = 0;\n        long eatenNeed = 0;\n        long remainingNeed = need -\
    \ eaten;\n        if (remainingNeed > remaining) {\n            remainingNeed\
    \ = remaining;\n        }\n        while (remainingNeed > 0) {\n            if\
    \ (remainingNeed > 0) {\n                remainingNeed--;\n                eaten++;\n\
    \            }\n            eatenNeed++;\n            if (eatenNeed > number)\
    \ {\n                result.Add(eaten);\n                result.Add(remainingNeed);\n\
    \                break;\n            }\n        }\n        if (remainingNeed ==\
    \ 0) {\n            result.Add(eaten);\n            result.Add(remainingNeed);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (need <= remaining) {\n            result.Add(number + need);\n  \
    \          result.Add(remaining - need);\n        }\n        else {\n        \
    \    result.Add(number + remaining);\n            result.Add(0);\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (number >= need) {\n            result.Add(number - need);\n        \
    \    result.Add(remaining);\n            return result;\n        }\n        if\
    \ (number > 0) {\n            result.Add(number);\n            result.Add(remaining\
    \ - number);\n            return result;\n        }\n        result.Add(0);\n\
    \        result.Add(remaining);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (need > remaining) {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n            return result;\n    \
    \    }\n        else {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n            return result;\n        }", "        if (number < 0 ||\
    \ need < 0 || remaining < 0)\n            throw new Exception(\"Invalid arguments\"\
    );\n        if (number == 0 && need == 0 && remaining == 0)\n            return\
    \ new List<long>(new long[]{0, 0});\n        if (number == 0)\n            return\
    \ new List<long>(new long[]{need, remaining});\n        if (need == 0)\n     \
    \       return new List<long>(new long[]{number, 0});\n        if (remaining ==\
    \ 0)\n            return new List<long>(new long[]{number, need});\n        if\
    \ (number < need)\n            return new List<long>(new long[]{number, need -\
    \ number});\n        if (number < remaining)\n            return new List<long>(new\
    \ long[]{number, remaining - number});\n        return new List<long>(new long[]{number,\
    \ 0});", "        List<long> result = new List<long>();\n        long eaten =\
    \ 0;\n        long eatenNeed = 0;\n        long eatenRemaining = 0;\n        if\
    \ (number >= need) {\n            eaten = number - need;\n            eatenNeed\
    \ = need;\n            eatenRemaining = remaining;\n        }\n        else {\n\
    \            eaten = number;\n            eatenNeed = number;\n            eatenRemaining\
    \ = remaining - number;\n        }\n        result.Add(eaten);\n        result.Add(eatenNeed);\n\
    \        result.Add(eatenRemaining);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n        }\n        else {\n  \
    \          result.Add(need - number);\n            result.Add(remaining - number);\n\
    \        }\n        return result;", "        if (number < 0 || need < 0 || remaining\
    \ < 0)\n            throw new Exception(\"Invalid arguments\");\n        if (number\
    \ == 0 && need == 0 && remaining == 0)\n            return new List<long>(new\
    \ long[]{0, 0});\n        if (number == 0 && need == 0 && remaining > 0)\n   \
    \         return new List<long>(new long[]{remaining, 0});\n        if (number\
    \ == 0 && need > 0 && remaining == 0)\n            return new List<long>(new long[]{need,\
    \ 0});\n        if (number == 0 && need > 0 && remaining > 0)\n            return\
    \ new List<long>(new long[]{need, remaining - need});\n        if (number > 0\
    \ && need == 0 && remaining == 0)\n            return new List<long>(new long[]{number,\
    \ 0});\n        if (number > 0 && need == 0 && remaining > 0)\n            return\
    \ new List<long>(new long[]{number, remaining});\n        if (number > 0 && need\
    \ > 0 && remaining == 0)\n            return new List<long>(new long[]{number,\
    \ need});\n        if (number > 0 && need > 0 && remaining > 0)\n            return\
    \ new List<long>(new long[]{number, need + remaining - number});\n        return\
    \ new List<long>(new long[]{number, need});", "        List<long> result = new\
    \ List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n            return result;\n \
    \       }\n        if (number < need) {\n            result.Add(number);\n   \
    \         result.Add(remaining);\n            return result;\n        }\n    \
    \    result.Add(number);\n        result.Add(remaining - number);\n        return\
    \ result;", "        if (number < 0 || need < 0 || remaining < 0)\n          \
    \  throw new Exception(\"Invalid arguments\");\n        if (number == 0 && need\
    \ == 0 && remaining == 0)\n            return new List<long>(new long[]{0, 0});\n\
    \        if (number == 0 && need == 0 && remaining > 0)\n            return new\
    \ List<long>(new long[]{remaining, 0});\n        if (number == 0 && need > 0 &&\
    \ remaining == 0)\n            return new List<long>(new long[]{need, 0});\n \
    \       if (number == 0 && need > 0 && remaining > 0)\n            return new\
    \ List<long>(new long[]{need, remaining - need});\n        if (number > 0 && need\
    \ == 0 && remaining == 0)\n            return new List<long>(new long[]{number,\
    \ 0});\n        if (number > 0 && need == 0 && remaining > 0)\n            return\
    \ new List<long>(new long[]{number, remaining});\n        if (number > 0 && need\
    \ > 0 && remaining == 0)\n            return new List<long>(new long[]{number,\
    \ need});\n        if (number > 0 && need > 0 && remaining > 0)\n            return\
    \ new List<long>(new long[]{number, need + remaining - number});\n        return\
    \ new List<long>(new long[]{0, 0});", "        List<long> result = new List<long>();\n\
    \        if (number >= need) {\n            result.Add(number - need);\n     \
    \       result.Add(remaining);\n        }\n        else {\n            result.Add(number);\n\
    \            result.Add(remaining - number);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (number >= need) {\n\
    \            result.Add(number - need);\n            result.Add(remaining);\n\
    \        } else {\n            result.Add(number);\n            result.Add(remaining\
    \ - number);\n        }\n        return result;", "        List<long> result =\
    \ new List<long>(new long[]{number, remaining});\n        if (need > remaining)\
    \ {\n            result.Add(number + need - remaining);\n            result.Add(0);\n\
    \        }\n        else {\n            result.Add(number + need);\n         \
    \   result.Add(remaining - need);\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        if (number >= need) {\n   \
    \         result.Add(number - need);\n            result.Add(remaining);\n   \
    \     }\n        else {\n            result.Add(number);\n            result.Add(remaining\
    \ - number);\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (need <= remaining) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        }\n        else\
    \ {\n            result.Add(number + remaining);\n            result.Add(0);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (need <= 0) {\n            result.Add(number);\n            result.Add(remaining);\n\
    \            return result;\n        }\n        if (number < need) {\n       \
    \     result.Add(number);\n            result.Add(remaining);\n            return\
    \ result;\n        }\n        if (number == need) {\n            result.Add(number);\n\
    \            result.Add(remaining - need);\n            return result;\n     \
    \   }\n        if (number > need) {\n            result.Add(number - need);\n\
    \            result.Add(remaining);\n            return result;\n        }\n \
    \       if (number == 0) {\n            result.Add(0);\n            result.Add(remaining);\n\
    \            return result;\n        }\n        if (number == 1) {\n         \
    \   result.Add(1);\n            result.Add(remaining - 1);\n            return\
    \ result;\n        }\n        if (number == 2) {\n            result.Add(1);\n\
    \            result.Add(remaining - 2);\n            return result;\n        }\n\
    \        if (number == 3) {\n            result.Add(1);\n            result.Add(remaining\
    \ - 3);\n            return result;\n        }\n        if (number == 4) {\n \
    \           result.Add(2);\n            result.Add(remaining - 4);\n         \
    \   return result;\n        }\n        if (number == 5) {\n            result.Add(2);\n\
    \            result.Add(remaining - 5);\n            return result;\n        }\n\
    \        if (number == 6) {\n            result.Add(2);\n            result.Add(remaining\
    \ - 6);\n            return result;\n        }\n        if (number == 7) {\n \
    \           result.Add(3);\n            result.Add(remaining - 7);\n         \
    \   return result;\n        }\n        if (number == 8) {\n            result.Add(3);\n\
    \            result.Add(remaining - 8);\n            return result;\n        }\n\
    \        if (number == 9) {\n            result.Add(3);\n            result.Add(remaining\
    \ - 9);\n            return result;\n        }\n", "        if (number < 0 ||\
    \ need < 0 || remaining < 0)\n            throw new Exception(\"Invalid parameters\"\
    );\n        if (number == 0 && need == 0 && remaining == 0)\n            return\
    \ new List<long>(new long[]{0, 0});\n        if (number == 0 && need == 0 && remaining\
    \ > 0)\n            return new List<long>(new long[]{remaining, 0});\n       \
    \ if (number == 0 && need > 0 && remaining == 0)\n            return new List<long>(new\
    \ long[]{need, 0});\n        if (number == 0 && need > 0 && remaining > 0)\n \
    \           return new List<long>(new long[]{need, remaining - need});\n     \
    \   if (number > 0 && need == 0 && remaining == 0)\n            return new List<long>(new\
    \ long[]{number, 0});\n        if (number > 0 && need == 0 && remaining > 0)\n\
    \            return new List<long>(new long[]{number, remaining});\n        if\
    \ (number > 0 && need > 0 && remaining == 0)\n            return new List<long>(new\
    \ long[]{number, need});\n        if (number > 0 && need > 0 && remaining > 0)\n\
    \            return new List<long>(new long[]{number, need + remaining - number});\n\
    \        return new List<long>(new long[]{number, need});", "        List<long>\
    \ result = new List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n        }\n        else {\n  \
    \          result.Add(number);\n            result.Add(remaining - number);\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  if (number == 0 && need == 0 && remaining == 0) {\n            return new List<long>(new\
    \ long[]{0, 0});\n        }\n        if (number < 0 || need < 0 || remaining <\
    \ 0) {\n            throw new IllegalArgumentException(\"number, need, and remaining\
    \ should be non-negative\");\n        }\n        if (number > 1000 || need > 1000\
    \ || remaining > 1000) {\n            throw new IllegalArgumentException(\"number,\
    \ need, and remaining should be less than 1000\");\n        }\n        if (need\
    \ > remaining) {\n            return new List<long>(new long[]{number, 0});\n\
    \        }\n        if (need == 0) {\n            return new List<long>(new long[]{number,\
    \ remaining});\n        }\n        if (need > 0) {\n            long eaten = 0;\n\
    \            long left = 0;\n            while (need > 0) {\n                if\
    \ (need > remaining) {\n                    eaten = remaining;\n             \
    \       left = 0;\n                }\n                else {\n               \
    \     eaten = need;\n                    left = remaining - need;\n          \
    \      }\n                number += eaten;\n                need -= eaten;\n \
    \               remaining = left;\n            }\n            return new List<long>(new\
    \ long[]{number, remaining});\n        }\n        return null;", "        if (number\
    \ < 0 || need < 0 || remaining < 0)\n            throw new Exception(\"Invalid\
    \ input\");\n        if (number > 1000 || need > 1000 || remaining > 1000)\n \
    \           throw new Exception(\"Invalid input\");\n        if (number == 0 &&\
    \ need == 0 && remaining == 0)\n            return new List<long>(new long[]{0,\
    \ 0});\n        if (number == 0 && need == 0 && remaining > 0)\n            return\
    \ new List<long>(new long[]{remaining, 0});\n        if (number == 0 && need >\
    \ 0 && remaining == 0)\n            return new List<long>(new long[]{need, 0});\n\
    \        if (number == 0 && need > 0 && remaining > 0)\n            return new\
    \ List<long>(new long[]{need, remaining - need});\n        if (number > 0 && need\
    \ == 0 && remaining == 0)\n            return new List<long>(new long[]{number,\
    \ 0});\n        if (number > 0 && need == 0 && remaining > 0)\n            return\
    \ new List<long>(new long[]{number, remaining});\n        if (number > 0 && need\
    \ > 0 && remaining == 0)\n            return new List<long>(new long[]{number,\
    \ need});\n        if (number > 0 && need > 0 && remaining > 0)\n            return\
    \ new List<long>(new long[]{number, need + remaining - need});\n        return\
    \ new List<long>(new long[]{number, need});", "        List<long> result = new\
    \ List<long>(new long[]{number, remaining});\n        if (number >= need) {\n\
    \            result.Add(number - need);\n            result.Add(remaining - need);\n\
    \            return result;\n        }\n        if (remaining < need) {\n    \
    \        result.Add(number);\n            result.Add(0);\n            return result;\n\
    \        }\n        result.Add(number);\n        result.Add(remaining - need);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (need <= remaining) {\n            result.Add(number + need);\n     \
    \       result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        List<long> result = new List<long>(new long[]{number, remaining});\n  \
    \      if (need <= remaining) {\n            result.Add(need);\n            result.Add(remaining\
    \ - need);\n        }\n        else {\n            result.Add(remaining);\n  \
    \          result.Add(0);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n        }\n        else {\n  \
    \          result.Add(number);\n            result.Add(remaining - number);\n\
    \        }\n        return result;", "        if (number < 0 || need < 0 || remaining\
    \ < 0)\n            throw new Exception(\"Invalid arguments\");\n        if (number\
    \ > 1000 || need > 1000 || remaining > 1000)\n            throw new Exception(\"\
    Invalid arguments\");\n        if (number == 0 && need == 0 && remaining == 0)\n\
    \            return new List<long>(new long[]{0, 0});\n        if (number == 0\
    \ && need == 0 && remaining > 0)\n            return new List<long>(new long[]{0,\
    \ remaining});\n        if (number == 0 && need > 0 && remaining == 0)\n     \
    \       return new List<long>(new long[]{need, 0});\n        if (number == 0 &&\
    \ need > 0 && remaining > 0)\n            return new List<long>(new long[]{need,\
    \ remaining - need});\n        if (number > 0 && need == 0 && remaining == 0)\n\
    \            return new List<long>(new long[]{number, 0});\n        if (number\
    \ > 0 && need == 0 && remaining > 0)\n            return new List<long>(new long[]{number,\
    \ remaining});\n        if (number > 0 && need > 0 && remaining == 0)\n      \
    \      return new List<long>(new long[]{number, need});\n        if (number >\
    \ 0 && need > 0 && remaining > 0)\n            return new List<long>(new long[]{number,\
    \ need + remaining - need});\n        return new List<long>(new long[]{number\
    \ + need, remaining - need});", "        List<long> result = new List<long>();\n\
    \        if (number >= need) {\n            result.Add(number - need);\n     \
    \       result.Add(remaining);\n        }\n        else {\n            result.Add(number);\n\
    \            result.Add(remaining - number);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (number >= need) {\n\
    \            result.Add(number - need);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(number);\n            result.Add(remaining\
    \ - number);\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        long eaten = 0;\n        long eatenNeed = 0;\n  \
    \      long eatenRemaining = 0;\n        if (number >= need) {\n            eaten\
    \ = number - need;\n            eatenNeed = need;\n            eatenRemaining\
    \ = remaining;\n        }\n        else {\n            eaten = number;\n     \
    \       eatenNeed = number;\n            eatenRemaining = remaining - number;\n\
    \        }\n        result.Add(eaten);\n        result.Add(eatenNeed);\n     \
    \   result.Add(eatenRemaining);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n            return result;\n \
    \       }\n        if (number < 0 || need < 0 || remaining < 0) {\n          \
    \  throw new Exception(\"Invalid parameters\");\n        }\n        if (number\
    \ == 0 && need == 0 && remaining == 0) {\n            result.Add(0);\n       \
    \     result.Add(0);\n            return result;\n        }\n        if (number\
    \ == 0 && need > 0 && remaining == 0) {\n            result.Add(0);\n        \
    \    result.Add(need);\n            return result;\n        }\n        if (number\
    \ == 0 && need == 0 && remaining > 0) {\n            result.Add(0);\n        \
    \    result.Add(remaining);\n            return result;\n        }\n        if\
    \ (number > 0 && need == 0 && remaining == 0) {\n            result.Add(number);\n\
    \            result.Add(0);\n            return result;\n        }\n        if\
    \ (number > 0 && need > 0 && remaining == 0) {\n            result.Add(number);\n\
    \            result.Add(need);\n            return result;\n        }\n      \
    \  if (number > 0 && need == 0 && remaining > 0) {\n            result.Add(number);\n\
    \            result.Add(remaining);\n            return result;\n        }\n \
    \       if (number > 0 && need > 0 && remaining > 0) {\n            result.Add(number);\n\
    \            result.Add(remaining);\n            return result;\n        }\n \
    \       throw new Exception(\"Invalid parameters\");", "        if (number < 0\
    \ || need < 0 || remaining < 0)\n            throw new Exception(\"Invalid input\"\
    );\n        if (number > 1000 || need > 1000 || remaining > 1000)\n          \
    \  throw new Exception(\"Invalid input\");\n        List<long> result = new List<long>(new\
    \ long[]{number, need});\n        if (number >= need)\n            return result;\n\
    \        if (remaining == 0)\n            return result;\n        if (number ==\
    \ 0) {\n            result.Add(remaining);\n            return result;\n     \
    \   }\n        if (number == 1) {\n            result.Add(remaining - 1);\n  \
    \          return result;\n        }\n        if (number == 2) {\n           \
    \ result.Add(remaining - 2);\n            return result;\n        }\n        if\
    \ (number == 3) {\n            result.Add(remaining - 3);\n            return\
    \ result;\n        }\n        if (number == 4) {\n            result.Add(remaining\
    \ - 4);\n            return result;\n        }\n        if (number == 5) {\n \
    \           result.Add(remaining - 5);\n            return result;\n        }\n\
    \        if (number == 6) {\n            result.Add(remaining - 6);\n        \
    \    return result;\n        }\n        if (number == 7) {\n            result.Add(remaining\
    \ - 7);\n            return result;\n        }\n        if (number == 8) {\n \
    \           result.Add(remaining - 8);\n            return result;\n        }\n\
    \        if (number == 9) {\n            result.Add(remaining - 9);\n        \
    \    return result;\n        }\n        if (number == 10) {\n            result.Add(remaining\
    \ - 10);\n            return result;\n        }\n        if (number == 11) {\n\
    \            result.Add(remaining - 11);\n            return result;\n       \
    \ }\n        if (number == 12) {\n            result.Add(remaining - 12);\n  \
    \          return result;\n        }\n        if (number == 13) {\n          \
    \  result.Add(remaining - 13);\n            return result;\n        }\n      \
    \  if (number == 14) {\n            result.Add(remaining - 14);\n            return\
    \ result;", "        List<long> result = new List<long>();\n        if (number\
    \ >= need) {\n            result.Add(number - need);\n            result.Add(remaining);\n\
    \            return result;\n        }\n        if (number > 0) {\n          \
    \  result.Add(number);\n            result.Add(remaining - number);\n        \
    \    return result;\n        }\n        result.Add(0);\n        result.Add(remaining);\n\
    \        return result;", "        List<long> result = new List<long>(new long[]{number,\
    \ remaining});\n        if (need <= remaining) {\n            result = new List<long>(new\
    \ long[]{number + need, remaining - need});\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (number >= need) {\n\
    \            result.Add(number - need);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(number);\n            result.Add(remaining\
    \ - number);\n        }\n        return result;", "        if (number < 0 || need\
    \ < 0 || remaining < 0)\n            throw new Exception(\"Invalid arguments\"\
    );\n        if (number == 0 && need == 0 && remaining == 0)\n            return\
    \ new List<long>(new long[]{0, 0});\n        if (number == 0 && need == 0)\n \
    \           return new List<long>(new long[]{remaining, 0});\n        if (number\
    \ == 0 && need > 0)\n            return new List<long>(new long[]{remaining, need});\n\
    \        if (number > 0 && need == 0 && remaining == 0)\n            return new\
    \ List<long>(new long[]{number, 0});\n        if (number > 0 && need > 0 && remaining\
    \ == 0)\n            return new List<long>(new long[]{number, need});\n      \
    \  if (number > 0 && need > 0 && remaining > 0)\n            return new List<long>(new\
    \ long[]{number, need});\n        if (number > 0 && need == 0 && remaining > 0)\n\
    \            return new List<long>(new long[]{number, remaining});\n        if\
    \ (number > 0 && need == 0 && remaining == 0)\n            return new List<long>(new\
    \ long[]{number, 0});\n        if (number > 0 && need > 0 && remaining > 0)\n\
    \            return new List<long>(new long[]{number, need});\n        if (number\
    \ > 0 && need > 0 && remaining == 0)\n            return new List<long>(new long[]{number,\
    \ need});\n        if (number > 0 && need == 0 && remaining > 0)\n           \
    \ return new List<long>(new long[]{number, remaining});\n        if (number >\
    \ 0 && need == 0 && remaining == 0)\n            return new List<long>(new long[]{number,\
    \ 0});\n        if (number > 0 && need > 0 && remaining == 0)\n            return\
    \ new List<long>(new long[]{number, need});\n        if (number > 0 && need ==\
    \ 0 && remaining == 0)\n            return new List<long>(new long[]{number, 0});\n\
    \        if (number > 0 && need == 0 && remaining > 0)\n            return new\
    \ List<long>(new long[]{number, need});\n        if (number > 0 && need == 0 &&\
    \ remaining ==", "        List<long> result = new List<long>();\n        if (number\
    \ < need) {\n            result.Add(number);\n            result.Add(remaining);\n\
    \            return result;\n        }\n        else {\n            result.Add(need);\n\
    \            result.Add(remaining - need);\n            return result;\n     \
    \   }", "        if (number < 0 || need < 0 || remaining < 0)\n            throw\
    \ new Exception(\"Invalid input\");\n        if (number > 1000 || need > 1000\
    \ || remaining > 1000)\n            throw new Exception(\"Invalid input\");\n\
    \        List<long> result = new List<long>(new long[]{number, need});\n     \
    \   if (number < need) {\n            result.Add(remaining);\n            return\
    \ result;\n        }\n        if (number == need) {\n            result.Add(remaining\
    \ - need);\n            return result;\n        }\n        if (number > need)\
    \ {\n            result.Add(remaining - need);\n            return result;\n \
    \       }\n        return result;", "        // Write your code here\n       \
    \ if (number < need) {\n            return new List<long>(new long[]{number, remaining});\n\
    \        }\n        else {\n            return new List<long>(new long[]{number,\
    \ 0});\n        }", "        List<long> result = new List<long>(new long[]{number,\
    \ remaining});\n        if (number < need) {\n            result.Add(need - number);\n\
    \            result.Add(remaining);\n            return result;\n        }\n \
    \       else if (number == need) {\n            result.Add(need);\n          \
    \  result.Add(remaining - need);\n            return result;\n        }\n    \
    \    else {\n            result.Add(need);\n            result.Add(0);\n     \
    \       return result;\n        }", "        List<long> result = new List<long>();\n\
    \        long eaten = 0;\n        long eatenNeed = 0;\n        long eatenRemaining\
    \ = 0;\n        if (number >= need) {\n            eaten = number - need;\n  \
    \          eatenNeed = need;\n            eatenRemaining = remaining - need;\n\
    \        }\n        else {\n            eaten = number;\n            eatenNeed\
    \ = number;\n            eatenRemaining = remaining;\n        }\n        result.Add(eaten);\n\
    \        result.Add(eatenNeed);\n        result.Add(eatenRemaining);\n       \
    \ return result;", "        List<long> result = new List<long>();\n        if\
    \ (number >= need) {\n            result.Add(number - need);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(number);\n            result.Add(remaining\
    \ - number);\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (number < need) {\n            result.Add(number);\n\
    \            result.Add(remaining);\n        }\n        else {\n            result.Add(need);\n\
    \            result.Add(remaining - need);\n        }\n        return result;",
  "        List<long> result = new List<long>(new long[]{number, remaining});\n  \
    \      if (need > remaining) {\n            result.Add(need);\n            result.Add(0);\n\
    \            return result;\n        }\n        if (need == 0) {\n           \
    \ result.Add(number);\n            result.Add(remaining);\n            return\
    \ result;\n        }\n        if (need > 0) {\n            result.Add(number +\
    \ need);\n            result.Add(remaining - need);\n            return result;\n\
    \        }\n        if (need < 0) {\n            result.Add(number + need);\n\
    \            result.Add(remaining + need);\n            return result;\n     \
    \   }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (number >= need) {\n            result.Add(number - need);\n     \
    \       result.Add(remaining);\n        }\n        else {\n            result.Add(number);\n\
    \            result.Add(remaining - number);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (need > remaining) {\n\
    \            result.Add(number + remaining);\n            result.Add(0);\n   \
    \         return result;\n        }\n        else {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n            return result;\n\
    \        }", "        List<long> result = new List<long>();\n        if (number\
    \ < need) {\n            result.Add(need - number);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(number);\n            result.Add(0);\n\
    \        }\n        return result;", "        List<long> result = new List<long>(new\
    \ long[]{number, remaining});\n        if (number >= need) {\n            result.Add(need);\n\
    \            result.Add(remaining - need);\n            return result;\n     \
    \   }\n        if (remaining < need) {\n            result.Add(need);\n      \
    \      result.Add(0);\n            return result;\n        }\n        if (number\
    \ < need) {\n            result.Add(number);\n            result.Add(need - number);\n\
    \            return result;\n        }\n        result.Add(number);\n        result.Add(0);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (need > remaining) {\n            result.Add(number);\n            result.Add(remaining);\n\
    \            return result;\n        }\n        if (need == remaining) {\n   \
    \         result.Add(number);\n            result.Add(remaining);\n          \
    \  return result;\n        }\n        if (need < remaining) {\n            result.Add(number\
    \ + remaining - need);\n            result.Add(remaining - need);\n          \
    \  return result;\n        }\n        result.Add(number + remaining);\n      \
    \  result.Add(0);\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (number >= need) {\n            result.Add(number - need);\n     \
    \       result.Add(remaining);\n        }\n        else {\n            result.Add(number);\n\
    \            result.Add(remaining - number);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (number >= need) {\n\
    \            result.Add(number - need);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(number);\n            result.Add(remaining\
    \ - number);\n        }\n        return result;", "        List<long> res = new\
    \ List<long>();\n        if (number >= need) {\n            res.Add(number - need);\n\
    \            res.Add(remaining);\n        } else {\n            res.Add(number);\n\
    \            res.Add(remaining - number);\n        }\n        return res;", " \
    \       List<long> result = new List<long>();\n        if (need > remaining) {\n\
    \            result.Add(number + remaining);\n            result.Add(0);\n   \
    \         return result;\n        }\n        else {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n            return result;\n\
    \        }", "        List<long> result = new List<long>();\n        if (number\
    \ >= need) {\n            result.Add(number - need);\n            result.Add(remaining);\n\
    \            return result;\n        }\n        else {\n            result.Add(number);\n\
    \            result.Add(remaining - number);\n            return result;\n   \
    \     }", "        if (number < 0 || need < 0 || remaining < 0)\n            throw\
    \ new ArgumentOutOfRangeException(\"number\", \"need\", \"remaining\");\n    \
    \    if (number > 1000 || need > 1000 || remaining > 1000)\n            throw\
    \ new ArgumentOutOfRangeException(\"number\", \"need\", \"remaining\");\n    \
    \    if (need > number)\n            throw new ArgumentException(\"need\", \"\
    number\");\n        if (remaining > number)\n            throw new ArgumentException(\"\
    remaining\", \"number\");\n        if (number == 0 && need == 0 && remaining ==\
    \ 0)\n            return new List<long>(new long[]{number, need, remaining});\n\
    \        if (number == 0)\n            return new List<long>(new long[]{number,\
    \ need, remaining});\n        if (need == 0)\n            return new List<long>(new\
    \ long[]{number, need, remaining});\n        if (remaining == 0)\n           \
    \ return new List<long>(new long[]{number, need, remaining});\n        if (number\
    \ == 1)\n            return new List<long>(new long[]{number, need, remaining});\n\
    \        if (number == 2)\n            return new List<long>(new long[]{number,\
    \ need, remaining});\n        if (number == 3)\n            return new List<long>(new\
    \ long[]{number, need, remaining});\n        if (number == 4)\n            return\
    \ new List<long>(new long[]{number, need, remaining});\n        if (number ==\
    \ 5)\n            return new List<long>(new long[]{number, need, remaining});\n\
    \        if (number == 6)\n            return new List<long>(new long[]{number,\
    \ need, remaining});\n        if (number == 7)\n            return new List<long>(new\
    \ long[]{number, need, remaining});\n        if (number == 8)\n            return\
    \ new List<long>(new long[]{number, need, remaining});\n        if (number ==\
    \ 9)\n            return new List<long>(new long[]{number, need, remaining});\n\
    \        if (number == 10)\n            return new List<long>(new long[]{number,\
    \ need, remaining});\n        if (number == 11)\n            return new List<long>(new\
    \ long[]{number, need, remaining});\n        ", "        if (number < 0 || need\
    \ < 0 || remaining < 0)\n            throw new Exception(\"Invalid input\");\n\
    \        if (number > 1000 || need > 1000 || remaining > 1000)\n            throw\
    \ new Exception(\"Invalid input\");\n        List<long> result = new List<long>();\n\
    \        long eaten = 0;\n        long eatenNeed = 0;\n        while (need > 0)\
    \ {\n            if (need > remaining) {\n                eatenNeed = remaining;\n\
    \                remaining = 0;\n            }\n            else {\n         \
    \       eatenNeed = need;\n                remaining -= eatenNeed;\n         \
    \       need -= eatenNeed;\n            }\n            eaten += eatenNeed;\n \
    \           result.Add(eaten);\n        }\n        result.Add(remaining);\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   if (need <= 0) {\n            result.Add(number);\n            result.Add(remaining);\n\
    \            return result;\n        }\n        if (number < need) {\n       \
    \     result.Add(number);\n            result.Add(remaining);\n            return\
    \ result;\n        }\n        if (number == need) {\n            result.Add(number);\n\
    \            result.Add(remaining - need);\n            return result;\n     \
    \   }\n        if (number > need) {\n            result.Add(number - need);\n\
    \            result.Add(remaining);\n            return result;\n        }\n \
    \       result.Add(number);\n        result.Add(remaining);\n        return result;",
  "        // Write your code here\n        long eaten = number;\n        long eatenNeed\
    \ = need;\n        long eatenRemaining = remaining;\n        if (need > remaining)\
    \ {\n            eatenNeed = remaining;\n            eatenRemaining = 0;\n   \
    \     }\n        if (eatenNeed > 0) {\n            eaten = eaten + eatenNeed;\n\
    \        }\n        List<long> result = new List<long>();\n        result.Add(eaten);\n\
    \        result.Add(eatenRemaining);\n        return result;", "        if (number\
    \ < 0 || need < 0 || remaining < 0)\n            throw new Exception(\"Invalid\
    \ arguments\");\n        if (number == 0 && need == 0 && remaining == 0)\n   \
    \         return new List<long>(new long[]{0, 0});\n        if (number == 0 &&\
    \ need == 0)\n            return new List<long>(new long[]{remaining, 0});\n \
    \       if (number == 0 && need > 0)\n            return new List<long>(new long[]{remaining,\
    \ need});\n        if (number > 0 && need == 0)\n            return new List<long>(new\
    \ long[]{number, 0});\n        if (number > 0 && need > 0) {\n            long\
    \ eaten = number - need;\n            if (eaten > remaining)\n               \
    \ return new List<long>(new long[]{remaining, 0});\n            else\n       \
    \         return new List<long>(new long[]{remaining - eaten, eaten});\n     \
    \   }\n        return new List<long>(new long[]{0, 0});", "        if (number\
    \ < 0 || need < 0 || remaining < 0)\n            throw new ArgumentOutOfRangeException(\"\
    number\", \"need\", \"remaining\");\n        if (number > 1000 || need > 1000\
    \ || remaining > 1000)\n            throw new ArgumentOutOfRangeException(\"number\"\
    , \"need\", \"remaining\");\n        if (number == 0 && need == 0 && remaining\
    \ == 0)\n            return new List<long>(new long[]{0, 0});\n        if (number\
    \ == 0 && need == 0 && remaining == 1)\n            return new List<long>(new\
    \ long[]{1, 0});\n        if (number == 0 && need == 1 && remaining == 0)\n  \
    \          return new List<long>(new long[]{1, 1});\n        if (number == 1 &&\
    \ need == 0 && remaining == 0)\n            return new List<long>(new long[]{2,\
    \ 0});\n        if (number == 1 && need == 0 && remaining == 1)\n            return\
    \ new List<long>(new long[]{2, 1});\n        if (number == 1 && need == 1 && remaining\
    \ == 0)\n            return new List<long>(new long[]{2, 2});\n        if (number\
    \ == 2 && need == 0 && remaining == 0)\n            return new List<long>(new\
    \ long[]{3, 0});\n        if (number == 2 && need == 0 && remaining == 1)\n  \
    \          return new List<long>(new long[]{3, 1});\n        if (number == 2 &&\
    \ need == 1 && remaining == 0)\n            return new List<long>(new long[]{3,\
    \ 2});\n        if (number == 2 && need == 1 && remaining == 1)\n            return\
    \ new List<long>(new long[]{3, 3});\n        if (number == 3 && need == 0 && remaining\
    \ == 0)\n            return new List<long>(new long[]{4, 0});\n        if (number\
    \ == 3 && need == 0 && remaining == 1)\n            return new List<long>(new\
    \ long[]{4, 1});\n        if (number == 3 && need == 1 && remaining == 0)\n  \
    \          return new List<long>(new long[]{4, 2});\n        if (number == 3 &&\
    \ need == 1 && remaining == 1)\n            return new List<long>(new long[]",
  "        if (number < 0 || need < 0 || remaining < 0)\n            throw new Exception(\"\
    Invalid input\");\n        if (number > 1000 || need > 1000 || remaining > 1000)\n\
    \            throw new Exception(\"Invalid input\");\n        List<long> result\
    \ = new List<long>();\n        if (need <= remaining) {\n            result.Add(need);\n\
    \            result.Add(remaining - need);\n        }\n        else {\n      \
    \      result.Add(remaining);\n            result.Add(0);\n        }\n       \
    \ return result;", "        List<long> result = new List<long>(new long[]{number,\
    \ remaining});\n        if (number >= need) {\n            result.Add(need);\n\
    \            result.Add(remaining - need);\n        }\n        else {\n      \
    \      result.Add(number);\n            result.Add(remaining - number);\n    \
    \    }\n        return result;", "        List<long> res = new List<long>();\n\
    \        if (number >= need) {\n            res.Add(number - need);\n        \
    \    res.Add(remaining);\n        }\n        else {\n            res.Add(number);\n\
    \            res.Add(remaining - number);\n        }\n        return res;", " \
    \       List<long> result = new List<long>();\n        if (number >= need) {\n\
    \            result.Add(number - need);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(number);\n            result.Add(remaining\
    \ - number);\n        }\n        return result;", "        List<long> res = new\
    \ List<long>();\n        if (need > remaining) {\n            res.Add(number +\
    \ remaining);\n            res.Add(0L);\n            return res;\n        }\n\
    \        else {\n            res.Add(number + need);\n            res.Add(remaining\
    \ - need);\n            return res;\n        }", "        List<long> result =\
    \ new List<long>(new long[]{number, remaining});\n        if (need <= remaining)\
    \ {\n            result.Add(need);\n            result.Add(remaining - need);\n\
    \        }\n        else {\n            result.Add(remaining);\n            result.Add(0);\n\
    \        }\n        return result;", "        if (number < 0 || need < 0 || remaining\
    \ < 0)\n            throw new Exception(\"Invalid arguments\");\n        if (number\
    \ == 0 && need == 0 && remaining == 0)\n            return new List<long>(new\
    \ long[]{0, 0});\n        if (number == 0)\n            return new List<long>(new\
    \ long[]{need, remaining});\n        if (need == 0)\n            return new List<long>(new\
    \ long[]{number, 0});\n        if (remaining == 0)\n            return new List<long>(new\
    \ long[]{number, need});\n        if (number > remaining)\n            return\
    \ new List<long>(new long[]{number, need});\n        if (number > need)\n    \
    \        return new List<long>(new long[]{number, need});\n        if (number\
    \ > remaining - need)\n            return new List<long>(new long[]{number, need});\n\
    \        return new List<long>(new long[]{number, need});", "        List<long>\
    \ list = new List<long>();\n        if (number >= need) {\n            list.Add(number\
    \ - need);\n            list.Add(remaining);\n            return list;\n     \
    \   }\n        else if (number > 0) {\n            list.Add(number);\n       \
    \     list.Add(remaining - number);\n            return list;\n        }\n   \
    \     else if (need > 0) {\n            list.Add(0);\n            list.Add(need);\n\
    \            return list;\n        }\n        else if (remaining > 0) {\n    \
    \        list.Add(0);\n            list.Add(remaining);\n            return list;\n\
    \        }\n        else {\n            list.Add(0);\n            list.Add(0);\n\
    \            return list;\n        }", "        List<long> result = new List<long>();\n\
    \        if (number >= need) {\n            result.Add(number - need);\n     \
    \       result.Add(remaining);\n        }\n        else {\n            result.Add(number);\n\
    \            result.Add(remaining - number);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (number >= need) {\n\
    \            result.Add(number - need);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(number);\n            result.Add(remaining\
    \ - number);\n        }\n        return result;", "        List<long> result =\
    \ new List<long>(new long[]{number, remaining});\n        if (need > remaining)\
    \ {\n            result.Add(need);\n            result.Add(0);\n            return\
    \ result;\n        }\n        if (need == 0) {\n            result.Add(number);\n\
    \            result.Add(remaining);\n            return result;\n        }\n \
    \       if (need < remaining) {\n            result.Add(need);\n            result.Add(remaining\
    \ - need);\n            return result;\n        }\n        result.Add(number +\
    \ need);\n        result.Add(remaining - need);\n        return result;", "  \
    \      List<long> result = new List<long>();\n        if (number >= need) {\n\
    \            result.Add(number - need);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(number);\n            result.Add(remaining\
    \ - number);\n        }\n        return result;", "        if (number < 0 || need\
    \ < 0 || remaining < 0)\n            throw new Exception(\"Invalid input\");\n\
    \        if (number > 1000 || need > 1000 || remaining > 1000)\n            throw\
    \ new Exception(\"Invalid input\");\n        if (number == 0 && need == 0 && remaining\
    \ == 0)\n            return new List<long>(new long[]{0, 0});\n        long eaten\
    \ = 0;\n        long eatenNeed = 0;\n        long eatenRemaining = 0;\n      \
    \  if (number > 0) {\n            if (need > 0) {\n                if (remaining\
    \ > 0) {\n                    if (number > need) {\n                        eaten\
    \ = number - need;\n                        eatenNeed = need;\n              \
    \          eatenRemaining = remaining - eaten;\n                    }\n      \
    \              else {\n                        eaten = number;\n             \
    \           eatenNeed = number;\n                        eatenRemaining = remaining\
    \ - eaten;\n                    }\n                }\n                else {\n\
    \                    eaten = number;\n                    eatenNeed = number;\n\
    \                    eatenRemaining = 0;\n                }\n            }\n \
    \           else {\n                if (remaining > 0) {\n                   \
    \ if (number > remaining) {\n                        eaten = number - remaining;\n\
    \                        eatenNeed = remaining;\n                        eatenRemaining\
    \ = 0;\n                    }\n                    else {\n                  \
    \      eaten = number;\n                        eatenNeed = number;\n        \
    \                eatenRemaining = remaining - eaten;\n                    }\n\
    \                }\n                else {\n                    eaten = number;\n\
    \                    eatenNeed = number;\n                    eatenRemaining =\
    \ 0;\n                }\n            }\n        }\n        else {\n          \
    \  if (need > 0) {\n                if (remaining > 0) {\n                   \
    \ if (need > remaining) {\n                        eaten = need - remaining;\n\
    \                        eatenNeed = remaining;\n                        eatenRemaining\
    \ = 0;\n                    }\n                    else {\n                  \
    \      eaten = need;\n                        eatenNeed = need;\n            \
    \            eatenRemaining = remaining - eaten;\n                    }\n    \
    \            }\n                else {\n                    eaten = need;\n  \
    \                  eatenNeed = need;\n                    eatenRemaining = 0;\n\
    \                }\n            }\n            else {\n                if (remaining\
    \ > 0)", "        List<long> result = new List<long>();\n        if (number >=\
    \ need) {\n            result.Add(number - need);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(number);\n            result.Add(remaining\
    \ - number);\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n        }\n        else {\n  \
    \          result.Add(number);\n            result.Add(remaining - number);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (number >= need) {\n            result.Add(number - need);\n     \
    \       result.Add(remaining);\n        }\n        else {\n            result.Add(number);\n\
    \            result.Add(remaining - number);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (number >= need) {\n\
    \            result.Add(number - need);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(number);\n            result.Add(remaining\
    \ - number);\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n        }\n        else {\n  \
    \          result.Add(number);\n            result.Add(remaining - number);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (need > remaining) {\n            result.Add(number + remaining);\n\
    \            result.Add(0L);\n        }\n        else {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        }\n        return\
    \ result;", "        if (number < 0 || need < 0 || remaining < 0)\n          \
    \  throw new Exception(\"Invalid arguments\");\n        if (number == 0 && need\
    \ == 0 && remaining == 0)\n            return new List<long>(new long[]{number,\
    \ need});\n        if (number == 0 && need == 0)\n            return new List<long>(new\
    \ long[]{number, remaining});\n        if (number == 0 && need > 0)\n        \
    \    return new List<long>(new long[]{number, need - remaining});\n        if\
    \ (number > 0 && need == 0)\n            return new List<long>(new long[]{number\
    \ - remaining, need});\n        if (number > 0 && need > 0)\n            return\
    \ new List<long>(new long[]{number - remaining, need - remaining});\n        return\
    \ new List<long>(new long[]{number, need});", "        if (number < 0 || need\
    \ < 0 || remaining < 0)\n            throw new Exception(\"Invalid arguments\"\
    );\n        if (number > 1000 || need > 1000 || remaining > 1000)\n          \
    \  throw new Exception(\"Invalid arguments\");\n        if (number == 0 && need\
    \ == 0 && remaining == 0)\n            return new List<long>(new long[]{0, 0});\n\
    \        if (number == 0 && need == 0 && remaining > 0)\n            return new\
    \ List<long>(new long[]{remaining, 0});\n        if (number == 0 && need > 0 &&\
    \ remaining == 0)\n            return new List<long>(new long[]{need, 0});\n \
    \       if (number == 0 && need > 0 && remaining > 0)\n            return new\
    \ List<long>(new long[]{need, remaining - need});\n        if (number > 0 && need\
    \ == 0 && remaining == 0)\n            return new List<long>(new long[]{number,\
    \ 0});\n        if (number > 0 && need == 0 && remaining > 0)\n            return\
    \ new List<long>(new long[]{number, remaining});\n        if (number > 0 && need\
    \ > 0 && remaining == 0)\n            return new List<long>(new long[]{number,\
    \ need});\n        if (number > 0 && need > 0 && remaining > 0)\n            return\
    \ new List<long>(new long[]{number, need + remaining - number});\n        return\
    \ new List<long>(new long[]{0, 0});", "        List<long> result = new List<long>();\n\
    \        if (number >= need) {\n            result.Add(number - need);\n     \
    \       result.Add(remaining);\n        }\n        else {\n            result.Add(number);\n\
    \            result.Add(remaining - number);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (number >= need) {\n\
    \            result.Add(number - need);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(number);\n            result.Add(remaining\
    \ - number);\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n            return result;\n \
    \       }\n        else {\n            result.Add(number);\n            result.Add(remaining\
    \ - number);\n            return result;\n        }", "        List<long> result\
    \ = new List<long>();\n        long eaten = number;\n        long eatenNeed =\
    \ need;\n        long remainingNeed = remaining;\n        while (remainingNeed\
    \ > 0) {\n            if (remainingNeed < eatenNeed) {\n                eatenNeed\
    \ = remainingNeed;\n            }\n            remainingNeed -= eatenNeed;\n \
    \           eaten += eatenNeed;\n            result.Add(eaten);\n        }\n \
    \       result.Add(remaining);\n        return result;", "        if (number <\
    \ 0 || need < 0 || remaining < 0)\n            throw new Exception(\"Invalid arguments\"\
    );\n        if (number == 0 && need == 0 && remaining == 0)\n            return\
    \ new List<long>(new long[]{0, 0});\n        if (number == 0 && need == 0 && remaining\
    \ > 0)\n            return new List<long>(new long[]{remaining, 0});\n       \
    \ if (number == 0 && need > 0 && remaining == 0)\n            return new List<long>(new\
    \ long[]{need, 0});\n        if (number == 0 && need > 0 && remaining > 0)\n \
    \           return new List<long>(new long[]{need, remaining - need});\n     \
    \   if (number > 0 && need == 0 && remaining == 0)\n            return new List<long>(new\
    \ long[]{number, 0});\n        if (number > 0 && need == 0 && remaining > 0)\n\
    \            return new List<long>(new long[]{number, remaining});\n        if\
    \ (number > 0 && need > 0 && remaining == 0)\n            return new List<long>(new\
    \ long[]{number, need});\n        if (number > 0 && need > 0 && remaining > 0)\n\
    \            return new List<long>(new long[]{number, need + remaining - number});\n\
    \        return new List<long>(new long[]{number, need});", "        List<long>\
    \ result = new List<long>(new long[]{number, remaining});\n        if (number\
    \ >= need) {\n            result.Add(number - need);\n            result.Add(remaining\
    \ - need);\n            return result;\n        }\n        if (number < need)\
    \ {\n            result.Add(number);\n            result.Add(remaining);\n   \
    \         return result;\n        }\n        if (number == need) {\n         \
    \   result.Add(number);\n            result.Add(remaining - need);\n         \
    \   return result;\n        }\n        if (number > need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n            return result;\n \
    \       }\n        if (number == need && remaining == need) {\n            result.Add(number);\n\
    \            result.Add(0);\n            return result;\n        }\n        if\
    \ (number == need && remaining != need) {\n            result.Add(number);\n \
    \           result.Add(remaining - need);\n            return result;\n      \
    \  }\n        if (number != need && remaining == need) {\n            result.Add(number\
    \ - need);\n            result.Add(0);\n            return result;\n        }\n\
    \        if (number != need && remaining != need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n            return result;\n \
    \       }\n        if (number == need && remaining != need) {\n            result.Add(number);\n\
    \            result.Add(remaining - need);\n            return result;\n     \
    \   }\n        if (number != need && remaining == need) {\n            result.Add(number);\n\
    \            result.Add(0);\n            return result;\n        }\n        if\
    \ (number == need && remaining == need) {\n            result.Add(number);\n \
    \           result.Add(0);\n            return result;\n        }\n        return\
    \ result;", "        List<long> res = new List<long>();\n        if (number >=\
    \ need) {\n            res.Add(number - need);\n            res.Add(remaining);\n\
    \            return res;\n        }\n        if (number == 0) {\n            res.Add(need);\n\
    \            res.Add(remaining);\n            return res;\n        }\n       \
    \ if (need == 0) {\n            res.Add(number);\n            res.Add(remaining);\n\
    \            return res;\n        }\n        if (remaining == 0) {\n         \
    \   res.Add(number);\n            res.Add(need);\n            return res;\n  \
    \      }\n        if (number < need) {\n            res.Add(number);\n       \
    \     res.Add(remaining);\n            return res;\n        }\n        if (number\
    \ > need) {\n            res.Add(need);\n            res.Add(remaining - need);\n\
    \            return res;\n        }\n        if (number == need) {\n         \
    \   res.Add(need);\n            res.Add(remaining - need);\n            return\
    \ res;\n        }\n        if (number < remaining) {\n            res.Add(number);\n\
    \            res.Add(remaining - number);\n            return res;\n        }\n\
    \        if (number == remaining) {\n            res.Add(number);\n          \
    \  res.Add(remaining);\n            return res;\n        }\n        if (number\
    \ > remaining) {\n            res.Add(need);\n            res.Add(remaining);\n\
    \            return res;\n        }\n        return res;", "        List<long>\
    \ result = new List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n        }\n        else {\n  \
    \          result.Add(number);\n            result.Add(remaining - number);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (number >= need) {\n            result.Add(number - need);\n     \
    \       result.Add(remaining);\n        }\n        else {\n            result.Add(number);\n\
    \            result.Add(remaining - number);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (need > remaining) {\n\
    \            result.Add(number);\n            result.Add(remaining);\n       \
    \     return result;\n        }\n        else {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n            return result;\n\
    \        }", "        List<long> res = new List<long>();\n        if (need > remaining)\
    \ {\n            res.Add(number);\n            res.Add(remaining);\n         \
    \   return res;\n        }\n        else {\n            res.Add(number + need);\n\
    \            res.Add(remaining - need);\n            return res;\n        }",
  "        if (number < 0 || need < 0 || remaining < 0)\n            throw new Exception(\"\
    Invalid arguments\");\n        if (number == 0 && need == 0 && remaining == 0)\n\
    \            return new List<long>(new long[]{0, 0});\n        if (number == 0\
    \ && need == 0 && remaining > 0)\n            return new List<long>(new long[]{remaining,\
    \ 0});\n        if (number == 0 && need > 0 && remaining == 0)\n            return\
    \ new List<long>(new long[]{need, 0});\n        if (number == 0 && need > 0 &&\
    \ remaining > 0)\n            return new List<long>(new long[]{need, remaining\
    \ - need});\n        if (number > 0 && need == 0 && remaining == 0)\n        \
    \    return new List<long>(new long[]{number, 0});\n        if (number > 0 &&\
    \ need == 0 && remaining > 0)\n            return new List<long>(new long[]{number,\
    \ remaining});\n        if (number > 0 && need > 0 && remaining == 0)\n      \
    \      return new List<long>(new long[]{number, need});\n        if (number >\
    \ 0 && need > 0 && remaining > 0)\n            return new List<long>(new long[]{number,\
    \ need + remaining - number});\n        return new List<long>(new long[]{number,\
    \ need});", "        List<long> result = new List<long>();\n        if (number\
    \ >= need) {\n            result.Add(number - need);\n            result.Add(remaining\
    \ - need);\n        }\n        else {\n            result.Add(number);\n     \
    \       result.Add(remaining);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n        }\n        else {\n  \
    \          result.Add(number);\n            result.Add(remaining - number);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (number >= need) {\n            result.Add(number - need);\n     \
    \       result.Add(remaining);\n            return result;\n        }\n      \
    \  else if (number > 0) {\n            result.Add(number);\n            result.Add(remaining\
    \ - number);\n            return result;\n        }\n        else {\n        \
    \    result.Add(0);\n            result.Add(remaining);\n            return result;\n\
    \        }", "        if (number < 0 || need < 0 || remaining < 0)\n         \
    \   throw new Exception(\"Invalid input\");\n        if (number == 0 && need ==\
    \ 0 && remaining == 0)\n            return new List<long>(new long[]{0, 0});\n\
    \        if (number == 0 && need == 0 && remaining > 0)\n            return new\
    \ List<long>(new long[]{remaining, 0});\n        if (number == 0 && need > 0 &&\
    \ remaining == 0)\n            return new List<long>(new long[]{need, 0});\n \
    \       if (number > 0 && need == 0 && remaining == 0)\n            return new\
    \ List<long>(new long[]{number, 0});\n        if (number > 0 && need > 0 && remaining\
    \ == 0)\n            return new List<long>(new long[]{number, need});\n      \
    \  if (number > 0 && need > 0 && remaining > 0)\n            return new List<long>(new\
    \ long[]{number, need - remaining});\n        if (number > 0 && need == 0 && remaining\
    \ > 0)\n            return new List<long>(new long[]{number, remaining});\n  \
    \      if (number == 0 && need > 0 && remaining > 0)\n            return new List<long>(new\
    \ long[]{remaining, need});\n        if (number == 0 && need == 0 && remaining\
    \ > 0)\n            return new List<long>(new long[]{remaining, need});\n    \
    \    return new List<long>(new long[]{number, need});", "        List<long> result\
    \ = new List<long>();\n        if (need <= 0) {\n            result.Add(number);\n\
    \            result.Add(remaining);\n            return result;\n        }\n \
    \       if (number >= need) {\n            result.Add(number);\n            result.Add(remaining\
    \ - need);\n            return result;\n        }\n        if (number + remaining\
    \ >= need) {\n            result.Add(number + remaining);\n            result.Add(0);\n\
    \            return result;\n        }\n        result.Add(number);\n        result.Add(need\
    \ - number);\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (number < need) {\n            result.Add(number);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(need);\n            result.Add(remaining\
    \ - need);\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long eaten = 0;\n        long eatenNeed = 0;\n      \
    \  long eatenRemaining = 0;\n        if (number >= need) {\n            result.Add(number\
    \ - need);\n            result.Add(remaining);\n            return result;\n \
    \       }\n        if (number > 0) {\n            eaten = number;\n          \
    \  eatenNeed = need - eaten;\n            eatenRemaining = remaining - eatenNeed;\n\
    \            result.Add(eaten);\n            result.Add(eatenNeed);\n        \
    \    result.Add(eatenRemaining);\n            return result;\n        }\n    \
    \    result.Add(0);\n        result.Add(remaining);\n        return result;",
  "        List<long> result = new List<long>();\n        if (number >= need) {\n\
    \            result.Add(number - need);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(need);\n            result.Add(remaining\
    \ - number);\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        long eaten = 0;\n        long eatenNeed = 0;\n  \
    \      long eatenRemaining = 0;\n        if (number >= need) {\n            eaten\
    \ = number - need;\n            result.Add(eaten);\n            result.Add(remaining\
    \ - eaten);\n        }\n        else {\n            eaten = number;\n        \
    \    result.Add(eaten);\n            result.Add(remaining);\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        if\
    \ (number >= need) {\n            result.Add(number - need);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(number);\n            result.Add(remaining\
    \ - number);\n        }\n        return result;", "        List<long> result =\
    \ new List<long>(new long[]{number, need});\n        if (remaining < need) {\n\
    \            result.Add(remaining);\n            return result;\n        }\n \
    \       else {\n            result.Add(remaining - need);\n            return\
    \ result;\n        }", "        List<long> result = new List<long>();\n      \
    \  if (number < need) {\n            result.Add(number);\n            result.Add(remaining);\n\
    \        }\n        else {\n            result.Add(need);\n            result.Add(remaining\
    \ - need);\n        }\n        return result;", "        List<long> res = new\
    \ List<long>();\n        if (number >= need) {\n            res.Add(number - need);\n\
    \            res.Add(remaining);\n            return res;\n        }\n       \
    \ else {\n            res.Add(number);\n            res.Add(remaining - number);\n\
    \            return res;\n        }", "        List<long> result = new List<long>();\n\
    \        if (need > remaining) {\n            result.Add(number);\n          \
    \  result.Add(remaining);\n            return result;\n        }\n        else\
    \ {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n            return result;\n        }", "        if (number < 0 ||\
    \ need < 0 || remaining < 0)\n            throw new ArgumentOutOfRangeException(\"\
    number\", \"need\", \"remaining\");\n        if (number > 1000 || need > 1000\
    \ || remaining > 1000)\n            throw new ArgumentOutOfRangeException(\"number\"\
    , \"need\", \"remaining\");\n        if (number == 0 && need == 0 && remaining\
    \ == 0)\n            return new List<long>(new long[]{0, 0});\n        if (number\
    \ == 0 && need == 0 && remaining > 0)\n            return new List<long>(new long[]{0,\
    \ remaining});\n        if (number == 0 && need > 0 && remaining == 0)\n     \
    \       return new List<long>(new long[]{need, 0});\n        if (number == 0 &&\
    \ need > 0 && remaining > 0)\n            return new List<long>(new long[]{need,\
    \ remaining - need});\n        if (number > 0 && need == 0 && remaining == 0)\n\
    \            return new List<long>(new long[]{number, 0});\n        if (number\
    \ > 0 && need == 0 && remaining > 0)\n            return new List<long>(new long[]{number,\
    \ remaining});\n        if (number > 0 && need > 0 && remaining == 0)\n      \
    \      return new List<long>(new long[]{number - need, 0});\n        if (number\
    \ > 0 && need > 0 && remaining > 0)\n            return new List<long>(new long[]{number\
    \ - need, remaining - need});\n        return new List<long>(new long[]{0, 0});"]
stop_tokens:
- "\n    }\n"
