name: HumanEval_6_parse_nested_parens
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Input to this function is a string represented multiple groups\
  \ for nested parentheses separated by spaces.\n    // For each of the group, output\
  \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two\
  \ levels of nesting while ((())) has three.\n    // >>> ParseNestedParens((\"(()())\
  \ ((())) () ((())()())\"))\n    // (new List<long>(new long[]{(long)2L, (long)3L,\
  \ (long)1L, (long)3L}))\n    public static List<long> ParseNestedParens(string paren_string)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
  (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
  \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
  \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
  \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
  \ long[]{(long)4L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        int paren_count\
    \ = 0;\n        int paren_level = 0;\n        int i = 0;\n        while (i < paren_string.Length)\
    \ {\n            if (paren_string[i] == '(') {\n                paren_count++;\n\
    \            }\n            else if (paren_string[i] == ')') {\n             \
    \   paren_count--;\n            }\n            if (paren_count == 0) {\n     \
    \           paren_level = 0;\n                while (i < paren_string.Length &&\
    \ paren_string[i] != ' ') {\n                    if (paren_string[i] == '(') {\n\
    \                        paren_level++;\n                    }\n             \
    \       else if (paren_string[i] == ')') {\n                        paren_level--;\n\
    \                    }\n                    i++;\n                }\n        \
    \        result.Add(paren_level);\n            }\n            i++;\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     int paren_count = 0;\n        int paren_level = 0;\n        int paren_start\
    \ = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n            if\
    \ (paren_string[i] == '(') {\n                paren_count++;\n               \
    \ paren_level++;\n            }\n            else if (paren_string[i] == ')')\
    \ {\n                paren_count--;\n                paren_level--;\n        \
    \    }\n            else if (paren_string[i] == ' ' && paren_count == 0) {\n \
    \               result.Add(new long(paren_level));\n                paren_start\
    \ = i + 1;\n            }\n        }\n        result.Add(new long(paren_level));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (paren_string.Length == 0) return result;\n        int i = 0;\n     \
    \   int j = 0;\n        int level = 0;\n        while (i < paren_string.Length)\
    \ {\n            if (paren_string[i] == '(') {\n                level++;\n   \
    \         }\n            else if (paren_string[i] == ')') {\n                level--;\n\
    \            }\n            else if (paren_string[i] == ' ') {\n             \
    \   if (level == 0) {\n                    result.Add(j);\n                  \
    \  j = i + 1;\n                }\n            }\n            i++;\n        }\n\
    \        result.Add(j);\n        return result;", "        List<long> result =\
    \ new List<long>();\n        int paren_count = 0;\n        int paren_level = 0;\n\
    \        int paren_index = 0;\n        while (paren_index < paren_string.Length)\
    \ {\n            if (paren_string[paren_index] == '(') {\n                paren_count++;\n\
    \            }\n            else if (paren_string[paren_index] == ')') {\n   \
    \             paren_count--;\n            }\n            else if (paren_string[paren_index]\
    \ == ' ') {\n                if (paren_count == 0) {\n                    paren_level++;\n\
    \                }\n            }\n            paren_index++;\n        }\n   \
    \     paren_index = 0;\n        while (paren_index < paren_string.Length) {\n\
    \            if (paren_string[paren_index] == '(') {\n                paren_count++;\n\
    \            }\n            else if (paren_string[paren_index] == ')') {\n   \
    \             paren_count--;\n            }\n            else if (paren_string[paren_index]\
    \ == ' ') {\n                if (paren_count == 0) {\n                    result.Add(paren_level);\n\
    \                }\n            }\n            paren_index++;\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  int depth = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n \
    \           if (paren_string[i] == '(') {\n                depth++;\n        \
    \    }\n            else if (paren_string[i] == ')') {\n                depth--;\n\
    \            }\n            if (depth == 0) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int level = 0;\n        int start = 0;\n      \
    \  for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                level++;\n                if (level == 1) {\n   \
    \                 start = i + 1;\n                }\n            }\n         \
    \   else if (paren_string[i] == ')') {\n                level--;\n           \
    \     if (level == 0) {\n                    result.Add(i - start);\n        \
    \        }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long depth = 0;\n        for (int i = 0;\
    \ i < paren_string.Length; i++) {\n            if (paren_string[i] == '(') {\n\
    \                depth++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                depth--;\n            }\n            if (depth <\
    \ 0) {\n                throw new Exception(\"Invalid parentheses\");\n      \
    \      }\n            if (depth == 0) {\n                result.Add(depth);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int start = 0;\n        int end = 0;\n        int\
    \ depth = 0;\n        while (end < paren_string.Length) {\n            if (paren_string[end]\
    \ == '(') {\n                depth++;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                depth--;\n            }\n            if (depth ==\
    \ 0) {\n                result.Add(end - start);\n                start = end\
    \ + 1;\n            }\n            end++;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max_nesting = 0;\n\
    \        long cur_nesting = 0;\n        long cur_index = 0;\n        while (cur_index\
    \ < paren_string.Length) {\n            if (paren_string[cur_index] == '(') {\n\
    \                cur_nesting++;\n            }\n            else if (paren_string[cur_index]\
    \ == ')') {\n                cur_nesting--;\n            }\n            if (cur_nesting\
    \ > max_nesting) {\n                max_nesting = cur_nesting;\n            }\n\
    \            cur_index++;\n        }\n        for (int i = 0; i < max_nesting;\
    \ i++) {\n            result.Add(1);\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        int level = 0;\n       \
    \ int start = 0;\n        int end = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                level++;\n \
    \               start = end;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                level--;\n                end++;\n              \
    \  if (level == 0) {\n                    result.Add(Convert.ToLong(paren_string.Substring(start\
    \ + 1, end - start - 1)));\n                }\n            }\n            end++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int paren_count = 0;\n        int paren_depth = 0;\n        int i = 0;\n\
    \        while (i < paren_string.Length) {\n            if (paren_string[i] ==\
    \ '(') {\n                paren_count++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                paren_count--;\n            }\n            else if\
    \ (paren_string[i] == '(' && paren_count == 0) {\n                paren_depth++;\n\
    \            }\n            else if (paren_string[i] == ')' && paren_count ==\
    \ 0) {\n                paren_depth--;\n            }\n            i++;\n    \
    \    }\n        if (paren_count != 0) {\n            throw new Exception(\"Invalid\
    \ input\");\n        }\n        if (paren_depth != 0) {\n            throw new\
    \ Exception(\"Invalid input\");\n        }\n        for (i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                result.Add(1);\n\
    \            }\n            else if (paren_string[i] == ')') {\n             \
    \   result.Add(-1);\n            }\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long level = 0;\n        for\
    \ (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                level++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                level--;\n            }\n            if (level <\
    \ 0) {\n                throw new Exception(\"Invalid parentheses\");\n      \
    \      }\n            if (level == 0) {\n                result.Add(level);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int paren_count = 0;\n        int paren_level =\
    \ 0;\n        int paren_start = 0;\n        int paren_end = 0;\n        for (int\
    \ i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i] == '(')\
    \ {\n                paren_count++;\n                paren_level++;\n        \
    \        paren_start = i;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                paren_count--;\n                paren_level--;\n\
    \                paren_end = i;\n                if (paren_count == 0) {\n   \
    \                 result.Add(new long(paren_level));\n                    paren_count\
    \ = 0;\n                    paren_level = 0;\n                    paren_start\
    \ = 0;\n                    paren_end = 0;\n                }\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long depth = 0;\n        for (int i = 0; i < paren_string.Length; i++)\
    \ {\n            if (paren_string[i] == '(') {\n                depth++;\n   \
    \         }\n            else if (paren_string[i] == ')') {\n                depth--;\n\
    \            }\n            if (depth < 0) {\n                throw new Exception(\"\
    Invalid parentheses\");\n            }\n            if (depth == 0) {\n      \
    \          result.Add(depth);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        int depth = 0;\n       \
    \ int start = 0;\n        int end = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                depth++;\n \
    \               if (depth > 1) {\n                    result.Add(depth);\n   \
    \             }\n            }\n            else if (paren_string[end] == ')')\
    \ {\n                depth--;\n                if (depth > 0) {\n            \
    \        result.Add(depth);\n                }\n            }\n            end++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int i = 0;\n        while (i < paren_string.Length) {\n            int\
    \ j = i;\n            while (j < paren_string.Length && paren_string[j] != '(')\n\
    \                j++;\n            if (j == paren_string.Length)\n           \
    \     throw new Exception(\"Invalid input\");\n            int k = j;\n      \
    \      while (k < paren_string.Length && paren_string[k] != ')')\n           \
    \     k++;\n            if (k == paren_string.Length)\n                throw new\
    \ Exception(\"Invalid input\");\n            if (j - i > result.Count)\n     \
    \           result.Add(0);\n            result[result.Count - (j - i)]++;\n  \
    \          i = k + 1;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int start = 0;\n        int end = 0;\n \
    \       int max_depth = 0;\n        while (end < paren_string.Length) {\n    \
    \        start = end;\n            while (end < paren_string.Length && paren_string[end]\
    \ != '(')\n                end++;\n            if (end - start > max_depth)\n\
    \                max_depth = end - start;\n            if (end < paren_string.Length\
    \ && paren_string[end] == '(') {\n                end++;\n                while\
    \ (end < paren_string.Length && paren_string[end] != ')')\n                  \
    \  end++;\n                if (end - start > max_depth)\n                    max_depth\
    \ = end - start;\n                end++;\n            }\n            result.Add(max_depth);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int max_depth = 0;\n        int current_depth = 0;\n        int i = 0;\n\
    \        while (i < paren_string.Length) {\n            if (paren_string[i] ==\
    \ '(') {\n                current_depth++;\n            }\n            else if\
    \ (paren_string[i] == ')') {\n                current_depth--;\n            }\n\
    \            if (current_depth > max_depth) {\n                max_depth = current_depth;\n\
    \            }\n            i++;\n        }\n        for (int j = 0; j < max_depth;\
    \ j++) {\n            result.Add(1L);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        int depth = 0;\n      \
    \  for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                depth++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                depth--;\n            }\n            if (depth ==\
    \ 0) {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        int index\
    \ = 0;\n        while (index < paren_string.Length) {\n            int open_paren_count\
    \ = 0;\n            int close_paren_count = 0;\n            while (index < paren_string.Length\
    \ && paren_string[index] == '(') {\n                open_paren_count++;\n    \
    \            index++;\n            }\n            while (index < paren_string.Length\
    \ && paren_string[index] == ')') {\n                close_paren_count++;\n   \
    \             index++;\n            }\n            if (open_paren_count == close_paren_count)\
    \ {\n                result.Add(open_paren_count);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     int start = 0;\n        int end = 0;\n        int level = 0;\n        while\
    \ (end < paren_string.Length) {\n            if (paren_string[end] == '(') {\n\
    \                level++;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                level--;\n            }\n            if (level ==\
    \ 0) {\n                result.Add(end - start);\n                start = end\
    \ + 1;\n            }\n            end++;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (paren_string == \"\"\
    ) return result;\n        int start = 0;\n        int end = 0;\n        int depth\
    \ = 0;\n        while (end < paren_string.Length) {\n            if (paren_string[end]\
    \ == '(') {\n                depth++;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                depth--;\n            }\n            if (depth ==\
    \ 0) {\n                result.Add(end - start);\n                start = end\
    \ + 1;\n            }\n            end++;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        int max_depth = 0;\n   \
    \     int depth = 0;\n        int start = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                depth++;\n\
    \                if (depth > max_depth) {\n                    max_depth = depth;\n\
    \                    start = i;\n                }\n            }\n          \
    \  else if (paren_string[i] == ')') {\n                depth--;\n            }\n\
    \        }\n        for (int i = start; i < paren_string.Length; i++) {\n    \
    \        if (paren_string[i] == '(') {\n                result.Add(i - start +\
    \ 1);\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int max_depth = 0;\n        int depth =\
    \ 0;\n        int i = 0;\n        while (i < paren_string.Length) {\n        \
    \    if (paren_string[i] == '(') {\n                depth++;\n            }\n\
    \            else if (paren_string[i] == ')') {\n                depth--;\n  \
    \          }\n            if (depth > max_depth) {\n                max_depth\
    \ = depth;\n            }\n            i++;\n        }\n        for (int j = 0;\
    \ j < max_depth; j++) {\n            result.Add(1L);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        int index\
    \ = 0;\n        while (index < paren_string.Length) {\n            int level =\
    \ 0;\n            while (index < paren_string.Length && paren_string[index] ==\
    \ '(') {\n                level++;\n                index++;\n            }\n\
    \            if (level > 0) {\n                result.Add(level);\n          \
    \  }\n            while (index < paren_string.Length && paren_string[index] !=\
    \ ')') {\n                index++;\n            }\n            index++;\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int max_depth = 0;\n        int current_depth = 0;\n        int start_index\
    \ = 0;\n        int end_index = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                current_depth++;\n\
    \                if (current_depth > max_depth) {\n                    max_depth\
    \ = current_depth;\n                    start_index = i;\n                }\n\
    \            }\n            else if (paren_string[i] == ')') {\n             \
    \   current_depth--;\n                if (current_depth < 0) {\n             \
    \       end_index = i;\n                    result.Add(ParseNestedParens(paren_string.Substring(start_index,\
    \ end_index - start_index + 1)));\n                    start_index = i + 1;\n\
    \                    end_index = start_index;\n                    current_depth\
    \ = 0;\n                }\n            }\n        }\n        if (start_index <\
    \ end_index) {\n            result.Add(ParseNestedParens(paren_string.Substring(start_index,\
    \ end_index - start_index + 1)));\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long depth = 0;\n        for\
    \ (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                depth++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                depth--;\n            }\n            if (depth <\
    \ 0) {\n                throw new Exception(\"Invalid parentheses string\");\n\
    \            }\n            if (depth == 0) {\n                result.Add(depth);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int start = 0;\n        int end = 0;\n        int\
    \ level = 0;\n        while (end < paren_string.Length) {\n            if (paren_string[end]\
    \ == '(') {\n                level++;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                level--;\n            }\n            if (level ==\
    \ 0) {\n                result.Add(start);\n                start = end + 1;\n\
    \            }\n            end++;\n        }\n        result.Add(end);\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ long depth = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n \
    \           if (paren_string[i] == '(') {\n                depth++;\n        \
    \    }\n            else if (paren_string[i] == ')') {\n                depth--;\n\
    \            }\n            if (depth < 0) {\n                throw new Exception(\"\
    Invalid parentheses string\");\n            }\n            if (depth == 0) {\n\
    \                result.Add(depth);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        int max_depth\
    \ = 0;\n        int cur_depth = 0;\n        int start_index = 0;\n        int\
    \ end_index = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n  \
    \          if (paren_string[i] == '(') {\n                cur_depth++;\n     \
    \           if (cur_depth > max_depth) {\n                    max_depth = cur_depth;\n\
    \                    start_index = i;\n                }\n            }\n    \
    \        else if (paren_string[i] == ')') {\n                cur_depth--;\n  \
    \              if (cur_depth < 0) {\n                    end_index = i;\n    \
    \                result.Add(ParseNestedParens(paren_string.Substring(start_index,\
    \ end_index - start_index + 1)));\n                    start_index = i + 1;\n\
    \                }\n            }\n        }\n        if (start_index < end_index)\
    \ {\n            result.Add(ParseNestedParens(paren_string.Substring(start_index,\
    \ end_index - start_index + 1)));\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        int start = 0;\n        int\
    \ end = 0;\n        while (end < paren_string.Length) {\n            if (paren_string[end]\
    \ == '(') {\n                start = end;\n            }\n            else if\
    \ (paren_string[end] == ')') {\n                end++;\n                if (start\
    \ == end) {\n                    result.Add(1);\n                }\n         \
    \       else {\n                    result.Add(result[start] + 1);\n         \
    \       }\n            }\n            end++;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        int depth = 0;\n       \
    \ for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                depth++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                depth--;\n            }\n            if (depth ==\
    \ 0) {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        int start\
    \ = 0;\n        int end = 0;\n        int level = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                level++;\n \
    \           }\n            else if (paren_string[end] == ')') {\n            \
    \    level--;\n            }\n            if (level == 0) {\n                result.Add(end\
    \ - start);\n                start = end + 1;\n            }\n            end++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int depth = 0;\n        int start = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                depth++;\n\
    \                start = i;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                depth--;\n                if (depth < 0) {\n    \
    \                result.Add(start, i - start);\n                    start = i\
    \ + 1;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        int depth = 0;\n       \
    \ for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                depth++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                depth--;\n            }\n            if (depth ==\
    \ 0) {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        int start\
    \ = 0;\n        int end = 0;\n        int max_depth = 0;\n        while (end <\
    \ paren_string.Length) {\n            if (paren_string[end] == '(') {\n      \
    \          start = end;\n                end++;\n                while (end <\
    \ paren_string.Length && paren_string[end] != ')') {\n                    end++;\n\
    \                }\n                if (end < paren_string.Length) {\n       \
    \             end++;\n                    max_depth++;\n                }\n  \
    \          }\n            else {\n                if (end > start) {\n       \
    \             result.Add(max_depth);\n                }\n                max_depth\
    \ = 0;\n                start = end;\n                end++;\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int i = 0;\n        while (i < paren_string.Length) {\n            int\
    \ j = i;\n            while (j < paren_string.Length && paren_string[j] != ' ')\n\
    \                j++;\n            if (j - i > 0) {\n                long level\
    \ = 0;\n                for (int k = i; k < j; k++) {\n                    if\
    \ (paren_string[k] == '(')\n                        level++;\n               \
    \     else if (paren_string[k] == ')')\n                        level--;\n   \
    \             }\n                if (level > 0)\n                    result.Add(level);\n\
    \            }\n            i = j + 1;\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        int i = 0;\n        while\
    \ (i < paren_string.Length) {\n            int j = i;\n            while (j <\
    \ paren_string.Length && paren_string[j] != '(')\n                j++;\n     \
    \       if (j < paren_string.Length) {\n                int k = j;\n         \
    \       while (k < paren_string.Length && paren_string[k] != ')')\n          \
    \          k++;\n                if (k < paren_string.Length) {\n            \
    \        result.Add(k - j);\n                    i = k + 1;\n                }\n\
    \                else\n                    throw new Exception(\"Invalid parens\"\
    );\n            }\n            else\n                throw new Exception(\"Invalid\
    \ parens\");\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        int paren_count = 0;\n        int paren_level = 0;\n\
    \        for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                paren_count++;\n                paren_level++;\n\
    \            }\n            else if (paren_string[i] == ')') {\n             \
    \   paren_count--;\n                if (paren_count == 0) {\n                \
    \    result.Add(paren_level);\n                }\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    int start = 0;\n        int end = 0;\n        int depth = 0;\n        while\
    \ (end < paren_string.Length) {\n            if (paren_string[end] == '(') {\n\
    \                depth++;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                depth--;\n            }\n            if (depth ==\
    \ 0) {\n                result.Add(start);\n                start = end + 1;\n\
    \            }\n            end++;\n        }\n        result.Add(start);\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   if (paren_string == \"\") return result;\n        int i = 0;\n        int\
    \ j = 0;\n        while (i < paren_string.Length) {\n            if (paren_string[i]\
    \ == '(') {\n                j++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                j--;\n            }\n            i++;\n         \
    \   if (j == 0) {\n                result.Add(i - j);\n            }\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int max_depth = 0;\n        int current_depth = 0;\n        int start_index\
    \ = 0;\n        int end_index = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                current_depth++;\n\
    \                if (current_depth > max_depth) {\n                    max_depth\
    \ = current_depth;\n                    start_index = i;\n                }\n\
    \            }\n            else if (paren_string[i] == ')') {\n             \
    \   current_depth--;\n                if (current_depth < 0) {\n             \
    \       end_index = i;\n                    result.Add(ParseNestedParens(paren_string.Substring(start_index,\
    \ end_index - start_index)));\n                    start_index = i + 1;\n    \
    \            }\n            }\n        }\n        if (start_index < end_index)\
    \ {\n            result.Add(ParseNestedParens(paren_string.Substring(start_index,\
    \ end_index - start_index)));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int level = 0;\n        int start = 0;\n\
    \        int end = 0;\n        while (end < paren_string.Length) {\n         \
    \   if (paren_string[end] == '(') {\n                level++;\n            }\n\
    \            else if (paren_string[end] == ')') {\n                level--;\n\
    \            }\n            if (level == 0) {\n                result.Add(end\
    \ - start);\n                start = end + 1;\n            }\n            end++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (paren_string == \"\") return result;\n        int i = 0;\n      \
    \  int j = 0;\n        int level = 0;\n        while (i < paren_string.Length)\
    \ {\n            if (paren_string[i] == '(') {\n                level++;\n   \
    \         }\n            else if (paren_string[i] == ')') {\n                level--;\n\
    \            }\n            if (level == 0) {\n                result.Add(j);\n\
    \                j = i;\n            }\n            i++;\n        }\n        result.Add(j);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     int paren_count = 0;\n        int paren_index = 0;\n        while (paren_index\
    \ < paren_string.Length) {\n            if (paren_string[paren_index] == '(')\
    \ {\n                paren_count++;\n            }\n            else if (paren_string[paren_index]\
    \ == ')') {\n                paren_count--;\n            }\n            paren_index++;\n\
    \            if (paren_count == 0) {\n                result.Add(paren_count);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int max_depth = 0;\n        int depth = 0;\n  \
    \      int start = 0;\n        int end = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                depth++;\n \
    \               if (depth > max_depth) {\n                    max_depth = depth;\n\
    \                    start = end;\n                }\n            }\n        \
    \    else if (paren_string[end] == ')') {\n                depth--;\n        \
    \        if (depth == 0) {\n                    result.Add(start);\n         \
    \           result.Add(end);\n                    end++;\n                }\n\
    \            }\n            end++;\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (paren_string == null ||\
    \ paren_string.Length == 0)\n            return result;\n\n        int i = 0;\n\
    \        int j = 0;\n        while (i < paren_string.Length) {\n            if\
    \ (paren_string[i] == '(') {\n                j = i;\n                while (j\
    \ < paren_string.Length && paren_string[j] != ')')\n                    j++;\n\
    \                if (j < paren_string.Length) {\n                    result.Add(j\
    \ - i);\n                    i = j + 1;\n                }\n            }\n  \
    \          else {\n                i++;\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        int start\
    \ = 0;\n        int end = 0;\n        int max_depth = 0;\n        while (end <\
    \ paren_string.Length) {\n            if (paren_string[end] == '(') {\n      \
    \          start = end;\n                end = start + 1;\n                while\
    \ (end < paren_string.Length && paren_string[end] != ')') {\n                \
    \    end = end + 1;\n                }\n                if (end < paren_string.Length)\
    \ {\n                    end = end + 1;\n                    max_depth = max_depth\
    \ + 1;\n                }\n            }\n            else {\n               \
    \ end = end + 1;\n            }\n        }\n        if (max_depth > 0) {\n   \
    \         for (int i = 0; i < max_depth; i++) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int index = 0;\n        while (index < paren_string.Length)\
    \ {\n            int level = 0;\n            while (index < paren_string.Length\
    \ && paren_string[index] == '(') {\n                level++;\n               \
    \ index++;\n            }\n            while (index < paren_string.Length && paren_string[index]\
    \ == ')') {\n                level--;\n                index++;\n            }\n\
    \            if (level == 0) {\n                result.Add(level);\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int max_depth = 0;\n        int start_index = 0;\n        int end_index\
    \ = 0;\n        int depth = 0;\n        while (end_index < paren_string.Length)\
    \ {\n            if (paren_string[end_index] == '(') {\n                depth++;\n\
    \                if (depth > max_depth) {\n                    max_depth = depth;\n\
    \                    start_index = end_index;\n                }\n           \
    \ }\n            else if (paren_string[end_index] == ')') {\n                depth--;\n\
    \                if (depth == 0) {\n                    result.Add(start_index);\n\
    \                    result.Add(end_index);\n                    start_index =\
    \ end_index + 1;\n                }\n            }\n            end_index++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int paren_count = 0;\n        int paren_level = 0;\n        for (int\
    \ i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i] == '(')\
    \ {\n                paren_count++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                paren_count--;\n            }\n            else if\
    \ (paren_string[i] == '(' && paren_count == 0) {\n                paren_level++;\n\
    \            }\n            else if (paren_string[i] == ')' && paren_count ==\
    \ 0) {\n                paren_level--;\n            }\n            if (paren_count\
    \ == 0 && paren_level == 0) {\n                result.Add(i);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int level = 0;\n        int i = 0;\n        while (i < paren_string.Length)\
    \ {\n            if (paren_string[i] == '(') {\n                level++;\n   \
    \         }\n            else if (paren_string[i] == ')') {\n                level--;\n\
    \            }\n            if (level < 0) {\n                throw new Exception(\"\
    Invalid parentheses\");\n            }\n            if (level == 0) {\n      \
    \          result.Add(i);\n            }\n            i++;\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        int\
    \ start = 0;\n        int end = 0;\n        int level = 0;\n        while (end\
    \ < paren_string.Length) {\n            if (paren_string[end] == '(') {\n    \
    \            level++;\n            }\n            else if (paren_string[end] ==\
    \ ')') {\n                level--;\n            }\n            if (level == 0)\
    \ {\n                result.Add(start);\n                start = end + 1;\n  \
    \          }\n            end++;\n        }\n        result.Add(start);\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ int paren_count = 0;\n        int paren_depth = 0;\n        int i = 0;\n   \
    \     while (i < paren_string.Length) {\n            if (paren_string[i] == '(')\
    \ {\n                paren_count++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                paren_count--;\n            }\n            else if\
    \ (paren_string[i] == '(' && paren_count == 0) {\n                paren_depth++;\n\
    \            }\n            else if (paren_string[i] == ')' && paren_count ==\
    \ 0) {\n                paren_depth--;\n            }\n            i++;\n    \
    \    }\n        for (int j = 0; j < paren_depth; j++) {\n            result.Add(1);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int start = 0;\n        int end = 0;\n        int level = 0;\n      \
    \  while (end < paren_string.Length) {\n            if (paren_string[end] == '(')\
    \ {\n                level++;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                level--;\n            }\n            if (level ==\
    \ 0) {\n                result.Add(end - start);\n                start = end\
    \ + 1;\n            }\n            end++;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (paren_string == \"\"\
    ) return result;\n        int open_parens = 0;\n        int close_parens = 0;\n\
    \        for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                open_parens++;\n            }\n            else if\
    \ (paren_string[i] == ')') {\n                close_parens++;\n            }\n\
    \        }\n        if (open_parens == close_parens) {\n            result.Add(open_parens);\n\
    \            return result;\n        }\n        if (open_parens > close_parens)\
    \ {\n            for (int i = 0; i < paren_string.Length; i++) {\n           \
    \     if (paren_string[i] == '(') {\n                    open_parens++;\n    \
    \            }\n                else if (paren_string[i] == ')') {\n         \
    \           close_parens++;\n                }\n                if (open_parens\
    \ == close_parens) {\n                    result.Add(open_parens);\n         \
    \           return result;\n                }\n            }\n        }\n    \
    \    else {\n            for (int i = 0; i < paren_string.Length; i++) {\n   \
    \             if (paren_string[i] == '(') {\n                    open_parens++;\n\
    \                }\n                else if (paren_string[i] == ')') {\n     \
    \               close_parens++;\n                }\n                if (open_parens\
    \ == close_parens) {\n                    result.Add(open_parens);\n         \
    \           return result;\n                }\n            }\n        }\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ long depth = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n \
    \           if (paren_string[i] == '(') {\n                depth++;\n        \
    \    }\n            else if (paren_string[i] == ')') {\n                depth--;\n\
    \            }\n            if (depth < 0) {\n                throw new Exception(\"\
    Invalid parentheses string\");\n            }\n            if (depth == 0) {\n\
    \                result.Add(depth);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (paren_string\
    \ == \"\") return result;\n        int index = 0;\n        int level = 0;\n  \
    \      while (index < paren_string.Length) {\n            if (paren_string[index]\
    \ == '(') {\n                level++;\n            }\n            else if (paren_string[index]\
    \ == ')') {\n                level--;\n            }\n            if (level ==\
    \ 0) {\n                result.Add(index - level);\n            }\n          \
    \  index++;\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        int i = 0;\n        while (i < paren_string.Length)\
    \ {\n            int j = i;\n            while (j < paren_string.Length && paren_string[j]\
    \ != ' ')\n                j++;\n            if (j - i > 0) {\n              \
    \  result.Add(Long.Parse(paren_string.Substring(i, j - i)));\n            }\n\
    \            i = j + 1;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int index = 0;\n        while (index < paren_string.Length)\
    \ {\n            int open_paren_count = 0;\n            int close_paren_count\
    \ = 0;\n            while (index < paren_string.Length && paren_string[index]\
    \ == '(') {\n                open_paren_count++;\n                index++;\n \
    \           }\n            while (index < paren_string.Length && paren_string[index]\
    \ == ')') {\n                close_paren_count++;\n                index++;\n\
    \            }\n            if (open_paren_count == close_paren_count) {\n   \
    \             result.Add(open_paren_count);\n            }\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ max_nesting = 0;\n        int start_index = 0;\n        int end_index = 0;\n\
    \        while (end_index < paren_string.Length) {\n            start_index =\
    \ end_index;\n            while (end_index < paren_string.Length && paren_string[end_index]\
    \ != ' ')\n                end_index++;\n            if (end_index - start_index\
    \ > 0) {\n                long nesting = 0;\n                for (int i = start_index;\
    \ i < end_index; i++) {\n                    if (paren_string[i] == '(')\n   \
    \                     nesting++;\n                    else if (paren_string[i]\
    \ == ')')\n                        nesting--;\n                }\n           \
    \     if (nesting > max_nesting)\n                    max_nesting = nesting;\n\
    \            }\n            end_index++;\n        }\n        for (int i = 0; i\
    \ < max_nesting; i++)\n            result.Add(i);\n        return result;", " \
    \       List<long> result = new List<long>();\n        int start = 0;\n      \
    \  int end = 0;\n        int level = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                level++;\n \
    \           }\n            else if (paren_string[end] == ')') {\n            \
    \    level--;\n            }\n            if (level == 0) {\n                result.Add(end\
    \ - start);\n                start = end + 1;\n            }\n            end++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (paren_string == null || paren_string.Length == 0)\n            return\
    \ result;\n        int paren_count = 0;\n        int paren_index = 0;\n      \
    \  int paren_depth = 0;\n        while (paren_index < paren_string.Length) {\n\
    \            if (paren_string[paren_index] == '(') {\n                paren_count++;\n\
    \            }\n            else if (paren_string[paren_index] == ')') {\n   \
    \             paren_count--;\n            }\n            else if (paren_string[paren_index]\
    \ == ' ') {\n                if (paren_count == 0) {\n                    result.Add(paren_depth);\n\
    \                    paren_depth = 0;\n                }\n            }\n    \
    \        paren_index++;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long depth = 0;\n        for (int i = 0;\
    \ i < paren_string.Length; i++) {\n            if (paren_string[i] == '(') {\n\
    \                depth++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                depth--;\n            }\n            if (depth <\
    \ 0) {\n                throw new Exception(\"Invalid input\");\n            }\n\
    \            if (depth == 0) {\n                result.Add(depth);\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int paren_count = 0;\n        int start_index = 0;\n        int end_index\
    \ = 0;\n        int max_nesting = 0;\n        while (end_index < paren_string.Length)\
    \ {\n            if (paren_string[end_index] == '(') {\n                paren_count++;\n\
    \            }\n            else if (paren_string[end_index] == ')') {\n     \
    \           paren_count--;\n            }\n            if (paren_count == 0) {\n\
    \                start_index = end_index;\n            }\n            end_index++;\n\
    \            if (paren_count > max_nesting) {\n                max_nesting = paren_count;\n\
    \            }\n        }\n        for (int i = start_index; i < end_index; i++)\
    \ {\n            if (paren_string[i] == '(') {\n                paren_count++;\n\
    \            }\n            else if (paren_string[i] == ')') {\n             \
    \   paren_count--;\n            }\n            if (paren_count == 0) {\n     \
    \           result.Add(i - start_index);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        int max_depth\
    \ = 0;\n        int cur_depth = 0;\n        int i = 0;\n        while (i < paren_string.Length)\
    \ {\n            if (paren_string[i] == '(') {\n                cur_depth++;\n\
    \            }\n            else if (paren_string[i] == ')') {\n             \
    \   cur_depth--;\n            }\n            if (cur_depth > max_depth) {\n  \
    \              max_depth = cur_depth;\n            }\n            i++;\n     \
    \   }\n        for (int j = 0; j < max_depth; j++) {\n            result.Add(1L);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int start = 0;\n        int end = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                start = end;\n\
    \            }\n            else if (paren_string[end] == ')') {\n           \
    \     end++;\n                if (start != end) {\n                    result.Add(end\
    \ - start - 1);\n                }\n                start = end;\n           \
    \ }\n            end++;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int start = 0;\n        int end = 0;\n \
    \       int depth = 0;\n        while (end < paren_string.Length) {\n        \
    \    if (paren_string[end] == '(') {\n                depth++;\n            }\n\
    \            else if (paren_string[end] == ')') {\n                depth--;\n\
    \            }\n            if (depth == 0) {\n                result.Add(end\
    \ - start);\n                start = end + 1;\n            }\n            end++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int start = 0;\n        int end = 0;\n        while (end < paren_string.Length)\
    \ {\n            start = end;\n            while (end < paren_string.Length &&\
    \ paren_string[end] != '(')\n                end++;\n            if (end < paren_string.Length)\
    \ {\n                start++;\n                end++;\n                while (end\
    \ < paren_string.Length && paren_string[end] != ')')\n                    end++;\n\
    \                if (end < paren_string.Length) {\n                    start++;\n\
    \                    end++;\n                }\n            }\n            result.Add(end\
    \ - start);\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (paren_string.Length == 0) return result;\n  \
    \      int i = 0;\n        while (i < paren_string.Length) {\n            int\
    \ j = i;\n            while (j < paren_string.Length && paren_string[j] != ' ')\
    \ j++;\n            if (j - i == 0) {\n                result.Add(0L);\n     \
    \           i++;\n            }\n            else {\n                long level\
    \ = 0;\n                while (i < j) {\n                    if (paren_string[i]\
    \ == '(') level++;\n                    else if (paren_string[i] == ')') level--;\n\
    \                    i++;\n                }\n                result.Add(level);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (paren_string.Length == 0)\n            return\
    \ result;\n        int start = 0;\n        int end = 0;\n        int level = 0;\n\
    \        while (end < paren_string.Length) {\n            if (paren_string[end]\
    \ == '(') {\n                level++;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                level--;\n            }\n            if (level ==\
    \ 0) {\n                result.Add(end - start);\n                start = end\
    \ + 1;\n            }\n            end++;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        int max_depth = 0;\n   \
    \     int current_depth = 0;\n        int i = 0;\n        while (i < paren_string.Length)\
    \ {\n            if (paren_string[i] == '(') {\n                current_depth++;\n\
    \            }\n            else if (paren_string[i] == ')') {\n             \
    \   current_depth--;\n            }\n            if (current_depth > max_depth)\
    \ {\n                max_depth = current_depth;\n            }\n            i++;\n\
    \        }\n        for (int j = 0; j < max_depth; j++) {\n            result.Add(1L);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int index = 0;\n        while (index < paren_string.Length) {\n     \
    \       int start = index;\n            int end = index;\n            while (end\
    \ < paren_string.Length && paren_string[end] != ' ') {\n                end++;\n\
    \            }\n            if (end - start > 0) {\n                result.Add(Long.Parse(paren_string.Substring(start,\
    \ end - start)));\n            }\n            index = end;\n            if (index\
    \ < paren_string.Length) {\n                index++;\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     int paren_count = 0;\n        int paren_depth = 0;\n        int paren_start\
    \ = 0;\n        int paren_end = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                paren_count++;\n\
    \                paren_depth = 0;\n                paren_start = i;\n        \
    \    }\n            else if (paren_string[i] == ')') {\n                paren_count--;\n\
    \                paren_depth = 0;\n                paren_end = i;\n          \
    \  }\n            else if (paren_string[i] == '(') {\n                paren_depth++;\n\
    \            }\n            else if (paren_string[i] == ')') {\n             \
    \   paren_depth--;\n            }\n            if (paren_count == 0 && paren_depth\
    \ == 0) {\n                result.Add(new long(paren_start));\n              \
    \  result.Add(new long(paren_end));\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max_nesting\
    \ = 0;\n        int start = 0;\n        int end = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                start = end;\n\
    \                end++;\n                while (end < paren_string.Length && paren_string[end]\
    \ != ')') {\n                    end++;\n                }\n                if\
    \ (end < paren_string.Length) {\n                    end++;\n                \
    \    max_nesting++;\n                }\n            }\n            else {\n  \
    \              if (max_nesting > 0) {\n                    result.Add(start);\n\
    \                    result.Add(end - start - 1);\n                    max_nesting--;\n\
    \                }\n                start = end;\n                end++;\n   \
    \         }\n        }\n        if (max_nesting > 0) {\n            result.Add(start);\n\
    \            result.Add(end - start - 1);\n            max_nesting--;\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long depth = 0;\n        for (int i = 0; i < paren_string.Length; i++)\
    \ {\n            if (paren_string[i] == '(') {\n                depth++;\n   \
    \         }\n            else if (paren_string[i] == ')') {\n                depth--;\n\
    \            }\n            if (depth < 0) {\n                throw new Exception(\"\
    Invalid parentheses\");\n            }\n            if (depth == 0) {\n      \
    \          result.Add(depth);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (paren_string.Length\
    \ == 0) return result;\n        int i = 0;\n        int j = 0;\n        while\
    \ (i < paren_string.Length) {\n            if (paren_string[i] == '(') {\n   \
    \             j = i;\n                while (j < paren_string.Length && paren_string[j]\
    \ != ')') j++;\n                if (j < paren_string.Length) {\n             \
    \       result.Add(j - i);\n                    i = j + 1;\n                }\n\
    \            }\n            else {\n                i++;\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (paren_string.Length == 0) return result;\n        int start = 0;\n\
    \        int end = 0;\n        int level = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                level++;\n \
    \           }\n            else if (paren_string[end] == ')') {\n            \
    \    level--;\n            }\n            if (level == 0) {\n                result.Add(end\
    \ - start);\n                start = end + 1;\n            }\n            end++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int paren_count = 0;\n        int paren_level = 0;\n        for (int\
    \ i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i] == '(')\
    \ {\n                paren_count++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                paren_count--;\n            }\n            else if\
    \ (paren_count == 0) {\n                if (paren_string[i] == '(') {\n      \
    \              paren_level++;\n                }\n                else if (paren_string[i]\
    \ == ')') {\n                    paren_level--;\n                }\n         \
    \       if (paren_level == 0) {\n                    result.Add(i);\n        \
    \        }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int index = 0;\n        while (index < paren_string.Length)\
    \ {\n            int level = 0;\n            while (index < paren_string.Length\
    \ && paren_string[index] == '(') {\n                level++;\n               \
    \ index++;\n            }\n            while (index < paren_string.Length && paren_string[index]\
    \ == ')') {\n                level--;\n                index++;\n            }\n\
    \            if (level == 0) {\n                result.Add(level);\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (paren_string == \"\") return result;\n        int start = 0;\n  \
    \      int end = 0;\n        int level = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                level++;\n \
    \           }\n            else if (paren_string[end] == ')') {\n            \
    \    level--;\n            }\n            if (level == 0) {\n                result.Add(end\
    \ - start);\n                start = end + 1;\n            }\n            end++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int i = 0;\n        int j = 0;\n        while (i < paren_string.Length)\
    \ {\n            if (paren_string[i] == '(') {\n                j++;\n       \
    \     }\n            else if (paren_string[i] == ')') {\n                j--;\n\
    \            }\n            if (j == 0) {\n                result.Add(i);\n  \
    \          }\n            i++;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (paren_string == \"\")\n            return\
    \ result;\n        int i = 0;\n        while (i < paren_string.Length) {\n   \
    \         int j = i;\n            while (j < paren_string.Length && paren_string[j]\
    \ != ' ')\n                j++;\n            if (j - i > 0) {\n              \
    \  result.Add(Long.Parse(paren_string.Substring(i, j - i)));\n            }\n\
    \            i = j + 1;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int start = 0;\n        int end = 0;\n \
    \       int depth = 0;\n        while (end < paren_string.Length) {\n        \
    \    if (paren_string[end] == '(') {\n                depth++;\n            }\n\
    \            else if (paren_string[end] == ')') {\n                depth--;\n\
    \            }\n            if (depth == 0) {\n                result.Add(end\
    \ - start);\n                start = end + 1;\n            }\n            end++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long depth = 0;\n        for (int i = 0; i < paren_string.Length; i++)\
    \ {\n            if (paren_string[i] == '(') {\n                depth++;\n   \
    \         }\n            else if (paren_string[i] == ')') {\n                depth--;\n\
    \            }\n            if (depth < 0) {\n                throw new Exception(\"\
    Invalid parentheses\");\n            }\n            if (depth == 0) {\n      \
    \          result.Add(depth);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        int index = 0;\n       \
    \ while (index < paren_string.Length) {\n            int level = 0;\n        \
    \    while (index < paren_string.Length && paren_string[index] == '(') {\n   \
    \             level++;\n                index++;\n            }\n            while\
    \ (index < paren_string.Length && paren_string[index] == ')') {\n            \
    \    level--;\n                index++;\n            }\n            if (level\
    \ == 0) {\n                result.Add(index);\n            }\n        }\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ int depth = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n  \
    \          if (paren_string[i] == '(') {\n                depth++;\n         \
    \   }\n            else if (paren_string[i] == ')') {\n                depth--;\n\
    \            }\n            if (depth == 0) {\n                result.Add(i -\
    \ depth);\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (paren_string.Length == 0) return result;\n\
    \        int current_level = 0;\n        int start_index = 0;\n        for (int\
    \ i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i] == '(')\
    \ {\n                current_level++;\n                if (current_level == 1)\
    \ start_index = i;\n            }\n            else if (paren_string[i] == ')')\
    \ {\n                current_level--;\n                if (current_level == 0)\
    \ {\n                    result.Add(start_index);\n                    start_index\
    \ = i + 1;\n                }\n            }\n        }\n        if (current_level\
    \ != 0) {\n            throw new Exception(\"Invalid parentheses string\");\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int index = 0;\n        int level = 0;\n        while (index < paren_string.Length)\
    \ {\n            if (paren_string[index] == '(') {\n                level++;\n\
    \            }\n            else if (paren_string[index] == ')') {\n         \
    \       level--;\n            }\n            index++;\n            if (level <\
    \ 0) {\n                throw new Exception(\"Invalid parentheses\");\n      \
    \      }\n            if (level == 0) {\n                result.Add(level);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int max_nesting = 0;\n        int start_index =\
    \ 0;\n        int end_index = 0;\n        while (end_index < paren_string.Length)\
    \ {\n            if (paren_string[end_index] == '(') {\n                max_nesting++;\n\
    \            }\n            else if (paren_string[end_index] == ')') {\n     \
    \           max_nesting--;\n            }\n            if (max_nesting == 0) {\n\
    \                start_index = end_index;\n            }\n            end_index++;\n\
    \        }\n        if (start_index == end_index) {\n            result.Add(0);\n\
    \        }\n        else {\n            result.Add(end_index - start_index - 1);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int i = 0;\n        while (i < paren_string.Length) {\n            int\
    \ j = i;\n            while (j < paren_string.Length && paren_string[j] != '(')\n\
    \                j++;\n            if (j == paren_string.Length)\n           \
    \     break;\n            int k = j;\n            while (k < paren_string.Length\
    \ && paren_string[k] != ')')\n                k++;\n            if (k == paren_string.Length)\n\
    \                throw new Exception(\"Invalid paren string\");\n            result.Add(k\
    \ - j);\n            i = k + 1;\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        int max_depth = 0;\n        int\
    \ depth = 0;\n        int start = 0;\n        int end = 0;\n        while (end\
    \ < paren_string.Length) {\n            if (paren_string[end] == '(') {\n    \
    \            depth++;\n                if (depth > max_depth) {\n            \
    \        max_depth = depth;\n                    start = end;\n              \
    \  }\n            }\n            else if (paren_string[end] == ')') {\n      \
    \          depth--;\n                if (depth == 0) {\n                    result.Add(start);\n\
    \                    result.Add(end);\n                    end++;\n          \
    \          while (end < paren_string.Length && paren_string[end] != '(')\n   \
    \                     end++;\n                    start = end;\n             \
    \   }\n            }\n            end++;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        int i = 0;\n        while\
    \ (i < paren_string.Length) {\n            int j = i;\n            while (j <\
    \ paren_string.Length && paren_string[j] != ' ')\n                j++;\n     \
    \       if (j - i > 0) {\n                long level = 0;\n                for\
    \ (int k = i; k < j; k++) {\n                    if (paren_string[k] == '(')\n\
    \                        level++;\n                    else if (paren_string[k]\
    \ == ')')\n                        level--;\n                }\n             \
    \   result.Add(level);\n            }\n            i = j + 1;\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  if (paren_string == \"\")\n            return result;\n        int start =\
    \ 0;\n        int end = 0;\n        int max_depth = 0;\n        while (end < paren_string.Length)\
    \ {\n            start = end;\n            while (end < paren_string.Length &&\
    \ paren_string[end] != '(')\n                end++;\n            if (end - start\
    \ > max_depth)\n                max_depth = end - start;\n            if (end\
    \ < paren_string.Length && paren_string[end] == '(') {\n                end++;\n\
    \                while (end < paren_string.Length && paren_string[end] != ')')\n\
    \                    end++;\n                if (end - start > max_depth)\n  \
    \                  max_depth = end - start;\n                if (end < paren_string.Length\
    \ && paren_string[end] == ')')\n                    end++;\n            }\n  \
    \      }\n        for (int i = 0; i < max_depth; i++)\n            result.Add(i);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     int max_depth = 0;\n        int depth = 0;\n        int i = 0;\n       \
    \ while (i < paren_string.Length) {\n            if (paren_string[i] == '(') {\n\
    \                depth++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                depth--;\n            }\n            if (depth >\
    \ max_depth) {\n                max_depth = depth;\n            }\n          \
    \  i++;\n        }\n        for (int j = 0; j < max_depth; j++) {\n          \
    \  result.Add(j);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int depth = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                depth++;\n\
    \            }\n            else if (paren_string[i] == ')') {\n             \
    \   depth--;\n            }\n            if (depth == 0) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (paren_string == \"\")\n            return result;\n\
    \        int start = 0;\n        int end = 0;\n        int level = 0;\n      \
    \  while (end < paren_string.Length) {\n            if (paren_string[end] == '(')\
    \ {\n                level++;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                level--;\n            }\n            if (level ==\
    \ 0) {\n                start = end;\n            }\n            end++;\n    \
    \    }\n        if (start == end) {\n            result.Add(0);\n            return\
    \ result;\n        }\n        for (int i = start; i < end; i++) {\n          \
    \  if (paren_string[i] == '(') {\n                result.Add(level);\n       \
    \     }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        int start = 0;\n        int end = 0;\n        int level\
    \ = 0;\n        while (end < paren_string.Length) {\n            if (paren_string[end]\
    \ == '(') {\n                level++;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                level--;\n            }\n            if (level ==\
    \ 0) {\n                result.Add(start);\n                start = end + 1;\n\
    \            }\n            end++;\n        }\n        result.Add(start);\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   long max_nesting = 0;\n        int start_index = 0;\n        int end_index\
    \ = 0;\n        while (end_index < paren_string.Length) {\n            if (paren_string[end_index]\
    \ == '(') {\n                max_nesting++;\n            }\n            else if\
    \ (paren_string[end_index] == ')') {\n                max_nesting--;\n       \
    \     }\n            if (max_nesting == 0) {\n                result.Add(start_index);\n\
    \                start_index = end_index + 1;\n            }\n            end_index++;\n\
    \        }\n        result.Add(start_index);\n        return result;", "     \
    \   List<long> result = new List<long>();\n        int depth = 0;\n        int\
    \ start = 0;\n        int end = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                depth++;\n \
    \           }\n            else if (paren_string[end] == ')') {\n            \
    \    depth--;\n            }\n            if (depth == 0) {\n                result.Add(start);\n\
    \                start = end + 1;\n            }\n            end++;\n       \
    \ }\n        result.Add(start);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max_nesting = 0;\n        int index\
    \ = 0;\n        while (index < paren_string.Length) {\n            if (paren_string[index]\
    \ == '(') {\n                if (index + 1 < paren_string.Length && paren_string[index\
    \ + 1] == '(') {\n                    index += 2;\n                    max_nesting++;\n\
    \                }\n                else {\n                    index++;\n   \
    \             }\n            }\n            else if (paren_string[index] == ')')\
    \ {\n                if (index + 1 < paren_string.Length && paren_string[index\
    \ + 1] == ')') {\n                    index += 2;\n                    max_nesting--;\n\
    \                }\n                else {\n                    index++;\n   \
    \             }\n            }\n            else {\n                index++;\n\
    \            }\n            if (max_nesting == 0) {\n                result.Add(max_nesting);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int level = 0;\n        int i = 0;\n        while\
    \ (i < paren_string.Length) {\n            if (paren_string[i] == '(') {\n   \
    \             level++;\n            }\n            else if (paren_string[i] ==\
    \ ')') {\n                level--;\n            }\n            if (level == 0)\
    \ {\n                result.Add(i - level);\n            }\n            i++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int depth = 0;\n        for (int i = 0; i < paren_string.Length; i++)\
    \ {\n            if (paren_string[i] == '(') {\n                depth++;\n   \
    \         }\n            else if (paren_string[i] == ')') {\n                depth--;\n\
    \            }\n            if (depth == 0) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long depth = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                depth++;\n\
    \            }\n            else if (paren_string[i] == ')') {\n             \
    \   depth--;\n            }\n            if (depth < 0) {\n                throw\
    \ new Exception(\"Invalid parentheses\");\n            }\n            if (depth\
    \ == 0) {\n                result.Add(depth);\n            }\n        }\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ int i = 0;\n        while (i < paren_string.Length) {\n            int j = i;\n\
    \            while (j < paren_string.Length && paren_string[j] != ' ')\n     \
    \           j++;\n            if (j - i > 0) {\n                result.Add(Long.Parse(paren_string.Substring(i,\
    \ j - i)));\n            }\n            i = j + 1;\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max_depth\
    \ = 0;\n        int i = 0;\n        while (i < paren_string.Length) {\n      \
    \      if (paren_string[i] == '(') {\n                max_depth++;\n         \
    \   }\n            else if (paren_string[i] == ')') {\n                max_depth--;\n\
    \            }\n            i++;\n        }\n        if (max_depth > 0) {\n  \
    \          throw new Exception(\"Invalid paren string\");\n        }\n       \
    \ i = 0;\n        while (i < paren_string.Length) {\n            if (paren_string[i]\
    \ == '(') {\n                result.Add(max_depth);\n                i++;\n  \
    \              while (i < paren_string.Length && paren_string[i] != '(') {\n \
    \                   i++;\n                }\n                i++;\n          \
    \  }\n            else if (paren_string[i] == ')') {\n                i++;\n \
    \               result.Add(max_depth);\n            }\n            else {\n  \
    \              i++;\n            }\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long max_nesting = 0;\n  \
    \      long cur_nesting = 0;\n        long start = 0;\n        long end = 0;\n\
    \        for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                cur_nesting++;\n            }\n            else if\
    \ (paren_string[i] == ')') {\n                cur_nesting--;\n            }\n\
    \            else if (paren_string[i] == ' ') {\n                if (cur_nesting\
    \ > max_nesting) {\n                    max_nesting = cur_nesting;\n         \
    \       }\n                if (cur_nesting == 0) {\n                    end =\
    \ i;\n                    result.Add(ParseNestedParens(paren_string.Substring(start,\
    \ end - start)));\n                    start = i + 1;\n                }\n   \
    \         }\n        }\n        if (cur_nesting > max_nesting) {\n           \
    \ max_nesting = cur_nesting;\n        }\n        if (cur_nesting == 0) {\n   \
    \         end = paren_string.Length;\n            result.Add(ParseNestedParens(paren_string.Substring(start,\
    \ end - start)));\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (paren_string == \"\")\n            return result;\n\
    \        int start = 0;\n        int end = 0;\n        int level = 0;\n      \
    \  while (end < paren_string.Length) {\n            if (paren_string[end] == '(')\
    \ {\n                level++;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                level--;\n            }\n            if (level ==\
    \ 0) {\n                result.Add(end - start);\n                start = end\
    \ + 1;\n            }\n            end++;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        int index = 0;\n       \
    \ while (index < paren_string.Length) {\n            int level = 0;\n        \
    \    while (index < paren_string.Length && paren_string[index] == '(') {\n   \
    \             level++;\n                index++;\n            }\n            if\
    \ (level == 0) {\n                result.Add(0);\n            }\n            else\
    \ {\n                result.Add(level);\n            }\n            while (index\
    \ < paren_string.Length && paren_string[index] != ')') {\n                index++;\n\
    \            }\n            index++;\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        int paren_count = 0;\n \
    \       int paren_depth = 0;\n        int paren_start = 0;\n        int paren_end\
    \ = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n            if\
    \ (paren_string[i] == '(') {\n                paren_count++;\n               \
    \ paren_depth = 0;\n                paren_start = i;\n            }\n        \
    \    else if (paren_string[i] == ')') {\n                paren_count--;\n    \
    \            paren_depth = 0;\n                paren_end = i;\n            }\n\
    \            else if (paren_string[i] == '(') {\n                paren_depth++;\n\
    \            }\n            else if (paren_string[i] == ')') {\n             \
    \   paren_depth--;\n            }\n            if (paren_count == 0 && paren_depth\
    \ == 0) {\n                result.Add(new long(paren_start));\n              \
    \  result.Add(new long(paren_end));\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        int max_depth\
    \ = 0;\n        int depth = 0;\n        int i = 0;\n        while (i < paren_string.Length)\
    \ {\n            if (paren_string[i] == '(') {\n                depth++;\n   \
    \         }\n            else if (paren_string[i] == ')') {\n                depth--;\n\
    \                if (depth < 0) {\n                    throw new Exception(\"\
    Invalid parentheses\");\n                }\n                if (depth > max_depth)\
    \ {\n                    max_depth = depth;\n                }\n            }\n\
    \            i++;\n        }\n        if (depth != 0) {\n            throw new\
    \ Exception(\"Invalid parentheses\");\n        }\n        i = 0;\n        while\
    \ (i < paren_string.Length) {\n            if (paren_string[i] == '(') {\n   \
    \             depth = 1;\n                while (i < paren_string.Length && depth\
    \ > 0) {\n                    if (paren_string[i] == '(') {\n                \
    \        depth++;\n                    }\n                    else if (paren_string[i]\
    \ == ')') {\n                        depth--;\n                    }\n       \
    \             i++;\n                }\n                if (depth != 0) {\n   \
    \                 throw new Exception(\"Invalid parentheses\");\n            \
    \    }\n                result.Add(max_depth);\n            }\n            i++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int level = 0;\n        int start = 0;\n        int end = 0;\n      \
    \  while (end < paren_string.Length) {\n            if (paren_string[end] == '(')\
    \ {\n                level++;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                level--;\n            }\n            if (level ==\
    \ 0) {\n                result.Add(end - start);\n                start = end\
    \ + 1;\n            }\n            end++;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (paren_string.Length\
    \ == 0)\n            return result;\n        int index = 0;\n        int level\
    \ = 0;\n        while (index < paren_string.Length) {\n            if (paren_string[index]\
    \ == '(') {\n                level++;\n            }\n            else if (paren_string[index]\
    \ == ')') {\n                level--;\n            }\n            index++;\n \
    \           if (level < 0) {\n                throw new Exception(\"Invalid parentheses\"\
    );\n            }\n            if (level == 0) {\n                result.Add(index);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int max_depth = 0;\n        int depth = 0;\n  \
    \      int start = 0;\n        int end = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                depth++;\n \
    \           }\n            else if (paren_string[end] == ')') {\n            \
    \    depth--;\n            }\n            if (depth == 0) {\n                if\
    \ (depth > max_depth) {\n                    max_depth = depth;\n            \
    \    }\n                start = end;\n            }\n            end++;\n    \
    \    }\n        if (depth != 0) {\n            throw new Exception(\"Invalid input\"\
    );\n        }\n        if (max_depth > 0) {\n            for (int i = 0; i < max_depth;\
    \ i++) {\n                result.Add(start);\n                start = start +\
    \ 1;\n            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int open_paren_count = 0;\n        int close_paren_count\
    \ = 0;\n        int open_paren_index = 0;\n        int close_paren_index = 0;\n\
    \        for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                open_paren_count++;\n                open_paren_index\
    \ = i;\n            }\n            else if (paren_string[i] == ')') {\n      \
    \          close_paren_count++;\n                close_paren_index = i;\n    \
    \        }\n        }\n        if (open_paren_count == close_paren_count) {\n\
    \            result.Add(open_paren_count);\n        }\n        else {\n      \
    \      result.Add(open_paren_count);\n            result.Add(close_paren_count);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int start = 0;\n        int end = 0;\n        int depth = 0;\n      \
    \  while (end < paren_string.Length) {\n            if (paren_string[end] == '(')\
    \ {\n                depth++;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                depth--;\n            }\n            if (depth ==\
    \ 0) {\n                result.Add(end - start);\n                start = end\
    \ + 1;\n            }\n            end++;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        int depth = 0;\n       \
    \ int start = 0;\n        int end = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                depth++;\n\
    \                start = i;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                depth--;\n                end = i;\n            \
    \    if (depth == 0) {\n                    result.Add(end - start);\n       \
    \         }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int level = 0;\n        for (int i = 0;\
    \ i < paren_string.Length; i++) {\n            if (paren_string[i] == '(') {\n\
    \                level++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                level--;\n            }\n            if (level <\
    \ 0) {\n                throw new Exception(\"Invalid parentheses\");\n      \
    \      }\n            if (level == 0) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        int paren_count = 0;\n        int paren_level = 0;\n\
    \        for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                paren_count++;\n            }\n            else if\
    \ (paren_string[i] == ')') {\n                paren_count--;\n            }\n\
    \            if (paren_count == 0) {\n                if (paren_level == 0) {\n\
    \                    result.Add(i);\n                }\n                paren_level--;\n\
    \            }\n            else if (paren_count > 0) {\n                paren_level++;\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (paren_string == \"\") return result;\n    \
    \    int open_parens = 0;\n        int close_parens = 0;\n        int level =\
    \ 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n            char\
    \ c = paren_string[i];\n            if (c == '(') {\n                open_parens++;\n\
    \            }\n            else if (c == ')') {\n                close_parens++;\n\
    \            }\n            else if (c == ' ') {\n                if (open_parens\
    \ == close_parens) {\n                    result.Add(level);\n               \
    \ }\n                open_parens = 0;\n                close_parens = 0;\n   \
    \             level = 0;\n            }\n            else {\n                level++;\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int max_depth = 0;\n        int current_depth =\
    \ 0;\n        int start_index = 0;\n        int end_index = 0;\n        for (int\
    \ i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i] == '(')\
    \ {\n                current_depth++;\n                if (current_depth > max_depth)\
    \ {\n                    max_depth = current_depth;\n                    start_index\
    \ = i;\n                }\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                current_depth--;\n                if (current_depth\
    \ < 0) {\n                    end_index = i;\n                    result.Add(ParseNestedParens(paren_string.Substring(start_index,\
    \ end_index - start_index + 1)));\n                    start_index = i + 1;\n\
    \                    end_index = i;\n                    current_depth = 0;\n\
    \                }\n            }\n        }\n        if (start_index < end_index)\
    \ {\n            result.Add(ParseNestedParens(paren_string.Substring(start_index,\
    \ end_index - start_index + 1)));\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        if (paren_string == \"\") return\
    \ result;\n        int start = 0;\n        int end = 0;\n        int depth = 0;\n\
    \        while (end < paren_string.Length) {\n            if (paren_string[end]\
    \ == '(') {\n                depth++;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                depth--;\n            }\n            if (depth ==\
    \ 0) {\n                result.Add(end - start);\n                start = end\
    \ + 1;\n            }\n            end++;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        int start = 0;\n       \
    \ int end = 0;\n        int level = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                level++;\n \
    \           }\n            else if (paren_string[end] == ')') {\n            \
    \    level--;\n            }\n            if (level == 0) {\n                result.Add(end\
    \ - start);\n                start = end + 1;\n            }\n            end++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int depth = 0;\n        int start = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                depth++;\n\
    \                start = i;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                depth--;\n                if (depth == 0) {\n   \
    \                 result.Add(start);\n                    result.Add(i);\n   \
    \             }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int start = 0;\n        int end = 0;\n \
    \       int level = 0;\n        while (end < paren_string.Length) {\n        \
    \    if (paren_string[end] == '(') {\n                level++;\n            }\n\
    \            else if (paren_string[end] == ')') {\n                level--;\n\
    \            }\n            if (level == 0) {\n                result.Add(start);\n\
    \                start = end + 1;\n            }\n            end++;\n       \
    \ }\n        result.Add(start);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int level = 0;\n        for (int i = 0;\
    \ i < paren_string.Length; i++) {\n            if (paren_string[i] == '(') {\n\
    \                level++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                level--;\n            }\n            if (level ==\
    \ 0) {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        int max_depth\
    \ = 0;\n        int current_depth = 0;\n        int i = 0;\n        while (i <\
    \ paren_string.Length) {\n            if (paren_string[i] == '(') {\n        \
    \        current_depth++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                current_depth--;\n            }\n            if (current_depth\
    \ > max_depth) {\n                max_depth = current_depth;\n            }\n\
    \            i++;\n        }\n        for (int j = 0; j < max_depth; j++) {\n\
    \            result.Add(j);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int i = 0;\n        while (i < paren_string.Length)\
    \ {\n            int j = i;\n            while (j < paren_string.Length && paren_string[j]\
    \ != '(')\n                j++;\n            if (j < paren_string.Length) {\n\
    \                int k = j;\n                while (k < paren_string.Length &&\
    \ paren_string[k] != ')')\n                    k++;\n                if (k < paren_string.Length)\
    \ {\n                    result.Add(k - j);\n                    i = k + 1;\n\
    \                }\n                else\n                    throw new Exception(\"\
    Invalid input\");\n            }\n            else\n                throw new\
    \ Exception(\"Invalid input\");\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        int depth = 0;\n        for (int\
    \ i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i] == '(')\
    \ {\n                depth++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                depth--;\n            }\n            if (depth ==\
    \ 0) {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        int depth\
    \ = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n            if\
    \ (paren_string[i] == '(') {\n                depth++;\n            }\n      \
    \      else if (paren_string[i] == ')') {\n                depth--;\n        \
    \    }\n            if (depth == 0) {\n                result.Add(i);\n      \
    \      }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        int start = 0;\n        int end = 0;\n        int level\
    \ = 0;\n        while (end < paren_string.Length) {\n            if (paren_string[end]\
    \ == '(') {\n                level++;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                level--;\n            }\n            if (level ==\
    \ 0) {\n                result.Add(end - start);\n                start = end\
    \ + 1;\n            }\n            end++;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        int max_depth = 0;\n   \
    \     int current_depth = 0;\n        int start_index = 0;\n        int end_index\
    \ = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n            if\
    \ (paren_string[i] == '(') {\n                current_depth++;\n            }\n\
    \            else if (paren_string[i] == ')') {\n                current_depth--;\n\
    \            }\n            if (current_depth > max_depth) {\n               \
    \ max_depth = current_depth;\n                start_index = i;\n            }\n\
    \            if (current_depth == 0) {\n                end_index = i;\n     \
    \           result.Add(Convert.ToLong(paren_string.Substring(start_index, end_index\
    \ - start_index + 1)));\n                start_index = i + 1;\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int max_depth = 0;\n        int cur_depth = 0;\n        int i = 0;\n\
    \        while (i < paren_string.Length) {\n            if (paren_string[i] ==\
    \ '(') {\n                cur_depth++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                cur_depth--;\n            }\n            if (cur_depth\
    \ > max_depth) {\n                max_depth = cur_depth;\n            }\n    \
    \        i++;\n        }\n        for (int j = 0; j < max_depth; j++) {\n    \
    \        result.Add(j);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int depth = 0;\n        int start = 0;\n\
    \        int end = 0;\n        while (end < paren_string.Length) {\n         \
    \   if (paren_string[end] == '(') {\n                depth++;\n            }\n\
    \            else if (paren_string[end] == ')') {\n                depth--;\n\
    \            }\n            if (depth == 0) {\n                result.Add(end\
    \ - start);\n                start = end + 1;\n            }\n            end++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int max_depth = 0;\n        int depth = 0;\n        int start = 0;\n\
    \        int end = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n\
    \            if (paren_string[i] == '(') {\n                depth++;\n       \
    \         if (depth > max_depth) {\n                    max_depth = depth;\n \
    \                   start = i;\n                }\n            }\n           \
    \ else if (paren_string[i] == ')') {\n                depth--;\n             \
    \   if (depth == 0) {\n                    end = i;\n                    result.Add(Convert.ToLong(paren_string.Substring(start\
    \ + 1, end - start - 1)));\n                    start = end = 0;\n           \
    \     }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int depth = 0;\n        for (int i = 0;\
    \ i < paren_string.Length; i++) {\n            if (paren_string[i] == '(') {\n\
    \                depth++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                depth--;\n            }\n            if (depth ==\
    \ 0) {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        int max_depth\
    \ = 0;\n        int cur_depth = 0;\n        int start = 0;\n        int end =\
    \ 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n            if\
    \ (paren_string[i] == '(') {\n                cur_depth++;\n                if\
    \ (cur_depth > max_depth) {\n                    max_depth = cur_depth;\n    \
    \                start = i;\n                }\n            }\n            else\
    \ if (paren_string[i] == ')') {\n                cur_depth--;\n              \
    \  if (cur_depth < 0) {\n                    end = i;\n                    result.Add(ParseNestedParens(paren_string.Substring(start\
    \ + 1, end - start - 1)));\n                    cur_depth = 0;\n             \
    \   }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int index = 0;\n        while (index < paren_string.Length)\
    \ {\n            int start = index;\n            while (index < paren_string.Length\
    \ && paren_string[index] != '(')\n                index++;\n            if (index\
    \ < paren_string.Length) {\n                int end = index;\n               \
    \ while (end < paren_string.Length && paren_string[end] != ')')\n            \
    \        end++;\n                if (end < paren_string.Length) {\n          \
    \          result.Add(end - start);\n                    index = end + 1;\n  \
    \              }\n                else\n                    throw new Exception(\"\
    Invalid parens string\");\n            }\n            else\n                throw\
    \ new Exception(\"Invalid parens string\");\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        int paren_count = 0;\n \
    \       int paren_level = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                paren_count++;\n\
    \            }\n            else if (paren_string[i] == ')') {\n             \
    \   paren_count--;\n            }\n            if (paren_count == 0) {\n     \
    \           if (paren_level == 0) {\n                    result.Add(i);\n    \
    \            }\n                paren_level--;\n            }\n            else\
    \ {\n                paren_level++;\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        int start\
    \ = 0;\n        int end = 0;\n        int level = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                level++;\n \
    \           }\n            else if (paren_string[end] == ')') {\n            \
    \    level--;\n            }\n            if (level == 0) {\n                result.Add(start);\n\
    \                start = end + 1;\n            }\n            end++;\n       \
    \ }\n        result.Add(start);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int paren_count = 0;\n        int paren_depth\
    \ = 0;\n        int paren_index = 0;\n        while (paren_index < paren_string.Length)\
    \ {\n            if (paren_string[paren_index] == '(') {\n                paren_count++;\n\
    \            }\n            else if (paren_string[paren_index] == ')') {\n   \
    \             paren_count--;\n            }\n            if (paren_count == 0)\
    \ {\n                result.Add(paren_depth);\n                paren_depth = 0;\n\
    \            }\n            paren_index++;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        int start = 0;\n       \
    \ int end = 0;\n        int level = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                level++;\n \
    \           }\n            else if (paren_string[end] == ')') {\n            \
    \    level--;\n            }\n            if (level == 0) {\n                result.Add(start);\n\
    \                start = end + 1;\n            }\n            end++;\n       \
    \ }\n        result.Add(end);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (paren_string.Length == 0) return result;\n\
    \        int paren_count = 0;\n        int paren_level = 0;\n        for (int\
    \ i = 0; i < paren_string.Length; i++) {\n            char c = paren_string[i];\n\
    \            if (c == '(') {\n                paren_count++;\n            }\n\
    \            else if (c == ')') {\n                paren_count--;\n          \
    \      if (paren_count == 0) {\n                    result.Add(paren_level);\n\
    \                }\n            }\n            else if (c == ' ') {\n        \
    \        if (paren_count == 0) {\n                    paren_level++;\n       \
    \         }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int open_parens = 0;\n        int close_parens\
    \ = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n            if\
    \ (paren_string[i] == '(') {\n                open_parens++;\n            }\n\
    \            else if (paren_string[i] == ')') {\n                close_parens++;\n\
    \            }\n            else if (paren_string[i] == ' ') {\n             \
    \   if (open_parens == close_parens) {\n                    result.Add(open_parens);\n\
    \                    open_parens = 0;\n                    close_parens = 0;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        int max_depth = 0;\n      \
    \  int depth = 0;\n        int start = 0;\n        int end = 0;\n        for (int\
    \ i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i] == '(')\
    \ {\n                depth++;\n                if (depth > max_depth) {\n    \
    \                max_depth = depth;\n                    start = i;\n        \
    \        }\n            }\n            else if (paren_string[i] == ')') {\n  \
    \              depth--;\n                if (depth == 0) {\n                 \
    \   end = i;\n                    result.Add(Long.Parse(paren_string.Substring(start\
    \ + 1, end - start - 1)));\n                    start = i + 1;\n             \
    \   }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max_nesting = 0;\n        int i = 0;\n\
    \        while (i < paren_string.Length) {\n            if (paren_string[i] ==\
    \ '(') {\n                max_nesting++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                max_nesting--;\n            }\n            i++;\n\
    \        }\n        if (max_nesting > 0) {\n            throw new Exception(\"\
    Invalid input\");\n        }\n        i = 0;\n        while (i < paren_string.Length)\
    \ {\n            if (paren_string[i] == '(') {\n                result.Add(max_nesting);\n\
    \                i++;\n                while (i < paren_string.Length && paren_string[i]\
    \ != '(') {\n                    i++;\n                }\n                i++;\n\
    \            }\n            else if (paren_string[i] == ')') {\n             \
    \   i++;\n            }\n            else {\n                i++;\n          \
    \  }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int i = 0;\n        while (i < paren_string.Length) {\n            int\
    \ j = i;\n            while (j < paren_string.Length && paren_string[j] != ' ')\n\
    \                j++;\n            if (j - i > 0) {\n                result.Add(Long.Parse(paren_string.Substring(i,\
    \ j - i)));\n            }\n            i = j + 1;\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (paren_string\
    \ == \"\")\n            return result;\n        int i = 0;\n        int j = 0;\n\
    \        int level = 0;\n        while (i < paren_string.Length) {\n         \
    \   if (paren_string[i] == '(') {\n                level++;\n                i++;\n\
    \            }\n            else if (paren_string[i] == ')') {\n             \
    \   level--;\n                i++;\n            }\n            else if (paren_string[i]\
    \ == ' ') {\n                if (level == 0) {\n                    result.Add(j);\n\
    \                    j = i + 1;\n                }\n                i++;\n   \
    \         }\n            else {\n                i++;\n            }\n       \
    \ }\n        result.Add(j);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int level = 0;\n        int start = 0;\n      \
    \  for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                level++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                level--;\n            }\n            if (level ==\
    \ 0) {\n                result.Add(start);\n                start = i + 1;\n \
    \           }\n        }\n        result.Add(start);\n        return result;",
  "        List<long> result = new List<long>();\n        int max_depth = 0;\n   \
    \     int cur_depth = 0;\n        int start_index = 0;\n        int end_index\
    \ = 0;\n        while (end_index < paren_string.Length) {\n            if (paren_string[end_index]\
    \ == '(') {\n                cur_depth++;\n            }\n            else if\
    \ (paren_string[end_index] == ')') {\n                cur_depth--;\n         \
    \   }\n            if (cur_depth > max_depth) {\n                max_depth = cur_depth;\n\
    \                start_index = end_index;\n            }\n            end_index++;\n\
    \        }\n        for (int i = start_index; i < paren_string.Length; i++) {\n\
    \            if (paren_string[i] == '(') {\n                cur_depth++;\n   \
    \         }\n            else if (paren_string[i] == ')') {\n                cur_depth--;\n\
    \            }\n            if (cur_depth == max_depth) {\n                result.Add(i\
    \ - start_index);\n            }\n        }\n        return result;", "      \
    \  List<long> result = new List<long>();\n        int start = 0;\n        int\
    \ end = 0;\n        int depth = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                depth++;\n \
    \           }\n            else if (paren_string[end] == ')') {\n            \
    \    depth--;\n            }\n            if (depth == 0) {\n                result.Add(end\
    \ - start);\n                start = end + 1;\n            }\n            end++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (paren_string == \"\") return result;\n        int start = 0;\n  \
    \      int end = 0;\n        int max_depth = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                start = end;\n\
    \                end++;\n                continue;\n            }\n          \
    \  if (paren_string[end] == ')') {\n                end++;\n                if\
    \ (max_depth > 0) {\n                    result.Add(end - start - 1);\n      \
    \              max_depth--;\n                }\n                continue;\n  \
    \          }\n            if (paren_string[end] == '(') {\n                max_depth++;\n\
    \            }\n            end++;\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        int index = 0;\n        while\
    \ (index < paren_string.Length) {\n            int start = index;\n          \
    \  while (index < paren_string.Length && paren_string[index] != '(')\n       \
    \         index++;\n            if (index == start)\n                throw new\
    \ Exception(\"Invalid paren string\");\n            int end = index;\n       \
    \     while (index < paren_string.Length && paren_string[index] != ')')\n    \
    \            index++;\n            if (index == end)\n                throw new\
    \ Exception(\"Invalid paren string\");\n            result.Add(ParseNestedParens(paren_string.Substring(start\
    \ + 1, end - start - 1)));\n            index++;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        int i = 0;\n        while\
    \ (i < paren_string.Length) {\n            int j = i;\n            while (j <\
    \ paren_string.Length && paren_string[j] != '(')\n                j++;\n     \
    \       if (j == paren_string.Length)\n                throw new Exception(\"\
    Invalid paren string\");\n            int k = j;\n            while (k < paren_string.Length\
    \ && paren_string[k] != ')')\n                k++;\n            if (k == paren_string.Length)\n\
    \                throw new Exception(\"Invalid paren string\");\n            if\
    \ (j - i > result.Count)\n                result.Add(0);\n            result[result.Count\
    \ - 1]++;\n            i = k + 1;\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        if (paren_string == \"\") return\
    \ result;\n        int start = 0;\n        int end = 0;\n        int depth = 0;\n\
    \        while (end < paren_string.Length) {\n            if (paren_string[end]\
    \ == '(') {\n                depth++;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                depth--;\n            }\n            if (depth ==\
    \ 0) {\n                result.Add(start);\n                start = end + 1;\n\
    \            }\n            end++;\n        }\n        result.Add(end);\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ int level = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n  \
    \          if (paren_string[i] == '(') {\n                level++;\n         \
    \   }\n            else if (paren_string[i] == ')') {\n                level--;\n\
    \            }\n            if (level == 0) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int depth = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                depth++;\n\
    \            }\n            else if (paren_string[i] == ')') {\n             \
    \   depth--;\n            }\n            if (depth == 0) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long depth = 0;\n        int start = 0;\n     \
    \   for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                depth++;\n                if (depth == 1) {\n   \
    \                 start = i;\n                }\n            }\n            else\
    \ if (paren_string[i] == ')') {\n                depth--;\n                if\
    \ (depth == 0) {\n                    result.Add(start);\n                   \
    \ result.Add(i);\n                }\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        int max_nesting\
    \ = 0;\n        int cur_nesting = 0;\n        int i = 0;\n        while (i < paren_string.Length)\
    \ {\n            if (paren_string[i] == '(') {\n                cur_nesting++;\n\
    \            }\n            else if (paren_string[i] == ')') {\n             \
    \   cur_nesting--;\n            }\n            if (cur_nesting > max_nesting)\
    \ {\n                max_nesting = cur_nesting;\n            }\n            i++;\n\
    \        }\n        for (int j = 0; j <= max_nesting; j++) {\n            result.Add(j);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int depth = 0;\n        int start = 0;\n        int end = 0;\n      \
    \  while (end < paren_string.Length) {\n            if (paren_string[end] == '(')\
    \ {\n                depth++;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                depth--;\n            }\n            if (depth ==\
    \ 0) {\n                result.Add(end - start);\n                start = end\
    \ + 1;\n            }\n            end++;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max_nesting = 0;\n\
    \        long cur_nesting = 0;\n        int start = 0;\n        int end = 0;\n\
    \        while (end < paren_string.Length) {\n            if (paren_string[end]\
    \ == '(') {\n                cur_nesting++;\n            }\n            else if\
    \ (paren_string[end] == ')') {\n                cur_nesting--;\n            }\n\
    \            if (cur_nesting > max_nesting) {\n                max_nesting = cur_nesting;\n\
    \            }\n            if (cur_nesting < 0) {\n                throw new\
    \ Exception(\"Invalid paren string\");\n            }\n            end++;\n  \
    \      }\n        if (max_nesting > 0) {\n            throw new Exception(\"Invalid\
    \ paren string\");\n        }\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                start = i;\n\
    \                break;\n            }\n        }\n        for (int i = paren_string.Length\
    \ - 1; i >= 0; i--) {\n            if (paren_string[i] == ')') {\n           \
    \     end = i;\n                break;\n            }\n        }\n        for\
    \ (int i = start; i <= end; i++) {\n            if (paren_string[i] == '(') {\n\
    \                result.Add(1);\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                result.Add(-1);\n            }\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        int\
    \ i = 0;\n        while (i < paren_string.Length) {\n            int j = i;\n\
    \            while (j < paren_string.Length && paren_string[j] != ' ')\n     \
    \           j++;\n            if (j - i > 0) {\n                result.Add(j -\
    \ i);\n                i = j;\n            }\n            else {\n           \
    \     i++;\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int depth = 0;\n        int start = 0;\n\
    \        int end = 0;\n        while (end < paren_string.Length) {\n         \
    \   if (paren_string[end] == '(') {\n                depth++;\n            }\n\
    \            else if (paren_string[end] == ')') {\n                depth--;\n\
    \            }\n            if (depth == 0) {\n                result.Add(end\
    \ - start);\n                start = end + 1;\n            }\n            end++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int depth = 0;\n        for (int i = 0; i < paren_string.Length; i++)\
    \ {\n            if (paren_string[i] == '(') {\n                depth++;\n   \
    \         }\n            else if (paren_string[i] == ')') {\n                depth--;\n\
    \            }\n            if (depth == 0) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int start = 0;\n        int end = 0;\n        int\
    \ max_nesting = 0;\n        while (end < paren_string.Length) {\n            start\
    \ = end;\n            while (end < paren_string.Length && paren_string[end] !=\
    \ '(')\n                end++;\n            if (end - start > max_nesting)\n \
    \               max_nesting = end - start;\n            if (end < paren_string.Length\
    \ && paren_string[end] == '(') {\n                end++;\n                while\
    \ (end < paren_string.Length && paren_string[end] != ')')\n                  \
    \  end++;\n                if (end - start > max_nesting)\n                  \
    \  max_nesting = end - start;\n                end++;\n            }\n       \
    \     result.Add(max_nesting);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (paren_string.Length == 0) return result;\n\
    \        int start = 0;\n        int end = 0;\n        int depth = 0;\n      \
    \  while (start < paren_string.Length) {\n            if (paren_string[start]\
    \ == '(') {\n                depth++;\n            }\n            else if (paren_string[start]\
    \ == ')') {\n                depth--;\n            }\n            if (depth ==\
    \ 0) {\n                end = start;\n                while (end < paren_string.Length\
    \ && paren_string[end] != ' ') {\n                    end++;\n               \
    \ }\n                if (end < paren_string.Length) {\n                    result.Add(Convert.ToLong(paren_string.Substring(start\
    \ + 1, end - start - 1)));\n                }\n                start = end;\n\
    \            }\n            else {\n                start++;\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (paren_string.Length == 0) return result;\n        int start = 0;\n\
    \        int end = 0;\n        int depth = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                depth++;\n \
    \           }\n            else if (paren_string[end] == ')') {\n            \
    \    depth--;\n            }\n            if (depth == 0) {\n                result.Add(end\
    \ - start);\n                start = end + 1;\n            }\n            end++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long depth = 0;\n        for (int i = 0; i < paren_string.Length; i++)\
    \ {\n            if (paren_string[i] == '(') {\n                depth++;\n   \
    \         }\n            else if (paren_string[i] == ')') {\n                depth--;\n\
    \            }\n            if (depth < 0) {\n                throw new Exception(\"\
    Invalid parentheses\");\n            }\n            if (depth == 0) {\n      \
    \          result.Add(depth);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        int paren_count = 0;\n \
    \       int paren_depth = 0;\n        int i = 0;\n        while (i < paren_string.Length)\
    \ {\n            if (paren_string[i] == '(') {\n                paren_count++;\n\
    \            }\n            else if (paren_string[i] == ')') {\n             \
    \   paren_count--;\n            }\n            if (paren_count == 0) {\n     \
    \           if (paren_depth == 0) {\n                    result.Add(i);\n    \
    \            }\n                paren_depth++;\n            }\n            else\
    \ if (paren_count < 0) {\n                paren_depth--;\n            }\n    \
    \        i++;\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (paren_string.Length == 0) return result;\n\
    \        int start = 0;\n        int end = 0;\n        int depth = 0;\n      \
    \  while (end < paren_string.Length) {\n            if (paren_string[end] == '(')\
    \ {\n                depth++;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                depth--;\n            }\n            if (depth ==\
    \ 0) {\n                result.Add(end - start);\n                start = end\
    \ + 1;\n            }\n            end++;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long depth = 0;\n      \
    \  for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                depth++;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                depth--;\n            }\n            if (depth ==\
    \ 0) {\n                result.Add(i - depth);\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  if (paren_string == \"\") return result;\n        int i = 0;\n        int j\
    \ = 0;\n        int level = 0;\n        while (i < paren_string.Length) {\n  \
    \          if (paren_string[i] == '(') {\n                level++;\n         \
    \   }\n            else if (paren_string[i] == ')') {\n                level--;\n\
    \            }\n            if (level == 0) {\n                result.Add(j);\n\
    \                j = i;\n            }\n            i++;\n        }\n        result.Add(j);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (paren_string == \"\") return result;\n        int start = 0;\n     \
    \   int end = 0;\n        int level = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                level++;\n \
    \           }\n            else if (paren_string[end] == ')') {\n            \
    \    level--;\n            }\n            if (level == 0) {\n                result.Add(end\
    \ - start);\n                start = end + 1;\n            }\n            end++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int start = 0;\n        int end = 0;\n        int level = 0;\n      \
    \  while (end < paren_string.Length) {\n            if (paren_string[end] == '(')\
    \ {\n                level++;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                level--;\n            }\n            if (level ==\
    \ 0) {\n                result.Add(end - start);\n                start = end\
    \ + 1;\n            }\n            end++;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        int depth = 0;\n       \
    \ int start = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n  \
    \          if (paren_string[i] == '(') {\n                depth++;\n         \
    \       start = i;\n            }\n            else if (paren_string[i] == ')')\
    \ {\n                depth--;\n                if (depth < 0) {\n            \
    \        result.Add(start);\n                    result.Add(i);\n            \
    \        break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        int depth = 0;\n       \
    \ int start = 0;\n        int end = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                depth++;\n \
    \               start = end;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                depth--;\n                if (depth == 0) {\n   \
    \                 result.Add(Convert.ToLong(paren_string.Substring(start + 1,\
    \ end - start - 1)));\n                }\n            }\n            end++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int start = 0;\n        int end = 0;\n        int depth = 0;\n      \
    \  while (end < paren_string.Length) {\n            if (paren_string[end] == '(')\
    \ {\n                depth++;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                depth--;\n            }\n            if (depth ==\
    \ 0) {\n                result.Add(end - start);\n                start = end\
    \ + 1;\n            }\n            end++;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (paren_string == \"\"\
    )\n            return result;\n        int i = 0;\n        while (i < paren_string.Length)\
    \ {\n            if (paren_string[i] == '(') {\n                int j = i + 1;\n\
    \                while (j < paren_string.Length && paren_string[j] != ')')\n \
    \                   j++;\n                if (j == paren_string.Length) {\n  \
    \                  result.Add(1);\n                    i = j;\n              \
    \  }\n                else {\n                    int k = j + 1;\n           \
    \         while (k < paren_string.Length && paren_string[k] != ')')\n        \
    \                k++;\n                    if (k == paren_string.Length) {\n \
    \                       result.Add(1);\n                        i = k;\n     \
    \               }\n                    else {\n                        result.Add(2);\n\
    \                        i = k;\n                    }\n                }\n  \
    \          }\n            else {\n                i++;\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int level = 0;\n        int start = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                level++;\n\
    \                start = i + 1;\n            }\n            else if (paren_string[i]\
    \ == ')') {\n                level--;\n                if (level == 0) {\n   \
    \                 result.Add(start);\n                    result.Add(i);\n   \
    \             }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int paren_count = 0;\n        int paren_level\
    \ = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n            if\
    \ (paren_string[i] == '(') {\n                paren_count++;\n            }\n\
    \            else if (paren_string[i] == ')') {\n                paren_count--;\n\
    \                if (paren_count == 0) {\n                    result.Add(paren_level);\n\
    \                    paren_level = 0;\n                }\n                else\
    \ {\n                    paren_level++;\n                }\n            }\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (paren_string == \"\") return result;\n        int index = 0;\n  \
    \      int level = 0;\n        while (index < paren_string.Length) {\n       \
    \     if (paren_string[index] == '(') {\n                level++;\n          \
    \  }\n            else if (paren_string[index] == ')') {\n                level--;\n\
    \            }\n            index++;\n            if (level < 0) {\n         \
    \       throw new Exception(\"Invalid parentheses\");\n            }\n       \
    \     if (level == 0) {\n                result.Add(level);\n            }\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int start = 0;\n        int end = 0;\n        int depth = 0;\n      \
    \  while (end < paren_string.Length) {\n            if (paren_string[end] == '(')\
    \ {\n                depth++;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                depth--;\n            }\n            if (depth ==\
    \ 0) {\n                result.Add(end - start);\n                start = end\
    \ + 1;\n            }\n            end++;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (paren_string.Length\
    \ == 0) return result;\n        int index = 0;\n        int level = 0;\n     \
    \   while (index < paren_string.Length) {\n            if (paren_string[index]\
    \ == '(') {\n                level++;\n            }\n            else if (paren_string[index]\
    \ == ')') {\n                level--;\n            }\n            index++;\n \
    \           if (level < 0) {\n                throw new Exception(\"Invalid parentheses\
    \ string\");\n            }\n            if (level == 0) {\n                result.Add(level);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int level = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                level++;\n\
    \            }\n            else if (paren_string[i] == ')') {\n             \
    \   level--;\n            }\n            if (level < 0) {\n                throw\
    \ new Exception(\"Invalid input\");\n            }\n            if (level == 0)\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        int start\
    \ = 0;\n        int end = 0;\n        int depth = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                depth++;\n \
    \           }\n            else if (paren_string[end] == ')') {\n            \
    \    depth--;\n            }\n            if (depth == 0) {\n                result.Add(start);\n\
    \                start = end + 1;\n            }\n            end++;\n       \
    \ }\n        result.Add(start);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int start = 0;\n        int end = 0;\n \
    \       while (end < paren_string.Length) {\n            if (paren_string[end]\
    \ == '(') {\n                start = end;\n            }\n            else if\
    \ (paren_string[end] == ')') {\n                end++;\n                if (start\
    \ == end) {\n                    result.Add(1L);\n                }\n        \
    \        else {\n                    result.Add(result[start - 1] + 1);\n    \
    \            }\n            }\n            else {\n                end++;\n  \
    \          }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        int start = 0;\n        int end = 0;\n        int\
    \ max_depth = 0;\n        while (end < paren_string.Length) {\n            if\
    \ (paren_string[end] == '(') {\n                start = end;\n               \
    \ end++;\n                while (end < paren_string.Length && paren_string[end]\
    \ != ')') {\n                    end++;\n                }\n                if\
    \ (end < paren_string.Length) {\n                    end++;\n                \
    \    max_depth++;\n                }\n            }\n            else {\n    \
    \            if (end > start) {\n                    result.Add(max_depth);\n\
    \                }\n                max_depth = 0;\n                start = end;\n\
    \                end++;\n            }\n        }\n        if (end > start) {\n\
    \            result.Add(max_depth);\n        }\n        return result;", "   \
    \     List<long> result = new List<long>();\n        int start = 0;\n        int\
    \ end = 0;\n        int depth = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                depth++;\n \
    \           }\n            else if (paren_string[end] == ')') {\n            \
    \    depth--;\n            }\n            if (depth == 0) {\n                result.Add(start);\n\
    \                start = end + 1;\n            }\n            end++;\n       \
    \ }\n        result.Add(start);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (paren_string == null || paren_string.Length\
    \ == 0)\n            return result;\n        int start = 0;\n        int end =\
    \ 0;\n        int depth = 0;\n        while (end < paren_string.Length) {\n  \
    \          if (paren_string[end] == '(') {\n                depth++;\n       \
    \     }\n            else if (paren_string[end] == ')') {\n                depth--;\n\
    \            }\n            if (depth == 0) {\n                result.Add(start);\n\
    \                start = end + 1;\n            }\n            end++;\n       \
    \ }\n        result.Add(start);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int max_depth = 0;\n        int start_index\
    \ = 0;\n        int end_index = 0;\n        while (end_index < paren_string.Length)\
    \ {\n            if (paren_string[end_index] == '(') {\n                max_depth++;\n\
    \                start_index = end_index;\n            }\n            else if\
    \ (paren_string[end_index] == ')') {\n                max_depth--;\n         \
    \       if (max_depth < 0) {\n                    throw new Exception(\"Invalid\
    \ parentheses string\");\n                }\n                result.Add(start_index);\n\
    \                result.Add(end_index);\n                end_index++;\n      \
    \      }\n            else {\n                end_index++;\n            }\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int depth = 0;\n        for (int i = 0; i < paren_string.Length; i++)\
    \ {\n            if (paren_string[i] == '(') {\n                depth++;\n   \
    \         }\n            else if (paren_string[i] == ')') {\n                depth--;\n\
    \            }\n            if (depth == 0) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int open_parens = 0;\n        int close_parens\
    \ = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n            if\
    \ (paren_string[i] == '(') {\n                open_parens++;\n            }\n\
    \            else if (paren_string[i] == ')') {\n                close_parens++;\n\
    \            }\n            if (open_parens == close_parens) {\n             \
    \   result.Add(i - open_parens);\n                open_parens = 0;\n         \
    \       close_parens = 0;\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        int start = 0;\n       \
    \ int end = 0;\n        int level = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                level++;\n \
    \           }\n            else if (paren_string[end] == ')') {\n            \
    \    level--;\n            }\n            if (level == 0) {\n                result.Add(end\
    \ - start);\n                start = end + 1;\n            }\n            end++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long depth = 0;\n        for (int i = 0; i < paren_string.Length; i++)\
    \ {\n            if (paren_string[i] == '(') {\n                depth++;\n   \
    \         }\n            else if (paren_string[i] == ')') {\n                depth--;\n\
    \            }\n            if (depth < 0) {\n                throw new Exception(\"\
    Invalid parentheses string\");\n            }\n            if (depth == 0) {\n\
    \                result.Add(depth);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long depth\
    \ = 0;\n        long start = 0;\n        long end = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                depth++;\n \
    \               start = end;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                depth--;\n                end++;\n              \
    \  if (depth == 0) {\n                    result.Add(start);\n               \
    \     result.Add(end);\n                }\n            }\n            end++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int start = 0;\n        int end = 0;\n        int level = 0;\n      \
    \  while (end < paren_string.Length) {\n            if (paren_string[end] == '(')\
    \ {\n                level++;\n            }\n            else if (paren_string[end]\
    \ == ')') {\n                level--;\n            }\n            if (level ==\
    \ 0) {\n                result.Add(end - start);\n                start = end\
    \ + 1;\n            }\n            end++;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        int start = 0;\n       \
    \ int end = 0;\n        int depth = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                depth++;\n \
    \           }\n            else if (paren_string[end] == ')') {\n            \
    \    depth--;\n            }\n            if (depth == 0) {\n                result.Add(end\
    \ - start);\n                start = end + 1;\n            }\n            end++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int start = 0;\n        int end = 0;\n        while (end < paren_string.Length)\
    \ {\n            if (paren_string[end] == '(') {\n                start = end;\n\
    \            }\n            else if (paren_string[end] == ')') {\n           \
    \     end++;\n                if (start == end) {\n                    result.Add(1L);\n\
    \                }\n                else {\n                    result.Add(result[start\
    \ - 1] + 1);\n                }\n            }\n            else {\n         \
    \       end++;\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int paren_count = 0;\n        int paren_depth\
    \ = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n            if\
    \ (paren_string[i] == '(') {\n                paren_count++;\n            }\n\
    \            else if (paren_string[i] == ')') {\n                paren_count--;\n\
    \            }\n            else if (paren_string[i] == '(' && paren_count ==\
    \ 0) {\n                paren_depth++;\n            }\n            else if (paren_string[i]\
    \ == ')' && paren_count == 0) {\n                paren_depth--;\n            }\n\
    \            if (paren_depth == 0 && paren_count == 0) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int depth = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                depth++;\n\
    \            }\n            else if (paren_string[i] == ')') {\n             \
    \   depth--;\n            }\n            if (depth == 0) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
