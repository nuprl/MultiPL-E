{
  "name": "HumanEval_4_mean_absolute_deviation",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = 0.0f;\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        mean = sum / numbers.Count;\n        return mean;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpr78lj1l7.cs(19,27): error CS1002: ; expected\n/tmp/tmpr78lj1l7.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmpr78lj1l7.cs(19,27): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp76ojwwci.cs(19,22): error CS1002: ; expected\n/tmp/tmp76ojwwci.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp76ojwwci.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float number : numbers) {\n            sum += Math.Pow(number - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        float[] sorted = numbers.ToArray();\n        Arrays.Sort(sorted);\n        return sorted[sorted.Length / 2];\n    }\n\n    // Calculate the mode of a list of numbers.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpttf709_r.cs(19,27): error CS1002: ; expected\n/tmp/tmpttf709_r.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmpttf709_r.cs(19,27): error CS1001: Identifier expected\n/tmp/tmpttf709_r.cs(30,27): error CS1002: ; expected\n/tmp/tmpttf709_r.cs(30,27): error CS1525: Invalid expression term ':'\n/tmp/tmpttf709_r.cs(30,27): error CS1001: Identifier expected\n/tmp/tmpttf709_r.cs(42,27): error CS1002: ; expected\n/tmp/tmpttf709_r.cs(42,27): error CS1525: Invalid expression term ':'\n/tmp/tmpttf709_r.cs(42,27): error CS1001: Identifier expected\n/tmp/tmpttf709_r.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean\n    // Mean is the average of all elements in the list:\n    // Mean = (float)sum(numbers) / (float)numbers.Count\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Standard Deviation\n    // Standard Deviation is the square root of the variance:\n    // StandardDeviation = sqrt(Variance)\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.414f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float number : numbers) {\n            sum += Math.Pow(number - mean, 2);\n        }\n        return (float)Math.Sqrt(sum / numbers.Count);\n    }\n\n    // For a given list of input numbers, calculate Variance\n    // Variance is the sum of squared deviations from the mean:\n    // Variance = (float)sum(numbers) / (float)numbers.Count\n    // >>> Variance((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.25f)\n    public static float Variance(List<\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp69w7vpkp.cs(19,27): error CS1002: ; expected\n/tmp/tmp69w7vpkp.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmp69w7vpkp.cs(19,27): error CS1001: Identifier expected\n/tmp/tmp69w7vpkp.cs(32,27): error CS1002: ; expected\n/tmp/tmp69w7vpkp.cs(32,27): error CS1525: Invalid expression term ':'\n/tmp/tmp69w7vpkp.cs(32,27): error CS1001: Identifier expected\n/tmp/tmp69w7vpkp.cs(46,27): error CS1002: ; expected\n/tmp/tmp69w7vpkp.cs(46,27): error CS1525: Invalid expression term ':'\n/tmp/tmp69w7vpkp.cs(46,27): error CS1001: Identifier expected\n/tmp/tmp69w7vpkp.cs(57,39): error CS1031: Type expected\n/tmp/tmp69w7vpkp.cs(57,39): error CS1003: Syntax error, '>' expected\n/tmp/tmp69w7vpkp.cs(57,39): error CS1001: Identifier expected\n/tmp/tmp69w7vpkp.cs(57,39): error CS1026: ) expected\n/tmp/tmp69w7vpkp.cs(57,39): error CS1002: ; expected\n/tmp/tmp69w7vpkp.cs(65,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each element and the mean\n        float mad = 0.0f;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n\n    // For a given list of input numbers, calculate the median of this dataset.\n    // Median is the number that is in the middle of the list, e.g. for the list\n    // {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} the median is 5.\n    // >>> Median((new List<int>(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})))\n    // 5\n    public static int Median(List<int> numbers) {\n        // Sort the input numbers\n        numbers.Sort();\n\n        // If the list is empty, return 0\n        if (numbers.Count == 0) {\n            return 0;\n        }\n\n        // If the list has only one element, return that element\n        if (numbers.Count == 1) {\n            return numbers[0];\n        }\n\n        // If the list has an even number of elements, return the average of the\n        // two middle elements\n        if (numbers.Count % 2 == 0) {\n            return (numbers[numbers.Count / 2] + numbers[numbers.Count / 2 - 1]) / 2;\n        }\n\n        // If the list has an odd number of elements, return the middle element\n        return numbers[numbers.Count / 2];\n    }\n\n    // For a given list of input numbers, calculate the mode of this dataset.\n    // Mode is the number that appears the most often in the list.\n    // >>> Mode((new List<int>(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})))\n    // (5)\n    public static int Mode(List<int> numbers)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpr76mknbs.cs(67,46): error CS1002: ; expected\n/tmp/tmpr76mknbs.cs(75,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2aq33ils.cs(19,27): error CS1002: ; expected\n/tmp/tmp2aq33ils.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmp2aq33ils.cs(19,27): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the list of numbers\n        float mean = 0;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each value and the mean\n        float mad = 0;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers = numbers.OrderBy(x => x);\n        int mid = numbers.Count / 2;\n        return numbers[mid];\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the variance of a list of numbers.\n    // >>> Variance((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt0al_1a9.cs(19,22): error CS1002: ; expected\n/tmp/tmpt0al_1a9.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpt0al_1a9.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpt0al_1a9.cs(30,22): error CS1002: ; expected\n/tmp/tmpt0al_1a9.cs(30,22): error CS1525: Invalid expression term ':'\n/tmp/tmpt0al_1a9.cs(30,22): error CS1001: Identifier expected\n/tmp/tmpt0al_1a9.cs(51,22): error CS1002: ; expected\n/tmp/tmpt0al_1a9.cs(51,22): error CS1525: Invalid expression term ':'\n/tmp/tmpt0al_1a9.cs(51,22): error CS1001: Identifier expected\n/tmp/tmpt0al_1a9.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the list of numbers\n        float mean = 0;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each number and the mean\n        float mad = 0;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // Calculate the mode of a list of numbers.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp69rq5ldp.cs(19,22): error CS1002: ; expected\n/tmp/tmp69rq5ldp.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp69rq5ldp.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp69rq5ldp.cs(30,22): error CS1002: ; expected\n/tmp/tmp69rq5ldp.cs(30,22): error CS1525: Invalid expression term ':'\n/tmp/tmp69rq5ldp.cs(30,22): error CS1001: Identifier expected\n/tmp/tmp69rq5ldp.cs(42,22): error CS1002: ; expected\n/tmp/tmp69rq5ldp.cs(42,22): error CS1525: Invalid expression term ':'\n/tmp/tmp69rq5ldp.cs(42,22): error CS1001: Identifier expected\n/tmp/tmp69rq5ldp.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2aq33ils.cs(19,27): error CS1002: ; expected\n/tmp/tmp2aq33ils.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmp2aq33ils.cs(19,27): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median.\n    // Median is the middle value in the list:\n    // Median = (x[Count(x) / 2] + x[Count(x) / 2 - 1]) / 2\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        int count = numbers.Count;\n        if (count == 0) {\n            throw new Exception(\"Median called on empty list\");\n        }\n        if (count % 2 == 0) {\n            return (numbers[count / 2] + numbers[count / 2 - 1]) / 2;\n        }\n        else {\n            return numbers[count / 2];\n        }\n    }\n\n    // For a given list of input numbers, calculate the Mode.\n    // Mode is the value that appears the most frequently in the list:\n    // Mode = x[FindIndex(x, Count(x) / 2)]\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0clkxc0t.cs(19,22): error CS1002: ; expected\n/tmp/tmp0clkxc0t.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp0clkxc0t.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp0clkxc0t.cs(32,22): error CS1002: ; expected\n/tmp/tmp0clkxc0t.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmp0clkxc0t.cs(32,22): error CS1001: Identifier expected\n/tmp/tmp0clkxc0t.cs(67,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Median.\n    // Median is the middle value in the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        return numbers.OrderBy(x => x).Select(x => x).GetValue(numbers.Count / 2);\n    }\n\n    // For a given list of input numbers, calculate the mode.\n    // The mode is the value that appears the most frequently in the list.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mode(List<float> numbers) {\n        return numbers.OrderBy(x => x).Select(x => x).GetValue(numbers.Count - 1);\n    }\n\n    // For a given list of input numbers, calculate the range.\n    // The range is the difference between the maximum and minimum values in the list.\n    // >>> Range((new List<float>(new float\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp86psio3l.cs(19,22): error CS1002: ; expected\n/tmp/tmp86psio3l.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp86psio3l.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp86psio3l.cs(32,22): error CS1002: ; expected\n/tmp/tmp86psio3l.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmp86psio3l.cs(32,22): error CS1001: Identifier expected\n/tmp/tmp86psio3l.cs(64,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Create a new array of the same size as the input list\n        float[] input = new float[numbers.Count];\n        // Copy the input list into the new array\n        for (int i = 0; i < numbers.Count; i++) {\n            input[i] = numbers[i];\n        }\n        // Calculate the mean of the input list\n        float mean = (float)Numerics.Mean(input);\n        // Calculate the absolute difference between each element and the mean\n        float[] diff = new float[input.Length];\n        for (int i = 0; i < input.Length; i++) {\n            diff[i] = Math.Abs(input[i] - mean);\n        }\n        // Calculate the mean of the absolute differences\n        float mad = (float)Numerics.Mean(diff);\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4dmslpkh.cs(24,29): error CS0103: The name 'Numerics' does not exist in the current context\n/tmp/tmp4dmslpkh.cs(31,28): error CS0103: The name 'Numerics' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = (float)sum(numbers) / (float)numbers.Count\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Standard Deviation.\n    // Standard Deviation is the square root of the variance:\n    // StandardDeviation = sqrt(Variance)\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.414f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return (float)Math.Sqrt(sum / numbers.Count);\n    }\n\n    // For a given list of input numbers, calculate Variance.\n    // Variance is the sum of squared deviations from the mean:\n    // Variance = (float)sum(numbers.Select(x => Math.Pow(x - Mean(numbers), 2))) / (float)numbers.Count\n    // >>> Variance((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_g5so_02.cs(19,22): error CS1002: ; expected\n/tmp/tmp_g5so_02.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp_g5so_02.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp_g5so_02.cs(32,22): error CS1002: ; expected\n/tmp/tmp_g5so_02.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmp_g5so_02.cs(32,22): error CS1001: Identifier expected\n/tmp/tmp_g5so_02.cs(46,22): error CS1002: ; expected\n/tmp/tmp_g5so_02.cs(46,22): error CS1525: Invalid expression term ':'\n/tmp/tmp_g5so_02.cs(46,22): error CS1001: Identifier expected\n/tmp/tmp_g5so_02.cs(63,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2aq33ils.cs(19,27): error CS1002: ; expected\n/tmp/tmp2aq33ils.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmp2aq33ils.cs(19,27): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median.\n    // Median is the value that is in the middle of the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers = numbers.OrderBy(x => x);\n        int count = numbers.Count;\n        if (count % 2 == 1) {\n            return numbers[count / 2];\n        }\n        else {\n            return (numbers[count / 2 - 1] + numbers[count / 2]) / 2.0f;\n        }\n    }\n\n    // For a given list of input numbers, calculate the Mode.\n    // Mode is the value that appears the most frequently in the list.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mode(List<float> numbers) {\n        HashSet<float> set = new HashSet<float>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfwmcgs8i.cs(19,22): error CS1002: ; expected\n/tmp/tmpfwmcgs8i.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpfwmcgs8i.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpfwmcgs8i.cs(32,22): error CS1002: ; expected\n/tmp/tmpfwmcgs8i.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmpfwmcgs8i.cs(32,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the standard deviation of a list of numbers\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the median of a list of numbers\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // Calculate the mode of a list of numbers\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mode(List\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwh76o2gh.cs(19,22): error CS1002: ; expected\n/tmp/tmpwh76o2gh.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpwh76o2gh.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpwh76o2gh.cs(30,22): error CS1002: ; expected\n/tmp/tmpwh76o2gh.cs(30,22): error CS1525: Invalid expression term ':'\n/tmp/tmpwh76o2gh.cs(30,22): error CS1001: Identifier expected\n/tmp/tmpwh76o2gh.cs(42,22): error CS1002: ; expected\n/tmp/tmpwh76o2gh.cs(42,22): error CS1525: Invalid expression term ':'\n/tmp/tmpwh76o2gh.cs(42,22): error CS1001: Identifier expected\n/tmp/tmpwh76o2gh.cs(59,34): error CS1001: Identifier expected\n/tmp/tmpwh76o2gh.cs(59,34): error CS1026: ) expected\n/tmp/tmpwh76o2gh.cs(59,34): error CS1002: ; expected\n/tmp/tmpwh76o2gh.cs(67,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Median\n    // Median is the middle value in the list:\n    // Median = (x[(n - 1) / 2] + x[(n + 1) / 2]) / 2\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        int count = numbers.Count;\n        if (count == 0) {\n            throw new Exception(\"Median called on empty list\");\n        }\n        if (count % 2 == 0) {\n            // even number of elements\n            int middle = count / 2;\n            return (numbers[middle - 1] + numbers[middle]) / 2;\n        }\n        else {\n            // odd number of elements\n            return numbers[count / 2];\n        }\n    }\n\n    // For a given list of input numbers, calculate Standard Deviation\n    // Standard Deviation is the square root of the variance:\n    // StandardDeviation = sqrt(Variance)\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f,\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplyk6pmkx.cs(19,22): error CS1002: ; expected\n/tmp/tmplyk6pmkx.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmplyk6pmkx.cs(19,22): error CS1001: Identifier expected\n/tmp/tmplyk6pmkx.cs(32,22): error CS1002: ; expected\n/tmp/tmplyk6pmkx.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmplyk6pmkx.cs(32,22): error CS1001: Identifier expected\n/tmp/tmplyk6pmkx.cs(70,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the mean absolute deviation\n        float mad = 0.0f;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        float[] sorted = numbers.ToArray();\n        Arrays.Sort(sorted);\n        return sorted[sorted.Length / 2];\n    }\n\n    // Calculate the mode of a list of numbers.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp82pigrfb.cs(19,22): error CS1002: ; expected\n/tmp/tmp82pigrfb.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp82pigrfb.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp82pigrfb.cs(30,22): error CS1002: ; expected\n/tmp/tmp82pigrfb.cs(30,22): error CS1525: Invalid expression term ':'\n/tmp/tmp82pigrfb.cs(30,22): error CS1001: Identifier expected\n/tmp/tmp82pigrfb.cs(42,22): error CS1002: ; expected\n/tmp/tmp82pigrfb.cs(42,22): error CS1525: Invalid expression term ':'\n/tmp/tmp82pigrfb.cs(42,22): error CS1001: Identifier expected\n/tmp/tmp82pigrfb.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = 0.0f;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n        float mad = 0.0f;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = sum(x) / count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median.\n    // Median is the value that appears in the middle of the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // For a given list of input numbers, calculate the Mode.\n    // Mode is the value that appears the most frequently in the list.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mode(List<float> numbers) {\n        HashSet<float> set = new HashSet<float>();\n        for (float x : numbers) {\n            set.Add(x);\n        }\n        float max = 0.0f;\n        for (float x : set) {\n            if (x > max) {\n                max = x;\n            }\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsrvkl9l0.cs(19,22): error CS1002: ; expected\n/tmp/tmpsrvkl9l0.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpsrvkl9l0.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpsrvkl9l0.cs(32,22): error CS1002: ; expected\n/tmp/tmpsrvkl9l0.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmpsrvkl9l0.cs(32,22): error CS1001: Identifier expected\n/tmp/tmpsrvkl9l0.cs(53,22): error CS1002: ; expected\n/tmp/tmpsrvkl9l0.cs(53,22): error CS1525: Invalid expression term ':'\n/tmp/tmpsrvkl9l0.cs(53,22): error CS1001: Identifier expected\n/tmp/tmpsrvkl9l0.cs(57,22): error CS1002: ; expected\n/tmp/tmpsrvkl9l0.cs(57,22): error CS1525: Invalid expression term ':'\n/tmp/tmpsrvkl9l0.cs(57,22): error CS1001: Identifier expected\n/tmp/tmpsrvkl9l0.cs(63,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpsrvkl9l0.cs(69,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median.\n    // Median is the middle number in the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        return numbers.OrderBy(x => x).Select(x => x).GetValue(numbers.Count / 2);\n    }\n\n    // For a given list of input numbers, calculate the Mode.\n    // Mode is the number that appears the most frequently in the list.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mode(List<float> numbers) {\n        return numbers.OrderBy(x => x).Select(x => x).GetValue(numbers.Count - 1);\n    }\n\n    // For a given list of input numbers, calculate the Standard Deviation.\n    // Standard Deviation is the square root of the variance.\n    // >>> StandardDeviation((new\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpomntm7ds.cs(19,22): error CS1002: ; expected\n/tmp/tmpomntm7ds.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpomntm7ds.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpomntm7ds.cs(32,22): error CS1002: ; expected\n/tmp/tmpomntm7ds.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmpomntm7ds.cs(32,22): error CS1001: Identifier expected\n/tmp/tmpomntm7ds.cs(64,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Median.\n    // Median is the middle value in the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // For a given list of input numbers, calculate Mode.\n    // Mode is the value that appears the most frequently in the list.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Mode(List<float> numbers) {\n        HashSet<float> set = new HashSet<float>();\n        for (float x : numbers) {\n            set.Add(x);\n        }\n        float max = 0.0f;\n        for (float x : set) {\n            if (x > max) {\n                max = x;\n            }\n        }\n        return max\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbnatn25l.cs(19,22): error CS1002: ; expected\n/tmp/tmpbnatn25l.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpbnatn25l.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpbnatn25l.cs(32,22): error CS1002: ; expected\n/tmp/tmpbnatn25l.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmpbnatn25l.cs(32,22): error CS1001: Identifier expected\n/tmp/tmpbnatn25l.cs(53,22): error CS1002: ; expected\n/tmp/tmpbnatn25l.cs(53,22): error CS1525: Invalid expression term ':'\n/tmp/tmpbnatn25l.cs(53,22): error CS1001: Identifier expected\n/tmp/tmpbnatn25l.cs(57,22): error CS1002: ; expected\n/tmp/tmpbnatn25l.cs(57,22): error CS1525: Invalid expression term ':'\n/tmp/tmpbnatn25l.cs(57,22): error CS1001: Identifier expected\n/tmp/tmpbnatn25l.cs(62,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Mean of this dataset.\n    // Mean is the sum of all elements divided by the number of elements:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median of this dataset.\n    // Median is the middle value in the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        float[] sorted = numbers.ToArray();\n        Arrays.Sort(sorted);\n        return sorted[sorted.Length / 2];\n    }\n\n    // For a given list of input numbers, calculate the Standard Deviation of this dataset.\n    // Standard Deviation is the square root of the variance.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoh_11638.cs(19,22): error CS1002: ; expected\n/tmp/tmpoh_11638.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpoh_11638.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpoh_11638.cs(32,22): error CS1002: ; expected\n/tmp/tmpoh_11638.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmpoh_11638.cs(32,22): error CS1001: Identifier expected\n/tmp/tmpoh_11638.cs(55,22): error CS1002: ; expected\n/tmp/tmpoh_11638.cs(55,22): error CS1525: Invalid expression term ':'\n/tmp/tmpoh_11638.cs(55,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Pow(number - mean, 2.0f);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        int middle = numbers.Count / 2;\n        return numbers[middle];\n    }\n\n    // Calculate the mode of a list of numbers.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppp3z8ejl.cs(19,27): error CS1002: ; expected\n/tmp/tmppp3z8ejl.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmppp3z8ejl.cs(19,27): error CS1001: Identifier expected\n/tmp/tmppp3z8ejl.cs(30,27): error CS1002: ; expected\n/tmp/tmppp3z8ejl.cs(30,27): error CS1525: Invalid expression term ':'\n/tmp/tmppp3z8ejl.cs(30,27): error CS1001: Identifier expected\n/tmp/tmppp3z8ejl.cs(42,27): error CS1002: ; expected\n/tmp/tmppp3z8ejl.cs(42,27): error CS1525: Invalid expression term ':'\n/tmp/tmppp3z8ejl.cs(42,27): error CS1001: Identifier expected\n/tmp/tmppp3z8ejl.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Pow(number - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // Calculate the mode of a list of numbers.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqmak3cox.cs(19,27): error CS1002: ; expected\n/tmp/tmpqmak3cox.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmpqmak3cox.cs(19,27): error CS1001: Identifier expected\n/tmp/tmpqmak3cox.cs(30,27): error CS1002: ; expected\n/tmp/tmpqmak3cox.cs(30,27): error CS1525: Invalid expression term ':'\n/tmp/tmpqmak3cox.cs(30,27): error CS1001: Identifier expected\n/tmp/tmpqmak3cox.cs(42,27): error CS1002: ; expected\n/tmp/tmpqmak3cox.cs(42,27): error CS1525: Invalid expression term ':'\n/tmp/tmpqmak3cox.cs(42,27): error CS1001: Identifier expected\n/tmp/tmpqmak3cox.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the variance of a list of numbers.\n    // >>> Variance((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp26blrme1.cs(19,22): error CS1002: ; expected\n/tmp/tmp26blrme1.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp26blrme1.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp26blrme1.cs(30,22): error CS1002: ; expected\n/tmp/tmp26blrme1.cs(30,22): error CS1525: Invalid expression term ':'\n/tmp/tmp26blrme1.cs(30,22): error CS1001: Identifier expected\n/tmp/tmp26blrme1.cs(50,22): error CS1002: ; expected\n/tmp/tmp26blrme1.cs(50,22): error CS1525: Invalid expression term ':'\n/tmp/tmp26blrme1.cs(50,22): error CS1001: Identifier expected\n/tmp/tmp26blrme1.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each element and the mean\n        float mad = 0;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2aq33ils.cs(19,27): error CS1002: ; expected\n/tmp/tmp2aq33ils.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmp2aq33ils.cs(19,27): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each input number and the mean\n        float mad = 0.0f;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n\n        // Return the average of the absolute differences\n        return mad / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = 0;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n        float mad = 0;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Median.\n    // Median is the middle value in the list:\n    // Median = (x[Count(x) / 2] + x[Count(x) / 2 - 1]) / 2\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        int count = numbers.Count;\n        if (count % 2 == 1) {\n            return numbers[count / 2];\n        }\n        else {\n            return (numbers[count / 2] + numbers[count / 2 - 1]) / 2;\n        }\n    }\n\n    // For a given list of input numbers, calculate Mode.\n    // Mode is the value that appears the most frequently in the list:\n    // Mode = x[Count(x) == Max(Count(x))]\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)2.0f, (float)2.0f, (float)3.0f})))\n    // (2.0f)\n    public\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7o2wg3du.cs(19,22): error CS1002: ; expected\n/tmp/tmp7o2wg3du.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp7o2wg3du.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp7o2wg3du.cs(32,22): error CS1002: ; expected\n/tmp/tmp7o2wg3du.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmp7o2wg3du.cs(32,22): error CS1001: Identifier expected\n/tmp/tmp7o2wg3du.cs(59,5): error CS1519: Invalid token '}' in class, struct, or interface member declaration\n/tmp/tmp7o2wg3du.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers = numbers.OrderBy(x => x);\n        int mid = numbers.Count / 2;\n        return numbers[mid];\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the variance of a list of numbers.\n    // >>> Variance((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt0al_1a9.cs(19,22): error CS1002: ; expected\n/tmp/tmpt0al_1a9.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpt0al_1a9.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpt0al_1a9.cs(30,22): error CS1002: ; expected\n/tmp/tmpt0al_1a9.cs(30,22): error CS1525: Invalid expression term ':'\n/tmp/tmpt0al_1a9.cs(30,22): error CS1001: Identifier expected\n/tmp/tmpt0al_1a9.cs(51,22): error CS1002: ; expected\n/tmp/tmpt0al_1a9.cs(51,22): error CS1525: Invalid expression term ':'\n/tmp/tmpt0al_1a9.cs(51,22): error CS1001: Identifier expected\n/tmp/tmpt0al_1a9.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = 0.0f;\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        mean = sum / numbers.Count;\n        return mean;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpr78lj1l7.cs(19,27): error CS1002: ; expected\n/tmp/tmpr78lj1l7.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmpr78lj1l7.cs(19,27): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each input number and the mean\n        float mad = 0;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each element and the mean\n        float mad = 0.0f;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Mean of this dataset.\n    // Mean is the sum of all elements divided by the number of elements:\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median of this dataset.\n    // Median is the middle value in the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // For a given list of input numbers, calculate the Standard Deviation of this dataset.\n    // Standard Deviation is the square root of the variance.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return (float)Math.Sqrt(sum / numbers.Count);\n    }\n\n    // For a given list of\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpak7saky2.cs(19,22): error CS1002: ; expected\n/tmp/tmpak7saky2.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpak7saky2.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpak7saky2.cs(31,22): error CS1002: ; expected\n/tmp/tmpak7saky2.cs(31,22): error CS1525: Invalid expression term ':'\n/tmp/tmpak7saky2.cs(31,22): error CS1001: Identifier expected\n/tmp/tmpak7saky2.cs(53,22): error CS1002: ; expected\n/tmp/tmpak7saky2.cs(53,22): error CS1525: Invalid expression term ':'\n/tmp/tmpak7saky2.cs(53,22): error CS1001: Identifier expected\n/tmp/tmpak7saky2.cs(67,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Mean of this dataset.\n    // Mean is the sum of all elements divided by the number of elements:\n    // Mean = sum(x) / count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median of this dataset.\n    // Median is the value that is in the middle of the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        return numbers.OrderBy(x => x).First();\n    }\n\n    // For a given list of input numbers, calculate the Standard Deviation of this dataset.\n    // Standard Deviation is the square root of the variance.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // For a given list\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxoa53p6d.cs(19,22): error CS1002: ; expected\n/tmp/tmpxoa53p6d.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpxoa53p6d.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpxoa53p6d.cs(32,22): error CS1002: ; expected\n/tmp/tmpxoa53p6d.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmpxoa53p6d.cs(32,22): error CS1001: Identifier expected\n/tmp/tmpxoa53p6d.cs(53,22): error CS1002: ; expected\n/tmp/tmpxoa53p6d.cs(53,22): error CS1525: Invalid expression term ':'\n/tmp/tmpxoa53p6d.cs(53,22): error CS1001: Identifier expected\n/tmp/tmpxoa53p6d.cs(67,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Mean of this dataset.\n    // Mean is the average of all elements in the list:\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median of this dataset.\n    // Median is the middle value in the list:\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // For a given list of input numbers, calculate the Standard Deviation of\n    // this dataset.\n    // Standard Deviation is the square root of the variance:\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.41421f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return (float)Math.Sqrt(sum / numbers.Count);\n    }\n\n    // For a given list of input numbers, calculate the Variance of\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplq_w87x_.cs(19,22): error CS1002: ; expected\n/tmp/tmplq_w87x_.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmplq_w87x_.cs(19,22): error CS1001: Identifier expected\n/tmp/tmplq_w87x_.cs(31,22): error CS1002: ; expected\n/tmp/tmplq_w87x_.cs(31,22): error CS1525: Invalid expression term ':'\n/tmp/tmplq_w87x_.cs(31,22): error CS1001: Identifier expected\n/tmp/tmplq_w87x_.cs(54,22): error CS1002: ; expected\n/tmp/tmplq_w87x_.cs(54,22): error CS1525: Invalid expression term ':'\n/tmp/tmplq_w87x_.cs(54,22): error CS1001: Identifier expected\n/tmp/tmplq_w87x_.cs(68,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2aq33ils.cs(19,27): error CS1002: ; expected\n/tmp/tmp2aq33ils.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmp2aq33ils.cs(19,27): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each element and the mean\n        float mad = 0.0f;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the median.\n    // Median is the middle value in the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // For a given list of input numbers, calculate the standard deviation.\n    // Standard deviation is the square root of the variance.\n    // Standard deviation is the square root of the variance.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyjnfw0lo.cs(19,22): error CS1002: ; expected\n/tmp/tmpyjnfw0lo.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpyjnfw0lo.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpyjnfw0lo.cs(32,22): error CS1002: ; expected\n/tmp/tmpyjnfw0lo.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmpyjnfw0lo.cs(32,22): error CS1001: Identifier expected\n/tmp/tmpyjnfw0lo.cs(55,22): error CS1002: ; expected\n/tmp/tmpyjnfw0lo.cs(55,22): error CS1525: Invalid expression term ':'\n/tmp/tmpyjnfw0lo.cs(55,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2aq33ils.cs(19,27): error CS1002: ; expected\n/tmp/tmp2aq33ils.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmp2aq33ils.cs(19,27): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each number and the mean\n        float mad = 0.0f;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2aq33ils.cs(19,27): error CS1002: ; expected\n/tmp/tmp2aq33ils.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmp2aq33ils.cs(19,27): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each input number and the mean\n        float mad = 0.0f;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        float[] sorted = numbers.ToArray();\n        Arrays.Sort(sorted);\n        return sorted[sorted.Length / 2];\n    }\n\n    // Calculate the mode of a list of numbers.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4nn4vj8n.cs(19,22): error CS1002: ; expected\n/tmp/tmp4nn4vj8n.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4nn4vj8n.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp4nn4vj8n.cs(30,22): error CS1002: ; expected\n/tmp/tmp4nn4vj8n.cs(30,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4nn4vj8n.cs(30,22): error CS1001: Identifier expected\n/tmp/tmp4nn4vj8n.cs(42,22): error CS1002: ; expected\n/tmp/tmp4nn4vj8n.cs(42,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4nn4vj8n.cs(42,22): error CS1001: Identifier expected\n/tmp/tmp4nn4vj8n.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2aq33ils.cs(19,27): error CS1002: ; expected\n/tmp/tmp2aq33ils.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmp2aq33ils.cs(19,27): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Pow(number - mean, 2.0f);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // Calculate the mode of a list of numbers.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbf3vv5up.cs(19,27): error CS1002: ; expected\n/tmp/tmpbf3vv5up.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmpbf3vv5up.cs(19,27): error CS1001: Identifier expected\n/tmp/tmpbf3vv5up.cs(30,27): error CS1002: ; expected\n/tmp/tmpbf3vv5up.cs(30,27): error CS1525: Invalid expression term ':'\n/tmp/tmpbf3vv5up.cs(30,27): error CS1001: Identifier expected\n/tmp/tmpbf3vv5up.cs(42,27): error CS1002: ; expected\n/tmp/tmpbf3vv5up.cs(42,27): error CS1525: Invalid expression term ':'\n/tmp/tmpbf3vv5up.cs(42,27): error CS1001: Identifier expected\n/tmp/tmpbf3vv5up.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Median.\n    // Median is the middle value in the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        return numbers.OrderBy(x => x).Select(x => x).GetValue(numbers.Count / 2);\n    }\n\n    // For a given list of input numbers, calculate the Standard Deviation.\n    // Standard Deviation is the square root of the variance.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float number : numbers) {\n            sum += Math.Pow(number - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // For a given list of input numbers,\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqjtv9cfn.cs(19,27): error CS1002: ; expected\n/tmp/tmpqjtv9cfn.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmpqjtv9cfn.cs(19,27): error CS1001: Identifier expected\n/tmp/tmpqjtv9cfn.cs(32,27): error CS1002: ; expected\n/tmp/tmpqjtv9cfn.cs(32,27): error CS1525: Invalid expression term ':'\n/tmp/tmpqjtv9cfn.cs(32,27): error CS1001: Identifier expected\n/tmp/tmpqjtv9cfn.cs(53,27): error CS1002: ; expected\n/tmp/tmpqjtv9cfn.cs(53,27): error CS1525: Invalid expression term ':'\n/tmp/tmpqjtv9cfn.cs(53,27): error CS1001: Identifier expected\n/tmp/tmpqjtv9cfn.cs(67,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean\n    // Mean is the average of all elements in the list:\n    // Mean = (float)sum(numbers) / (float)numbers.Count\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Standard Deviation\n    // Standard Deviation is the square root of the variance:\n    // StandardDeviation = sqrt(Variance)\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.414f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2.0f);\n        }\n        return (float)Math.Sqrt(sum / numbers.Count);\n    }\n\n    // For a given list of input numbers, calculate Variance\n    // Variance is the sum of squared deviations from the mean:\n    // Variance = (float)sum(numbers) / (float)numbers.Count\n    // >>> Variance((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.25\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl_66asy7.cs(19,22): error CS1002: ; expected\n/tmp/tmpl_66asy7.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpl_66asy7.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpl_66asy7.cs(32,22): error CS1002: ; expected\n/tmp/tmpl_66asy7.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmpl_66asy7.cs(32,22): error CS1001: Identifier expected\n/tmp/tmpl_66asy7.cs(46,22): error CS1002: ; expected\n/tmp/tmpl_66asy7.cs(46,22): error CS1525: Invalid expression term ':'\n/tmp/tmpl_66asy7.cs(46,22): error CS1001: Identifier expected\n/tmp/tmpl_66asy7.cs(64,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the list of numbers\n        float mean = 0;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each value and the mean\n        float mad = 0;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Create a new list to hold the result\n        List<float> result = new List<float>();\n\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each number and the mean\n        foreach (float number in numbers) {\n            result.Add(Math.Abs(number - mean));\n        }\n\n        // Calculate the mean of the absolute differences\n        float meanAbsoluteDeviation = 0.0f;\n        foreach (float difference in result) {\n            meanAbsoluteDeviation += difference;\n        }\n        meanAbsoluteDeviation /= result.Count;\n\n        // Return the mean absolute deviation\n        return meanAbsoluteDeviation;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = 0.0f;\n        for (float number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n        float mad = 0.0f;\n        for (float number : numbers) {\n            mad += Math.Abs(number - mean);\n        }\n        return mad / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdxgfbnrn.cs(18,27): error CS1002: ; expected\n/tmp/tmpdxgfbnrn.cs(18,27): error CS1525: Invalid expression term ':'\n/tmp/tmpdxgfbnrn.cs(18,27): error CS1001: Identifier expected\n/tmp/tmpdxgfbnrn.cs(23,27): error CS1002: ; expected\n/tmp/tmpdxgfbnrn.cs(23,27): error CS1525: Invalid expression term ':'\n/tmp/tmpdxgfbnrn.cs(23,27): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        Collections.Sort(numbers);\n        return numbers[numbers.Count / 2];\n    }\n\n    // Calculate the mode of a list of numbers.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mode(List<float> numbers) {\n        float max = 0.0f;\n        int maxCount = 0;\n        for (float number : numbers) {\n            if (numbers.Count == 1) {\n                return number;\n            }\n            if (numbers.Count == 2) {\n                if (number == numbers[0]) {\n                    return number;\n                }\n                if (number == numbers[1]) {\n                    return number;\n                }\n            }\n            if (number > max) {\n                max = number;\n                maxCount = 1;\n            }\n            else if (number == max) {\n                \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpupicvd_r.cs(19,27): error CS1002: ; expected\n/tmp/tmpupicvd_r.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmpupicvd_r.cs(19,27): error CS1001: Identifier expected\n/tmp/tmpupicvd_r.cs(30,27): error CS1002: ; expected\n/tmp/tmpupicvd_r.cs(30,27): error CS1525: Invalid expression term ':'\n/tmp/tmpupicvd_r.cs(30,27): error CS1001: Identifier expected\n/tmp/tmpupicvd_r.cs(50,27): error CS1002: ; expected\n/tmp/tmpupicvd_r.cs(50,27): error CS1525: Invalid expression term ':'\n/tmp/tmpupicvd_r.cs(50,27): error CS1001: Identifier expected\n/tmp/tmpupicvd_r.cs(69,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpupicvd_r.cs(75,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = 0.0f;\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        mean = sum / numbers.Count;\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt0fikjek.cs(19,22): error CS1002: ; expected\n/tmp/tmpt0fikjek.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpt0fikjek.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the list of numbers\n        float mean = 0.0f;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each number and the mean\n        float mad = 0.0f;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the list of numbers\n        float mean = 0;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each number and the mean\n        float mad = 0;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each element and the mean\n        float mad = 0.0f;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Median.\n    // Median is the middle value in the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        float[] sorted = numbers.ToArray();\n        Arrays.Sort(sorted);\n        return sorted[sorted.Length / 2];\n    }\n\n    // For a given list of input numbers, calculate the Mode.\n    // Mode is the value that appears the most frequently in the list.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mode(List<float> numbers) {\n        HashSet<float> set = new HashSet<float>();\n        for (float x : numbers) {\n            set.Add(x);\n        }\n        float max = 0.0f;\n        for (float x : set) {\n            if (x > max) {\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph6ivrpax.cs(19,22): error CS1002: ; expected\n/tmp/tmph6ivrpax.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmph6ivrpax.cs(19,22): error CS1001: Identifier expected\n/tmp/tmph6ivrpax.cs(32,22): error CS1002: ; expected\n/tmp/tmph6ivrpax.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmph6ivrpax.cs(32,22): error CS1001: Identifier expected\n/tmp/tmph6ivrpax.cs(54,22): error CS1002: ; expected\n/tmp/tmph6ivrpax.cs(54,22): error CS1525: Invalid expression term ':'\n/tmp/tmph6ivrpax.cs(54,22): error CS1001: Identifier expected\n/tmp/tmph6ivrpax.cs(58,22): error CS1002: ; expected\n/tmp/tmph6ivrpax.cs(58,22): error CS1525: Invalid expression term ':'\n/tmp/tmph6ivrpax.cs(58,22): error CS1001: Identifier expected\n/tmp/tmph6ivrpax.cs(62,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmph6ivrpax.cs(68,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each number and the mean\n        float mad = 0;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n\n        // Return the average of the absolute differences\n        return mad / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each input number and the mean\n        float mad = 0.0f;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Median.\n    // Median is the middle value in the list:\n    // Median = (x[(n - 1) / 2] + x[(n + 1) / 2]) / 2\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        int count = numbers.Count;\n        if (count == 0) {\n            throw new Exception(\"Median of an empty list is not defined.\");\n        }\n        if (count % 2 == 0) {\n            return (numbers[count / 2 - 1] + numbers[count / 2]) / 2.0f;\n        }\n        return numbers[count / 2];\n    }\n\n    // For a given list of input numbers, calculate Standard Deviation.\n    // Standard Deviation is the square root of the variance:\n    // StandardDeviation = sqrt(Variance)\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcvmt2amz.cs(19,27): error CS1002: ; expected\n/tmp/tmpcvmt2amz.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmpcvmt2amz.cs(19,27): error CS1001: Identifier expected\n/tmp/tmpcvmt2amz.cs(32,27): error CS1002: ; expected\n/tmp/tmpcvmt2amz.cs(32,27): error CS1525: Invalid expression term ':'\n/tmp/tmpcvmt2amz.cs(32,27): error CS1001: Identifier expected\n/tmp/tmpcvmt2amz.cs(65,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Mean of this dataset.\n    // Mean is the sum of all elements divided by the number of elements:\n    // Mean = sum(x) / count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median of this dataset.\n    // Median is the middle value in the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        float[] sorted = numbers.ToArray();\n        Arrays.Sort(sorted);\n        return sorted[sorted.Length / 2];\n    }\n\n    // For a given list of input numbers, calculate the Standard Deviation of this dataset.\n    // Standard Deviation is the square root of the variance.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5ke9vw8a.cs(19,22): error CS1002: ; expected\n/tmp/tmp5ke9vw8a.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp5ke9vw8a.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp5ke9vw8a.cs(32,22): error CS1002: ; expected\n/tmp/tmp5ke9vw8a.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmp5ke9vw8a.cs(32,22): error CS1001: Identifier expected\n/tmp/tmp5ke9vw8a.cs(55,22): error CS1002: ; expected\n/tmp/tmp5ke9vw8a.cs(55,22): error CS1525: Invalid expression term ':'\n/tmp/tmp5ke9vw8a.cs(55,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Pow(number - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the variance of a list of numbers.\n    // >>> Variance((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp45hyo17n.cs(19,27): error CS1002: ; expected\n/tmp/tmp45hyo17n.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmp45hyo17n.cs(19,27): error CS1001: Identifier expected\n/tmp/tmp45hyo17n.cs(30,27): error CS1002: ; expected\n/tmp/tmp45hyo17n.cs(30,27): error CS1525: Invalid expression term ':'\n/tmp/tmp45hyo17n.cs(30,27): error CS1001: Identifier expected\n/tmp/tmp45hyo17n.cs(50,27): error CS1002: ; expected\n/tmp/tmp45hyo17n.cs(50,27): error CS1525: Invalid expression term ':'\n/tmp/tmp45hyo17n.cs(50,27): error CS1001: Identifier expected\n/tmp/tmp45hyo17n.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each number and the mean\n        float mad = 0.0f;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = 0.0f;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n        float mad = 0.0f;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n        mad /= numbers.Count;\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each number and the mean\n        float mad = 0.0f;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        Collections.Sort(numbers);\n        return numbers[numbers.Count / 2];\n    }\n\n    // Calculate the mode of a list of numbers.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7_ki7djn.cs(19,22): error CS1002: ; expected\n/tmp/tmp7_ki7djn.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp7_ki7djn.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp7_ki7djn.cs(30,22): error CS1002: ; expected\n/tmp/tmp7_ki7djn.cs(30,22): error CS1525: Invalid expression term ':'\n/tmp/tmp7_ki7djn.cs(30,22): error CS1001: Identifier expected\n/tmp/tmp7_ki7djn.cs(42,22): error CS1002: ; expected\n/tmp/tmp7_ki7djn.cs(42,22): error CS1525: Invalid expression term ':'\n/tmp/tmp7_ki7djn.cs(42,22): error CS1001: Identifier expected\n/tmp/tmp7_ki7djn.cs(67,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each input number and the mean\n        float mad = 0;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each number and the mean\n        float mad = 0;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n\n        // Return the average of the absolute differences\n        return mad / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each number and the mean\n        float mad = 0.0f;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the mean absolute deviation\n        float mad = 0.0f;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers = numbers.OrderBy(x => x);\n        if (numbers.Count % 2 == 0) {\n            return (numbers[numbers.Count / 2] + numbers[numbers.Count / 2 - 1]) / 2;\n        }\n        return numbers[numbers.Count / 2];\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the variance of a list of numbers.\n    // >>> Variance((new\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0_mlq_98.cs(19,22): error CS1002: ; expected\n/tmp/tmp0_mlq_98.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp0_mlq_98.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp0_mlq_98.cs(30,22): error CS1002: ; expected\n/tmp/tmp0_mlq_98.cs(30,22): error CS1525: Invalid expression term ':'\n/tmp/tmp0_mlq_98.cs(30,22): error CS1001: Identifier expected\n/tmp/tmp0_mlq_98.cs(53,22): error CS1002: ; expected\n/tmp/tmp0_mlq_98.cs(53,22): error CS1525: Invalid expression term ':'\n/tmp/tmp0_mlq_98.cs(53,22): error CS1001: Identifier expected\n/tmp/tmp0_mlq_98.cs(68,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the list of numbers\n        float mean = 0;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each number and the mean\n        float mad = 0;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the standard deviation of a list of numbers\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Pow(number - mean, 2.0f);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the median of a list of numbers\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers = numbers.OrderBy(x => x);\n        int middle = numbers.Count / 2;\n        return numbers[middle];\n    }\n\n    // Calculate the mode of a list of numbers\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy6ff49ge.cs(19,27): error CS1002: ; expected\n/tmp/tmpy6ff49ge.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmpy6ff49ge.cs(19,27): error CS1001: Identifier expected\n/tmp/tmpy6ff49ge.cs(30,27): error CS1002: ; expected\n/tmp/tmpy6ff49ge.cs(30,27): error CS1525: Invalid expression term ':'\n/tmp/tmpy6ff49ge.cs(30,27): error CS1001: Identifier expected\n/tmp/tmpy6ff49ge.cs(42,27): error CS1002: ; expected\n/tmp/tmpy6ff49ge.cs(42,27): error CS1525: Invalid expression term ':'\n/tmp/tmpy6ff49ge.cs(42,27): error CS1001: Identifier expected\n/tmp/tmpy6ff49ge.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        Collections.Sort(numbers);\n        return numbers[numbers.Count / 2];\n    }\n\n    // Calculate the mode of a list of numbers.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpagwsjen_.cs(19,22): error CS1002: ; expected\n/tmp/tmpagwsjen_.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpagwsjen_.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpagwsjen_.cs(30,22): error CS1002: ; expected\n/tmp/tmpagwsjen_.cs(30,22): error CS1525: Invalid expression term ':'\n/tmp/tmpagwsjen_.cs(30,22): error CS1001: Identifier expected\n/tmp/tmpagwsjen_.cs(42,22): error CS1002: ; expected\n/tmp/tmpagwsjen_.cs(42,22): error CS1525: Invalid expression term ':'\n/tmp/tmpagwsjen_.cs(42,22): error CS1001: Identifier expected\n/tmp/tmpagwsjen_.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each element and the mean\n        float mad = 0.0f;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n\n        // Return the average of the absolute differences\n        return mad / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = 0;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n        float sum = 0;\n        foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median.\n    // Median is the value that appears in the middle of the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers = numbers.OrderBy(x => x);\n        int mid = numbers.Count / 2;\n        return numbers[mid];\n    }\n\n    // For a given list of input numbers, calculate the Standard Deviation.\n    // Standard Deviation is the square root of the variance.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2.0f);\n        }\n        return (float)Math.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjj1_y0re.cs(19,22): error CS1002: ; expected\n/tmp/tmpjj1_y0re.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpjj1_y0re.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpjj1_y0re.cs(32,22): error CS1002: ; expected\n/tmp/tmpjj1_y0re.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmpjj1_y0re.cs(32,22): error CS1001: Identifier expected\n/tmp/tmpjj1_y0re.cs(55,22): error CS1002: ; expected\n/tmp/tmpjj1_y0re.cs(55,22): error CS1525: Invalid expression term ':'\n/tmp/tmpjj1_y0re.cs(55,22): error CS1001: Identifier expected\n/tmp/tmpjj1_y0re.cs(58,28): error CS1001: Identifier expected\n/tmp/tmpjj1_y0re.cs(58,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median.\n    // Median is the value that is in the middle of the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        float[] sorted = numbers.ToArray();\n        Arrays.Sort(sorted);\n        return sorted[sorted.Length / 2];\n    }\n\n    // For a given list of input numbers, calculate the Standard Deviation.\n    // Standard Deviation is the square root of the variance.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.414f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2.0f);\n        }\n        return (float)Math.Sqrt(sum / numbers.Count);\n    }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdvuxfxjj.cs(19,22): error CS1002: ; expected\n/tmp/tmpdvuxfxjj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpdvuxfxjj.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpdvuxfxjj.cs(31,22): error CS1002: ; expected\n/tmp/tmpdvuxfxjj.cs(31,22): error CS1525: Invalid expression term ':'\n/tmp/tmpdvuxfxjj.cs(31,22): error CS1001: Identifier expected\n/tmp/tmpdvuxfxjj.cs(54,22): error CS1002: ; expected\n/tmp/tmpdvuxfxjj.cs(54,22): error CS1525: Invalid expression term ':'\n/tmp/tmpdvuxfxjj.cs(54,22): error CS1001: Identifier expected\n/tmp/tmpdvuxfxjj.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = 0.0f;\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        mean = sum / numbers.Count;\n        return mean;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpscep1mjq.cs(19,22): error CS1002: ; expected\n/tmp/tmpscep1mjq.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpscep1mjq.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the mean absolute deviation\n        float mad = 0.0f;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n\n    // For a given list of input numbers, calculate the median of this dataset.\n    // Median is the value that is in the middle of the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        // Sort the input numbers\n        numbers.Sort();\n\n        // Return the middle value\n        return numbers[numbers.Count / 2];\n    }\n\n    // For a given list of input numbers, calculate the mode of this dataset.\n    // Mode is the value that appears the most frequently in the list.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mode(List<float> numbers) {\n        // Sort the input numbers\n        numbers.Sort();\n\n        // Count the number of times each value appears\n        int[] counts = new int[numbers.Count];\n        for (int i = 0; i < numbers.Count; i++) {\n            counts[numbers[i]]++;\n        }\n\n        // Find the value that appears the most\n        int max = 0;\n        for (int i = 0; i < numbers.Count; i++) {\n            if (counts[i] > max) {\n                max = counts[i];\n            }\n        }\n\n        // Return the value that appears the most\n        return numbers[max];\n    }\n\n    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuprtw5uq.cs(80,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each element and the mean\n        float mad = 0.0f;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Mean of this dataset.\n    // Mean is the average of all elements in the list:\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median of this dataset.\n    // Median is the middle value in the list:\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // For a given list of input numbers, calculate the Standard Deviation of\n    // this dataset.\n    // Standard Deviation is the square root of the variance:\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.41421f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return (float)Math.Sqrt(sum / numbers.Count);\n    }\n\n    // For a given list\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpihmc0i1y.cs(19,22): error CS1002: ; expected\n/tmp/tmpihmc0i1y.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpihmc0i1y.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpihmc0i1y.cs(31,22): error CS1002: ; expected\n/tmp/tmpihmc0i1y.cs(31,22): error CS1525: Invalid expression term ':'\n/tmp/tmpihmc0i1y.cs(31,22): error CS1001: Identifier expected\n/tmp/tmpihmc0i1y.cs(54,22): error CS1002: ; expected\n/tmp/tmpihmc0i1y.cs(54,22): error CS1525: Invalid expression term ':'\n/tmp/tmpihmc0i1y.cs(54,22): error CS1001: Identifier expected\n/tmp/tmpihmc0i1y.cs(68,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Median.\n    // Median is the middle value in the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // For a given list of input numbers, calculate Mode.\n    // Mode is the value that appears the most frequently in the list.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mode(List<float> numbers) {\n        HashSet<float> set = new HashSet<float>();\n        for (float x : numbers) {\n            set.Add(x);\n        }\n        float max = 0;\n        for (float x : set) {\n            if (x > max) {\n                max = x;\n            }\n        }\n        return max;\n    }\n\n    // For a\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3vlsykc8.cs(19,22): error CS1002: ; expected\n/tmp/tmp3vlsykc8.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp3vlsykc8.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp3vlsykc8.cs(32,22): error CS1002: ; expected\n/tmp/tmp3vlsykc8.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmp3vlsykc8.cs(32,22): error CS1001: Identifier expected\n/tmp/tmp3vlsykc8.cs(53,22): error CS1002: ; expected\n/tmp/tmp3vlsykc8.cs(53,22): error CS1525: Invalid expression term ':'\n/tmp/tmp3vlsykc8.cs(53,22): error CS1001: Identifier expected\n/tmp/tmp3vlsykc8.cs(57,22): error CS1002: ; expected\n/tmp/tmp3vlsykc8.cs(57,22): error CS1525: Invalid expression term ':'\n/tmp/tmp3vlsykc8.cs(57,22): error CS1001: Identifier expected\n/tmp/tmp3vlsykc8.cs(73,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean\n    // Mean is the average of all elements in the list:\n    // Mean = (float)Sum(numbers) / (float)numbers.Count\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median\n    // Median is the middle number in the list:\n    // Median = (float)numbers.OrderBy(x => x).First()\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        return (float)numbers.OrderBy(x => x).First();\n    }\n\n    // For a given list of input numbers, calculate the Standard Deviation\n    // Standard Deviation is the square root of the variance:\n    // StandardDeviation = sqrt(Variance(numbers))\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.414f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqwzr3y6i.cs(19,22): error CS1002: ; expected\n/tmp/tmpqwzr3y6i.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpqwzr3y6i.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpqwzr3y6i.cs(32,22): error CS1002: ; expected\n/tmp/tmpqwzr3y6i.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmpqwzr3y6i.cs(32,22): error CS1001: Identifier expected\n/tmp/tmpqwzr3y6i.cs(55,22): error CS1002: ; expected\n/tmp/tmpqwzr3y6i.cs(55,22): error CS1525: Invalid expression term ':'\n/tmp/tmpqwzr3y6i.cs(55,22): error CS1001: Identifier expected\n/tmp/tmpqwzr3y6i.cs(59,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpqwzr3y6i.cs(65,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median.\n    // Median is the value that is in the middle of the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // For a given list of input numbers, calculate the Mode.\n    // Mode is the value that appears the most frequently in the list.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mode(List<float> numbers) {\n        HashSet<float> set = new HashSet<float>();\n        for (float x : numbers) {\n            set.Add(x);\n        }\n        float max = 0;\n        for (float x : set) {\n            if (x > max) {\n                max = x;\n            }\n        }\n        return max;\n    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3y254_kv.cs(19,22): error CS1002: ; expected\n/tmp/tmp3y254_kv.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp3y254_kv.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp3y254_kv.cs(32,22): error CS1002: ; expected\n/tmp/tmp3y254_kv.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmp3y254_kv.cs(32,22): error CS1001: Identifier expected\n/tmp/tmp3y254_kv.cs(53,22): error CS1002: ; expected\n/tmp/tmp3y254_kv.cs(53,22): error CS1525: Invalid expression term ':'\n/tmp/tmp3y254_kv.cs(53,22): error CS1001: Identifier expected\n/tmp/tmp3y254_kv.cs(57,22): error CS1002: ; expected\n/tmp/tmp3y254_kv.cs(57,22): error CS1525: Invalid expression term ':'\n/tmp/tmp3y254_kv.cs(57,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        int mid = numbers.Count / 2;\n        return numbers[mid];\n    }\n\n    // Calculate the mode of a list of numbers.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps9ee4bh7.cs(19,22): error CS1002: ; expected\n/tmp/tmps9ee4bh7.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmps9ee4bh7.cs(19,22): error CS1001: Identifier expected\n/tmp/tmps9ee4bh7.cs(30,22): error CS1002: ; expected\n/tmp/tmps9ee4bh7.cs(30,22): error CS1525: Invalid expression term ':'\n/tmp/tmps9ee4bh7.cs(30,22): error CS1001: Identifier expected\n/tmp/tmps9ee4bh7.cs(42,22): error CS1002: ; expected\n/tmp/tmps9ee4bh7.cs(42,22): error CS1525: Invalid expression term ':'\n/tmp/tmps9ee4bh7.cs(42,22): error CS1001: Identifier expected\n/tmp/tmps9ee4bh7.cs(67,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Standard Deviation\n    // Standard Deviation is the square root of the variance:\n    // StandardDeviation = sqrt(Variance)\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.414f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return (float)Math.Sqrt(sum / numbers.Count);\n    }\n\n    // For a given list of input numbers, calculate Variance\n    // Variance is the sum of squared deviations from the mean:\n    // Variance = Sum(x - Mean(x))^2\n    // >>> Variance((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Variance(List<float> numbers)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph0g9u76z.cs(19,22): error CS1002: ; expected\n/tmp/tmph0g9u76z.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmph0g9u76z.cs(19,22): error CS1001: Identifier expected\n/tmp/tmph0g9u76z.cs(32,22): error CS1002: ; expected\n/tmp/tmph0g9u76z.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmph0g9u76z.cs(32,22): error CS1001: Identifier expected\n/tmp/tmph0g9u76z.cs(46,22): error CS1002: ; expected\n/tmp/tmph0g9u76z.cs(46,22): error CS1525: Invalid expression term ':'\n/tmp/tmph0g9u76z.cs(46,22): error CS1001: Identifier expected\n/tmp/tmph0g9u76z.cs(57,54): error CS1002: ; expected\n/tmp/tmph0g9u76z.cs(65,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2aq33ils.cs(19,27): error CS1002: ; expected\n/tmp/tmp2aq33ils.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmp2aq33ils.cs(19,27): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = (float)sum(numbers) / (float)numbers.Count\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median.\n    // Median is the value that is in the middle of the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // For a given list of input numbers, calculate the Standard Deviation.\n    // Standard Deviation is the square root of the variance.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.41421f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return (float)Math.Sqrt(sum / numbers.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppkygchqt.cs(19,22): error CS1002: ; expected\n/tmp/tmppkygchqt.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmppkygchqt.cs(19,22): error CS1001: Identifier expected\n/tmp/tmppkygchqt.cs(32,22): error CS1002: ; expected\n/tmp/tmppkygchqt.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmppkygchqt.cs(32,22): error CS1001: Identifier expected\n/tmp/tmppkygchqt.cs(54,22): error CS1002: ; expected\n/tmp/tmppkygchqt.cs(54,22): error CS1525: Invalid expression term ':'\n/tmp/tmppkygchqt.cs(54,22): error CS1001: Identifier expected\n/tmp/tmppkygchqt.cs(57,47): error CS1001: Identifier expected\n/tmp/tmppkygchqt.cs(57,47): error CS1026: ) expected\n/tmp/tmppkygchqt.cs(57,47): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median.\n    // Median is the middle value in the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // For a given list of input numbers, calculate the Mode.\n    // Mode is the value that appears the most frequently in the list.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Mode(List<float> numbers) {\n        HashSet<float> set = new HashSet<float>();\n        for (float x : numbers) {\n            set.Add(x);\n        }\n        float max = 0.0f;\n        for (float x : set) {\n            if (x > max) {\n                max = x;\n            }\n        }\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1x7mu6qi.cs(19,22): error CS1002: ; expected\n/tmp/tmp1x7mu6qi.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp1x7mu6qi.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp1x7mu6qi.cs(32,22): error CS1002: ; expected\n/tmp/tmp1x7mu6qi.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmp1x7mu6qi.cs(32,22): error CS1001: Identifier expected\n/tmp/tmp1x7mu6qi.cs(53,22): error CS1002: ; expected\n/tmp/tmp1x7mu6qi.cs(53,22): error CS1525: Invalid expression term ':'\n/tmp/tmp1x7mu6qi.cs(53,22): error CS1001: Identifier expected\n/tmp/tmp1x7mu6qi.cs(57,22): error CS1002: ; expected\n/tmp/tmp1x7mu6qi.cs(57,22): error CS1525: Invalid expression term ':'\n/tmp/tmp1x7mu6qi.cs(57,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median.\n    // Median is the middle number in the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        return numbers.OrderBy(x => x).Select(x => x).GetAt(numbers.Count / 2);\n    }\n\n    // For a given list of input numbers, calculate the Standard Deviation.\n    // Standard Deviation is the square root of the variance.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Pow(number - mean, 2.0f);\n        }\n        return (float)Math.Sqrt(sum / numbers.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3s588xw5.cs(19,27): error CS1002: ; expected\n/tmp/tmp3s588xw5.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmp3s588xw5.cs(19,27): error CS1001: Identifier expected\n/tmp/tmp3s588xw5.cs(32,27): error CS1002: ; expected\n/tmp/tmp3s588xw5.cs(32,27): error CS1525: Invalid expression term ':'\n/tmp/tmp3s588xw5.cs(32,27): error CS1001: Identifier expected\n/tmp/tmp3s588xw5.cs(53,27): error CS1002: ; expected\n/tmp/tmp3s588xw5.cs(53,27): error CS1525: Invalid expression term ':'\n/tmp/tmp3s588xw5.cs(53,27): error CS1001: Identifier expected\n/tmp/tmp3s588xw5.cs(56,47): error CS1001: Identifier expected\n/tmp/tmp3s588xw5.cs(56,47): error CS1026: ) expected\n/tmp/tmp3s588xw5.cs(56,47): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each number and the mean\n        float mad = 0;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Median\n    // Median is the middle value in the list:\n    // Median = (x[Count(x) / 2] + x[Count(x) / 2 - 1]) / 2\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        int count = numbers.Count;\n        if (count == 0) {\n            throw new Exception(\"Median called on empty list\");\n        }\n        if (count % 2 == 1) {\n            return numbers[count / 2];\n        }\n        else {\n            return (numbers[count / 2] + numbers[count / 2 - 1]) / 2;\n        }\n    }\n\n    // For a given list of input numbers, calculate Standard Deviation\n    // Standard Deviation is the square root of the variance:\n    // StandardDeviation = sqrt(Variance)\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp51s1vmaf.cs(19,22): error CS1002: ; expected\n/tmp/tmp51s1vmaf.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp51s1vmaf.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp51s1vmaf.cs(32,22): error CS1002: ; expected\n/tmp/tmp51s1vmaf.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmp51s1vmaf.cs(32,22): error CS1001: Identifier expected\n/tmp/tmp51s1vmaf.cs(67,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each number and the mean\n        float mad = 0;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n\n        // Return the average of the absolute differences\n        return mad / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each element and the mean\n        float mad = 0;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the median of a list of numbers\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers = numbers.OrderBy(x => x);\n        int mid = numbers.Count / 2;\n        return numbers[mid];\n    }\n\n    // Calculate the standard deviation of a list of numbers\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the mode of a list of numbers\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7jkw3obn.cs(19,22): error CS1002: ; expected\n/tmp/tmp7jkw3obn.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp7jkw3obn.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp7jkw3obn.cs(30,22): error CS1002: ; expected\n/tmp/tmp7jkw3obn.cs(30,22): error CS1525: Invalid expression term ':'\n/tmp/tmp7jkw3obn.cs(30,22): error CS1001: Identifier expected\n/tmp/tmp7jkw3obn.cs(51,22): error CS1002: ; expected\n/tmp/tmp7jkw3obn.cs(51,22): error CS1525: Invalid expression term ':'\n/tmp/tmp7jkw3obn.cs(51,22): error CS1001: Identifier expected\n/tmp/tmp7jkw3obn.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = 0;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n        float sum = 0;\n        foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = 0.0f;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n        float mad = 0.0f;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = 0.0f;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n        float sum = 0.0f;\n        foreach (float x in numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(float[] numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Length);\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppcbhvwkw.cs(19,22): error CS1002: ; expected\n/tmp/tmppcbhvwkw.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmppcbhvwkw.cs(19,22): error CS1001: Identifier expected\n/tmp/tmppcbhvwkw.cs(30,22): error CS1002: ; expected\n/tmp/tmppcbhvwkw.cs(30,22): error CS1525: Invalid expression term ':'\n/tmp/tmppcbhvwkw.cs(30,22): error CS1001: Identifier expected\n/tmp/tmppcbhvwkw.cs(42,22): error CS1002: ; expected\n/tmp/tmppcbhvwkw.cs(42,22): error CS1525: Invalid expression term ':'\n/tmp/tmppcbhvwkw.cs(42,22): error CS1001: Identifier expected\n/tmp/tmppcbhvwkw.cs(54,22): error CS1002: ; expected\n/tmp/tmppcbhvwkw.cs(54,22): error CS1525: Invalid expression term ':'\n/tmp/tmppcbhvwkw.cs(54,22): error CS1001: Identifier expected\n/tmp/tmppcbhvwkw.cs(69,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each input number and the mean\n        float mad = 0.0f;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n\n        // Return the average of the absolute differences\n        return mad / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median.\n    // Median is the middle value in the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        float[] nums = numbers.ToArray();\n        Arrays.Sort(nums);\n        return nums[nums.Length / 2];\n    }\n\n    // For a given list of input numbers, calculate the Mode.\n    // Mode is the value that appears the most frequently in the list.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mode(List<float> numbers) {\n        HashSet<float> set = new HashSet<float>();\n        for (float x : numbers) {\n            set.Add(x);\n        }\n        float max = 0.0f;\n        for (float x : set) {\n            if (x > max\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqbo28j1c.cs(19,22): error CS1002: ; expected\n/tmp/tmpqbo28j1c.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpqbo28j1c.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpqbo28j1c.cs(32,22): error CS1002: ; expected\n/tmp/tmpqbo28j1c.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmpqbo28j1c.cs(32,22): error CS1001: Identifier expected\n/tmp/tmpqbo28j1c.cs(54,22): error CS1002: ; expected\n/tmp/tmpqbo28j1c.cs(54,22): error CS1525: Invalid expression term ':'\n/tmp/tmpqbo28j1c.cs(54,22): error CS1001: Identifier expected\n/tmp/tmpqbo28j1c.cs(58,22): error CS1002: ; expected\n/tmp/tmpqbo28j1c.cs(58,22): error CS1525: Invalid expression term ':'\n/tmp/tmpqbo28j1c.cs(58,22): error CS1001: Identifier expected\n/tmp/tmpqbo28j1c.cs(59,24): error CS1026: ) expected\n/tmp/tmpqbo28j1c.cs(59,24): error CS1525: Invalid expression term '}'\n/tmp/tmpqbo28j1c.cs(59,24): error CS1002: ; expected\n/tmp/tmpqbo28j1c.cs(61,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpqbo28j1c.cs(67,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the median of a list of numbers\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        return numbers.OrderBy(x => x).Select(x => x).GetValue(numbers.Count / 2);\n    }\n\n    // Calculate the standard deviation of a list of numbers\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Pow(number - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the variance of a list of numbers\n    // >>> Variance((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9y1k_b41.cs(19,27): error CS1002: ; expected\n/tmp/tmp9y1k_b41.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmp9y1k_b41.cs(19,27): error CS1001: Identifier expected\n/tmp/tmp9y1k_b41.cs(30,27): error CS1002: ; expected\n/tmp/tmp9y1k_b41.cs(30,27): error CS1525: Invalid expression term ':'\n/tmp/tmp9y1k_b41.cs(30,27): error CS1001: Identifier expected\n/tmp/tmp9y1k_b41.cs(49,27): error CS1002: ; expected\n/tmp/tmp9y1k_b41.cs(49,27): error CS1525: Invalid expression term ':'\n/tmp/tmp9y1k_b41.cs(49,27): error CS1001: Identifier expected\n/tmp/tmp9y1k_b41.cs(64,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Pow(number - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the variance of a list of numbers.\n    // >>> Variance((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpv0vv9pj4.cs(19,27): error CS1002: ; expected\n/tmp/tmpv0vv9pj4.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmpv0vv9pj4.cs(19,27): error CS1001: Identifier expected\n/tmp/tmpv0vv9pj4.cs(30,27): error CS1002: ; expected\n/tmp/tmpv0vv9pj4.cs(30,27): error CS1525: Invalid expression term ':'\n/tmp/tmpv0vv9pj4.cs(30,27): error CS1001: Identifier expected\n/tmp/tmpv0vv9pj4.cs(50,27): error CS1002: ; expected\n/tmp/tmpv0vv9pj4.cs(50,27): error CS1525: Invalid expression term ':'\n/tmp/tmpv0vv9pj4.cs(50,27): error CS1001: Identifier expected\n/tmp/tmpv0vv9pj4.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each number and the mean\n        float mad = 0.0f;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n\n        // Return the average of the absolute differences\n        return mad / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Pow(number - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the variance of a list of numbers.\n    // >>> Variance((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp45hyo17n.cs(19,27): error CS1002: ; expected\n/tmp/tmp45hyo17n.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmp45hyo17n.cs(19,27): error CS1001: Identifier expected\n/tmp/tmp45hyo17n.cs(30,27): error CS1002: ; expected\n/tmp/tmp45hyo17n.cs(30,27): error CS1525: Invalid expression term ':'\n/tmp/tmp45hyo17n.cs(30,27): error CS1001: Identifier expected\n/tmp/tmp45hyo17n.cs(50,27): error CS1002: ; expected\n/tmp/tmp45hyo17n.cs(50,27): error CS1525: Invalid expression term ':'\n/tmp/tmp45hyo17n.cs(50,27): error CS1001: Identifier expected\n/tmp/tmp45hyo17n.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the mean of this dataset.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the median of this dataset.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // For a given list of input numbers, calculate the standard deviation of this dataset.\n    // >>> StdDev((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StdDev(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // For a given list of input numbers, calculate the variance of this dataset.\n    // >>> Variance((new List<float>(new float[]{(float)1.0f, (float)2.0f,\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmiim4coz.cs(19,22): error CS1002: ; expected\n/tmp/tmpmiim4coz.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpmiim4coz.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpmiim4coz.cs(30,22): error CS1002: ; expected\n/tmp/tmpmiim4coz.cs(30,22): error CS1525: Invalid expression term ':'\n/tmp/tmpmiim4coz.cs(30,22): error CS1001: Identifier expected\n/tmp/tmpmiim4coz.cs(50,22): error CS1002: ; expected\n/tmp/tmpmiim4coz.cs(50,22): error CS1525: Invalid expression term ':'\n/tmp/tmpmiim4coz.cs(50,22): error CS1001: Identifier expected\n/tmp/tmpmiim4coz.cs(65,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Pow(number - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        float[] sorted = numbers.ToArray();\n        Arrays.Sort(sorted);\n        return sorted[sorted.Length / 2];\n    }\n\n    // Calculate the mode of a list of numbers.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpv_upkrnc.cs(19,27): error CS1002: ; expected\n/tmp/tmpv_upkrnc.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmpv_upkrnc.cs(19,27): error CS1001: Identifier expected\n/tmp/tmpv_upkrnc.cs(30,27): error CS1002: ; expected\n/tmp/tmpv_upkrnc.cs(30,27): error CS1525: Invalid expression term ':'\n/tmp/tmpv_upkrnc.cs(30,27): error CS1001: Identifier expected\n/tmp/tmpv_upkrnc.cs(42,27): error CS1002: ; expected\n/tmp/tmpv_upkrnc.cs(42,27): error CS1525: Invalid expression term ':'\n/tmp/tmpv_upkrnc.cs(42,27): error CS1001: Identifier expected\n/tmp/tmpv_upkrnc.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        float[] sorted = numbers.ToArray();\n        Arrays.Sort(sorted);\n        return sorted[sorted.Length / 2];\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float number : numbers) {\n            sum += Math.Pow(number - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the variance of a list of numbers.\n    // >>> Variance((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphwita2cr.cs(19,27): error CS1002: ; expected\n/tmp/tmphwita2cr.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmphwita2cr.cs(19,27): error CS1001: Identifier expected\n/tmp/tmphwita2cr.cs(30,27): error CS1002: ; expected\n/tmp/tmphwita2cr.cs(30,27): error CS1525: Invalid expression term ':'\n/tmp/tmphwita2cr.cs(30,27): error CS1001: Identifier expected\n/tmp/tmphwita2cr.cs(51,27): error CS1002: ; expected\n/tmp/tmphwita2cr.cs(51,27): error CS1525: Invalid expression term ':'\n/tmp/tmphwita2cr.cs(51,27): error CS1001: Identifier expected\n/tmp/tmphwita2cr.cs(67,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        return numbers.OrderBy(x => x).Select(x => x).GetValue(numbers.Count / 2);\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the mode of a list of numbers.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy28bw3np.cs(19,22): error CS1002: ; expected\n/tmp/tmpy28bw3np.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpy28bw3np.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpy28bw3np.cs(30,22): error CS1002: ; expected\n/tmp/tmpy28bw3np.cs(30,22): error CS1525: Invalid expression term ':'\n/tmp/tmpy28bw3np.cs(30,22): error CS1001: Identifier expected\n/tmp/tmpy28bw3np.cs(49,22): error CS1002: ; expected\n/tmp/tmpy28bw3np.cs(49,22): error CS1525: Invalid expression term ':'\n/tmp/tmpy28bw3np.cs(49,22): error CS1001: Identifier expected\n/tmp/tmpy28bw3np.cs(65,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each input number and the mean\n        float mad = 0.0f;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median.\n    // Median is the middle number in the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        return numbers.OrderBy(x => x).Select(x => x).GetValue(numbers.Count / 2);\n    }\n\n    // For a given list of input numbers, calculate the Mode.\n    // Mode is the number that appears the most frequently in the list.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mode(List<float> numbers) {\n        return numbers.OrderBy(x => x).Select(x => x).GetValue(numbers.Count - 1);\n    }\n\n    // For a given list of input numbers, calculate the Standard Deviation.\n    // Standard Deviation is the square root of the variance.\n    // >>> StandardDeviation((new\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpomntm7ds.cs(19,22): error CS1002: ; expected\n/tmp/tmpomntm7ds.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpomntm7ds.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpomntm7ds.cs(32,22): error CS1002: ; expected\n/tmp/tmpomntm7ds.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmpomntm7ds.cs(32,22): error CS1001: Identifier expected\n/tmp/tmpomntm7ds.cs(64,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        float[] sorted = numbers.ToArray();\n        Arrays.Sort(sorted);\n        return sorted[sorted.Length / 2];\n    }\n\n    // Calculate the mode of a list of numbers.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4nn4vj8n.cs(19,22): error CS1002: ; expected\n/tmp/tmp4nn4vj8n.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4nn4vj8n.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp4nn4vj8n.cs(30,22): error CS1002: ; expected\n/tmp/tmp4nn4vj8n.cs(30,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4nn4vj8n.cs(30,22): error CS1001: Identifier expected\n/tmp/tmp4nn4vj8n.cs(42,22): error CS1002: ; expected\n/tmp/tmp4nn4vj8n.cs(42,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4nn4vj8n.cs(42,22): error CS1001: Identifier expected\n/tmp/tmp4nn4vj8n.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = 0.0f;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n        float mad = 0.0f;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Median.\n    // Median is the value that is in the middle of the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // For a given list of input numbers, calculate the Mode.\n    // Mode is the value that appears the most often in the list.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mode(List<float> numbers) {\n        HashSet<float> set = new HashSet<float>();\n        for (float x : numbers) {\n            set.Add(x);\n        }\n        return set.Count == 1 ? set.Item(0) : 0.0f;\n    }\n\n    // For a given list of input numbers, calculate the Standard Deviation\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq1cowq50.cs(19,22): error CS1002: ; expected\n/tmp/tmpq1cowq50.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpq1cowq50.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpq1cowq50.cs(32,22): error CS1002: ; expected\n/tmp/tmpq1cowq50.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmpq1cowq50.cs(32,22): error CS1001: Identifier expected\n/tmp/tmpq1cowq50.cs(53,22): error CS1002: ; expected\n/tmp/tmpq1cowq50.cs(53,22): error CS1525: Invalid expression term ':'\n/tmp/tmpq1cowq50.cs(53,22): error CS1001: Identifier expected\n/tmp/tmpq1cowq50.cs(67,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // Calculate the mode of a list of numbers.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp69rq5ldp.cs(19,22): error CS1002: ; expected\n/tmp/tmp69rq5ldp.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp69rq5ldp.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp69rq5ldp.cs(30,22): error CS1002: ; expected\n/tmp/tmp69rq5ldp.cs(30,22): error CS1525: Invalid expression term ':'\n/tmp/tmp69rq5ldp.cs(30,22): error CS1001: Identifier expected\n/tmp/tmp69rq5ldp.cs(42,22): error CS1002: ; expected\n/tmp/tmp69rq5ldp.cs(42,22): error CS1525: Invalid expression term ':'\n/tmp/tmp69rq5ldp.cs(42,22): error CS1001: Identifier expected\n/tmp/tmp69rq5ldp.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Pow(number - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // Calculate the mode of a list of numbers.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqmak3cox.cs(19,27): error CS1002: ; expected\n/tmp/tmpqmak3cox.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmpqmak3cox.cs(19,27): error CS1001: Identifier expected\n/tmp/tmpqmak3cox.cs(30,27): error CS1002: ; expected\n/tmp/tmpqmak3cox.cs(30,27): error CS1525: Invalid expression term ':'\n/tmp/tmpqmak3cox.cs(30,27): error CS1001: Identifier expected\n/tmp/tmpqmak3cox.cs(42,27): error CS1002: ; expected\n/tmp/tmpqmak3cox.cs(42,27): error CS1525: Invalid expression term ':'\n/tmp/tmpqmak3cox.cs(42,27): error CS1001: Identifier expected\n/tmp/tmpqmak3cox.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each input number and the mean\n        float mad = 0.0f;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n\n    // For a given list of input numbers, calculate the median of this dataset.\n    // Median is the value that has exactly the same number of elements to the\n    // left and to the right of it in the sorted list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        // Sort the input numbers\n        numbers.Sort();\n\n        // If the list is empty, return 0\n        if (numbers.Count == 0) {\n            return 0.0f;\n        }\n\n        // If the list has only one element, return that element\n        if (numbers.Count == 1) {\n            return numbers[0];\n        }\n\n        // If the list has an even number of elements, return the average of the\n        // two middle elements\n        if (numbers.Count % 2 == 0) {\n            return (numbers[numbers.Count / 2] + numbers[(numbers.Count / 2) - 1]) / 2.0f;\n        }\n\n        // If the list has an odd number of elements, return the middle element\n        return numbers[numbers.Count / 2];\n    }\n\n    // For a given list of input numbers, calculate the mode of this dataset.\n    // The mode is the value that appears the most frequently in the list.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsgn95vaz.cs(73,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median.\n    // Median is the value such that there are an even number of elements\n    // less than and an even number greater than it.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        int count = numbers.Count;\n        if (count == 0) {\n            throw new Exception(\"Cannot calculate the median of an empty list.\");\n        }\n        if (count % 2 == 1) {\n            return numbers[count / 2];\n        }\n        float first = numbers[count / 2 - 1];\n        float second = numbers[count / 2];\n        return (first + second) / 2.0f;\n    }\n\n    // For a given list of input numbers, calculate the Mode.\n    // The Mode is the value that appears the most frequently.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt8fb7wlf.cs(19,22): error CS1002: ; expected\n/tmp/tmpt8fb7wlf.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpt8fb7wlf.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpt8fb7wlf.cs(32,22): error CS1002: ; expected\n/tmp/tmpt8fb7wlf.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmpt8fb7wlf.cs(32,22): error CS1001: Identifier expected\n/tmp/tmpt8fb7wlf.cs(67,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean\n    // Mean is the average of all elements in the list:\n    // Mean = (float)sum(numbers) / (float)numbers.Count\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median\n    // Median is the middle value in the list:\n    // Median = (float)numbers.Count / 2.0f\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        int count = numbers.Count;\n        if (count == 0) {\n            throw new Exception(\"Median called on empty list\");\n        }\n        if (count % 2 == 0) {\n            // Even number of elements\n            int middle = count / 2;\n            float first = numbers[middle];\n            float second = numbers[middle - 1];\n            return (first + second) / 2.0f;\n        }\n        else {\n            // Odd number of elements\n            return numbers[count / 2];\n        }\n    }\n\n    // For a given list of input numbers, calculate the Mode\n    // Mode is the value that appears the most often in the list:\n    // Mode = (float)numbers.Count / 2.0f\n    // >>> Mode((new List<float>(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyh7gh6ou.cs(19,22): error CS1002: ; expected\n/tmp/tmpyh7gh6ou.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpyh7gh6ou.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpyh7gh6ou.cs(32,22): error CS1002: ; expected\n/tmp/tmpyh7gh6ou.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmpyh7gh6ou.cs(32,22): error CS1001: Identifier expected\n/tmp/tmpyh7gh6ou.cs(72,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = 0;\n        for (float x : numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpibasb6ql.cs(18,22): error CS1002: ; expected\n/tmp/tmpibasb6ql.cs(18,22): error CS1525: Invalid expression term ':'\n/tmp/tmpibasb6ql.cs(18,22): error CS1001: Identifier expected\n/tmp/tmpibasb6ql.cs(23,22): error CS1002: ; expected\n/tmp/tmpibasb6ql.cs(23,22): error CS1525: Invalid expression term ':'\n/tmp/tmpibasb6ql.cs(23,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each input number and the mean\n        float mad = 0.0f;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.5811388300841898f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        Collections.Sort(numbers);\n        return numbers[numbers.Count / 2];\n    }\n\n    // Calculate the mode of a list of numbers.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_js3p89g.cs(19,22): error CS1002: ; expected\n/tmp/tmp_js3p89g.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp_js3p89g.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp_js3p89g.cs(30,22): error CS1002: ; expected\n/tmp/tmp_js3p89g.cs(30,22): error CS1525: Invalid expression term ':'\n/tmp/tmp_js3p89g.cs(30,22): error CS1001: Identifier expected\n/tmp/tmp_js3p89g.cs(42,22): error CS1002: ; expected\n/tmp/tmp_js3p89g.cs(42,22): error CS1525: Invalid expression term ':'\n/tmp/tmp_js3p89g.cs(42,22): error CS1001: Identifier expected\n/tmp/tmp_js3p89g.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Mean of this dataset.\n    // Mean is the sum of all elements divided by the number of elements:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median of this dataset.\n    // Median is the middle value in the list, or the 50th percentile.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // For a given list of input numbers, calculate the Standard Deviation of\n    // this dataset.\n    // Standard Deviation is the square root of the variance.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return (float)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyza01k36.cs(19,22): error CS1002: ; expected\n/tmp/tmpyza01k36.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpyza01k36.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpyza01k36.cs(32,22): error CS1002: ; expected\n/tmp/tmpyza01k36.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmpyza01k36.cs(32,22): error CS1001: Identifier expected\n/tmp/tmpyza01k36.cs(55,22): error CS1002: ; expected\n/tmp/tmpyza01k36.cs(55,22): error CS1525: Invalid expression term ':'\n/tmp/tmpyza01k36.cs(55,22): error CS1001: Identifier expected\n/tmp/tmpyza01k36.cs(58,23): error CS1525: Invalid expression term '}'\n/tmp/tmpyza01k36.cs(58,23): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        float[] sorted = numbers.ToArray();\n        Arrays.Sort(sorted);\n        return sorted[sorted.Length / 2];\n    }\n\n    // Calculate the mode of a list of numbers.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4nn4vj8n.cs(19,22): error CS1002: ; expected\n/tmp/tmp4nn4vj8n.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4nn4vj8n.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp4nn4vj8n.cs(30,22): error CS1002: ; expected\n/tmp/tmp4nn4vj8n.cs(30,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4nn4vj8n.cs(30,22): error CS1001: Identifier expected\n/tmp/tmp4nn4vj8n.cs(42,22): error CS1002: ; expected\n/tmp/tmp4nn4vj8n.cs(42,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4nn4vj8n.cs(42,22): error CS1001: Identifier expected\n/tmp/tmp4nn4vj8n.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        int mid = numbers.Count / 2;\n        return numbers[mid];\n    }\n\n    // Calculate the mode of a list of numbers.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps9ee4bh7.cs(19,22): error CS1002: ; expected\n/tmp/tmps9ee4bh7.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmps9ee4bh7.cs(19,22): error CS1001: Identifier expected\n/tmp/tmps9ee4bh7.cs(30,22): error CS1002: ; expected\n/tmp/tmps9ee4bh7.cs(30,22): error CS1525: Invalid expression term ':'\n/tmp/tmps9ee4bh7.cs(30,22): error CS1001: Identifier expected\n/tmp/tmps9ee4bh7.cs(42,22): error CS1002: ; expected\n/tmp/tmps9ee4bh7.cs(42,22): error CS1525: Invalid expression term ':'\n/tmp/tmps9ee4bh7.cs(42,22): error CS1001: Identifier expected\n/tmp/tmps9ee4bh7.cs(67,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        return numbers.OrderBy(x => x).Select(x => x).GetValue(numbers.Count / 2);\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Pow(number - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the variance of a list of numbers.\n    // >>> Variance((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfg3f1iu1.cs(19,27): error CS1002: ; expected\n/tmp/tmpfg3f1iu1.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmpfg3f1iu1.cs(19,27): error CS1001: Identifier expected\n/tmp/tmpfg3f1iu1.cs(30,27): error CS1002: ; expected\n/tmp/tmpfg3f1iu1.cs(30,27): error CS1525: Invalid expression term ':'\n/tmp/tmpfg3f1iu1.cs(30,27): error CS1001: Identifier expected\n/tmp/tmpfg3f1iu1.cs(49,27): error CS1002: ; expected\n/tmp/tmpfg3f1iu1.cs(49,27): error CS1525: Invalid expression term ':'\n/tmp/tmpfg3f1iu1.cs(49,27): error CS1001: Identifier expected\n/tmp/tmpfg3f1iu1.cs(64,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median.\n    // Median is the value that is in the middle of the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // For a given list of input numbers, calculate the Standard Deviation.\n    // Standard Deviation is the square root of the variance.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return (float)Math.Sqrt(sum / numbers.Count);\n    }\n\n    //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp59_dnpdi.cs(19,22): error CS1002: ; expected\n/tmp/tmp59_dnpdi.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp59_dnpdi.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp59_dnpdi.cs(32,22): error CS1002: ; expected\n/tmp/tmp59_dnpdi.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmp59_dnpdi.cs(32,22): error CS1001: Identifier expected\n/tmp/tmp59_dnpdi.cs(54,22): error CS1002: ; expected\n/tmp/tmp59_dnpdi.cs(54,22): error CS1525: Invalid expression term ':'\n/tmp/tmp59_dnpdi.cs(54,22): error CS1001: Identifier expected\n/tmp/tmp59_dnpdi.cs(68,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median.\n    // Median is the middle value in the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // For a given list of input numbers, calculate the Mode.\n    // Mode is the value that appears the most frequently in the list.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mode(List<float> numbers) {\n        HashSet<float> set = new HashSet<float>();\n        for (float x : numbers) {\n            set.Add(x);\n        }\n        float max = 0.0f;\n        for (float x : set) {\n            if (x > max) {\n                max = x;\n            }\n        }\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_dmx12ne.cs(19,22): error CS1002: ; expected\n/tmp/tmp_dmx12ne.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp_dmx12ne.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp_dmx12ne.cs(32,22): error CS1002: ; expected\n/tmp/tmp_dmx12ne.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmp_dmx12ne.cs(32,22): error CS1001: Identifier expected\n/tmp/tmp_dmx12ne.cs(53,22): error CS1002: ; expected\n/tmp/tmp_dmx12ne.cs(53,22): error CS1525: Invalid expression term ':'\n/tmp/tmp_dmx12ne.cs(53,22): error CS1001: Identifier expected\n/tmp/tmp_dmx12ne.cs(57,22): error CS1002: ; expected\n/tmp/tmp_dmx12ne.cs(57,22): error CS1525: Invalid expression term ':'\n/tmp/tmp_dmx12ne.cs(57,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each number and the mean\n        float mad = 0.0f;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each input number and the mean\n        float mad = 0.0f;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each element and the mean\n        float mad = 0;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Standard Deviation.\n    // Standard Deviation is the square root of the variance:\n    // StandardDeviation = sqrt(Variance)\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.414f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return (float)Math.Sqrt(sum / numbers.Count);\n    }\n\n    // For a given list of input numbers, calculate Variance.\n    // Variance is the average of squared differences from the mean:\n    // Variance = Sum(x - Mean)^2 / Count(x)\n    // >>> Variance((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.25f)\n    public static float Variance(\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl9o_f7l0.cs(19,22): error CS1002: ; expected\n/tmp/tmpl9o_f7l0.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmpl9o_f7l0.cs(19,22): error CS1001: Identifier expected\n/tmp/tmpl9o_f7l0.cs(32,22): error CS1002: ; expected\n/tmp/tmpl9o_f7l0.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmpl9o_f7l0.cs(32,22): error CS1001: Identifier expected\n/tmp/tmpl9o_f7l0.cs(46,22): error CS1002: ; expected\n/tmp/tmpl9o_f7l0.cs(46,22): error CS1525: Invalid expression term ':'\n/tmp/tmpl9o_f7l0.cs(46,22): error CS1001: Identifier expected\n/tmp/tmpl9o_f7l0.cs(57,34): error CS1026: ) expected\n/tmp/tmpl9o_f7l0.cs(57,34): error CS1002: ; expected\n/tmp/tmpl9o_f7l0.cs(65,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2aq33ils.cs(19,27): error CS1002: ; expected\n/tmp/tmp2aq33ils.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmp2aq33ils.cs(19,27): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each element and the mean\n        float mad = 0.0f;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the list of numbers\n        float mean = 0;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each number and the mean\n        float mad = 0;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float number : numbers) {\n            sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate the Median.\n    // Median is the value that is in the middle of the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        numbers.Sort();\n        return numbers[numbers.Count / 2];\n    }\n\n    // For a given list of input numbers, calculate the Standard Deviation.\n    // Standard Deviation is the square root of the variance.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float number : numbers) {\n            sum += Math.Pow(number - mean, 2);\n        }\n        return (float)Math.Sqrt(sum / numbers.Count);\n    }\n\n    // For a given list of input numbers, calculate\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi6vg7nwb.cs(19,27): error CS1002: ; expected\n/tmp/tmpi6vg7nwb.cs(19,27): error CS1525: Invalid expression term ':'\n/tmp/tmpi6vg7nwb.cs(19,27): error CS1001: Identifier expected\n/tmp/tmpi6vg7nwb.cs(32,27): error CS1002: ; expected\n/tmp/tmpi6vg7nwb.cs(32,27): error CS1525: Invalid expression term ':'\n/tmp/tmpi6vg7nwb.cs(32,27): error CS1001: Identifier expected\n/tmp/tmpi6vg7nwb.cs(54,27): error CS1002: ; expected\n/tmp/tmpi6vg7nwb.cs(54,27): error CS1525: Invalid expression term ':'\n/tmp/tmpi6vg7nwb.cs(54,27): error CS1001: Identifier expected\n/tmp/tmpi6vg7nwb.cs(68,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float x in numbers) {\n            mean += x;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each input number and the mean\n        float mad = 0.0f;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n\n    // For a given list of input numbers, calculate the Median Absolute Deviation\n    // around the median of this dataset.\n    // Median Absolute Deviation is the median of the absolute deviations from the median:\n    // MAD = median(| x - x_median |)\n    // >>> MedianAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MedianAbsoluteDeviation(List<float> numbers) {\n        // Calculate the median of the input numbers\n        float median = 0.0f;\n        if (numbers.Count % 2 == 0) {\n            // Even number of numbers\n            median = (numbers[numbers.Count / 2] + numbers[numbers.Count / 2 - 1]) / 2.0f;\n        }\n        else {\n            // Odd number of numbers\n            median = numbers[numbers.Count / 2];\n        }\n\n        // Calculate the absolute difference between each input number and the median\n        float mad = 0.0f;\n        foreach (float x in numbers) {\n            mad += Math.Abs(x - median);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n\n    // For a given list of input numbers, calculate the Standard Deviation\n    // around the mean of this dataset.\n    // Standard Deviation is the square root of the variance:\n    // SD = sqrt(variance)\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293349,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5w6m5wyw.cs(74,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the mean absolute deviation\n        float mad = 0;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the mean of a list of numbers.\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.5f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // Calculate the standard deviation of a list of numbers.\n    // >>> StandardDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.1180339887498949)\n    public static float StandardDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0;\n        for (float x : numbers) {\n            sum += Math.Pow(x - mean, 2);\n        }\n        return Math.Sqrt(sum / numbers.Count);\n    }\n\n    // Calculate the median of a list of numbers.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        float[] sorted = numbers.ToArray();\n        Arrays.Sort(sorted);\n        return sorted[sorted.Length / 2];\n    }\n\n    // Calculate the mode of a list of numbers.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4nn4vj8n.cs(19,22): error CS1002: ; expected\n/tmp/tmp4nn4vj8n.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4nn4vj8n.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp4nn4vj8n.cs(30,22): error CS1002: ; expected\n/tmp/tmp4nn4vj8n.cs(30,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4nn4vj8n.cs(30,22): error CS1001: Identifier expected\n/tmp/tmp4nn4vj8n.cs(42,22): error CS1002: ; expected\n/tmp/tmp4nn4vj8n.cs(42,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4nn4vj8n.cs(42,22): error CS1001: Identifier expected\n/tmp/tmp4nn4vj8n.cs(66,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each number and the mean\n        float mad = 0.0f;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        // Calculate the mean of the input numbers\n        float mean = 0.0f;\n        foreach (float number in numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n\n        // Calculate the absolute difference between each number and the mean\n        float mad = 0.0f;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number - mean);\n        }\n        mad /= numbers.Count;\n\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = Mean(numbers);\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Mean.\n    // Mean is the average of all elements in the list:\n    // Mean = Sum(x) / Count(x)\n    // >>> Mean((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (3.0f)\n    public static float Mean(List<float> numbers) {\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += x;\n        }\n        return sum / numbers.Count;\n    }\n\n    // For a given list of input numbers, calculate Median.\n    // Median is the middle number in the list.\n    // >>> Median((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Median(List<float> numbers) {\n        return numbers.OrderBy(x => x).Select(x => x).GetValue(numbers.Count / 2);\n    }\n\n    // For a given list of input numbers, calculate the Mode.\n    // Mode is the number that appears the most frequently in the list.\n    // >>> Mode((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (2.0f)\n    public static float Mode(List<float> numbers) {\n        return numbers.OrderBy(x => x).Select(x => x).GetValue(numbers.Count - 1);\n    }\n\n    // For a given list of input numbers, calculate the Standard Deviation.\n    // Standard Deviation is the square root of the variance.\n    // >>> StandardDeviation((new List\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293348,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9hct93um.cs(19,22): error CS1002: ; expected\n/tmp/tmp9hct93um.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp9hct93um.cs(19,22): error CS1001: Identifier expected\n/tmp/tmp9hct93um.cs(32,22): error CS1002: ; expected\n/tmp/tmp9hct93um.cs(32,22): error CS1525: Invalid expression term ':'\n/tmp/tmp9hct93um.cs(32,22): error CS1001: Identifier expected\n/tmp/tmp9hct93um.cs(64,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = 0.0f;\n        for (float number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n        float mad = 0.0f;\n        for (float number : numbers) {\n            mad += Math.Abs(number - mean);\n        }\n        mad /= numbers.Count;\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293349,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5jewbtws.cs(18,27): error CS1002: ; expected\n/tmp/tmp5jewbtws.cs(18,27): error CS1525: Invalid expression term ':'\n/tmp/tmp5jewbtws.cs(18,27): error CS1001: Identifier expected\n/tmp/tmp5jewbtws.cs(23,27): error CS1002: ; expected\n/tmp/tmp5jewbtws.cs(23,27): error CS1525: Invalid expression term ':'\n/tmp/tmp5jewbtws.cs(23,27): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = (float)numbers.Average();\n        float sum = 0.0f;\n        for (float x : numbers) {\n            sum += Math.Abs(x - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293347,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4rof13xj.cs(19,22): error CS1002: ; expected\n/tmp/tmp4rof13xj.cs(19,22): error CS1525: Invalid expression term ':'\n/tmp/tmp4rof13xj.cs(19,22): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float mean = 0;\n        for (float number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.Count;\n        float mad = 0;\n        for (float number : numbers) {\n            mad += Math.Abs(mean - number);\n        }\n        mad /= numbers.Count;\n        return mad;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n}\n",
      "timestamp": 1664293349,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzxvx3pt_.cs(18,27): error CS1002: ; expected\n/tmp/tmpzxvx3pt_.cs(18,27): error CS1525: Invalid expression term ':'\n/tmp/tmpzxvx3pt_.cs(18,27): error CS1001: Identifier expected\n/tmp/tmpzxvx3pt_.cs(23,27): error CS1002: ; expected\n/tmp/tmpzxvx3pt_.cs(23,27): error CS1525: Invalid expression term ':'\n/tmp/tmpzxvx3pt_.cs(23,27): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}