name: HumanEval_147_get_max_triples
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a positive integer n. You have to create an integer\
  \ list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i]\
  \ = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a\
  \ where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example\
  \ :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a\
  \ = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static\
  \ long GetMaxTriples(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxTriples((5L))\
  \ == (1L));\n    Debug.Assert(GetMaxTriples((6L)) == (4L));\n    Debug.Assert(GetMaxTriples((10L))\
  \ == (36L));\n    Debug.Assert(GetMaxTriples((100L)) == (53361L));\n    }\n\n}\n"
completions: ["        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n\
    \            a[i] = i * i - i + 1;\n        long res = 0;\n        for (int i\
    \ = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n        \
    \        for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] % 3 == 0)\n                        res++;\n                }\n      \
    \      }\n        }\n        return res;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n  \
    \          for (int j = i + 1; j < n; j++) {\n                for (int k = j +\
    \ 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n \
    \                       result++;\n                    }\n                }\n\
    \            }\n        }\n        return result;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n    \
    \    long result = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if (a[i] + a[j] + a[k] % 3 == 0)\n                  \
    \      result++;\n                }\n            }\n        }\n        return\
    \ result;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n\
    \            a[i] = i * i - i + 1;\n        long max = 0;\n        for (int i\
    \ = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n        \
    \        for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] % 3 == 0)\n                        max++;\n                }\n      \
    \      }\n        }\n        return max;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n  \
    \          for (int j = i + 1; j < n; j++) {\n                for (int k = j +\
    \ 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n \
    \                       result++;\n                    }\n                }\n\
    \            }\n        }\n        return result;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n  \
    \          for (int j = i + 1; j < n; j++) {\n                for (int k = j +\
    \ 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n \
    \                       result++;\n                    }\n                }\n\
    \            }\n        }\n        return result;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n   \
    \         for (int j = i + 1; j < n; j++) {\n                for (int k = j +\
    \ 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n   \
    \         for (int j = i + 1; j < n; j++) {\n                for (int k = j +\
    \ 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n        long[] result = new long[n];\n        for (int i = 0; i < n;\
    \ i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int\
    \ k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 ==\
    \ 0) {\n                        result[i]++;\n                    }\n        \
    \        }\n            }\n        }\n        return result[0];", "        long[]\
    \ a = new long[n];\n        for (int i = 0; i < n; i++)\n            a[i] = i\
    \ * i - i + 1;\n        return GetMaxTriples(a);\n    }\n\n    // You are given\
    \ a positive integer n. You have to create an integer list a of length n.\n  \
    \  // For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n \
    \   // Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n\
    \    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example :\n    // >>>\
    \ GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a = [1, 3, 7,\
    \ 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static long\
    \ GetMaxTriples(long[] a) {\n        long max = 0;\n        for (int i = 0; i\
    \ < a.Length - 2; i++) {\n            for (int j = i + 1; j < a.Length - 1; j++)\
    \ {\n                for (int k = j + 1; k < a.Length; k++) {\n              \
    \      if (a[i] + a[j] + a[k] % 3 == 0) {\n                        max++;\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long count = 0;\n \
    \       for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ count;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long[] b = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            b[i] = i * i;\n        }\n\
    \        long[] c = new long[n];\n        for (int i = 0; i < n; i++) {\n    \
    \        c[i] = i * i + 1;\n        }\n        long[] d = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            d[i] = i * i + 2;\n        }\n\
    \        long[] e = new long[n];\n        for (int i = 0; i < n; i++) {\n    \
    \        e[i] = i * i + 3;\n        }\n        long[] f = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            f[i] = i * i + 4;\n        }\n\
    \        long[] g = new long[n];\n        for (int i = 0; i < n; i++) {\n    \
    \        g[i] = i * i + 5;\n        }\n        long[] h = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            h[i] = i * i + 6;\n        }\n\
    \        long[] i = new long[n];\n        for (int i = 0; i < n; i++) {\n    \
    \        i[i] = i * i + 7;\n        }\n        long[] j = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            j[i] = i * i + 8;\n        }\n\
    \        long[] k = new long[n];\n        for (int i = 0; i < n; i++) {\n    \
    \        k[i] = i * i + 9;\n        }\n        long[] l = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            l[i] = i * i + 10;", "        long[]\
    \ a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] =\
    \ i * i - i + 1;\n        }\n        long max = 0;\n        for (int i = 0; i\
    \ < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n               \
    \ for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k]\
    \ % 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j] * a[k]);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long count = 0;\n \
    \       for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j <\
    \ n; j++) {\n                for (int k = j + 1; k < n; k++) {\n             \
    \       if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n\
    \            a[i] = i * i - i + 1;\n        long max = 0;\n        for (int i\
    \ = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n        \
    \        for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] % 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j]\
    \ * a[k]);\n                    }\n                }\n            }\n        }\n\
    \        return max;", "        long[] a = new long[n];\n        for (int i =\
    \ 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        long\
    \ max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i\
    \ + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n    \
    \                if (a[i] + a[j] + a[k] % 3 == 0) {\n                        max\
    \ = Math.Max(max, a[i] * a[j] * a[k]);\n                    }\n              \
    \  }\n            }\n        }\n        return max;", "        long[] a = new\
    \ long[n];\n        for (int i = 0; i < n; i++)\n            a[i] = i * i - i\
    \ + 1;\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n       \
    \     for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k\
    \ < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0)\n        \
    \                max = Math.Max(max, a[i] * a[j] * a[k]);\n                }\n\
    \            }\n        }\n        return max;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n   \
    \         for (int j = i + 1; j < n; j++) {\n                for (int k = j +\
    \ 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n    \
    \    long result = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if (a[i] + a[j] + a[k] % 3 == 0)\n                  \
    \      result++;\n                }\n            }\n        }\n        return\
    \ result;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long max = 0;\n   \
    \     for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                for (int k = j + 1; k < n; k++) {\n                    if\
    \ (a[i] + a[j] + a[k] % 3 == 0) {\n                        max = Math.Max(max,\
    \ a[i] * a[j] * a[k]);\n                    }\n                }\n           \
    \ }\n        }\n        return max;", "        long[] a = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n       \
    \ }\n        long[] b = new long[n];\n        for (int i = 0; i < n; i++) {\n\
    \            b[i] = i * i - i + 1;\n        }\n        long[] c = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            c[i] = i * i - i + 1;\n  \
    \      }\n        long[] d = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            d[i] = i * i - i + 1;\n        }\n        long[] e = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            e[i] = i * i - i + 1;\n  \
    \      }\n        long[] f = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            f[i] = i * i - i + 1;\n        }\n        long[] g = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            g[i] = i * i - i + 1;\n  \
    \      }\n        long[] h = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            h[i] = i * i - i + 1;\n        }\n        long[] i = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            i[i] = i * i - i + 1;\n  \
    \      }\n        long[] j = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            j[i] = i * i - i + 1;\n        }\n        long[] k = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            k[i] = i * i - i + 1;\n  \
    \      }\n        long[] l = new long[n];\n        for (int i =", "        long[]\
    \ a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] =\
    \ i * i - i + 1;\n        }\n        long max = 0;\n        for (int i = 0; i\
    \ < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n               \
    \ for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k]\
    \ % 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j] * a[k]);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long max = 0;\n   \
    \     for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                for (int k = j + 1; k < n; k++) {\n                    if\
    \ (a[i] + a[j] + a[k] % 3 == 0) {\n                        max = Math.Max(max,\
    \ a[i] * a[j] * a[k]);\n                    }\n                }\n           \
    \ }\n        }\n        return max;", "        long[] a = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n       \
    \ }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n        \
    \                max = Math.Max(max, a[i] * a[j] * a[k]);\n                  \
    \  }\n                }\n            }\n        }\n        return max;", "   \
    \     long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n       \
    \     a[i] = i * i - i + 1;\n        }\n        long max = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] % 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j]\
    \ * a[k]);\n                    }\n                }\n            }\n        }\n\
    \        return max;", "        long[] a = new long[n];\n        for (int i =\
    \ 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        long result = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] + a[j] + a[k] % 3 == 0)\n                        result++;\n   \
    \             }\n            }\n        }\n        return result;", "        long[]\
    \ a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] =\
    \ i * i - i + 1;\n        }\n        long result = 0;\n        for (int i = 0;\
    \ i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n             \
    \   for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k]\
    \ % 3 == 0) {\n                        result++;\n                    }\n    \
    \            }\n            }\n        }\n        return result;", "        long[]\
    \ a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] =\
    \ i * i - i + 1;\n        }\n        long count = 0;\n        for (int i = 0;\
    \ i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n             \
    \   for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k]\
    \ % 3 == 0) {\n                        count++;\n                    }\n     \
    \           }\n            }\n        }\n        return count;", "        long[]\
    \ a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] =\
    \ i * i - i + 1;\n        }\n        long sum = 0;\n        for (int i = 0; i\
    \ < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n               \
    \ for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k]\
    \ % 3 == 0) {\n                        sum++;\n                    }\n       \
    \         }\n            }\n        }\n        return sum;", "        long[] a\
    \ = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i\
    \ * i - i + 1;\n        }\n        long max = 0;\n        for (int i = 0; i <\
    \ n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for\
    \ (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] %\
    \ 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j] * a[k]);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long count = 0;\n \
    \       for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j <\
    \ n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n         \
    \           if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long max = 0;\n   \
    \     for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                for (int k = j + 1; k < n; k++) {\n                    if\
    \ (a[i] + a[j] + a[k] % 3 == 0) {\n                        max = Math.Max(max,\
    \ a[i] * a[j] * a[k]);\n                    }\n                }\n           \
    \ }\n        }\n        return max;", "        long[] a = new long[n];\n     \
    \   for (int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        return\
    \ GetMaxTriples(a);", "        long[] a = new long[n];\n        for (int i = 0;\
    \ i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        long count\
    \ = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1;\
    \ j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n         \
    \           if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long count = 0;\n \
    \       for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j <\
    \ n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n         \
    \           if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long max = 0;\n   \
    \     for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                for (int k = j + 1; k < n; k++) {\n                    if\
    \ (a[i] + a[j] + a[k] % 3 == 0) {\n                        max = Math.Max(max,\
    \ a[i] * a[j] * a[k]);\n                    }\n                }\n           \
    \ }\n        }\n        return max;", "        long[] a = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n       \
    \ }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n        \
    \                max = Math.Max(max, a[i] * a[j] * a[k]);\n                  \
    \  }\n                }\n            }\n        }\n        return max;", "   \
    \     long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n       \
    \     a[i] = i * i - i + 1;\n        }\n        long result = 0;\n        for\
    \ (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n \
    \               for (int k = j + 1; k < n; k++) {\n                    if (a[i]\
    \ + a[j] + a[k] % 3 == 0) {\n                        result++;\n             \
    \       }\n                }\n            }\n        }\n        return result;",
  "        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      a[i] = i * i - i + 1;\n        }\n        long sum = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] % 3 == 0) {\n                        sum++;\n                    }\n\
    \                }\n            }\n        }\n        return sum;", "        long[]\
    \ a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] =\
    \ i * i - i + 1;\n        }\n        long count = 0;\n        for (int i = 0;\
    \ i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n     \
    \           for (int k = j + 1; k < n; k++) {\n                    if (a[i] +\
    \ a[j] + a[k] % 3 == 0) {\n                        count++;\n                \
    \    }\n                }\n            }\n        }\n        return count;", " \
    \       long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n     \
    \       a[i] = i * i - i + 1;\n        }\n        long result = 0;\n        for\
    \ (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n \
    \               for (int k = j + 1; k < n; k++) {\n                    if (a[i]\
    \ + a[j] + a[k] % 3 == 0) {\n                        result++;\n             \
    \       }\n                }\n            }\n        }\n        return result;",
  "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n        \
    \    a[i] = i * i - i + 1;\n        long result = 0;\n        for (int i = 0;\
    \ i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n             \
    \   for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k]\
    \ % 3 == 0) {\n                        result++;\n                    }\n    \
    \            }\n            }\n        }\n        return result;", "        long[]\
    \ a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] =\
    \ i * i - i + 1;\n        }\n        long result = 0;\n        for (int i = 0;\
    \ i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n             \
    \   for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k]\
    \ % 3 == 0) {\n                        result++;\n                    }\n    \
    \            }\n            }\n        }\n        return result;", "        long[]\
    \ a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] =\
    \ i * i - i + 1;\n        }\n        long result = 0;\n        for (int i = 0;\
    \ i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n             \
    \   for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k]\
    \ % 3 == 0) {\n                        result++;\n                    }\n    \
    \            }\n            }\n        }\n        return result;", "        long[]\
    \ a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] =\
    \ i * i - i + 1;\n        }\n        long max = 0;\n        for (int i = 0; i\
    \ < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n               \
    \ for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k]\
    \ % 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j] * a[k]);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long sum = 0;\n   \
    \     for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                for (int k = j + 1; k < n; k++) {\n                    if\
    \ (a[i] + a[j] + a[k] % 3 == 0) {\n                        sum++;\n          \
    \          }\n                }\n            }\n        }\n        return sum;",
  "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n        \
    \    a[i] = i * i - i + 1;\n        long max = 0;\n        for (int i = 0; i <\
    \ n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for\
    \ (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] %\
    \ 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j] * a[k]);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long max = 0;\n   \
    \     for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                for (int k = j + 1; k < n; k++) {\n                    if\
    \ (a[i] + a[j] + a[k] % 3 == 0) {\n                        max = Math.Max(max,\
    \ a[i] * a[j] * a[k]);\n                    }\n                }\n           \
    \ }\n        }\n        return max;", "        long[] a = new long[n];\n     \
    \   for (int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        long\
    \ max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i\
    \ + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n    \
    \                if (a[i] + a[j] + a[k] % 3 == 0) {\n                        max\
    \ = Math.Max(max, a[i] * a[j] * a[k]);\n                    }\n              \
    \  }\n            }\n        }\n        return max;", "        long[] a = new\
    \ long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i -\
    \ i + 1;\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            for (int j = i + 1; j < n; j++) {\n                for (int k\
    \ = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0)\
    \ {\n                        max = Math.Max(max, a[i] * a[j] * a[k]);\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long count = 0;\n \
    \       for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ count;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n\
    \            a[i] = i * i - i + 1;\n        return GetMaxTriples(a);", "     \
    \   long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n         \
    \   a[i] = i * i - i + 1;\n        }\n        long count = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] % 3 == 0) {\n                        count++;\n                    }\n\
    \                }\n            }\n        }\n        return count;", "      \
    \  long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n          \
    \  a[i] = i * i - i + 1;\n        }\n        long result = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] % 3 == 0) {\n                        result++;\n                    }\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n           \
    \ a[i] = i * i - i + 1;\n        long count = 0;\n        for (int i = 0; i <\
    \ n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n         \
    \       for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] % 3 == 0)\n                        count++;\n                }\n    \
    \        }\n        }\n        return count;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n     \
    \       for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1;\
    \ k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n    \
    \                    max = Math.Max(max, a[i] * a[j] * a[k]);\n              \
    \      }\n                }\n            }\n        }\n        return max;", " \
    \       long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n     \
    \       a[i] = i * i - i + 1;\n        }\n        long count = 0;\n        for\
    \ (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n \
    \               for (int k = j + 1; k < n; k++) {\n                    if (a[i]\
    \ + a[j] + a[k] % 3 == 0) {\n                        count++;\n              \
    \      }\n                }\n            }\n        }\n        return count;",
  "        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      a[i] = i * i - i + 1;\n        }\n        long max = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] % 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j]\
    \ * a[k]);\n                    }\n                }\n            }\n        }\n\
    \        return max;", "        long[] a = new long[n];\n        for (int i =\
    \ 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        long max = 0;\n \
    \       for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        max = Math.Max(max,\
    \ a[i] * a[j] * a[k]);\n                    }\n                }\n           \
    \ }\n        }\n        return max;", "        long[] a = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n       \
    \ }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n        \
    \                max = Math.Max(max, a[i] * a[j] * a[k]);\n                  \
    \  }\n                }\n            }\n        }\n        return max;", "   \
    \     long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n       \
    \     a[i] = i * i - i + 1;\n        }\n        long sum = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] % 3 == 0) {\n                        sum++;\n                    }\n\
    \                }\n            }\n        }\n        return sum;", "        long[]\
    \ a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] =\
    \ i * i - i + 1;\n        }\n        long max = 0;\n        for (int i = 0; i\
    \ < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n               \
    \ for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k]\
    \ % 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j] * a[k]);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n\
    \            a[i] = i * i - i + 1;\n        long result = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] % 3 == 0) {\n                        result++;\n                    }\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n         \
    \   a[i] = i * i - i + 1;\n        }\n        long sum = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] % 3 == 0) {\n                        sum++;\n                    }\n\
    \                }\n            }\n        }\n        return sum;", "        long[]\
    \ a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] =\
    \ i * i - i + 1;\n        }\n        long max = 0;\n        for (int i = 0; i\
    \ < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n               \
    \ for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k]\
    \ % 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j] * a[k]);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long max = 0;\n   \
    \     for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                for (int k = j + 1; k < n; k++) {\n                    if\
    \ (a[i] + a[j] + a[k] % 3 == 0) {\n                        max = Math.Max(max,\
    \ a[i] * a[j] * a[k]);\n                    }\n                }\n           \
    \ }\n        }\n        return max;", "        long[] a = new long[n];\n     \
    \   for (int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        long\
    \ max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i\
    \ + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n    \
    \                if (a[i] + a[j] + a[k] % 3 == 0) {\n                        max\
    \ = Math.Max(max, a[i] * a[j] * a[k]);\n                    }\n              \
    \  }\n            }\n        }\n        return max;", "        long[] a = new\
    \ long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i -\
    \ i + 1;\n        }\n        long max = 0;\n        for (int i = 0; i < n - 2;\
    \ i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for\
    \ (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] %\
    \ 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j] * a[k]);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long count = 0;\n \
    \       for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j <\
    \ n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n         \
    \           if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long count = 0;\n \
    \       for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j <\
    \ n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n         \
    \           if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) / 3) {\n      \
    \                  count++;\n                    }\n                }\n      \
    \      }\n        }\n        return count;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n    \
    \    long res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int\
    \ j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    if (a[i] + a[j] + a[k] % 3 == 0)\n                      \
    \  res++;\n                }\n            }\n        }\n        return res;",
  "        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      a[i] = i * i - i + 1;\n        }\n        long max = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] % 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j]\
    \ * a[k]);\n                    }\n                }\n            }\n        }\n\
    \        return max;", "        long[] a = new long[n];\n        for (int i =\
    \ 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        long\
    \ max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i\
    \ + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n    \
    \                if (a[i] + a[j] + a[k] % 3 == 0) {\n                        max\
    \ = Math.Max(max, a[i] * a[j] * a[k]);\n                    }\n              \
    \  }\n            }\n        }\n        return max;", "        long[] a = new\
    \ long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i -\
    \ i + 1;\n        }\n        long[] b = new long[n];\n        for (int i = 0;\
    \ i < n; i++) {\n            b[i] = i * i - i + 1;\n        }\n        long[]\
    \ c = new long[n];\n        for (int i = 0; i < n; i++) {\n            c[i] =\
    \ i * i - i + 1;\n        }\n        long[] d = new long[n];\n        for (int\
    \ i = 0; i < n; i++) {\n            d[i] = i * i - i + 1;\n        }\n       \
    \ long[] e = new long[n];\n        for (int i = 0; i < n; i++) {\n           \
    \ e[i] = i * i - i + 1;\n        }\n        long[] f = new long[n];\n        for\
    \ (int i = 0; i < n; i++) {\n            f[i] = i * i - i + 1;\n        }\n  \
    \      long[] g = new long[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      g[i] = i * i - i + 1;\n        }\n        long[] h = new long[n];\n   \
    \     for (int i = 0; i < n; i++) {\n            h[i] = i * i - i + 1;\n     \
    \   }\n        long[] i = new long[n];\n        for (int i = 0; i < n; i++) {\n\
    \            i[i] = i * i - i + 1;\n        }\n        long[] j = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            j[i] = i * i - i + 1;\n  \
    \      }\n        long[] k = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            k[i] = i * i - i + 1;\n        }\n        long[] l = new long[n];\n\
    \        for (int i =", "        long[] a = new long[n];\n        for (int i =\
    \ 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        long\
    \ sum = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i\
    \ + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n    \
    \                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) / 3) {\n \
    \                       sum++;\n                    }\n                }\n   \
    \         }\n        }\n        return sum;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n    \
    \    long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int\
    \ j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    if (a[i] + a[j] + a[k] % 3 == 0)\n                      \
    \  count++;\n                }\n            }\n        }\n        return count;",
  "        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      a[i] = i * i - i + 1;\n        }\n        long max = 0;\n        for (int\
    \ i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n\
    \                for (int k = j + 1; k < n; k++) {\n                    if (a[i]\
    \ + a[j] + a[k] % 3 == 0) {\n                        max = Math.Max(max, a[i]\
    \ * a[j] * a[k]);\n                    }\n                }\n            }\n \
    \       }\n        return max;", "        long[] a = new long[n];\n        for\
    \ (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n  \
    \      long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int\
    \ j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    if (a[i] + a[j] + a[k] % 3 == 0) {\n                    \
    \    max = Math.Max(max, a[i] * a[j] * a[k]);\n                    }\n       \
    \         }\n            }\n        }\n        return max;", "        long[] a\
    \ = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i\
    \ * i - i + 1;\n        }\n        long[] b = new long[n];\n        for (int i\
    \ = 0; i < n; i++) {\n            b[i] = i * i;\n        }\n        long[] c =\
    \ new long[n];\n        for (int i = 0; i < n; i++) {\n            c[i] = i;\n\
    \        }\n        long[] d = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            d[i] = i + 1;\n        }\n        long[] e = new long[n];\n \
    \       for (int i = 0; i < n; i++) {\n            e[i] = i + 2;\n        }\n\
    \        long[] f = new long[n];\n        for (int i = 0; i < n; i++) {\n    \
    \        f[i] = i + 3;\n        }\n        long[] g = new long[n];\n        for\
    \ (int i = 0; i < n; i++) {\n            g[i] = i + 4;\n        }\n        long[]\
    \ h = new long[n];\n        for (int i = 0; i < n; i++) {\n            h[i] =\
    \ i + 5;\n        }\n        long[] i = new long[n];\n        for (int i = 0;\
    \ i < n; i++) {\n            i[i] = i + 6;\n        }\n        long[] j = new\
    \ long[n];\n        for (int i = 0; i < n; i++) {\n            j[i] = i + 7;\n\
    \        }\n        long[] k = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            k[i] = i + 8;\n        }\n        long[] l = new long[n];\n \
    \       for (int i = 0; i < n; i++) {\n            l[i] = i + 9;\n        }\n\
    \        long[] m = new long[n];\n        for (int i = 0", "        long[] a =\
    \ new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i *\
    \ i - i + 1;\n        }\n        long result = 0;\n        for (int i = 0; i <\
    \ n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for\
    \ (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] %\
    \ 3 == 0) {\n                        result++;\n                    }\n      \
    \          }\n            }\n        }\n        return result;", "        long[]\
    \ a = new long[n];\n        for (int i = 0; i < n; i++)\n            a[i] = i\
    \ * i - i + 1;\n        long result = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            for (int j = i + 1; j < n; j++) {\n                for (int k\
    \ = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0)\
    \ {\n                        result++;\n                    }\n              \
    \  }\n            }\n        }\n        return result;", "        long[] a = new\
    \ long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i -\
    \ i + 1;\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            for (int j = i + 1; j < n; j++) {\n                for (int k\
    \ = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0)\
    \ {\n                        max = Math.Max(max, a[i] * a[j] * a[k]);\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long max = 0;\n   \
    \     for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                for (int k = j + 1; k < n; k++) {\n                    if\
    \ (a[i] + a[j] + a[k] % 3 == 0) {\n                        max = Math.Max(max,\
    \ a[i] * a[j] * a[k]);\n                    }\n                }\n           \
    \ }\n        }\n        return max;", "        long[] a = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n       \
    \ }\n        long[] result = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            for (int j = i + 1; j < n; j++) {\n                for (int k\
    \ = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0)\
    \ {\n                        result[i]++;\n                    }\n           \
    \     }\n            }\n        }\n        return result[0];", "        long[]\
    \ a = new long[n];\n        for (int i = 0; i < n; i++)\n            a[i] = i\
    \ * i - i + 1;\n        long[] b = new long[n];\n        for (int i = 0; i < n;\
    \ i++)\n            b[i] = i * i - i + 1;\n        long[] c = new long[n];\n \
    \       for (int i = 0; i < n; i++)\n            c[i] = i * i - i + 1;\n     \
    \   long[] d = new long[n];\n        for (int i = 0; i < n; i++)\n           \
    \ d[i] = i * i - i + 1;\n        long[] e = new long[n];\n        for (int i =\
    \ 0; i < n; i++)\n            e[i] = i * i - i + 1;\n        long[] f = new long[n];\n\
    \        for (int i = 0; i < n; i++)\n            f[i] = i * i - i + 1;\n    \
    \    long[] g = new long[n];\n        for (int i = 0; i < n; i++)\n          \
    \  g[i] = i * i - i + 1;\n        long[] h = new long[n];\n        for (int i\
    \ = 0; i < n; i++)\n            h[i] = i * i - i + 1;\n        long[] i = new\
    \ long[n];\n        for (int i = 0; i < n; i++)\n            i[i] = i * i - i\
    \ + 1;\n        long[] j = new long[n];\n        for (int i = 0; i < n; i++)\n\
    \            j[i] = i * i - i + 1;\n        long[] k = new long[n];\n        for\
    \ (int i = 0; i < n; i++)\n            k[i] = i * i - i + 1;\n        long[] l\
    \ = new long[n];\n        for (int i = 0; i < n; i++)\n            l[i] = i *\
    \ i - i + 1;\n        long[] m = new long[n];\n        for (int i = 0; i", " \
    \       long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n       \
    \     a[i] = i * i - i + 1;\n        long res = 0;\n        for (int i = 0; i\
    \ < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n               \
    \ for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k]\
    \ % 3 == 0)\n                        res++;\n                }\n            }\n\
    \        }\n        return res;", "        long[] a = new long[n];\n        for\
    \ (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n  \
    \      long result = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n                \
    \        result++;\n                    }\n                }\n            }\n\
    \        }\n        return result;", "        long[] a = new long[n];\n      \
    \  for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n\
    \        long max = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n                \
    \        max = Math.Max(max, a[i] * a[j] * a[k]);\n                    }\n   \
    \             }\n            }\n        }\n        return max;", "        long[]\
    \ a = new long[n];\n        for (int i = 0; i < n; i++)\n            a[i] = i\
    \ * i - i + 1;\n        long result = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            for (int j = i + 1; j < n; j++) {\n                for (int k\
    \ = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0)\
    \ {\n                        result++;\n                    }\n              \
    \  }\n            }\n        }\n        return result;", "        long[] a = new\
    \ long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i -\
    \ i + 1;\n        }\n        long max = 0;\n        for (int i = 0; i < n - 1;\
    \ i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int\
    \ k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 ==\
    \ 0) {\n                        max = Math.Max(max, a[i] * a[j] * a[k]);\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long max = 0;\n   \
    \     for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                for (int k = j + 1; k < n; k++) {\n                    if\
    \ (a[i] + a[j] + a[k] % 3 == 0) {\n                        max = Math.Max(max,\
    \ a[i] * a[j] * a[k]);\n                    }\n                }\n           \
    \ }\n        }\n        return max;", "        long[] a = new long[n];\n     \
    \   for (int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        long\
    \ sum = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i\
    \ + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n    \
    \                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k])) {\n     \
    \                   sum++;\n                    }\n                }\n       \
    \     }\n        }\n        return sum;", "        long[] a = new long[n];\n \
    \       for (int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n     \
    \   return GetMaxTriples(a);\n    }\n\n    private static long GetMaxTriples(long[]\
    \ a) {\n        long max = 0;\n        for (int i = 0; i < a.Length - 2; i++)\
    \ {\n            for (int j = i + 1; j < a.Length - 1; j++) {\n              \
    \  for (int k = j + 1; k < a.Length; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] == 3 * (a[i] + a[j] + a[k])) {\n                        max = Math.Max(max,\
    \ a[i] * a[j] * a[k]);\n                    }\n                }\n           \
    \ }\n        }\n        return max;", "        long[] a = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n       \
    \ }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n        \
    \    for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k\
    \ < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n      \
    \                  count++;\n                    }\n                }\n      \
    \      }\n        }\n        return count;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n     \
    \       for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1;\
    \ k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n    \
    \                    max = Math.Max(max, a[i] * a[j] * a[k]);\n              \
    \      }\n                }\n            }\n        }\n        return max;", " \
    \       long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n     \
    \       a[i] = i * i - i + 1;\n        }\n        long max = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] % 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j]\
    \ * a[k]);\n                    }\n                }\n            }\n        }\n\
    \        return max;", "        long[] a = new long[n];\n        for (int i =\
    \ 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        long\
    \ sum = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i\
    \ + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n    \
    \                if (a[i] + a[j] + a[k] % 3 == 0) {\n                        sum++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long max = 0;\n   \
    \     for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                for (int k = j + 1; k < n; k++) {\n                    if\
    \ (a[i] + a[j] + a[k] % 3 == 0) {\n                        max = Math.Max(max,\
    \ a[i] * a[j] * a[k]);\n                    }\n                }\n           \
    \ }\n        }\n        return max;", "        long[] a = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n       \
    \ }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n        \
    \    for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k\
    \ < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n      \
    \                  count++;\n                    }\n                }\n      \
    \      }\n        }\n        return count;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n        long count = 0;\n        for (int i = 0; i < n - 1; i++) {\n\
    \            for (int j = i + 1; j < n; j++) {\n                for (int k = j\
    \ + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n\
    \                        count++;\n                    }\n                }\n\
    \            }\n        }\n        return count;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n     \
    \       for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1;\
    \ k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n    \
    \                    max = Math.Max(max, a[i] * a[j] * a[k]);\n              \
    \      }\n                }\n            }\n        }\n        return max;", " \
    \       long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n     \
    \       a[i] = i * i - i + 1;\n        }\n        long count = 0;\n        for\
    \ (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n \
    \               for (int k = j + 1; k < n; k++) {\n                    if (a[i]\
    \ + a[j] + a[k] % 3 == 0) {\n                        count++;\n              \
    \      }\n                }\n            }\n        }\n        return count;",
  "        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      a[i] = i * i - i + 1;\n        }\n        long count = 0;\n        for\
    \ (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n \
    \               for (int k = j + 1; k < n; k++) {\n                    if (a[i]\
    \ + a[j] + a[k] % 3 == 0) {\n                        count++;\n              \
    \      }\n                }\n            }\n        }\n        return count;",
  "        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      a[i] = i * i - i + 1;\n        }\n        long result = 0;\n        for\
    \ (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n \
    \               for (int k = j + 1; k < n; k++) {\n                    if (a[i]\
    \ + a[j] + a[k] % 3 == 0) {\n                        result++;\n             \
    \       }\n                }\n            }\n        }\n        return result;",
  "        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      a[i] = i * i - i + 1;\n        }\n        long count = 0;\n        for\
    \ (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n \
    \               for (int k = j + 1; k < n; k++) {\n                    if (a[i]\
    \ + a[j] + a[k] % 3 == 0) {\n                        count++;\n              \
    \      }\n                }\n            }\n        }\n        return count;",
  "        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      a[i] = i * i - i + 1;\n        }\n        long max = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] % 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j]\
    \ * a[k]);\n                    }\n                }\n            }\n        }\n\
    \        return max;", "        long[] a = new long[n];\n        for (int i =\
    \ 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        long\
    \ max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i\
    \ + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n    \
    \                if (a[i] + a[j] + a[k] % 3 == 0) {\n                        max\
    \ = Math.Max(max, a[i] * a[j] * a[k]);\n                    }\n              \
    \  }\n            }\n        }\n        return max;", "        long[] a = new\
    \ long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i -\
    \ i + 1;\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            for (int j = i + 1; j < n; j++) {\n                for (int k\
    \ = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0)\
    \ {\n                        max = Math.Max(max, a[i] * a[j] * a[k]);\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n\
    \            a[i] = i * i - i + 1;\n        return GetMaxTriples(a);", "     \
    \   long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n         \
    \   a[i] = i * i - i + 1;\n        }\n        long count = 0;\n        for (int\
    \ i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n\
    \                for (int k = j + 1; k < n; k++) {\n                    if (a[i]\
    \ + a[j] + a[k] % 3 == 0) {\n                        count++;\n              \
    \      }\n                }\n            }\n        }\n        return count;",
  "        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      a[i] = i * i - i + 1;\n        }\n        long max = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] % 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j]\
    \ * a[k]);\n                    }\n                }\n            }\n        }\n\
    \        return max;", "        long[] a = new long[n];\n        for (int i =\
    \ 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        long\
    \ max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i\
    \ + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n    \
    \                if (a[i] + a[j] + a[k] % 3 == 0) {\n                        max\
    \ = Math.Max(max, a[i] * a[j] * a[k]);\n                    }\n              \
    \  }\n            }\n        }\n        return max;", "        long[] a = new\
    \ long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i -\
    \ i + 1;\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            for (int j = i + 1; j < n; j++) {\n                for (int k\
    \ = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0)\
    \ {\n                        max = Math.Max(max, a[i] * a[j] * a[k]);\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long max = 0;\n   \
    \     for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                for (int k = j + 1; k < n; k++) {\n                    if\
    \ (a[i] + a[j] + a[k] % 3 == 0) {\n                        max = Math.Max(max,\
    \ a[i] * a[j] * a[k]);\n                    }\n                }\n           \
    \ }\n        }\n        return max;", "        long[] a = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n       \
    \ }\n        long count = 0;\n        for (int i = 0; i < n - 2; i++) {\n    \
    \        for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j\
    \ + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n\
    \                        count++;\n                    }\n                }\n\
    \            }\n        }\n        return count;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n        return GetMaxTriples(a);\n    }\n\n    public static long GetMaxTriples(long[]\
    \ a) {\n        long max = 0;\n        for (int i = 0; i < a.Length - 2; i++)\
    \ {\n            for (int j = i + 1; j < a.Length - 1; j++) {\n              \
    \  for (int k = j + 1; k < a.Length; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] == 3 * (a[i] + a[j] + a[k])) {\n                        max = Math.Max(max,\
    \ a[i] + a[j] + a[k]);\n                    }\n                }\n           \
    \ }\n        }\n        return max;", "        long[] a = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n       \
    \ }\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n       \
    \     for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k\
    \ < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n      \
    \                  result++;\n                    }\n                }\n     \
    \       }\n        }\n        return result;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n    \
    \    long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int\
    \ j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    if (a[i] + a[j] + a[k] % 3 == 0)\n                      \
    \  count++;\n                }\n            }\n        }\n        return count;",
  "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n        \
    \    a[i] = i * i - i + 1;\n        return GetMaxTriples(a);\n    }\n\n    //\
    \ You are given a positive integer n. You have to create an integer list a of\
    \ length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example\
    \ :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    //\
    \ a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public\
    \ static long GetMaxTriples(long[] a) {\n        long result = 0;\n        for\
    \ (int i = 0; i < a.Length - 2; i++) {\n            for (int j = i + 1; j < a.Length\
    \ - 1; j++) {\n                for (int k = j + 1; k < a.Length; k++) {\n    \
    \                if (a[i] + a[j] + a[k] % 3 == 0)\n                        result++;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n         \
    \   a[i] = i * i - i + 1;\n        }\n        long max = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] % 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j]\
    \ * a[k]);\n                    }\n                }\n            }\n        }\n\
    \        return max;", "        long[] a = new long[n];\n        for (int i =\
    \ 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        long\
    \ result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j =\
    \ i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n  \
    \                  if (a[i] + a[j] + a[k] % 3 == 0) {\n                      \
    \  result++;\n                    }\n                }\n            }\n      \
    \  }\n        return result;", "        long[] a = new long[n];\n        for (int\
    \ i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n       \
    \ long count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for\
    \ (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n;\
    \ k++) {\n                    if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k])\
    \ / 3) {\n                        count++;\n                    }\n          \
    \      }\n            }\n        }\n        return count;", "        long[] a\
    \ = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i\
    \ * i - i + 1;\n        }\n        long max = 0;\n        for (int i = 0; i <\
    \ n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for\
    \ (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] %\
    \ 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j] * a[k]);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n\
    \            a[i] = i * i - i + 1;\n        long[] b = new long[n];\n        for\
    \ (int i = 0; i < n; i++)\n            b[i] = i * i - i + 1;\n        long[] c\
    \ = new long[n];\n        for (int i = 0; i < n; i++)\n            c[i] = i *\
    \ i - i + 1;\n        long[] d = new long[n];\n        for (int i = 0; i < n;\
    \ i++)\n            d[i] = i * i - i + 1;\n        long[] e = new long[n];\n \
    \       for (int i = 0; i < n; i++)\n            e[i] = i * i - i + 1;\n     \
    \   long[] f = new long[n];\n        for (int i = 0; i < n; i++)\n           \
    \ f[i] = i * i - i + 1;\n        long[] g = new long[n];\n        for (int i =\
    \ 0; i < n; i++)\n            g[i] = i * i - i + 1;\n        long[] h = new long[n];\n\
    \        for (int i = 0; i < n; i++)\n            h[i] = i * i - i + 1;\n    \
    \    long[] i = new long[n];\n        for (int i = 0; i < n; i++)\n          \
    \  i[i] = i * i - i + 1;\n        long[] j = new long[n];\n        for (int i\
    \ = 0; i < n; i++)\n            j[i] = i * i - i + 1;\n        long[] k = new\
    \ long[n];\n        for (int i = 0; i < n; i++)\n            k[i] = i * i - i\
    \ + 1;\n        long[] l = new long[n];\n        for (int i = 0; i < n; i++)\n\
    \            l[i] = i * i - i + 1;\n        long[] m = new long[n];\n        for\
    \ (int i = 0; i", "        long[] a = new long[n];\n        for (int i = 0; i\
    \ < n; i++)\n            a[i] = i * i - i + 1;\n        long count = 0;\n    \
    \    for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                for (int k = j + 1; k < n; k++) {\n                    if\
    \ (a[i] + a[j] + a[k] % 3 == 0)\n                        count++;\n          \
    \      }\n            }\n        }\n        return count;", "        long[] a\
    \ = new long[n];\n        for (int i = 0; i < n; i++)\n            a[i] = i *\
    \ i - i + 1;\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n\
    \            for (int j = i + 1; j < n; j++) {\n                for (int k = j\
    \ + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0)\n \
    \                       result++;\n                }\n            }\n        }\n\
    \        return result;", "        long[] a = new long[n];\n        for (int i\
    \ = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        long\
    \ max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i\
    \ + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n    \
    \                if (a[i] + a[j] + a[k] % 3 == 0) {\n                        max\
    \ = Math.Max(max, a[i] * a[j] * a[k]);\n                    }\n              \
    \  }\n            }\n        }\n        return max;", "        long[] a = new\
    \ long[n];\n        for (int i = 0; i < n; i++)\n            a[i] = i * i - i\
    \ + 1;\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n    \
    \        for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1;\
    \ k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n    \
    \                    result++;\n                    }\n                }\n   \
    \         }\n        }\n        return result;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n     \
    \       for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1;\
    \ k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n    \
    \                    sum++;\n                    }\n                }\n      \
    \      }\n        }\n        return sum;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n    \
    \    long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int\
    \ j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    if (a[i] + a[j] + a[k] % 3 == 0) {\n                    \
    \    max = Math.Max(max, a[i] * a[j] * a[k]);\n                    }\n       \
    \         }\n            }\n        }\n        return max;", "        long[] a\
    \ = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i\
    \ * i - i + 1;\n        }\n        long max = 0;\n        for (int i = 0; i <\
    \ n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for\
    \ (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] %\
    \ 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j] * a[k]);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long count = 0;\n \
    \       for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j <\
    \ n; j++) {\n                for (int k = j + 1; k < n; k++) {\n             \
    \       if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long result = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        result++;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ result;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long max = 0;\n   \
    \     for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                for (int k = j + 1; k < n; k++) {\n                    if\
    \ (a[i] + a[j] + a[k] % 3 == 0) {\n                        max = Math.Max(max,\
    \ a[i] * a[j] * a[k]);\n                    }\n                }\n           \
    \ }\n        }\n        return max;", "        long[] a = new long[n];\n     \
    \   for (int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        long\
    \ max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i\
    \ + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n    \
    \                if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) / 3) {\n \
    \                       max = Math.Max(max, a[i] * a[j] * a[k]);\n           \
    \         }\n                }\n            }\n        }\n        return max;",
  "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n        \
    \    a[i] = i * i - i + 1;\n        long max = 0;\n        for (int i = 0; i <\
    \ n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for\
    \ (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] %\
    \ 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j] * a[k]);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long[] b = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            b[i] = i * i;\n        }\n\
    \        long[] c = new long[n];\n        for (int i = 0; i < n; i++) {\n    \
    \        c[i] = i * i + 1;\n        }\n        long[] d = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            d[i] = i * i + 2;\n        }\n\
    \        long[] e = new long[n];\n        for (int i = 0; i < n; i++) {\n    \
    \        e[i] = i * i + 3;\n        }\n        long[] f = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            f[i] = i * i + 4;\n        }\n\
    \        long[] g = new long[n];\n        for (int i = 0; i < n; i++) {\n    \
    \        g[i] = i * i + 5;\n        }\n        long[] h = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            h[i] = i * i + 6;\n        }\n\
    \        long[] i = new long[n];\n        for (int i = 0; i < n; i++) {\n    \
    \        i[i] = i * i + 7;\n        }\n        long[] j = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            j[i] = i * i + 8;\n        }\n\
    \        long[] k = new long[n];\n        for (int i = 0; i < n; i++) {\n    \
    \        k[i] = i * i + 9;\n        }\n        long[] l = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            l[i] = i * i + 10;", "        long[]\
    \ a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] =\
    \ i * i - i + 1;\n        }\n        long max = 0;\n        for (int i = 0; i\
    \ < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n               \
    \ for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k]\
    \ % 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j] * a[k]);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long count = 0;\n \
    \       for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j <\
    \ n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n         \
    \           if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n\
    \            a[i] = i * i - i + 1;\n        return GetMaxTriples(a);\n    }\n\n\
    \    // You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i] =\
    \ i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a\
    \ where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    //\
    \ Example :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation:\
    \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
    \    public static long GetMaxTriples(long[] a) {\n        long result = 0;\n\
    \        for (int i = 0; i < a.Length - 2; i++) {\n            for (int j = i\
    \ + 1; j < a.Length - 1; j++) {\n                for (int k = j + 1; k < a.Length;\
    \ k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0)\n             \
    \           result++;\n                }\n            }\n        }\n        return\
    \ result;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long count = 0;\n \
    \       for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ count;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long max = 0;\n   \
    \     for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                for (int k = j + 1; k < n; k++) {\n                    if\
    \ (a[i] + a[j] + a[k] % 3 == 0) {\n                        max = Math.Max(max,\
    \ a[i] * a[j] * a[k]);\n                    }\n                }\n           \
    \ }\n        }\n        return max;", "        long[] a = new long[n];\n     \
    \   for (int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        long\
    \ result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j =\
    \ i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n  \
    \                  if (a[i] + a[j] + a[k] % 3 == 0)\n                        result++;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n           \
    \ a[i] = i * i - i + 1;\n        long max = 0;\n        for (int i = 0; i < n;\
    \ i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int\
    \ k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 ==\
    \ 0) {\n                        max = Math.Max(max, a[i] * a[j] * a[k]);\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long max = 0;\n   \
    \     for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                for (int k = j + 1; k < n; k++) {\n                    if\
    \ (a[i] + a[j] + a[k] % 3 == 0) {\n                        max = Math.Max(max,\
    \ a[i] * a[j] * a[k]);\n                    }\n                }\n           \
    \ }\n        }\n        return max;", "        long[] a = new long[n];\n     \
    \   for (int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        return\
    \ GetMaxTriples(a);\n    }\n\n    // You are given a positive integer n. You have\
    \ to create an integer list a of length n.\n    // For each i (1 \u2264 i \u2264\
    \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    // Example :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n\
    \    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple\
    \ is (1, 7, 13).\n    public static long GetMaxTriples(long[] a) {\n        long\
    \ max = 0;\n        for (int i = 0; i < a.Length; i++) {\n            for (int\
    \ j = i + 1; j < a.Length; j++) {\n                for (int k = j + 1; k < a.Length;\
    \ k++) {\n                    if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]))\
    \ {\n                        max++;\n                    }\n                }\n\
    \            }\n        }\n        return max;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n        long[] b = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            b[i] = i * i;\n        }\n        long[] c = new long[n];\n \
    \       for (int i = 0; i < n; i++) {\n            c[i] = i * i + 1;\n       \
    \ }\n        long[] d = new long[n];\n        for (int i = 0; i < n; i++) {\n\
    \            d[i] = i * i + 2;\n        }\n        long[] e = new long[n];\n \
    \       for (int i = 0; i < n; i++) {\n            e[i] = i * i + 3;\n       \
    \ }\n        long[] f = new long[n];\n        for (int i = 0; i < n; i++) {\n\
    \            f[i] = i * i + 4;\n        }\n        long[] g = new long[n];\n \
    \       for (int i = 0; i < n; i++) {\n            g[i] = i * i + 5;\n       \
    \ }\n        long[] h = new long[n];\n        for (int i = 0; i < n; i++) {\n\
    \            h[i] = i * i + 6;\n        }\n        long[] i = new long[n];\n \
    \       for (int i = 0; i < n; i++) {\n            i[i] = i * i + 7;\n       \
    \ }\n        long[] j = new long[n];\n        for (int i = 0; i < n; i++) {\n\
    \            j[i] = i * i + 8;\n        }\n        long[] k = new long[n];\n \
    \       for (int i = 0; i < n; i++) {\n            k[i] = i * i + 9;\n       \
    \ }\n        long[] l = new long[n];\n        for (int i = 0; i < n; i++) {\n\
    \            l[i] = i * i + 10;", "        long[] a = new long[n];\n        for\
    \ (int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        long count\
    \ = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1;\
    \ j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n         \
    \           if (a[i] + a[j] + a[k] % 3 == 0)\n                        count++;\n\
    \                }\n            }\n        }\n        return count;", "      \
    \  long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n            a[i]\
    \ = i * i - i + 1;\n        long count = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            for (int j = i + 1; j < n; j++) {\n                for (int k\
    \ = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0)\n\
    \                        count++;\n                }\n            }\n        }\n\
    \        return count;", "        long[] a = new long[n];\n        for (int i\
    \ = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        long\
    \ sum = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i\
    \ + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n    \
    \                if (a[i] + a[j] + a[k] % 3 == 0) {\n                        sum++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long max = 0;\n   \
    \     for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                for (int k = j + 1; k < n; k++) {\n                    if\
    \ (a[i] + a[j] + a[k] % 3 == 0) {\n                        max = Math.Max(max,\
    \ a[i] * a[j] * a[k]);\n                    }\n                }\n           \
    \ }\n        }\n        return max;", "        long[] a = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n       \
    \ }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k <\
    \ n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n        \
    \                max = Math.Max(max, a[i] * a[j] * a[k]);\n                  \
    \  }\n                }\n            }\n        }\n        return max;", "   \
    \     long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n       \
    \     a[i] = i * i - i + 1;\n        }\n        long result = 0;\n        for\
    \ (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n \
    \               for (int k = j + 1; k < n; k++) {\n                    if (a[i]\
    \ + a[j] + a[k] % 3 == 0) {\n                        result++;\n             \
    \       }\n                }\n            }\n        }\n        return result;",
  "        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      a[i] = i * i - i + 1;\n        }\n        long max = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] % 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j]\
    \ * a[k]);\n                    }\n                }\n            }\n        }\n\
    \        return max;", "        long[] a = new long[n];\n        for (int i =\
    \ 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        long result = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        result++;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ result;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long count = 0;\n \
    \       for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ count;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long result = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        result++;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ result;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long count = 0;\n \
    \       for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j <\
    \ n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n         \
    \           if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long result = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        result++;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ result;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long count = 0;\n \
    \       for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ count;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n\
    \            a[i] = i * i - i + 1;\n        long[] b = new long[n];\n        for\
    \ (int i = 0; i < n; i++)\n            b[i] = i * i - i + 1;\n        long[] c\
    \ = new long[n];\n        for (int i = 0; i < n; i++)\n            c[i] = i *\
    \ i - i + 1;\n        long[] d = new long[n];\n        for (int i = 0; i < n;\
    \ i++)\n            d[i] = i * i - i + 1;\n        long[] e = new long[n];\n \
    \       for (int i = 0; i < n; i++)\n            e[i] = i * i - i + 1;\n     \
    \   long[] f = new long[n];\n        for (int i = 0; i < n; i++)\n           \
    \ f[i] = i * i - i + 1;\n        long[] g = new long[n];\n        for (int i =\
    \ 0; i < n; i++)\n            g[i] = i * i - i + 1;\n        long[] h = new long[n];\n\
    \        for (int i = 0; i < n; i++)\n            h[i] = i * i - i + 1;\n    \
    \    long[] i = new long[n];\n        for (int i = 0; i < n; i++)\n          \
    \  i[i] = i * i - i + 1;\n        long[] j = new long[n];\n        for (int i\
    \ = 0; i < n; i++)\n            j[i] = i * i - i + 1;\n        long[] k = new\
    \ long[n];\n        for (int i = 0; i < n; i++)\n            k[i] = i * i - i\
    \ + 1;\n        long[] l = new long[n];\n        for (int i = 0; i < n; i++)\n\
    \            l[i] = i * i - i + 1;\n        long[] m = new long[n];\n        for\
    \ (int i = 0; i", "        long[] a = new long[n];\n        for (int i = 0; i\
    \ < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        long max\
    \ = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1;\
    \ j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n         \
    \           if (a[i] + a[j] + a[k] % 3 == 0) {\n                        max =\
    \ Math.Max(max, a[i] * a[j] * a[k]);\n                    }\n                }\n\
    \            }\n        }\n        return max;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n    \
    \    long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int\
    \ j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    if (a[i] + a[j] + a[k] % 3 == 0)\n                      \
    \  count++;\n                }\n            }\n        }\n        return count;",
  "        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      a[i] = i * i - i + 1;\n        }\n        long max = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] % 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j]\
    \ * a[k]);\n                    }\n                }\n            }\n        }\n\
    \        return max;", "        long[] a = new long[n];\n        for (int i =\
    \ 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        long\
    \ count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j =\
    \ i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n  \
    \                  if (a[i] + a[j] + a[k] % 3 == 0) {\n                      \
    \  count++;\n                    }\n                }\n            }\n       \
    \ }\n        return count;", "        long[] a = new long[n];\n        for (int\
    \ i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n       \
    \ long max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j\
    \ = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    if (a[i] + a[j] + a[k] % 3 == 0) {\n                    \
    \    max = Math.Max(max, a[i] * a[j] * a[k]);\n                    }\n       \
    \         }\n            }\n        }\n        return max;", "        long[] a\
    \ = new long[n];\n        for (int i = 0; i < n; i++)\n            a[i] = i *\
    \ i - i + 1;\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n \
    \           for (int j = i + 1; j < n; j++) {\n                for (int k = j\
    \ + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n\
    \                        max = Math.Max(max, a[i] * a[j] * a[k]);\n          \
    \          }\n                }\n            }\n        }\n        return max;",
  "        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      a[i] = i * i - i + 1;\n        }\n        long[] b = new long[n];\n   \
    \     for (int i = 0; i < n; i++) {\n            b[i] = i * i;\n        }\n  \
    \      long[] c = new long[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      c[i] = i;\n        }\n        long[] d = new long[n];\n        for (int\
    \ i = 0; i < n; i++) {\n            d[i] = i;\n        }\n        long[] e = new\
    \ long[n];\n        for (int i = 0; i < n; i++) {\n            e[i] = i;\n   \
    \     }\n        long[] f = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            f[i] = i;\n        }\n        long[] g = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            g[i] = i;\n        }\n        long[]\
    \ h = new long[n];\n        for (int i = 0; i < n; i++) {\n            h[i] =\
    \ i;\n        }\n        long[] i = new long[n];\n        for (int i = 0; i <\
    \ n; i++) {\n            i[i] = i;\n        }\n        long[] j = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            j[i] = i;\n        }\n   \
    \     long[] k = new long[n];\n        for (int i = 0; i < n; i++) {\n       \
    \     k[i] = i;\n        }\n        long[] l = new long[n];\n        for (int\
    \ i = 0; i < n; i++) {\n            l[i] = i;\n        }\n        long[] m = new\
    \ long[n];\n        for (int i = 0; i < n; i++) {\n            m[i] = i;\n", " \
    \       long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n       \
    \     a[i] = i * i - i + 1;\n        long count = 0;\n        for (int i = 0;\
    \ i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n             \
    \   for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k]\
    \ % 3 == 0)\n                        count++;\n                }\n           \
    \ }\n        }\n        return count;", "        long[] a = new long[n];\n   \
    \     for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n     \
    \   }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n        \
    \    for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k\
    \ < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n      \
    \                  max = Math.Max(max, a[i] * a[j] * a[k]);\n                \
    \    }\n                }\n            }\n        }\n        return max;", " \
    \       long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n     \
    \       a[i] = i * i - i + 1;\n        }\n        long max = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] % 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j]\
    \ * a[k]);\n                    }\n                }\n            }\n        }\n\
    \        return max;", "        long[] a = new long[n];\n        for (int i =\
    \ 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        long[]\
    \ b = new long[n];\n        for (int i = 0; i < n; i++) {\n            b[i] =\
    \ i * i;\n        }\n        long[] c = new long[n];\n        for (int i = 0;\
    \ i < n; i++) {\n            c[i] = i;\n        }\n        long[] d = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            d[i] = i;\n        }\n   \
    \     long[] e = new long[n];\n        for (int i = 0; i < n; i++) {\n       \
    \     e[i] = i;\n        }\n        long[] f = new long[n];\n        for (int\
    \ i = 0; i < n; i++) {\n            f[i] = i;\n        }\n        long[] g = new\
    \ long[n];\n        for (int i = 0; i < n; i++) {\n            g[i] = i;\n   \
    \     }\n        long[] h = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            h[i] = i;\n        }\n        long[] i = new long[n];\n     \
    \   for (int i = 0; i < n; i++) {\n            i[i] = i;\n        }\n        long[]\
    \ j = new long[n];\n        for (int i = 0; i < n; i++) {\n            j[i] =\
    \ i;\n        }\n        long[] k = new long[n];\n        for (int i = 0; i <\
    \ n; i++) {\n            k[i] = i;\n        }\n        long[] l = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            l[i] = i;\n        }\n   \
    \     long[] m = new long[n];\n        for (int i = 0; i < n; i++) {\n       \
    \     m[i] = i;\n", "        long[] a = new long[n];\n        for (int i = 0;\
    \ i < n; i++)\n            a[i] = i * i - i + 1;\n        long result = 0;\n \
    \       for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] + a[j] + a[k] % 3 == 0)\n                        result++;\n   \
    \             }\n            }\n        }\n        return result;", "        long[]\
    \ a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] =\
    \ i * i - i + 1;\n        }\n        long result = 0;\n        for (int i = 0;\
    \ i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n             \
    \   for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k]\
    \ % 3 == 0) {\n                        result++;\n                    }\n    \
    \            }\n            }\n        }\n        return result;", "        long[]\
    \ a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] =\
    \ i * i - i + 1;\n        }\n        long max = 0;\n        for (int i = 0; i\
    \ < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n               \
    \ for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k]\
    \ % 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j] * a[k]);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long max = 0;\n   \
    \     for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n\
    \ - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n           \
    \         if (a[i] + a[j] + a[k] % 3 == 0) {\n                        max = Math.Max(max,\
    \ a[i] * a[j] * a[k]);\n                    }\n                }\n           \
    \ }\n        }\n        return max;", "        long[] a = new long[n];\n     \
    \   for (int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        long[]\
    \ b = new long[n];\n        for (int i = 0; i < n; i++)\n            b[i] = i\
    \ * i;\n        long[] c = new long[n];\n        for (int i = 0; i < n; i++)\n\
    \            c[i] = i;\n        long[] d = new long[n];\n        for (int i =\
    \ 0; i < n; i++)\n            d[i] = i + 1;\n        long[] e = new long[n];\n\
    \        for (int i = 0; i < n; i++)\n            e[i] = i + 2;\n        long[]\
    \ f = new long[n];\n        for (int i = 0; i < n; i++)\n            f[i] = i\
    \ + 3;\n        long[] g = new long[n];\n        for (int i = 0; i < n; i++)\n\
    \            g[i] = i + 4;\n        long[] h = new long[n];\n        for (int\
    \ i = 0; i < n; i++)\n            h[i] = i + 5;\n        long[] i = new long[n];\n\
    \        for (int i = 0; i < n; i++)\n            i[i] = i + 6;\n        long[]\
    \ j = new long[n];\n        for (int i = 0; i < n; i++)\n            j[i] = i\
    \ + 7;\n        long[] k = new long[n];\n        for (int i = 0; i < n; i++)\n\
    \            k[i] = i + 8;\n        long[] l = new long[n];\n        for (int\
    \ i = 0; i < n; i++)\n            l[i] = i + 9;\n        long[] m = new long[n];\n\
    \        for (int i = 0; i < n; i++)\n            m[i] = i + 10;\n        long[]\
    \ n = new long[n];\n        for (int i = 0; i < n; i++)\n            n[", "  \
    \      long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n        \
    \    a[i] = i * i - i + 1;\n        long sum = 0;\n        for (int i = 0; i <\
    \ n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for\
    \ (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] ==\
    \ 3 * (a[i] + a[j] + a[k]))\n                        sum++;\n                }\n\
    \            }\n        }\n        return sum;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n    \
    \    long count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int\
    \ j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) / 3)\n\
    \                        count++;\n                }\n            }\n        }\n\
    \        return count;", "        long[] a = new long[n];\n        for (int i\
    \ = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        long\
    \ count = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int\
    \ j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    if (a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]) /\
    \ 3) {\n                        count++;\n                    }\n            \
    \    }\n            }\n        }\n        return count;", "        long[] a =\
    \ new long[n];\n        for (int i = 0; i < n; i++)\n            a[i] = i * i\
    \ - i + 1;\n        long[] b = new long[n];\n        for (int i = 0; i < n; i++)\n\
    \            b[i] = i * i - i + 1;\n        long[] c = new long[n];\n        for\
    \ (int i = 0; i < n; i++)\n            c[i] = i * i - i + 1;\n        long[] d\
    \ = new long[n];\n        for (int i = 0; i < n; i++)\n            d[i] = i *\
    \ i - i + 1;\n        long[] e = new long[n];\n        for (int i = 0; i < n;\
    \ i++)\n            e[i] = i * i - i + 1;\n        long[] f = new long[n];\n \
    \       for (int i = 0; i < n; i++)\n            f[i] = i * i - i + 1;\n     \
    \   long[] g = new long[n];\n        for (int i = 0; i < n; i++)\n           \
    \ g[i] = i * i - i + 1;\n        long[] h = new long[n];\n        for (int i =\
    \ 0; i < n; i++)\n            h[i] = i * i - i + 1;\n        long[] i = new long[n];\n\
    \        for (int i = 0; i < n; i++)\n            i[i] = i * i - i + 1;\n    \
    \    long[] j = new long[n];\n        for (int i = 0; i < n; i++)\n          \
    \  j[i] = i * i - i + 1;\n        long[] k = new long[n];\n        for (int i\
    \ = 0; i < n; i++)\n            k[i] = i * i - i + 1;\n        long[] l = new\
    \ long[n];\n        for (int i = 0; i < n; i++)\n            l[i] = i * i - i\
    \ + 1;\n        long[] m = new long[n];\n        for (int i = 0; i", "       \
    \ long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n           \
    \ a[i] = i * i - i + 1;\n        }\n        long count = 0;\n        for (int\
    \ i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n  \
    \              for (int k = j + 1; k < n; k++) {\n                    if (a[i]\
    \ + a[j] + a[k] % 3 == 0) {\n                        count++;\n              \
    \      }\n                }\n            }\n        }\n        return count;",
  "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n        \
    \    a[i] = i * i - i + 1;\n        long max = 0;\n        for (int i = 0; i <\
    \ n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for\
    \ (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] %\
    \ 3 == 0) {\n                        max = Math.Max(max, a[i] * a[j] * a[k]);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long count = 0;\n \
    \       for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ count;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n\
    \            a[i] = i * i - i + 1;\n        return GetMaxTriples(a);", "     \
    \   long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n           \
    \ a[i] = i * i - i + 1;\n        long count = 0;\n        for (int i = 0; i <\
    \ n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n         \
    \       for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j]\
    \ + a[k] % 3 == 0)\n                        count++;\n                }\n    \
    \        }\n        }\n        return count;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n        long count = 0;\n        for (int i = 0; i < n - 2; i++) {\n\
    \            for (int j = i + 1; j < n - 1; j++) {\n                for (int k\
    \ = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0)\
    \ {\n                        count++;\n                    }\n               \
    \ }\n            }\n        }\n        return count;", "        long[] a = new\
    \ long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i -\
    \ i + 1;\n        }\n        long max = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            for (int j = i + 1; j < n; j++) {\n                for (int k\
    \ = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0)\
    \ {\n                        max = Math.Max(max, a[i] * a[j] * a[k]);\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ max;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        long result = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        result++;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ result;", "        long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n\
    \            a[i] = i * i - i + 1;\n        long[] b = new long[n];\n        for\
    \ (int i = 0; i < n; i++)\n            b[i] = i * i;\n        long[] c = new long[n];\n\
    \        for (int i = 0; i < n; i++)\n            c[i] = i * i + 1;\n        long[]\
    \ d = new long[n];\n        for (int i = 0; i < n; i++)\n            d[i] = i\
    \ * i + 2;\n        long[] e = new long[n];\n        for (int i = 0; i < n; i++)\n\
    \            e[i] = i * i + 3;\n        long[] f = new long[n];\n        for (int\
    \ i = 0; i < n; i++)\n            f[i] = i * i + 4;\n        long[] g = new long[n];\n\
    \        for (int i = 0; i < n; i++)\n            g[i] = i * i + 5;\n        long[]\
    \ h = new long[n];\n        for (int i = 0; i < n; i++)\n            h[i] = i\
    \ * i + 6;\n        long[] i = new long[n];\n        for (int i = 0; i < n; i++)\n\
    \            i[i] = i * i + 7;\n        long[] j = new long[n];\n        for (int\
    \ i = 0; i < n; i++)\n            j[i] = i * i + 8;\n        long[] k = new long[n];\n\
    \        for (int i = 0; i < n; i++)\n            k[i] = i * i + 9;\n        long[]\
    \ l = new long[n];\n        for (int i = 0; i < n; i++)\n            l[i] = i\
    \ * i + 10;\n        long[] m = new long[n];\n        for (int i = 0; i < n; i++)\n\
    \            m[i] = i * i + 11;\n        long[] n =", "        long[] a = new\
    \ long[n];\n        for (int i = 0; i < n; i++)\n            a[i] = i * i - i\
    \ + 1;\n        long result = 0;\n        for (int i = 0; i < n; i++) {\n    \
    \        for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1;\
    \ k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n    \
    \                    result++;\n                    }\n                }\n   \
    \         }\n        }\n        return result;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n        long count = 0;\n        for (int i = 0; i < n - 2; i++) {\n\
    \            for (int j = i + 1; j < n - 1; j++) {\n                for (int k\
    \ = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0)\
    \ {\n                        count++;\n                    }\n               \
    \ }\n            }\n        }\n        return count;", "        long[] a = new\
    \ long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i -\
    \ i + 1;\n        }\n        long result = 0;\n        for (int i = 0; i < n;\
    \ i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int\
    \ k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 ==\
    \ 0) {\n                        result++;\n                    }\n           \
    \     }\n            }\n        }\n        return result;", "        long[] a\
    \ = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i\
    \ * i - i + 1;\n        }\n        long count = 0;\n        for (int i = 0; i\
    \ < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n               \
    \ for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k]\
    \ % 3 == 0) {\n                        count++;\n                    }\n     \
    \           }\n            }\n        }\n        return count;", "        long[]\
    \ a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] =\
    \ i * i - i + 1;\n        }\n        long count = 0;\n        for (int i = 0;\
    \ i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n     \
    \           for (int k = j + 1; k < n; k++) {\n                    if (a[i] +\
    \ a[j] + a[k] % 3 == 0) {\n                        count++;\n                \
    \    }\n                }\n            }\n        }\n        return count;", " \
    \       long[] a = new long[n];\n        for (int i = 0; i < n; i++)\n       \
    \     a[i] = i * i - i + 1;\n        long result = 0;\n        for (int i = 0;\
    \ i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n             \
    \   for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k]\
    \ % 3 == 0)\n                        result++;\n                }\n          \
    \  }\n        }\n        return result;", "        long[] a = new long[n];\n \
    \       for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n   \
    \     }\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n    \
    \        for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1;\
    \ k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n    \
    \                    count++;\n                    }\n                }\n    \
    \        }\n        }\n        return count;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n        long count = 0;\n        for (int i = 0; i < n - 2; i++) {\n\
    \            for (int j = i + 1; j < n - 1; j++) {\n                for (int k\
    \ = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0)\
    \ {\n                        count++;\n                    }\n               \
    \ }\n            }\n        }\n        return count;", "        long[] a = new\
    \ long[n];\n        for (int i = 0; i < n; i++)\n            a[i] = i * i - i\
    \ + 1;\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n       \
    \     for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k\
    \ < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0)\n        \
    \                max = Math.Max(max, a[i] * a[j] * a[k]);\n                }\n\
    \            }\n        }\n        return max;", "        long[] a = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n     \
    \       for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1;\
    \ k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n    \
    \                    max = Math.Max(max, a[i] * a[j] * a[k]);\n              \
    \      }\n                }\n            }\n        }\n        return max;"]
stop_tokens:
- "\n    }\n"
