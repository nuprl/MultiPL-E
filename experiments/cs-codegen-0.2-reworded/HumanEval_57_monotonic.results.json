{
  "name": "HumanEval_57_monotonic",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && (l.First < l.Last || l.First > l.Last);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnh2h4_hg.cs(17,32): error CS0019: Operator '<' cannot be applied to operands of type 'method group' and 'method group'\n/tmp/tmpnh2h4_hg.cs(17,52): error CS0019: Operator '>' cannot be applied to operands of type 'method group' and 'method group'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item(0) <= l.Item(1);\n        if (l.Count == 3) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2);\n        if (l.Count == 4) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3);\n        if (l.Count == 5) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4);\n        if (l.Count == 6) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5);\n        if (l.Count == 7) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6);\n        if (l.Count == 8) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6) && l.Item(6) <= l.Item(7);\n        if (l.Count == 9) return l.Item(0) <= l.Item(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7w8scrca.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp7w8scrca.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        if (l.Count == 3) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2];\n        if (l.Count == 4) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3];\n        if (l.Count == 5) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4];\n        if (l.Count == 6) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5];\n        if (l.Count == 7) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6];\n        if (l.Count == 8) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6] || l.Item[6] <= l.Item[7];\n        if (l.Count == 9) return l.Item[0] <= l.Item[1] ||\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ffsbh62.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp9ffsbh62.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        if (l.Count == 3) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2];\n        if (l.Count == 4) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3];\n        if (l.Count == 5) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4];\n        if (l.Count == 6) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5];\n        if (l.Count == 7) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6];\n        if (l.Count == 8) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6] || l.Item[6] <= l.Item[7];\n        if (l.Count == 9) return l.Item[0] <= l.Item[1] ||\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ffsbh62.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp9ffsbh62.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (long i : l.Skip(1)) {\n            if (i < last) return false;\n            last = i;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpm6tjgz83.cs(19,21): error CS1002: ; expected\n/tmp/tmpm6tjgz83.cs(19,21): error CS1525: Invalid expression term ':'\n/tmp/tmpm6tjgz83.cs(19,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count < 2) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l[i];\n            if (cur < last) return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_wk348ie.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && l.Count == l.Count(x => x < 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9d107bc6d6ab4ae6a2c9067d9d8da008>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9d107bc6d6ab4ae6a2c9067d9d8da008>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && (l.Count == 2 || l.Count == 3 || l.Count == 4) && (l.Count == 2 || l.Count == 3 || l.Count == 4) && (l.Count == 2 || l.Count == 3 || l.Count == 4);\n    }\n\n    public static void Main() {\n        List<long> l = new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L});\n        Console.WriteLine(\"Monotonic({0}) = {1}\", l, Monotonic(l));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw2t3_m23.cs(20,24): error CS0017: Program has more than one entry point defined. Compile with /main to specify the type that contains the entry point.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && (l.Count > 2 || l.First < l.Last);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg760rc3i.cs(17,47): error CS0019: Operator '<' cannot be applied to operands of type 'method group' and 'method group'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        if (l.Count == 3) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2];\n        if (l.Count == 4) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3];\n        if (l.Count == 5) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3] && l.Item[3] <= l.Item[4];\n        if (l.Count == 6) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3] && l.Item[3] <= l.Item[4] && l.Item[4] <= l.Item[5];\n        if (l.Count == 7) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3] && l.Item[3] <= l.Item[4] && l.Item[4] <= l.Item[5] && l.Item[5] <= l.Item[6];\n        if (l.Count == 8) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3] && l.Item[3] <= l.Item[4] && l.Item[4] <= l.Item[5] && l.Item[5] <= l.Item[6] && l.Item[6] <= l.Item[7];\n        if (l.Count == 9) return l.Item[0] <= l.Item[1] &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9hyy9cap.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp9hyy9cap.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l[i];\n            if (cur < last) return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprc18xxwv.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item(0) <= l.Item(1);\n        if (l.Count == 3) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2);\n        if (l.Count == 4) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3);\n        if (l.Count == 5) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4);\n        if (l.Count == 6) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5);\n        if (l.Count == 7) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6);\n        if (l.Count == 8) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6) && l.Item(6) <= l.Item(7);\n        if (l.Count == 9) return l.Item(0) <= l.Item(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7w8scrca.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp7w8scrca.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.get(0) <= l.get(1);\n        long last = l.get(0);\n        for (int i = 1; i < l.Count; i++) {\n            if (l.get(i) < last) return false;\n            last = l.get(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_umtf3lt.cs(19,36): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_umtf3lt.cs(19,48): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_umtf3lt.cs(20,23): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_umtf3lt.cs(22,19): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_umtf3lt.cs(23,22): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item(0) <= l.Item(1);\n        long last = l.Item(0);\n        for (int i = 1; i < l.Count; i++) {\n            if (l.Item(i) < last) return false;\n            last = l.Item(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp77o8cmev.cs(19,36): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp77o8cmev.cs(19,49): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp77o8cmev.cs(20,23): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp77o8cmev.cs(22,19): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp77o8cmev.cs(23,22): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l.get(i);\n            if (cur < last) return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxpc52gzj.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n/tmp/tmpxpc52gzj.cs(20,26): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            if (l.get(i) < last) return false;\n            last = l.get(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyo1svl20.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n/tmp/tmpyo1svl20.cs(20,19): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpyo1svl20.cs(21,22): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0)\n            return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l[i];\n            if (cur < last)\n                return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1k64b_je.cs(19,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] || l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6] || l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6] || l[6] <= l[7] || l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiekuq_op.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        if (l.Count == 3) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2];\n        if (l.Count == 4) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3];\n        if (l.Count == 5) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4];\n        if (l.Count == 6) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5];\n        if (l.Count == 7) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6];\n        if (l.Count == 8) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6] || l.Item[6] <= l.Item[7];\n        if (l.Count == 9) return l.Item[0] <= l.Item[1] ||\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ffsbh62.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp9ffsbh62.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.First == l.Last;\n        if (l.Count == 3) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1;\n        if (l.Count == 4) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1 || l.First == l.Last - 2 || l.First == l.Last + 2;\n        if (l.Count == 5) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1 || l.First == l.Last - 2 || l.First == l.Last + 2 || l.First == l.Last - 3 || l.First == l.Last + 3;\n        if (l.Count == 6) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1 || l.First == l.Last - 2 || l.First == l.Last + 2 || l.First == l.Last - 3 || l.First == l.Last + 3 || l.First == l.Last - 4 || l.First == l.Last + 4;\n        if (l.Count == 7) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1 || l.First == l.Last - 2 || l.First == l.Last + 2 || l.First == l.Last - 3 || l.First == l.Last + 3 || l.First == l.Last - 4 || l.First == l.Last + 4 || l.First == l.Last - 5 || l.First == l.Last + 5;\n        if (l.Count == 8) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1 || l.First == l.Last - 2 || l.First == l.Last + 2 || l.First == l.Last - 3 || l.First ==\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprdlply_i.cs(25,190): error CS1525: Invalid expression term '}'\n/tmp/tmprdlply_i.cs(25,190): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count < 2) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            if (l.get(i) < last) return false;\n            last = l.get(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptts31una.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n/tmp/tmptts31una.cs(20,19): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmptts31una.cs(21,22): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (long i = 1; i < l.Count; i++) {\n            if (l.get_Item(i) < last) return false;\n            last = l.get_Item(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6xb9uufc.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n/tmp/tmp6xb9uufc.cs(20,19): error CS0571: 'List<long>.this[int].get': cannot explicitly call operator or accessor\n/tmp/tmp6xb9uufc.cs(21,22): error CS0571: 'List<long>.this[int].get': cannot explicitly call operator or accessor\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        long last = l.get(0);\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l.get(i);\n            if (last > cur) {\n                return false;\n            }\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdq2huv68.cs(17,23): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpdq2huv68.cs(19,26): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            if (l.get(i) < last) return false;\n            last = l.get(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyo1svl20.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n/tmp/tmpyo1svl20.cs(20,19): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpyo1svl20.cs(21,22): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0)\n            return true;\n        if (l.Count == 1)\n            return true;\n        if (l.Count == 2)\n            return l[0] <= l[1];\n        if (l.Count == 3)\n            return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10)\n            return l[0] <= l[1] && l[1]\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl65uujtf.cs(38,40): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        if (l.Count == 3) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2];\n        if (l.Count == 4) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3];\n        if (l.Count == 5) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3] && l.Item[3] <= l.Item[4];\n        if (l.Count == 6) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3] && l.Item[3] <= l.Item[4] && l.Item[4] <= l.Item[5];\n        if (l.Count == 7) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3] && l.Item[3] <= l.Item[4] && l.Item[4] <= l.Item[5] && l.Item[5] <= l.Item[6];\n        if (l.Count == 8) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3] && l.Item[3] <= l.Item[4] && l.Item[4] <= l.Item[5] && l.Item[5] <= l.Item[6] && l.Item[6] <= l.Item[7];\n        if (l.Count == 9) return l.Item[0] <= l.Item[1] &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9hyy9cap.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp9hyy9cap.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && l.Count > 0 && l.Count % 2 == 0 &&\n            (l.First > l.Last || l.First < l.Last);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpenlp6t4l.cs(18,14): error CS0019: Operator '>' cannot be applied to operands of type 'method group' and 'method group'\n/tmp/tmpenlp6t4l.cs(18,34): error CS0019: Operator '<' cannot be applied to operands of type 'method group' and 'method group'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count < 2) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l[i];\n            if (cur < last) return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_wk348ie.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.get(0) <= l.get(1);\n        if (l.Count == 3) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2);\n        if (l.Count == 4) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3);\n        if (l.Count == 5) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4);\n        if (l.Count == 6) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5);\n        if (l.Count == 7) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6);\n        if (l.Count == 8) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6) && l.get(6) <= l.get(7);\n        if (l.Count == 9) return l.get(0) <= l.get(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl4t705ue.cs(26,57): error CS1525: Invalid expression term '}'\n/tmp/tmpl4t705ue.cs(26,57): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && (l.Count > 2 || l.First < l.Last);\n    }\n\n    // Return true if list elements are monotonically increasing.\n    // >>> MonotonicIncreasing((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> MonotonicIncreasing((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> MonotonicIncreasing((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (false)\n    // >>> MonotonicIncreasing((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}), true))\n    // (true)\n    // >>> MonotonicIncreasing((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}), true))\n    // (false)\n    // >>> MonotonicIncreasing((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}), true))\n    // (false)\n    public static bool MonotonicIncreasing(List<long> l, bool checkFirstAndLast) {\n        if (l.Count <= 1) return true;\n        if (l.Count > 2 && checkFirstAndLast) {\n            if (l.First > l.Last) return false;\n        }\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (l.get(i) < l.get(i - 1) && l.get(i) < l.get(i + 1)) return false;\n        }\n        return true;\n    }\n\n    // Return true if list elements are monotonically decreasing.\n    // >>> MonotonicDecreasing((new List\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppnf_6hrq.cs(58,1): error CS1022: Type or namespace definition, or end-of-file expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        if (l.Count == 3) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2];\n        if (l.Count == 4) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3];\n        if (l.Count == 5) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4];\n        if (l.Count == 6) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5];\n        if (l.Count == 7) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6];\n        if (l.Count == 8) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6] || l.Item[6] <= l.Item[7];\n        if (l.Count == 9) return l.Item[0] <= l.Item[1] ||\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ffsbh62.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp9ffsbh62.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        if (l.Count == 3) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2];\n        if (l.Count == 4) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3];\n        if (l.Count == 5) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4];\n        if (l.Count == 6) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5];\n        if (l.Count == 7) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6];\n        if (l.Count == 8) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6] || l.Item[6] <= l.Item[7];\n        if (l.Count == 9) return l.Item[0] <= l.Item[1] ||\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ffsbh62.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp9ffsbh62.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0)\n            return true;\n        if (l.Count == 1)\n            return true;\n        if (l.Count == 2)\n            return l.First == l.Last;\n        if (l.Count == 3)\n            return l.First == l.Last || l.First == l.Last - 1;\n        if (l.Count == 4)\n            return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last - 2;\n        if (l.Count == 5)\n            return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last - 2 || l.First == l.Last - 3;\n        if (l.Count == 6)\n            return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last - 2 || l.First == l.Last - 3 || l.First == l.Last - 4;\n        if (l.Count == 7)\n            return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last - 2 || l.First == l.Last - 3 || l.First == l.Last - 4 || l.First == l.Last - 5;\n        if (l.Count == 8)\n            return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last - 2 || l.First == l.Last - 3 || l.First == l.Last - 4 || l.First == l.Last - 5 || l.First == l.Last - 6;\n        if (l.Count == 9)\n            return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last - 2 || l.First == l.Last - 3 || l.First == l.Last - 4 || l.First == l.Last - 5 || l.First == l.Last - 6 || l.First == l.Last - 7;\n        if (l.Count == 10)\n            return l.First == l.Last || l.First == l.Last - 1 || l.First ==\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplp89hy1k.cs(38,76): error CS1525: Invalid expression term '}'\n/tmp/tmplp89hy1k.cs(38,76): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Get(0) <= l.Get(1);\n        long last = l.Get(0);\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l.Get(i);\n            if (cur < last) return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppbuaq7yl.cs(19,36): error CS1061: 'List<long>' does not contain a definition for 'Get' and no accessible extension method 'Get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmppbuaq7yl.cs(19,48): error CS1061: 'List<long>' does not contain a definition for 'Get' and no accessible extension method 'Get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmppbuaq7yl.cs(20,23): error CS1061: 'List<long>' does not contain a definition for 'Get' and no accessible extension method 'Get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmppbuaq7yl.cs(22,26): error CS1061: 'List<long>' does not contain a definition for 'Get' and no accessible extension method 'Get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && (l.First < l.Last || l.First > l.Last);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnh2h4_hg.cs(17,32): error CS0019: Operator '<' cannot be applied to operands of type 'method group' and 'method group'\n/tmp/tmpnh2h4_hg.cs(17,52): error CS0019: Operator '>' cannot be applied to operands of type 'method group' and 'method group'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.get(0) <= l.get(1);\n        if (l.Count == 3) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2);\n        if (l.Count == 4) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3);\n        if (l.Count == 5) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4);\n        if (l.Count == 6) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5);\n        if (l.Count == 7) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6);\n        if (l.Count == 8) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6) && l.get(6) <= l.get(7);\n        if (l.Count == 9) return l.get(0) <= l.get(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl4t705ue.cs(26,57): error CS1525: Invalid expression term '}'\n/tmp/tmpl4t705ue.cs(26,57): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.get(0) <= l.get(1);\n        if (l.Count == 3) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2);\n        if (l.Count == 4) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3);\n        if (l.Count == 5) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4);\n        if (l.Count == 6) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5);\n        if (l.Count == 7) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6);\n        if (l.Count == 8) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6) && l.get(6) <= l.get(7);\n        if (l.Count == 9) return l.get(0) <= l.get(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl4t705ue.cs(26,57): error CS1525: Invalid expression term '}'\n/tmp/tmpl4t705ue.cs(26,57): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.First == l.Last;\n        if (l.Count == 3) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1;\n        if (l.Count == 4) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1 || l.First == l.Last - 2 || l.First == l.Last + 2;\n        if (l.Count == 5) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1 || l.First == l.Last - 2 || l.First == l.Last + 2 || l.First == l.Last - 3 || l.First == l.Last + 3;\n        if (l.Count == 6) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1 || l.First == l.Last - 2 || l.First == l.Last + 2 || l.First == l.Last - 3 || l.First == l.Last + 3 || l.First == l.Last - 4 || l.First == l.Last + 4;\n        if (l.Count == 7) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1 || l.First == l.Last - 2 || l.First == l.Last + 2 || l.First == l.Last - 3 || l.First == l.Last + 3 || l.First == l.Last - 4 || l.First == l.Last + 4 || l.First == l.Last - 5 || l.First == l.Last + 5;\n        if (l.Count == 8) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1 || l.First == l.Last - 2 || l.First == l.Last + 2 || l.First == l.Last - 3 || l.First ==\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprdlply_i.cs(25,190): error CS1525: Invalid expression term '}'\n/tmp/tmprdlply_i.cs(25,190): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l[i];\n            if (cur < last) return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprc18xxwv.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item(0) <= l.Item(1);\n        if (l.Count == 3) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2);\n        if (l.Count == 4) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3);\n        if (l.Count == 5) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4);\n        if (l.Count == 6) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5);\n        if (l.Count == 7) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6);\n        if (l.Count == 8) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6) && l.Item(6) <= l.Item(7);\n        if (l.Count == 9) return l.Item(0) <= l.Item(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7w8scrca.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp7w8scrca.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count < 2) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l[i];\n            if (last > cur) return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpblr0lh5w.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item(0) <= l.Item(1);\n        if (l.Count == 3) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2);\n        if (l.Count == 4) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3);\n        if (l.Count == 5) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4);\n        if (l.Count == 6) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5);\n        if (l.Count == 7) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6);\n        if (l.Count == 8) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6) && l.Item(6) <= l.Item(7);\n        if (l.Count == 9) return l.Item(0) <= l.Item(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7w8scrca.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp7w8scrca.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        long last = l.Item[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l.Item[i] < last) return false;\n            last = l.Item[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxftl9eqf.cs(19,36): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpxftl9eqf.cs(19,49): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpxftl9eqf.cs(20,23): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpxftl9eqf.cs(22,19): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpxftl9eqf.cs(23,22): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] || l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6] || l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6] || l[6] <= l[7] || l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiekuq_op.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (long i = 1; i < l.Count; i++) {\n            if (l.get_Item(i) < last) return false;\n            last = l.get_Item(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6xb9uufc.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n/tmp/tmp6xb9uufc.cs(20,19): error CS0571: 'List<long>.this[int].get': cannot explicitly call operator or accessor\n/tmp/tmp6xb9uufc.cs(21,22): error CS0571: 'List<long>.this[int].get': cannot explicitly call operator or accessor\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0)\n            return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l.get(i);\n            if (cur < last)\n                return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnnotaakj.cs(19,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n/tmp/tmpnnotaakj.cs(21,26): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0)\n            return true;\n        if (l.Count == 1)\n            return true;\n        if (l.Count == 2)\n            return l[0] <= l[1];\n        if (l.Count == 3)\n            return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10)\n            return l[0] <= l[1] && l[1]\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl65uujtf.cs(38,40): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && (l.Count == 2 || l.Count == 3 || l.Count == 4) &&\n            (l.First > l.Last || l.First < l.Last || l.First == l.Last);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprtad7hjm.cs(18,14): error CS0019: Operator '>' cannot be applied to operands of type 'method group' and 'method group'\n/tmp/tmprtad7hjm.cs(18,34): error CS0019: Operator '<' cannot be applied to operands of type 'method group' and 'method group'\n/tmp/tmprtad7hjm.cs(18,54): error CS0019: Operator '==' cannot be applied to operands of type 'method group' and 'method group'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item(0) <= l.Item(1);\n        long last = l.Item(0);\n        for (int i = 1; i < l.Count; i++) {\n            if (l.Item(i) < last) return false;\n            last = l.Item(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp77o8cmev.cs(19,36): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp77o8cmev.cs(19,49): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp77o8cmev.cs(20,23): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp77o8cmev.cs(22,19): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp77o8cmev.cs(23,22): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l[i];\n            if (cur < last) return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprc18xxwv.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.get(0) <= l.get(1);\n        long last = l.get(0);\n        for (int i = 1; i < l.Count; i++) {\n            if (l.get(i) < last) return false;\n            last = l.get(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_umtf3lt.cs(19,36): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_umtf3lt.cs(19,48): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_umtf3lt.cs(20,23): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_umtf3lt.cs(22,19): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_umtf3lt.cs(23,22): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        if (l.Count == 3) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2];\n        if (l.Count == 4) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3];\n        if (l.Count == 5) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3] && l.Item[3] <= l.Item[4];\n        if (l.Count == 6) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3] && l.Item[3] <= l.Item[4] && l.Item[4] <= l.Item[5];\n        if (l.Count == 7) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3] && l.Item[3] <= l.Item[4] && l.Item[4] <= l.Item[5] && l.Item[5] <= l.Item[6];\n        if (l.Count == 8) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3] && l.Item[3] <= l.Item[4] && l.Item[4] <= l.Item[5] && l.Item[5] <= l.Item[6] && l.Item[6] <= l.Item[7];\n        if (l.Count == 9) return l.Item[0] <= l.Item[1] &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9hyy9cap.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp9hyy9cap.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0)\n            return true;\n        if (l.Count == 1)\n            return true;\n        if (l.Count == 2)\n            return l[0] <= l[1];\n        if (l.Count == 3)\n            return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10)\n            return l[0] <= l[1] && l[1]\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl65uujtf.cs(38,40): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l[i];\n            if (last > cur) return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxgnhqi0u.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item(0) <= l.Item(1);\n        long last = l.Item(0);\n        for (int i = 1; i < l.Count; i++) {\n            if (l.Item(i) < last) return false;\n            last = l.Item(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp77o8cmev.cs(19,36): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp77o8cmev.cs(19,49): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp77o8cmev.cs(20,23): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp77o8cmev.cs(22,19): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp77o8cmev.cs(23,22): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        if (l.Count == 3) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2];\n        if (l.Count == 4) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3];\n        if (l.Count == 5) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3] && l.Item[3] <= l.Item[4];\n        if (l.Count == 6) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3] && l.Item[3] <= l.Item[4] && l.Item[4] <= l.Item[5];\n        if (l.Count == 7) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3] && l.Item[3] <= l.Item[4] && l.Item[4] <= l.Item[5] && l.Item[5] <= l.Item[6];\n        if (l.Count == 8) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3] && l.Item[3] <= l.Item[4] && l.Item[4] <= l.Item[5] && l.Item[5] <= l.Item[6] && l.Item[6] <= l.Item[7];\n        if (l.Count == 9) return l.Item[0] <= l.Item[1] &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9hyy9cap.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp9hyy9cap.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count < 2) return true;\n        long last = l.First;\n        for (long i = 1; i < l.Count; i++) {\n            if (l.get_Item(i) < last) return false;\n            last = l.get_Item(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzelicnr4.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n/tmp/tmpzelicnr4.cs(20,19): error CS0571: 'List<long>.this[int].get': cannot explicitly call operator or accessor\n/tmp/tmpzelicnr4.cs(21,22): error CS0571: 'List<long>.this[int].get': cannot explicitly call operator or accessor\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.get(0) <= l.get(1);\n        if (l.Count == 3) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2);\n        if (l.Count == 4) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3);\n        if (l.Count == 5) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4);\n        if (l.Count == 6) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5);\n        if (l.Count == 7) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6);\n        if (l.Count == 8) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6) && l.get(6) <= l.get(7);\n        if (l.Count == 9) return l.get(0) <= l.get(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl4t705ue.cs(26,57): error CS1525: Invalid expression term '}'\n/tmp/tmpl4t705ue.cs(26,57): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l[i];\n            if (cur < last) return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprc18xxwv.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item(0) <= l.Item(1);\n        long last = l.Item(0);\n        for (int i = 1; i < l.Count; i++) {\n            if (l.Item(i) < last) return false;\n            last = l.Item(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp77o8cmev.cs(19,36): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp77o8cmev.cs(19,49): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp77o8cmev.cs(20,23): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp77o8cmev.cs(22,19): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp77o8cmev.cs(23,22): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count < 2) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] || l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6] || l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6] || l[6] <= l[7] || l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5]\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppwq6jda9.cs(26,111): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.get(0) <= l.get(1);\n        long last = l.get(0);\n        for (int i = 1; i < l.Count; i++) {\n            if (l.get(i) < last) return false;\n            last = l.get(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_umtf3lt.cs(19,36): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_umtf3lt.cs(19,48): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_umtf3lt.cs(20,23): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_umtf3lt.cs(22,19): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_umtf3lt.cs(23,22): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.First == l.Last;\n        if (l.Count == 3) return l.First == l.Last || l.First == l.Last - l.First;\n        if (l.Count == 4) return l.First == l.Last || l.First == l.Last - l.First || l.First == l.Last - l.First - l.First;\n        if (l.Count == 5) return l.First == l.Last || l.First == l.Last - l.First || l.First == l.Last - l.First - l.First || l.First == l.Last - l.First - l.First - l.First;\n        if (l.Count == 6) return l.First == l.Last || l.First == l.Last - l.First || l.First == l.Last - l.First - l.First || l.First == l.Last - l.First - l.First - l.First || l.First == l.Last - l.First - l.First - l.First - l.First;\n        if (l.Count == 7) return l.First == l.Last || l.First == l.Last - l.First || l.First == l.Last - l.First - l.First || l.First == l.Last - l.First - l.First - l.First || l.First == l.Last - l.First - l.First - l.First - l.First || l.First == l.Last - l.First - l.First - l.First - l.First - l.First;\n        if (l.Count == 8) return l.First == l.Last || l.First == l.Last - l.First || l.First == l.Last - l.First - l.First || l.First == l.Last - l.First - l.First - l.First || l.First == l.Last - l.First - l.First - l.First - l.First || l.First == l.Last - l.First - l.First - l.First - l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp748dqfk8.cs(25,291): error CS1001: Identifier expected\n/tmp/tmp748dqfk8.cs(25,291): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l[i];\n            if (cur < last) return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprc18xxwv.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && (l.Count == 2 || l.Count == 3 || l.Count == 4) &&\n            (l.Contains(l.First) || l.Contains(l.Last));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiguw0ja3.cs(18,25): error CS1503: Argument 1: cannot convert from 'method group' to 'long'\n/tmp/tmpiguw0ja3.cs(18,48): error CS1503: Argument 1: cannot convert from 'method group' to 'long'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.First == l.Last;\n        if (l.Count == 3) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1;\n        if (l.Count > 3) {\n            long last = l.Last;\n            for (long i = l.Count - 1; i >= 2; i--) {\n                if (l.First != last) return false;\n                last = l[i];\n            }\n            return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpb7br40_8.cs(19,34): error CS0019: Operator '==' cannot be applied to operands of type 'method group' and 'method group'\n/tmp/tmpb7br40_8.cs(20,34): error CS0019: Operator '==' cannot be applied to operands of type 'method group' and 'method group'\n/tmp/tmpb7br40_8.cs(20,66): error CS0019: Operator '-' cannot be applied to operands of type 'method group' and 'int'\n/tmp/tmpb7br40_8.cs(20,91): error CS0019: Operator '+' cannot be applied to operands of type 'method group' and 'int'\n/tmp/tmpb7br40_8.cs(22,27): error CS0428: Cannot convert method group 'Last' to non-delegate type 'long'. Did you intend to invoke the method?\n/tmp/tmpb7br40_8.cs(24,21): error CS0019: Operator '!=' cannot be applied to operands of type 'method group' and 'long'\n/tmp/tmpb7br40_8.cs(25,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] || l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6] || l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6] || l[6] <= l[7] || l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiekuq_op.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (long i : l) {\n            if (i < last) return false;\n            last = i;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmpfsob8_.cs(19,21): error CS1002: ; expected\n/tmp/tmpmpfsob8_.cs(19,21): error CS1525: Invalid expression term ':'\n/tmp/tmpmpfsob8_.cs(19,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && l.Count == l.Count(x => x > 0) && l.Count == l.Count(x => x < 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e30cdc87eae74dbcaf765ee1274f35ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e30cdc87eae74dbcaf765ee1274f35ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item(0) <= l.Item(1);\n        if (l.Count == 3) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2);\n        if (l.Count == 4) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3);\n        if (l.Count == 5) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4);\n        if (l.Count == 6) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5);\n        if (l.Count == 7) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6);\n        if (l.Count == 8) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6) && l.Item(6) <= l.Item(7);\n        if (l.Count == 9) return l.Item(0) <= l.Item(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7w8scrca.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp7w8scrca.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        if (l.Count == 3) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2];\n        if (l.Count == 4) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3];\n        if (l.Count == 5) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4];\n        if (l.Count == 6) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5];\n        if (l.Count == 7) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6];\n        if (l.Count == 8) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6] || l.Item[6] <= l.Item[7];\n        if (l.Count == 9) return l.Item[0] <= l.Item[1] ||\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ffsbh62.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp9ffsbh62.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l[i];\n            if (cur < last) return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprc18xxwv.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0)\n            return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l[i];\n            if (last < cur)\n                return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4pxu64km.cs(19,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] || l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6] || l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6] || l[6] <= l[7] || l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiekuq_op.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        if (l.Count == 3) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2];\n        if (l.Count == 4) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3];\n        if (l.Count == 5) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4];\n        if (l.Count == 6) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5];\n        if (l.Count == 7) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6];\n        if (l.Count == 8) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6] || l.Item[6] <= l.Item[7];\n        if (l.Count == 9) return l.Item[0] <= l.Item[1] ||\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ffsbh62.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp9ffsbh62.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        if (l.Count == 3) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2];\n        if (l.Count == 4) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3];\n        if (l.Count == 5) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4];\n        if (l.Count == 6) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5];\n        if (l.Count == 7) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6];\n        if (l.Count == 8) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6] || l.Item[6] <= l.Item[7];\n        if (l.Count == 9) return l.Item[0] <= l.Item[1] ||\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ffsbh62.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp9ffsbh62.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        if (l.Count == 3) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2];\n        if (l.Count == 4) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3];\n        if (l.Count == 5) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4];\n        if (l.Count == 6) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5];\n        if (l.Count == 7) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6];\n        if (l.Count == 8) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6] || l.Item[6] <= l.Item[7];\n        if (l.Count == 9) return l.Item[0] <= l.Item[1] ||\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ffsbh62.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp9ffsbh62.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] || l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6] || l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6] || l[6] <= l[7] || l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiekuq_op.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item(0) <= l.Item(1);\n        if (l.Count == 3) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2);\n        if (l.Count == 4) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3);\n        if (l.Count == 5) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4);\n        if (l.Count == 6) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5);\n        if (l.Count == 7) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6);\n        if (l.Count == 8) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6) && l.Item(6) <= l.Item(7);\n        if (l.Count == 9) return l.Item(0) <= l.Item(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7w8scrca.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp7w8scrca.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.First == l.Last;\n        long first = l.First;\n        long last = l.Last;\n        if (first < last) return true;\n        if (first > last) return false;\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (l.get(i) < l.get(i - 1)) return false;\n            if (l.get(i) > l.get(i - 1)) return true;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5xl2w82v.cs(19,34): error CS0019: Operator '==' cannot be applied to operands of type 'method group' and 'method group'\n/tmp/tmp5xl2w82v.cs(20,24): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n/tmp/tmp5xl2w82v.cs(21,23): error CS0428: Cannot convert method group 'Last' to non-delegate type 'long'. Did you intend to invoke the method?\n/tmp/tmp5xl2w82v.cs(25,19): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp5xl2w82v.cs(25,30): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp5xl2w82v.cs(26,19): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp5xl2w82v.cs(26,30): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (long i = 1; i < l.Count; i++) {\n            if (l.get_Item(i) < last) return false;\n            last = l.get_Item(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6xb9uufc.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n/tmp/tmp6xb9uufc.cs(20,19): error CS0571: 'List<long>.this[int].get': cannot explicitly call operator or accessor\n/tmp/tmp6xb9uufc.cs(21,22): error CS0571: 'List<long>.this[int].get': cannot explicitly call operator or accessor\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.get(0) <= l.get(1);\n        long last = l.get(0);\n        for (int i = 1; i < l.Count; i++) {\n            if (l.get(i) < last) return false;\n            last = l.get(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_umtf3lt.cs(19,36): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_umtf3lt.cs(19,48): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_umtf3lt.cs(20,23): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_umtf3lt.cs(22,19): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp_umtf3lt.cs(23,22): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item(0) <= l.Item(1);\n        if (l.Count == 3) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2);\n        if (l.Count == 4) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3);\n        if (l.Count == 5) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4);\n        if (l.Count == 6) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5);\n        if (l.Count == 7) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6);\n        if (l.Count == 8) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6) && l.Item(6) <= l.Item(7);\n        if (l.Count == 9) return l.Item(0) <= l.Item(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7w8scrca.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp7w8scrca.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        long last = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] < last) return false;\n            last = l[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <41f5705416ff43698527a5493fd47c39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <41f5705416ff43698527a5493fd47c39>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.get(0) <= l.get(1);\n        if (l.Count == 3) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2);\n        if (l.Count == 4) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3);\n        if (l.Count == 5) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4);\n        if (l.Count == 6) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5);\n        if (l.Count == 7) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6);\n        if (l.Count == 8) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6) && l.get(6) <= l.get(7);\n        if (l.Count == 9) return l.get(0) <= l.get(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl4t705ue.cs(26,57): error CS1525: Invalid expression term '}'\n/tmp/tmpl4t705ue.cs(26,57): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (long i : l.Skip(1)) {\n            if (last > i) return false;\n            last = i;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj723g084.cs(19,21): error CS1002: ; expected\n/tmp/tmpj723g084.cs(19,21): error CS1525: Invalid expression term ':'\n/tmp/tmpj723g084.cs(19,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] || l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6] || l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6] || l[6] <= l[7] || l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiekuq_op.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0)\n            return true;\n        long last = l.First;\n        for (long i = 1; i < l.Count; i++) {\n            if (l.get_Item(i) < last)\n                return false;\n            last = l.get_Item(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpphtnmr7u.cs(19,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n/tmp/tmpphtnmr7u.cs(21,19): error CS0571: 'List<long>.this[int].get': cannot explicitly call operator or accessor\n/tmp/tmpphtnmr7u.cs(23,22): error CS0571: 'List<long>.this[int].get': cannot explicitly call operator or accessor\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (long i : l) {\n            if (i < last) return false;\n            last = i;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmpfsob8_.cs(19,21): error CS1002: ; expected\n/tmp/tmpmpfsob8_.cs(19,21): error CS1525: Invalid expression term ':'\n/tmp/tmpmpfsob8_.cs(19,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count < 2) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l[i];\n            if (cur < last) return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_wk348ie.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        long last = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] < last) return false;\n            last = l[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <41f5705416ff43698527a5493fd47c39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <41f5705416ff43698527a5493fd47c39>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item(0) <= l.Item(1);\n        if (l.Count == 3) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2);\n        if (l.Count == 4) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3);\n        if (l.Count == 5) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4);\n        if (l.Count == 6) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5);\n        if (l.Count == 7) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6);\n        if (l.Count == 8) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6) && l.Item(6) <= l.Item(7);\n        if (l.Count == 9) return l.Item(0) <= l.Item(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7w8scrca.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp7w8scrca.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item(0) <= l.Item(1);\n        if (l.Count == 3) return l.Item(0) <= l.Item(1) || l.Item(1) <= l.Item(2);\n        if (l.Count == 4) return l.Item(0) <= l.Item(1) || l.Item(1) <= l.Item(2) || l.Item(2) <= l.Item(3);\n        if (l.Count == 5) return l.Item(0) <= l.Item(1) || l.Item(1) <= l.Item(2) || l.Item(2) <= l.Item(3) || l.Item(3) <= l.Item(4);\n        if (l.Count == 6) return l.Item(0) <= l.Item(1) || l.Item(1) <= l.Item(2) || l.Item(2) <= l.Item(3) || l.Item(3) <= l.Item(4) || l.Item(4) <= l.Item(5);\n        if (l.Count == 7) return l.Item(0) <= l.Item(1) || l.Item(1) <= l.Item(2) || l.Item(2) <= l.Item(3) || l.Item(3) <= l.Item(4) || l.Item(4) <= l.Item(5) || l.Item(5) <= l.Item(6);\n        if (l.Count == 8) return l.Item(0) <= l.Item(1) || l.Item(1) <= l.Item(2) || l.Item(2) <= l.Item(3) || l.Item(3) <= l.Item(4) || l.Item(4) <= l.Item(5) || l.Item(5) <= l.Item(6) || l.Item(6) <= l.Item(7);\n        if (l.Count == 9) return l.Item(0) <= l.Item(1) ||\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3ypvzz_p.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp3ypvzz_p.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.get(0) <= l.get(1);\n        if (l.Count == 3) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2);\n        if (l.Count == 4) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3);\n        if (l.Count == 5) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4);\n        if (l.Count == 6) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5);\n        if (l.Count == 7) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6);\n        if (l.Count == 8) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6) && l.get(6) <= l.get(7);\n        if (l.Count == 9) return l.get(0) <= l.get(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl4t705ue.cs(26,57): error CS1525: Invalid expression term '}'\n/tmp/tmpl4t705ue.cs(26,57): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && l.Count > 2 && l.Count > 3 && l.Count > 4 && l.Count > 5 && l.Count > 6 && l.Count > 7 && l.Count > 8 && l.Count > 9 && l.Count > 10 && l.Count > 11 && l.Count > 12 && l.Count > 13 && l.Count > 14 && l.Count > 15 && l.Count > 16 && l.Count > 17 && l.Count > 18 && l.Count > 19 && l.Count > 20;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8c96c26070004690a1583119b332248d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8c96c26070004690a1583119b332248d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && (l.Count == 2 || l.Count == 3 || l.Count == 4 || l.Count == 5 || l.Count == 6 || l.Count == 7 || l.Count == 8 || l.Count == 9 || l.Count == 10 || l.Count == 11 || l.Count == 12 || l.Count == 13 || l.Count == 14 || l.Count == 15 || l.Count == 16 || l.Count == 17 || l.Count == 18 || l.Count == 19 || l.Count == 20);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55e9423497bd4237bc1fb958e8f9db17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55e9423497bd4237bc1fb958e8f9db17>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        if (l.Count == 3) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2];\n        if (l.Count == 4) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3];\n        if (l.Count == 5) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4];\n        if (l.Count == 6) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5];\n        if (l.Count == 7) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6];\n        if (l.Count == 8) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6] || l.Item[6] <= l.Item[7];\n        if (l.Count == 9) return l.Item[0] <= l.Item[1] ||\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ffsbh62.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp9ffsbh62.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l[i];\n            if (cur < last) return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprc18xxwv.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (long i : l) {\n            if (i < last) return false;\n            last = i;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmpfsob8_.cs(19,21): error CS1002: ; expected\n/tmp/tmpmpfsob8_.cs(19,21): error CS1525: Invalid expression term ':'\n/tmp/tmpmpfsob8_.cs(19,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        long last = l.Item[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l.Item[i] < last) return false;\n            last = l.Item[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxftl9eqf.cs(19,36): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpxftl9eqf.cs(19,49): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpxftl9eqf.cs(20,23): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpxftl9eqf.cs(22,19): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpxftl9eqf.cs(23,22): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.get(0) <= l.get(1);\n        if (l.Count == 3) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2);\n        if (l.Count == 4) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3);\n        if (l.Count == 5) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4);\n        if (l.Count == 6) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5);\n        if (l.Count == 7) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6);\n        if (l.Count == 8) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6) && l.get(6) <= l.get(7);\n        if (l.Count == 9) return l.get(0) <= l.get(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl4t705ue.cs(26,57): error CS1525: Invalid expression term '}'\n/tmp/tmpl4t705ue.cs(26,57): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (long i : l) {\n            if (i < last) return false;\n            last = i;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmpfsob8_.cs(19,21): error CS1002: ; expected\n/tmp/tmpmpfsob8_.cs(19,21): error CS1525: Invalid expression term ':'\n/tmp/tmpmpfsob8_.cs(19,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (long i : l) {\n            if (last < i) {\n                last = i;\n            } else if (last > i) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzw2ves10.cs(19,21): error CS1002: ; expected\n/tmp/tmpzw2ves10.cs(19,21): error CS1525: Invalid expression term ':'\n/tmp/tmpzw2ves10.cs(19,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.First == l.Last;\n        if (l.Count == 3) return l.First == l.Last || l.First == l.Last - 1;\n        if (l.Count == 4) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last - 2;\n        if (l.Count == 5) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last - 2 || l.First == l.Last - 3;\n        if (l.Count == 6) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last - 2 || l.First == l.Last - 3 || l.First == l.Last - 4;\n        if (l.Count == 7) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last - 2 || l.First == l.Last - 3 || l.First == l.Last - 4 || l.First == l.Last - 5;\n        if (l.Count == 8) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last - 2 || l.First == l.Last - 3 || l.First == l.Last - 4 || l.First == l.Last - 5 || l.First == l.Last - 6;\n        if (l.Count == 9) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last - 2 || l.First == l.Last - 3 || l.First == l.Last - 4 || l.First == l.Last - 5 || l.First == l.Last - 6 || l.First == l.Last - 7;\n        if (l.Count == 10) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last - 2 || l.First == l.Last - 3 || l.First == l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpanz5nvjx.cs(27,144): error CS1001: Identifier expected\n/tmp/tmpanz5nvjx.cs(27,144): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.get(0) <= l.get(1);\n        if (l.Count == 3) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2);\n        if (l.Count == 4) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3);\n        if (l.Count == 5) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4);\n        if (l.Count == 6) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5);\n        if (l.Count == 7) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6);\n        if (l.Count == 8) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6) && l.get(6) <= l.get(7);\n        if (l.Count == 9) return l.get(0) <= l.get(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl4t705ue.cs(26,57): error CS1525: Invalid expression term '}'\n/tmp/tmpl4t705ue.cs(26,57): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item(0) <= l.Item(1);\n        if (l.Count == 3) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2);\n        if (l.Count == 4) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3);\n        if (l.Count == 5) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4);\n        if (l.Count == 6) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5);\n        if (l.Count == 7) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6);\n        if (l.Count == 8) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6) && l.Item(6) <= l.Item(7);\n        if (l.Count == 9) return l.Item(0) <= l.Item(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7w8scrca.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp7w8scrca.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item(0) <= l.Item(1);\n        if (l.Count == 3) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2);\n        if (l.Count == 4) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3);\n        if (l.Count == 5) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4);\n        if (l.Count == 6) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5);\n        if (l.Count == 7) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6);\n        if (l.Count == 8) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6) && l.Item(6) <= l.Item(7);\n        if (l.Count == 9) return l.Item(0) <= l.Item(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7w8scrca.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp7w8scrca.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        long last = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] < last) return false;\n            last = l[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <41f5705416ff43698527a5493fd47c39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <41f5705416ff43698527a5493fd47c39>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && l.Count > 2 && l.Count > 3 && l.Count > 4 && l.Count > 5 && l.Count > 6 && l.Count > 7 && l.Count > 8 && l.Count > 9 && l.Count > 10 && l.Count > 11 && l.Count > 12 && l.Count > 13 && l.Count > 14 && l.Count > 15 && l.Count > 16 && l.Count > 17 && l.Count > 18 && l.Count > 19 && l.Count > 20 && l.Count > 21 && l.Count > 22 && l.Count > 23 && l.Count > 24 && l.Count > 25 && l.Count > 26 && l.Count > 27 && l.Count > 28 && l.Count > 29 && l.Count > 30 && l.Count > 31 && l.Count > 32 && l.Count > 33 && l.Count > 34 && l.Count > 35 && l.Count > 36 && l.Count > 37 && l.Count > 38 && l.Count > 39 && l.Count > 40 && l.Count > 41 && l.Count > 42 && l.Count > 43 && l.Count > 44 && l.Count > 45 && l.Count > 46 && l.Count > 47 && l.Count > 48 && l.Count > 49 && l.Count > 50 && l.Count > 51 && l.Count > 52 && l.Count > 53 && l.Count > 54 && l.Count > 55 && l.Count > 56 && l.Count > 57 && l.Count > 58 && l.Count > 59 && l.Count > 60 && l.Count > 61 && l.Count > 62 && l.Count > 63 && l.Count > 64 && l.Count > 65 && l.Count > 66 && l.Count > 67 && l.Count > 68 && l.Count > 69 && l.Count > 70 && l.Count > 71 && l.Count > 72 && l.Count > 73 && l.Count > 74 && l.Count > 75 && l.Count > 76 && l.Count > 77 && l.Count > 78 && l.Count > 79 && l.Count > 80 && l.Count > 81 && l.Count > 82 && l.Count > 83 && l.Count > 84 && l.Count > 85 &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4zs0_fg6.cs(17,1366): error CS1525: Invalid expression term '}'\n/tmp/tmp4zs0_fg6.cs(17,1366): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0)\n            return true;\n        if (l.Count == 1)\n            return true;\n        if (l.Count == 2)\n            return l[0] <= l[1];\n        if (l.Count == 3)\n            return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9)\n            return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10)\n            return l[0] <= l[1] && l[1]\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl65uujtf.cs(38,40): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item(0) <= l.Item(1);\n        if (l.Count == 3) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2);\n        if (l.Count == 4) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3);\n        if (l.Count == 5) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4);\n        if (l.Count == 6) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5);\n        if (l.Count == 7) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6);\n        if (l.Count == 8) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6) && l.Item(6) <= l.Item(7);\n        if (l.Count == 9) return l.Item(0) <= l.Item(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7w8scrca.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp7w8scrca.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count < 2) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            if (l.get(i) < last) return false;\n            last = l.get(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptts31una.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n/tmp/tmptts31una.cs(20,19): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmptts31una.cs(21,22): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item(0) <= l.Item(1);\n        if (l.Count == 3) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2);\n        if (l.Count == 4) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3);\n        if (l.Count == 5) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4);\n        if (l.Count == 6) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5);\n        if (l.Count == 7) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6);\n        if (l.Count == 8) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6) && l.Item(6) <= l.Item(7);\n        if (l.Count == 9) return l.Item(0) <= l.Item(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7w8scrca.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp7w8scrca.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.First == l.Last;\n        if (l.Count == 3) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1;\n        long last = l.First;\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (l.get(i) < last) return false;\n            last = l.get(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpns353ytu.cs(19,34): error CS0019: Operator '==' cannot be applied to operands of type 'method group' and 'method group'\n/tmp/tmpns353ytu.cs(20,34): error CS0019: Operator '==' cannot be applied to operands of type 'method group' and 'method group'\n/tmp/tmpns353ytu.cs(20,66): error CS0019: Operator '-' cannot be applied to operands of type 'method group' and 'int'\n/tmp/tmpns353ytu.cs(20,91): error CS0019: Operator '+' cannot be applied to operands of type 'method group' and 'int'\n/tmp/tmpns353ytu.cs(21,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n/tmp/tmpns353ytu.cs(23,19): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpns353ytu.cs(24,22): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.get(0) <= l.get(1);\n        if (l.Count == 3) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2);\n        if (l.Count == 4) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3);\n        if (l.Count == 5) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4);\n        if (l.Count == 6) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5);\n        if (l.Count == 7) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6);\n        if (l.Count == 8) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6) && l.get(6) <= l.get(7);\n        if (l.Count == 9) return l.get(0) <= l.get(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl4t705ue.cs(26,57): error CS1525: Invalid expression term '}'\n/tmp/tmpl4t705ue.cs(26,57): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] || l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6] || l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6] || l[6] <= l[7] || l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiekuq_op.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.get(0) <= l.get(1);\n        if (l.Count == 3) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2);\n        if (l.Count == 4) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3);\n        if (l.Count == 5) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4);\n        if (l.Count == 6) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5);\n        if (l.Count == 7) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6);\n        if (l.Count == 8) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6) && l.get(6) <= l.get(7);\n        if (l.Count == 9) return l.get(0) <= l.get(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl4t705ue.cs(26,57): error CS1525: Invalid expression term '}'\n/tmp/tmpl4t705ue.cs(26,57): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l[i];\n            if (cur < last) return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprc18xxwv.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        long last = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] < last) return false;\n            last = l[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <41f5705416ff43698527a5493fd47c39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <41f5705416ff43698527a5493fd47c39>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (long i = 1; i < l.Count; i++) {\n            if (l.get(i) < last) return false;\n            last = l.get(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7wnlunh1.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n/tmp/tmp7wnlunh1.cs(20,19): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp7wnlunh1.cs(21,22): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l[i];\n            if (cur < last) return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprc18xxwv.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        if (l.Count == 3) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2];\n        if (l.Count == 4) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3];\n        if (l.Count == 5) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4];\n        if (l.Count == 6) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5];\n        if (l.Count == 7) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6];\n        if (l.Count == 8) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6] || l.Item[6] <= l.Item[7];\n        if (l.Count == 9) return l.Item[0] <= l.Item[1] ||\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ffsbh62.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp9ffsbh62.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] || l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6] || l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l[4] || l[4] <= l[5] || l[5] <= l[6] || l[6] <= l[7] || l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3] || l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiekuq_op.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0)\n            return true;\n        if (l.Count == 1)\n            return true;\n        if (l.Count == 2)\n            return l.get(0) <= l.get(1);\n        if (l.Count == 3)\n            return l.get(0) <= l.get(1) && l.get(1) <= l.get(2);\n        if (l.Count == 4)\n            return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3);\n        if (l.Count == 5)\n            return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4);\n        if (l.Count == 6)\n            return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5);\n        if (l.Count == 7)\n            return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6);\n        if (l.Count == 8)\n            return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6) && l.get(6) <= l.get(7);\n        if (l.Count\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpagwk3_3w.cs(35,20): error CS1026: ) expected\n/tmp/tmpagwk3_3w.cs(35,20): error CS1525: Invalid expression term '}'\n/tmp/tmpagwk3_3w.cs(35,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count < 2)\n            return true;\n        long last = l[0];\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l[i];\n            if (cur < last)\n                return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a258d6544c224e589c5bf229a551ea83>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a258d6544c224e589c5bf229a551ea83>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (long i = 1; i < l.Count; i++) {\n            if (l.get_Item(i) < last) return false;\n            last = l.get_Item(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6xb9uufc.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n/tmp/tmp6xb9uufc.cs(20,19): error CS0571: 'List<long>.this[int].get': cannot explicitly call operator or accessor\n/tmp/tmp6xb9uufc.cs(21,22): error CS0571: 'List<long>.this[int].get': cannot explicitly call operator or accessor\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && l.Count > 1 &&\n            l.First < l.Last &&\n            l.First < l.Last;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfjk03zpw.cs(18,13): error CS0019: Operator '<' cannot be applied to operands of type 'method group' and 'method group'\n/tmp/tmpfjk03zpw.cs(19,13): error CS0019: Operator '<' cannot be applied to operands of type 'method group' and 'method group'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        long last = l.First();\n        for (long i : l) {\n            if (i < last)\n                return false;\n            last = i;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_nw8cgg8.cs(18,21): error CS1002: ; expected\n/tmp/tmp_nw8cgg8.cs(18,21): error CS1525: Invalid expression term ':'\n/tmp/tmp_nw8cgg8.cs(18,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (long i : l) {\n            if (i < last) return false;\n            last = i;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmpfsob8_.cs(19,21): error CS1002: ; expected\n/tmp/tmpmpfsob8_.cs(19,21): error CS1525: Invalid expression term ':'\n/tmp/tmpmpfsob8_.cs(19,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        if (l.Count == 3) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2];\n        if (l.Count == 4) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3];\n        if (l.Count == 5) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4];\n        if (l.Count == 6) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5];\n        if (l.Count == 7) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6];\n        if (l.Count == 8) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6] || l.Item[6] <= l.Item[7];\n        if (l.Count == 9) return l.Item[0] <= l.Item[1] ||\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ffsbh62.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp9ffsbh62.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        if (l.Count == 3) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2];\n        if (l.Count == 4) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3];\n        if (l.Count == 5) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3] && l.Item[3] <= l.Item[4];\n        if (l.Count == 6) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3] && l.Item[3] <= l.Item[4] && l.Item[4] <= l.Item[5];\n        if (l.Count == 7) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3] && l.Item[3] <= l.Item[4] && l.Item[4] <= l.Item[5] && l.Item[5] <= l.Item[6];\n        if (l.Count == 8) return l.Item[0] <= l.Item[1] && l.Item[1] <= l.Item[2] && l.Item[2] <= l.Item[3] && l.Item[3] <= l.Item[4] && l.Item[4] <= l.Item[5] && l.Item[5] <= l.Item[6] && l.Item[6] <= l.Item[7];\n        if (l.Count == 9) return l.Item[0] <= l.Item[1] &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9hyy9cap.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp9hyy9cap.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && l.Count > 2 && l.Count > 3 && l.Count > 4 && l.Count > 5 && l.Count > 6 && l.Count > 7 && l.Count > 8 && l.Count > 9 && l.Count > 10 && l.Count > 11 && l.Count > 12 && l.Count > 13 && l.Count > 14 && l.Count > 15 && l.Count > 16 && l.Count > 17 && l.Count > 18 && l.Count > 19 && l.Count > 20 && l.Count > 21 && l.Count > 22 && l.Count > 23 && l.Count > 24 && l.Count > 25 && l.Count > 26 && l.Count > 27 && l.Count > 28 && l.Count > 29 && l.Count > 30 && l.Count > 31 && l.Count > 32 && l.Count > 33 && l.Count > 34 && l.Count > 35 && l.Count > 36 && l.Count > 37 && l.Count > 38 && l.Count > 39 && l.Count > 40 && l.Count > 41 && l.Count > 42 && l.Count > 43 && l.Count > 44 && l.Count > 45 && l.Count > 46 && l.Count > 47 && l.Count > 48 && l.Count > 49 && l.Count > 50 && l.Count > 51 && l.Count > 52 && l.Count > 53 && l.Count > 54 && l.Count > 55 && l.Count > 56 && l.Count > 57 && l.Count > 58 && l.Count > 59 && l.Count > 60 && l.Count > 61 && l.Count > 62 && l.Count > 63 && l.Count > 64 && l.Count > 65 && l.Count > 66 && l.Count > 67 && l.Count > 68 && l.Count > 69 && l.Count > 70 && l.Count > 71 && l.Count > 72 && l.Count > 73 && l.Count > 74 && l.Count > 75 && l.Count > 76 && l.Count > 77 && l.Count > 78 && l.Count > 79 && l.Count > 80 && l.Count > 81 && l.Count > 82 && l.Count > 83 && l.Count > 84 && l.Count > 85 &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4zs0_fg6.cs(17,1366): error CS1525: Invalid expression term '}'\n/tmp/tmp4zs0_fg6.cs(17,1366): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && (l.First < l.Last || l.First > l.Last);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnh2h4_hg.cs(17,32): error CS0019: Operator '<' cannot be applied to operands of type 'method group' and 'method group'\n/tmp/tmpnh2h4_hg.cs(17,52): error CS0019: Operator '>' cannot be applied to operands of type 'method group' and 'method group'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && l.Count > 1 &&\n            (l.First > l.Last || l.First < l.Last);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbya7swv4.cs(18,14): error CS0019: Operator '>' cannot be applied to operands of type 'method group' and 'method group'\n/tmp/tmpbya7swv4.cs(18,34): error CS0019: Operator '<' cannot be applied to operands of type 'method group' and 'method group'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (long i : l.Skip(1)) {\n            if (last < i) return false;\n            last = i;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmqik8rqm.cs(19,21): error CS1002: ; expected\n/tmp/tmpmqik8rqm.cs(19,21): error CS1525: Invalid expression term ':'\n/tmp/tmpmqik8rqm.cs(19,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l[i];\n            if (cur < last) return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprc18xxwv.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.First == l.Last;\n        if (l.Count == 3) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1;\n        if (l.Count == 4) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1 || l.First == l.Last - 2 || l.First == l.Last + 2;\n        if (l.Count == 5) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1 || l.First == l.Last - 2 || l.First == l.Last + 2 || l.First == l.Last - 3 || l.First == l.Last + 3;\n        if (l.Count == 6) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1 || l.First == l.Last - 2 || l.First == l.Last + 2 || l.First == l.Last - 3 || l.First == l.Last + 3 || l.First == l.Last - 4 || l.First == l.Last + 4;\n        if (l.Count == 7) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1 || l.First == l.Last - 2 || l.First == l.Last + 2 || l.First == l.Last - 3 || l.First == l.Last + 3 || l.First == l.Last - 4 || l.First == l.Last + 4 || l.First == l.Last - 5 || l.First == l.Last + 5;\n        if (l.Count == 8) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1 || l.First == l.Last - 2 || l.First == l.Last + 2 || l.First == l.Last - 3 || l.First ==\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprdlply_i.cs(25,190): error CS1525: Invalid expression term '}'\n/tmp/tmprdlply_i.cs(25,190): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        if (l.Count == 3) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2];\n        if (l.Count == 4) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3];\n        if (l.Count == 5) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4];\n        if (l.Count == 6) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5];\n        if (l.Count == 7) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6];\n        if (l.Count == 8) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6] || l.Item[6] <= l.Item[7];\n        if (l.Count == 9) return l.Item[0] <= l.Item[1] ||\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ffsbh62.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp9ffsbh62.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && (l.Count == 2 || l.Count == 3 && l[0] < l[1] || l.Count == 4 && l[0] < l[2] && l[1] < l[3] || l.Count == 5 && l[0] < l[2] && l[1] < l[3] && l[2] < l[4] || l.Count == 6 && l[0] < l[2] && l[1] < l[3] && l[2] < l[4] && l[3] < l[5]);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <35b08ac5eba348bdb4df9d3f185e78c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <35b08ac5eba348bdb4df9d3f185e78c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count < 2) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            long cur = l[i];\n            if (cur < last) return false;\n            last = cur;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_wk348ie.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        long last = l.First;\n        for (int i = 1; i < l.Count; i++) {\n            if (l.get(i) < last) return false;\n            last = l.get(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyo1svl20.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n/tmp/tmpyo1svl20.cs(20,19): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpyo1svl20.cs(21,22): error CS1061: 'List<long>' does not contain a definition for 'get' and no accessible extension method 'get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        if (l.Count == 3) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2];\n        if (l.Count == 4) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3];\n        if (l.Count == 5) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4];\n        if (l.Count == 6) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5];\n        if (l.Count == 7) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6];\n        if (l.Count == 8) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6] || l.Item[6] <= l.Item[7];\n        if (l.Count == 9) return l.Item[0] <= l.Item[1] ||\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ffsbh62.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp9ffsbh62.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && l.Count > 1 &&\n            (l.First < l.Last || l.First > l.Last);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpx2twlxzz.cs(18,14): error CS0019: Operator '<' cannot be applied to operands of type 'method group' and 'method group'\n/tmp/tmpx2twlxzz.cs(18,34): error CS0019: Operator '>' cannot be applied to operands of type 'method group' and 'method group'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && l.Count < 4 && l.First < l.Last;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyy4cf9dh.cs(17,46): error CS0019: Operator '<' cannot be applied to operands of type 'method group' and 'method group'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        if (l.Count == 3) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2];\n        if (l.Count == 4) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3];\n        if (l.Count == 5) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4];\n        if (l.Count == 6) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5];\n        if (l.Count == 7) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6];\n        if (l.Count == 8) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6] || l.Item[6] <= l.Item[7];\n        if (l.Count == 9) return l.Item[0] <= l.Item[1] ||\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ffsbh62.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp9ffsbh62.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && l.First < l.Last;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxt26vw48.cs(17,31): error CS0019: Operator '<' cannot be applied to operands of type 'method group' and 'method group'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item(0) <= l.Item(1);\n        if (l.Count == 3) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2);\n        if (l.Count == 4) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3);\n        if (l.Count == 5) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4);\n        if (l.Count == 6) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5);\n        if (l.Count == 7) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6);\n        if (l.Count == 8) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6) && l.Item(6) <= l.Item(7);\n        if (l.Count == 9) return l.Item(0) <= l.Item(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7w8scrca.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp7w8scrca.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.get(0) <= l.get(1);\n        if (l.Count == 3) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2);\n        if (l.Count == 4) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3);\n        if (l.Count == 5) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4);\n        if (l.Count == 6) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5);\n        if (l.Count == 7) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6);\n        if (l.Count == 8) return l.get(0) <= l.get(1) && l.get(1) <= l.get(2) && l.get(2) <= l.get(3) && l.get(3) <= l.get(4) && l.get(4) <= l.get(5) && l.get(5) <= l.get(6) && l.get(6) <= l.get(7);\n        if (l.Count == 9) return l.get(0) <= l.get(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl4t705ue.cs(26,57): error CS1525: Invalid expression term '}'\n/tmp/tmpl4t705ue.cs(26,57): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && (l.Count == 2 || l.Count == 3 || l.Count == 4 || l.Count == 5 || l.Count == 6 || l.Count == 7 || l.Count == 8 || l.Count == 9 || l.Count == 10 || l.Count == 11 || l.Count == 12 || l.Count == 13 || l.Count == 14 || l.Count == 15 || l.Count == 16 || l.Count == 17 || l.Count == 18 || l.Count == 19 || l.Count == 20);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55e9423497bd4237bc1fb958e8f9db17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <55e9423497bd4237bc1fb958e8f9db17>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && l.Count > 2 &&\n            (l.Count == 3 || (l.Count > 3 && (l.Item(0) < l.Item(1) || l.Item(1) < l.Item(2))));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpx_ub3p9c.cs(18,49): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpx_ub3p9c.cs(18,61): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpx_ub3p9c.cs(18,74): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpx_ub3p9c.cs(18,86): error CS1061: 'List<long>' does not contain a definition for 'Item' and no accessible extension method 'Item' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count < 2) return true;\n        long last = l.First;\n        for (long i = 1; i < l.Count; i++) {\n            if (l.Get(i) < last) return false;\n            last = l.Get(i);\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8syh0fdq.cs(18,23): error CS0428: Cannot convert method group 'First' to non-delegate type 'long'. Did you intend to invoke the method?\n/tmp/tmp8syh0fdq.cs(20,19): error CS1061: 'List<long>' does not contain a definition for 'Get' and no accessible extension method 'Get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp8syh0fdq.cs(21,22): error CS1061: 'List<long>' does not contain a definition for 'Get' and no accessible extension method 'Get' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.First == l.Last;\n        if (l.Count == 3) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1;\n        if (l.Count == 4) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1 || l.First == l.Last - 2 || l.First == l.Last + 2;\n        if (l.Count == 5) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1 || l.First == l.Last - 2 || l.First == l.Last + 2 || l.First == l.Last - 3 || l.First == l.Last + 3;\n        if (l.Count == 6) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1 || l.First == l.Last - 2 || l.First == l.Last + 2 || l.First == l.Last - 3 || l.First == l.Last + 3 || l.First == l.Last - 4 || l.First == l.Last + 4;\n        if (l.Count == 7) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1 || l.First == l.Last - 2 || l.First == l.Last + 2 || l.First == l.Last - 3 || l.First == l.Last + 3 || l.First == l.Last - 4 || l.First == l.Last + 4 || l.First == l.Last - 5 || l.First == l.Last + 5;\n        if (l.Count == 8) return l.First == l.Last || l.First == l.Last - 1 || l.First == l.Last + 1 || l.First == l.Last - 2 || l.First == l.Last + 2 || l.First == l.Last - 3 || l.First ==\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprdlply_i.cs(25,190): error CS1525: Invalid expression term '}'\n/tmp/tmprdlply_i.cs(25,190): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        return l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 && l.Count > 1 &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293478,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppd5qo2k5.cs(17,1290): error CS1525: Invalid expression term '}'\n/tmp/tmppd5qo2k5.cs(17,1290): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item(0) <= l.Item(1);\n        if (l.Count == 3) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2);\n        if (l.Count == 4) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3);\n        if (l.Count == 5) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4);\n        if (l.Count == 6) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5);\n        if (l.Count == 7) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6);\n        if (l.Count == 8) return l.Item(0) <= l.Item(1) && l.Item(1) <= l.Item(2) && l.Item(2) <= l.Item(3) && l.Item(3) <= l.Item(4) && l.Item(4) <= l.Item(5) && l.Item(5) <= l.Item(6) && l.Item(6) <= l.Item(7);\n        if (l.Count == 9) return l.Item(0) <= l.Item(1) &&\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7w8scrca.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp7w8scrca.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l.Item[0] <= l.Item[1];\n        if (l.Count == 3) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2];\n        if (l.Count == 4) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3];\n        if (l.Count == 5) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4];\n        if (l.Count == 6) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5];\n        if (l.Count == 7) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6];\n        if (l.Count == 8) return l.Item[0] <= l.Item[1] || l.Item[1] <= l.Item[2] || l.Item[2] <= l.Item[3] || l.Item[3] <= l.Item[4] || l.Item[4] <= l.Item[5] || l.Item[5] <= l.Item[6] || l.Item[6] <= l.Item[7];\n        if (l.Count == 9) return l.Item[0] <= l.Item[1] ||\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ffsbh62.cs(26,59): error CS1525: Invalid expression term '}'\n/tmp/tmp9ffsbh62.cs(26,59): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return true;\n        if (l.Count == 3) return true;\n        if (l.Count == 4) return true;\n        if (l.Count == 5) return true;\n        if (l.Count == 6) return true;\n        if (l.Count == 7) return true;\n        if (l.Count == 8) return true;\n        if (l.Count == 9) return true;\n        if (l.Count == 10) return true;\n        if (l.Count == 11) return true;\n        if (l.Count == 12) return true;\n        if (l.Count == 13) return true;\n        if (l.Count == 14) return true;\n        if (l.Count == 15) return true;\n        if (l.Count == 16) return true;\n        if (l.Count == 17) return true;\n        if (l.Count == 18) return true;\n        if (l.Count == 19) return true;\n        if (l.Count == 20) return true;\n        if (l.Count == 21) return true;\n        if (l.Count == 22) return true;\n        if (l.Count == 23) return true;\n        if (l.Count == 24) return true;\n        if (l.Count == 25) return true;\n        if (l.Count == 26) return true;\n        if (l.Count == 27) return true;\n        if (l.Count == 28) return true;\n        if (l.Count == 29) return true;\n        if (l.Count == 30) return true;\n        if (l.Count == 31) return true;\n        if (l.Count == 32) return true;\n        if (l.Count == 33) return true;\n        if (l.Count == 34) return true;\n        if (l.Count == 35) return true;\n        if (l.Count == 36) return true;\n        if (l.Count == 37) return true;\n        if (l.Count == 38) return true;\n        if (l.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjr2bwynf.cs(56,15): error CS1001: Identifier expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1026: ) expected\n/tmp/tmpjr2bwynf.cs(56,15): error CS1525: Invalid expression term '}'\n/tmp/tmpjr2bwynf.cs(56,15): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count == 0) return true;\n        if (l.Count == 1) return true;\n        if (l.Count == 2) return l[0] <= l[1];\n        if (l.Count == 3) return l[0] <= l[1] && l[1] <= l[2];\n        if (l.Count == 4) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3];\n        if (l.Count == 5) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4];\n        if (l.Count == 6) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5];\n        if (l.Count == 7) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6];\n        if (l.Count == 8) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7];\n        if (l.Count == 9) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l[4] && l[4] <= l[5] && l[5] <= l[6] && l[6] <= l[7] && l[7] <= l[8];\n        if (l.Count == 10) return l[0] <= l[1] && l[1] <= l[2] && l[2] <= l[3] && l[3] <= l\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n",
      "timestamp": 1664293477,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0a5f67m1.cs(27,92): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}