name: HumanEval_55_fib
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return n-th Fibonacci number.\n    // >>> Fib((10L))\n    //\
  \ (55L)\n    // >>> Fib((1L))\n    // (1L)\n    // >>> Fib((8L))\n    // (21L)\n\
  \    public static long Fib(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib((10L))\
  \ == (55L));\n    Debug.Assert(Fib((1L)) == (1L));\n    Debug.Assert(Fib((8L)) ==\
  \ (21L));\n    Debug.Assert(Fib((11L)) == (89L));\n    Debug.Assert(Fib((12L)) ==\
  \ (144L));\n    }\n\n}\n"
completions: ["        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);",
  "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "     \
    \   if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if\
    \ (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n\
    \ < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2)\
    \ return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return\
    \ n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n\
    \        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n   \
    \     return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n      \
    \  return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return\
    \ Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n\
    \ - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1)\
    \ + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n\
    \ - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);",
  "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "     \
    \   if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if\
    \ (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n\
    \ < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2)\
    \ return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return\
    \ n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n\
    \        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n   \
    \     return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n      \
    \  return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return\
    \ Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n\
    \ - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1)\
    \ + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n\
    \ - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);",
  "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "     \
    \   if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if\
    \ (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n\
    \ < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);\n    }\n\n    // Return\
    \ n-th Fibonacci number.\n    // >>> Fib2((10L))\n    // (55L)\n    // >>> Fib2((1L))\n\
    \    // (1L)\n    // >>> Fib2((8L))\n    // (21L)\n    public static long Fib2(long\
    \ n) {\n        if (n < 2) return n;\n        return Fib2(n - 1) + Fib2(n - 2);\n\
    \    }\n\n    // Return n-th Fibonacci number.\n    // >>> Fib3((10L))\n    //\
    \ (55L)\n    // >>> Fib3((1L))\n    // (1L)\n    // >>> Fib3((8L))\n    // (21L)\n\
    \    public static long Fib3(long n) {\n        if (n < 2) return n;\n       \
    \ return Fib3(n - 1) + Fib3(n - 2);\n    }\n\n    // Return n-th Fibonacci number.\n\
    \    // >>> Fib4((10L))\n    // (55L)\n    // >>> Fib4((1L))\n    // (1L)\n  \
    \  // >>> Fib4((8L))\n    // (21L)\n    public static long Fib4(long n) {\n  \
    \      if (n < 2) return n;\n        return Fib4(n - 1) + Fib4(n - 2);\n    }\n\
    \n    // Return n-th Fibonacci number.\n    // >>> Fib5((10L))\n    // (55L)\n\
    \    // >>> Fib5((1L))\n    // (1L)\n    // >>> Fib5((8L))\n    // (21L)\n   \
    \ public static long Fib5(long n) {\n        if (n < 2) return n;\n        return\
    \ Fib5(n - 1) + Fib5(n - 2);\n    }\n\n    // Return n-th Fibonacci number.\n\
    \    // >>> Fib6((10L))\n    // (55L)\n    // >>> Fib6((1L))\n    // (1L)\n  \
    \  // >>> Fib6((8L", "        if (n < 2) return n;\n        return Fib(n - 1)\
    \ + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n\
    \ - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);",
  "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "     \
    \   if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if\
    \ (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n\
    \ < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2)\
    \ return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return\
    \ n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n\
    \        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n   \
    \     return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n      \
    \  return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return\
    \ Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n\
    \ - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1)\
    \ + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n\
    \ - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);",
  "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "     \
    \   if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if\
    \ (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n\
    \ < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2)\
    \ return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return\
    \ n;\n        return Fib(n - 1) + Fib(n - 2);\n    }\n\n    // Return n-th Fibonacci\
    \ number.\n    // >>> Fib2((10L))\n    // (55L)\n    // >>> Fib2((1L))\n    //\
    \ (1L)\n    // >>> Fib2((8L))\n    // (21L)\n    public static long Fib2(long\
    \ n) {\n        long[] a = new long[n + 1];\n        a[0] = 0;\n        a[1] =\
    \ 1;\n        for (int i = 2; i <= n; i++)\n            a[i] = a[i - 1] + a[i\
    \ - 2];\n        return a[n];\n    }\n\n    // Return n-th Fibonacci number.\n\
    \    // >>> Fib3((10L))\n    // (55L)\n    // >>> Fib3((1L))\n    // (1L)\n  \
    \  // >>> Fib3((8L))\n    // (21L)\n    public static long Fib3(long n) {\n  \
    \      long[] a = new long[n + 1];\n        a[0] = 0;\n        a[1] = 1;\n   \
    \     for (int i = 2; i <= n; i++)\n            a[i] = a[i - 1] + a[i - 2];\n\
    \        return a[n];\n    }\n\n    // Return n-th Fibonacci number.\n    // >>>\
    \ Fib4((10L))\n    // (55L)\n    // >>> Fib4((1L))\n    // (1L)\n    // >>> Fib4((8L))\n\
    \    // (21L)\n    public static long Fib4(long n) {\n        long[] a = new long[n\
    \ + 1];\n        a[0] = 0;\n        a[1] = 1;\n        for (int i = 2; i <= n;\
    \ i++)\n            a[i] = a[i - 1] + a[i - 2];\n        return a[n];\n    }\n\
    \n    // Return n-th Fibonacci number.\n    // >>> Fib5((10L))\n    // (55L)\n",
  "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "     \
    \   if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if\
    \ (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n\
    \ < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2)\
    \ return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return\
    \ n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n\
    \        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n   \
    \     return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n      \
    \  return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return\
    \ Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n\
    \ - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1)\
    \ + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n\
    \ - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);",
  "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "     \
    \   if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if\
    \ (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n\
    \ < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2)\
    \ return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return\
    \ n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n\
    \        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n   \
    \     return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n      \
    \  return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return\
    \ Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n\
    \ - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1)\
    \ + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n\
    \ - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);",
  "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "     \
    \   if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if\
    \ (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n\
    \ < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2)\
    \ return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return\
    \ n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n\
    \        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n   \
    \     return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n      \
    \  return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return\
    \ Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n\
    \ - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1)\
    \ + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n\
    \ - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);",
  "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "     \
    \   if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if\
    \ (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n\
    \ < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2)\
    \ return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return\
    \ n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n\
    \        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n   \
    \     return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n      \
    \  return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return\
    \ Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n\
    \ - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1)\
    \ + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n\
    \ - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);",
  "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "     \
    \   if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if\
    \ (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n\
    \ < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2)\
    \ return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return\
    \ n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n\
    \        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n   \
    \     return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n      \
    \  return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return\
    \ Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n\
    \ - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1)\
    \ + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n\
    \ - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);",
  "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "     \
    \   if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if\
    \ (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n\
    \ < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2)\
    \ return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return\
    \ n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n\
    \        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n   \
    \     return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n      \
    \  return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return\
    \ Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n\
    \ - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1)\
    \ + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n\
    \ - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);",
  "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "     \
    \   if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if\
    \ (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n\
    \ < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2)\
    \ return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return\
    \ n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n\
    \        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n   \
    \     return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n      \
    \  return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return\
    \ Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n\
    \ - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1)\
    \ + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n\
    \ - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);",
  "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "     \
    \   if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if\
    \ (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n\
    \ < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2)\
    \ return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return\
    \ n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n\
    \        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n   \
    \     return Fib(n - 1) + Fib(n - 2);\n    }\n\n    // Return n-th Fibonacci number.\n\
    \    // >>> Fib2((10L))\n    // (55L)\n    // >>> Fib2((1L))\n    // (1L)\n  \
    \  // >>> Fib2((8L))\n    // (21L)\n    public static long Fib2(long n) {\n  \
    \      long[] a = new long[n + 1];\n        a[0] = 0;\n        a[1] = 1;\n   \
    \     for (int i = 2; i <= n; i++)\n            a[i] = a[i - 1] + a[i - 2];\n\
    \        return a[n];\n    }\n\n    // Return n-th Fibonacci number.\n    // >>>\
    \ Fib3((10L))\n    // (55L)\n    // >>> Fib3((1L))\n    // (1L)\n    // >>> Fib3((8L))\n\
    \    // (21L)\n    public static long Fib3(long n) {\n        long[] a = new long[n\
    \ + 1];\n        a[0] = 0;\n        a[1] = 1;\n        for (int i = 2; i <= n;\
    \ i++) {\n            long p = a[i - 1] + a[i - 2];\n            a[i] = p;\n \
    \       }\n        return a[n];\n    }\n\n    // Return n-th Fibonacci number.\n\
    \    // >>> Fib4((10L))\n    // (55L)\n    // >>> Fib4((1L))\n    // (1L)\n  \
    \  // >>> Fib4((8L))\n    // (21L)\n    public static long Fib4(long n) {\n  \
    \      long[] a = new long[n + 1];\n        a[0] = 0;\n        a[1] = 1;\n   \
    \     for (int i = 2; i <= n; i++) {\n            long p = a[i - 1] + a[i - 2];\n\
    \            a[i] = p;\n            a[i] += a[i - 1];\n        }\n        return\
    \ a[", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);",
  "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "     \
    \   if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if\
    \ (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);\n    }\n\n    //\
    \ Return n-th Fibonacci number.\n    // >>> Fib2((10L))\n    // (55L)\n    //\
    \ >>> Fib2((1L))\n    // (1L)\n    // >>> Fib2((8L))\n    // (21L)\n    public\
    \ static long Fib2(long n) {\n        if (n < 2) return n;\n        long[] a =\
    \ new long[n + 1];\n        a[0] = 0;\n        a[1] = 1;\n        for (int i =\
    \ 2; i <= n; i++) {\n            a[i] = a[i - 1] + a[i - 2];\n        }\n    \
    \    return a[n];\n    }\n\n    // Return n-th Fibonacci number.\n    // >>> Fib3((10L))\n\
    \    // (55L)\n    // >>> Fib3((1L))\n    // (1L)\n    // >>> Fib3((8L))\n   \
    \ // (21L)\n    public static long Fib3(long n) {\n        if (n < 2) return n;\n\
    \        long[] a = new long[n + 1];\n        a[0] = 0;\n        a[1] = 1;\n \
    \       for (int i = 2; i <= n; i++) {\n            a[i] = a[i - 1] + a[i - 2];\n\
    \        }\n        return a[n];\n    }\n\n    // Return n-th Fibonacci number.\n\
    \    // >>> Fib4((10L))\n    // (55L)\n    // >>> Fib4((1L))\n    // (1L)\n  \
    \  // >>> Fib4((8L))\n    // (21L)\n    public static long Fib4(long n) {\n  \
    \      if (n < 2) return n;\n        long[] a = new long[n + 1];\n        a[0]\
    \ = 0;\n        a[1] = 1;\n        for (int i = 2; i <= n; i++) {\n          \
    \  a[i] = a[i - 1] + a[i -", "        if (n < 2) return n;\n        return Fib(n\
    \ - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1)\
    \ + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n\
    \ - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);",
  "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "     \
    \   if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if\
    \ (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n\
    \ < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2)\
    \ return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return\
    \ n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n\
    \        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n   \
    \     return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n      \
    \  return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return\
    \ Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n\
    \ - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1)\
    \ + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n\
    \ - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);",
  "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "     \
    \   if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);\n    }\n\n \
    \   // Return n-th Fibonacci number using recursion.\n    // >>> FibRec((10L))\n\
    \    // (55L)\n    // >>> FibRec((1L))\n    // (1L)\n    // >>> FibRec((8L))\n\
    \    // (21L)\n    public static long FibRec(long n) {\n        if (n < 2) return\
    \ n;\n        return FibRec(n - 1) + FibRec(n - 2);\n    }\n\n    // Return n-th\
    \ Fibonacci number using loop.\n    // >>> FibLoop((10L))\n    // (55L)\n    //\
    \ >>> FibLoop((1L))\n    // (1L)\n    // >>> FibLoop((8L))\n    // (21L)\n   \
    \ public static long FibLoop(long n) {\n        long result = 0;\n        if (n\
    \ < 2) return n;\n        for (int i = 0; i < n - 1; i++) {\n            result\
    \ += Fib(i);\n        }\n        return result;\n    }\n\n    // Return n-th Fibonacci\
    \ number using loop and recursion.\n    // >>> FibLoopRec((10L))\n    // (55L)\n\
    \    // >>> FibLoopRec((1L))\n    // (1L)\n    // >>> FibLoopRec((8L))\n    //\
    \ (21L)\n    public static long FibLoopRec(long n) {\n        long result = 0;\n\
    \        if (n < 2) return n;\n        for (int i = 0; i < n - 1; i++) {\n   \
    \         result += FibRec(i);\n        }\n        return result;\n    }\n\n \
    \   // Return n-th Fibonacci number using loop and recursion.\n    // >>> FibLoopRec2((10L))\n\
    \    // (55L)\n    // >>> FibLoopRec2((1L))\n    // (1L)\n    // >>> FibLoopRec2((8L))\n\
    \    // (21L)\n    public static long FibLoopRec2(long n) {\n        long result\
    \ = 0;\n        if (n <", "        if (n < 2) return n;\n        return Fib(n\
    \ - 1) + Fib(n - 2);\n    }\n\n    // Return n-th Fibonacci number using recursion.\n\
    \    // >>> FibRec((10L))\n    // (55L)\n    // >>> FibRec((1L))\n    // (1L)\n\
    \    // >>> FibRec((8L))\n    // (21L)\n    public static long FibRec(long n)\
    \ {\n        if (n < 2) return n;\n        return FibRec(n - 1) + FibRec(n - 2);\n\
    \    }\n\n    // Return n-th Fibonacci number using iteration.\n    // >>> FibIter((10L))\n\
    \    // (55L)\n    // >>> FibIter((1L))\n    // (1L)\n    // >>> FibIter((8L))\n\
    \    // (21L)\n    public static long FibIter(long n) {\n        long result =\
    \ 0;\n        for (int i = 0; i < n; i++) {\n            result += Fib(i);\n \
    \       }\n        return result;\n    }\n\n    // Return n-th Fibonacci number\
    \ using loop.\n    // >>> FibLoop((10L))\n    // (55L)\n    // >>> FibLoop((1L))\n\
    \    // (1L)\n    // >>> FibLoop((8L))\n    // (21L)\n    public static long FibLoop(long\
    \ n) {\n        long result = 0;\n        for (long i = 0; i < n; i++) {\n   \
    \         result += Fib(i);\n        }\n        return result;\n    }\n\n    //\
    \ Return n-th Fibonacci number using recursion.\n    // >>> FibRec2((10L))\n \
    \   // (55L)\n    // >>> FibRec2((1L))\n    // (1L)\n    // >>> FibRec2((8L))\n\
    \    // (21L)\n    public static long FibRec2(long n) {\n        if (n < 2) return\
    \ n;\n        return FibRec2(n - 1) + FibRec2(n - 2);\n    }\n\n    // Return\
    \ n-th Fibonacci number using iteration.\n    // >>> Fib", "        if (n < 2)\
    \ return n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return\
    \ n;\n        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n\
    \        return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n   \
    \     return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n      \
    \  return Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return\
    \ Fib(n - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n\
    \ - 1) + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1)\
    \ + Fib(n - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n\
    \ - 2);", "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);",
  "        if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);", "     \
    \   if (n < 2) return n;\n        return Fib(n - 1) + Fib(n - 2);\n    }\n\n \
    \   // Return n-th Fibonacci number.\n    // >>> Fib2((10L))\n    // (55L)\n \
    \   // >>> Fib2((1L))\n    // (1L)\n    // >>> Fib2((8L))\n    // (21L)\n    public\
    \ static long Fib2(long n) {\n        long[] a = new long[n + 1];\n        a[0]\
    \ = 0;\n        a[1] = 1;\n        for (int i = 2; i <= n; i++)\n            a[i]\
    \ = a[i - 1] + a[i - 2];\n        return a[n];\n    }\n\n    // Return n-th Fibonacci\
    \ number.\n    // >>> Fib3((10L))\n    // (55L)\n    // >>> Fib3((1L))\n    //\
    \ (1L)\n    // >>> Fib3((8L))\n    // (21L)\n    public static long Fib3(long\
    \ n) {\n        long[] a = new long[n + 1];\n        a[0] = 0;\n        a[1] =\
    \ 1;\n        for (int i = 2; i <= n; i++)\n            a[i] = a[i - 1] + a[i\
    \ - 2];\n        return a[n];\n    }\n\n    // Return n-th Fibonacci number.\n\
    \    // >>> Fib4((10L))\n    // (55L)\n    // >>> Fib4((1L))\n    // (1L)\n  \
    \  // >>> Fib4((8L))\n    // (21L)\n    public static long Fib4(long n) {\n  \
    \      long[] a = new long[n + 1];\n        a[0] = 0;\n        a[1] = 1;\n   \
    \     for (int i = 2; i <= n; i++)\n            a[i] = a[i - 1] + a[i - 2];\n\
    \        return a[n];\n    }\n\n    // Return n-th Fibonacci number.\n    // >>>\
    \ Fib5((10L))\n    // (55L)\n", "        if (n < 2) return n;\n        return\
    \ Fib(n - 1) + Fib(n - 2);"]
stop_tokens:
- "\n    }\n"
