name: HumanEval_120_maximum
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list arr of integers and a positive integer k, return\
  \ a sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
  \ Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
  \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n\
  \    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,\
  \ (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
  \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
  \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
  \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
  \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
  \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
  \ Maximum(List<long> arr, long k) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
  \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
  \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
  \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
  \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
  \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
  \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
  \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
  \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
  \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
  \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
  \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
  \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
  \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
  \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
  \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
  \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
  \    }\n\n}\n"
completions: ["        // Write your code here\n        if (arr.Count < k) {\n   \
    \         throw new Exception(\"Invalid Input\");\n        }\n        List<long>\
    \ result = new List<long>();\n        int start = 0;\n        int end = arr.Count\
    \ - 1;\n        while (start < end) {\n            int mid = (start + end) / 2;\n\
    \            if (arr[mid] < arr[end]) {\n                end = mid;\n        \
    \    }\n            else {\n                start = mid + 1;\n            }\n\
    \        }\n        if (arr[start] < arr[end]) {\n            result.Add(arr[start]);\n\
    \        }\n        else {\n            result.Add(arr[end]);\n        }\n   \
    \     for (int i = start + 1; i < arr.Count; i++) {\n            if (arr[i] >\
    \ arr[start]) {\n                result.Add(arr[i]);\n            }\n        }\n\
    \        return result;", "        // Write your code here\n        if (arr.Count\
    \ < k)\n            return arr;\n        long[] max = new long[k];\n        for\
    \ (int i = 0; i < k; i++)\n            max[i] = arr[i];\n        for (int i =\
    \ k; i < arr.Count; i++) {\n            if (arr[i] > max[k - 1])\n           \
    \     max[k - 1] = arr[i];\n            else {\n                for (int j = k\
    \ - 1; j >= 0; j--) {\n                    if (max[j] < arr[i])\n            \
    \            max[j] = arr[i];\n                    else\n                    \
    \    break;\n                }\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        for (int i = 0; i < k; i++)\n            result.Add(max[i]);\n\
    \        return result;", "        // Write your code here\n        if (arr.Count\
    \ < k)\n            return arr;\n        long[] max = new long[k];\n        for\
    \ (int i = 0; i < k; i++)\n            max[i] = arr[i];\n        for (int i =\
    \ k; i < arr.Count; i++) {\n            if (arr[i] > max[0]) {\n             \
    \   max[0] = arr[i];\n                for (int j = 1; j < k; j++)\n          \
    \          max[j] = max[j - 1];\n                max[k - 1] = arr[i];\n      \
    \      }\n            else if (arr[i] > max[k - 1]) {\n                max[k -\
    \ 1] = arr[i];\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++)\n            result.Add(max[i]);\n      \
    \  return result;", "        if (arr.Count < k)\n            return arr;\n   \
    \     long[] max = new long[k];\n        for (int i = 0; i < k; i++)\n       \
    \     max[i] = arr[i];\n        for (int i = k; i < arr.Count; i++) {\n      \
    \      if (arr[i] > max[k - 1])\n                max[k - 1] = arr[i];\n      \
    \      else if (arr[i] > max[0])\n                max[0] = arr[i];\n        }\n\
    \        List<long> result = new List<long>();\n        for (int i = 0; i < k;\
    \ i++)\n            result.Add(max[i]);\n        return result;", "        //\
    \ Write your code here\n        if (arr == null || arr.Count == 0 || k < 0 ||\
    \ k > arr.Count)\n            return new List<long>();\n        if (k == 1)\n\
    \            return arr;\n        long[] arr_arr = arr.ToArray();\n        Arrays.Sort(arr_arr);\n\
    \        long[] max_arr = new long[k];\n        for (int i = 0; i < k; i++)\n\
    \            max_arr[i] = arr_arr[i];\n        return max_arr;", "        if (arr\
    \ == null || arr.Count == 0 || k <= 0)\n            return new List<long>();\n\
    \        if (k > arr.Count)\n            return arr;\n        long[] arr2 = arr.ToArray();\n\
    \        long[] max = new long[k];\n        for (int i = 0; i < k; i++)\n    \
    \        max[i] = arr2[i];\n        for (int i = k; i < arr.Count; i++) {\n  \
    \          if (arr2[i] > max[k - 1]) {\n                max[k - 1] = arr2[i];\n\
    \                for (int j = k - 1; j > 0; j--) {\n                    if (max[j]\
    \ < max[j - 1])\n                        max[j - 1] = max[j];\n              \
    \      else\n                        break;\n                }\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        for (int i\
    \ = 0; i < k; i++)\n            result.Add(max[i]);\n        return result;",
  "        // write your code here\n        if (arr == null || arr.Count == 0 || k\
    \ <= 0)\n            return new List<long>();\n        if (k == 1)\n         \
    \   return arr;\n        long[] arr2 = arr.ToArray();\n        long[] arr3 = new\
    \ long[k];\n        arr3[0] = arr2[0];\n        for (int i = 1; i < k; i++) {\n\
    \            arr3[i] = arr2[i];\n        }\n        for (int i = k - 1; i < arr2.Length;\
    \ i++) {\n            if (arr2[i] > arr3[k - 1]) {\n                arr3[k - 1]\
    \ = arr2[i];\n            }\n        }\n        for (int i = k - 1; i > 0; i--)\
    \ {\n            if (arr3[i] > arr3[i - 1]) {\n                long temp = arr3[i\
    \ - 1];\n                arr3[i - 1] = arr3[i];\n                arr3[i] = temp;\n\
    \            }\n        }\n        return arr3;", "        // Write your code\
    \ here\n        if (arr == null || arr.Count == 0 || k <= 0)\n            return\
    \ new List<long>();\n        long[] arr_ = arr.ToArray();\n        long[] max_arr\
    \ = new long[k];\n        long max_val = arr_[0];\n        for (int i = 0; i <\
    \ k; i++) {\n            max_arr[i] = max_val;\n        }\n        for (int i\
    \ = 1; i < arr.Count; i++) {\n            if (arr_[i] > max_val) {\n         \
    \       max_val = arr_[i];\n                for (int j = 0; j < k; j++) {\n  \
    \                  max_arr[j] = arr_[i];\n                }\n            }\n \
    \       }\n        return List.of(max_arr);", "        int n = arr.Count;\n  \
    \      if (n == 0)\n            return new List<long>(new long[] {});\n      \
    \  if (k == 1)\n            return arr.OrderByDescending();\n        if (k > n)\n\
    \            return arr.OrderByDescending();\n        if (k == n)\n          \
    \  return arr.OrderByDescending();\n        int[] max = new int[n];\n        for\
    \ (int i = 0; i < n; i++) {\n            max[i] = i;\n        }\n        for (int\
    \ i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n      \
    \          if (arr[i] > arr[j]) {\n                    max[i] = j;\n         \
    \       }\n            }\n        }\n        List<long> res = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            res.Add(arr[max[i]]);\n  \
    \      }\n        return res;", "        // Write your code here\n        if (arr.Count\
    \ < k) {\n            return arr;\n        }\n        long[] max = new long[k];\n\
    \        for (int i = 0; i < k; i++) {\n            max[i] = arr[i];\n       \
    \ }\n        for (int i = k; i < arr.Count; i++) {\n            if (arr[i] > max[k\
    \ - 1]) {\n                max[k - 1] = arr[i];\n            }\n            else\
    \ {\n                for (int j = k - 1; j >= 0; j--) {\n                    if\
    \ (arr[i] > max[j]) {\n                        max[j] = arr[i];\n            \
    \        }\n                }\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(max[i]);\n\
    \        }\n        return result;", "        int n = arr.Count;\n        if (n\
    \ == 0) return arr;\n        if (k == 1) return arr;\n        if (k > n) return\
    \ arr;\n        int[] max = new int[n];\n        int[] min = new int[n];\n   \
    \     for (int i = 0; i < n; i++) {\n            min[i] = arr[i];\n          \
    \  max[i] = arr[i];\n        }\n        for (int i = 1; i < k; i++) {\n      \
    \      for (int j = 0; j < n; j++) {\n                if (arr[j] > max[j]) max[j]\
    \ = arr[j];\n                if (arr[j] < min[j]) min[j] = arr[j];\n         \
    \   }\n        }\n        List<long> result = new List<long>();\n        for (int\
    \ i = 0; i < n; i++) {\n            if (max[i] == min[i]) continue;\n        \
    \    result.Add(max[i]);\n        }\n        return result;", "        if (arr\
    \ == null || arr.Count < k) {\n            throw new IllegalArgumentException(\"\
    Invalid input\");\n        }\n        if (k == 0) {\n            return new List<long>();\n\
    \        }\n        if (k == 1) {\n            return arr;\n        }\n      \
    \  if (k == 2) {\n            return new List<long>(new long[]{arr[0], arr[1]});\n\
    \        }\n        if (k == 3) {\n            return new List<long>(new long[]{arr[0],\
    \ arr[1], arr[2]});\n        }\n        if (k == 4) {\n            return new\
    \ List<long>(new long[]{arr[0], arr[1], arr[2], arr[3]});\n        }\n       \
    \ if (k == 5) {\n            return new List<long>(new long[]{arr[0], arr[1],\
    \ arr[2], arr[3], arr[4]});\n        }\n        if (k == 6) {\n            return\
    \ new List<long>(new long[]{arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]});\n\
    \        }\n        if (k == 7) {\n            return new List<long>(new long[]{arr[0],\
    \ arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]});\n        }\n        if (k\
    \ == 8) {\n            return new List<long>(new long[]{arr[0], arr[1], arr[2],\
    \ arr[3], arr[4], arr[5], arr[6], arr[7]});\n        }\n        if (k == 9) {\n\
    \            return new List<long>(new long[]{arr[0], arr[1], arr[2], arr[3],\
    \ arr[4], arr[5], arr[6], arr[7], arr[8]});\n        }\n        if (k == 10) {\n\
    \            return new List<long>(new long[]{arr[0], arr[1], arr[2], arr[3],\
    \ arr[4], arr[5], arr[6], arr[7], arr[8], arr[9]});\n        }\n        if (",
  "        // Write your code here\n        if (arr.Count < k) {\n            throw\
    \ new Exception(\"Invalid Input\");\n        }\n        if (k == 1) {\n      \
    \      return arr;\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(arr[i]);\n    \
    \    }\n        for (int i = k; i < arr.Count; i++) {\n            if (arr[i]\
    \ > result[k - 1]) {\n                result[k - 1] = arr[i];\n            }\n\
    \        }\n        return result;", "        if (arr == null || arr.Count ==\
    \ 0) return new List<long>(new long[]{});\n        if (k > arr.Count) return arr;\n\
    \        if (k == 1) return arr;\n        if (k == 2) return new List<long>(new\
    \ long[]{arr[0], arr[1]});\n        if (k == 3) return new List<long>(new long[]{arr[0],\
    \ arr[1], arr[2]});\n        if (k == 4) return new List<long>(new long[]{arr[0],\
    \ arr[1], arr[2], arr[3]});\n        if (k == 5) return new List<long>(new long[]{arr[0],\
    \ arr[1], arr[2], arr[3], arr[4]});\n        if (k == 6) return new List<long>(new\
    \ long[]{arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]});\n        if (k == 7)\
    \ return new List<long>(new long[]{arr[0], arr[1], arr[2], arr[3], arr[4], arr[5],\
    \ arr[6]});\n        if (k == 8) return new List<long>(new long[]{arr[0], arr[1],\
    \ arr[2], arr[3], arr[4], arr[5], arr[6], arr[7]});\n        if (k == 9) return\
    \ new List<long>(new long[]{arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6],\
    \ arr[7], arr[8]});\n        if (k == 10) return new List<long>(new long[]{arr[0],\
    \ arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9]});\n\
    \        if (k == 11) return new List<long>(new long[]{arr[0], arr[1], arr[2],\
    \ arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10]});\n       \
    \ if (k == 12) return new List<long>(", "        // write your code here\n   \
    \     if (arr == null || arr.Count == 0 || k < 1 || k > arr.Count) {\n       \
    \     return new List<long>();\n        }\n        long[] arr_ = arr.ToArray();\n\
    \        long[] max_ = new long[k];\n        for (int i = 0; i < k; i++) {\n \
    \           max_[i] = arr_[i];\n        }\n        for (int i = k; i < arr.Count;\
    \ i++) {\n            if (arr_[i] > max_[0]) {\n                max_[0] = arr_[i];\n\
    \                for (int j = 1; j < k; j++) {\n                    max_[j] =\
    \ max_[j - 1];\n                }\n                max_[k - 1] = arr_[i];\n  \
    \          }\n        }\n        return List.of(max_);", "        // Write your\
    \ code here\n        int n = arr.Count;\n        if (n == 0)\n            return\
    \ arr;\n        if (k == 1)\n            return arr;\n        if (k > n)\n   \
    \         return arr;\n        int[] dp = new int[n];\n        for (int i = 0;\
    \ i < n; i++)\n            dp[i] = i;\n        for (int i = 0; i < n; i++) {\n\
    \            for (int j = i + 1; j < n; j++) {\n                if (arr[i] > arr[j])\
    \ {\n                    dp[j] = j;\n                }\n                else {\n\
    \                    dp[j] = i;\n                }\n            }\n        }\n\
    \        int[] max = new int[k];\n        for (int i = 0; i < k; i++) {\n    \
    \        max[i] = dp[i];\n        }\n        for (int i = k; i < n; i++) {\n \
    \           if (arr[max[k - 1]] < arr[i]) {\n                max[k] = i;\n   \
    \             k++;\n            }\n        }\n        List<long> ans = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            ans.Add(arr[max[i]]);\n  \
    \      }\n        return ans;", "        // Write your code here\n        if (arr\
    \ == null || arr.Count == 0 || k < 0)\n            return new List<long>();\n\
    \        if (k == 0)\n            return arr;\n        if (k == 1)\n         \
    \   return arr.OrderByDescending();\n        long[] max = new long[k];\n     \
    \   for (int i = 0; i < k; i++)\n            max[i] = arr[i];\n        for (int\
    \ i = k; i < arr.Count; i++) {\n            if (arr[i] > max[k - 1]) {\n     \
    \           max[k - 1] = arr[i];\n                for (int j = k - 1; j > 0; j--)\
    \ {\n                    if (max[j] < max[j - 1]) {\n                        long\
    \ temp = max[j];\n                        max[j] = max[j - 1];\n             \
    \           max[j - 1] = temp;\n                    }\n                }\n   \
    \         }\n        }\n        return List.of(max);", "        // Write your\
    \ code here\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        if (k == 1) {\n            return arr.OrderByDescending();\n\
    \        }\n        if (k > arr.Count) {\n            return arr;\n        }\n\
    \        List<long> result = new List<long>();\n        for (int i = 0; i < k;\
    \ i++) {\n            result.Add(arr.First());\n            arr = arr.RemoveAt(0);\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  if (arr == null || arr.Count == 0 || k <= 0) {\n            return new List<long>();\n\
    \        }\n        long[] arr_arr = arr.ToArray();\n        Arrays.Sort(arr_arr);\n\
    \        long[] max_arr = new long[k];\n        for (int i = 0; i < k; i++) {\n\
    \            max_arr[i] = arr_arr[i];\n        }\n        return max_arr;", " \
    \       // Write your code here\n        int n = arr.Count;\n        if (n ==\
    \ 0)\n            return new List<long>();\n        if (k > n)\n            return\
    \ arr;\n        int[] max = new int[n];\n        for (int i = 0; i < n; i++)\n\
    \            max[i] = i;\n        for (int i = 0; i < n; i++) {\n            int\
    \ max_index = i;\n            for (int j = i + 1; j < n; j++) {\n            \
    \    if (arr[max[j]] < arr[max_index])\n                    max_index = j;\n \
    \           }\n            if (max[i] != max_index) {\n                int temp\
    \ = max[i];\n                max[i] = max[max_index];\n                max[max_index]\
    \ = temp;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++)\n            result.Add(arr[max[i]]);\n \
    \       return result;", "        if (arr == null || arr.Count == 0 || k < 1 ||\
    \ k > arr.Count)\n            return new List<long>();\n        long[] arr2 =\
    \ arr.ToArray();\n        long[] max = new long[k];\n        for (int i = 0; i\
    \ < k; i++)\n            max[i] = arr2[i];\n        for (int i = k; i < arr.Count;\
    \ i++) {\n            if (arr2[i] > max[k - 1])\n                max[k - 1] =\
    \ arr2[i];\n            else {\n                for (int j = k - 1; j >= 1; j--)\
    \ {\n                    if (max[j] < max[j - 1]) {\n                        long\
    \ temp = max[j];\n                        max[j] = max[j - 1];\n             \
    \           max[j - 1] = temp;\n                    }\n                }\n   \
    \             max[0] = arr2[i];\n            }\n        }\n        return List.Create(max);",
  "        // Write your code here\n        long[] arr_arr = arr.ToArray();\n    \
    \    long[] max_arr = new long[k];\n        for (int i = 0; i < k; i++) {\n  \
    \          max_arr[i] = arr_arr[i];\n        }\n        for (int i = k; i < arr_arr.Length;\
    \ i++) {\n            for (int j = 0; j < k; j++) {\n                if (arr_arr[i]\
    \ > max_arr[j]) {\n                    max_arr[j] = arr_arr[i];\n            \
    \    }\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(max_arr[i]);\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  long[] arr_arr = arr.ToArray();\n        long[] max_arr = new long[k];\n  \
    \      long max_val = arr_arr[0];\n        for (int i = 0; i < k; i++) {\n   \
    \         max_arr[i] = max_val;\n            max_val = Math.Max(max_val, arr_arr[i]);\n\
    \        }\n        for (int i = k; i < arr_arr.Length; i++) {\n            max_arr[i\
    \ % k] = Math.Max(max_arr[i % k], arr_arr[i]);\n        }\n        List<long>\
    \ result = new List<long>();\n        for (int i = 0; i < k; i++) {\n        \
    \    result.Add(max_arr[i]);\n        }\n        return result;", "        //\
    \ Write your code here\n        if (arr.Count < k)\n            return arr;\n\
    \        long[] max = new long[k];\n        for (int i = 0; i < k; i++)\n    \
    \        max[i] = arr[i];\n        for (int i = k; i < arr.Count; i++) {\n   \
    \         if (arr[i] > max[k - 1]) {\n                max[k - 1] = arr[i];\n \
    \               for (int j = k - 1; j > 0; j--) {\n                    if (max[j]\
    \ < max[j - 1]) {\n                        long temp = max[j];\n             \
    \           max[j] = max[j - 1];\n                        max[j - 1] = temp;\n\
    \                    }\n                }\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        for (int i = 0; i < k; i++)\n          \
    \  result.Add(max[i]);\n        return result;", "        if (arr == null || arr.Count\
    \ == 0 || k <= 0)\n            return new List<long>();\n        if (k > arr.Count)\n\
    \            return arr;\n        long[] arr2 = arr.ToArray();\n        Arrays.Sort(arr2);\n\
    \        int k2 = (int) k;\n        int[] k2arr = new int[k2];\n        for (int\
    \ i = 0; i < k2; i++)\n            k2arr[i] = i;\n        int[] k2arr2 = new int[k2];\n\
    \        for (int i = 0; i < k2; i++)\n            k2arr2[i] = i;\n        int[]\
    \ k2arr3 = new int[k2];\n        for (int i = 0; i < k2; i++)\n            k2arr3[i]\
    \ = i;\n        int[] k2arr4 = new int[k2];\n        for (int i = 0; i < k2; i++)\n\
    \            k2arr4[i] = i;\n        int[] k2arr5 = new int[k2];\n        for\
    \ (int i = 0; i < k2; i++)\n            k2arr5[i] = i;\n        int[] k2arr6 =\
    \ new int[k2];\n        for (int i = 0; i < k2; i++)\n            k2arr6[i] =\
    \ i;\n        int[] k2arr7 = new int[k2];\n        for (int i = 0; i < k2; i++)\n\
    \            k2arr7[i] = i;\n        int[] k2arr8 = new int[k2];\n        for\
    \ (int i = 0; i < k2; i++)\n            k2arr8[i] = i;\n        int[] k2arr9 =\
    \ new int[k2];\n        for (int i = 0; i < k2; i++)\n            k2arr9[i] =\
    \ i;\n        int[] k2arr10 = new int[k2];\n        for (int i = 0; i < k2; i++)\n\
    \            k2arr10[i] = i;\n        int[] k2arr11 = new", "        if (arr.Count\
    \ < k)\n            return arr;\n        long[] max = new long[k];\n        for\
    \ (int i = 0; i < k; i++)\n            max[i] = arr[i];\n        for (int i =\
    \ k; i < arr.Count; i++) {\n            if (arr[i] > max[k - 1]) {\n         \
    \       max[k - 1] = arr[i];\n                for (int j = k - 1; j > 0; j--)\
    \ {\n                    if (max[j] < max[j - 1])\n                        max[j\
    \ - 1] = max[j];\n                    else\n                        break;\n \
    \               }\n            }\n        }\n        return List.of(max);", " \
    \       // Write your code here\n        if (arr == null || arr.Count == 0 ||\
    \ k < 1)\n            return new List<long>();\n        long[] arr_ = arr.ToArray();\n\
    \        long[] max_ = new long[k];\n        long max_index = 0;\n        for\
    \ (int i = 0; i < arr_.Length; i++) {\n            if (arr_[i] > max_[max_index])\
    \ {\n                max_index = 0;\n                max_[max_index] = arr_[i];\n\
    \            }\n            else if (arr_[i] == max_[max_index]) {\n         \
    \       max_index++;\n                max_[max_index] = arr_[i];\n           \
    \ }\n        }\n        return arr.Select(x => max_[(int)x]);", "        if (arr.Count\
    \ < k)\n            return arr;\n        long[] max = new long[k];\n        for\
    \ (int i = 0; i < k; i++)\n            max[i] = arr[i];\n        for (int i =\
    \ k; i < arr.Count; i++) {\n            if (arr[i] > max[k - 1]) {\n         \
    \       max[k - 1] = arr[i];\n                for (int j = k - 1; j > 0; j--)\n\
    \                    max[j] = max[j - 1];\n                max[0] = arr[i];\n\
    \            }\n        }\n        return List.of(max);", "        int[] max =\
    \ new int[k];\n        for (int i = 0; i < k; i++)\n            max[i] = i;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            int index = arr[i]\
    \ - 1;\n            if (max[index] < i)\n                max[index] = i;\n   \
    \     }\n        List<long> result = new List<long>();\n        for (int i = 0;\
    \ i < k; i++)\n            result.Add(arr[max[i]]);\n        return result;",
  "        if (arr == null || arr.Count == 0 || k < 1 || k > arr.Count)\n        \
    \    return new List<long>();\n        if (k == 1)\n            return arr;\n\
    \        long[] max = new long[k];\n        max[0] = arr[0];\n        for (int\
    \ i = 1; i < k; i++) {\n            max[i] = arr[i];\n            for (int j =\
    \ 0; j < i; j++) {\n                if (max[j] < max[i])\n                   \
    \ max[i] = max[j];\n            }\n        }\n        List<long> result = new\
    \ List<long>();\n        for (int i = 0; i < k; i++)\n            result.Add(max[i]);\n\
    \        return result;", "        if (k < 1 || k > arr.Count)\n            throw\
    \ new Exception(\"Invalid input\");\n        if (k == 1)\n            return arr;\n\
    \        long[] max = new long[k];\n        for (int i = 0; i < k; i++)\n    \
    \        max[i] = arr[i];\n        for (int i = k; i < arr.Count; i++) {\n   \
    \         if (arr[i] > max[k - 1])\n                max[k - 1] = arr[i];\n   \
    \         else if (arr[i] > max[k - 2])\n                max[k - 2] = arr[i];\n\
    \            else if (arr[i] > max[k - 3])\n                max[k - 3] = arr[i];\n\
    \            else if (arr[i] > max[k - 4])\n                max[k - 4] = arr[i];\n\
    \            else if (arr[i] > max[k - 5])\n                max[k - 5] = arr[i];\n\
    \            else if (arr[i] > max[k - 6])\n                max[k - 6] = arr[i];\n\
    \            else if (arr[i] > max[k - 7])\n                max[k - 7] = arr[i];\n\
    \            else if (arr[i] > max[k - 8])\n                max[k - 8] = arr[i];\n\
    \            else if (arr[i] > max[k - 9])\n                max[k - 9] = arr[i];\n\
    \            else if (arr[i] > max[k - 10])\n                max[k - 10] = arr[i];\n\
    \            else if (arr[i] > max[k - 11])\n                max[k - 11] = arr[i];\n\
    \            else if (arr[i] > max[k - 12])\n                max[k - 12] = arr[i];\n\
    \            else if (arr[i] > max[k - 13])\n                max[k - 13] = arr[i];\n\
    \            else if (arr[i] > max[k - 14])\n                max[k - 14] = arr[i];\n\
    \            else if (arr[i] > max[k - 15])\n", "        // Write your code here\n\
    \        int n = arr.Count;\n        if (n == 0)\n            return arr;\n  \
    \      if (k > n)\n            k = n;\n        int[] max = new int[k];\n     \
    \   for (int i = 0; i < k; i++)\n            max[i] = i;\n        for (int i =\
    \ 0; i < n; i++) {\n            int index = max[0];\n            for (int j =\
    \ 1; j < k; j++) {\n                if (arr[i] > arr[max[j]])\n              \
    \      index = j;\n            }\n            max[index] = i;\n        }\n   \
    \     List<long> result = new List<long>();\n        for (int i = 0; i < k; i++)\n\
    \            result.Add(arr[max[i]]);\n        return result;", "        // Write\
    \ your code here\n        if (arr.Count < k) {\n            throw new Exception(\"\
    Invalid Input\");\n        }\n        long[] max = new long[k];\n        for (int\
    \ i = 0; i < k; i++) {\n            max[i] = arr[i];\n        }\n        for (int\
    \ i = k; i < arr.Count; i++) {\n            if (arr[i] > max[0]) {\n         \
    \       max[0] = arr[i];\n            }\n            for (int j = 1; j < k; j++)\
    \ {\n                if (arr[i] > max[j]) {\n                    max[j] = arr[i];\n\
    \                }\n            }\n        }\n        List<long> result = new\
    \ List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(max[i]);\n\
    \        }\n        return result;", "        // write your code here\n      \
    \  if (arr == null || arr.Count == 0 || k > arr.Count)\n            return new\
    \ List<long>();\n        if (k == 1)\n            return arr;\n        List<long>\
    \ result = new List<long>();\n        int i = 0;\n        int j = 0;\n       \
    \ while (i < arr.Count && j < k) {\n            if (arr[i] > arr[j]) {\n     \
    \           result.Add(arr[i]);\n                i++;\n            }\n       \
    \     else {\n                result.Add(arr[j]);\n                j++;\n    \
    \        }\n        }\n        while (i < arr.Count) {\n            result.Add(arr[i]);\n\
    \            i++;\n        }\n        while (j < k) {\n            result.Add(arr[j]);\n\
    \            j++;\n        }\n        return result;", "        int[] arr_count\
    \ = new int[k];\n        for (int i = 0; i < arr.Count; i++) {\n            arr_count[arr[i]\
    \ - -1000]++;\n        }\n        int max_count = 0;\n        for (int i = 0;\
    \ i < arr_count.Length; i++) {\n            if (arr_count[i] > max_count) {\n\
    \                max_count = arr_count[i];\n            }\n        }\n       \
    \ List<long> result = new List<long>();\n        for (int i = 0; i < arr_count.Length;\
    \ i++) {\n            if (arr_count[i] == max_count) {\n                result.Add(arr[i]);\n\
    \            }\n        }\n        return result;", "        // Write your code\
    \ here\n        int[] arr_int = new int[arr.Count];\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            arr_int[i] = (int)arr[i];\n        }\n    \
    \    int[] result = new int[k];\n        int[] max_arr = new int[arr.Count];\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            max_arr[i] = arr_int[i];\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            result[i] = max_arr[i];\n\
    \        }\n        for (int i = k; i < arr.Count; i++) {\n            int max_index\
    \ = 0;\n            for (int j = 0; j < k; j++) {\n                if (max_arr[j]\
    \ > max_arr[max_index]) {\n                    max_index = j;\n              \
    \  }\n            }\n            result[max_index] = max_arr[max_index];\n   \
    \         max_arr[max_index] = arr_int[i];\n        }\n        List<long> result_list\
    \ = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result_list.Add((long)result[i]);\n\
    \        }\n        return result_list;", "        // Write your code here\n \
    \       if (arr.Count < k)\n            return arr;\n        int[] max = new int[arr.Count];\n\
    \        for (int i = 0; i < arr.Count; i++)\n            max[i] = i;\n      \
    \  for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j <\
    \ arr.Count; j++) {\n                if (arr[i] > arr[j]) {\n                \
    \    int temp = max[i];\n                    max[i] = max[j];\n              \
    \      max[j] = temp;\n                }\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        for (int i = 0; i < k; i++) {\n        \
    \    result.Add(arr[max[i]]);\n        }\n        return result;", "        int\
    \ n = arr.Count;\n        if (n == 0) return new List<long>(new long[]{});\n \
    \       if (k == 0) return new List<long>(new long[]{});\n        if (k > n) return\
    \ arr;\n        long[] max = new long[k];\n        for (int i = 0; i < k; i++)\
    \ max[i] = arr[i];\n        for (int i = k; i < n; i++) {\n            for (int\
    \ j = 0; j < k; j++) {\n                if (arr[i] > max[j]) {\n             \
    \       max[j] = arr[i];\n                }\n            }\n        }\n      \
    \  return new List<long>(max);", "        if (arr == null || arr.Count == 0 ||\
    \ k > arr.Count)\n            return new List<long>();\n        if (k == 1)\n\
    \            return arr;\n        if (k == arr.Count)\n            return arr;\n\
    \        int[] max = new int[arr.Count];\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            max[i] = i;\n        }\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n            \
    \    if (arr[i] > arr[j]) {\n                    max[i] = j;\n               \
    \ }\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(arr[max[i]]);\n\
    \        }\n        return result;", "        int[] max = new int[k];\n      \
    \  for (int i = 0; i < k; i++) {\n            max[i] = i;\n        }\n       \
    \ for (int i = 0; i < arr.Count; i++) {\n            int maxIndex = 0;\n     \
    \       for (int j = 0; j < k; j++) {\n                if (arr[i] > arr[max[j]])\
    \ {\n                    maxIndex = j;\n                }\n            }\n   \
    \         if (maxIndex != i) {\n                max[maxIndex] = max[i];\n    \
    \            max[i] = i;\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(arr[max[i]]);\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  if (arr == null || arr.Count == 0 || k < 1 || k > arr.Count)\n            return\
    \ new List<long>();\n        long[] arr_sorted = arr.ToArray();\n        Arrays.Sort(arr_sorted);\n\
    \        List<long> result = new List<long>();\n        for (int i = 0; i < k;\
    \ i++) {\n            result.Add(arr_sorted[i]);\n        }\n        return result;",
  "        if (arr == null || arr.Count == 0 || k < 0)\n            return new List<long>();\n\
    \        if (k == 0)\n            return new List<long>(arr);\n        if (k ==\
    \ 1)\n            return arr;\n        int[] max = new int[arr.Count];\n     \
    \   int[] min = new int[arr.Count];\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            max[i] = arr[i];\n            min[i] = arr[i];\n        }\n \
    \       for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] > max[i\
    \ - 1])\n                max[i] = max[i - 1];\n            else\n            \
    \    max[i] = arr[i];\n        }\n        for (int i = arr.Count - 2; i >= 0;\
    \ i--) {\n            if (arr[i] < min[i + 1])\n                min[i] = min[i\
    \ + 1];\n            else\n                min[i] = arr[i];\n        }\n     \
    \   int[] result = new int[k];\n        for (int i = 0; i < k; i++) {\n      \
    \      result[i] = max[i];\n        }\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (result[i] == max[i])\n                continue;\n  \
    \          for (int j = i + 1; j < arr.Count; j++) {\n                if (result[j]\
    \ == max[j])\n                    continue;\n                if (result[i] + 1\
    \ == result[j]) {\n                    result[i]++;\n                    result[j]\
    \ = max[j];\n                    break;\n                }\n            }\n  \
    \      }\n        List<long> resultList = new List<long>();\n        for (int\
    \ i = 0; i < k; i++) {\n            resultList.Add(result[i]);\n        }\n  \
    \      return resultList;", "        // Write your code here\n        if (arr\
    \ == null || arr.Count == 0 || k <= 0)\n            return new List<long>();\n\
    \        if (k == 1)\n            return arr;\n        long[] max = new long[k];\n\
    \        for (int i = 0; i < k; i++)\n            max[i] = arr[0];\n        for\
    \ (int i = 1; i < arr.Count; i++) {\n            if (arr[i] > max[0])\n      \
    \          max[0] = arr[i];\n            for (int j = 1; j < k; j++) {\n     \
    \           if (arr[i] > max[j])\n                    max[j] = arr[i];\n     \
    \       }\n        }\n        List<long> result = new List<long>();\n        for\
    \ (int i = 0; i < k; i++)\n            result.Add(max[i]);\n        return result;",
  "        // Write your code here\n        if (arr.Count < k)\n            return\
    \ arr;\n        List<long> result = new List<long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.Add(arr[i]);\n        }\n        for (int\
    \ i = k; i < arr.Count; i++) {\n            if (result.Last() < arr[i]) {\n  \
    \              result.Add(arr[i]);\n            }\n        }\n        return result;",
  "        // Write your code here\n        if (arr.Count < k)\n            return\
    \ arr;\n        long[] arr_arr = arr.ToArray();\n        Arrays.Sort(arr_arr);\n\
    \        long[] result = new long[k];\n        for (int i = 0; i < k; i++) {\n\
    \            result[i] = arr_arr[i];\n        }\n        return result;", "  \
    \      int[] max = new int[k];\n        for (int i = 0; i < k; i++)\n        \
    \    max[i] = i;\n        for (int i = 0; i < arr.Count; i++) {\n            int\
    \ j = 0;\n            for (; j < k; j++) {\n                if (arr[i] > max[j])\
    \ {\n                    max[j] = arr[i];\n                    break;\n      \
    \          }\n            }\n            if (j == k) {\n                max[k\
    \ - 1] = arr[i];\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(max[i]);\n    \
    \    }\n        return result;", "        if (arr.Count < k)\n            return\
    \ arr;\n        List<long> result = new List<long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            result.Add(arr[i]);\n        }\n        for (int\
    \ i = k; i < arr.Count; i++) {\n            if (result.Last() < arr[i]) {\n  \
    \              result.Add(arr[i]);\n            }\n        }\n        return result;",
  "        // Write your code here\n        if (arr.Count < k) {\n            throw\
    \ new Exception(\"Invalid Input\");\n        }\n        if (k == 0) {\n      \
    \      return new List<long>();\n        }\n        if (k == 1) {\n          \
    \  return arr;\n        }\n        if (k == 2) {\n            return arr.OrderByDescending();\n\
    \        }\n        long[] arr_tmp = arr.ToArray();\n        long[] max_arr =\
    \ new long[k];\n        for (int i = 0; i < k; i++) {\n            max_arr[i]\
    \ = arr_tmp[i];\n        }\n        for (int i = k; i < arr.Count; i++) {\n  \
    \          if (arr_tmp[i] > max_arr[k - 1]) {\n                max_arr[k - 1]\
    \ = arr_tmp[i];\n            }\n        }\n        for (int i = k - 1; i >= 0;\
    \ i--) {\n            if (arr_tmp[i] > max_arr[i]) {\n                max_arr[i]\
    \ = arr_tmp[i];\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(max_arr[i]);\n\
    \        }\n        return result;", "        // write your code here\n      \
    \  if (arr == null || arr.Count == 0 || k <= 0)\n            return new List<long>();\n\
    \        if (k == 1)\n            return arr;\n        if (k == 2)\n         \
    \   return arr.OrderByDescending(a => a);\n        if (k == arr.Count)\n     \
    \       return arr;\n        List<long> result = new List<long>();\n        long\
    \ max = arr.Count - k + 1;\n        for (long i = 0; i < max; i++) {\n       \
    \     result.Add(arr.Get(i));\n        }\n        return result;", "        //\
    \ Write your code here\n        if (arr.Count == 0)\n            return new List<long>();\n\
    \        if (k == 1)\n            return arr.OrderByDescending((a, b) => a - b).Take(1);\n\
    \        if (k > arr.Count)\n            return new List<long>();\n        int[]\
    \ max = new int[arr.Count];\n        int[] min = new int[arr.Count];\n       \
    \ for (int i = 0; i < arr.Count; i++) {\n            max[i] = arr[i];\n      \
    \      min[i] = arr[i];\n        }\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if\
    \ (max[i] < max[j])\n                    max[i] = max[j];\n                if\
    \ (min[i] > min[j])\n                    min[i] = min[j];\n            }\n   \
    \     }\n        for (int i = 0; i < arr.Count; i++) {\n            if (max[i]\
    \ == min[i])\n                continue;\n            if (max[i] - min[i] > k)\n\
    \                return arr.OrderByDescending((a, b) => a - b).Take(k);\n    \
    \    }\n        return arr.OrderByDescending((a, b) => a - b).Take(arr.Count);",
  "        // Write your code here\n        if (arr == null || arr.Count == 0 || k\
    \ < 1 || k > arr.Count)\n            return new List<long>();\n        long[]\
    \ max = new long[k];\n        for (int i = 0; i < k; i++)\n            max[i]\
    \ = arr[i];\n        for (int i = k; i < arr.Count; i++) {\n            if (arr[i]\
    \ > max[0]) {\n                max[0] = arr[i];\n                for (int j =\
    \ 1; j < k; j++) {\n                    if (max[j] < max[0])\n               \
    \         max[j] = max[0];\n                }\n            }\n        }\n    \
    \    List<long> result = new List<long>();\n        for (int i = 0; i < k; i++)\n\
    \            result.Add(max[i]);\n        return result;", "        // Write your\
    \ code here\n        if (arr == null || arr.Count == 0 || k < 1 || k > arr.Count)\n\
    \            return new List<long>();\n        long[] arr_arr = arr.ToArray();\n\
    \        long[] max_arr = new long[k];\n        for (int i = 0; i < k; i++)\n\
    \            max_arr[i] = arr_arr[i];\n        for (int i = k; i < arr.Count;\
    \ i++) {\n            for (int j = 0; j < k; j++) {\n                if (arr_arr[i]\
    \ > max_arr[j]) {\n                    max_arr[j] = arr_arr[i];\n            \
    \    }\n            }\n        }\n        return List.of(max_arr);", "       \
    \ if (arr == null || arr.Count < k)\n            return new List<long>();\n  \
    \      if (k == 1)\n            return arr;\n        if (k == 2)\n           \
    \ return arr.OrderByDescending(x => x);\n        if (k == 3)\n            return\
    \ arr.OrderByDescending(x => x).OrderByDescending(x => x);\n        if (k == 4)\n\
    \            return arr.OrderByDescending(x => x).OrderByDescending(x => x).OrderByDescending(x\
    \ => x);\n        if (k == 5)\n            return arr.OrderByDescending(x => x).OrderByDescending(x\
    \ => x).OrderByDescending(x => x).OrderByDescending(x => x);\n        if (k ==\
    \ 6)\n            return arr.OrderByDescending(x => x).OrderByDescending(x =>\
    \ x).OrderByDescending(x => x).OrderByDescending(x => x).OrderByDescending(x =>\
    \ x);\n        if (k == 7)\n            return arr.OrderByDescending(x => x).OrderByDescending(x\
    \ => x).OrderByDescending(x => x).OrderByDescending(x => x).OrderByDescending(x\
    \ => x).OrderByDescending(x => x);\n        if (k == 8)\n            return arr.OrderByDescending(x\
    \ => x).OrderByDescending(x => x).OrderByDescending(x => x).OrderByDescending(x\
    \ => x).OrderByDescending(x => x).OrderByDescending(x => x).OrderByDescending(x\
    \ => x);\n        if (k == 9)\n            return arr.OrderByDescending(x => x).OrderByDescending(x\
    \ => x).OrderByDescending(x => x).OrderByDescending(x => x).OrderByDescending(x\
    \ => x).OrderByDescending(x => x).OrderByDescending(x => x).OrderByDescending(x\
    \ => x);\n        if (k == 10)\n            return arr.OrderByDescending(x =>\
    \ x).OrderByDescending(x => x).OrderByDescending(x => x).OrderByDescending(x =>\
    \ x).", "        if (arr.Count < k)\n            return arr;\n        List<long>\
    \ result = new List<long>();\n        int i = 0;\n        int j = 0;\n       \
    \ while (i < arr.Count && j < k) {\n            if (arr[i] > arr[j]) {\n     \
    \           result.Add(arr[i]);\n                i++;\n            } else {\n\
    \                result.Add(arr[j]);\n                j++;\n            }\n  \
    \      }\n        while (i < arr.Count) {\n            result.Add(arr[i]);\n \
    \           i++;\n        }\n        while (j < k) {\n            result.Add(arr[j]);\n\
    \            j++;\n        }\n        return result;", "        // Write your\
    \ code here\n        if (arr == null || arr.Count == 0 || k > arr.Count)\n   \
    \         return new List<long>();\n        if (k == 1)\n            return arr;\n\
    \        if (k == 2)\n            return arr.OrderByDescending();\n        if\
    \ (k == arr.Count)\n            return arr;\n        List<long> result = new List<long>();\n\
    \        int left = 0;\n        int right = arr.Count - 1;\n        while (left\
    \ < right) {\n            if (arr[left] < arr[right]) {\n                result.Add(arr[left]);\n\
    \                left++;\n            }\n            else {\n                result.Add(arr[right]);\n\
    \                right--;\n            }\n        }\n        if (left < arr.Count)\n\
    \            result.Add(arr[left]);\n        else\n            result.Add(arr[right]);\n\
    \        return result;", "        int[] max = new int[k];\n        for (int i\
    \ = 0; i < k; i++)\n            max[i] = i;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            int maxIndex = 0;\n            for (int j = 0; j < k; j++)\
    \ {\n                if (arr[i] > arr[max[j]]) {\n                    maxIndex\
    \ = j;\n                }\n            }\n            if (maxIndex != i) {\n \
    \               max[maxIndex] = max[i];\n                max[i] = arr[i];\n  \
    \          }\n        }\n        List<long> result = new List<long>();\n     \
    \   for (int i = 0; i < k; i++) {\n            result.Add(arr[max[i]]);\n    \
    \    }\n        return result;", "        // Write your code here\n        if\
    \ (arr.Count < k)\n            return arr;\n        long[] max = new long[k];\n\
    \        for (int i = 0; i < k; i++)\n            max[i] = arr[i];\n        for\
    \ (int i = k; i < arr.Count; i++) {\n            if (arr[i] > max[k - 1])\n  \
    \              max[k - 1] = arr[i];\n            else {\n                for (int\
    \ j = k - 1; j >= 1; j--) {\n                    if (arr[i] > max[j - 1]) {\n\
    \                        max[j - 1] = arr[i];\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        for (int i = 0; i < k; i++)\n          \
    \  result.Add(max[i]);\n        return result;", "        if (arr == null || arr.Count\
    \ == 0 || k < 1 || k > arr.Count)\n            return new List<long>();\n    \
    \    long[] arr_arr = arr.ToArray();\n        Arrays.Sort(arr_arr);\n        long[]\
    \ max_arr = new long[k];\n        for (int i = 0; i < k; i++)\n            max_arr[i]\
    \ = arr_arr[i];\n        return arr_arr.Length == k ? new List<long>(max_arr)\
    \ : null;", "        if (arr.Count < k) {\n            throw new Exception(\"\
    Input is not valid\");\n        }\n        if (k == 0) {\n            return new\
    \ List<long>();\n        }\n        if (k == 1) {\n            return arr;\n \
    \       }\n        List<long> result = new List<long>();\n        long max = arr.Count\
    \ - k + 1;\n        for (long i = 0; i < max; i++) {\n            long maxIndex\
    \ = i;\n            for (long j = i + 1; j < arr.Count; j++) {\n             \
    \   if (arr[j] > arr[maxIndex]) {\n                    maxIndex = j;\n       \
    \         }\n            }\n            result.Add(arr[maxIndex]);\n         \
    \   arr[maxIndex] = arr[i];\n        }\n        return result;", "        if (arr\
    \ == null || arr.Count == 0 || k <= 0)\n            return new List<long>();\n\
    \        long[] arr_ = arr.ToArray();\n        int[] max_ = new int[arr.Count];\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            max_[i] = i;\n   \
    \     }\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j\
    \ = i + 1; j < arr.Count; j++) {\n                if (arr_[i] > arr_[j]) {\n \
    \                   max_[i] = j;\n                }\n            }\n        }\n\
    \        List<long> ans = new List<long>();\n        for (int i = 0; i < k; i++)\
    \ {\n            ans.Add(arr_[max_[i]]);\n        }\n        return ans;", " \
    \       // Write your code here\n        if (arr.Count < k)\n            return\
    \ new List<long>();\n        if (arr.Count == k)\n            return arr;\n  \
    \      long max = arr[0];\n        for (int i = 1; i < arr.Count; i++)\n     \
    \       if (arr[i] > max)\n                max = arr[i];\n        List<long> result\
    \ = new List<long>();\n        for (int i = 0; i < k; i++)\n            result.Add(max);\n\
    \        for (int i = k; i < arr.Count; i++)\n            result.Add(arr[i]);\n\
    \        return result;", "        // Write your code here\n        if (arr.Count\
    \ == 0) return new List<long>();\n        if (k == 1) return arr;\n        if\
    \ (k > arr.Count) return arr;\n        List<long> result = new List<long>();\n\
    \        int left = 0;\n        int right = arr.Count - 1;\n        while (left\
    \ < right) {\n            if (arr[left] < arr[right]) {\n                result.Add(arr[left]);\n\
    \                left++;\n            }\n            else {\n                result.Add(arr[right]);\n\
    \                right--;\n            }\n        }\n        if (left == right)\
    \ {\n            result.Add(arr[left]);\n        }\n        return result;", " \
    \       // Write your code here\n        if (arr == null || arr.Count == 0 ||\
    \ k < 1)\n            return new List<long>();\n        if (k == 1)\n        \
    \    return arr;\n        long max = arr.Count;\n        if (max < k)\n      \
    \      return new List<long>();\n        if (max == k)\n            return arr;\n\
    \        long[] maxArr = new long[k];\n        for (int i = 0; i < k; i++)\n \
    \           maxArr[i] = arr[i];\n        for (int i = k; i < max; i++) {\n   \
    \         if (arr[i] > maxArr[k - 1])\n                maxArr[k - 1] = arr[i];\n\
    \        }\n        for (int i = k - 1; i >= 0; i--) {\n            if (arr[i]\
    \ > maxArr[i])\n                maxArr[i] = arr[i];\n        }\n        List<long>\
    \ result = new List<long>();\n        for (int i = 0; i < k; i++)\n          \
    \  result.Add(maxArr[i]);\n        return result;", "        // write your code\
    \ here\n        if (arr == null || arr.Count == 0 || k <= 0) {\n            return\
    \ new List<long>();\n        }\n        long[] arr_ = arr.ToArray();\n       \
    \ long[] max_ = new long[k];\n        for (int i = 0; i < k; i++) {\n        \
    \    max_[i] = arr_[i];\n        }\n        for (int i = k; i < arr.Count; i++)\
    \ {\n            if (arr_[i] > max_[0]) {\n                max_[0] = arr_[i];\n\
    \                for (int j = 1; j < k; j++) {\n                    max_[j] =\
    \ max_[j - 1];\n                }\n            }\n            else if (arr_[i]\
    \ > max_[k - 1]) {\n                max_[k - 1] = arr_[i];\n            }\n  \
    \          else {\n                for (int j = k - 1; j > 0; j--) {\n       \
    \             max_[j] = max_[j - 1];\n                }\n                max_[0]\
    \ = arr_[i];\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(max_[i]);\n   \
    \     }\n        return result;", "        // Write your code here\n        if\
    \ (arr == null || arr.Count == 0 || k <= 0) {\n            return new List<long>();\n\
    \        }\n        if (k == 1) {\n            return arr;\n        }\n      \
    \  long max = arr.Count;\n        long[] max_arr = new long[k];\n        for (int\
    \ i = 0; i < k; i++) {\n            max_arr[i] = -1;\n        }\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (max_arr[0] < arr[i]) {\n     \
    \           max_arr[0] = arr[i];\n            }\n            for (int j = 1; j\
    \ < k; j++) {\n                if (max_arr[j] < arr[i]) {\n                  \
    \  max_arr[j] = arr[i];\n                }\n            }\n        }\n       \
    \ List<long> result = new List<long>();\n        for (int i = 0; i < k; i++) {\n\
    \            result.Add(max_arr[i]);\n        }\n        return result;", "  \
    \      // Write your code here\n        if (arr == null || arr.Count == 0 || k\
    \ < 1)\n            return new List<long>();\n        int[] arr_int = arr.ToArray();\n\
    \        int[] max_arr = new int[k];\n        int max_index = 0;\n        for\
    \ (int i = 0; i < arr_int.Length; i++) {\n            if (max_arr[max_index] <\
    \ arr_int[i]) {\n                max_arr[max_index] = arr_int[i];\n          \
    \      max_index = 0;\n            }\n            else if (max_arr[max_index]\
    \ == arr_int[i]) {\n                max_index++;\n            }\n        }\n \
    \       List<long> result = new List<long>();\n        for (int i = 0; i < k;\
    \ i++) {\n            result.Add(max_arr[i]);\n        }\n        return result;",
  "        // write your code here\n        int n = arr.Count;\n        if (n == 0)\n\
    \            return new List<long>(new long[0]);\n        if (k == 1)\n      \
    \      return arr.OrderByDescending();\n        if (k > n)\n            return\
    \ arr.OrderByDescending();\n        long[] max = new long[k];\n        for (int\
    \ i = 0; i < k; i++)\n            max[i] = arr[i];\n        for (int i = k; i\
    \ < n; i++) {\n            if (arr[i] > max[k - 1]) {\n                max[k -\
    \ 1] = arr[i];\n                for (int j = k - 1; j > 0; j--) {\n          \
    \          if (max[j] < max[j - 1])\n                        max[j - 1] = max[j];\n\
    \                    else\n                        break;\n                }\n\
    \            }\n        }\n        List<long> result = new List<long>();\n   \
    \     for (int i = 0; i < k; i++)\n            result.Add(max[i]);\n        return\
    \ result;", "        // write your code here\n        if (arr.Count < k)\n   \
    \         return arr;\n        int[] max = new int[arr.Count];\n        for (int\
    \ i = 0; i < arr.Count; i++)\n            max[i] = i;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n\
    \                if (arr[max[i]] < arr[max[j]])\n                    max[i] =\
    \ j;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++)\n            result.Add(arr[max[i]]);\n \
    \       return result;", "        int n = arr.Count;\n        if (n == 0) return\
    \ new List<long>(new long[0]);\n        if (k == 0) return new List<long>(new\
    \ long[0]);\n        if (k > n) return arr;\n        int[] max = new int[k];\n\
    \        for (int i = 0; i < k; i++) max[i] = i;\n        for (int i = 0; i <\
    \ n; i++) {\n            int max_index = -1;\n            for (int j = 0; j <\
    \ k; j++) {\n                if (max[j] == -1 || arr[i] > arr[max[j]]) {\n   \
    \                 max_index = j;\n                    break;\n               \
    \ }\n            }\n            if (max_index != -1) {\n                max[max_index]\
    \ = i;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(arr[max[i]]);\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  long[] arr_tmp = arr.ToArray();\n        Arrays.sort(arr_tmp);\n        List<long>\
    \ result = new List<long>();\n        for (int i = 0; i < k; i++) {\n        \
    \    result.Add(arr_tmp[i]);\n        }\n        return result;", "        //\
    \ Write your code here\n        if (arr == null || arr.Count == 0 || k < 1)\n\
    \            return new List<long>();\n        long[] arr_arr = arr.ToArray();\n\
    \        long[] max_arr = new long[k];\n        long max_count = 0;\n        for\
    \ (int i = 0; i < arr_arr.Length; i++) {\n            if (max_count < k) {\n \
    \               max_arr[max_count] = arr_arr[i];\n                max_count++;\n\
    \            }\n            else {\n                if (arr_arr[i] > max_arr[max_count\
    \ - 1]) {\n                    max_arr[max_count - 1] = arr_arr[i];\n        \
    \        }\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < max_arr.Length; i++) {\n            result.Add(max_arr[i]);\n\
    \        }\n        return result;", "        if (arr == null || arr.Count ==\
    \ 0 || k < 0)\n            return new List<long>();\n        if (k == 0)\n   \
    \         return arr;\n        if (k == 1)\n            return arr.OrderByDescending();\n\
    \        long[] arr_ = arr.ToArray();\n        long[] max_ = new long[k];\n  \
    \      for (int i = 0; i < k; i++)\n            max_[i] = arr_[i];\n        for\
    \ (int i = k; i < arr.Count; i++) {\n            if (arr_[i] > max_[k - 1]) {\n\
    \                max_[k - 1] = arr_[i];\n            }\n            else {\n \
    \               for (int j = k - 1; j >= 0; j--) {\n                    if (max_[j]\
    \ < arr_[i]) {\n                        max_[j] = arr_[i];\n                 \
    \       break;\n                    }\n                }\n            }\n    \
    \    }\n        return List.Create(max_);", "        // Write your code here\n\
    \        if (arr.Count < k)\n            return arr;\n        long[] arr_arr =\
    \ arr.ToArray();\n        Arrays.Sort(arr_arr);\n        long[] result = new long[k];\n\
    \        for (int i = 0; i < k; i++) {\n            result[i] = arr_arr[i];\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  long[] arr_arr = arr.ToArray();\n        int[] arr_arr_indices = new int[arr_arr.length];\n\
    \        for (int i = 0; i < arr_arr.length; i++) {\n            arr_arr_indices[i]\
    \ = i;\n        }\n        Arrays.sort(arr_arr_indices, arr_arr);\n        int[]\
    \ result = new int[k];\n        for (int i = 0; i < k; i++) {\n            result[i]\
    \ = arr_arr_indices[i];\n        }\n        return new List<long>(result);", " \
    \       // Write your code here\n        if (arr == null || arr.Count == 0 ||\
    \ k <= 0)\n            return new List<long>();\n        if (k == 1)\n       \
    \     return arr;\n        long max = arr.Count;\n        long left = 0;\n   \
    \     long right = arr.Count - 1;\n        while (left <= right) {\n         \
    \   long mid = (left + right) / 2;\n            if (arr[mid] < arr[right]) {\n\
    \                right = mid - 1;\n            }\n            else if (arr[mid]\
    \ > arr[right]) {\n                left = mid + 1;\n            }\n          \
    \  else {\n                right--;\n            }\n        }\n        if (arr[left]\
    \ > arr[right]) {\n            return arr.SubList(left, right + 1);\n        }\n\
    \        else {\n            return arr.SubList(left, right);\n        }", " \
    \       // Write your code here\n        int n = arr.Count;\n        if (n ==\
    \ 0)\n            return new List<long>();\n        if (k > n)\n            return\
    \ arr;\n        int[] max = new int[k];\n        for (int i = 0; i < k; i++)\n\
    \            max[i] = i;\n        for (int i = 0; i < n; i++) {\n            int\
    \ maxIndex = -1;\n            for (int j = 0; j < k; j++) {\n                if\
    \ (arr[i] > arr[max[j]]) {\n                    maxIndex = j;\n              \
    \      break;\n                }\n            }\n            if (maxIndex == -1)\n\
    \                maxIndex = k - 1;\n            max[maxIndex] = i;\n        }\n\
    \        List<long> result = new List<long>();\n        for (int i = 0; i < k;\
    \ i++)\n            result.Add(arr[max[i]]);\n        return result;", "     \
    \   if (arr == null || arr.Count == 0 || k < 1 || k > arr.Count)\n           \
    \ return new List<long>();\n        int[] max = new int[arr.Count];\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            max[i] = i;\n        }\n    \
    \    for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j\
    \ < arr.Count; j++) {\n                if (arr[max[i]] < arr[max[j]]) {\n    \
    \                max[i] = j;\n                }\n            }\n        }\n  \
    \      List<long> result = new List<long>();\n        for (int i = 0; i < k; i++)\
    \ {\n            result.Add(arr[max[i]]);\n        }\n        return result;",
  "        int n = arr.Count;\n        if (n == 0)\n            return new List<long>(new\
    \ long[] {});\n        if (k == 0)\n            return new List<long>(new long[]\
    \ { arr[0] });\n        if (k == 1)\n            return new List<long>(new long[]\
    \ { arr[0] });\n        if (k == n)\n            return arr;\n        if (k >\
    \ n)\n            return arr;\n        if (k < 0)\n            return arr;\n \
    \       long[] max = new long[k];\n        int[] maxIndex = new int[k];\n    \
    \    for (int i = 0; i < k; i++) {\n            max[i] = arr[0];\n           \
    \ maxIndex[i] = 0;\n        }\n        for (int i = 1; i < n; i++) {\n       \
    \     for (int j = 0; j < k; j++) {\n                if (arr[i] > max[j]) {\n\
    \                    max[j] = arr[i];\n                    maxIndex[j] = i;\n\
    \                }\n            }\n        }\n        List<long> result = new\
    \ List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(max[i]);\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  if (arr.Count < k)\n            return arr;\n        int[] max = new int[k];\n\
    \        for (int i = 0; i < k; i++)\n            max[i] = -1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (max[i] < arr[i])\n           \
    \     max[i] = arr[i];\n        }\n        List<long> ret = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            if (max[i] != -1)\n      \
    \          ret.Add(max[i]);\n        }\n        return ret;", "        if (arr\
    \ == null || arr.Count == 0 || k < 1 || k > arr.Count)\n            return new\
    \ List<long>();\n        int[] max = new int[arr.Count];\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            max[i] = i;\n        }\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count;\
    \ j++) {\n                if (arr[i] > arr[j]) {\n                    max[j] =\
    \ i;\n                }\n            }\n        }\n        List<long> result =\
    \ new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(arr[max[i]]);\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  int n = arr.Count;\n        if (n == 0) return new List<long>();\n        if\
    \ (k == 1) return arr.OrderByDescending();\n        if (k > n) return arr.OrderByDescending();\n\
    \        int[] max = new int[n];\n        for (int i = 0; i < n; i++) max[i] =\
    \ i;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j\
    \ < n; j++) {\n                if (arr[max[i]] < arr[max[j]]) max[i] = j;\n  \
    \          }\n        }\n        int[] result = new int[k];\n        for (int\
    \ i = 0; i < k; i++) result[i] = max[i];\n        return arr.OrderByDescending().Select(x\
    \ => arr[x]).ToList();", "        // Write your code here\n        if (arr.Count\
    \ < k)\n            return arr;\n        long[] max = new long[k];\n        for\
    \ (int i = 0; i < k; i++)\n            max[i] = arr[i];\n        for (int i =\
    \ k; i < arr.Count; i++) {\n            if (arr[i] > max[0]) {\n             \
    \   max[0] = arr[i];\n                for (int j = 1; j < k; j++)\n          \
    \          max[j] = max[j - 1];\n            }\n            else if (arr[i] >\
    \ max[k - 1]) {\n                max[k - 1] = arr[i];\n                for (int\
    \ j = k - 2; j >= 0; j--)\n                    max[j] = max[j + 1];\n        \
    \    }\n            else {\n                for (int j = 0; j < k; j++) {\n  \
    \                  if (arr[i] > max[j]) {\n                        max[j] = arr[i];\n\
    \                        for (int kk = j + 1; kk < k; kk++)\n                \
    \            max[kk] = max[kk - 1];\n                    }\n                }\n\
    \            }\n        }\n        List<long> result = new List<long>();\n   \
    \     for (int i = 0; i < k; i++)\n            result.Add(max[i]);\n        return\
    \ result;", "        if (arr.Count < k)\n            return arr;\n        long[]\
    \ max = new long[k];\n        for (int i = 0; i < k; i++)\n            max[i]\
    \ = arr[i];\n        for (int i = k; i < arr.Count; i++) {\n            if (arr[i]\
    \ > max[k - 1])\n                max[k - 1] = arr[i];\n            else {\n  \
    \              for (int j = k - 1; j >= 1; j--) {\n                    if (max[j]\
    \ < max[j - 1])\n                        max[j - 1] = max[j];\n              \
    \      else\n                        break;\n                }\n             \
    \   max[0] = arr[i];\n            }\n        }\n        return List.of(max);",
  "        if (arr == null || arr.Count == 0 || k < 0)\n            return new List<long>();\n\
    \        if (k == 0)\n            return arr;\n        long[] max = new long[k];\n\
    \        for (int i = 0; i < k; i++)\n            max[i] = arr[0];\n        for\
    \ (int i = 1; i < arr.Count; i++) {\n            if (arr[i] > max[0])\n      \
    \          max[0] = arr[i];\n            for (int j = 1; j < k; j++) {\n     \
    \           if (arr[i] > max[j])\n                    max[j] = arr[i];\n     \
    \       }\n        }\n        List<long> result = new List<long>();\n        for\
    \ (int i = 0; i < k; i++)\n            result.Add(max[i]);\n        return result;",
  "        int n = arr.Count;\n        if (k > n)\n            throw new Exception(\"\
    Invalid Input\");\n        if (k == 0)\n            return new List<long>();\n\
    \        if (k == 1)\n            return arr;\n        if (k == 2)\n         \
    \   return new List<long>(new long[]{arr[0], arr[1]});\n        if (k == n)\n\
    \            return arr;\n        List<long> max = new List<long>();\n       \
    \ for (int i = 0; i < k; i++)\n            max.Add(arr[i]);\n        for (int\
    \ i = k; i < n; i++) {\n            if (arr[i] > max[0]) {\n                max[0]\
    \ = arr[i];\n                max[1] = i;\n            }\n        }\n        return\
    \ max;", "        int n = arr.Count;\n        if (n == 0) return new List<long>(new\
    \ long[]{});\n        if (k == 0) return new List<long>(new long[]{});\n     \
    \   if (k > n) return arr;\n        long[] max = new long[k];\n        for (int\
    \ i = 0; i < k; i++) max[i] = arr[i];\n        for (int i = k; i < n; i++) {\n\
    \            if (arr[i] > max[k - 1]) {\n                max[k - 1] = arr[i];\n\
    \            }\n            else if (arr[i] > max[k - 2]) {\n                max[k\
    \ - 2] = arr[i];\n            }\n            else {\n                max[k - 3]\
    \ = arr[i];\n            }\n        }\n        return new List<long>(max);", " \
    \       // Write your code here\n        if (arr.Count < k) {\n            throw\
    \ new Exception(\"Invalid Input\");\n        }\n        if (k == 0) {\n      \
    \      return new List<long>();\n        }\n        long[] arr_arr = arr.ToArray();\n\
    \        long[] max_arr = new long[k];\n        for (int i = 0; i < k; i++) {\n\
    \            max_arr[i] = arr_arr[i];\n        }\n        for (int i = k; i <\
    \ arr.Count; i++) {\n            if (arr_arr[i] > max_arr[0]) {\n            \
    \    max_arr[0] = arr_arr[i];\n            }\n            for (int j = 1; j <\
    \ k; j++) {\n                if (arr_arr[i] > max_arr[j]) {\n                \
    \    max_arr[j] = arr_arr[i];\n                }\n            }\n        }\n \
    \       List<long> result = new List<long>();\n        for (int i = 0; i < k;\
    \ i++) {\n            result.Add(max_arr[i]);\n        }\n        return result;",
  "        int[] max = new int[k];\n        for (int i = 0; i < k; i++)\n        \
    \    max[i] = i;\n        for (int i = 0; i < arr.Count; i++) {\n            int\
    \ index = arr[i] % k;\n            if (max[index] < arr[i])\n                max[index]\
    \ = arr[i];\n        }\n        List<long> result = new List<long>();\n      \
    \  for (int i = 0; i < k; i++)\n            result.Add(max[i]);\n        return\
    \ result;", "        // Write your code here\n        if (arr.Count == 0)\n  \
    \          return arr;\n        if (arr.Count < k)\n            return arr;\n\
    \        long[] max = new long[k];\n        for (int i = 0; i < k; i++)\n    \
    \        max[i] = arr[i];\n        for (int i = k; i < arr.Count; i++) {\n   \
    \         if (arr[i] > max[k - 1]) {\n                max[k - 1] = arr[i];\n \
    \           }\n            else {\n                for (int j = k - 1; j >= 0;\
    \ j--) {\n                    if (arr[i] > max[j]) {\n                       \
    \ max[j] = arr[i];\n                        break;\n                    }\n  \
    \              }\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++)\n            result.Add(max[i]);\n      \
    \  return result;", "        // Write your code here\n        long[] arr_ = arr.ToArray();\n\
    \        long[] max_ = new long[k];\n        for (int i = 0; i < k; i++) {\n \
    \           max_[i] = arr_[i];\n        }\n        for (int i = k; i < arr.Count;\
    \ i++) {\n            if (arr_[i] > max_[k - 1]) {\n                max_[k - 1]\
    \ = arr_[i];\n            }\n            else {\n                for (int j =\
    \ k - 1; j >= 0; j--) {\n                    if (max_[j] < arr_[i]) {\n      \
    \                  max_[j] = arr_[i];\n                    }\n               \
    \ }\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(max_[i]);\n   \
    \     }\n        return result;", "        // Write your code here\n        if\
    \ (arr.Count < k) {\n            throw new Exception(\"Invalid Input\");\n   \
    \     }\n        if (k == 1) {\n            return arr.OrderByDescending();\n\
    \        }\n        List<long> result = new List<long>();\n        long max =\
    \ arr.First();\n        for (int i = 0; i < k - 1; i++) {\n            max = Math.Max(max,\
    \ arr.First());\n            arr.RemoveAt(0);\n        }\n        result.Add(max);\n\
    \        result.Add(arr.First());\n        return result;", "        // Write\
    \ your code here\n        if (arr == null || arr.Count == 0 || k < 1)\n      \
    \      return new List<long>();\n        long[] arr_arr = arr.ToArray();\n   \
    \     long[] max_arr = new long[k];\n        int max_index = 0;\n        for (int\
    \ i = 0; i < arr_arr.Length; i++) {\n            if (arr_arr[i] > max_arr[max_index])\
    \ {\n                max_arr[max_index] = arr_arr[i];\n                max_index\
    \ = 0;\n            }\n            else if (arr_arr[i] == max_arr[max_index])\
    \ {\n                max_index++;\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        for (int i = 0; i < k; i++) {\n        \
    \    result.Add(max_arr[i]);\n        }\n        return result;", "        //\
    \ write your code here\n        if (arr == null || arr.Count == 0 || k < 1 ||\
    \ k > arr.Count)\n            return new List<long>();\n\n        long[] arr_arr\
    \ = arr.ToArray();\n        long[] max_arr = new long[k];\n        long max_count\
    \ = 0;\n        for (int i = 0; i < arr_arr.Length; i++) {\n            if (max_count\
    \ < k) {\n                max_arr[max_count] = arr_arr[i];\n                max_count++;\n\
    \            }\n            else {\n                if (arr_arr[i] > max_arr[max_count\
    \ - 1]) {\n                    max_arr[max_count - 1] = arr_arr[i];\n        \
    \        }\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < max_arr.Length; i++) {\n            result.Add(max_arr[i]);\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  if (arr.Count == 0) return new List<long>();\n        if (k == 0) return new\
    \ List<long>();\n        if (k > arr.Count) return arr;\n        List<long> result\
    \ = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(arr[i]);\n\
    \        }\n        for (int i = k; i < arr.Count; i++) {\n            if (result.Count\
    \ == k) {\n                result.Add(arr[i]);\n            }\n            else\
    \ if (result.Count < k) {\n                result.Add(arr[i]);\n            }\n\
    \            else if (arr[i] > result[result.Count - 1]) {\n                result[result.Count\
    \ - 1] = arr[i];\n            }\n        }\n        return result;", "       \
    \ // Write your code here\n        if (arr.Count < k)\n            return arr;\n\
    \        long[] arr_arr = arr.ToArray();\n        Arrays.Sort(arr_arr);\n    \
    \    List<long> result = new List<long>();\n        for (int i = 0; i < k; i++)\n\
    \            result.Add(arr_arr[i]);\n        return result;", "        // Write\
    \ your code here\n        int n = arr.Count;\n        if (n < k)\n           \
    \ return arr;\n        long[] max = new long[k];\n        for (int i = 0; i <\
    \ k; i++)\n            max[i] = arr[i];\n        for (int i = k; i < n; i++) {\n\
    \            for (int j = 0; j < k; j++) {\n                if (arr[i] > max[j])\
    \ {\n                    max[j] = arr[i];\n                    break;\n      \
    \          }\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++)\n            result.Add(max[i]);\n      \
    \  return result;", "        if (arr.Count < k)\n            throw new Exception(\"\
    Input is not valid\");\n        if (k == 0)\n            return new List<long>(new\
    \ long[] {});\n        if (k == 1)\n            return arr;\n        if (k ==\
    \ 2)\n            return new List<long>(new long[] { arr[0], arr[1] });\n    \
    \    if (k == 3)\n            return new List<long>(new long[] { arr[0], arr[1],\
    \ arr[2] });\n        if (k == 4)\n            return new List<long>(new long[]\
    \ { arr[0], arr[1], arr[2], arr[3] });\n        if (k == 5)\n            return\
    \ new List<long>(new long[] { arr[0], arr[1], arr[2], arr[3], arr[4] });\n   \
    \     if (k == 6)\n            return new List<long>(new long[] { arr[0], arr[1],\
    \ arr[2], arr[3], arr[4], arr[5] });\n        if (k == 7)\n            return\
    \ new List<long>(new long[] { arr[0], arr[1], arr[2], arr[3], arr[4], arr[5],\
    \ arr[6] });\n        if (k == 8)\n            return new List<long>(new long[]\
    \ { arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7] });\n     \
    \   if (k == 9)\n            return new List<long>(new long[] { arr[0], arr[1],\
    \ arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8] });\n        if (k ==\
    \ 10)\n            return new List<long>(new long[] { arr[0], arr[1], arr[2],\
    \ arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9] });\n        if (k ==\
    \ 11)\n            return new List<long>(new long[] { arr[0], arr[1], arr[2],\
    \ arr[3], arr[4], arr[5], arr[6], arr[7], arr", "        // Write your code here\n\
    \        if (arr.Count < k)\n            return new List<long>();\n        if\
    \ (arr.Count == k)\n            return arr;\n        long max = arr.Count;\n \
    \       long start = 0;\n        long end = arr.Count - 1;\n        while (start\
    \ < end) {\n            long mid = start + (end - start) / 2;\n            if\
    \ (arr[mid] > arr[end]) {\n                max = mid;\n                end = mid;\n\
    \            }\n            else if (arr[mid] < arr[end]) {\n                start\
    \ = mid + 1;\n            }\n            else {\n                start = mid;\n\
    \                end = mid;\n            }\n        }\n        if (arr[start]\
    \ > arr[end]) {\n            max = start;\n        }\n        else {\n       \
    \     max = end;\n        }\n        List<long> result = new List<long>();\n \
    \       for (int i = 0; i < k; i++) {\n            result.Add(arr[max]);\n   \
    \         max = max - 1;\n            if (max < 0) {\n                max = arr.Count\
    \ - 1;\n            }\n        }\n        return result;", "        if (arr.Count\
    \ < k) {\n            throw new Exception(\"Invalid Input\");\n        }\n   \
    \     long[] max = new long[k];\n        for (int i = 0; i < k; i++) {\n     \
    \       max[i] = arr[i];\n        }\n        for (int i = k; i < arr.Count; i++)\
    \ {\n            if (arr[i] > max[0]) {\n                max[0] = arr[i];\n  \
    \              for (int j = 1; j < k; j++) {\n                    max[j] = max[j\
    \ - 1];\n                }\n                max[k - 1] = arr[i];\n           \
    \ }\n            else if (arr[i] > max[k - 1]) {\n                max[k - 1] =\
    \ arr[i];\n            }\n        }\n        return List.Create(max);", "    \
    \    // Write your code here\n        if (arr.Count < k) {\n            throw\
    \ new Exception(\"Input is not valid\");\n        }\n        if (k == 1) {\n \
    \           return arr;\n        }\n        List<long> result = new List<long>();\n\
    \        int start = 0;\n        int end = arr.Count - 1;\n        while (start\
    \ < end) {\n            if (arr[start] < arr[end]) {\n                result.Add(arr[start]);\n\
    \                start++;\n            } else {\n                result.Add(arr[end]);\n\
    \                end--;\n            }\n        }\n        if (start < arr.Count)\
    \ {\n            result.Add(arr[start]);\n        }\n        if (result.Count\
    \ < k) {\n            throw new Exception(\"Input is not valid\");\n        }\n\
    \        return result;", "        // Write your code here\n        if (arr ==\
    \ null || arr.Count == 0 || k <= 0)\n            return new List<long>();\n  \
    \      if (k == 1)\n            return arr;\n        if (arr.Count < k)\n    \
    \        return arr;\n        long[] max = new long[k];\n        for (int i =\
    \ 0; i < k; i++)\n            max[i] = arr[i];\n        for (int i = k; i < arr.Count;\
    \ i++) {\n            if (arr[i] > max[0]) {\n                max[0] = arr[i];\n\
    \                for (int j = 1; j < k; j++) {\n                    if (max[j]\
    \ < max[0])\n                        max[j] = max[0];\n                }\n   \
    \         }\n        }\n        List<long> result = new List<long>();\n      \
    \  for (int i = 0; i < k; i++)\n            result.Add(max[i]);\n        return\
    \ result;", "        // Write your code here\n        int[] max = new int[k];\n\
    \        for (int i = 0; i < k; i++) {\n            max[i] = -1;\n        }\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (max[0] < arr[i])\
    \ {\n                max[0] = arr[i];\n            }\n            for (int j =\
    \ 1; j < k; j++) {\n                if (max[j] < arr[i]) {\n                 \
    \   max[j] = arr[i];\n                }\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        for (int i = 0; i < k; i++) {\n        \
    \    result.Add(max[i]);\n        }\n        return result;", "        if (arr\
    \ == null || arr.Count == 0 || k < 1 || k > arr.Count)\n            return new\
    \ List<long>();\n        long[] arr2 = arr.ToArray();\n        long[] max = new\
    \ long[k];\n        for (int i = 0; i < k; i++)\n            max[i] = arr2[i];\n\
    \        for (int i = k; i < arr2.Length; i++) {\n            if (arr2[i] > max[0])\
    \ {\n                max[0] = arr2[i];\n                for (int j = 1; j < k;\
    \ j++)\n                    max[j] = arr2[i];\n            }\n            else\
    \ if (arr2[i] > max[1]) {\n                max[1] = arr2[i];\n               \
    \ for (int j = 2; j < k; j++)\n                    max[j] = arr2[i];\n       \
    \     }\n            else if (arr2[i] > max[2]) {\n                max[2] = arr2[i];\n\
    \                for (int j = 3; j < k; j++)\n                    max[j] = arr2[i];\n\
    \            }\n        }\n        return new List<long>(max);", "        // Write\
    \ your code here\n        if (arr == null || arr.Count == 0 || k <= 0)\n     \
    \       return new List<long>();\n        if (k == 1)\n            return arr;\n\
    \        long[] arr1 = arr.ToArray();\n        Arrays.Sort(arr1);\n        long[]\
    \ arr2 = new long[k];\n        for (int i = 0; i < k; i++)\n            arr2[i]\
    \ = arr1[i];\n        return arr2;", "        // Write your code here\n      \
    \  if (arr.Count == 0)\n            return new List<long>();\n        if (arr.Count\
    \ < k)\n            return arr;\n        List<long> result = new List<long>();\n\
    \        int i = 0;\n        int j = 0;\n        while (i < arr.Count && j < k)\
    \ {\n            if (arr[i] > arr[j]) {\n                result.Add(arr[i]);\n\
    \                i++;\n            }\n            else {\n                result.Add(arr[j]);\n\
    \                j++;\n            }\n        }\n        while (i < arr.Count)\
    \ {\n            result.Add(arr[i]);\n            i++;\n        }\n        while\
    \ (j < k) {\n            result.Add(arr[j]);\n            j++;\n        }\n  \
    \      return result;", "        // Write your code here\n        long[] arr_\
    \ = arr.ToArray();\n        long[] max_ = new long[k];\n        long[] min_ =\
    \ new long[k];\n        long[] temp_ = new long[k];\n        long[] temp2_ = new\
    \ long[k];\n        long[] temp3_ = new long[k];\n        long[] temp4_ = new\
    \ long[k];\n        long[] temp5_ = new long[k];\n        long[] temp6_ = new\
    \ long[k];\n        long[] temp7_ = new long[k];\n        long[] temp8_ = new\
    \ long[k];\n        long[] temp9_ = new long[k];\n        long[] temp10_ = new\
    \ long[k];\n        long[] temp11_ = new long[k];\n        long[] temp12_ = new\
    \ long[k];\n        long[] temp13_ = new long[k];\n        long[] temp14_ = new\
    \ long[k];\n        long[] temp15_ = new long[k];\n        long[] temp16_ = new\
    \ long[k];\n        long[] temp17_ = new long[k];\n        long[] temp18_ = new\
    \ long[k];\n        long[] temp19_ = new long[k];\n        long[] temp20_ = new\
    \ long[k];\n        long[] temp21_ = new long[k];\n        long[] temp22_ = new\
    \ long[k];\n        long[] temp23_ = new long[k];\n        long[] temp24_ = new\
    \ long[k];\n        long[] temp25_ = new long[k];\n        long[] temp26_ = new\
    \ long[k];\n        long[] temp27_ = new long[k];\n        long[] temp28_ = new\
    \ long[k];\n        long[] temp29_ = new long[k];\n        long[] temp30_ = new\
    \ long[k];\n        long[] temp31_ = new long[k];\n        long[] temp32_ = new\
    \ long[k];\n        long[] temp33_ = new long[k];\n        long[] temp34_ = new\
    \ long[k];\n        long[] temp35_ = new long[k];\n        long[] temp36_ = new\
    \ long[k];\n        long", "        // Write your code here\n        if (arr.Count\
    \ < k)\n            return arr;\n        long[] arr2 = arr.ToArray();\n      \
    \  Arrays.Sort(arr2);\n        List<long> result = new List<long>();\n       \
    \ for (int i = 0; i < k; i++)\n            result.Add(arr2[i]);\n        return\
    \ result;", "        if (arr == null || arr.Count == 0 || k < 1)\n           \
    \ return new List<long>();\n        if (k > arr.Count)\n            return arr;\n\
    \        long[] arr2 = arr.ToArray();\n        Arrays.Sort(arr2);\n        List<long>\
    \ result = new List<long>();\n        for (int i = 0; i < k; i++)\n          \
    \  result.Add(arr2[i]);\n        return result;", "        // Write your code\
    \ here\n        if (arr == null || arr.Count == 0 || k <= 0)\n            return\
    \ new List<long>();\n        if (k == 1)\n            return arr;\n        if\
    \ (k == 2)\n            return arr.OrderByDescending();\n        long[] arr2 =\
    \ arr.ToArray();\n        int[] max = new int[arr2.Length];\n        int[] min\
    \ = new int[arr2.Length];\n        for (int i = 0; i < arr2.Length; i++) {\n \
    \           max[i] = arr2[i];\n            min[i] = arr2[i];\n        }\n    \
    \    for (int i = 1; i < arr2.Length; i++) {\n            if (arr2[i] > arr2[i\
    \ - 1]) {\n                max[i] = max[i - 1];\n            }\n            else\
    \ {\n                max[i] = arr2[i];\n            }\n        }\n        for\
    \ (int i = arr2.Length - 2; i >= 0; i--) {\n            if (arr2[i] > arr2[i +\
    \ 1]) {\n                min[i] = min[i + 1];\n            }\n            else\
    \ {\n                min[i] = arr2[i];\n            }\n        }\n        int[]\
    \ max2 = new int[k];\n        int[] min2 = new int[k];\n        for (int i = 0;\
    \ i < k; i++) {\n            max2[i] = max[i];\n            min2[i] = min[i];\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            for (int j = 0;\
    \ j < arr2.Length; j++) {\n                if (max2[i] == arr2[j] && min2[i] ==\
    \ arr2[j]) {\n                    max2[i] = arr2[j];\n                    min2[i]\
    \ = arr2[j];\n                    break;\n                }\n            }\n \
    \       }\n        List<long> result = new List<long>();\n        for (int i =\
    \ 0; i < k; i++) {\n            result.Add(max2[i", "        int n = arr.Count;\n\
    \        if (n == 0) return arr;\n        if (k > n) return arr;\n        int[]\
    \ max = new int[n];\n        int[] min = new int[n];\n        for (int i = 0;\
    \ i < n; i++) {\n            max[i] = i;\n            min[i] = i;\n        }\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                if (arr[i] > arr[j]) {\n                    max[i] =\
    \ j;\n                }\n                else if (arr[i] < arr[j]) {\n       \
    \             min[i] = j;\n                }\n            }\n        }\n     \
    \   int[] result = new int[k];\n        for (int i = 0; i < k; i++) {\n      \
    \      result[i] = max[i];\n        }\n        for (int i = k; i < n; i++) {\n\
    \            result[i % k] = min[i];\n        }\n        return arr.Select(x =>\
    \ arr[x]).ToList();", "        // write your code here\n        if (arr == null\
    \ || arr.Count == 0 || k <= 0)\n            return new List<long>();\n       \
    \ long[] arr_arr = arr.ToArray();\n        long[] max_arr = new long[k];\n   \
    \     for (int i = 0; i < k; i++)\n            max_arr[i] = arr_arr[i];\n    \
    \    for (int i = k; i < arr_arr.Length; i++) {\n            for (int j = 0; j\
    \ < k; j++) {\n                if (arr_arr[i] > max_arr[j])\n                \
    \    max_arr[j] = arr_arr[i];\n            }\n        }\n        return new List<long>(max_arr);",
  "        // Write your code here\n        long[] arr_ = arr.ToArray();\n       \
    \ long[] max_arr = new long[k];\n        for (int i = 0; i < k; i++) {\n     \
    \       max_arr[i] = arr_[i];\n        }\n        for (int i = k; i < arr.Count;\
    \ i++) {\n            if (arr_[i] > max_arr[k - 1]) {\n                max_arr[k\
    \ - 1] = arr_[i];\n            }\n            else {\n                for (int\
    \ j = k - 1; j >= 0; j--) {\n                    if (arr_[i] > max_arr[j]) {\n\
    \                        max_arr[j] = arr_[i];\n                    }\n      \
    \          }\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(max_arr[i]);\n\
    \        }\n        return result;", "        // write your code here\n      \
    \  int n = arr.Count;\n        if (n < k)\n            return new List<long>();\n\
    \        long[] max = new long[k];\n        for (int i = 0; i < k; i++)\n    \
    \        max[i] = arr[i];\n        for (int i = k; i < n; i++) {\n           \
    \ if (arr[i] > max[k - 1]) {\n                max[k - 1] = arr[i];\n         \
    \       for (int j = k - 1; j > 0; j--) {\n                    if (max[j] < max[j\
    \ - 1]) {\n                        long temp = max[j];\n                     \
    \   max[j] = max[j - 1];\n                        max[j - 1] = temp;\n       \
    \             }\n                }\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        for (int i = 0; i < k; i++)\n          \
    \  result.Add(max[i]);\n        return result;", "        int n = arr.Count;\n\
    \        if (n == 0) return new List<long>(new long[0]);\n        if (k == 0)\
    \ return new List<long>(new long[0]);\n        if (k > n) return arr;\n      \
    \  if (k == 1) return arr;\n        if (k == 2) return arr.OrderByDescending();\n\
    \        if (k == n) return arr.OrderByDescending();\n        int left = 0, right\
    \ = n - 1;\n        while (left < right) {\n            int mid = (left + right)\
    \ / 2;\n            if (arr[mid] > arr[right]) {\n                left = mid +\
    \ 1;\n            }\n            else {\n                right = mid;\n      \
    \      }\n        }\n        List<long> result = new List<long>();\n        for\
    \ (int i = 0; i < k; i++) {\n            result.Add(arr[left]);\n            left++;\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  if (arr.Count < k)\n            return new List<long>();\n        List<long>\
    \ result = new List<long>();\n        int i = 0;\n        int j = 0;\n       \
    \ while (i < arr.Count && j < k) {\n            if (arr[i] > arr[j]) {\n     \
    \           result.Add(arr[i]);\n                i++;\n            }\n       \
    \     else {\n                result.Add(arr[j]);\n                j++;\n    \
    \        }\n        }\n        while (i < arr.Count) {\n            result.Add(arr[i]);\n\
    \            i++;\n        }\n        while (j < k) {\n            result.Add(arr[j]);\n\
    \            j++;\n        }\n        return result;", "        int n = arr.Count;\n\
    \        if (n == 0) return new List<long>(new long[]{});\n        if (k == 0)\
    \ return new List<long>(new long[]{});\n        if (k > n) return arr;\n     \
    \   long[] max = new long[k];\n        for (int i = 0; i < k; i++) max[i] = arr[i];\n\
    \        for (int i = k; i < n; i++) {\n            if (arr[i] > max[k - 1]) {\n\
    \                max[k - 1] = arr[i];\n            }\n            else {\n   \
    \             for (int j = k - 1; j >= 0; j--) {\n                    if (max[j]\
    \ < arr[i]) {\n                        max[j] = arr[i];\n                    \
    \    break;\n                    }\n                }\n            }\n       \
    \ }\n        List<long> result = new List<long>();\n        for (int i = 0; i\
    \ < k; i++) result.Add(max[i]);\n        return result;", "        // Write your\
    \ code here\n        if (arr.Count < k) {\n            return arr;\n        }\n\
    \        else {\n            long[] max = new long[k];\n            for (int i\
    \ = 0; i < k; i++) {\n                max[i] = arr[i];\n            }\n      \
    \      for (int i = k; i < arr.Count; i++) {\n                if (arr[i] > max[k\
    \ - 1]) {\n                    max[k - 1] = arr[i];\n                }\n     \
    \           else {\n                    for (int j = k - 1; j >= 1; j--) {\n \
    \                       if (arr[i] > max[j - 1]) {\n                         \
    \   max[j - 1] = arr[i];\n                        }\n                        else\
    \ {\n                            max[j - 1] = max[j];\n                      \
    \  }\n                    }\n                }\n            }\n            List<long>\
    \ result = new List<long>();\n            for (int i = 0; i < k; i++) {\n    \
    \            result.Add(max[i]);\n            }\n            return result;\n\
    \        }", "        if (arr == null || arr.Count == 0 || k <= 0) return new\
    \ List<long>();\n        long[] max = new long[k];\n        for (int i = 0; i\
    \ < k; i++) {\n            max[i] = arr[0];\n        }\n        for (int i = 1;\
    \ i < arr.Count; i++) {\n            if (arr[i] > max[0]) {\n                max[0]\
    \ = arr[i];\n                for (int j = 1; j < k; j++) {\n                 \
    \   max[j] = max[j - 1];\n                }\n            }\n            else if\
    \ (arr[i] > max[k - 1]) {\n                max[k - 1] = arr[i];\n            }\n\
    \            else {\n                for (int j = k - 1; j >= 1; j--) {\n    \
    \                if (arr[i] > max[j]) {\n                        max[j] = arr[i];\n\
    \                        for (int kk = j - 1; kk >= 0; kk--) {\n             \
    \               max[kk] = max[kk + 1];\n                        }\n          \
    \              break;\n                    }\n                }\n            }\n\
    \        }\n        List<long> ans = new List<long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            ans.Add(max[i]);\n        }\n        return ans;",
  "        int n = arr.Count;\n        if (n == 0 || k == 0)\n            return new\
    \ List<long>(new long[0]);\n        if (k == 1)\n            return arr;\n   \
    \     if (k > n)\n            return arr;\n        long[] max = new long[k];\n\
    \        max[0] = arr[0];\n        for (int i = 1; i < k; i++) {\n           \
    \ max[i] = arr[i];\n            for (int j = i - 1; j >= 0; j--) {\n         \
    \       if (max[j] < max[i])\n                    max[i] = max[j];\n         \
    \   }\n        }\n        List<long> result = new List<long>(new long[k]);\n \
    \       for (int i = 0; i < k; i++)\n            result.Add(max[i]);\n       \
    \ return result;", "        // Write your code here\n        long[] arr_arr =\
    \ arr.ToArray();\n        Arrays.sort(arr_arr);\n        List<long> result = new\
    \ List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(arr_arr[i]);\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  if (arr.Count < k) {\n            return arr;\n        }\n        long[] max\
    \ = new long[k];\n        for (int i = 0; i < k; i++) {\n            max[i] =\
    \ arr[i];\n        }\n        for (int i = k; i < arr.Count; i++) {\n        \
    \    if (arr[i] > max[k - 1]) {\n                max[k - 1] = arr[i];\n      \
    \      }\n            else {\n                for (int j = k - 1; j >= 0; j--)\
    \ {\n                    if (max[j] < arr[i]) {\n                        max[j]\
    \ = arr[i];\n                    }\n                }\n            }\n       \
    \ }\n        List<long> result = new List<long>();\n        for (int i = 0; i\
    \ < k; i++) {\n            result.Add(max[i]);\n        }\n        return result;",
  "        // Write your code here\n        if (arr.Count == 0)\n            return\
    \ new List<long>();\n        if (k == 1)\n            return arr.OrderByDescending();\n\
    \        if (k > arr.Count)\n            return arr.OrderByDescending();\n   \
    \     List<long> result = new List<long>();\n        int i = 0;\n        while\
    \ (i < k) {\n            result.Add(arr[i]);\n            i++;\n        }\n  \
    \      while (i < arr.Count) {\n            if (result.Last() < arr[i])\n    \
    \            result.Add(arr[i]);\n            i++;\n        }\n        return\
    \ result;", "        // Write your code here\n        long[] arr_arr = arr.ToArray();\n\
    \        long[] arr_arr_sorted = arr_arr.Sort();\n        long[] arr_arr_sorted_k\
    \ = arr_arr_sorted.Clone();\n        for (int i = 0; i < k; i++) {\n         \
    \   arr_arr_sorted_k[i] = arr_arr_sorted[i];\n        }\n        return arr_arr_sorted_k;",
  "        // Write your code here\n        if (arr.Count == 0)\n            return\
    \ new List<long>(new long[0]);\n        if (k == 1)\n            return arr;\n\
    \        if (k > arr.Count)\n            return arr;\n        if (k == arr.Count)\n\
    \            return arr;\n        if (arr.Count == 1)\n            return arr;\n\
    \        if (arr.Count == 2)\n            return arr;\n        if (arr.Count ==\
    \ 3)\n            return arr;\n        if (arr.Count == 4)\n            return\
    \ arr;\n        if (arr.Count == 5)\n            return arr;\n        if (arr.Count\
    \ == 6)\n            return arr;\n        if (arr.Count == 7)\n            return\
    \ arr;\n        if (arr.Count == 8)\n            return arr;\n        if (arr.Count\
    \ == 9)\n            return arr;\n        if (arr.Count == 10)\n            return\
    \ arr;\n        if (arr.Count == 11)\n            return arr;\n        if (arr.Count\
    \ == 12)\n            return arr;\n        if (arr.Count == 13)\n            return\
    \ arr;\n        if (arr.Count == 14)\n            return arr;\n        if (arr.Count\
    \ == 15)\n            return arr;\n        if (arr.Count == 16)\n            return\
    \ arr;\n        if (arr.Count == 17)\n            return arr;\n        if (arr.Count\
    \ == 18)\n            return arr;\n        if (arr.Count == 19)\n            return\
    \ arr;\n        if (arr.Count == 20)\n            return arr;\n        if (arr.Count\
    \ == 21)\n            return arr;\n        if (arr.Count == 22)\n            return\
    \ arr;\n        if (arr.Count == 23)\n            return arr;\n        if (arr.Count\
    \ == 24)\n            return arr;\n        if (arr.Count == 25)\n            return\
    \ arr;\n        if (arr.Count == 26)\n            return arr;\n        if (arr.Count\
    \ == 27)\n            return arr;\n        if (arr.Count == 28)\n            return\
    \ arr;\n        if (arr.Count == 29)\n            return arr;\n        if (arr",
  "        // Write your code here\n        if (arr.Count < k)\n            return\
    \ arr;\n        List<long> result = new List<long>();\n        for (int i = 0;\
    \ i < k; i++)\n            result.Add(arr[i]);\n        for (int i = k; i < arr.Count;\
    \ i++) {\n            if (arr[i] > result[0]) {\n                result[0] = arr[i];\n\
    \                for (int j = 1; j < k; j++)\n                    result[j] =\
    \ arr[i - j];\n            }\n        }\n        return result;", "        //\
    \ Write your code here\n        int n = arr.Count;\n        int[] max = new int[n];\n\
    \        int[] min = new int[n];\n        for (int i = 0; i < n; i++) {\n    \
    \        max[i] = arr[i];\n            min[i] = arr[i];\n        }\n        for\
    \ (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n \
    \               if (max[i] < max[j]) {\n                    max[i] = max[j];\n\
    \                }\n                if (min[i] > min[j]) {\n                 \
    \   min[i] = min[j];\n                }\n            }\n        }\n        int[]\
    \ max_index = new int[k];\n        int[] min_index = new int[k];\n        for\
    \ (int i = 0; i < k; i++) {\n            max_index[i] = -1;\n            min_index[i]\
    \ = -1;\n        }\n        for (int i = 0; i < n; i++) {\n            if (max_index[max[i]\
    \ - min[i]] == -1) {\n                max_index[max[i] - min[i]] = i;\n      \
    \      }\n            if (min_index[max[i] - min[i]] == -1) {\n              \
    \  min_index[max[i] - min[i]] = i;\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        for (int i = 0; i < k; i++) {\n        \
    \    result.Add(arr[max_index[i]]);\n        }\n        return result;", "   \
    \     // Write your code here\n        long[] arr_ = arr.ToArray();\n        long[]\
    \ max_arr = new long[k];\n        long max_val = arr_[0];\n        for (int i\
    \ = 0; i < k; i++) {\n            max_arr[i] = max_val;\n        }\n        for\
    \ (int i = 1; i < arr.Count; i++) {\n            if (arr_[i] > max_val) {\n  \
    \              max_val = arr_[i];\n                for (int j = 0; j < k; j++)\
    \ {\n                    max_arr[j] = max_val;\n                }\n          \
    \  }\n            else {\n                max_arr[arr.Count - i - 1] = max_val;\n\
    \            }\n        }\n        return arr.Select(x => max_arr[(int)x - (int)arr[0]]).ToList();",
  "        if (arr.Count < k)\n            return arr;\n        if (k == 1)\n    \
    \        return arr.OrderByDescending();\n        long[] max = new long[k];\n\
    \        for (int i = 0; i < k; i++)\n            max[i] = arr[i];\n        for\
    \ (int i = k; i < arr.Count; i++) {\n            if (arr[i] > max[k - 1]) {\n\
    \                max[k - 1] = arr[i];\n                for (int j = k - 1; j >\
    \ 0; j--) {\n                    if (max[j] > max[j - 1]) {\n                \
    \        long temp = max[j];\n                        max[j] = max[j - 1];\n \
    \                       max[j - 1] = temp;\n                    }\n          \
    \      }\n            }\n        }\n        return List.of(max);", "        if\
    \ (arr.Count < k)\n            return arr;\n        long[] max = new long[k];\n\
    \        for (int i = 0; i < k; i++)\n            max[i] = arr[i];\n        for\
    \ (int i = k; i < arr.Count; i++) {\n            if (arr[i] > max[k - 1]) {\n\
    \                max[k - 1] = arr[i];\n                for (int j = k - 1; j >\
    \ 0; j--) {\n                    if (max[j] < max[j - 1])\n                  \
    \      max[j - 1] = max[j];\n                    else\n                      \
    \  break;\n                }\n            }\n        }\n        return List.of(max);",
  "        int n = arr.Count;\n        if (n == 0) return new List<long>(k);\n   \
    \     if (k == 1) return arr;\n        if (k > n) return arr;\n        if (k ==\
    \ n) return arr;\n        if (k == n - 1) return arr;\n        if (k == n - 2)\
    \ return arr;\n        if (k == n - 3) return arr;\n        if (k == n - 4) return\
    \ arr;\n        if (k == n - 5) return arr;\n        if (k == n - 6) return arr;\n\
    \        if (k == n - 7) return arr;\n        if (k == n - 8) return arr;\n  \
    \      if (k == n - 9) return arr;\n        if (k == n - 10) return arr;\n   \
    \     if (k == n - 11) return arr;\n        if (k == n - 12) return arr;\n   \
    \     if (k == n - 13) return arr;\n        if (k == n - 14) return arr;\n   \
    \     if (k == n - 15) return arr;\n        if (k == n - 16) return arr;\n   \
    \     if (k == n - 17) return arr;\n        if (k == n - 18) return arr;\n   \
    \     if (k == n - 19) return arr;\n        if (k == n - 20) return arr;\n   \
    \     if (k == n - 21) return arr;\n        if (k == n - 22) return arr;\n   \
    \     if (k == n - 23) return arr;\n        if (k == n - 24) return arr;\n   \
    \     if (k == n - 25) return arr;\n        if (k == n - 26) return arr;\n   \
    \     if (k == n - 27) return arr;\n        if (k == n - 28) return arr;\n   \
    \     if (k == n - 29) return arr;\n        if (k == n - 30) return arr;\n   \
    \     if (k == n - 31) return arr;\n        if (k == n - 32) return arr;\n   \
    \     if (k == n - 33) return arr;\n        if (k == n - 34) return arr;\n   \
    \     if (k == n - 35) return arr;", "        // Write your code here\n      \
    \  if (arr.Count < k) {\n            return arr;\n        }\n        List<long>\
    \ result = new List<long>();\n        long max = arr.Count;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (max < arr[i]) {\n            \
    \    max = arr[i];\n                result.Add(arr[i]);\n            }\n     \
    \   }\n        while (result.Count < k) {\n            result.Add(max);\n    \
    \    }\n        return result;", "        // Write your code here\n        if\
    \ (arr == null || arr.Count == 0 || k > arr.Count)\n            return new List<long>();\n\
    \        if (k == 1)\n            return arr;\n        if (k == 2)\n         \
    \   return arr.OrderByDescending();\n        if (k == arr.Count)\n           \
    \ return arr;\n        long[] max = new long[k];\n        for (int i = 0; i <\
    \ k; i++)\n            max[i] = arr[i];\n        for (int i = k; i < arr.Count;\
    \ i++) {\n            if (arr[i] > max[k - 1])\n                max[k - 1] = arr[i];\n\
    \            else if (arr[i] > max[k - 2])\n                max[k - 2] = arr[i];\n\
    \            else if (arr[i] > max[k - 3])\n                max[k - 3] = arr[i];\n\
    \        }\n        return Arrays.asList(max);", "        if (arr == null || arr.Count\
    \ == 0) return new List<long>();\n        if (k > arr.Count) return arr;\n   \
    \     if (k == 1) return arr;\n        if (k == 2) return arr.OrderByDescending(x\
    \ => x);\n        if (k == 3) return arr.OrderByDescending(x => x);\n        if\
    \ (k == 4) return arr.OrderByDescending(x => x);\n        if (k == 5) return arr.OrderByDescending(x\
    \ => x);\n        if (k == 6) return arr.OrderByDescending(x => x);\n        if\
    \ (k == 7) return arr.OrderByDescending(x => x);\n        if (k == 8) return arr.OrderByDescending(x\
    \ => x);\n        if (k == 9) return arr.OrderByDescending(x => x);\n        if\
    \ (k == 10) return arr.OrderByDescending(x => x);\n        if (k == 11) return\
    \ arr.OrderByDescending(x => x);\n        if (k == 12) return arr.OrderByDescending(x\
    \ => x);\n        if (k == 13) return arr.OrderByDescending(x => x);\n       \
    \ if (k == 14) return arr.OrderByDescending(x => x);\n        if (k == 15) return\
    \ arr.OrderByDescending(x => x);\n        if (k == 16) return arr.OrderByDescending(x\
    \ => x);\n        if (k == 17) return arr.OrderByDescending(x => x);\n       \
    \ if (k == 18) return arr.OrderByDescending(x => x);\n        if (k == 19) return\
    \ arr.OrderByDescending(x => x);\n        if (k == 20) return arr.OrderByDescending(x\
    \ => x);\n        if (k == 21) return arr.OrderByDescending(x => x);\n       \
    \ if (k == 22) return arr.OrderByDescending(x => x);\n        if (k == 23) return\
    \ arr.OrderByDescending(x => x);\n        if (k == 24) return arr.OrderByDescending(x\
    \ => x);\n        if (k == 25)", "        int n = arr.Count;\n        if (n ==\
    \ 0) return arr;\n        if (k == 0) return arr;\n        if (k > n) return arr;\n\
    \        if (k == 1) return arr;\n        if (k == 2) return arr;\n        if\
    \ (k == 3) return arr;\n        if (k == 4) return arr;\n        if (k == 5) return\
    \ arr;\n        if (k == 6) return arr;\n        if (k == 7) return arr;\n   \
    \     if (k == 8) return arr;\n        if (k == 9) return arr;\n        if (k\
    \ == 10) return arr;\n        if (k == 11) return arr;\n        if (k == 12) return\
    \ arr;\n        if (k == 13) return arr;\n        if (k == 14) return arr;\n \
    \       if (k == 15) return arr;\n        if (k == 16) return arr;\n        if\
    \ (k == 17) return arr;\n        if (k == 18) return arr;\n        if (k == 19)\
    \ return arr;\n        if (k == 20) return arr;\n        if (k == 21) return arr;\n\
    \        if (k == 22) return arr;\n        if (k == 23) return arr;\n        if\
    \ (k == 24) return arr;\n        if (k == 25) return arr;\n        if (k == 26)\
    \ return arr;\n        if (k == 27) return arr;\n        if (k == 28) return arr;\n\
    \        if (k == 29) return arr;\n        if (k == 30) return arr;\n        if\
    \ (k == 31) return arr;\n        if (k == 32) return arr;\n        if (k == 33)\
    \ return arr;\n        if (k == 34) return arr;\n        if (k == 35) return arr;\n\
    \        if (k == 36) return arr;\n        if (k == 37) return arr;\n        if\
    \ (k == 38) return arr;\n        if (k == 39) return arr;\n        if (k == 40)\
    \ return arr;\n        if (k == 41) return arr;\n        if (k == 42) return arr;\n\
    \        if (k == 43) return", "        // Write your code here\n        if (arr.Count\
    \ < k)\n            return arr;\n        long[] max = new long[k];\n        for\
    \ (int i = 0; i < k; i++)\n            max[i] = arr[i];\n        for (int i =\
    \ k; i < arr.Count; i++) {\n            if (arr[i] > max[k - 1]) {\n         \
    \       max[k - 1] = arr[i];\n                for (int j = k - 1; j > 0; j--)\
    \ {\n                    if (max[j] < max[j - 1])\n                        max[j\
    \ - 1] = max[j];\n                    else\n                        break;\n \
    \               }\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++)\n            result.Add(max[i]);\n      \
    \  return result;", "        if (arr == null || arr.Count == 0 || k < 0 || k >\
    \ arr.Count)\n            return new List<long>();\n        if (k == 0)\n    \
    \        return arr;\n        long[] max = new long[k];\n        for (int i =\
    \ 0; i < k; i++)\n            max[i] = arr[i];\n        for (int i = k; i < arr.Count;\
    \ i++) {\n            if (arr[i] > max[k - 1]) {\n                max[k - 1] =\
    \ arr[i];\n                for (int j = k - 1; j > 0; j--) {\n               \
    \     if (max[j] < max[j - 1])\n                        max[j - 1] = max[j];\n\
    \                    else\n                        break;\n                }\n\
    \            }\n        }\n        return new List<long>(max);", "        // Write\
    \ your code here\n        if (arr == null || arr.Count == 0 || k < 1 || k > arr.Count)\n\
    \            return new List<long>();\n        long[] arr_sorted = arr.ToArray();\n\
    \        Arrays.Sort(arr_sorted);\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++)\n            result.Add(arr_sorted[i]);\n\
    \        return result;", "        // Write your code here\n        long[] arr_arr\
    \ = arr.ToArray();\n        long[] max_arr = new long[k];\n        long max_val\
    \ = arr_arr[0];\n        for (int i = 0; i < k; i++) {\n            max_arr[i]\
    \ = max_val;\n        }\n        for (int i = 1; i < arr_arr.Length; i++) {\n\
    \            if (arr_arr[i] > max_val) {\n                max_val = arr_arr[i];\n\
    \            }\n        }\n        for (int i = 0; i < k; i++) {\n           \
    \ if (arr_arr[i] > max_val) {\n                max_arr[i] = arr_arr[i];\n    \
    \        }\n        }\n        List<long> result = new List<long>();\n       \
    \ for (int i = 0; i < k; i++) {\n            result.Add(max_arr[i]);\n       \
    \ }\n        return result;", "        // Write your code here\n        if (arr\
    \ == null || arr.Count == 0 || k < 0)\n            return new List<long>();\n\
    \        if (k == 0)\n            return arr.OrderByDescending();\n        if\
    \ (k == 1)\n            return arr.OrderByDescending();\n        if (k == 2)\n\
    \            return arr.OrderByDescending();\n        if (k == 3)\n          \
    \  return arr.OrderByDescending();\n        if (k == 4)\n            return arr.OrderByDescending();\n\
    \        if (k == 5)\n            return arr.OrderByDescending();\n        if\
    \ (k == 6)\n            return arr.OrderByDescending();\n        if (k == 7)\n\
    \            return arr.OrderByDescending();\n        if (k == 8)\n          \
    \  return arr.OrderByDescending();\n        if (k == 9)\n            return arr.OrderByDescending();\n\
    \        if (k == 10)\n            return arr.OrderByDescending();\n        if\
    \ (k == 11)\n            return arr.OrderByDescending();\n        if (k == 12)\n\
    \            return arr.OrderByDescending();\n        if (k == 13)\n         \
    \   return arr.OrderByDescending();\n        if (k == 14)\n            return\
    \ arr.OrderByDescending();\n        if (k == 15)\n            return arr.OrderByDescending();\n\
    \        if (k == 16)\n            return arr.OrderByDescending();\n        if\
    \ (k == 17)\n            return arr.OrderByDescending();\n        if (k == 18)\n\
    \            return arr.OrderByDescending();\n        if (k == 19)\n         \
    \   return arr.OrderByDescending();\n        if (k == 20)\n            return\
    \ arr.OrderByDescending();\n        if (k == 21)\n            return arr.OrderByDescending();\n\
    \        if (k == 22)\n            return arr.OrderByDescending();\n        if\
    \ (k == 23)\n            return arr.OrderByDescending();\n        if (k == 24)\n\
    \            return arr.OrderByDescending();\n        if (k == 25)\n         \
    \   return arr.OrderByDescending();\n        if (k == 26)\n            return",
  "        // write your code here\n        if (arr.Count < k)\n            return\
    \ arr;\n        long[] max = new long[k];\n        for (int i = 0; i < k; i++)\n\
    \            max[i] = arr[i];\n        for (int i = k; i < arr.Count; i++) {\n\
    \            if (arr[i] > max[k - 1])\n                max[k - 1] = arr[i];\n\
    \            else {\n                for (int j = k - 1; j >= 0; j--) {\n    \
    \                if (max[j] < arr[i])\n                        max[j] = arr[i];\n\
    \                    else\n                        break;\n                }\n\
    \            }\n        }\n        List<long> result = new List<long>();\n   \
    \     for (int i = 0; i < k; i++)\n            result.Add(max[i]);\n        return\
    \ result;", "        if (arr.Count < k)\n            throw new Exception(\"Invalid\
    \ Input\");\n        if (k == 0)\n            return new List<long>();\n     \
    \   if (k == 1)\n            return arr;\n        List<long> result = new List<long>();\n\
    \        long max = arr.Count;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (max < arr[i]) {\n                max = arr[i];\n            \
    \    result.Add(arr[i]);\n            }\n        }\n        if (result.Count <\
    \ k) {\n            result.Add(max);\n            while (result.Count < k) {\n\
    \                result.Add(max);\n            }\n        }\n        return result;",
  "        // Write your code here\n        if (arr == null || arr.Count == 0 || k\
    \ <= 0)\n            return new List<long>();\n        if (k == 1)\n         \
    \   return arr;\n        long[] max = new long[k];\n        max[0] = arr[0];\n\
    \        for (int i = 1; i < k; i++) {\n            max[i] = arr[i];\n       \
    \     for (int j = 0; j < i; j++) {\n                if (max[j] < max[i])\n  \
    \                  max[i] = max[j];\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        for (int i = 0; i < k; i++)\n          \
    \  result.Add(max[i]);\n        return result;", "        // Write your code here\n\
    \        if (arr == null || arr.Count == 0)\n            return new List<long>();\n\
    \        if (k > arr.Count)\n            return arr;\n        if (k == 1)\n  \
    \          return arr.OrderByDescending();\n        if (k == arr.Count)\n    \
    \        return arr;\n        List<long> result = new List<long>();\n        int\
    \ i = 0;\n        int j = 0;\n        while (i < arr.Count && j < k) {\n     \
    \       if (arr[i] > arr[j]) {\n                result.Add(arr[i]);\n        \
    \        i++;\n            } else {\n                result.Add(arr[j]);\n   \
    \             j++;\n            }\n        }\n        while (i < arr.Count) {\n\
    \            result.Add(arr[i]);\n            i++;\n        }\n        while (j\
    \ < k) {\n            result.Add(arr[j]);\n            j++;\n        }\n     \
    \   return result;", "        int n = arr.Count;\n        if (k > n)\n       \
    \     return arr;\n        int[] max = new int[n];\n        for (int i = 0; i\
    \ < n; i++)\n            max[i] = i;\n        for (int i = 0; i < n; i++) {\n\
    \            for (int j = i + 1; j < n; j++) {\n                if (arr[max[i]]\
    \ < arr[max[j]])\n                    max[i] = j;\n            }\n        }\n\
    \        List<long> result = new List<long>();\n        for (int i = 0; i < k;\
    \ i++)\n            result.Add(arr[max[i]]);\n        return result;", "     \
    \   // Write your code here\n        int n = arr.Count;\n        if (n == 0)\n\
    \            return new List<long>(new long[0]);\n        if (k == 1)\n      \
    \      return arr.OrderByDescending();\n        if (k > n)\n            return\
    \ arr.OrderByDescending();\n        int[] max = new int[k];\n        int[] min\
    \ = new int[k];\n        for (int i = 0; i < k; i++) {\n            max[i] = i;\n\
    \            min[i] = i;\n        }\n        for (int i = 0; i < n; i++) {\n \
    \           int index = max[0];\n            for (int j = 1; j < k; j++) {\n \
    \               if (arr[i] > arr[max[j]]) {\n                    index = max[j];\n\
    \                }\n                else if (arr[i] < arr[min[j]]) {\n       \
    \             index = min[j];\n                }\n            }\n            if\
    \ (index != i) {\n                long temp = arr[i];\n                arr[i]\
    \ = arr[index];\n                arr[index] = temp;\n                for (int\
    \ j = 0; j < k; j++) {\n                    if (i == max[j]) {\n             \
    \           max[j] = index;\n                    }\n                    else if\
    \ (i == min[j]) {\n                        min[j] = index;\n                 \
    \   }\n                }\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(arr[max[i]]);\n\
    \        }\n        return result;", "        if (arr == null || arr.Count ==\
    \ 0 || k < 0 || k > arr.Count)\n            return new List<long>();\n       \
    \ long[] max = new long[k];\n        for (int i = 0; i < k; i++)\n           \
    \ max[i] = arr[i];\n        for (int i = k; i < arr.Count; i++) {\n          \
    \  if (arr[i] > max[k - 1]) {\n                max[k - 1] = arr[i];\n        \
    \        for (int j = k - 1; j > 0; j--) {\n                    if (max[j] < max[j\
    \ - 1])\n                        max[j - 1] = max[j];\n                    else\n\
    \                        break;\n                }\n            }\n        }\n\
    \        List<long> result = new List<long>();\n        for (int i = 0; i < k;\
    \ i++)\n            result.Add(max[i]);\n        return result;", "        if\
    \ (arr == null || arr.Count == 0 || k < 1)\n            return new List<long>();\n\
    \        if (k > arr.Count)\n            return arr;\n        int[] max = new\
    \ int[k];\n        for (int i = 0; i < k; i++)\n            max[i] = i;\n    \
    \    for (int i = 0; i < arr.Count; i++) {\n            int maxIndex = i;\n  \
    \          for (int j = i + 1; j < k; j++) {\n                if (arr[max[j]]\
    \ < arr[maxIndex])\n                    maxIndex = j;\n            }\n       \
    \     if (arr[maxIndex] > arr[i])\n                max[maxIndex] = i;\n      \
    \  }\n        List<long> result = new List<long>();\n        for (int i = 0; i\
    \ < k; i++)\n            result.Add(arr[max[i]]);\n        return result;", " \
    \       // Write your code here\n        if (arr == null || arr.Count == 0 ||\
    \ k < 1) {\n            return new List<long>();\n        }\n        if (k ==\
    \ 1) {\n            return arr;\n        }\n        long[] max = new long[k];\n\
    \        max[0] = arr[0];\n        for (int i = 1; i < k; i++) {\n           \
    \ max[i] = arr[i];\n        }\n        for (int i = k; i < arr.Count; i++) {\n\
    \            if (arr[i] > max[k - 1]) {\n                max[k - 1] = arr[i];\n\
    \            }\n            else {\n                for (int j = k - 1; j >= 1;\
    \ j--) {\n                    if (arr[i] > max[j - 1]) {\n                   \
    \     max[j - 1] = arr[i];\n                        for (int k = j; k < k; k++)\
    \ {\n                            max[k] = max[k - 1];\n                      \
    \  }\n                        max[j] = arr[i];\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        for (int i = 0; i < k; i++) {\n        \
    \    result.Add(max[i]);\n        }\n        return result;", "        if (k ==\
    \ 0) return new List<long>();\n        if (k == 1) return arr;\n        if (k\
    \ == 2) return new List<long>(new long[]{arr[0], arr[1]});\n        if (k == 3)\
    \ return new List<long>(new long[]{arr[0], arr[1], arr[2]});\n        if (k ==\
    \ 4) return new List<long>(new long[]{arr[0], arr[1], arr[2], arr[3]});\n    \
    \    if (k == 5) return new List<long>(new long[]{arr[0], arr[1], arr[2], arr[3],\
    \ arr[4]});\n        if (k == 6) return new List<long>(new long[]{arr[0], arr[1],\
    \ arr[2], arr[3], arr[4], arr[5]});\n        if (k == 7) return new List<long>(new\
    \ long[]{arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]});\n        if\
    \ (k == 8) return new List<long>(new long[]{arr[0], arr[1], arr[2], arr[3], arr[4],\
    \ arr[5], arr[6], arr[7]});\n        if (k == 9) return new List<long>(new long[]{arr[0],\
    \ arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8]});\n        if\
    \ (k == 10) return new List<long>(new long[]{arr[0], arr[1], arr[2], arr[3], arr[4],\
    \ arr[5], arr[6], arr[7], arr[8], arr[9]});\n        if (k == 11) return new List<long>(new\
    \ long[]{arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8],\
    \ arr[9], arr[10]});\n        if (k == 12) return new List<long>(new long[]{arr[0],\
    \ arr[1], arr[2], arr[3], arr[4", "        // write your code here\n        int[]\
    \ max = new int[k];\n        for (int i = 0; i < k; i++) {\n            max[i]\
    \ = -1;\n        }\n        for (int i = 0; i < arr.Count; i++) {\n          \
    \  int index = 0;\n            for (int j = 0; j < k; j++) {\n               \
    \ if (max[j] < arr[i]) {\n                    index = j;\n                   \
    \ max[j] = arr[i];\n                }\n            }\n            if (index !=\
    \ i) {\n                arr[i] = arr[index];\n                arr[index] = max[index];\n\
    \            }\n        }\n        List<long> result = new List<long>();\n   \
    \     for (int i = 0; i < k; i++) {\n            result.Add(arr[i]);\n       \
    \ }\n        return result;", "        // Write your code here\n        if (arr\
    \ == null || arr.Count == 0 || k < 1 || k > arr.Count)\n            return new\
    \ List<long>();\n        long[] arr_tmp = arr.ToArray();\n        Arrays.Sort(arr_tmp);\n\
    \        long[] max_arr = new long[k];\n        for (int i = 0; i < k; i++)\n\
    \            max_arr[i] = arr_tmp[i];\n        return new List<long>(max_arr);",
  "        // Write your code here\n        long[] arr_arr = arr.ToArray();\n    \
    \    Arrays.sort(arr_arr);\n        int[] arr_arr_int = new int[arr_arr.length];\n\
    \        for (int i = 0; i < arr_arr.length; i++) {\n            arr_arr_int[i]\
    \ = (int)arr_arr[i];\n        }\n        int[] arr_arr_int_sorted = arr_arr_int.clone();\n\
    \        Arrays.sort(arr_arr_int_sorted);\n        int[] arr_arr_int_sorted_sorted\
    \ = arr_arr_int_sorted.clone();\n        int[] arr_arr_int_sorted_sorted_sorted\
    \ = arr_arr_int_sorted_sorted.clone();\n        int[] arr_arr_int_sorted_sorted_sorted_sorted\
    \ = arr_arr_int_sorted_sorted_sorted.clone();\n        int[] arr_arr_int_sorted_sorted_sorted_sorted_sorted\
    \ = arr_arr_int_sorted_sorted_sorted_sorted.clone();\n        int[] arr_arr_int_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = arr_arr_int_sorted_sorted_sorted_sorted_sorted.clone();\n        int[] arr_arr_int_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = arr_arr_int_sorted_sorted_sorted_sorted_sorted_sorted.clone();\n        int[]\
    \ arr_arr_int_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = arr_arr_int_sorted_sorted_sorted_sorted_sorted_sorted_sorted.clone();\n\
    \        int[] arr_arr_int_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = arr_arr_int_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.clone",
  "        // Write your code here\n        if (arr.Count < k) {\n            throw\
    \ new Exception(\"Invalid Input\");\n        }\n        long[] max = new long[k];\n\
    \        for (int i = 0; i < k; i++) {\n            max[i] = arr[i];\n       \
    \ }\n        for (int i = k; i < arr.Count; i++) {\n            if (arr[i] > max[k\
    \ - 1]) {\n                max[k - 1] = arr[i];\n            }\n            else\
    \ {\n                for (int j = k - 1; j >= 0; j--) {\n                    if\
    \ (max[j] < arr[i]) {\n                        max[j] = arr[i];\n            \
    \            break;\n                    }\n                }\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        for (int i\
    \ = 0; i < k; i++) {\n            result.Add(max[i]);\n        }\n        return\
    \ result;", "        // Write your code here\n        if (arr == null || arr.Count\
    \ == 0 || k < 1)\n            return new List<long>();\n        long[] arr_tmp\
    \ = arr.ToArray();\n        Arrays.Sort(arr_tmp);\n        long[] max_arr = new\
    \ long[k];\n        for (int i = 0; i < k; i++)\n            max_arr[i] = arr_tmp[i];\n\
    \        return max_arr;", "        if (arr == null || arr.Count == 0 || k <=\
    \ 0) return new List<long>();\n        if (arr.Count < k) return arr;\n      \
    \  long[] max = new long[k];\n        for (int i = 0; i < k; i++) max[i] = arr[i];\n\
    \        for (int i = k; i < arr.Count; i++) {\n            if (arr[i] > max[k\
    \ - 1]) {\n                max[k - 1] = arr[i];\n            }\n            else\
    \ {\n                for (int j = k - 1; j >= 0; j--) {\n                    if\
    \ (max[j] < arr[i]) {\n                        max[j] = arr[i];\n            \
    \            break;\n                    }\n                }\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        for (int i\
    \ = 0; i < k; i++) result.Add(max[i]);\n        return result;", "        // Write\
    \ your code here\n        if (arr.Count < k)\n            return arr;\n      \
    \  long[] max = new long[k];\n        for (int i = 0; i < k; i++)\n          \
    \  max[i] = arr[i];\n        for (int i = k; i < arr.Count; i++) {\n         \
    \   if (arr[i] > max[0]) {\n                max[0] = arr[i];\n               \
    \ for (int j = 1; j < k; j++) {\n                    if (arr[i] > max[j])\n  \
    \                      max[j] = arr[i];\n                }\n            }\n  \
    \      }\n        List<long> result = new List<long>();\n        for (int i =\
    \ 0; i < k; i++)\n            result.Add(max[i]);\n        return result;", " \
    \       // Write your code here\n        if (arr.Count < k) {\n            throw\
    \ new Exception(\"Invalid Input\");\n        }\n        if (k == 0) {\n      \
    \      return new List<long>();\n        }\n        List<long> result = new List<long>();\n\
    \        long max = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n \
    \           if (arr[i] > max) {\n                max = arr[i];\n            }\n\
    \        }\n        for (int i = 0; i < k; i++) {\n            if (arr[i] == max)\
    \ {\n                result.Add(arr[i]);\n            }\n        }\n        return\
    \ result;", "        if (arr.Count < k)\n            return arr;\n        long[]\
    \ max = new long[k];\n        for (int i = 0; i < k; i++)\n            max[i]\
    \ = arr[i];\n        for (int i = k; i < arr.Count; i++) {\n            if (arr[i]\
    \ > max[k - 1]) {\n                max[k - 1] = arr[i];\n                for (int\
    \ j = k - 1; j > 0; j--) {\n                    if (max[j] < max[j - 1])\n   \
    \                     max[j - 1] = max[j];\n                    else\n       \
    \                 break;\n                }\n            }\n        }\n      \
    \  List<long> result = new List<long>();\n        for (int i = 0; i < k; i++)\n\
    \            result.Add(max[i]);\n        return result;", "        if (arr.Count\
    \ < k)\n            return arr;\n        long[] max = new long[k];\n        for\
    \ (int i = 0; i < k; i++)\n            max[i] = arr[i];\n        for (int i =\
    \ k; i < arr.Count; i++) {\n            if (arr[i] > max[k - 1])\n           \
    \     max[k - 1] = arr[i];\n            else if (arr[i] > max[k]) {\n        \
    \        max[k] = arr[i];\n                for (int j = k - 1; j >= 0; j--) {\n\
    \                    if (max[j] < max[k])\n                        max[j] = max[k];\n\
    \                    k--;\n                }\n            }\n        }\n     \
    \   return List.Create(max);", "        // Write your code here\n        if (arr\
    \ == null || arr.Count == 0 || k < 1 || k > arr.Count)\n            return new\
    \ List<long>();\n        long[] arr_sorted = arr.ToArray();\n        Arrays.Sort(arr_sorted);\n\
    \        long[] max_k_numbers = new long[k];\n        for (int i = 0; i < k; i++)\n\
    \            max_k_numbers[i] = arr_sorted[i];\n        return max_k_numbers;",
  "        // Write your code here\n        long[] arr_ = arr.ToArray();\n       \
    \ long[] max_ = new long[k];\n        for (int i = 0; i < k; i++) {\n        \
    \    max_[i] = arr_[i];\n        }\n        for (int i = k; i < arr.Count; i++)\
    \ {\n            if (arr_[i] > max_[0]) {\n                max_[0] = arr_[i];\n\
    \                for (int j = 1; j < k; j++) {\n                    max_[j] =\
    \ max_[j - 1];\n                }\n                max_[k - 1] = arr_[i];\n  \
    \          }\n        }\n        List<long> result = new List<long>();\n     \
    \   for (int i = 0; i < k; i++) {\n            result.Add(max_[i]);\n        }\n\
    \        return result;", "        if (arr.Count < k)\n            throw new Exception(\"\
    Invalid Input\");\n        long[] arr_sorted = arr.ToArray();\n        Arrays.Sort(arr_sorted);\n\
    \        List<long> result = new List<long>();\n        for (int i = 0; i < k;\
    \ i++)\n            result.Add(arr_sorted[i]);\n        return result;", "   \
    \     // Write your code here\n        long[] arr_copy = arr.ToArray();\n    \
    \    Arrays.sort(arr_copy);\n        List<long> result = new List<long>();\n \
    \       for (int i = 0; i < k; i++) {\n            result.Add(arr_copy[i]);\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  long[] arr_arr = arr.ToArray();\n        long[] max_arr = new long[k];\n  \
    \      for (int i = 0; i < k; i++) {\n            max_arr[i] = arr_arr[i];\n \
    \       }\n        for (int i = k; i < arr.Count; i++) {\n            if (arr_arr[i]\
    \ > max_arr[k - 1]) {\n                max_arr[k - 1] = arr_arr[i];\n        \
    \    }\n            for (int j = k - 1; j > 0; j--) {\n                if (arr_arr[i]\
    \ > max_arr[j - 1]) {\n                    max_arr[j - 1] = arr_arr[i];\n    \
    \            }\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(max_arr[i]);\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  long[] arr_arr = arr.ToArray();\n        Arrays.sort(arr_arr);\n        long[]\
    \ result = new long[k];\n        for (int i = 0; i < k; i++) {\n            result[i]\
    \ = arr_arr[i];\n        }\n        return List.of(result);", "        int n =\
    \ arr.Count;\n        if (n == 0) return arr;\n        if (k > n) return arr;\n\
    \        if (k == n) return arr;\n        if (k == 1) return arr;\n        if\
    \ (k == 2) return arr;\n        if (k == 3) return arr;\n        if (k == 4) return\
    \ arr;\n        if (k == 5) return arr;\n        if (k == 6) return arr;\n   \
    \     if (k == 7) return arr;\n        if (k == 8) return arr;\n        if (k\
    \ == 9) return arr;\n        if (k == 10) return arr;\n        if (k == 11) return\
    \ arr;\n        if (k == 12) return arr;\n        if (k == 13) return arr;\n \
    \       if (k == 14) return arr;\n        if (k == 15) return arr;\n        if\
    \ (k == 16) return arr;\n        if (k == 17) return arr;\n        if (k == 18)\
    \ return arr;\n        if (k == 19) return arr;\n        if (k == 20) return arr;\n\
    \        if (k == 21) return arr;\n        if (k == 22) return arr;\n        if\
    \ (k == 23) return arr;\n        if (k == 24) return arr;\n        if (k == 25)\
    \ return arr;\n        if (k == 26) return arr;\n        if (k == 27) return arr;\n\
    \        if (k == 28) return arr;\n        if (k == 29) return arr;\n        if\
    \ (k == 30) return arr;\n        if (k == 31) return arr;\n        if (k == 32)\
    \ return arr;\n        if (k == 33) return arr;\n        if (k == 34) return arr;\n\
    \        if (k == 35) return arr;\n        if (k == 36) return arr;\n        if\
    \ (k == 37) return arr;\n        if (k == 38) return arr;\n        if (k == 39)\
    \ return arr;\n        if (k == 40) return arr;\n        if (k == 41) return arr;\n\
    \        if (k == 42) return arr;\n        if (k == 43) return", "        // Write\
    \ your code here\n        int n = arr.Count;\n        if (n == 0)\n          \
    \  return new List<long>();\n        if (n == 1)\n            return arr;\n  \
    \      if (k == 1)\n            return arr;\n        int[] dp = new int[n];\n\
    \        for (int i = 0; i < n; i++)\n            dp[i] = i;\n        for (int\
    \ i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n          \
    \      if (arr[dp[j]] < arr[dp[i]])\n                    dp[i] = j;\n        \
    \    }\n        }\n        int max = dp[0];\n        for (int i = 1; i < k; i++)\
    \ {\n            if (arr[dp[i]] > arr[max])\n                max = dp[i];\n  \
    \      }\n        List<long> res = new List<long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            res.Add(arr[dp[i]]);\n        }\n        return res;",
  "        // Write your code here\n        int n = arr.Count;\n        if (n < k)\
    \ {\n            return arr;\n        }\n        long[] max = new long[k];\n \
    \       for (int i = 0; i < k; i++) {\n            max[i] = arr[i];\n        }\n\
    \        for (int i = k; i < n; i++) {\n            if (arr[i] > max[k - 1]) {\n\
    \                max[k - 1] = arr[i];\n            }\n            else {\n   \
    \             for (int j = k - 1; j >= 0; j--) {\n                    if (max[j]\
    \ < arr[i]) {\n                        max[j] = arr[i];\n                    }\n\
    \                }\n            }\n        }\n        List<long> result = new\
    \ List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(max[i]);\n\
    \        }\n        return result;", "        if (arr == null || arr.Count ==\
    \ 0 || k < 1) return new List<long>();\n        long[] max = new long[k];\n  \
    \      for (int i = 0; i < k; i++) max[i] = arr[i];\n        for (int i = k; i\
    \ < arr.Count; i++) {\n            if (arr[i] > max[k - 1]) {\n              \
    \  max[k - 1] = arr[i];\n            }\n            else {\n                for\
    \ (int j = k - 1; j >= 0; j--) {\n                    if (arr[i] > max[j]) {\n\
    \                        max[j] = arr[i];\n                        break;\n  \
    \                  }\n                }\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        for (int i = 0; i < k; i++) result.Add(max[i]);\n\
    \        return result;", "        // Write your code here\n        if (arr.Count\
    \ < k)\n            return arr;\n        long[] max = new long[k];\n        for\
    \ (int i = 0; i < k; i++)\n            max[i] = arr[i];\n        for (int i =\
    \ k; i < arr.Count; i++) {\n            if (arr[i] > max[k - 1]) {\n         \
    \       max[k - 1] = arr[i];\n                for (int j = k - 1; j > 0; j--)\
    \ {\n                    if (max[j] < max[j - 1]) {\n                        long\
    \ temp = max[j];\n                        max[j] = max[j - 1];\n             \
    \           max[j - 1] = temp;\n                    }\n                }\n   \
    \         }\n        }\n        List<long> result = new List<long>();\n      \
    \  for (int i = 0; i < k; i++)\n            result.Add(max[i]);\n        return\
    \ result;", "        // Write your code here\n        if (arr.Count < k)\n   \
    \         return arr;\n        long[] arr_sorted = arr.ToArray();\n        Arrays.Sort(arr_sorted);\n\
    \        List<long> result = new List<long>();\n        for (int i = 0; i < k;\
    \ i++)\n            result.Add(arr_sorted[i]);\n        return result;", "   \
    \     if (arr == null || arr.Count == 0 || k < 0)\n            return new List<long>();\n\
    \        if (k == 0)\n            return arr;\n        if (k == 1)\n         \
    \   return arr.OrderByDescending();\n        int[] max = new int[k];\n       \
    \ for (int i = 0; i < k; i++)\n            max[i] = -1;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            int index = 0;\n            for (int j\
    \ = 0; j < k; j++) {\n                if (arr[i] > max[j]) {\n               \
    \     index = j;\n                    max[j] = arr[i];\n                }\n  \
    \          }\n            if (index != 0) {\n                for (int j = 0; j\
    \ < k; j++) {\n                    if (j != index) {\n                       \
    \ max[j] = max[j] - arr[i];\n                    }\n                }\n      \
    \      }\n        }\n        List<long> result = new List<long>();\n        for\
    \ (int i = 0; i < k; i++) {\n            if (max[i] != -1)\n                result.Add(max[i]);\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  if (arr.Count == 0) return new List<long>();\n        if (k == 1) return arr;\n\
    \        long max = arr.Count;\n        long[] max_arr = new long[k];\n      \
    \  for (int i = 0; i < k; i++) max_arr[i] = arr[i];\n        for (int i = k; i\
    \ < arr.Count; i++) {\n            if (arr[i] > max) {\n                max =\
    \ arr[i];\n                for (int j = 0; j < k; j++) max_arr[j] = arr[i - k\
    \ + j];\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++) result.Add(max_arr[i]);\n        return result;",
  "        // write your code here\n        if (arr == null || arr.Count == 0 || k\
    \ < 1)\n            return new List<long>();\n        long[] arr_arr = arr.ToArray();\n\
    \        long[] max_arr = new long[k];\n        for (int i = 0; i < k; i++)\n\
    \            max_arr[i] = arr_arr[i];\n        for (int i = k; i < arr_arr.Length;\
    \ i++) {\n            for (int j = 0; j < k; j++) {\n                if (arr_arr[i]\
    \ > max_arr[j]) {\n                    max_arr[j] = arr_arr[i];\n            \
    \    }\n            }\n        }\n        return arr.Select(x => max_arr[(int)x]).ToList();",
  "        // write your code here\n        if (arr.Count < k) {\n            return\
    \ arr;\n        }\n        long[] max = new long[k];\n        for (int i = 0;\
    \ i < k; i++) {\n            max[i] = arr[i];\n        }\n        for (int i =\
    \ k; i < arr.Count; i++) {\n            if (arr[i] > max[0]) {\n             \
    \   max[0] = arr[i];\n            }\n            for (int j = 1; j < k; j++) {\n\
    \                if (arr[i] > max[j]) {\n                    max[j] = arr[i];\n\
    \                }\n            }\n        }\n        List<long> result = new\
    \ List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(max[i]);\n\
    \        }\n        return result;", "        if (arr == null || arr.Count ==\
    \ 0 || k < 1 || k > arr.Count)\n            throw new Exception(\"Invalid input\"\
    );\n        int[] max = new int[arr.Count];\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            max[i] = i;\n        }\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n            \
    \    if (arr[max[i]] < arr[max[j]]) {\n                    max[i] = j;\n     \
    \           }\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(arr[max[i]]);\n\
    \        }\n        return result;", "        if (arr == null || arr.Count ==\
    \ 0 || k <= 0) return new List<long>();\n        long[] max = new long[k];\n \
    \       for (int i = 0; i < k; i++) max[i] = -1;\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (max[0] < arr[i]) max[0] = arr[i];\n     \
    \       for (int j = 1; j < k; j++) {\n                if (max[j] < arr[i]) max[j]\
    \ = arr[i];\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++) result.Add(max[i]);\n        return result;",
  "        if (arr == null || arr.Count == 0 || k < 1 || k > arr.Count)\n        \
    \    return new List<long>();\n        long[] arr_arr = arr.ToArray();\n     \
    \   Arrays.Sort(arr_arr);\n        List<long> result = new List<long>();\n   \
    \     for (int i = 0; i < k; i++)\n            result.Add(arr_arr[i]);\n     \
    \   return result;", "        int n = arr.Count;\n        if (k > n)\n       \
    \     return arr;\n        int[] max = new int[n];\n        for (int i = 0; i\
    \ < n; i++) {\n            max[i] = i;\n        }\n        for (int i = 0; i <\
    \ k; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if\
    \ (arr[max[i]] < arr[max[j]]) {\n                    max[i] = max[j];\n      \
    \          }\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(arr[max[i]]);\n\
    \        }\n        return result;", "        int n = arr.Count;\n        if (n\
    \ == 0) return new List<long>(new long[0]);\n        if (k > n) return arr;\n\
    \        long[] max = new long[k];\n        for (int i = 0; i < k; i++) max[i]\
    \ = arr[i];\n        for (int i = k; i < n; i++) {\n            if (arr[i] > max[k\
    \ - 1]) {\n                max[k - 1] = arr[i];\n            }\n            else\
    \ {\n                for (int j = k - 1; j >= 0; j--) {\n                    if\
    \ (max[j] < arr[i]) {\n                        max[j] = arr[i];\n            \
    \            break;\n                    }\n                }\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        for (int i\
    \ = 0; i < k; i++) result.Add(max[i]);\n        return result;", "        // Write\
    \ your code here\n        int[] arr_int = new int[arr.Count];\n        for (int\
    \ i = 0; i < arr.Count; i++)\n            arr_int[i] = (int)arr[i];\n        Arrays.sort(arr_int);\n\
    \        int[] result = new int[k];\n        for (int i = 0; i < k; i++)\n   \
    \         result[i] = arr_int[i];\n        return List.of(result);", "       \
    \ // Write your code here\n        if (arr.Count < k) {\n            throw new\
    \ Exception(\"Invalid Input\");\n        }\n        if (k == 1) {\n          \
    \  return arr;\n        }\n        long[] max = new long[k];\n        for (int\
    \ i = 0; i < k; i++) {\n            max[i] = arr[i];\n        }\n        for (int\
    \ i = k; i < arr.Count; i++) {\n            if (arr[i] > max[k - 1]) {\n     \
    \           max[k - 1] = arr[i];\n            }\n            else {\n        \
    \        for (int j = k - 1; j >= 1; j--) {\n                    if (arr[i] >\
    \ max[j]) {\n                        max[j] = arr[i];\n                      \
    \  max[j - 1] = max[j];\n                    }\n                }\n          \
    \      max[0] = arr[i];\n            }\n        }\n        List<long> result =\
    \ new List<long>();\n        for (int i = 0; i < k; i++) {\n            result.Add(max[i]);\n\
    \        }\n        return result;", "        if (arr == null || arr.Count ==\
    \ 0 || k <= 0) return new List<long>();\n        int n = arr.Count;\n        int[]\
    \ max = new int[n];\n        for (int i = 0; i < n; ++i) {\n            max[i]\
    \ = i;\n        }\n        for (int i = 0; i < n; ++i) {\n            for (int\
    \ j = i + 1; j < n; ++j) {\n                if (arr[max[i]] < arr[max[j]]) {\n\
    \                    max[i] = j;\n                }\n            }\n        }\n\
    \        List<long> result = new List<long>();\n        for (int i = 0; i < k;\
    \ ++i) {\n            result.Add(arr[max[i]]);\n        }\n        return result;",
  "        if (arr == null || arr.Count == 0 || k < 0) {\n            return new List<long>();\n\
    \        }\n        if (k == 0) {\n            return arr;\n        }\n      \
    \  if (arr.Count == 1) {\n            return arr;\n        }\n        if (arr.Count\
    \ == 2) {\n            return arr;\n        }\n        if (arr.Count == 3) {\n\
    \            return arr;\n        }\n        if (arr.Count == 4) {\n         \
    \   return arr;\n        }\n        if (arr.Count == 5) {\n            return\
    \ arr;\n        }\n        if (arr.Count == 6) {\n            return arr;\n  \
    \      }\n        if (arr.Count == 7) {\n            return arr;\n        }\n\
    \        if (arr.Count == 8) {\n            return arr;\n        }\n        if\
    \ (arr.Count == 9) {\n            return arr;\n        }\n        if (arr.Count\
    \ == 10) {\n            return arr;\n        }\n        if (arr.Count == 11) {\n\
    \            return arr;\n        }\n        if (arr.Count == 12) {\n        \
    \    return arr;\n        }\n        if (arr.Count == 13) {\n            return\
    \ arr;\n        }\n        if (arr.Count == 14) {\n            return arr;\n \
    \       }\n        if (arr.Count == 15) {\n            return arr;\n        }\n\
    \        if (arr.Count == 16) {\n            return arr;\n        }\n        if\
    \ (arr.Count == 17) {\n            return arr;\n        }\n        if (arr.Count\
    \ == 18) {\n            return arr;\n        }\n        if (arr.Count == 19) {\n\
    \            return arr;\n        }\n        if (arr.Count == 20) {\n        \
    \    return arr;\n        }\n        if (arr.Count == 21) {\n            return\
    \ arr;\n        }\n        if (arr.Count == 22) {\n            return arr;\n \
    \       }\n        if (arr.Count == 23) {\n            return arr;\n        }\n\
    \        if (arr.Count == 24) {\n            return arr;\n        }\n        if\
    \ (arr.Count == 25", "        int n = arr.Count;\n        if (n == 0)\n      \
    \      return new List<long>(new long[] {});\n        if (n == 1)\n          \
    \  return new List<long>(new long[] { arr[0] });\n        if (k == 1)\n      \
    \      return new List<long>(new long[] { arr[0] });\n        if (k == n)\n  \
    \          return arr;\n        if (k > n)\n            return arr;\n        if\
    \ (k == 0)\n            return new List<long>(new long[] {});\n        if (k ==\
    \ 2)\n            return new List<long>(new long[] { arr[0], arr[1] });\n    \
    \    if (k == 3)\n            return new List<long>(new long[] { arr[0], arr[1],\
    \ arr[2] });\n        if (k == 4)\n            return new List<long>(new long[]\
    \ { arr[0], arr[1], arr[2], arr[3] });\n        if (k == 5)\n            return\
    \ new List<long>(new long[] { arr[0], arr[1], arr[2], arr[3], arr[4] });\n   \
    \     if (k == 6)\n            return new List<long>(new long[] { arr[0], arr[1],\
    \ arr[2], arr[3], arr[4], arr[5] });\n        if (k == 7)\n            return\
    \ new List<long>(new long[] { arr[0], arr[1], arr[2], arr[3], arr[4], arr[5],\
    \ arr[6] });\n        if (k == 8)\n            return new List<long>(new long[]\
    \ { arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7] });\n     \
    \   if (k == 9)\n            return new List<long>(new long[] { arr[0], arr[1],\
    \ arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8] });\n        if (k ==\
    \ 10)\n            return new List<long>(new long[] { arr[0], arr[1], arr[2],\
    \ arr[3], arr[4], arr[", "        if (arr == null || arr.Count < k)\n        \
    \    return new List<long>();\n        long[] max = new long[k];\n        for\
    \ (int i = 0; i < k; i++)\n            max[i] = arr[i];\n        for (int i =\
    \ k; i < arr.Count; i++) {\n            if (arr[i] > max[k - 1])\n           \
    \     max[k - 1] = arr[i];\n            else {\n                for (int j = k\
    \ - 1; j >= 1; j--) {\n                    if (max[j] < max[j - 1])\n        \
    \                max[j - 1] = max[j];\n                    else\n            \
    \            break;\n                }\n                max[0] = arr[i];\n   \
    \         }\n        }\n        return List.Create(max);", "        if (arr ==\
    \ null || arr.Count < k) {\n            return new List<long>();\n        }\n\
    \        List<long> result = new List<long>();\n        int[] max = new int[arr.Count];\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            max[i] = i;\n    \
    \    }\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j\
    \ = i + 1; j < arr.Count; j++) {\n                if (arr[max[i]] < arr[max[j]])\
    \ {\n                    max[i] = j;\n                }\n            }\n     \
    \   }\n        for (int i = 0; i < k; i++) {\n            result.Add(arr[max[i]]);\n\
    \        }\n        return result;", "        if (arr == null || arr.Count ==\
    \ 0) return new List<long>();\n        if (k > arr.Count) return arr;\n      \
    \  if (k == arr.Count) return arr;\n        if (k == 1) return arr;\n        if\
    \ (k == 2) return arr.OrderByDescending();\n        if (k == 3) return arr.OrderByDescending();\n\
    \        if (k == 4) return arr.OrderByDescending();\n        if (k == 5) return\
    \ arr.OrderByDescending();\n        if (k == 6) return arr.OrderByDescending();\n\
    \        if (k == 7) return arr.OrderByDescending();\n        if (k == 8) return\
    \ arr.OrderByDescending();\n        if (k == 9) return arr.OrderByDescending();\n\
    \        if (k == 10) return arr.OrderByDescending();\n        if (k == 11) return\
    \ arr.OrderByDescending();\n        if (k == 12) return arr.OrderByDescending();\n\
    \        if (k == 13) return arr.OrderByDescending();\n        if (k == 14) return\
    \ arr.OrderByDescending();\n        if (k == 15) return arr.OrderByDescending();\n\
    \        if (k == 16) return arr.OrderByDescending();\n        if (k == 17) return\
    \ arr.OrderByDescending();\n        if (k == 18) return arr.OrderByDescending();\n\
    \        if (k == 19) return arr.OrderByDescending();\n        if (k == 20) return\
    \ arr.OrderByDescending();\n        if (k == 21) return arr.OrderByDescending();\n\
    \        if (k == 22) return arr.OrderByDescending();\n        if (k == 23) return\
    \ arr.OrderByDescending();\n        if (k == 24) return arr.OrderByDescending();\n\
    \        if (k == 25) return arr.OrderByDescending();\n        if (k == 26) return\
    \ arr.OrderByDescending();\n        if (k == 27) return arr.OrderByDescending();\n\
    \        if (k == 28) return arr.OrderByDescending();\n        if (k == 29) return\
    \ arr.OrderByDescending();\n        if (k == 30", "        // Write your code\
    \ here\n        if (arr.Count == 0)\n            return new List<long>();\n  \
    \      if (k == 1)\n            return arr.OrderByDescending();\n        if (k\
    \ > arr.Count)\n            return arr.OrderByDescending();\n        long[] max\
    \ = new long[k];\n        for (int i = 0; i < k; i++)\n            max[i] = arr[i];\n\
    \        for (int i = k; i < arr.Count; i++) {\n            if (arr[i] > max[k\
    \ - 1])\n                max[k - 1] = arr[i];\n        }\n        List<long> result\
    \ = new List<long>();\n        for (int i = 0; i < k; i++)\n            result.Add(max[i]);\n\
    \        return result;", "        int n = arr.Count;\n        if (n == 0) return\
    \ new List<long>(new long[0]);\n        if (k == 0) return arr.OrderByDescending();\n\
    \        if (k > n) return arr.OrderByDescending();\n        if (k == n) return\
    \ arr;\n        int[] max = new int[n];\n        int[] min = new int[n];\n   \
    \     for (int i = 0; i < n; i++) {\n            max[i] = i;\n            min[i]\
    \ = i;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int\
    \ j = i + 1; j < n; j++) {\n                if (arr[i] > arr[j]) {\n         \
    \           max[i] = j;\n                }\n                else if (arr[i] <\
    \ arr[j]) {\n                    min[i] = j;\n                }\n            }\n\
    \        }\n        int[] result = new int[k];\n        for (int i = 0; i < k;\
    \ i++) {\n            result[i] = max[i];\n        }\n        for (int i = k;\
    \ i < n; i++) {\n            result[i - k] = min[i];\n        }\n        return\
    \ arr.OrderByDescending(result);", "        // Write your code here\n        if\
    \ (arr == null || arr.Count == 0 || k < 1 || k > arr.Count)\n            return\
    \ new List<long>();\n        long[] arr_ = arr.ToArray();\n        long[] max_\
    \ = new long[k];\n        for (int i = 0; i < k; i++)\n            max_[i] = arr_[i];\n\
    \        for (int i = k; i < arr.Count; i++) {\n            for (int j = 0; j\
    \ < k; j++) {\n                if (arr_[i] > max_[j])\n                    max_[j]\
    \ = arr_[i];\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++)\n            result.Add(max_[i]);\n     \
    \   return result;", "        if (arr.Count < k)\n            return arr;\n  \
    \      long[] max = new long[k];\n        for (int i = 0; i < k; i++)\n      \
    \      max[i] = arr[i];\n        for (int i = k; i < arr.Count; i++) {\n     \
    \       if (arr[i] > max[k - 1])\n                max[k - 1] = arr[i];\n     \
    \       else {\n                for (int j = k - 1; j >= 1; j--) {\n         \
    \           if (arr[i] > max[j - 1])\n                        max[j - 1] = arr[i];\n\
    \                    else\n                        break;\n                }\n\
    \            }\n        }\n        List<long> result = new List<long>();\n   \
    \     for (int i = 0; i < k; i++)\n            result.Add(max[i]);\n        return\
    \ result;", "        if (arr == null || arr.Count == 0 || k < 0 || k > arr.Count)\n\
    \            return new List<long>();\n        int[] max = new int[arr.Count];\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            max[i] = i;\n    \
    \    }\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j\
    \ = i + 1; j < arr.Count; j++) {\n                if (arr[i] > arr[j]) {\n   \
    \                 max[i] = j;\n                }\n            }\n        }\n \
    \       List<long> result = new List<long>();\n        for (int i = 0; i < k;\
    \ i++) {\n            result.Add(arr[max[i]]);\n        }\n        return result;",
  "        // Write your code here\n        long[] arr_ = arr.ToArray();\n       \
    \ long[] max_ = new long[k];\n        long[] min_ = new long[k];\n        for\
    \ (int i = 0; i < k; i++) {\n            min_[i] = arr_[i];\n        }\n     \
    \   for (int i = k - 1; i >= 0; i--) {\n            max_[i] = arr_[i];\n     \
    \       for (int j = i + 1; j < k; j++) {\n                if (arr_[j] > max_[i])\
    \ {\n                    max_[i] = arr_[j];\n                }\n            }\n\
    \        }\n        List<long> ret = new List<long>();\n        for (int i = 0;\
    \ i < k; i++) {\n            ret.Add(max_[i]);\n        }\n        return ret;",
  "        int n = arr.Count;\n        if (n == 0) return new List<long>(new long[0]);\n\
    \        if (k == 0) return new List<long>(new long[0]);\n        if (k > n) return\
    \ arr;\n        long[] max = new long[k];\n        for (int i = 0; i < k; i++)\
    \ max[i] = arr[i];\n        for (int i = k; i < n; i++) {\n            if (arr[i]\
    \ > max[k - 1]) {\n                max[k - 1] = arr[i];\n            }\n     \
    \       else {\n                for (int j = k - 1; j >= 0; j--) {\n         \
    \           if (max[j] < arr[i]) {\n                        max[j] = arr[i];\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        List<long> ans = new List<long>();\n        for\
    \ (int i = 0; i < k; i++) ans.Add(max[i]);\n        return ans;", "        //\
    \ Write your code here\n        if (arr.Count < k)\n            return arr;\n\
    \        int left = 0;\n        int right = arr.Count - 1;\n        int mid =\
    \ (left + right) / 2;\n        while (left <= right) {\n            if (arr[mid]\
    \ > arr[right])\n                left = mid + 1;\n            else if (arr[mid]\
    \ < arr[right])\n                right = mid - 1;\n            else {\n      \
    \          right--;\n                mid--;\n            }\n        }\n      \
    \  return arr.Take(left).Concat(arr.Take(right + 1).Concat(arr.Take(k - right\
    \ - 1)));", "        // Write your code here\n        if (arr.Count < k)\n   \
    \         return arr;\n        List<long> result = new List<long>();\n       \
    \ for (int i = 0; i < k; i++) {\n            result.Add(arr[i]);\n        }\n\
    \        for (int i = k; i < arr.Count; i++) {\n            if (result.Last <\
    \ arr[i]) {\n                result.Add(arr[i]);\n            }\n        }\n \
    \       return result;", "        // Write your code here\n        if (arr ==\
    \ null || arr.Count == 0 || k < 1 || k > arr.Count)\n            return new List<long>();\n\
    \        long[] arr2 = arr.ToArray();\n        Arrays.Sort(arr2);\n        long[]\
    \ max = new long[k];\n        for (int i = 0; i < k; i++)\n            max[i]\
    \ = arr2[i];\n        return new List<long>(max);", "        if (arr == null ||\
    \ arr.Count == 0 || k > arr.Count)\n            return new List<long>();\n   \
    \     if (k == 1)\n            return arr;\n        long[] max = new long[k];\n\
    \        max[0] = arr[0];\n        for (int i = 1; i < k; i++) {\n           \
    \ max[i] = arr[i];\n            for (int j = 0; j < i; j++) {\n              \
    \  if (max[i] < max[j])\n                    max[i] = max[j];\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        for (int i\
    \ = 0; i < k; i++)\n            result.Add(max[i]);\n        return result;",
  "        if (arr.Count < k)\n            throw new Exception(\"Input is invalid.\"\
    );\n        if (k == 0)\n            return new List<long>();\n        long[]\
    \ max = new long[k];\n        for (int i = 0; i < k; i++)\n            max[i]\
    \ = arr[i];\n        for (int i = k; i < arr.Count; i++) {\n            if (arr[i]\
    \ > max[0]) {\n                for (int j = 0; j < k; j++)\n                 \
    \   max[j] = arr[i];\n            }\n        }\n        List<long> result = new\
    \ List<long>();\n        for (int i = 0; i < k; i++)\n            result.Add(max[i]);\n\
    \        return result;"]
stop_tokens:
- "\n    }\n"
