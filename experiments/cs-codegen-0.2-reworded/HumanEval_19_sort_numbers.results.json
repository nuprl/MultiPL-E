{
  "name": "HumanEval_19_sort_numbers",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = int.Parse(a);\n            var bInt = int.Parse(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_pjzj4az.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(' ', sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpv4vwjqej.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        // Create a list of numbers\n        List<int> numbersList = Enumerable.Of<int>(numbers.Split(' ')).ToList();\n        // Sort the list\n        numbersList.Sort();\n        // Create a string of the sorted numbers\n        return String.Join(\" \", numbersList.Select(n => n.ToString()));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_h1ctsdj.cs(16,44): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedNumbers = numbersArray.OrderBy(n => Int32.Parse(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <f6f0f82d496c4937bbb2b07466e38a4e>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <f6f0f82d496c4937bbb2b07466e38a4e>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <f6f0f82d496c4937bbb2b07466e38a4e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, ",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            return ai.CompareTo(bi);\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1gjnf5r4.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        // Create a string array from the input string\n        string[] split = numbers.Split(' ');\n        // Create a list from the string array\n        List<string> list = new List<string>(split);\n        // Sort the list\n        list.Sort();\n        // Return the sorted list as a string\n        return String.Join(\" \", list);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a43bb7e034594083a0542007914d6c8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a43bb7e034594083a0542007914d6c8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedNumbers = numbersArray.OrderBy(n => Int32.Parse(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <f6f0f82d496c4937bbb2b07466e38a4e>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <f6f0f82d496c4937bbb2b07466e38a4e>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <f6f0f82d496c4937bbb2b07466e38a4e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, ",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        // Create a string array from the input string\n        string[] split = numbers.Split(' ');\n        // Create a list of the numbers\n        List<int> nums = new List<int>();\n        for (int i = 0; i < split.Length; i++) {\n            nums.Add(Convert.ToInt32(split[i]));\n        }\n        // Sort the numbers\n        nums.Sort();\n        // Create a string from the sorted numbers\n        string result = \"\";\n        for (int i = 0; i < nums.Count; i++) {\n            result += nums[i];\n            if (i < nums.Count - 1)\n                result += \" \";\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00016] in <fb7a5f4dbd244786ba1cd3ff82681f00>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <fb7a5f4dbd244786ba1cd3ff82681f00>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00016] in <fb7a5f4dbd244786ba1cd3ff82681f00>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <fb7a5f4dbd244786ba1cd3ff82681f00>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedArray = numbersArray.OrderBy(n => Convert.ToInt32(n));\n        return String.Join(\" \", sortedArray);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <1502fc5aeed64b7eb7aec75f077730b9>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <1502fc5aeed64b7eb7aec75f077730b9>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <1502fc5aeed64b7eb7aec75f077730b9>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String o",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        // Create a string array of numbers\n        string[] numbersArray = numbers.Split(' ');\n        // Create a list of numbers\n        List<int> numbersList = new List<int>();\n        // Populate the list with the numbers\n        for (int i = 0; i < numbersArray.Length; i++) {\n            numbersList.Add(Convert.ToInt32(numbersArray[i]));\n        }\n        // Sort the list\n        numbersList.Sort();\n        // Create a string builder to hold the sorted numbers\n        StringBuilder sortedNumbers = new StringBuilder();\n        // Populate the string builder with the sorted numbers\n        for (int i = 0; i < numbersList.Count; i++) {\n            sortedNumbers.Append(numbersList[i]);\n            sortedNumbers.Append(\" \");\n        }\n        // Return the sorted string\n        return sortedNumbers.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00016] in <0d77873ba01740de9955fe963fb7addd>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <0d77873ba01740de9955fe963fb7addd>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00016] in <0d77873ba01740de9955fe963fb7addd>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <0d77873ba01740de9955fe963fb7addd>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        // Create a string array from the input string\n        string[] split = numbers.Split(' ');\n        // Create a new array that will hold the sorted numbers\n        string[] sorted = new string[split.Length];\n        // Create a new array that will hold the numbers that are not sorted\n        string[] unsorted = new string[split.Length];\n        // Create a new array that will hold the numbers that are sorted\n        string[] sortedNumbers = new string[split.Length];\n        // Create a new array that will hold the numbers that are not sorted\n        string[] unsortedNumbers = new string[split.Length];\n        // Create a new array that will hold the numbers that are sorted\n        int[] sortedIndex = new int[split.Length];\n        // Create a new array that will hold the numbers that are not sorted\n        int[] unsortedIndex = new int[split.Length];\n        // Create a new array that will hold the numbers that are sorted\n        int[] sortedNumbersIndex = new int[split.Length];\n        // Create a new array that will hold the numbers that are not sorted\n        int[] unsortedNumbersIndex = new int[split.Length];\n        // Create a new array that will hold the numbers that are sorted\n        int[] sortedIndex2 = new int[split.Length];\n        // Create a new array that will hold the numbers that are not sorted\n        int[] unsortedIndex2 = new int[split.Length];\n        // Create a new array that will hold the numbers that are sorted\n        int[] sortedNumbersIndex2 = new int[split.Length];\n        // Create a new array that will hold the numbers that are not sorted\n        int[] unsortedNumbersIndex2 = new int[split.Length];\n        // Create a new array that will hold the numbers that are sorted\n        int[] sortedIndex3 = new int[split.Length];\n        // Create a new array that will hold the numbers that are not sorted\n        int[] unsortedIndex3 = new int[split.Length];\n        // Create a new array that will hold the numbers that are sorted\n        int[] sortedNumbersIndex3 = new int[split.Length];\n        // Create a new array that will hold the numbers that are not sorted\n        int[] unsortedNumbersIndex3 = new int[split.Length];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1_h7bwtv.cs(14,26): error CS0161: 'Problem.SortNumbers(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Integer.Parse(a);\n            var bInt = Integer.Parse(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppp3on5sg.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = new StringBuilder();\n        var numbersArray = numbers.Split(' ');\n        var numbersArrayLength = numbersArray.Length;\n        var numbersArrayLengthMinusOne = numbersArrayLength - 1;\n        var numbersArrayLengthMinusTwo = numbersArrayLength - 2;\n        var numbersArrayLengthMinusThree = numbersArrayLength - 3;\n        var numbersArrayLengthMinusFour = numbersArrayLength - 4;\n        var numbersArrayLengthMinusFive = numbersArrayLength - 5;\n        var numbersArrayLengthMinusSix = numbersArrayLength - 6;\n        var numbersArrayLengthMinusSeven = numbersArrayLength - 7;\n        var numbersArrayLengthMinusEight = numbersArrayLength - 8;\n        var numbersArrayLengthMinusNine = numbersArrayLength - 9;\n        var numbersArrayLengthMinusTen = numbersArrayLength - 10;\n        var numbersArrayLengthMinusEleven = numbersArrayLength - 11;\n        var numbersArrayLengthMinusTwelve = numbersArrayLength - 12;\n        var numbersArrayLengthMinusThirteen = numbersArrayLength - 13;\n        var numbersArrayLengthMinusFourteen = numbersArrayLength - 14;\n        var numbersArrayLengthMinusFifteen = numbersArrayLength - 15;\n        var numbersArrayLengthMinusSixteen = numbersArrayLength - 16;\n        var numbersArrayLengthMinusSeventeen = numbersArrayLength - 17;\n        var numbersArrayLengthMinusEighteen = numbersArrayLength - 18;\n        var numbersArrayLengthMinusNineteen = numbersArrayLength - 19;\n        var numbersArrayLengthMinusTwenty = numbersArrayLength - 20;\n        var numbersArrayLengthMinusTwentyOne = numbersArrayLength - 21;\n        var numbersArrayLengthMinusTwentyTwo = numbersArrayLength - 22;\n        var numbersArrayLengthMinusTwentyThree = numbersArrayLength - 23;\n        var numbersArrayLengthMinusTwentyFour = numbersArrayLength - 24;\n        var numbersArrayLengthMinusTwentyFive = numbersArrayLength - 25;\n        var numbersArrayLengthMinusTwentySix = numbersArrayLength - 26;\n        var numbersArrayLengthMinusTwentySeven = numbersArrayLength - 27;\n        var numbersArrayLengthMinusTwentyEight = numbersArrayLength - 28;\n        var numbersArrayLengthMinusTwentyNine = numbersArrayLength\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hr2r4cs.cs(46,67): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedNumbers = numbersArray.OrderBy(n => Int32.Parse(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <f6f0f82d496c4937bbb2b07466e38a4e>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <f6f0f82d496c4937bbb2b07466e38a4e>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <f6f0f82d496c4937bbb2b07466e38a4e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, ",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = new string[numbers.Length];\n        for (var i = 0; i < numbers.Length; i++) {\n            var number = numbers[i];\n            var index = numbers.IndexOf(number, i);\n            result[i] = number;\n            numbers = numbers.Replace(number, \"\");\n            if (index > 0) {\n                result[index - 1] = number;\n                numbers = numbers.Replace(number, \"\");\n            }\n        }\n        return String.Join(\" \", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw5e5iir_.cs(19,25): error CS0029: Cannot implicitly convert type 'char' to 'string'\n/tmp/tmpw5e5iir_.cs(20,47): error CS1503: Argument 2: cannot convert from 'string' to 'char'\n/tmp/tmpw5e5iir_.cs(22,37): error CS0029: Cannot implicitly convert type 'char' to 'string'\n/tmp/tmpw5e5iir_.cs(23,51): error CS1503: Argument 2: cannot convert from 'string' to 'char'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Integer.Parse(a);\n            var bInt = Integer.Parse(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppp3on5sg.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedNumbers = numbersArray.OrderBy(s => Convert.ToInt32(s));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String s) [0x00000] in <3cf670905b274439b1de943394a69b1a>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <3cf670905b274439b1de943394a69b1a>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <3cf670905b274439b1de943394a69b1a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String o",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = split.OrderBy(s => s);\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <673aec53e9b94b67b27fd15a7aab0047>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <673aec53e9b94b67b27fd15a7aab0047>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var result = new string[split.Length];\n        for (var i = 0; i < split.Length; i++) {\n            var number = split[i];\n            var num = Int32.Parse(number);\n            result[i] = num.ToString();\n        }\n        var sorted = Array.Sort(result, (x, y) => {\n            return Int32.Parse(x).CompareTo(Int32.Parse(y));\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgyz6nrq9.cs(22,13): error CS0815: Cannot assign void to an implicitly-typed variable\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Integer.Parse(a);\n            var bInt = Integer.Parse(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppp3on5sg.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersList = numbers.Split(' ');\n        var sortedNumbers = numbersList.OrderBy(n => Int32.Parse(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <c0669ee077da4823a9c33d14df4c76a0>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <c0669ee077da4823a9c33d14df4c76a0>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <c0669ee077da4823a9c33d14df4c76a0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, ",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        // Create a list of the numbers\n        List<int> numbersList = Enumerable.Of<int>(numbers.Split(' ')).ToList();\n        // Sort the list\n        numbersList.Sort((x, y) => x - y);\n        // Convert the sorted list to a string\n        return String.Join(\" \", Enumerable.Of<string>(numbersList).ToList().Select(x => String.Format(\"{0}\", x)).ToList());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1u950t82.cs(16,44): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n/tmp/tmp1u950t82.cs(20,44): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedNumbers = numbersArray.OrderBy(n => Int32.Parse(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <f6f0f82d496c4937bbb2b07466e38a4e>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <f6f0f82d496c4937bbb2b07466e38a4e>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <f6f0f82d496c4937bbb2b07466e38a4e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, ",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Integer.Parse(a);\n            var bInt = Integer.Parse(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppp3on5sg.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = split.OrderBy(s => s);\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <673aec53e9b94b67b27fd15a7aab0047>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <673aec53e9b94b67b27fd15a7aab0047>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = split.OrderBy(s => s);\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <673aec53e9b94b67b27fd15a7aab0047>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <673aec53e9b94b67b27fd15a7aab0047>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        // Create a list of numbers\n        List<int> numbersList = new List<int>();\n        foreach (char c in numbers) {\n            int number = Convert.ToInt32(c);\n            numbersList.Add(number);\n        }\n\n        // Sort the list\n        numbersList.Sort();\n\n        // Convert the list to a string\n        string result = \"\";\n        foreach (int number in numbersList) {\n            result += number.ToString();\n        }\n\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4966e966ce7342aa861ba37a9a627024>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4966e966ce7342aa861ba37a9a627024>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = new string[numbers.Length];\n        var numbers_array = numbers.Split(' ');\n        for (var i = 0; i < numbers_array.Length; i++) {\n            var number = numbers_array[i];\n            if (number.ToLower() == \"zero\") {\n                result[i] = \"zero\";\n            }\n            else if (number.ToLower() == \"one\") {\n                result[i] = \"one\";\n            }\n            else if (number.ToLower() == \"two\") {\n                result[i] = \"two\";\n            }\n            else if (number.ToLower() == \"three\") {\n                result[i] = \"three\";\n            }\n            else if (number.ToLower() == \"four\") {\n                result[i] = \"four\";\n            }\n            else if (number.ToLower() == \"five\") {\n                result[i] = \"five\";\n            }\n            else if (number.ToLower() == \"six\") {\n                result[i] = \"six\";\n            }\n            else if (number.ToLower() == \"seven\") {\n                result[i] = \"seven\";\n            }\n            else if (number.ToLower() == \"eight\") {\n                result[i] = \"eight\";\n            }\n            else if (number.ToLower() == \"nine\") {\n                result[i] = \"nine\";\n            }\n        }\n        var sorted_result = \"\";\n        for (var i = 0; i < result.Length; i++) {\n            sorted_result += result[i];\n            if (i < result.Length - 1) {\n                sorted_result += \" \";\n            }\n        }\n        return sorted_result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4c9ee9237a654c68b15c1c68e9a91155>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4c9ee9237a654c68b15c1c68e9a91155>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var result = \"\";\n        for (var i = 0; i < split.Length; i++) {\n            var number = split[i];\n            var num = Int32.Parse(number);\n            if (num > 9) {\n                num = num % 10;\n            }\n            result += num.ToString() + \" \";\n        }\n        return result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x0001a] in <940cadce00ff4c3da02934fd024d012a>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <940cadce00ff4c3da02934fd024d012a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x0001a] in <940cadce00ff4c3da02934fd024d012a>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <940cadce00ff4c3da02934fd024d012a>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersList = numbers.Split(' ');\n        var sortedNumbers = numbersList.OrderBy(n => int.Parse(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <813aac4400c047bbbd7781d5ed9ed414>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <813aac4400c047bbbd7781d5ed9ed414>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <813aac4400c047bbbd7781d5ed9ed414>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, ",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            return ai.CompareTo(bi);\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1gjnf5r4.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = new StringBuilder();\n        var numbers_array = numbers.Split(' ');\n        var numbers_array_sorted = numbers_array.OrderBy(s => s);\n        for (var i = 0; i < numbers_array_sorted.Length; i++) {\n            result.Append(numbers_array_sorted[i]);\n            if (i < numbers_array_sorted.Length - 1) {\n                result.Append(\" \");\n            }\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiwzwxdic.cs(18,50): error CS1061: 'IOrderedEnumerable<string>' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'IOrderedEnumerable<string>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpiwzwxdic.cs(19,27): error CS0021: Cannot apply indexing with [] to an expression of type 'IOrderedEnumerable<string>'\n/tmp/tmpiwzwxdic.cs(20,42): error CS1061: 'IOrderedEnumerable<string>' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'IOrderedEnumerable<string>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersList = numbers.Split(' ');\n        var sortedNumbers = numbersList.OrderBy(n => Int32.Parse(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <c0669ee077da4823a9c33d14df4c76a0>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <c0669ee077da4823a9c33d14df4c76a0>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <c0669ee077da4823a9c33d14df4c76a0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, ",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = int.Parse(a);\n            var bInt = int.Parse(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_pjzj4az.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = numbers.Split(' ');\n        result.Sort();\n        return String.Join(\" \", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpywgercv2.cs(16,16): error CS1501: No overload for method 'Sort' takes 0 arguments\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersList = numbers.Split(' ');\n        var sortedNumbers = numbersList.OrderBy(s => s);\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <45510430a320432e94da4e180471e0b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <45510430a320432e94da4e180471e0b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            if (a.ToLower() == \"zero\" && b.ToLower() == \"zero\") return 0;\n            if (a.ToLower() == \"one\" && b.ToLower() == \"one\") return 0;\n            if (a.ToLower() == \"two\" && b.ToLower() == \"two\") return 0;\n            if (a.ToLower() == \"three\" && b.ToLower() == \"three\") return 0;\n            if (a.ToLower() == \"four\" && b.ToLower() == \"four\") return 0;\n            if (a.ToLower() == \"five\" && b.ToLower() == \"five\") return 0;\n            if (a.ToLower() == \"six\" && b.ToLower() == \"six\") return 0;\n            if (a.ToLower() == \"seven\" && b.ToLower() == \"seven\") return 0;\n            if (a.ToLower() == \"eight\" && b.ToLower() == \"eight\") return 0;\n            if (a.ToLower() == \"nine\" && b.ToLower() == \"nine\") return 0;\n            return a.ToLower().CompareTo(b.ToLower());\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4uzl0jkf.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedNumbers = numbersArray.OrderBy(n => int.Parse(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <d21f1dbf82f04de7896a2242ae5e52fc>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <d21f1dbf82f04de7896a2242ae5e52fc>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <d21f1dbf82f04de7896a2242ae5e52fc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, ",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedNumbers = numbersArray.OrderBy(s => s);\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5e81b6fe6dfc4a9eb8b725570af534e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5e81b6fe6dfc4a9eb8b725570af534e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Integer.Parse(a);\n            var bInt = Integer.Parse(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppp3on5sg.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = new string[numbers.Length];\n        for (var i = 0; i < numbers.Length; i++) {\n            var number = numbers[i];\n            var index = numbers.IndexOf(number);\n            result[i] = numbers[index];\n            numbers = numbers.Remove(index);\n        }\n        for (var i = 0; i < numbers.Length; i++) {\n            var number = numbers[i];\n            var index = numbers.IndexOf(number);\n            numbers = numbers.Remove(index);\n            result[i] = number + result[i];\n        }\n        return String.Join(\" \", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptdnulqq1.cs(19,25): error CS0029: Cannot implicitly convert type 'char' to 'string'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersList = numbers.Split(' ');\n        var numbersListSorted = numbersList.OrderBy(s => s);\n        var result = String.Join(\" \", numbersListSorted);\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <167b53196b604a9aa940aa5644445da3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <167b53196b604a9aa940aa5644445da3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai == bi) return 0;\n            if (ai < bi) return -1;\n            return 1;\n        });\n        return String.Join(' ', sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfzhbeh_8.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = new StringBuilder();\n        var numbersArray = numbers.Split(' ');\n        var numbersArrayLength = numbersArray.Length;\n        var numbersArrayLengthMinusOne = numbersArrayLength - 1;\n        for (var i = 0; i < numbersArrayLength; i++) {\n            var number = numbersArray[i];\n            var numberInt = Convert.ToInt32(number);\n            var numberIntMinusOne = numberInt - 1;\n            var numberIntMinusTwo = numberInt - 2;\n            var numberIntMinusThree = numberInt - 3;\n            var numberIntMinusFour = numberInt - 4;\n            var numberIntMinusFive = numberInt - 5;\n            var numberIntMinusSix = numberInt - 6;\n            var numberIntMinusSeven = numberInt - 7;\n            var numberIntMinusEight = numberInt - 8;\n            var numberIntMinusNine = numberInt - 9;\n            if (numberIntMinusOne >= 0) {\n                result.Append(number);\n                result.Append(\" \");\n            }\n            if (numberIntMinusTwo >= 0) {\n                result.Append(number);\n                result.Append(\" \");\n            }\n            if (numberIntMinusThree >= 0) {\n                result.Append(number);\n                result.Append(\" \");\n            }\n            if (numberIntMinusFour >= 0) {\n                result.Append(number);\n                result.Append(\" \");\n            }\n            if (numberIntMinusFive >= 0) {\n                result.Append(number);\n                result.Append(\" \");\n            }\n            if (numberIntMinusSix >= 0) {\n                result.Append(number);\n                result.Append(\" \");\n            }\n            if (numberIntMinusSeven >= 0) {\n                result.Append(number);\n                result.Append(\" \");\n            }\n            if (numberIntMinusEight >= 0) {\n                result.Append(number);\n                result.Append(\" \");\n            }\n            if (numberIntMinusNine >= 0) {\n                result.Append(number);\n                \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp44jgjz34.cs(67,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp44jgjz34.cs(75,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedArray = numbersArray.OrderBy(n => Convert.ToInt32(n));\n        return String.Join(\" \", sortedArray);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <1502fc5aeed64b7eb7aec75f077730b9>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <1502fc5aeed64b7eb7aec75f077730b9>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <1502fc5aeed64b7eb7aec75f077730b9>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String o",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = new string[numbers.Length];\n        for (var i = 0; i < numbers.Length; i++) {\n            var number = numbers[i];\n            var index = numbers.IndexOf(number);\n            result[i] = numbers[index];\n            numbers = numbers.Remove(index);\n        }\n        for (var i = 0; i < numbers.Length; i++) {\n            var number = numbers[i];\n            var index = numbers.IndexOf(number);\n            numbers = numbers.Remove(index);\n            result[i] = number + result[i];\n        }\n        return String.Join(\" \", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptdnulqq1.cs(19,25): error CS0029: Cannot implicitly convert type 'char' to 'string'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        // Create a list of the numbers\n        List<int> numbersList = Enumerable.ToList(numbers.Split(' '));\n        // Sort the list\n        numbersList.Sort();\n        // Return the sorted list\n        return String.Join(\" \", numbersList.Select(x => String.Format(\"{0}\", x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj_9spujm.cs(16,33): error CS0029: Cannot implicitly convert type 'System.Collections.Generic.List<string>' to 'System.Collections.Generic.List<int>'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            if (a.ToLower() == \"zero\" && b.ToLower() == \"zero\") return 0;\n            if (a.ToLower() == \"one\" && b.ToLower() == \"one\") return 0;\n            if (a.ToLower() == \"two\" && b.ToLower() == \"two\") return 0;\n            if (a.ToLower() == \"three\" && b.ToLower() == \"three\") return 0;\n            if (a.ToLower() == \"four\" && b.ToLower() == \"four\") return 0;\n            if (a.ToLower() == \"five\" && b.ToLower() == \"five\") return 0;\n            if (a.ToLower() == \"six\" && b.ToLower() == \"six\") return 0;\n            if (a.ToLower() == \"seven\" && b.ToLower() == \"seven\") return 0;\n            if (a.ToLower() == \"eight\" && b.ToLower() == \"eight\") return 0;\n            if (a.ToLower() == \"nine\" && b.ToLower() == \"nine\") return 0;\n            if (a.ToLower() == \"ten\" && b.ToLower() == \"ten\") return 0;\n            if (a.ToLower() == \"eleven\" && b.ToLower() == \"eleven\") return 0;\n            if (a.ToLower() == \"twelve\" && b.ToLower() == \"twelve\") return 0;\n            if (a.ToLower() == \"thirteen\" && b.ToLower() == \"thirteen\") return 0;\n            if (a.ToLower() == \"fourteen\" && b.ToLower() == \"fourteen\") return 0;\n            if (a.ToLower() == \"fifteen\" && b.ToLower() == \"fifteen\") return 0;\n            if (a.ToLower() == \"sixteen\" && b.ToLower() == \"sixteen\") return 0;\n            if (a.ToLower() == \"seventeen\" && b.ToLower() == \"seventeen\") return 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4lytealf.cs(34,83): error CS1002: ; expected\n/tmp/tmp4lytealf.cs(35,6): error CS1026: ) expected\n/tmp/tmp4lytealf.cs(35,6): error CS1002: ; expected\n/tmp/tmp4lytealf.cs(36,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp4lytealf.cs(44,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var sortedNumbers = numbers.Split(' ').OrderBy(n => n);\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <62cab6ba529642cdbaddc6ffd58ecf77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <62cab6ba529642cdbaddc6ffd58ecf77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var sortedNumbers = numbers.Split(' ').OrderBy(n => n);\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <62cab6ba529642cdbaddc6ffd58ecf77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <62cab6ba529642cdbaddc6ffd58ecf77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedNumbers = numbersArray.OrderBy(n => Int32.Parse(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <f6f0f82d496c4937bbb2b07466e38a4e>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <f6f0f82d496c4937bbb2b07466e38a4e>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <f6f0f82d496c4937bbb2b07466e38a4e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, ",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        // Create a string array of the numbers\n        string[] split = numbers.Split(' ');\n        // Create a list of the numbers\n        List<int> numbersList = new List<int>();\n        for (int i = 0; i < split.Length; i++) {\n            int number = Convert.ToInt32(split[i]);\n            numbersList.Add(number);\n        }\n        // Sort the numbers\n        numbersList.Sort();\n        // Create a string to hold the sorted numbers\n        string sortedNumbers = \"\";\n        // Loop through the sorted numbers\n        for (int i = 0; i < numbersList.Count; i++) {\n            // Add the number to the string\n            sortedNumbers += numbersList[i] + \" \";\n        }\n        // Return the sorted numbers\n        return sortedNumbers;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00016] in <305fd8015b43470ba19b4f383e72c55b>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <305fd8015b43470ba19b4f383e72c55b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00016] in <305fd8015b43470ba19b4f383e72c55b>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <305fd8015b43470ba19b4f383e72c55b>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        // Create a string array of the numbers\n        string[] numbersArray = numbers.Split(' ');\n        // Create a sorted array of the numbers\n        string[] sortedArray = numbersArray.OrderBy(s => s);\n        // Return the sorted array\n        return String.Join(\" \", sortedArray);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4zqo5pan.cs(18,32): error CS0029: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<string>' to 'string[]'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = numbers.Split(' ');\n        var sorted = result.OrderBy(x => int.Parse(x));\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String x) [0x00000] in <bc3e1219741448d8a0e55865dc1e9767>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <bc3e1219741448d8a0e55865dc1e9767>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <bc3e1219741448d8a0e55865dc1e9767>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, ",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var sortedNumbers = numbers.Split(' ').OrderBy(s => s);\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e275020a3fcc4d989004a4e36f61b17c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e275020a3fcc4d989004a4e36f61b17c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        // Create a string array of numbers\n        string[] nums = numbers.Split(' ');\n        // Create a list of numbers\n        List<int> numbersList = new List<int>();\n        for (int i = 0; i < nums.Length; i++) {\n            // Convert the string to an integer\n            int num = Convert.ToInt32(nums[i]);\n            // Add the number to the list\n            numbersList.Add(num);\n        }\n        // Sort the list\n        numbersList.Sort();\n        // Create a string builder to hold the sorted numbers\n        StringBuilder sb = new StringBuilder();\n        // Iterate through the list and add the numbers to the string builder\n        for (int i = 0; i < numbersList.Count; i++) {\n            // Add the number to the string builder\n            sb.Append(numbersList[i]);\n            // Add a space if this is not the last number\n            if (i < numbersList.Count - 1)\n                sb.Append(' ');\n        }\n        // Return the string\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00016] in <1ab735fb9ad745ad818b9c320e8819aa>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <1ab735fb9ad745ad818b9c320e8819aa>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00016] in <1ab735fb9ad745ad818b9c320e8819aa>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <1ab735fb9ad745ad818b9c320e8819aa>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedNumbers = numbersArray.OrderBy(n => Convert.ToInt32(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String o",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersList = numbers.Split(' ');\n        var sortedNumbers = numbersList.OrderBy(n => Convert.ToInt32(n)).ToArray();\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <d36485cd68f54fbfafb18fa7682df4a0>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].ToArray () [0x00025] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource] (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00030] in <d36485cd68f54fbfafb18fa7682df4a0>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <d36485cd68f54fbfafb18fa7682df4a0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x00",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var sortedNumbers = numbers.Split(' ').OrderBy(s => s);\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e275020a3fcc4d989004a4e36f61b17c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e275020a3fcc4d989004a4e36f61b17c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var sortedNumbers = numbers.Split(' ').OrderBy(n => n);\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <62cab6ba529642cdbaddc6ffd58ecf77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <62cab6ba529642cdbaddc6ffd58ecf77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersList = numbers.Split(' ');\n        var sortedNumbers = numbersList.OrderBy(n => Convert.ToInt32(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <257569bfab6648cf86952da15135b2c1>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <257569bfab6648cf86952da15135b2c1>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <257569bfab6648cf86952da15135b2c1>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String o",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = split.OrderBy(s => s);\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <673aec53e9b94b67b27fd15a7aab0047>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <673aec53e9b94b67b27fd15a7aab0047>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        // Create a list of the numbers\n        List<int> numbersList = Enumerable.ToList(numbers.Split(' '));\n        // Sort the list\n        numbersList.Sort();\n        // Return the sorted list\n        return String.Join(\" \", numbersList.Select(x => String.Format(\"{0}\", x)).ToArray());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj_9spujm.cs(16,33): error CS0029: Cannot implicitly convert type 'System.Collections.Generic.List<string>' to 'System.Collections.Generic.List<int>'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = new StringBuilder();\n        var numbersArray = numbers.Split(' ');\n        var numbersArrayLength = numbersArray.Length;\n        for (var i = 0; i < numbersArrayLength; i++) {\n            var number = numbersArray[i];\n            if (number.ToLower() == \"zero\") {\n                result.Append(\"zero\");\n            }\n            else if (number.ToLower() == \"one\") {\n                result.Append(\"one\");\n            }\n            else if (number.ToLower() == \"two\") {\n                result.Append(\"two\");\n            }\n            else if (number.ToLower() == \"three\") {\n                result.Append(\"three\");\n            }\n            else if (number.ToLower() == \"four\") {\n                result.Append(\"four\");\n            }\n            else if (number.ToLower() == \"five\") {\n                result.Append(\"five\");\n            }\n            else if (number.ToLower() == \"six\") {\n                result.Append(\"six\");\n            }\n            else if (number.ToLower() == \"seven\") {\n                result.Append(\"seven\");\n            }\n            else if (number.ToLower() == \"eight\") {\n                result.Append(\"eight\");\n            }\n            else if (number.ToLower() == \"nine\") {\n                result.Append(\"nine\");\n            }\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <498e2c1518d547588d003d8604995e12>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <498e2c1518d547588d003d8604995e12>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = new StringBuilder();\n        var numbers_array = numbers.Split(' ');\n        var numbers_array_sorted = numbers_array.OrderBy(s => s);\n        for (var i = 0; i < numbers_array_sorted.Length; i++) {\n            result.Append(numbers_array_sorted[i]);\n            if (i < numbers_array_sorted.Length - 1) {\n                result.Append(\" \");\n            }\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiwzwxdic.cs(18,50): error CS1061: 'IOrderedEnumerable<string>' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'IOrderedEnumerable<string>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpiwzwxdic.cs(19,27): error CS0021: Cannot apply indexing with [] to an expression of type 'IOrderedEnumerable<string>'\n/tmp/tmpiwzwxdic.cs(20,42): error CS1061: 'IOrderedEnumerable<string>' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'IOrderedEnumerable<string>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var sortedNumbers = numbers.Split(' ').OrderBy(s => s);\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e275020a3fcc4d989004a4e36f61b17c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e275020a3fcc4d989004a4e36f61b17c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersList = numbers.Split(' ');\n        var sortedNumbers = numbersList.OrderBy(n => Convert.ToInt32(n)).ToArray();\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <d36485cd68f54fbfafb18fa7682df4a0>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].ToArray () [0x00025] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource] (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00030] in <d36485cd68f54fbfafb18fa7682df4a0>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <d36485cd68f54fbfafb18fa7682df4a0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x00",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai == bi) return 0;\n            if (ai < bi) return -1;\n            return 1;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi1ue3lvm.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = new string[numbers.Length];\n        for (var i = 0; i < numbers.Length; i++) {\n            var number = numbers[i];\n            var index = numbers.IndexOf(number);\n            result[i] = number;\n        }\n        for (var i = 0; i < numbers.Length - 1; i++) {\n            var number = result[i];\n            var index = numbers.IndexOf(number);\n            for (var j = i + 1; j < numbers.Length; j++) {\n                var number2 = result[j];\n                if (number > number2) {\n                    result[j] = number;\n                    result[i] = number2;\n                }\n            }\n        }\n        return String.Join(\" \", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6a436od4.cs(19,25): error CS0029: Cannot implicitly convert type 'char' to 'string'\n/tmp/tmp6a436od4.cs(26,21): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var result = \"\";\n        for (var i = 0; i < split.Length; i++) {\n            var number = split[i];\n            if (number.Length > 0) {\n                var num = Convert.ToInt32(number);\n                if (num > 0 && num < 10) {\n                    result += number;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x0002a] in <ac161a47058b4ca391c699ed8467cd33>:0 \n  at Problem.Main (System.String[] args) [0x0001b] in <ac161a47058b4ca391c699ed8467cd33>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x0002a] in <ac161a47058b4ca391c699ed8467cd33>:0 \n  at Problem.Main (System.String[] args) [0x0001b] in <ac161a47058b4ca391c699ed8467cd33>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersList = numbers.Split(' ');\n        var sortedNumbers = numbersList.OrderBy(n => Convert.ToInt32(n)).ToArray();\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <d36485cd68f54fbfafb18fa7682df4a0>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].ToArray () [0x00025] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToArray[TSource] (System.Collections.Generic.IEnumerable`1[T] source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00030] in <d36485cd68f54fbfafb18fa7682df4a0>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <d36485cd68f54fbfafb18fa7682df4a0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x00",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai == bi) return 0;\n            if (ai < bi) return -1;\n            return 1;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi1ue3lvm.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai == bi) return 0;\n            if (ai < bi) return -1;\n            return 1;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi1ue3lvm.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = numbers.Split(' ');\n        result.Sort((a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai == bi) return 0;\n            if (ai < bi) return -1;\n            return 1;\n        });\n        return String.Join(\" \", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdy8puw6v.cs(16,21): error CS1660: Cannot convert lambda expression to type 'Array' because it is not a delegate type\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = split.OrderBy(s => s.ToLower());\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <13863b07e1cb4f45b51c46b35e5c9d52>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <13863b07e1cb4f45b51c46b35e5c9d52>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var sortedNumbers = numbers.Split(' ').OrderBy(s => s);\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e275020a3fcc4d989004a4e36f61b17c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e275020a3fcc4d989004a4e36f61b17c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        // Create a list of the numbers\n        List<int> numbersList = Enumerable.FromString(numbers, Int32::Parse).ToList();\n        // Sort the list\n        numbersList.Sort();\n        // Convert the list to a string\n        return Enumerable.From(numbersList).ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpm615wdtu.cs(16,44): error CS0117: 'Enumerable' does not contain a definition for 'FromString'\n/tmp/tmpm615wdtu.cs(16,64): error CS0432: Alias 'Int32' not found\n/tmp/tmpm615wdtu.cs(20,27): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        // Create a list of the numbers in the string\n        List<int> ints = Enumerable.Of<int>(numbers.Split(' ')).ToList();\n        // Sort the list\n        ints.Sort();\n        // Create a string of the sorted numbers\n        return String.Join(\" \", Enumerable.Of<string>(ints).Select(x => String.Format(\"{0}\", x)).ToList());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwg9xt5xz.cs(16,37): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n/tmp/tmpwg9xt5xz.cs(20,44): error CS0117: 'Enumerable' does not contain a definition for 'Of'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            return ai.CompareTo(bi);\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1gjnf5r4.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var sortedNumbers = numbers.Split(' ').OrderBy(n => Int32.Parse(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <eb3eb4973b2846aab8beacb32212d85d>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x0002f] in <eb3eb4973b2846aab8beacb32212d85d>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <eb3eb4973b2846aab8beacb32212d85d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, ",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = new StringBuilder();\n        var numbersArray = numbers.Split(' ');\n        for (var i = 0; i < numbersArray.Length; i++) {\n            var number = numbersArray[i];\n            if (number.ToLower() == \"zero\") {\n                result.Append(\"zero\");\n            }\n            else if (number.ToLower() == \"one\") {\n                result.Append(\"one\");\n            }\n            else if (number.ToLower() == \"two\") {\n                result.Append(\"two\");\n            }\n            else if (number.ToLower() == \"three\") {\n                result.Append(\"three\");\n            }\n            else if (number.ToLower() == \"four\") {\n                result.Append(\"four\");\n            }\n            else if (number.ToLower() == \"five\") {\n                result.Append(\"five\");\n            }\n            else if (number.ToLower() == \"six\") {\n                result.Append(\"six\");\n            }\n            else if (number.ToLower() == \"seven\") {\n                result.Append(\"seven\");\n            }\n            else if (number.ToLower() == \"eight\") {\n                result.Append(\"eight\");\n            }\n            else if (number.ToLower() == \"nine\") {\n                result.Append(\"nine\");\n            }\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7662466988e14a15987fc7362f263089>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7662466988e14a15987fc7362f263089>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = new StringBuilder();\n        var numbersArray = numbers.Split(' ');\n        var numbersArrayLength = numbersArray.Length;\n        var numbersArrayLengthMinusOne = numbersArrayLength - 1;\n        var numbersArrayLengthMinusTwo = numbersArrayLength - 2;\n        var numbersArrayLengthMinusThree = numbersArrayLength - 3;\n        var numbersArrayLengthMinusFour = numbersArrayLength - 4;\n        var numbersArrayLengthMinusFive = numbersArrayLength - 5;\n        var numbersArrayLengthMinusSix = numbersArrayLength - 6;\n        var numbersArrayLengthMinusSeven = numbersArrayLength - 7;\n        var numbersArrayLengthMinusEight = numbersArrayLength - 8;\n        var numbersArrayLengthMinusNine = numbersArrayLength - 9;\n        var numbersArrayLengthMinusTen = numbersArrayLength - 10;\n        var numbersArrayLengthMinusEleven = numbersArrayLength - 11;\n        var numbersArrayLengthMinusTwelve = numbersArrayLength - 12;\n        var numbersArrayLengthMinusThirteen = numbersArrayLength - 13;\n        var numbersArrayLengthMinusFourteen = numbersArrayLength - 14;\n        var numbersArrayLengthMinusFifteen = numbersArrayLength - 15;\n        var numbersArrayLengthMinusSixteen = numbersArrayLength - 16;\n        var numbersArrayLengthMinusSeventeen = numbersArrayLength - 17;\n        var numbersArrayLengthMinusEighteen = numbersArrayLength - 18;\n        var numbersArrayLengthMinusNineteen = numbersArrayLength - 19;\n        var numbersArrayLengthMinusTwenty = numbersArrayLength - 20;\n        var numbersArrayLengthMinusTwentyOne = numbersArrayLength - 21;\n        var numbersArrayLengthMinusTwentyTwo = numbersArrayLength - 22;\n        var numbersArrayLengthMinusTwentyThree = numbersArrayLength - 23;\n        var numbersArrayLengthMinusTwentyFour = numbersArrayLength - 24;\n        var numbersArrayLengthMinusTwentyFive = numbersArrayLength - 25;\n        var numbersArrayLengthMinusTwentySix = numbersArrayLength - 26;\n        var numbersArrayLengthMinusTwentySeven = numbersArrayLength - 27;\n        var numbersArrayLengthMinusTwentyEight = numbersArrayLength - 28;\n        var numbersArrayLengthMinusTwentyNine = numbersArrayLength\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hr2r4cs.cs(46,67): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedNumbers = numbersArray.OrderBy(n => Convert.ToInt32(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String o",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersList = numbers.Split(' ');\n        var sortedNumbers = numbersList.OrderBy(n => Convert.ToInt32(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <257569bfab6648cf86952da15135b2c1>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <257569bfab6648cf86952da15135b2c1>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <257569bfab6648cf86952da15135b2c1>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String o",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedArray = numbersArray.OrderBy(x => Convert.ToInt32(x));\n        return String.Join(\" \", sortedArray);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String x) [0x00000] in <de645991c7954e139e2fd4918f3c8686>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <de645991c7954e139e2fd4918f3c8686>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <de645991c7954e139e2fd4918f3c8686>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String o",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var result = \"\";\n        for (var i = 0; i < split.Length; i++) {\n            var number = split[i];\n            var numberInt = int.Parse(number);\n            if (numberInt > 9) {\n                numberInt = numberInt % 10;\n            }\n            result += numberInt.ToString() + \" \";\n        }\n        return result.Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x0001a] in <ef6bf4b03e3b47d0b41aa772ff118a7c>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <ef6bf4b03e3b47d0b41aa772ff118a7c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x0001a] in <ef6bf4b03e3b47d0b41aa772ff118a7c>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <ef6bf4b03e3b47d0b41aa772ff118a7c>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersList = numbers.Split(' ');\n        var sortedNumbers = numbersList.OrderBy(n => Convert.ToInt32(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <257569bfab6648cf86952da15135b2c1>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <257569bfab6648cf86952da15135b2c1>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <257569bfab6648cf86952da15135b2c1>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String o",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = split.OrderBy(s => s);\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <673aec53e9b94b67b27fd15a7aab0047>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <673aec53e9b94b67b27fd15a7aab0047>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedNumbers = numbersArray.OrderBy(n => Convert.ToInt32(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String o",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedNumbers = numbersArray.OrderBy(n => Convert.ToInt32(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String o",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var result = \"\";\n        for (var i = 0; i < split.Length; i++) {\n            var number = split[i];\n            var numberIndex = split.IndexOf(number);\n            if (numberIndex == i) {\n                result += number;\n            }\n            else {\n                var temp = split[i];\n                split[i] = split[numberIndex];\n                split[numberIndex] = temp;\n                result += SortNumbers(split.ToString());\n                split[i] = temp;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsjafr2b4.cs(19,37): error CS1501: No overload for method 'IndexOf' takes 1 arguments\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var sortedNumbers = numbers.Split(' ').OrderBy(s => s);\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e275020a3fcc4d989004a4e36f61b17c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e275020a3fcc4d989004a4e36f61b17c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var result = \"\";\n        for (var i = 0; i < split.Length; i++) {\n            var num = split[i];\n            if (num.ToLower() == \"zero\") {\n                result += \"zero\";\n            }\n            else if (num.ToLower() == \"one\") {\n                result += \"one\";\n            }\n            else if (num.ToLower() == \"two\") {\n                result += \"two\";\n            }\n            else if (num.ToLower() == \"three\") {\n                result += \"three\";\n            }\n            else if (num.ToLower() == \"four\") {\n                result += \"four\";\n            }\n            else if (num.ToLower() == \"five\") {\n                result += \"five\";\n            }\n            else if (num.ToLower() == \"six\") {\n                result += \"six\";\n            }\n            else if (num.ToLower() == \"seven\") {\n                result += \"seven\";\n            }\n            else if (num.ToLower() == \"eight\") {\n                result += \"eight\";\n            }\n            else if (num.ToLower() == \"nine\") {\n                result += \"nine\";\n            }\n            else {\n                throw new Exception(\"Invalid number: \" + num);\n            }\n            result += \" \";\n        }\n        return result.TrimEnd(' ');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.Exception: Invalid number: \n  at Problem.SortNumbers (System.String numbers) [0x001ba] in <142aec92380a43fcb4593b1e219504c8>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <142aec92380a43fcb4593b1e219504c8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Exception: Invalid number: \n  at Problem.SortNumbers (System.String numbers) [0x001ba] in <142aec92380a43fcb4593b1e219504c8>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <142aec92380a43fcb4593b1e219504c8>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Integer.Parse(a);\n            var bInt = Integer.Parse(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppp3on5sg.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        // Create a string array of numbers\n        string[] numbersArray = numbers.Split(' ');\n        // Create a new array of numbers sorted from smallest to largest\n        string[] sortedNumbersArray = numbersArray.OrderBy(s => s);\n        // Return the sorted array\n        return String.Join(\" \", sortedNumbersArray);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc7ma907d.cs(18,39): error CS0029: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<string>' to 'string[]'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedNumbers = numbersArray.OrderBy(n => Convert.ToInt32(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String o",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedNumbers = numbersArray.OrderBy(n => Convert.ToInt32(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String o",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = split.OrderBy(s => s);\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <673aec53e9b94b67b27fd15a7aab0047>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <673aec53e9b94b67b27fd15a7aab0047>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = split.OrderBy(s => s);\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <673aec53e9b94b67b27fd15a7aab0047>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <673aec53e9b94b67b27fd15a7aab0047>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedNumbers = numbersArray.OrderBy(n => n);\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <56a5cccdf33049719400e58ef62999ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <56a5cccdf33049719400e58ef62999ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedNumbers = numbersArray.OrderBy(n => Convert.ToInt32(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String o",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = new StringBuilder();\n        var numbers_array = numbers.Split(' ');\n        for (var i = 0; i < numbers_array.Length; i++) {\n            var number = numbers_array[i];\n            var number_int = Convert.ToInt32(number);\n            if (number_int > 9) {\n                number_int = 9;\n            }\n            if (number_int < 0) {\n                number_int = 0;\n            }\n            result.Append(number_int.ToString());\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x0001a] in <d1cfcac31bdf4d599fd2bd94d0c4b24c>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <d1cfcac31bdf4d599fd2bd94d0c4b24c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x0001a] in <d1cfcac31bdf4d599fd2bd94d0c4b24c>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <d1cfcac31bdf4d599fd2bd94d0c4b24c>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = new string[numbers.Length];\n        var numbers_array = numbers.Split(' ');\n        for (var i = 0; i < numbers_array.Length; i++) {\n            var number = numbers_array[i];\n            var number_int = Convert.ToInt32(number);\n            result[i] = number_int.ToString();\n        }\n        for (var i = 0; i < result.Length - 1; i++) {\n            for (var j = i + 1; j < result.Length; j++) {\n                if (Convert.ToInt32(result[i]) > Convert.ToInt32(result[j])) {\n                    var temp = result[i];\n                    result[i] = result[j];\n                    result[j] = temp;\n                }\n            }\n        }\n        var result_string = String.Join(\" \", result);\n        return result_string;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00021] in <9fd2f531a5bd42b2b356930d6b2f0d5b>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <9fd2f531a5bd42b2b356930d6b2f0d5b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00021] in <9fd2f531a5bd42b2b356930d6b2f0d5b>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <9fd2f531a5bd42b2b356930d6b2f0d5b>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = new StringBuilder();\n        var numbersArray = numbers.Split(' ');\n        var numbersArrayLength = numbersArray.Length;\n        var numbersArrayLengthMinusOne = numbersArrayLength - 1;\n        for (var i = 0; i < numbersArrayLengthMinusOne; i++) {\n            var number = numbersArray[i];\n            var numberInt = Convert.ToInt32(number);\n            var numberIntMinusOne = numberInt - 1;\n            var numberIntMinusTwo = numberInt - 2;\n            var numberIntMinusThree = numberInt - 3;\n            var numberIntMinusFour = numberInt - 4;\n            var numberIntMinusFive = numberInt - 5;\n            var numberIntMinusSix = numberInt - 6;\n            var numberIntMinusSeven = numberInt - 7;\n            var numberIntMinusEight = numberInt - 8;\n            var numberIntMinusNine = numberInt - 9;\n            if (numberIntMinusNine > 0) {\n                result.Append(number);\n                result.Append(\" \");\n            }\n            else if (numberIntMinusEight > 0) {\n                result.Append(number);\n                result.Append(\" \");\n                result.Append(number);\n                result.Append(\" \");\n            }\n            else if (numberIntMinusSeven > 0) {\n                result.Append(number);\n                result.Append(\" \");\n                result.Append(number);\n                result.Append(\" \");\n                result.Append(number);\n                result.Append(\" \");\n            }\n            else if (numberIntMinusSix > 0) {\n                result.Append(number);\n                result.Append(\" \");\n                result.Append(number);\n                result.Append(\" \");\n                result.Append(number);\n                result.Append(\" \");\n                result.Append(number);\n                result.Append(\" \");\n            }\n            else if (numberIntMinusFive > 0) {\n                result.Append(number);\n                result.Append(\" \");\n                result.Append(number);\n                result.App\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7278utsy.cs(63,27): error CS1002: ; expected\n/tmp/tmp7278utsy.cs(65,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp7278utsy.cs(73,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var sortedNumbers = numbers.Split(' ').OrderBy(n => n);\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <62cab6ba529642cdbaddc6ffd58ecf77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <62cab6ba529642cdbaddc6ffd58ecf77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var sortedNumbers = numbers.Split(' ').OrderBy(s => s);\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e275020a3fcc4d989004a4e36f61b17c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e275020a3fcc4d989004a4e36f61b17c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedNumbers = numbersArray.OrderBy(n => Convert.ToInt32(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider) [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32 (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <163e6f1afc0b4f198b1b93072725b3fc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String o",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = numbers.Split(' ');\n        var sorted = result.OrderBy(s => s.ToLower());\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292788,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <05e28a06a44f407c925ec5503313057e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <05e28a06a44f407c925ec5503313057e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = numbers.Split(' ');\n        result.Sort();\n        return String.Join(\" \", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpywgercv2.cs(16,16): error CS1501: No overload for method 'Sort' takes 0 arguments\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = int.Parse(a);\n            var bInt = int.Parse(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_pjzj4az.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedNumbers = numbersArray.OrderBy(n => Int32.Parse(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <f6f0f82d496c4937bbb2b07466e38a4e>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <f6f0f82d496c4937bbb2b07466e38a4e>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <f6f0f82d496c4937bbb2b07466e38a4e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, ",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = new StringBuilder();\n        var numbersArray = numbers.Split(' ');\n        var sortedNumbers = numbersArray.OrderBy(n => n);\n        for (var i = 0; i < sortedNumbers.Length; i++) {\n            result.Append(sortedNumbers[i]);\n            if (i < sortedNumbers.Length - 1) {\n                result.Append(\" \");\n            }\n        }\n        return result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2gewr0kj.cs(18,43): error CS1061: 'IOrderedEnumerable<string>' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'IOrderedEnumerable<string>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp2gewr0kj.cs(19,27): error CS0021: Cannot apply indexing with [] to an expression of type 'IOrderedEnumerable<string>'\n/tmp/tmp2gewr0kj.cs(20,35): error CS1061: 'IOrderedEnumerable<string>' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'IOrderedEnumerable<string>' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedNumbers = numbersArray.OrderBy(n => int.Parse(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <d21f1dbf82f04de7896a2242ae5e52fc>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <d21f1dbf82f04de7896a2242ae5e52fc>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <d21f1dbf82f04de7896a2242ae5e52fc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, ",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersArray = numbers.Split(' ');\n        var sortedNumbers = numbersArray.OrderBy(n => Int32.Parse(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <f6f0f82d496c4937bbb2b07466e38a4e>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <f6f0f82d496c4937bbb2b07466e38a4e>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <f6f0f82d496c4937bbb2b07466e38a4e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, ",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var sortedNumbers = numbers.Split(' ');\n        sortedNumbers.Sort();\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphp2go3mr.cs(16,23): error CS1501: No overload for method 'Sort' takes 0 arguments\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersList = numbers.Split(' ');\n        var sortedNumbers = numbersList.OrderBy(n => Int32.Parse(n));\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem+<>c.<SortNumbers>b__0_0 (System.String n) [0x00000] in <c0669ee077da4823a9c33d14df4c76a0>:0 \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements, System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1+<GetEnumerator>d__3[TElement].MoveNext () [0x0003d] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.String.Join (System.String separator, System.Collections.Generic.IEnumerable`1[T] values) [0x00015] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortNumbers (System.String numbers) [0x00031] in <c0669ee077da4823a9c33d14df4c76a0>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <c0669ee077da4823a9c33d14df4c76a0>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, ",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai < bi) return -1;\n            if (ai > bi) return 1;\n            return 0;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6hqkpbpz.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai == bi) return 0;\n            if (ai < bi) return -1;\n            return 1;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi1ue3lvm.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai == bi) return 0;\n            if (ai < bi) return -1;\n            return 1;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi1ue3lvm.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var sortedNumbers = numbers.Split(' ');\n        sortedNumbers.Sort();\n        return String.Join(\" \", sortedNumbers);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphp2go3mr.cs(16,23): error CS1501: No overload for method 'Sort' takes 0 arguments\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var ai = a.ToLower();\n            var bi = b.ToLower();\n            if (ai == bi) return 0;\n            if (ai < bi) return -1;\n            return 1;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi1ue3lvm.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var result = new string[numbers.Length];\n        var numbersArray = numbers.Split(' ');\n        for (var i = 0; i < numbersArray.Length; i++) {\n            result[i] = numbersArray[i];\n        }\n        for (var i = 0; i < numbersArray.Length - 1; i++) {\n            for (var j = i + 1; j < numbersArray.Length; j++) {\n                if (numbersArray[i] > numbersArray[j]) {\n                    var temp = numbersArray[i];\n                    numbersArray[i] = numbersArray[j];\n                    numbersArray[j] = temp;\n                }\n            }\n        }\n        var resultString = String.Join(\" \", numbersArray);\n        return resultString;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz8m8arxh.cs(22,21): error CS0019: Operator '>' cannot be applied to operands of type 'string' and 'string'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = split.OrderBy(s => s.ToLower());\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292787,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <13863b07e1cb4f45b51c46b35e5c9d52>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <13863b07e1cb4f45b51c46b35e5c9d52>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var split = numbers.Split(' ');\n        var sorted = Enumerable.Sort(split, (a, b) => {\n            var aInt = Convert.ToInt32(a);\n            var bInt = Convert.ToInt32(b);\n            return aInt - bInt;\n        });\n        return String.Join(\" \", sorted);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumbers((\"\")).Equals((\"\")));\n    Debug.Assert(SortNumbers((\"three\")).Equals((\"three\")));\n    Debug.Assert(SortNumbers((\"three five nine\")).Equals((\"three five nine\")));\n    Debug.Assert(SortNumbers((\"five zero four seven nine eight\")).Equals((\"zero four five seven eight nine\")));\n    Debug.Assert(SortNumbers((\"six five four three two one zero\")).Equals((\"zero one two three four five six\")));\n    }\n\n}\n",
      "timestamp": 1664292786,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmcad4oqq.cs(16,33): error CS0117: 'Enumerable' does not contain a definition for 'Sort'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}