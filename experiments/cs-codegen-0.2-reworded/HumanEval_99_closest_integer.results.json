{
  "name": "HumanEval_99_closest_integer",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long num = 0;\n        int i = 0;\n        if (value == \"\") {\n            return 0;\n        }\n        try {\n            num = Long.Parse(value);\n        }\n        catch (Exception e) {\n            return 0;\n        }\n        if (num < 0) {\n            return 0;\n        }\n        min = num - 1;\n        max = num + 1;\n        diff = max - min;\n        if (diff == 0) {\n            return max;\n        }\n        if (diff > 0) {\n            for (i = 0; i < diff; i++) {\n                if (num < max) {\n                    max = num;\n                }\n                else if (num > min) {\n                    min = num;\n                }\n                num = num + 1;\n            }\n        }\n        else {\n            for (i = 0; i > diff; i--) {\n                if (num > min) {\n                    min = num;\n                }\n                else if (num < max) {\n                    max = num;\n                }\n                num = num - 1;\n            }\n        }\n        return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph95vfr0n.cs(33,19): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmph95vfr0n.cs(35,26): warning CS0168: The variable 'e' is declared but never used\n/tmp/tmph95vfr0n.cs(23,14): warning CS0219: The variable 'result' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception e) {\n            throw new Exception(\"Invalid input\");\n        }\n        if (result < 0) {\n            result = Math.Abs(result);\n        }\n        else {\n            result = Math.Abs(result);\n        }\n        if (result % 1 == 0) {\n            result = result;\n        }\n        else {\n            result = result + 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuulag139.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmpuulag139.cs(37,13): warning CS1717: Assignment made to same variable; did you mean to assign something else?\n/tmp/tmpuulag139.cs(27,26): warning CS0168: The variable 'e' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_value = 0;\n        long right_value = 0;\n        long left_rounded = 0;\n        long right_rounded = 0;\n        long left_rounded_distance = 0;\n        long right_rounded_distance = 0;\n        long left_rounded_value = 0;\n        long right_rounded_value = 0;\n        long left_rounded_rounded = 0;\n        long right_rounded_rounded = 0;\n        long left_rounded_rounded_distance = 0;\n        long right_rounded_rounded_distance = 0;\n        long left_rounded_rounded_value = 0;\n        long right_rounded_rounded_value = 0;\n        long left_rounded_rounded_rounded = 0;\n        long right_rounded_rounded_rounded = 0;\n        long left_rounded_rounded_rounded_distance = 0;\n        long right_rounded_rounded_rounded_distance = 0;\n        long left_rounded_rounded_rounded_value = 0;\n        long right_rounded_rounded_rounded_value = 0;\n        long left_rounded_rounded_rounded_rounded = 0;\n        long right_rounded_rounded_rounded_rounded = 0;\n        long left_rounded_rounded_rounded_rounded_distance = 0;\n        long right_rounded_rounded_rounded_rounded_distance = 0;\n        long left_rounded_rounded_rounded_rounded_value = 0;\n        long right_rounded_rounded_rounded_rounded_value = 0;\n        long left_rounded_rounded_rounded_rounded_rounded = 0;\n        long right_rounded_rounded_rounded_rounded_rounded = 0;\n        long left_rounded_rounded_rounded_rounded_rounded_distance = 0;\n        long right_rounded_rounded_rounded_rounded_rounded_distance = 0;\n        long left_rounded_rounded_rounded_rounded_rounded_value = 0;\n        long right_rounded_rounded_rounded_rounded_rounded_value = 0;\n        long left_rounded_rounded_rounded_rounded_rounded_rounded = 0;\n        long right_rounded_\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxqott7n6.cs(61,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0;\n        long num61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1525: Invalid expression term '}'\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long temp = 0;\n        long sign = 1;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0;\n        long num61 = 0;\n        long num62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpu_t61nhq.cs(87,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception e) {\n            throw new Exception(\"Invalid input\");\n        }\n        if (result < 0) {\n            result = Math.Abs(result);\n        }\n        else {\n            result = Math.Abs(result);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpe34jxsk3.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmpe34jxsk3.cs(27,26): warning CS0168: The variable 'e' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long diff = 0;\n        long diff_left = 0;\n        long diff_right = 0;\n        long diff_diff = 0;\n        long diff_diff_left = 0;\n        long diff_diff_right = 0;\n        long diff_diff_diff = 0;\n        long diff_diff_diff_left = 0;\n        long diff_diff_diff_right = 0;\n        long diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_left = 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8kakugkk.cs(54,72): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid input\");\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp24yc1yt6.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmp24yc1yt6.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_diff = 0;\n        long right_diff = 0;\n        long diff = 0;\n        long left_int = 0;\n        long right_int = 0;\n        long left_int_diff = 0;\n        long right_int_diff = 0;\n        long left_int_diff_abs = 0;\n        long right_int_diff_abs = 0;\n        long diff_abs = 0;\n        long left_int_diff_abs_max = 0;\n        long right_int_diff_abs_max = 0;\n        long diff_abs_max = 0;\n        long left_int_diff_abs_min = 0;\n        long right_int_diff_abs_min = 0;\n        long diff_abs_min = 0;\n        long left_int_diff_abs_min_max = 0;\n        long right_int_diff_abs_min_max = 0;\n        long diff_abs_min_max = 0;\n        long left_int_diff_abs_min_max_diff = 0;\n        long right_int_diff_abs_min_max_diff = 0;\n        long diff_abs_min_max_diff = 0;\n        long left_int_diff_abs_min_max_diff_abs = 0;\n        long right_int_diff_abs_min_max_diff_abs = 0;\n        long diff_abs_min_max_diff_abs = 0;\n        long left_int_diff_abs_min_max_diff_abs_max = 0;\n        long right_int_diff_abs_min_max_diff_abs_max = 0;\n        long diff_abs_min_max_diff_abs_max = 0;\n        long left_int_diff_abs_min_max_diff_abs_min = 0;\n        long right_int_diff_abs_min_max_diff_abs_min = 0;\n        long diff_abs_min_max_diff_abs_min = 0;\n        long left_int_diff_abs_min_max_diff_abs_min_\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5wx7pw5w.cs(57,53): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff_min = 0;\n        long diff_max = 0;\n        long diff_diff = 0;\n        long diff_diff_min = 0;\n        long diff_diff_max = 0;\n        long diff_diff_diff = 0;\n        long diff_diff_diff_min = 0;\n        long diff_diff_diff_max = 0;\n        long diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_min = 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptpqwid1h.cs(54,71): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_value = 0;\n        long right_value = 0;\n        long left_value_distance = 0;\n        long right_value_distance = 0;\n        long left_value_distance_temp = 0;\n        long right_value_distance_temp = 0;\n        long left_value_distance_temp2 = 0;\n        long right_value_distance_temp2 = 0;\n        long left_value_distance_temp3 = 0;\n        long right_value_distance_temp3 = 0;\n        long left_value_distance_temp4 = 0;\n        long right_value_distance_temp4 = 0;\n        long left_value_distance_temp5 = 0;\n        long right_value_distance_temp5 = 0;\n        long left_value_distance_temp6 = 0;\n        long right_value_distance_temp6 = 0;\n        long left_value_distance_temp7 = 0;\n        long right_value_distance_temp7 = 0;\n        long left_value_distance_temp8 = 0;\n        long right_value_distance_temp8 = 0;\n        long left_value_distance_temp9 = 0;\n        long right_value_distance_temp9 = 0;\n        long left_value_distance_temp10 = 0;\n        long right_value_distance_temp10 = 0;\n        long left_value_distance_temp11 = 0;\n        long right_value_distance_temp11 = 0;\n        long left_value_distance_temp12 = 0;\n        long right_value_distance_temp12 = 0;\n        long left_value_distance_temp13 = 0;\n        long right_value_distance_temp13 = 0;\n        long left_value_distance_temp14 = 0;\n        long right_value_distance_temp14 = 0;\n        long left_value_distance_temp15 = 0;\n        long right_value_distance_temp15 = 0;\n        long left_value_distance_temp16 = 0;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxv64vg16.cs(23,14): warning CS0219: The variable 'result' is assigned but its value is never used\n/tmp/tmpxv64vg16.cs(24,14): warning CS0219: The variable 'left' is assigned but its value is never used\n/tmp/tmpxv64vg16.cs(25,14): warning CS0219: The variable 'right' is assigned but its value is never used\n/tmp/tmpxv64vg16.cs(26,14): warning CS0219: The variable 'left_distance' is assigned but its value is never used\n/tmp/tmpxv64vg16.cs(27,14): warning CS0219: The variable 'right_distance' is assigned but its value is never used\n/tmp/tmpxv64vg16.cs(28,14): warning CS0219: The variable 'left_value' is assigned but its value is never used\n/tmp/tmpxv64vg16.cs(29,14): warning CS0219: The variable 'right_value' is assigned but its value is never used\n/tmp/tmpxv64vg16.cs(30,14): warning CS0219: The variable 'left_value_distance' is assigned but its value is never used\n/tmp/tmpxv64vg16.cs(31,14): warning CS0219: The variable 'right_value_distance' is assigned but its value is never used\n/tmp/tmpxv64vg16.cs(32,14): warning CS0219: The variable 'left_value_distance_temp' is assigned but its value is never used\n/tmp/tmpxv64vg16.cs(33,14): warning CS0219: The variable 'right_value_distance_temp' is assigned but its value is never used\n/tmp/tmpxv64vg16.cs(34,14): warning CS0219: The variable 'left_value_distance_temp2' is assigned but its value is never used\n/tmp/tmpxv64vg16.cs(35,14): warning CS0219: The variable 'right_value_distance_temp2' is assigned but its value is never used\n/tmp/tmpxv64vg16.cs(36,14): warning CS0219: The variable 'left_value_distance_temp3' is assigned but its value is never used\n/tmp/tmpxv64vg16.cs(37,14): warning CS0219: The variable 'right_value_distance_temp3' is assigned but its value is never used\n/tmp/tmpxv64vg16.cs(38,14): warning CS0219: The variable 'left_value_distance_temp4' is assigned but its value is never used\n/tmp/tmpxv64vg16.cs(39,14): warning CS0219:",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long distance = 0;\n        long left_int = 0;\n        long right_int = 0;\n        long left_int_distance = 0;\n        long right_int_distance = 0;\n        long left_int_distance_square = 0;\n        long right_int_distance_square = 0;\n        long left_int_distance_square_sum = 0;\n        long right_int_distance_square_sum = 0;\n        long left_int_distance_square_sum_square = 0;\n        long right_int_distance_square_sum_square = 0;\n        long left_int_distance_square_sum_sum = 0;\n        long right_int_distance_square_sum_sum = 0;\n        long left_int_distance_square_sum_sum_square = 0;\n        long right_int_distance_square_sum_sum_square = 0;\n        long left_int_distance_square_sum_sum_sum = 0;\n        long right_int_distance_square_sum_sum_sum = 0;\n        long left_int_distance_square_sum_sum_sum_square = 0;\n        long right_int_distance_square_sum_sum_sum_square = 0;\n        long left_int_distance_square_sum_sum_sum_sum = 0;\n        long right_int_distance_square_sum_sum_sum_sum = 0;\n        long left_int_distance_square_sum_sum_sum_sum_square = 0;\n        long right_int_distance_square_sum_sum_sum_sum_square = 0;\n        long left_int_distance_square_sum_sum_sum_sum_sum = 0;\n        long right_int_distance_square_sum_sum_sum_sum_sum = 0;\n        long left_int_distance_square_sum_sum_sum_sum_sum_square = 0;\n        long right_int_distance_square_sum_sum_sum_sum_sum_square = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphgrq_jak.cs(23,14): warning CS0219: The variable 'result' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(24,14): warning CS0219: The variable 'left' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(25,14): warning CS0219: The variable 'right' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(26,14): warning CS0219: The variable 'left_distance' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(27,14): warning CS0219: The variable 'right_distance' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(28,14): warning CS0219: The variable 'distance' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(29,14): warning CS0219: The variable 'left_int' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(30,14): warning CS0219: The variable 'right_int' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(31,14): warning CS0219: The variable 'left_int_distance' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(32,14): warning CS0219: The variable 'right_int_distance' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(33,14): warning CS0219: The variable 'left_int_distance_square' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(34,14): warning CS0219: The variable 'right_int_distance_square' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(35,14): warning CS0219: The variable 'left_int_distance_square_sum' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(36,14): warning CS0219: The variable 'right_int_distance_square_sum' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(37,14): warning CS0219: The variable 'left_int_distance_square_sum_square' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(38,14): warning CS0219: The variable 'right_int_distance_square_sum_square' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(39,14): warning CS0219",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_delta = 0;\n        long right_delta = 0;\n        long delta = 0;\n        long delta_left = 0;\n        long delta_right = 0;\n        long delta_left_delta = 0;\n        long delta_right_delta = 0;\n        long delta_delta = 0;\n        long delta_delta_left = 0;\n        long delta_delta_right = 0;\n        long delta_delta_left_delta = 0;\n        long delta_delta_right_delta = 0;\n        long delta_delta_delta = 0;\n        long delta_delta_delta_left = 0;\n        long delta_delta_delta_right = 0;\n        long delta_delta_delta_left_delta = 0;\n        long delta_delta_delta_right_delta = 0;\n        long delta_delta_delta_delta = 0;\n        long delta_delta_delta_delta_left = 0;\n        long delta_delta_delta_delta_right = 0;\n        long delta_delta_delta_delta_left_delta = 0;\n        long delta_delta_delta_delta_right_delta = 0;\n        long delta_delta_delta_delta_delta = 0;\n        long delta_delta_delta_delta_delta_left = 0;\n        long delta_delta_delta_delta_delta_right = 0;\n        long delta_delta_delta_delta_delta_left_delta = 0;\n        long delta_delta_delta_delta_delta_right_delta = 0;\n        long delta_delta_delta_delta_delta_delta = 0;\n        long delta_delta_delta_delta_delta_delta_left = 0;\n        long delta_delta_delta_delta_delta_delta_right = 0;\n        long delta_delta\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxegtzpuk.cs(56,25): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long number = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6dgq58_a.cs(87,22): error CS1525: Invalid expression term '}'\n/tmp/tmp6dgq58_a.cs(87,22): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long number = 0;\n        long diff = 0;\n        long min = 0;\n        long max = 0;\n        long abs = 0;\n        long diff_min = 0;\n        long diff_max = 0;\n        long diff_abs = 0;\n        long diff_diff = 0;\n        long diff_diff_min = 0;\n        long diff_diff_max = 0;\n        long diff_diff_abs = 0;\n        long diff_diff_diff = 0;\n        long diff_diff_diff_min = 0;\n        long diff_diff_diff_max = 0;\n        long diff_diff_diff_abs = 0;\n        long diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_abs = 0;\n        long diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_abs = 0;\n        long diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff_abs = 0;\n        long diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff_diff_abs = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4jng4mik.cs(59,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0;\n        long num61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1525: Invalid expression term '}'\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        } catch (Exception e) {\n            throw new Exception(\"Invalid input\");\n        }\n        return Math.Round(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_n_g480z.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmp_n_g480z.cs(29,21): error CS0121: The call is ambiguous between the following methods or properties: 'Math.Round(decimal)' and 'Math.Round(double)'\n/tmp/tmp_n_g480z.cs(26,28): warning CS0168: The variable 'e' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception e) {\n            throw new Exception(\"Invalid input\");\n        }\n        return Math.Round(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl0_aeyhe.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmpl0_aeyhe.cs(30,21): error CS0121: The call is ambiguous between the following methods or properties: 'Math.Round(decimal)' and 'Math.Round(double)'\n/tmp/tmpl0_aeyhe.cs(27,26): warning CS0168: The variable 'e' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_difference = 0;\n        long right_difference = 0;\n        long difference = 0;\n        long temp = 0;\n        long temp_distance = 0;\n        long temp_difference = 0;\n        long temp_left = 0;\n        long temp_right = 0;\n        long temp_left_distance = 0;\n        long temp_right_distance = 0;\n        long temp_left_difference = 0;\n        long temp_right_difference = 0;\n        long temp_difference_left = 0;\n        long temp_difference_right = 0;\n        long temp_left_difference_left = 0;\n        long temp_left_difference_right = 0;\n        long temp_right_difference_left = 0;\n        long temp_right_difference_right = 0;\n        long temp_difference_left_left = 0;\n        long temp_difference_left_right = 0;\n        long temp_difference_right_left = 0;\n        long temp_difference_right_right = 0;\n        long temp_left_difference_left_left = 0;\n        long temp_left_difference_left_right = 0;\n        long temp_left_difference_right_left = 0;\n        long temp_left_difference_right_right = 0;\n        long temp_right_difference_left_left = 0;\n        long temp_right_difference_left_right = 0;\n        long temp_right_difference_right_left = 0;\n        long temp_right_difference_right_right = 0;\n        long temp_left_difference_left_left_left = 0;\n        long temp_left_difference_left_left_right = 0;\n        long temp_left_difference_left_right_left = 0;\n        long temp_left_difference_left_right_right = 0;\n        long temp_left_difference_right_left_left = 0;\n        long\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxpr9a3_x.cs(63,13): error CS1001: Identifier expected\n/tmp/tmpxpr9a3_x.cs(63,13): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long num = 0;\n        int i = 0;\n        int len = value.Length;\n        for (i = 0; i < len; i++) {\n            num = (long) (value.Substring(i, 1).ToCharArray()[0] - 48);\n            if (num > max) {\n                max = num;\n            }\n            if (num < min) {\n                min = num;\n            }\n            diff = max - min;\n            if (diff == 0) {\n                result = max;\n                break;\n            }\n            if (diff > 0) {\n                result = max + 1;\n                break;\n            }\n            if (diff < 0) {\n                result = max - 1;\n                break;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0741f1a1595a4f15be568b91de4cf0cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0741f1a1595a4f15be568b91de4cf0cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid input\");\n        }\n        if (Math.Abs(result) > Math.Abs(Math.MaxInt64) || Math.Abs(result) < Math.Abs(Math.MinInt64))\n            throw new Exception(\"Invalid input\");\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt7jji4n3.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmpt7jji4n3.cs(30,46): error CS0117: 'Math' does not contain a definition for 'MaxInt64'\n/tmp/tmpt7jji4n3.cs(30,92): error CS0117: 'Math' does not contain a definition for 'MinInt64'\n/tmp/tmpt7jji4n3.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long distance = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxpfowm6x.cs(87,18): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid input\");\n        }\n        if (Math.Abs(result) > Long.MaxValue) {\n            throw new Exception(\"Number too large\");\n        }\n        if (Math.Abs(result) < Long.MinValue) {\n            throw new Exception(\"Number too small\");\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcpgotbu6.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmpcpgotbu6.cs(30,32): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmpcpgotbu6.cs(33,32): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmpcpgotbu6.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long distance = 0;\n        long left_int = 0;\n        long right_int = 0;\n        long left_int_distance = 0;\n        long right_int_distance = 0;\n        long int_distance = 0;\n        long left_fraction = 0;\n        long right_fraction = 0;\n        long fraction = 0;\n        long left_fraction_distance = 0;\n        long right_fraction_distance = 0;\n        long fraction_distance = 0;\n        long left_exp = 0;\n        long right_exp = 0;\n        long exp = 0;\n        long left_exp_distance = 0;\n        long right_exp_distance = 0;\n        long exp_distance = 0;\n        long left_dec = 0;\n        long right_dec = 0;\n        long dec = 0;\n        long left_dec_distance = 0;\n        long right_dec_distance = 0;\n        long dec_distance = 0;\n        long left_dec_exp = 0;\n        long right_dec_exp = 0;\n        long dec_exp = 0;\n        long left_dec_exp_distance = 0;\n        long right_dec_exp_distance = 0;\n        long dec_exp_distance = 0;\n        long left_dec_dec = 0;\n        long right_dec_dec = 0;\n        long dec_dec = 0;\n        long left_dec_dec_distance = 0;\n        long right_dec_dec_distance = 0;\n        long dec_dec_distance = 0;\n        long left_dec_dec_exp = 0;\n        long right_dec_dec_exp = 0;\n        long dec_dec_exp = 0;\n        long left_dec_dec_exp_distance = 0;\n        long right_dec_dec_exp_distance = 0;\n        long dec_dec_exp_distance = 0;\n        long left_dec_dec_dec = 0;\n        long right_dec_dec_dec = 0;\n        long dec\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyk9uidly.cs(72,17): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid input\");\n        }\n        if (result < 0) {\n            result = Math.Abs(result);\n        }\n        else {\n            result = Math.Abs(result);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl_8zicey.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmpl_8zicey.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid number: \" + value);\n        }\n        if (Math.Abs(result) > Math.Abs(Math.MaxInt64)) {\n            throw new Exception(\"Number too large: \" + value);\n        }\n        if (Math.Abs(result) < Math.Abs(Math.MinInt64)) {\n            throw new Exception(\"Number too small: \" + value);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplmk6xivw.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmplmk6xivw.cs(30,46): error CS0117: 'Math' does not contain a definition for 'MaxInt64'\n/tmp/tmplmk6xivw.cs(33,46): error CS0117: 'Math' does not contain a definition for 'MinInt64'\n/tmp/tmplmk6xivw.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_diff = 0;\n        long right_diff = 0;\n        long diff = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxl0iigwb.cs(23,14): warning CS0219: The variable 'result' is assigned but its value is never used\n/tmp/tmpxl0iigwb.cs(24,14): warning CS0219: The variable 'left' is assigned but its value is never used\n/tmp/tmpxl0iigwb.cs(25,14): warning CS0219: The variable 'right' is assigned but its value is never used\n/tmp/tmpxl0iigwb.cs(26,14): warning CS0219: The variable 'left_distance' is assigned but its value is never used\n/tmp/tmpxl0iigwb.cs(27,14): warning CS0219: The variable 'right_distance' is assigned but its value is never used\n/tmp/tmpxl0iigwb.cs(28,14): warning CS0219: The variable 'left_diff' is assigned but its value is never used\n/tmp/tmpxl0iigwb.cs(29,14): warning CS0219: The variable 'right_diff' is assigned but its value is never used\n/tmp/tmpxl0iigwb.cs(30,14): warning CS0219: The variable 'diff' is assigned but its value is never used\n/tmp/tmpxl0iigwb.cs(31,14): warning CS0219: The variable 'temp' is assigned but its value is never used\n/tmp/tmpxl0iigwb.cs(32,14): warning CS0219: The variable 'temp2' is assigned but its value is never used\n/tmp/tmpxl0iigwb.cs(33,14): warning CS0219: The variable 'temp3' is assigned but its value is never used\n/tmp/tmpxl0iigwb.cs(34,14): warning CS0219: The variable 'temp4' is assigned but its value is never used\n/tmp/tmpxl0iigwb.cs(35,14): warning CS0219: The variable 'temp5' is assigned but its value is never used\n/tmp/tmpxl0iigwb.cs(36,14): warning CS0219: The variable 'temp6' is assigned but its value is never used\n/tmp/tmpxl0iigwb.cs(37,14): warning CS0219: The variable 'temp7' is assigned but its value is never used\n/tmp/tmpxl0iigwb.cs(38,14): warning CS0219: The variable 'temp8' is assigned but its value is never used\n/tmp/tmpxl0iigwb.cs(39,14): warning CS0219: The variable 'temp9' is assigned but its value is never used\n/tmp/tmpxl0iigwb.cs(40,14): warning CS0219: The variable 'temp10' is assigned but its value is never used\n/tmp/t",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long number = 0;\n        long difference = 0;\n        long temp = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int aa = 0;\n        int bb = 0;\n        int cc = 0;\n        int dd = 0;\n        int ee = 0;\n        int ff = 0;\n        int gg = 0;\n        int hh = 0;\n        int ii = 0;\n        int jj = 0;\n        int kk = 0;\n        int ll = 0;\n        int mm = 0;\n        int nn = 0;\n        int oo = 0;\n        int pp = 0;\n        int qq = 0;\n        int rr = 0;\n        int ss = 0;\n        int tt = 0;\n        int uu = 0;\n        int vv = 0;\n        int ww = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4yy41mu1.cs(53,13): error CS0128: A local variable or function named 'i' is already defined in this scope\n/tmp/tmp4yy41mu1.cs(54,13): error CS0128: A local variable or function named 'j' is already defined in this scope\n/tmp/tmp4yy41mu1.cs(55,13): error CS0128: A local variable or function named 'k' is already defined in this scope\n/tmp/tmp4yy41mu1.cs(56,13): error CS0128: A local variable or function named 'l' is already defined in this scope\n/tmp/tmp4yy41mu1.cs(57,13): error CS0128: A local variable or function named 'm' is already defined in this scope\n/tmp/tmp4yy41mu1.cs(58,13): error CS0128: A local variable or function named 'n' is already defined in this scope\n/tmp/tmp4yy41mu1.cs(59,13): error CS0128: A local variable or function named 'o' is already defined in this scope\n/tmp/tmp4yy41mu1.cs(60,13): error CS0128: A local variable or function named 'p' is already defined in this scope\n/tmp/tmp4yy41mu1.cs(61,13): error CS0128: A local variable or function named 'q' is already defined in this scope\n/tmp/tmp4yy41mu1.cs(62,13): error CS0128: A local variable or function named 'r' is already defined in this scope\n/tmp/tmp4yy41mu1.cs(63,13): error CS0128: A local variable or function named 's' is already defined in this scope\n/tmp/tmp4yy41mu1.cs(64,13): error CS0128: A local variable or function named 't' is already defined in this scope\n/tmp/tmp4yy41mu1.cs(65,13): error CS0128: A local variable or function named 'u' is already defined in this scope\n/tmp/tmp4yy41mu1.cs(66,13): error CS0128: A local variable or function named 'v' is already defined in this scope\n/tmp/tmp4yy41mu1.cs(67,13): error CS0128: A local variable or function named 'w' is already defined in this scope\n/tmp/tmp4yy41mu1.cs(68,13): error CS0128: A local variable or function named 'x' is already defined in this scope\n/tmp/tmp4yy41mu1.cs(69,13): error CS0128: A local variable or function named 'y' is already defin",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long number = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6dgq58_a.cs(87,22): error CS1525: Invalid expression term '}'\n/tmp/tmp6dgq58_a.cs(87,22): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0;\n        long num61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1525: Invalid expression term '}'\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        int left_index = 0;\n        int right_index = 0;\n        int left_index_distance = 0;\n        int right_index_distance = 0;\n        int left_index_distance_temp = 0;\n        int right_index_distance_temp = 0;\n        int left_index_temp = 0;\n        int right_index_temp = 0;\n        int left_index_temp_temp = 0;\n        int right_index_temp_temp = 0;\n        int left_index_temp_temp_temp = 0;\n        int right_index_temp_temp_temp = 0;\n        int left_index_temp_temp_temp_temp = 0;\n        int right_index_temp_temp_temp_temp = 0;\n        int left_index_temp_temp_temp_temp_temp = 0;\n        int right_index_temp_temp_temp_temp_temp = 0;\n        int left_index_temp_temp_temp_temp_temp_temp = 0;\n        int right_index_temp_temp_temp_temp_temp_temp = 0;\n        int left_index_temp_temp_temp_temp_temp_temp_temp = 0;\n        int right_index_temp_temp_temp_temp_temp_temp_temp = 0;\n        int left_index_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        int right_index_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        int left_index_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        int right_index_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        int left_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        int right_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        int left_index_temp\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8o2tlbnt.cs(54,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0;\n        long num61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1525: Invalid expression term '}'\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_temp = 0;\n        long right_temp = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppt64kmzv.cs(56,13): error CS0128: A local variable or function named 'i' is already defined in this scope\n/tmp/tmppt64kmzv.cs(57,13): error CS0128: A local variable or function named 'j' is already defined in this scope\n/tmp/tmppt64kmzv.cs(58,13): error CS0128: A local variable or function named 'k' is already defined in this scope\n/tmp/tmppt64kmzv.cs(59,13): error CS0128: A local variable or function named 'l' is already defined in this scope\n/tmp/tmppt64kmzv.cs(60,13): error CS0128: A local variable or function named 'm' is already defined in this scope\n/tmp/tmppt64kmzv.cs(61,13): error CS0128: A local variable or function named 'n' is already defined in this scope\n/tmp/tmppt64kmzv.cs(62,13): error CS0128: A local variable or function named 'o' is already defined in this scope\n/tmp/tmppt64kmzv.cs(63,13): error CS0128: A local variable or function named 'p' is already defined in this scope\n/tmp/tmppt64kmzv.cs(64,13): error CS0128: A local variable or function named 'q' is already defined in this scope\n/tmp/tmppt64kmzv.cs(65,13): error CS0128: A local variable or function named 'r' is already defined in this scope\n/tmp/tmppt64kmzv.cs(66,13): error CS0128: A local variable or function named 's' is already defined in this scope\n/tmp/tmppt64kmzv.cs(67,13): error CS0128: A local variable or function named 't' is already defined in this scope\n/tmp/tmppt64kmzv.cs(68,13): error CS0128: A local variable or function named 'u' is already defined in this scope\n/tmp/tmppt64kmzv.cs(69,13): error CS0128: A local variable or function named 'v' is already defined in this scope\n/tmp/tmppt64kmzv.cs(70,13): error CS0128: A local variable or function named 'w' is already defined in this scope\n/tmp/tmppt64kmzv.cs(71,13): error CS0128: A local variable or function named 'x' is already defined in this scope\n/tmp/tmppt64kmzv.cs(72,13): error CS0128: A local variable or function named 'y' is already defin",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long distance = 0;\n        int sign = 1;\n        if (value.Length > 0) {\n            if (value[0] == '-') {\n                sign = -1;\n            }\n            left = Math.Abs(Long.Parse(value));\n            right = Math.Abs(Long.Parse(value) + 1);\n            left_distance = Math.Abs(left - right);\n            right_distance = Math.Abs(left - right - 1);\n            distance = Math.Max(left_distance, right_distance);\n            result = sign * Math.Round(left - distance);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpobh_lxmy.cs(34,29): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmpobh_lxmy.cs(35,30): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmpobh_lxmy.cs(39,34): error CS0121: The call is ambiguous between the following methods or properties: 'Math.Round(decimal)' and 'Math.Round(double)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid input\");\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp24yc1yt6.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmp24yc1yt6.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long number = 0;\n        long max = 0;\n        long min = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxscwvjx8.cs(87,22): error CS1525: Invalid expression term '}'\n/tmp/tmpxscwvjx8.cs(87,22): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpip3jfl94.cs(87,22): error CS1525: Invalid expression term '}'\n/tmp/tmpip3jfl94.cs(87,22): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long diff = 0;\n        long diff_left = 0;\n        long diff_right = 0;\n        long diff_left_abs = 0;\n        long diff_right_abs = 0;\n        long abs_diff = 0;\n        long abs_diff_left = 0;\n        long abs_diff_right = 0;\n        long abs_diff_left_abs = 0;\n        long abs_diff_right_abs = 0;\n        long abs_diff_left_abs_abs = 0;\n        long abs_diff_right_abs_abs = 0;\n        long abs_diff_left_abs_abs_abs = 0;\n        long abs_diff_right_abs_abs_abs = 0;\n        long abs_diff_left_abs_abs_abs_abs = 0;\n        long abs_diff_right_abs_abs_abs_abs = 0;\n        long diff_left_abs_abs = 0;\n        long diff_right_abs_abs = 0;\n        long diff_left_abs_abs_abs = 0;\n        long diff_right_abs_abs_abs = 0;\n        long diff_left_abs_abs_abs_abs = 0;\n        long diff_right_abs_abs_abs_abs = 0;\n        long diff_left_abs_abs_abs_abs_abs = 0;\n        long diff_right_abs_abs_abs_abs_abs = 0;\n        long diff_left_abs_abs_abs_abs_abs_abs = 0;\n        long diff_right_abs_abs_abs_abs_abs_abs = 0;\n        long diff_left_abs_abs_abs_abs_abs_abs_abs = 0;\n        long diff_right_abs_abs_abs_abs_abs_abs_abs = 0;\n        long diff_left_abs_abs_abs_abs_abs_abs_abs_abs = 0;\n        long diff_right_abs_abs_abs_abs_abs_abs_abs_abs = 0;\n        long diff_left_abs_abs_abs_abs_abs_abs_abs\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1uqnseho.cs(56,51): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid input\");\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp24yc1yt6.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmp24yc1yt6.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long distance = 0;\n        long min_distance = 0;\n        long max_distance = 0;\n        long min_value = 0;\n        long max_value = 0;\n        long temp_value = 0;\n        long temp_distance = 0;\n        long temp_min_distance = 0;\n        long temp_max_distance = 0;\n        long temp_min_value = 0;\n        long temp_max_value = 0;\n        long temp_left = 0;\n        long temp_right = 0;\n        long temp_left_distance = 0;\n        long temp_right_distance = 0;\n        long temp_distance_left = 0;\n        long temp_distance_right = 0;\n        long temp_min_distance_left = 0;\n        long temp_min_distance_right = 0;\n        long temp_max_distance_left = 0;\n        long temp_max_distance_right = 0;\n        long temp_min_value_left = 0;\n        long temp_min_value_right = 0;\n        long temp_max_value_left = 0;\n        long temp_max_value_right = 0;\n        long temp_left_distance_left = 0;\n        long temp_left_distance_right = 0;\n        long temp_right_distance_left = 0;\n        long temp_right_distance_right = 0;\n        long temp_distance_left_left = 0;\n        long temp_distance_left_right = 0;\n        long temp_distance_right_left = 0;\n        long temp_distance_right_right = 0;\n        long temp_min_distance_left_left = 0;\n        long temp_min_distance_left_right = 0;\n        long temp_min_distance_right_left = 0;\n        long temp_min_distance_right_right = 0;\n        long temp_max_distance_left_left = 0;\n        long temp_max_distance_left_right = 0;\n        long temp_max_distance_\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptjfmpd5n.cs(67,32): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long distance = 0;\n        long left_value = 0;\n        long right_value = 0;\n        long left_int = 0;\n        long right_int = 0;\n        long left_int_distance = 0;\n        long right_int_distance = 0;\n        long left_int_value = 0;\n        long right_int_value = 0;\n        long left_int_int = 0;\n        long right_int_int = 0;\n        long left_int_int_distance = 0;\n        long right_int_int_distance = 0;\n        long left_int_int_value = 0;\n        long right_int_int_value = 0;\n        long left_int_int_int = 0;\n        long right_int_int_int = 0;\n        long left_int_int_int_distance = 0;\n        long right_int_int_int_distance = 0;\n        long left_int_int_int_value = 0;\n        long right_int_int_int_value = 0;\n        long left_int_int_int_int = 0;\n        long right_int_int_int_int = 0;\n        long left_int_int_int_int_distance = 0;\n        long right_int_int_int_int_distance = 0;\n        long left_int_int_int_int_value = 0;\n        long right_int_int_int_int_value = 0;\n        long left_int_int_int_int_int = 0;\n        long right_int_int_int_int_int = 0;\n        long left_int_int_int_int_int_distance = 0;\n        long right_int_int_int_int_int_distance = 0;\n        long left_int_int_int_int_int_value = 0;\n        long right_int_int_int_int_int_value = 0;\n        long left_int_int_int_int_int_int = 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc1z2p56_.cs(23,14): warning CS0219: The variable 'result' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(24,14): warning CS0219: The variable 'left' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(25,14): warning CS0219: The variable 'right' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(26,14): warning CS0219: The variable 'left_distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(27,14): warning CS0219: The variable 'right_distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(28,14): warning CS0219: The variable 'distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(29,14): warning CS0219: The variable 'left_value' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(30,14): warning CS0219: The variable 'right_value' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(31,14): warning CS0219: The variable 'left_int' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(32,14): warning CS0219: The variable 'right_int' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(33,14): warning CS0219: The variable 'left_int_distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(34,14): warning CS0219: The variable 'right_int_distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(35,14): warning CS0219: The variable 'left_int_value' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(36,14): warning CS0219: The variable 'right_int_value' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(37,14): warning CS0219: The variable 'left_int_int' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(38,14): warning CS0219: The variable 'right_int_int' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(39,14): warning CS0219: The variable 'left_int_int_distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(40,",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long number = 0;\n        long sign = 1;\n        if (value.Length > 0) {\n            if (value[0] == '-') {\n                sign = -1;\n                value = value.Substring(1);\n            }\n            number = Convert.ToLong(value);\n        }\n        if (number == 0) {\n            return 0;\n        }\n        if (number < 0) {\n            number = -number;\n        }\n        if (number > 0) {\n            result = number;\n        }\n        else {\n            result = number * sign;\n        }\n        if (result < 0) {\n            result = -result;\n        }\n        if (result == 0) {\n            result = 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppqda77i9.cs(31,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_value = 0;\n        long right_value = 0;\n        long left_value_distance = 0;\n        long right_value_distance = 0;\n        int length = value.Length;\n        if (length == 0) {\n            return 0;\n        }\n        if (length == 1) {\n            return (long) (value[0] - '0');\n        }\n        if (length == 2) {\n            return (long) (value[0] - '0') * 10 + (long) (value[1] - '0');\n        }\n        if (length == 3) {\n            return (long) (value[0] - '0') * 100 + (long) (value[1] - '0') * 10 + (long) (value[2] - '0');\n        }\n        if (length == 4) {\n            return (long) (value[0] - '0') * 1000 + (long) (value[1] - '0') * 100 + (long) (value[2] - '0') * 10 + (long) (value[3] - '0');\n        }\n        if (length == 5) {\n            return (long) (value[0] - '0') * 10000 + (long) (value[1] - '0') * 1000 + (long) (value[2] - '0') * 100 + (long) (value[3] - '0') * 10 + (long) (value[4] - '0');\n        }\n        if (length == 6) {\n            return (long) (value[0] - '0') * 100000 + (long) (value[1] - '0') * 10000 + (long) (value[2] - '0') * 1000 + (long) (value[3] - '0') * 100 + (long) (value[4] - '0') * 10 + (long) (value[5] - '0');\n        }\n        if (length == 7) {\n            return (long) (value[0]\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3mavu9me.cs(55,36): error CS1026: ) expected\n/tmp/tmp3mavu9me.cs(55,36): error CS1002: ; expected\n/tmp/tmp3mavu9me.cs(57,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp3mavu9me.cs(65,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_delta = 0;\n        long right_delta = 0;\n        long delta = 0;\n        long left_int = 0;\n        long right_int = 0;\n        long left_int_delta = 0;\n        long right_int_delta = 0;\n        long left_int_delta_delta = 0;\n        long right_int_delta_delta = 0;\n        long left_int_delta_delta_delta = 0;\n        long right_int_delta_delta_delta = 0;\n        long left_int_delta_delta_delta_delta = 0;\n        long right_int_delta_delta_delta_delta = 0;\n        long left_int_delta_delta_delta_delta_delta = 0;\n        long right_int_delta_delta_delta_delta_delta = 0;\n        long left_int_delta_delta_delta_delta_delta_delta = 0;\n        long right_int_delta_delta_delta_delta_delta_delta = 0;\n        long left_int_delta_delta_delta_delta_delta_delta_delta = 0;\n        long right_int_delta_delta_delta_delta_delta_delta_delta = 0;\n        long left_int_delta_delta_delta_delta_delta_delta_delta_delta = 0;\n        long right_int_delta_delta_delta_delta_delta_delta_delta_delta = 0;\n        long left_int_delta_delta_delta_delta_delta_delta_delta_delta_delta = 0;\n        long right_int_delta_delta_delta_delta_delta_delta_delta_delta_delta = 0;\n        long left_int_delta_delta_delta\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_fnhk5jr.cs(49,40): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long num = 0;\n        int dotIndex = 0;\n        int sign = 1;\n        if (value.Length > 0 && value[0] == '-') {\n            sign = -1;\n        }\n        if (value.Length > 0 && value[0] == '0') {\n            return 0;\n        }\n        if (value.Length > 0 && value[0] == '.') {\n            dotIndex = 1;\n        }\n        if (value.Length > 0 && value[0] == '-') {\n            sign = -1;\n        }\n        if (value.Length > 0 && value[0] == '0') {\n            return 0;\n        }\n        if (value.Length > 0 && value[0] == '.') {\n            dotIndex = 1;\n        }\n        if (value.Length > 0 && value[0] == '-') {\n            sign = -1;\n        }\n        if (value.Length > 0 && value[0] == '0') {\n            return 0;\n        }\n        if (value.Length > 0 && value[0] == '.') {\n            dotIndex = 1;\n        }\n        if (value.Length > 0 && value[0] == '-') {\n            sign = -1;\n        }\n        if (value.Length > 0 && value[0] == '0') {\n            return 0;\n        }\n        if (value.Length > 0 && value[0] == '.') {\n            dotIndex = 1;\n        }\n        if (value.Length > 0 && value[0] == '-') {\n            sign = -1;\n        }\n        if (value.Length > 0 && value[0] == '0') {\n            return 0;\n        }\n        if (value.Length > 0 && value[0] == '.') {\n            dotIndex = 1;\n        }\n        if (value.Length > 0 && value[0] == '-') {\n            sign = -1;\n        }\n        if (value.Length > 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5lvrz3vm.cs(78,29): error CS1026: ) expected\n/tmp/tmp5lvrz3vm.cs(78,29): error CS1525: Invalid expression term '}'\n/tmp/tmp5lvrz3vm.cs(78,29): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception e) {\n            return 0;\n        }\n        if (result < 0) {\n            result = Math.Abs(result);\n        }\n        else {\n            result = Math.Abs(result);\n        }\n        long[] ints = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        long[] ints2 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        int count = 0;\n        for (int i = 0; i < ints.Length; i++) {\n            if (Math.Abs(ints[i] - result) < Math.Abs(ints2[i] - result)) {\n                ints2[count] = ints[i];\n                count++;\n            }\n            else {\n                ints[count] = ints[i];\n                count++;\n            }\n        }\n        if (count == 0) {\n            return result;\n        }\n        else if (count == 1) {\n            return ints2[0];\n        }\n        else {\n            return ints[0];\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpr8blkumv.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmpr8blkumv.cs(27,26): warning CS0168: The variable 'e' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_delta = 0;\n        long right_delta = 0;\n        long delta = 0;\n        long left_value = 0;\n        long right_value = 0;\n        long left_delta_value = 0;\n        long right_delta_value = 0;\n        long delta_value = 0;\n        long left_value_value = 0;\n        long right_value_value = 0;\n        long delta_value_value = 0;\n        long left_delta_value_value = 0;\n        long right_delta_value_value = 0;\n        long delta_value_value_value = 0;\n        long left_value_value_value = 0;\n        long right_value_value_value = 0;\n        long delta_value_value_value_value = 0;\n        long left_delta_value_value_value = 0;\n        long right_delta_value_value_value = 0;\n        long delta_value_value_value_value = 0;\n        long left_value_value_value_value = 0;\n        long right_value_value_value_value = 0;\n        long delta_value_value_value_value_value = 0;\n        long left_delta_value_value_value_value = 0;\n        long right_delta_value_value_value_value = 0;\n        long delta_value_value_value_value_value = 0;\n        long left_value_value_value_value_value = 0;\n        long right_value_value_value_value_value = 0;\n        long delta_value_value_value_value_value = 0;\n        long left_delta_value_value_value_value = 0;\n        long right_delta_value_value_value_value = 0;\n        long delta_value_value_value_value_value = 0;\n        long left_value_value_value_value_value = 0;\n        long right_value_value_value_value_value = 0;\n        long delta_value_value_value_value_value\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcgwd8iti.cs(60,49): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_delta = 0;\n        long right_delta = 0;\n        long delta = 0;\n        long delta_left = 0;\n        long delta_right = 0;\n        long delta_left_delta = 0;\n        long delta_right_delta = 0;\n        long delta_delta = 0;\n        long delta_delta_left = 0;\n        long delta_delta_right = 0;\n        long delta_delta_left_delta = 0;\n        long delta_delta_right_delta = 0;\n        long delta_delta_delta = 0;\n        long delta_delta_delta_left = 0;\n        long delta_delta_delta_right = 0;\n        long delta_delta_delta_left_delta = 0;\n        long delta_delta_delta_right_delta = 0;\n        long delta_delta_delta_delta = 0;\n        long delta_delta_delta_delta_left = 0;\n        long delta_delta_delta_delta_right = 0;\n        long delta_delta_delta_delta_left_delta = 0;\n        long delta_delta_delta_delta_right_delta = 0;\n        long delta_delta_delta_delta_delta = 0;\n        long delta_delta_delta_delta_delta_left = 0;\n        long delta_delta_delta_delta_delta_right = 0;\n        long delta_delta_delta_delta_delta_left_delta = 0;\n        long delta_delta_delta_delta_delta_right_delta = 0;\n        long delta_delta_delta_delta_delta_delta = 0;\n        long delta_delta_delta_delta_delta_delta_left = 0;\n        long delta_delta_delta_delta_delta_delta_right = 0;\n        long delta_delta\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxegtzpuk.cs(56,25): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid number: \" + value);\n        }\n        if (Math.Abs(result) > Long.MaxValue / 2) {\n            throw new Exception(\"Number too large\");\n        }\n        if (Math.Abs(result) < Long.MinValue / 2) {\n            throw new Exception(\"Number too small\");\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw6fxv863.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmpw6fxv863.cs(30,32): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmpw6fxv863.cs(33,32): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmpw6fxv863.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_delta = 0;\n        long right_delta = 0;\n        long delta = 0;\n        long left_delta_abs = 0;\n        long right_delta_abs = 0;\n        long delta_abs = 0;\n        long left_delta_abs_max = 0;\n        long right_delta_abs_max = 0;\n        long delta_abs_max = 0;\n        long left_delta_abs_min = 0;\n        long right_delta_abs_min = 0;\n        long delta_abs_min = 0;\n        long left_delta_abs_max_min = 0;\n        long right_delta_abs_max_min = 0;\n        long delta_abs_max_min = 0;\n        long left_delta_abs_min_max = 0;\n        long right_delta_abs_min_max = 0;\n        long delta_abs_min_max = 0;\n        long left_delta_abs_max_min_max = 0;\n        long right_delta_abs_max_min_max = 0;\n        long delta_abs_max_min_max = 0;\n        long left_delta_abs_min_max_min = 0;\n        long right_delta_abs_min_max_min = 0;\n        long delta_abs_min_max_min = 0;\n        long left_delta_abs_max_min_min = 0;\n        long right_delta_abs_max_min_min = 0;\n        long delta_abs_max_min_min = 0;\n        long left_delta_abs_min_max_min_min = 0;\n        long right_delta_abs_min_max_min_min = 0;\n        long delta_abs_min_max_min_min = 0;\n        long left_delta_abs_min_max_min_min_min = 0;\n        long right_delta_abs_min_max_min_min_min = 0;\n        long delta_abs_min_max\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpth39hk12.cs(58,31): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long temp = 0;\n        long diff = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptid5pb23.cs(87,23): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0;\n        long num61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1525: Invalid expression term '}'\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long diff = 0;\n        long diff_left = 0;\n        long diff_right = 0;\n        long diff_diff = 0;\n        long diff_diff_left = 0;\n        long diff_diff_right = 0;\n        long diff_diff_diff = 0;\n        long diff_diff_diff_left = 0;\n        long diff_diff_diff_right = 0;\n        long diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_left = 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8kakugkk.cs(54,72): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprgu4mf1d.cs(87,23): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long num = 0;\n        long sign = 1;\n        if (value.Length == 0) {\n            return 0;\n        }\n        if (value.Length == 1 && value[0] == '-') {\n            sign = -1;\n            value = value.Substring(1);\n        }\n        if (value.Length == 1 && value[0] == '+') {\n            value = value.Substring(1);\n        }\n        if (value.Length == 1 && value[0] == '0') {\n            return 0;\n        }\n        if (value.Length == 1 && value[0] == '1') {\n            return 1;\n        }\n        if (value.Length == 1 && value[0] == '2') {\n            return 2;\n        }\n        if (value.Length == 1 && value[0] == '3') {\n            return 3;\n        }\n        if (value.Length == 1 && value[0] == '4') {\n            return 4;\n        }\n        if (value.Length == 1 && value[0] == '5') {\n            return 5;\n        }\n        if (value.Length == 1 && value[0] == '6') {\n            return 6;\n        }\n        if (value.Length == 1 && value[0] == '7') {\n            return 7;\n        }\n        if (value.Length == 1 && value[0] == '8') {\n            return 8;\n        }\n        if (value.Length == 1 && value[0] == '9') {\n            return 9;\n        }\n        if (value.Length == 1 && value[0] == '.') {\n            return 0;\n        }\n        if (value.Length == 1 && value[0] == '-') {\n            return 0;\n        }\n        if (value.Length == 1 && value[0] == '+') {\n            return 0;\n        }\n        if (value.Length == 1 && value[0] == '-') {\n            return 0;\n        }\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprkplgvq1.cs(23,14): warning CS0219: The variable 'result' is assigned but its value is never used\n/tmp/tmprkplgvq1.cs(24,14): warning CS0219: The variable 'min' is assigned but its value is never used\n/tmp/tmprkplgvq1.cs(25,14): warning CS0219: The variable 'max' is assigned but its value is never used\n/tmp/tmprkplgvq1.cs(26,14): warning CS0219: The variable 'diff' is assigned but its value is never used\n/tmp/tmprkplgvq1.cs(27,14): warning CS0219: The variable 'num' is assigned but its value is never used\n/tmp/tmprkplgvq1.cs(28,14): warning CS0219: The variable 'sign' is assigned but its value is never used\n/tmp/tmprkplgvq1.cs(22,24): error CS0161: 'Problem.ClosestInteger(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long number = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpaefu_9xb.cs(87,24): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long diff = 0;\n        long diff_left = 0;\n        long diff_right = 0;\n        long diff_left_right = 0;\n        long diff_right_left = 0;\n        long diff_left_right_diff = 0;\n        long diff_right_left_diff = 0;\n        long diff_left_diff_right = 0;\n        long diff_right_diff_left = 0;\n        long diff_left_diff_right_diff = 0;\n        long diff_right_diff_left_diff = 0;\n        long diff_left_diff_right_diff_diff = 0;\n        long diff_right_diff_left_diff_diff = 0;\n        long diff_left_diff_right_diff_diff_diff = 0;\n        long diff_right_diff_left_diff_diff_diff = 0;\n        long diff_left_diff_right_diff_diff_diff_diff = 0;\n        long diff_right_diff_left_diff_diff_diff_diff = 0;\n        long diff_left_diff_right_diff_diff_diff_diff_diff = 0;\n        long diff_right_diff_left_diff_diff_diff_diff_diff = 0;\n        long diff_left_diff_right_diff_diff_diff_diff_diff_diff = 0;\n        long diff_right_diff_left_diff_diff_diff_diff_diff_diff = 0;\n        long diff_left_diff_right_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_right_diff_left_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_left_diff_right_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_right_diff_left_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_left_diff_right_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_right\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfkaf9b1u.cs(52,24): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_distance_temp = 0;\n        long right_distance_temp = 0;\n        long left_temp = 0;\n        long right_temp = 0;\n        long left_temp_temp = 0;\n        long right_temp_temp = 0;\n        long left_temp_temp_temp = 0;\n        long right_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptas_2fyv.cs(53,13): error CS1001: Identifier expected\n/tmp/tmptas_2fyv.cs(53,13): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long diff = 0;\n        long diff_left = 0;\n        long diff_right = 0;\n        long diff_diff = 0;\n        long diff_diff_left = 0;\n        long diff_diff_right = 0;\n        long diff_diff_diff = 0;\n        long diff_diff_diff_left = 0;\n        long diff_diff_diff_right = 0;\n        long diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_left = 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8kakugkk.cs(54,72): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_diff = 0;\n        long right_diff = 0;\n        long diff = 0;\n        long left_int = 0;\n        long right_int = 0;\n        long left_int_diff = 0;\n        long right_int_diff = 0;\n        long left_int_diff_abs = 0;\n        long right_int_diff_abs = 0;\n        long diff_abs = 0;\n        long left_int_diff_abs_max = 0;\n        long right_int_diff_abs_max = 0;\n        long diff_abs_max = 0;\n        long left_int_diff_abs_min = 0;\n        long right_int_diff_abs_min = 0;\n        long diff_abs_min = 0;\n        long left_int_diff_abs_min_max = 0;\n        long right_int_diff_abs_min_max = 0;\n        long diff_abs_min_max = 0;\n        long left_int_diff_abs_min_min = 0;\n        long right_int_diff_abs_min_min = 0;\n        long diff_abs_min_min = 0;\n        long left_int_diff_abs_min_min_max = 0;\n        long right_int_diff_abs_min_min_max = 0;\n        long diff_abs_min_min_max = 0;\n        long left_int_diff_abs_min_min_min = 0;\n        long right_int_diff_abs_min_min_min = 0;\n        long diff_abs_min_min_min = 0;\n        long left_int_diff_abs_min_min_min_max = 0;\n        long right_int_diff_abs_min_min_min_max = 0;\n        long diff_abs_min_min_min_max = 0;\n        long left_int_diff_abs_min_min_min_min = 0;\n        long right_int_diff_abs_min_min_min_min = 0;\n        long diff_abs_min_\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpihe4bj4t.cs(59,27): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        } catch (Exception ex) {\n            throw new Exception(\"Invalid value: \" + value);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprof_z8jz.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmprof_z8jz.cs(26,28): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpip3jfl94.cs(87,22): error CS1525: Invalid expression term '}'\n/tmp/tmpip3jfl94.cs(87,22): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_diff = 0;\n        long right_diff = 0;\n        long diff = 0;\n        long diff_left = 0;\n        long diff_right = 0;\n        long diff_left_abs = 0;\n        long diff_right_abs = 0;\n        long diff_left_abs_diff = 0;\n        long diff_right_abs_diff = 0;\n        long diff_left_abs_diff_abs = 0;\n        long diff_right_abs_diff_abs = 0;\n        long diff_left_abs_diff_abs_diff = 0;\n        long diff_right_abs_diff_abs_diff = 0;\n        long diff_left_abs_diff_abs_diff_abs = 0;\n        long diff_right_abs_diff_abs_diff_abs = 0;\n        long diff_left_abs_diff_abs_diff_abs_diff = 0;\n        long diff_right_abs_diff_abs_diff_abs_diff = 0;\n        long diff_left_abs_diff_abs_diff_abs_diff_abs = 0;\n        long diff_right_abs_diff_abs_diff_abs_diff_abs = 0;\n        long diff_left_abs_diff_abs_diff_abs_diff_abs_diff = 0;\n        long diff_right_abs_diff_abs_diff_abs_diff_abs_diff = 0;\n        long diff_left_abs_diff_abs_diff_abs_diff_abs_diff_abs = 0;\n        long diff_right_abs_diff_abs_diff_abs_diff_abs_diff_abs = 0;\n        long diff_left_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff = 0;\n        long diff_right_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff = 0;\n        long diff_left_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff_abs = 0;\n        long diff_right_abs_diff_abs_diff_abs_diff\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp756ycaml.cs(52,51): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid input\");\n        }\n        if (Math.Abs(result) > Math.Abs(Math.MaxInt64) || Math.Abs(result) < Math.Abs(Math.MinInt64)) {\n            throw new Exception(\"Invalid input\");\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpomslpa14.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmpomslpa14.cs(30,46): error CS0117: 'Math' does not contain a definition for 'MaxInt64'\n/tmp/tmpomslpa14.cs(30,92): error CS0117: 'Math' does not contain a definition for 'MinInt64'\n/tmp/tmpomslpa14.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpip3jfl94.cs(87,22): error CS1525: Invalid expression term '}'\n/tmp/tmpip3jfl94.cs(87,22): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpip3jfl94.cs(87,22): error CS1525: Invalid expression term '}'\n/tmp/tmpip3jfl94.cs(87,22): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0;\n        long num61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1525: Invalid expression term '}'\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_value = 0;\n        long right_value = 0;\n        int left_index = 0;\n        int right_index = 0;\n        int left_index_distance = 0;\n        int right_index_distance = 0;\n        int left_index_value = 0;\n        int right_index_value = 0;\n        int left_index_index = 0;\n        int right_index_index = 0;\n        int left_index_index_distance = 0;\n        int right_index_index_distance = 0;\n        int left_index_index_value = 0;\n        int right_index_index_value = 0;\n        int left_index_index_index = 0;\n        int right_index_index_index = 0;\n        int left_index_index_index_distance = 0;\n        int right_index_index_index_distance = 0;\n        int left_index_index_index_value = 0;\n        int right_index_index_index_value = 0;\n        int left_index_index_index_index = 0;\n        int right_index_index_index_index = 0;\n        int left_index_index_index_index_distance = 0;\n        int right_index_index_index_index_distance = 0;\n        int left_index_index_index_index_value = 0;\n        int right_index_index_index_index_value = 0;\n        int left_index_index_index_index_index = 0;\n        int right_index_index_index_index_index = 0;\n        int left_index_index_index_index_index_distance = 0;\n        int right_index_index_index_index_index_distance = 0;\n        int left_index_index_index_index_index_value = 0;\n        int right_index_index_index_index_index_value = 0;\n        int left_index_index_index_index_index_index = 0;\n        int right_index_\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkwspvpk3.cs(61,25): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpip3jfl94.cs(87,22): error CS1525: Invalid expression term '}'\n/tmp/tmpip3jfl94.cs(87,22): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_diff = 0;\n        long right_diff = 0;\n        long diff = 0;\n        long diff_left = 0;\n        long diff_right = 0;\n        long diff_left_diff = 0;\n        long diff_right_diff = 0;\n        long diff_left_diff_right_diff = 0;\n        long diff_left_diff_right_diff_left_diff = 0;\n        long diff_left_diff_right_diff_left_diff_right_diff = 0;\n        long diff_left_diff_right_diff_left_diff_right_diff_left_diff = 0;\n        long diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff = 0;\n        long diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff = 0;\n        long diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff = 0;\n        long diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff = 0;\n        long diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff = 0;\n        long diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff = 0;\n        long diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff = 0;\n        long diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd9s5kqp2.cs(44,118): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long number = 0;\n        long diff = 0;\n        long max = 0;\n        long min = 0;\n        long diff_min = 0;\n        long diff_max = 0;\n        long diff_diff = 0;\n        long diff_diff_min = 0;\n        long diff_diff_max = 0;\n        long diff_diff_diff = 0;\n        long diff_diff_diff_min = 0;\n        long diff_diff_diff_max = 0;\n        long diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqylhuccf.cs(55,54): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid input\");\n        }\n        if (result < 0) {\n            result = -result;\n        }\n        long diff = Math.Abs(result);\n        long diff2 = diff + 1;\n        if (diff == diff2) {\n            result = result + 1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy6hcgbq9.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmpy6hcgbq9.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long number = 0;\n        long diff = 0;\n        long min = 0;\n        long max = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpf761a2fh.cs(87,24): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long diff = 0;\n        long abs = 0;\n        long min = 0;\n        long max = 0;\n        long number = 0;\n        long sign = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwsdf3c2y.cs(23,14): warning CS0219: The variable 'result' is assigned but its value is never used\n/tmp/tmpwsdf3c2y.cs(24,14): warning CS0219: The variable 'diff' is assigned but its value is never used\n/tmp/tmpwsdf3c2y.cs(25,14): warning CS0219: The variable 'abs' is assigned but its value is never used\n/tmp/tmpwsdf3c2y.cs(26,14): warning CS0219: The variable 'min' is assigned but its value is never used\n/tmp/tmpwsdf3c2y.cs(27,14): warning CS0219: The variable 'max' is assigned but its value is never used\n/tmp/tmpwsdf3c2y.cs(28,14): warning CS0219: The variable 'number' is assigned but its value is never used\n/tmp/tmpwsdf3c2y.cs(29,14): warning CS0219: The variable 'sign' is assigned but its value is never used\n/tmp/tmpwsdf3c2y.cs(30,14): warning CS0219: The variable 'temp' is assigned but its value is never used\n/tmp/tmpwsdf3c2y.cs(31,14): warning CS0219: The variable 'temp2' is assigned but its value is never used\n/tmp/tmpwsdf3c2y.cs(32,14): warning CS0219: The variable 'temp3' is assigned but its value is never used\n/tmp/tmpwsdf3c2y.cs(33,14): warning CS0219: The variable 'temp4' is assigned but its value is never used\n/tmp/tmpwsdf3c2y.cs(34,14): warning CS0219: The variable 'temp5' is assigned but its value is never used\n/tmp/tmpwsdf3c2y.cs(35,14): warning CS0219: The variable 'temp6' is assigned but its value is never used\n/tmp/tmpwsdf3c2y.cs(36,14): warning CS0219: The variable 'temp7' is assigned but its value is never used\n/tmp/tmpwsdf3c2y.cs(37,14): warning CS0219: The variable 'temp8' is assigned but its value is never used\n/tmp/tmpwsdf3c2y.cs(38,14): warning CS0219: The variable 'temp9' is assigned but its value is never used\n/tmp/tmpwsdf3c2y.cs(39,14): warning CS0219: The variable 'temp10' is assigned but its value is never used\n/tmp/tmpwsdf3c2y.cs(40,14): warning CS0219: The variable 'temp11' is assigned but its value is never used\n/tmp/tmpwsdf3c2y.cs(41,14): warning ",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid number: \" + value);\n        }\n        if (Math.Abs(result) > Long.MaxValue) {\n            throw new Exception(\"Number too large: \" + value);\n        }\n        if (Math.Abs(result) < Long.MinValue) {\n            throw new Exception(\"Number too small: \" + value);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnr5r08uz.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmpnr5r08uz.cs(30,32): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmpnr5r08uz.cs(33,32): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmpnr5r08uz.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpip3jfl94.cs(87,22): error CS1525: Invalid expression term '}'\n/tmp/tmpip3jfl94.cs(87,22): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long distance = 0;\n        long left_value = 0;\n        long right_value = 0;\n        long left_int = 0;\n        long right_int = 0;\n        long left_int_distance = 0;\n        long right_int_distance = 0;\n        long left_int_value = 0;\n        long right_int_value = 0;\n        long left_int_int = 0;\n        long right_int_int = 0;\n        long left_int_int_distance = 0;\n        long right_int_int_distance = 0;\n        long left_int_int_value = 0;\n        long right_int_int_value = 0;\n        long left_int_int_int = 0;\n        long right_int_int_int = 0;\n        long left_int_int_int_distance = 0;\n        long right_int_int_int_distance = 0;\n        long left_int_int_int_value = 0;\n        long right_int_int_int_value = 0;\n        long left_int_int_int_int = 0;\n        long right_int_int_int_int = 0;\n        long left_int_int_int_int_distance = 0;\n        long right_int_int_int_int_distance = 0;\n        long left_int_int_int_int_value = 0;\n        long right_int_int_int_int_value = 0;\n        long left_int_int_int_int_int = 0;\n        long right_int_int_int_int_int = 0;\n        long left_int_int_int_int_int_distance = 0;\n        long right_int_int_int_int_int_distance = 0;\n        long left_int_int_int_int_int_value = 0;\n        long right_int_int_int_int_int_value = 0;\n        long left_int_int_int_int_int_int = 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc1z2p56_.cs(23,14): warning CS0219: The variable 'result' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(24,14): warning CS0219: The variable 'left' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(25,14): warning CS0219: The variable 'right' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(26,14): warning CS0219: The variable 'left_distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(27,14): warning CS0219: The variable 'right_distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(28,14): warning CS0219: The variable 'distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(29,14): warning CS0219: The variable 'left_value' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(30,14): warning CS0219: The variable 'right_value' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(31,14): warning CS0219: The variable 'left_int' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(32,14): warning CS0219: The variable 'right_int' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(33,14): warning CS0219: The variable 'left_int_distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(34,14): warning CS0219: The variable 'right_int_distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(35,14): warning CS0219: The variable 'left_int_value' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(36,14): warning CS0219: The variable 'right_int_value' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(37,14): warning CS0219: The variable 'left_int_int' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(38,14): warning CS0219: The variable 'right_int_int' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(39,14): warning CS0219: The variable 'left_int_int_distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(40,",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0;\n        long num61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1525: Invalid expression term '}'\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_value = 0;\n        long right_value = 0;\n        long left_difference = 0;\n        long right_difference = 0;\n        long difference = 0;\n        long distance = 0;\n        long value_length = 0;\n        long value_int = 0;\n        long value_fraction = 0;\n        long value_int_part = 0;\n        long value_fraction_part = 0;\n        long value_int_part_length = 0;\n        long value_fraction_part_length = 0;\n        long value_int_part_int = 0;\n        long value_fraction_part_int = 0;\n        long value_int_part_fraction = 0;\n        long value_fraction_part_fraction = 0;\n        long value_int_part_fraction_length = 0;\n        long value_fraction_part_fraction_length = 0;\n        long value_int_part_fraction_int = 0;\n        long value_fraction_part_fraction_int = 0;\n        long value_int_part_fraction_fraction = 0;\n        long value_fraction_part_fraction_fraction = 0;\n        long value_int_part_fraction_fraction_length = 0;\n        long value_fraction_part_fraction_fraction_length = 0;\n        long value_int_part_fraction_fraction_int = 0;\n        long value_fraction_part_fraction_fraction_int = 0;\n        long value_int_part_fraction_fraction_fraction = 0;\n        long value_fraction_part_fraction_fraction_fraction = 0;\n        long value_int_part_fraction_fraction_fraction_length = 0;\n        long value_fraction_part_fraction_fraction_fraction_length = 0;\n        long value_int_part_fraction_fraction_fraction_int = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8zaug1iq.cs(23,14): warning CS0219: The variable 'result' is assigned but its value is never used\n/tmp/tmp8zaug1iq.cs(24,14): warning CS0219: The variable 'left' is assigned but its value is never used\n/tmp/tmp8zaug1iq.cs(25,14): warning CS0219: The variable 'right' is assigned but its value is never used\n/tmp/tmp8zaug1iq.cs(26,14): warning CS0219: The variable 'left_distance' is assigned but its value is never used\n/tmp/tmp8zaug1iq.cs(27,14): warning CS0219: The variable 'right_distance' is assigned but its value is never used\n/tmp/tmp8zaug1iq.cs(28,14): warning CS0219: The variable 'left_value' is assigned but its value is never used\n/tmp/tmp8zaug1iq.cs(29,14): warning CS0219: The variable 'right_value' is assigned but its value is never used\n/tmp/tmp8zaug1iq.cs(30,14): warning CS0219: The variable 'left_difference' is assigned but its value is never used\n/tmp/tmp8zaug1iq.cs(31,14): warning CS0219: The variable 'right_difference' is assigned but its value is never used\n/tmp/tmp8zaug1iq.cs(32,14): warning CS0219: The variable 'difference' is assigned but its value is never used\n/tmp/tmp8zaug1iq.cs(33,14): warning CS0219: The variable 'distance' is assigned but its value is never used\n/tmp/tmp8zaug1iq.cs(34,14): warning CS0219: The variable 'value_length' is assigned but its value is never used\n/tmp/tmp8zaug1iq.cs(35,14): warning CS0219: The variable 'value_int' is assigned but its value is never used\n/tmp/tmp8zaug1iq.cs(36,14): warning CS0219: The variable 'value_fraction' is assigned but its value is never used\n/tmp/tmp8zaug1iq.cs(37,14): warning CS0219: The variable 'value_int_part' is assigned but its value is never used\n/tmp/tmp8zaug1iq.cs(38,14): warning CS0219: The variable 'value_fraction_part' is assigned but its value is never used\n/tmp/tmp8zaug1iq.cs(39,14): warning CS0219: The variable 'value_int_part_length' is assigned but its value is never used\n/tmp/tmp8zaug1iq.cs(",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpip3jfl94.cs(87,22): error CS1525: Invalid expression term '}'\n/tmp/tmpip3jfl94.cs(87,22): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_value = 0;\n        long right_value = 0;\n        long left_difference = 0;\n        long right_difference = 0;\n        long difference = 0;\n        long temp = 0;\n        long temp_difference = 0;\n        long temp_left = 0;\n        long temp_right = 0;\n        long temp_left_difference = 0;\n        long temp_right_difference = 0;\n        long temp_left_value = 0;\n        long temp_right_value = 0;\n        long temp_left_distance = 0;\n        long temp_right_distance = 0;\n        long temp_left_difference_value = 0;\n        long temp_right_difference_value = 0;\n        long temp_left_difference_distance = 0;\n        long temp_right_difference_distance = 0;\n        long temp_left_difference_value_distance = 0;\n        long temp_right_difference_value_distance = 0;\n        long temp_left_difference_distance_value = 0;\n        long temp_right_difference_distance_value = 0;\n        long temp_left_difference_value_distance_value = 0;\n        long temp_right_difference_value_distance_value = 0;\n        long temp_left_difference_distance_value_value = 0;\n        long temp_right_difference_distance_value_value = 0;\n        long temp_left_difference_value_distance_value_value = 0;\n        long temp_right_difference_value_distance_value_value = 0;\n        long temp_left_difference_distance_value_value_value = 0;\n        long temp_right_difference_distance_value_value_value = 0;\n        long temp_left_difference_value_distance_value_value_value = 0;\n        long temp_right_difference_value_distance_value_value_value = 0;\n        long temp_left_difference_\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpldb6j_fi.cs(61,35): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0;\n        long num61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1525: Invalid expression term '}'\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid input\");\n        }\n        if (Math.Abs(result) > Math.Abs(Math.MaxInt64) || Math.Abs(result) < Math.Abs(Math.MinInt64)) {\n            throw new Exception(\"Invalid input\");\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpomslpa14.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmpomslpa14.cs(30,46): error CS0117: 'Math' does not contain a definition for 'MaxInt64'\n/tmp/tmpomslpa14.cs(30,92): error CS0117: 'Math' does not contain a definition for 'MinInt64'\n/tmp/tmpomslpa14.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception e) {\n            return result;\n        }\n        if (Math.Abs(result) < Math.Abs(result - Math.Floor(result))) {\n            result = Math.Floor(result);\n        }\n        else {\n            result = Math.Ceiling(result);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0njs0ppg.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmp0njs0ppg.cs(30,55): error CS0121: The call is ambiguous between the following methods or properties: 'Math.Floor(decimal)' and 'Math.Floor(double)'\n/tmp/tmp0njs0ppg.cs(31,27): error CS0121: The call is ambiguous between the following methods or properties: 'Math.Floor(decimal)' and 'Math.Floor(double)'\n/tmp/tmp0njs0ppg.cs(34,27): error CS0121: The call is ambiguous between the following methods or properties: 'Math.Ceiling(decimal)' and 'Math.Ceiling(double)'\n/tmp/tmp0njs0ppg.cs(27,26): warning CS0168: The variable 'e' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid input\");\n        }\n        if (Math.Abs(result) > Math.Abs(Math.MaxInt64)) {\n            throw new Exception(\"Invalid input\");\n        }\n        if (Math.Abs(result) < Math.Abs(Math.MinInt64)) {\n            throw new Exception(\"Invalid input\");\n        }\n        if (Math.Abs(result) == Math.Abs(Math.MinInt64)) {\n            result = Math.MinInt64;\n        }\n        else if (Math.Abs(result) == Math.Abs(Math.MaxInt64)) {\n            result = Math.MaxInt64;\n        }\n        else {\n            result = Math.Round(result);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjez3pi4c.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmpjez3pi4c.cs(30,46): error CS0117: 'Math' does not contain a definition for 'MaxInt64'\n/tmp/tmpjez3pi4c.cs(33,46): error CS0117: 'Math' does not contain a definition for 'MinInt64'\n/tmp/tmpjez3pi4c.cs(36,47): error CS0117: 'Math' does not contain a definition for 'MinInt64'\n/tmp/tmpjez3pi4c.cs(37,27): error CS0117: 'Math' does not contain a definition for 'MinInt64'\n/tmp/tmpjez3pi4c.cs(39,52): error CS0117: 'Math' does not contain a definition for 'MaxInt64'\n/tmp/tmpjez3pi4c.cs(40,27): error CS0117: 'Math' does not contain a definition for 'MaxInt64'\n/tmp/tmpjez3pi4c.cs(43,27): error CS0121: The call is ambiguous between the following methods or properties: 'Math.Round(decimal)' and 'Math.Round(double)'\n/tmp/tmpjez3pi4c.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        long diff_min = 0;\n        long diff_max = 0;\n        long diff_diff = 0;\n        long diff_temp = 0;\n        long diff_diff_min = 0;\n        long diff_diff_max = 0;\n        long diff_diff_diff = 0;\n        long diff_diff_temp = 0;\n        long diff_diff_diff_min = 0;\n        long diff_diff_diff_max = 0;\n        long diff_diff_diff_diff = 0;\n        long diff_diff_diff_temp = 0;\n        long diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_temp = 0;\n        long diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_temp = 0;\n        long diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_temp = 0;\n        long diff_diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_temp = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppifg00dq.cs(58,38): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_diff = 0;\n        long right_diff = 0;\n        long diff = 0;\n        long left_diff_abs = 0;\n        long right_diff_abs = 0;\n        long diff_abs = 0;\n        long left_diff_abs_temp = 0;\n        long right_diff_abs_temp = 0;\n        long diff_abs_temp = 0;\n        long left_diff_abs_temp2 = 0;\n        long right_diff_abs_temp2 = 0;\n        long diff_abs_temp2 = 0;\n        long left_diff_abs_temp3 = 0;\n        long right_diff_abs_temp3 = 0;\n        long diff_abs_temp3 = 0;\n        long left_diff_abs_temp4 = 0;\n        long right_diff_abs_temp4 = 0;\n        long diff_abs_temp4 = 0;\n        long left_diff_abs_temp5 = 0;\n        long right_diff_abs_temp5 = 0;\n        long diff_abs_temp5 = 0;\n        long left_diff_abs_temp6 = 0;\n        long right_diff_abs_temp6 = 0;\n        long diff_abs_temp6 = 0;\n        long left_diff_abs_temp7 = 0;\n        long right_diff_abs_temp7 = 0;\n        long diff_abs_temp7 = 0;\n        long left_diff_abs_temp8 = 0;\n        long right_diff_abs_temp8 = 0;\n        long diff_abs_temp8 = 0;\n        long left_diff_abs_temp9 = 0;\n        long right_diff_abs_temp9 = 0;\n        long diff_abs_temp9 = 0;\n        long left_diff_abs_temp10 = 0;\n        long right_diff_abs_temp10 = 0;\n        long diff_abs_temp10 = 0;\n        long left_diff_abs_temp11 = 0;\n        long right_diff_abs_temp11 = 0;\n        long diff_abs_temp11 = 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg20q1mq7.cs(64,33): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_diff = 0;\n        long right_diff = 0;\n        long diff = 0;\n        long diff_left = 0;\n        long diff_right = 0;\n        long diff_left_abs = 0;\n        long diff_right_abs = 0;\n        long abs_diff = 0;\n        long abs_diff_left = 0;\n        long abs_diff_right = 0;\n        long abs_diff_left_abs = 0;\n        long abs_diff_right_abs = 0;\n        long abs_diff_left_abs_diff_right_abs = 0;\n        long abs_diff_left_abs_diff_right_abs_diff = 0;\n        long abs_diff_left_abs_diff_right_abs_diff_diff = 0;\n        long abs_diff_left_abs_diff_right_abs_diff_diff_diff = 0;\n        long abs_diff_left_abs_diff_right_abs_diff_diff_diff_diff = 0;\n        long abs_diff_left_abs_diff_right_abs_diff_diff_diff_diff_diff = 0;\n        long abs_diff_left_abs_diff_right_abs_diff_diff_diff_diff_diff_diff = 0;\n        long abs_diff_left_abs_diff_right_abs_diff_diff_diff_diff_diff_diff_diff = 0;\n        long abs_diff_left_abs_diff_right_abs_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long abs_diff_left_abs_diff_right_abs_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long abs_diff_left_abs_diff_right_abs_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long abs_diff_left_abs_diff_right_abs_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long abs_diff_left_abs\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkw6fz46l.cs(50,31): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid input\");\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp24yc1yt6.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmp24yc1yt6.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_distance_temp = 0;\n        long right_distance_temp = 0;\n        long left_temp = 0;\n        long right_temp = 0;\n        long left_temp_temp = 0;\n        long right_temp_temp = 0;\n        long left_temp_temp_temp = 0;\n        long right_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptas_2fyv.cs(53,13): error CS1001: Identifier expected\n/tmp/tmptas_2fyv.cs(53,13): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long number = 0;\n        try {\n            number = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid number\");\n        }\n        if (number < 0) {\n            throw new Exception(\"Negative numbers are not supported\");\n        }\n        if (number == 0) {\n            return 0;\n        }\n        if (number == Long.MaxValue) {\n            return Long.MaxValue;\n        }\n        if (number == Long.MinValue) {\n            return Long.MinValue;\n        }\n        if (number < 0) {\n            throw new Exception(\"Negative numbers are not supported\");\n        }\n        if (number > Long.MaxValue) {\n            throw new Exception(\"Number is too large\");\n        }\n        if (number < Long.MinValue) {\n            throw new Exception(\"Number is too small\");\n        }\n        if (number == Long.MaxValue) {\n            return Long.MaxValue;\n        }\n        if (number == Long.MinValue) {\n            return Long.MinValue;\n        }\n        if (number < 0) {\n            throw new Exception(\"Negative numbers are not supported\");\n        }\n        if (number > Long.MaxValue) {\n            throw new Exception(\"Number is too large\");\n        }\n        if (number < Long.MinValue) {\n            throw new Exception(\"Number is too small\");\n        }\n        if (number == Long.MaxValue) {\n            return Long.MaxValue;\n        }\n        if (number == Long.MinValue) {\n            return Long.MinValue;\n        }\n        if (number < 0) {\n            throw new Exception(\"Negative numbers are not supported\");\n        }\n        if (number > Long.MaxValue) {\n            throw new Exception(\"Number is too large\");\n        }\n        if (number < Long.MinValue) {\n            throw new Exception(\"Number is too small\");\n        }\n        if (number == Long.MaxValue) {\n            return Long.MaxValue;\n        }\n        if (number == Long.MinValue) {\n            return Long.MinValue;\n        }\n        if (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgrnkx_aj.cs(88,13): error CS1525: Invalid expression term '}'\n/tmp/tmpgrnkx_aj.cs(88,13): error CS1026: ) expected\n/tmp/tmpgrnkx_aj.cs(88,13): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        } catch (Exception ex) {\n            throw new Exception(\"Invalid input\");\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6ypcbv48.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmp6ypcbv48.cs(26,28): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long diff = 0;\n        long diffLeft = 0;\n        long diffRight = 0;\n        long diffLeft2 = 0;\n        long diffRight2 = 0;\n        long diffLeft3 = 0;\n        long diffRight3 = 0;\n        long diffLeft4 = 0;\n        long diffRight4 = 0;\n        long diffLeft5 = 0;\n        long diffRight5 = 0;\n        long diffLeft6 = 0;\n        long diffRight6 = 0;\n        long diffLeft7 = 0;\n        long diffRight7 = 0;\n        long diffLeft8 = 0;\n        long diffRight8 = 0;\n        long diffLeft9 = 0;\n        long diffRight9 = 0;\n        long diffLeft10 = 0;\n        long diffRight10 = 0;\n        long diffLeft11 = 0;\n        long diffRight11 = 0;\n        long diffLeft12 = 0;\n        long diffRight12 = 0;\n        long diffLeft13 = 0;\n        long diffRight13 = 0;\n        long diffLeft14 = 0;\n        long diffRight14 = 0;\n        long diffLeft15 = 0;\n        long diffRight15 = 0;\n        long diffLeft16 = 0;\n        long diffRight16 = 0;\n        long diffLeft17 = 0;\n        long diffRight17 = 0;\n        long diffLeft18 = 0;\n        long diffRight18 = 0;\n        long diffLeft19 = 0;\n        long diffRight19 = 0;\n        long diffLeft20 = 0;\n        long diffRight20 = 0;\n        long diffLeft21 = 0;\n        long diffRight21 = 0;\n        long diffLeft22 = 0;\n        long diffRight22 = 0;\n        long diffLeft23 = 0;\n        long diffRight23 = 0;\n        long diffLeft24 = 0;\n        long diffRight24 = 0;\n        long diffLeft25 = 0;\n        long diffRight25 = 0;\n        long diffLeft26 = 0;\n        long diffRight26 = 0;\n        long diffLeft27 = 0;\n        long diffRight27 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9wqcirue.cs(23,14): warning CS0219: The variable 'result' is assigned but its value is never used\n/tmp/tmp9wqcirue.cs(24,14): warning CS0219: The variable 'left' is assigned but its value is never used\n/tmp/tmp9wqcirue.cs(25,14): warning CS0219: The variable 'right' is assigned but its value is never used\n/tmp/tmp9wqcirue.cs(26,14): warning CS0219: The variable 'diff' is assigned but its value is never used\n/tmp/tmp9wqcirue.cs(27,14): warning CS0219: The variable 'diffLeft' is assigned but its value is never used\n/tmp/tmp9wqcirue.cs(28,14): warning CS0219: The variable 'diffRight' is assigned but its value is never used\n/tmp/tmp9wqcirue.cs(29,14): warning CS0219: The variable 'diffLeft2' is assigned but its value is never used\n/tmp/tmp9wqcirue.cs(30,14): warning CS0219: The variable 'diffRight2' is assigned but its value is never used\n/tmp/tmp9wqcirue.cs(31,14): warning CS0219: The variable 'diffLeft3' is assigned but its value is never used\n/tmp/tmp9wqcirue.cs(32,14): warning CS0219: The variable 'diffRight3' is assigned but its value is never used\n/tmp/tmp9wqcirue.cs(33,14): warning CS0219: The variable 'diffLeft4' is assigned but its value is never used\n/tmp/tmp9wqcirue.cs(34,14): warning CS0219: The variable 'diffRight4' is assigned but its value is never used\n/tmp/tmp9wqcirue.cs(35,14): warning CS0219: The variable 'diffLeft5' is assigned but its value is never used\n/tmp/tmp9wqcirue.cs(36,14): warning CS0219: The variable 'diffRight5' is assigned but its value is never used\n/tmp/tmp9wqcirue.cs(37,14): warning CS0219: The variable 'diffLeft6' is assigned but its value is never used\n/tmp/tmp9wqcirue.cs(38,14): warning CS0219: The variable 'diffRight6' is assigned but its value is never used\n/tmp/tmp9wqcirue.cs(39,14): warning CS0219: The variable 'diffLeft7' is assigned but its value is never used\n/tmp/tmp9wqcirue.cs(40,14): warning CS0219: The variable 'diffRight7' is assigned",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid number: \" + value);\n        }\n        if (Math.Abs(result) > Long.MaxValue) {\n            throw new Exception(\"Number too large: \" + value);\n        }\n        if (Math.Abs(result) < Long.MinValue) {\n            throw new Exception(\"Number too small: \" + value);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnr5r08uz.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmpnr5r08uz.cs(30,32): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmpnr5r08uz.cs(33,32): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmpnr5r08uz.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_diff = 0;\n        long right_diff = 0;\n        long diff = 0;\n        long diff_left = 0;\n        long diff_right = 0;\n        long diff_left_diff = 0;\n        long diff_right_diff = 0;\n        long diff_left_diff_right_diff = 0;\n        long diff_left_diff_right_diff_left_diff_right_diff = 0;\n        long diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff = 0;\n        long diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff = 0;\n        long diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff = 0;\n        long diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff = 0;\n        long diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff = 0;\n        long diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff = 0;\n        long diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff_left_diff_right_diff = 0;\n        long diff\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2i8xpoww.cs(42,18): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_value = 0;\n        long right_value = 0;\n        long left_difference = 0;\n        long right_difference = 0;\n        long difference = 0;\n        long left_difference_value = 0;\n        long right_difference_value = 0;\n        long difference_value = 0;\n        long left_difference_value_value = 0;\n        long right_difference_value_value = 0;\n        long difference_value_value = 0;\n        long left_difference_value_value_value = 0;\n        long right_difference_value_value_value = 0;\n        long difference_value_value_value = 0;\n        long left_difference_value_value_value_value = 0;\n        long right_difference_value_value_value_value = 0;\n        long difference_value_value_value_value = 0;\n        long left_difference_value_value_value_value_value = 0;\n        long right_difference_value_value_value_value_value = 0;\n        long difference_value_value_value_value_value = 0;\n        long left_difference_value_value_value_value_value_value = 0;\n        long right_difference_value_value_value_value_value_value = 0;\n        long difference_value_value_value_value_value_value = 0;\n        long left_difference_value_value_value_value_value_value_value = 0;\n        long right_difference_value_value_value_value_value_value_value = 0;\n        long difference_value_value_value_value_value_value_value = 0;\n        long left_difference_value_value_value_value_value_value_value_value = 0;\n        long right_difference_value_value_value_value_value_value_value_value = 0;\n        long difference_value_value_value_value_value_value_value_value\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpb1gjic4o.cs(56,72): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_delta = 0;\n        long right_delta = 0;\n        long delta = 0;\n        int sign = 1;\n        if (value.Length == 0) {\n            return 0;\n        }\n        if (value.Length == 1) {\n            return (long) (value[0] - '0');\n        }\n        if (value[0] == '-') {\n            sign = -1;\n            value = value.Substring(1);\n        }\n        if (value[0] == '0') {\n            return 0;\n        }\n        if (value[0] == '.') {\n            return 0;\n        }\n        if (value[0] == '-') {\n            return 0;\n        }\n        if (value[0] == '+') {\n            return 0;\n        }\n        for (int i = 0; i < value.Length; i++) {\n            char c = value[i];\n            if (c >= '0' && c <= '9') {\n                left = left * 10 + (long) (c - '0');\n                left_delta = left_delta * 10 + (long) (c - '0');\n            }\n            else {\n                right = right * 10 + (long) (c - '0');\n                right_delta = right_delta * 10 + (long) (c - '0');\n            }\n        }\n        if (left_delta == right_delta) {\n            delta = left_delta;\n        }\n        else {\n            delta = Math.Abs(left_delta - right_delta);\n        }\n        if (delta == 0) {\n            return 0;\n        }\n        if (delta > Math.Abs(left_delta) && delta > Math.Abs(right_delta)) {\n            result = left;\n        }\n        else if (delta > Math.Abs(left_delta)) {\n            result = left;\n        }\n        else if (delta > Math.Abs(right_delta)) {\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp99fatwv4.cs(81,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp99fatwv4.cs(89,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_value = 0;\n        long right_value = 0;\n        long left_diff = 0;\n        long right_diff = 0;\n        long left_diff_abs = 0;\n        long right_diff_abs = 0;\n        long left_diff_abs_value = 0;\n        long right_diff_abs_value = 0;\n        long left_diff_abs_value_abs = 0;\n        long right_diff_abs_value_abs = 0;\n        long left_diff_abs_value_abs_abs = 0;\n        long right_diff_abs_value_abs_abs = 0;\n        long left_diff_abs_value_abs_abs_abs = 0;\n        long right_diff_abs_value_abs_abs_abs = 0;\n        long left_diff_abs_value_abs_abs_abs_abs = 0;\n        long right_diff_abs_value_abs_abs_abs_abs = 0;\n        long left_diff_abs_value_abs_abs_abs_abs_abs = 0;\n        long right_diff_abs_value_abs_abs_abs_abs_abs = 0;\n        long left_diff_abs_value_abs_abs_abs_abs_abs_abs = 0;\n        long right_diff_abs_value_abs_abs_abs_abs_abs_abs = 0;\n        long left_diff_abs_value_abs_abs_abs_abs_abs_abs_abs = 0;\n        long right_diff_abs_value_abs_abs_abs_abs_abs_abs_abs = 0;\n        long left_diff_abs_value_abs_abs_abs_abs_abs_abs_abs_abs = 0;\n        long right_diff_abs_value_abs_abs_abs_abs_abs_abs_abs_abs = 0;\n        long left_diff_abs_value_abs_abs_abs_abs_abs_abs_abs_abs_abs = 0;\n        long right_diff_\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplik82667.cs(53,25): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_distance_temp = 0;\n        long right_distance_temp = 0;\n        long temp = 0;\n        long temp_left = 0;\n        long temp_right = 0;\n        long temp_left_distance = 0;\n        long temp_right_distance = 0;\n        long temp_left_distance_temp = 0;\n        long temp_right_distance_temp = 0;\n        long temp_left_distance_temp_left = 0;\n        long temp_left_distance_temp_right = 0;\n        long temp_right_distance_temp_left = 0;\n        long temp_right_distance_temp_right = 0;\n        long temp_left_distance_temp_left_distance = 0;\n        long temp_left_distance_temp_right_distance = 0;\n        long temp_right_distance_temp_left_distance = 0;\n        long temp_right_distance_temp_right_distance = 0;\n        long temp_left_distance_temp_left_distance_temp = 0;\n        long temp_left_distance_temp_right_distance_temp = 0;\n        long temp_right_distance_temp_left_distance_temp = 0;\n        long temp_right_distance_temp_right_distance_temp = 0;\n        long temp_left_distance_temp_left_distance_temp_left = 0;\n        long temp_left_distance_temp_left_distance_temp_right = 0;\n        long temp_right_distance_temp_left_distance_temp_left = 0;\n        long temp_right_distance_temp_left_distance_temp_right = 0;\n        long temp_left_distance_temp_left_distance_temp_left_distance = 0;\n        long temp_left_distance_temp_left_distance_temp_right_distance = 0;\n        long temp_right_distance_temp_left_distance_temp_left_distance = 0;\n        long temp_right_distance_temp_left_distance_temp_right_distance = 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk8bqfo79.cs(56,76): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprgu4mf1d.cs(87,23): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpip3jfl94.cs(87,22): error CS1525: Invalid expression term '}'\n/tmp/tmpip3jfl94.cs(87,22): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpip3jfl94.cs(87,22): error CS1525: Invalid expression term '}'\n/tmp/tmpip3jfl94.cs(87,22): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid input\");\n        }\n        if (Math.Abs(result) > Math.Abs(Math.MaxInt64) || Math.Abs(result) < Math.Abs(Math.MinInt64)) {\n            throw new Exception(\"Invalid input\");\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpomslpa14.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmpomslpa14.cs(30,46): error CS0117: 'Math' does not contain a definition for 'MaxInt64'\n/tmp/tmpomslpa14.cs(30,92): error CS0117: 'Math' does not contain a definition for 'MinInt64'\n/tmp/tmpomslpa14.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpip3jfl94.cs(87,22): error CS1525: Invalid expression term '}'\n/tmp/tmpip3jfl94.cs(87,22): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long distance = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxpfowm6x.cs(87,18): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long distance = 0;\n        long left_value = 0;\n        long right_value = 0;\n        long left_int = 0;\n        long right_int = 0;\n        long left_int_distance = 0;\n        long right_int_distance = 0;\n        long left_int_value = 0;\n        long right_int_value = 0;\n        long left_int_int = 0;\n        long right_int_int = 0;\n        long left_int_int_distance = 0;\n        long right_int_int_distance = 0;\n        long left_int_int_value = 0;\n        long right_int_int_value = 0;\n        long left_int_int_int = 0;\n        long right_int_int_int = 0;\n        long left_int_int_int_distance = 0;\n        long right_int_int_int_distance = 0;\n        long left_int_int_int_value = 0;\n        long right_int_int_int_value = 0;\n        long left_int_int_int_int = 0;\n        long right_int_int_int_int = 0;\n        long left_int_int_int_int_distance = 0;\n        long right_int_int_int_int_distance = 0;\n        long left_int_int_int_int_value = 0;\n        long right_int_int_int_int_value = 0;\n        long left_int_int_int_int_int = 0;\n        long right_int_int_int_int_int = 0;\n        long left_int_int_int_int_int_distance = 0;\n        long right_int_int_int_int_int_distance = 0;\n        long left_int_int_int_int_int_value = 0;\n        long right_int_int_int_int_int_value = 0;\n        long left_int_int_int_int_int_int = 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc1z2p56_.cs(23,14): warning CS0219: The variable 'result' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(24,14): warning CS0219: The variable 'left' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(25,14): warning CS0219: The variable 'right' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(26,14): warning CS0219: The variable 'left_distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(27,14): warning CS0219: The variable 'right_distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(28,14): warning CS0219: The variable 'distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(29,14): warning CS0219: The variable 'left_value' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(30,14): warning CS0219: The variable 'right_value' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(31,14): warning CS0219: The variable 'left_int' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(32,14): warning CS0219: The variable 'right_int' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(33,14): warning CS0219: The variable 'left_int_distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(34,14): warning CS0219: The variable 'right_int_distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(35,14): warning CS0219: The variable 'left_int_value' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(36,14): warning CS0219: The variable 'right_int_value' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(37,14): warning CS0219: The variable 'left_int_int' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(38,14): warning CS0219: The variable 'right_int_int' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(39,14): warning CS0219: The variable 'left_int_int_distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(40,",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_delta = 0;\n        long right_delta = 0;\n        long delta = 0;\n        long delta_left = 0;\n        long delta_right = 0;\n        long delta_left_delta = 0;\n        long delta_right_delta = 0;\n        long delta_delta = 0;\n        long delta_delta_left = 0;\n        long delta_delta_right = 0;\n        long delta_delta_left_delta = 0;\n        long delta_delta_right_delta = 0;\n        long delta_delta_delta = 0;\n        long delta_delta_delta_left = 0;\n        long delta_delta_delta_right = 0;\n        long delta_delta_delta_left_delta = 0;\n        long delta_delta_delta_right_delta = 0;\n        long delta_delta_delta_delta = 0;\n        long delta_delta_delta_delta_left = 0;\n        long delta_delta_delta_delta_right = 0;\n        long delta_delta_delta_delta_left_delta = 0;\n        long delta_delta_delta_delta_right_delta = 0;\n        long delta_delta_delta_delta_delta = 0;\n        long delta_delta_delta_delta_delta_left = 0;\n        long delta_delta_delta_delta_delta_right = 0;\n        long delta_delta_delta_delta_delta_left_delta = 0;\n        long delta_delta_delta_delta_delta_right_delta = 0;\n        long delta_delta_delta_delta_delta_delta = 0;\n        long delta_delta_delta_delta_delta_delta_left = 0;\n        long delta_delta_delta_delta_delta_delta_right = 0;\n        long delta_delta\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxegtzpuk.cs(56,25): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_value = 0;\n        long right_value = 0;\n        long left_diff = 0;\n        long right_diff = 0;\n        long left_diff_abs = 0;\n        long right_diff_abs = 0;\n        long left_diff_sign = 0;\n        long right_diff_sign = 0;\n        long left_diff_sign_abs = 0;\n        long right_diff_sign_abs = 0;\n        long left_diff_sign_sign = 0;\n        long right_diff_sign_sign = 0;\n        long left_diff_sign_sign_abs = 0;\n        long right_diff_sign_sign_abs = 0;\n        long left_diff_sign_sign_sign = 0;\n        long right_diff_sign_sign_sign = 0;\n        long left_diff_sign_sign_sign_abs = 0;\n        long right_diff_sign_sign_sign_abs = 0;\n        long left_diff_sign_sign_sign_sign = 0;\n        long right_diff_sign_sign_sign_sign = 0;\n        long left_diff_sign_sign_sign_sign_abs = 0;\n        long right_diff_sign_sign_sign_sign_abs = 0;\n        long left_diff_sign_sign_sign_sign_sign = 0;\n        long right_diff_sign_sign_sign_sign_sign = 0;\n        long left_diff_sign_sign_sign_sign_sign_abs = 0;\n        long right_diff_sign_sign_sign_sign_sign_abs = 0;\n        long left_diff_sign_sign_sign_sign_sign_sign = 0;\n        long right_diff_sign_sign_sign_sign_sign_sign = 0;\n        long left_diff_sign_sign_sign_sign_sign_sign_abs = 0;\n        long right_diff_sign_sign_sign_sign_sign_sign_abs = 0;\n        long left_diff_sign\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ff2jzns.cs(58,28): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_difference = 0;\n        long right_difference = 0;\n        long difference = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvjf5sr16.cs(23,14): warning CS0219: The variable 'result' is assigned but its value is never used\n/tmp/tmpvjf5sr16.cs(24,14): warning CS0219: The variable 'left' is assigned but its value is never used\n/tmp/tmpvjf5sr16.cs(25,14): warning CS0219: The variable 'right' is assigned but its value is never used\n/tmp/tmpvjf5sr16.cs(26,14): warning CS0219: The variable 'left_distance' is assigned but its value is never used\n/tmp/tmpvjf5sr16.cs(27,14): warning CS0219: The variable 'right_distance' is assigned but its value is never used\n/tmp/tmpvjf5sr16.cs(28,14): warning CS0219: The variable 'left_difference' is assigned but its value is never used\n/tmp/tmpvjf5sr16.cs(29,14): warning CS0219: The variable 'right_difference' is assigned but its value is never used\n/tmp/tmpvjf5sr16.cs(30,14): warning CS0219: The variable 'difference' is assigned but its value is never used\n/tmp/tmpvjf5sr16.cs(31,14): warning CS0219: The variable 'temp' is assigned but its value is never used\n/tmp/tmpvjf5sr16.cs(32,14): warning CS0219: The variable 'temp2' is assigned but its value is never used\n/tmp/tmpvjf5sr16.cs(33,14): warning CS0219: The variable 'temp3' is assigned but its value is never used\n/tmp/tmpvjf5sr16.cs(34,14): warning CS0219: The variable 'temp4' is assigned but its value is never used\n/tmp/tmpvjf5sr16.cs(35,14): warning CS0219: The variable 'temp5' is assigned but its value is never used\n/tmp/tmpvjf5sr16.cs(36,14): warning CS0219: The variable 'temp6' is assigned but its value is never used\n/tmp/tmpvjf5sr16.cs(37,14): warning CS0219: The variable 'temp7' is assigned but its value is never used\n/tmp/tmpvjf5sr16.cs(38,14): warning CS0219: The variable 'temp8' is assigned but its value is never used\n/tmp/tmpvjf5sr16.cs(39,14): warning CS0219: The variable 'temp9' is assigned but its value is never used\n/tmp/tmpvjf5sr16.cs(40,14): warning CS0219: The variable 'temp10' is assigned but its value is",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long number = 0;\n        long number_diff = 0;\n        long number_diff_abs = 0;\n        long number_diff_abs_max = 0;\n        long number_diff_abs_min = 0;\n        long number_diff_abs_max_abs = 0;\n        long number_diff_abs_min_abs = 0;\n        long number_diff_abs_max_abs_abs = 0;\n        long number_diff_abs_min_abs_abs = 0;\n        long number_diff_abs_max_abs_abs_abs = 0;\n        long number_diff_abs_min_abs_abs_abs = 0;\n        long number_diff_abs_max_abs_abs_abs = 0;\n        long number_diff_abs_min_abs_abs_abs = 0;\n        long number_diff_abs_max_abs_abs_abs = 0;\n        long number_diff_abs_min_abs_abs_abs = 0;\n        long number_diff_abs_max_abs_abs_abs = 0;\n        long number_diff_abs_min_abs_abs_abs = 0;\n        long number_diff_abs_max_abs_abs_abs = 0;\n        long number_diff_abs_min_abs_abs_abs = 0;\n        long number_diff_abs_max_abs_abs_abs = 0;\n        long number_diff_abs_min_abs_abs_abs = 0;\n        long number_diff_abs_max_abs_abs_abs = 0;\n        long number_diff_abs_min_abs_abs_abs = 0;\n        long number_diff_abs_max_abs_abs_abs = 0;\n        long number_diff_abs_min_abs_abs_abs = 0;\n        long number_diff_abs_max_abs_abs_abs = 0;\n        long number_diff_abs_min_abs_abs_abs = 0;\n        long number_diff_abs_max_abs_abs_abs = 0;\n        long number_diff_abs_min_abs_abs_abs = 0;\n        long number_diff_abs_\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3cl8kyby.cs(53,30): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long diff = 0;\n        long min = 0;\n        long max = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp006srhcf.cs(87,22): error CS1525: Invalid expression term '}'\n/tmp/tmp006srhcf.cs(87,22): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        } catch (Exception ex) {\n            result = Convert.ToLong(value.Trim());\n        }\n        if (result < 0) {\n            result = Math.Abs(result);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9rr8a8yn.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmp9rr8a8yn.cs(27,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmp9rr8a8yn.cs(26,28): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long number = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppxo7h7yz.cs(87,23): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception e) {\n            // Do nothing\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2k_k9m23.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmp2k_k9m23.cs(27,26): warning CS0168: The variable 'e' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long diff = 0;\n        long diff_left = 0;\n        long diff_right = 0;\n        long diff_left_abs = 0;\n        long diff_right_abs = 0;\n        long diff_left_abs_abs = 0;\n        long diff_right_abs_abs = 0;\n        long diff_left_abs_abs_abs = 0;\n        long diff_right_abs_abs_abs = 0;\n        long diff_left_abs_abs_abs_abs = 0;\n        long diff_right_abs_abs_abs_abs = 0;\n        long diff_left_abs_abs_abs_abs_abs = 0;\n        long diff_right_abs_abs_abs_abs_abs = 0;\n        long diff_left_abs_abs_abs_abs_abs_abs = 0;\n        long diff_right_abs_abs_abs_abs_abs_abs = 0;\n        long diff_left_abs_abs_abs_abs_abs_abs_abs = 0;\n        long diff_right_abs_abs_abs_abs_abs_abs_abs = 0;\n        long diff_left_abs_abs_abs_abs_abs_abs_abs_abs = 0;\n        long diff_right_abs_abs_abs_abs_abs_abs_abs_abs = 0;\n        long diff_left_abs_abs_abs_abs_abs_abs_abs_abs_abs = 0;\n        long diff_right_abs_abs_abs_abs_abs_abs_abs_abs_abs = 0;\n        long diff_left_abs_abs_abs_abs_abs_abs_abs_abs_abs_abs = 0;\n        long diff_right_abs_abs_abs_abs_abs_abs_abs_abs_abs_abs = 0;\n        long diff_left_abs_abs_abs_abs_abs_abs_abs_abs_abs_abs_abs = 0;\n        long diff_right_abs_abs_abs_abs_abs_abs_abs_abs_abs_abs_abs = 0;\n        long diff_\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvpqxyb2n.cs(51,19): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpip3jfl94.cs(87,22): error CS1525: Invalid expression term '}'\n/tmp/tmpip3jfl94.cs(87,22): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_delta = 0;\n        long right_delta = 0;\n        long delta = 0;\n        long left_delta_abs = 0;\n        long right_delta_abs = 0;\n        long delta_abs = 0;\n        long left_delta_abs_max = 0;\n        long right_delta_abs_max = 0;\n        long delta_abs_max = 0;\n        long left_delta_abs_min = 0;\n        long right_delta_abs_min = 0;\n        long delta_abs_min = 0;\n        long left_delta_abs_max_min = 0;\n        long right_delta_abs_max_min = 0;\n        long delta_abs_max_min = 0;\n        long left_delta_abs_min_max = 0;\n        long right_delta_abs_min_max = 0;\n        long delta_abs_min_max = 0;\n        long left_delta_abs_min_max_min = 0;\n        long right_delta_abs_min_max_min = 0;\n        long delta_abs_min_max_min = 0;\n        long left_delta_abs_min_max_min_max = 0;\n        long right_delta_abs_min_max_min_max = 0;\n        long delta_abs_min_max_min_max = 0;\n        long left_delta_abs_min_max_min_max_min = 0;\n        long right_delta_abs_min_max_min_max_min = 0;\n        long delta_abs_min_max_min_max_min = 0;\n        long left_delta_abs_min_max_min_max_min_max = 0;\n        long right_delta_abs_min_max_min_max_min_max = 0;\n        long delta_abs_min_max_min_max_min_max = 0;\n        long left_delta_abs_min_max_min_max_min_max_min =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmzqmvcdq.cs(56,58): error CS1525: Invalid expression term '}'\n/tmp/tmpmzqmvcdq.cs(56,58): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_distance_temp = 0;\n        long right_distance_temp = 0;\n        long left_temp = 0;\n        long right_temp = 0;\n        long left_temp_temp = 0;\n        long right_temp_temp = 0;\n        long left_temp_temp_temp = 0;\n        long right_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long right_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long left_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n        long\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptas_2fyv.cs(53,13): error CS1001: Identifier expected\n/tmp/tmptas_2fyv.cs(53,13): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        long diff1 = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpywf_7am1.cs(87,22): error CS1525: Invalid expression term '}'\n/tmp/tmpywf_7am1.cs(87,22): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0;\n        long num61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1525: Invalid expression term '}'\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprgu4mf1d.cs(87,23): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long diff = 0;\n        long min = 0;\n        long max = 0;\n        long number = 0;\n        long number_diff = 0;\n        long number_min = 0;\n        long number_max = 0;\n        long number_diff_min = 0;\n        long number_diff_max = 0;\n        long number_min_diff = 0;\n        long number_max_diff = 0;\n        long number_diff_min_diff = 0;\n        long number_diff_max_diff = 0;\n        long number_min_diff_min = 0;\n        long number_min_diff_max = 0;\n        long number_max_diff_min = 0;\n        long number_max_diff_max = 0;\n        long number_diff_min_diff_min = 0;\n        long number_diff_min_diff_max = 0;\n        long number_diff_max_diff_min = 0;\n        long number_diff_max_diff_max = 0;\n        long number_min_diff_min_diff = 0;\n        long number_min_diff_max_diff = 0;\n        long number_max_diff_min_diff = 0;\n        long number_max_diff_max_diff = 0;\n        long number_diff_min_diff_min_diff = 0;\n        long number_diff_min_diff_max_diff = 0;\n        long number_diff_max_diff_min_diff = 0;\n        long number_diff_max_diff_max_diff = 0;\n        long number_min_diff_min_diff_min_diff = 0;\n        long number_min_diff_min_diff_max_diff = 0;\n        long number_min_diff_max_diff_min_diff = 0;\n        long number_min_diff_max_diff_max_diff = 0;\n        long number_max_diff_min_diff_min_diff = 0;\n        long number_max_diff_min_diff_max_diff = 0;\n        long number_max_diff_max_diff_min_diff = 0;\n        long number_max_diff\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd0o03k2y.cs(60,29): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid input\");\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp24yc1yt6.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmp24yc1yt6.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        int i = 0;\n        int len = value.Length;\n        if (len == 0) return 0;\n        if (len == 1) return (long) (value[0] - 48);\n        if (len == 2) return (long) (value[0] - 48) * 10 + (long) (value[1] - 48);\n        if (len == 3) return (long) (value[0] - 48) * 100 + (long) (value[1] - 48) * 10 + (long) (value[2] - 48);\n        if (len == 4) return (long) (value[0] - 48) * 1000 + (long) (value[1] - 48) * 100 + (long) (value[2] - 48) * 10 + (long) (value[3] - 48);\n        if (len == 5) return (long) (value[0] - 48) * 10000 + (long) (value[1] - 48) * 1000 + (long) (value[2] - 48) * 100 + (long) (value[3] - 48) * 10 + (long) (value[4] - 48);\n        if (len == 6) return (long) (value[0] - 48) * 100000 + (long) (value[1] - 48) * 10000 + (long) (value[2] - 48) * 1000 + (long) (value[3] - 48) * 100 + (long) (value[4] - 48) * 10 + (long) (value[5] - 48);\n        if (len == 7) return (long) (value[0] - 48) * 1000000 + (long) (value[1] - 48) * 100000 + (long) (value[2] - 48) * 10000 + (long) (value[3] - 48) * 1000 + (long) (value[4] - 48) * 100 + (long) (value[5] - 48) * 10 + (long) (value[6] - 48);\n        if (len == 8) return (long) (value\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdzya83qz.cs(38,43): error CS1026: ) expected\n/tmp/tmpdzya83qz.cs(38,43): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_rounded = 0;\n        long right_rounded = 0;\n        long left_rounded_distance = 0;\n        long right_rounded_distance = 0;\n        long left_rounded_rounded = 0;\n        long right_rounded_rounded = 0;\n        long left_rounded_rounded_distance = 0;\n        long right_rounded_rounded_distance = 0;\n        long left_rounded_rounded_rounded = 0;\n        long right_rounded_rounded_rounded = 0;\n        long left_rounded_rounded_rounded_distance = 0;\n        long right_rounded_rounded_rounded_distance = 0;\n        long left_rounded_rounded_rounded_rounded = 0;\n        long right_rounded_rounded_rounded_rounded = 0;\n        long left_rounded_rounded_rounded_rounded_distance = 0;\n        long right_rounded_rounded_rounded_rounded_distance = 0;\n        long left_rounded_rounded_rounded_rounded_rounded = 0;\n        long right_rounded_rounded_rounded_rounded_rounded = 0;\n        long left_rounded_rounded_rounded_rounded_rounded_distance = 0;\n        long right_rounded_rounded_rounded_rounded_rounded_distance = 0;\n        long left_rounded_rounded_rounded_rounded_rounded_rounded = 0;\n        long right_rounded_rounded_rounded_rounded_rounded_rounded = 0;\n        long left_rounded_rounded_rounded_rounded_rounded_rounded_distance = 0;\n        long right_rounded_rounded_rounded_rounded_rounded_rounded_distance = 0;\n        long left_rounded_rounded_rounded_rounded_rounded_rounded_rounded = 0;\n        long right_rounded_rounded_rounded_rounded_rounded_rounded_rounded = 0;\n        long left_rounded_rounded_rounded_rounded_rounded_rounded_rounded_distance = 0;\n        long right_rounded_rounded_rounded_rounded_rounded_rounded_rounded_distance = 0;\n        long left_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded = 0;\n        long\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3wa2f03r.cs(57,13): error CS1001: Identifier expected\n/tmp/tmp3wa2f03r.cs(57,13): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long number = 0;\n        long sign = 1;\n        long exponent = 0;\n        long fraction = 0;\n        long fraction_multiplier = 1;\n        long fraction_divisor = 1;\n        long fraction_remainder = 0;\n        long fraction_quotient = 0;\n        long fraction_quotient_multiplier = 1;\n        long fraction_quotient_divisor = 1;\n        long fraction_quotient_remainder = 0;\n        long fraction_quotient_quotient = 0;\n        long fraction_quotient_quotient_multiplier = 1;\n        long fraction_quotient_quotient_divisor = 1;\n        long fraction_quotient_quotient_remainder = 0;\n        long fraction_quotient_quotient_quotient = 0;\n        long fraction_quotient_quotient_quotient_multiplier = 1;\n        long fraction_quotient_quotient_quotient_divisor = 1;\n        long fraction_quotient_quotient_quotient_remainder = 0;\n        long fraction_quotient_quotient_quotient_quotient = 0;\n        long fraction_quotient_quotient_quotient_quotient_multiplier = 1;\n        long fraction_quotient_quotient_quotient_quotient_divisor = 1;\n        long fraction_quotient_quotient_quotient_quotient_remainder = 0;\n        long fraction_quotient_quotient_quotient_quotient_quotient = 0;\n        long fraction_quotient_quotient_quotient_quotient_quotient_multiplier = 1;\n        long fraction_quotient_quotient_quotient_quotient_quotient_divisor = 1;\n        long fraction_quotient_quotient_quotient_quotient_quotient_remainder = 0;\n        long fraction_quotient_quot\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_ndfvxd_.cs(51,36): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0;\n        long num61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1525: Invalid expression term '}'\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid input\");\n        }\n        if (Math.Abs(result) > Long.MaxValue) {\n            throw new Exception(\"Invalid input\");\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293207,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp83ohbhec.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmp83ohbhec.cs(30,32): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmp83ohbhec.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long diff = 0;\n        long diff_left = 0;\n        long diff_right = 0;\n        long diff_diff = 0;\n        long diff_diff_left = 0;\n        long diff_diff_right = 0;\n        long diff_diff_diff = 0;\n        long diff_diff_diff_left = 0;\n        long diff_diff_diff_right = 0;\n        long diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_left = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_right = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_left = 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8kakugkk.cs(54,72): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long number = 0;\n        long diff = 0;\n        long min = 0;\n        long max = 0;\n        long temp = 0;\n        long sign = 1;\n        if (value.Length > 0) {\n            number = Long.Parse(value);\n        }\n        if (number < 0) {\n            sign = -1;\n            number = Math.Abs(number);\n        }\n        min = Math.Min(Math.Abs(number), Math.Abs(number + 1));\n        max = Math.Max(Math.Abs(number), Math.Abs(number - 1));\n        diff = Math.Abs(number - Math.Round(number));\n        if (diff < min) {\n            result = Math.Round(number);\n        }\n        else if (diff > max) {\n            result = Math.Round(number) + sign;\n        }\n        else {\n            result = Math.Round(number) + sign;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293207,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8l2yb59k.cs(31,22): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmp8l2yb59k.cs(39,39): error CS0121: The call is ambiguous between the following methods or properties: 'Math.Round(decimal)' and 'Math.Round(double)'\n/tmp/tmp8l2yb59k.cs(41,27): error CS0121: The call is ambiguous between the following methods or properties: 'Math.Round(decimal)' and 'Math.Round(double)'\n/tmp/tmp8l2yb59k.cs(44,27): error CS0121: The call is ambiguous between the following methods or properties: 'Math.Round(decimal)' and 'Math.Round(double)'\n/tmp/tmp8l2yb59k.cs(47,27): error CS0121: The call is ambiguous between the following methods or properties: 'Math.Round(decimal)' and 'Math.Round(double)'\n/tmp/tmp8l2yb59k.cs(28,14): warning CS0219: The variable 'temp' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long diff = 0;\n        long min = 0;\n        long max = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0;\n        long num61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp70fcq910.cs(87,21): error CS1525: Invalid expression term '}'\n/tmp/tmp70fcq910.cs(87,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_value = 0;\n        long right_value = 0;\n        long left_difference = 0;\n        long right_difference = 0;\n        long difference = 0;\n        int length = value.Length;\n        if (length == 0) {\n            return 0;\n        }\n        for (int i = 0; i < length; i++) {\n            char c = value[i];\n            if (c == '.') {\n                continue;\n            }\n            if (c == '-') {\n                left_value = 0;\n                right_value = 0;\n                left_distance = 0;\n                right_distance = 0;\n                left_difference = 0;\n                right_difference = 0;\n                left = 0;\n                right = 0;\n                left_value = 0;\n                right_value = 0;\n                left_distance = 0;\n                right_distance = 0;\n                left_difference = 0;\n                right_difference = 0;\n                difference = 0;\n                continue;\n            }\n            if (c == '0') {\n                left_value = 0;\n                right_value = 0;\n                left_distance = 0;\n                right_distance = 0;\n                left_difference = 0;\n                right_difference = 0;\n                left = 0;\n                right = 0;\n                left_value = 0;\n                right_value = 0;\n                left_distance = 0;\n                right_distance = 0;\n                left_difference = 0;\n                right_difference = 0;\n                difference = 0;\n                continue;\n            }\n            if (c == '1') {\n                left_value = 1;\n                right_value = 1;\n                left_distance = 0;\n                right_distance = 0;\n                left_difference = 0;\n                right_difference = 0;\n                left = 1;\n                right = 1;\n                left_value = 1;\n                right_value = 1;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1lfcw1li.cs(91,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp1lfcw1li.cs(99,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long distance = 0;\n        long left_value = 0;\n        long right_value = 0;\n        long left_int = 0;\n        long right_int = 0;\n        long left_int_distance = 0;\n        long right_int_distance = 0;\n        long left_int_value = 0;\n        long right_int_value = 0;\n        long left_int_int = 0;\n        long right_int_int = 0;\n        long left_int_int_distance = 0;\n        long right_int_int_distance = 0;\n        long left_int_int_value = 0;\n        long right_int_int_value = 0;\n        long left_int_int_int = 0;\n        long right_int_int_int = 0;\n        long left_int_int_int_distance = 0;\n        long right_int_int_int_distance = 0;\n        long left_int_int_int_value = 0;\n        long right_int_int_int_value = 0;\n        long left_int_int_int_int = 0;\n        long right_int_int_int_int = 0;\n        long left_int_int_int_int_distance = 0;\n        long right_int_int_int_int_distance = 0;\n        long left_int_int_int_int_value = 0;\n        long right_int_int_int_int_value = 0;\n        long left_int_int_int_int_int = 0;\n        long right_int_int_int_int_int = 0;\n        long left_int_int_int_int_int_distance = 0;\n        long right_int_int_int_int_int_distance = 0;\n        long left_int_int_int_int_int_value = 0;\n        long right_int_int_int_int_int_value = 0;\n        long left_int_int_int_int_int_int = 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc1z2p56_.cs(23,14): warning CS0219: The variable 'result' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(24,14): warning CS0219: The variable 'left' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(25,14): warning CS0219: The variable 'right' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(26,14): warning CS0219: The variable 'left_distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(27,14): warning CS0219: The variable 'right_distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(28,14): warning CS0219: The variable 'distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(29,14): warning CS0219: The variable 'left_value' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(30,14): warning CS0219: The variable 'right_value' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(31,14): warning CS0219: The variable 'left_int' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(32,14): warning CS0219: The variable 'right_int' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(33,14): warning CS0219: The variable 'left_int_distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(34,14): warning CS0219: The variable 'right_int_distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(35,14): warning CS0219: The variable 'left_int_value' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(36,14): warning CS0219: The variable 'right_int_value' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(37,14): warning CS0219: The variable 'left_int_int' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(38,14): warning CS0219: The variable 'right_int_int' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(39,14): warning CS0219: The variable 'left_int_int_distance' is assigned but its value is never used\n/tmp/tmpc1z2p56_.cs(40,",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long number = 0;\n        long temp = 0;\n        int i = 0;\n        int len = value.Length;\n        for (i = 0; i < len; i++) {\n            if (value[i] == '.') {\n                break;\n            }\n            number = (long) (value[i] - '0');\n            if (i == 0) {\n                min = number;\n                max = number;\n            }\n            else {\n                if (number < min) {\n                    min = number;\n                }\n                if (number > max) {\n                    max = number;\n                }\n            }\n        }\n        if (i == len) {\n            result = max;\n        }\n        else {\n            if (max == min) {\n                result = max;\n            }\n            else {\n                diff = max - min;\n                if (diff == 0) {\n                    result = max;\n                }\n                else {\n                    if (diff > 0) {\n                        temp = max;\n                        max = min;\n                        min = temp;\n                    }\n                    result = max + (diff / 2);\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293207,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <008d66a9e105430a9678537199bf905e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <008d66a9e105430a9678537199bf905e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long distance = 0;\n        long left_rounded = 0;\n        long right_rounded = 0;\n        long rounded = 0;\n        long left_rounded_distance = 0;\n        long right_rounded_distance = 0;\n        long rounded_distance = 0;\n        long left_rounded_rounded = 0;\n        long right_rounded_rounded = 0;\n        long rounded_rounded = 0;\n        long left_rounded_rounded_distance = 0;\n        long right_rounded_rounded_distance = 0;\n        long rounded_rounded_distance = 0;\n        long left_rounded_rounded_rounded = 0;\n        long right_rounded_rounded_rounded = 0;\n        long rounded_rounded_rounded = 0;\n        long left_rounded_rounded_rounded_distance = 0;\n        long right_rounded_rounded_rounded_distance = 0;\n        long rounded_rounded_rounded_distance = 0;\n        long left_rounded_rounded_rounded_rounded = 0;\n        long right_rounded_rounded_rounded_rounded = 0;\n        long rounded_rounded_rounded_rounded = 0;\n        long left_rounded_rounded_rounded_rounded_distance = 0;\n        long right_rounded_rounded_rounded_rounded_distance = 0;\n        long rounded_rounded_rounded_rounded_distance = 0;\n        long left_rounded_rounded_rounded_rounded_rounded = 0;\n        long right_rounded_rounded_rounded_rounded_rounded = 0;\n        long rounded_rounded_rounded_rounded_rounded = 0;\n        long left_rounded_rounded_rounded_rounded_rounded_distance = 0;\n        long right_rounded_rounded_rounded_rounded_rounded_distance = 0;\n        long rounded_rounded_rounded_rounded_rounded_distance = 0;\n        long left_rounded_rounded_rounded_rounded_rounded_rounded = 0;\n        long right_rounded_rounded_rounded_rounded_rounded_rounded = 0;\n        long rounded_rounded_rounded_rounded_rounded_rounded = 0;\n        long left_rounded_rounded_rounded_rounded\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsbmxnf1z.cs(62,50): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff_min = 0;\n        long diff_max = 0;\n        long diff_diff = 0;\n        long diff_diff_min = 0;\n        long diff_diff_max = 0;\n        long diff_diff_diff = 0;\n        long diff_diff_diff_min = 0;\n        long diff_diff_diff_max = 0;\n        long diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_min = 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptpqwid1h.cs(54,71): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid input\");\n        }\n        if (Math.Abs(result) > Math.MaxInt64) {\n            throw new Exception(\"Number too large\");\n        }\n        if (Math.Abs(result) < Math.MinInt64) {\n            throw new Exception(\"Number too small\");\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293207,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1kn9r14w.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmp1kn9r14w.cs(30,37): error CS0117: 'Math' does not contain a definition for 'MaxInt64'\n/tmp/tmp1kn9r14w.cs(33,37): error CS0117: 'Math' does not contain a definition for 'MinInt64'\n/tmp/tmp1kn9r14w.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_value = 0;\n        long right_value = 0;\n        int left_index = 0;\n        int right_index = 0;\n        int left_length = 0;\n        int right_length = 0;\n        int left_sign = 0;\n        int right_sign = 0;\n        int left_digit = 0;\n        int right_digit = 0;\n        int left_digit_count = 0;\n        int right_digit_count = 0;\n        int left_decimal_count = 0;\n        int right_decimal_count = 0;\n        int left_decimal_index = 0;\n        int right_decimal_index = 0;\n        int left_decimal_length = 0;\n        int right_decimal_length = 0;\n        int left_decimal_sign = 0;\n        int right_decimal_sign = 0;\n        int left_decimal_digit = 0;\n        int right_decimal_digit = 0;\n        int left_decimal_digit_count = 0;\n        int right_decimal_digit_count = 0;\n        int left_decimal_digit_index = 0;\n        int right_decimal_digit_index = 0;\n        int left_decimal_digit_length = 0;\n        int right_decimal_digit_length = 0;\n        int left_decimal_digit_sign = 0;\n        int right_decimal_digit_sign = 0;\n        int left_decimal_digit_value = 0;\n        int right_decimal_digit_value = 0;\n        int left_decimal_digit_value_count = 0;\n        int right_decimal_digit_value_count = 0;\n        int left_decimal_digit_value_index = 0;\n        int right_decimal_digit_value_index = 0;\n        int left_decimal_digit_value_length = 0;\n        int right_decimal_digit_value_length = 0;\n        int left_dec\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdvhopmgn.cs(66,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0;\n        long num61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1525: Invalid expression term '}'\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        int i = 0;\n        int len = value.Length;\n        for (i = 0; i < len; i++) {\n            if (value[i] == '.') {\n                break;\n            }\n        }\n        if (i == len) {\n            return Long.Parse(value);\n        }\n        max = Long.Parse(value.Substring(0, i));\n        min = Long.Parse(value.Substring(i + 1, len - i - 1));\n        diff = max - min;\n        if (diff == 0) {\n            return max;\n        }\n        if (diff > 0) {\n            result = max;\n        }\n        else {\n            result = min;\n        }\n        for (i = 0; i < len; i++) {\n            if (value[i] == '.') {\n                break;\n            }\n        }\n        if (i == len) {\n            return result;\n        }\n        temp = Long.Parse(value.Substring(i + 1, len - i - 1));\n        if (Math.Abs(temp - result) < Math.Abs(diff)) {\n            result = temp;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293207,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnbrhe4i0.cs(36,20): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmpnbrhe4i0.cs(38,15): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmpnbrhe4i0.cs(39,15): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmpnbrhe4i0.cs(58,16): error CS0103: The name 'Long' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprgu4mf1d.cs(87,23): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_value = 0;\n        long right_value = 0;\n        long left_difference = 0;\n        long right_difference = 0;\n        long difference = 0;\n        long left_difference_value = 0;\n        long right_difference_value = 0;\n        long left_difference_value_temp = 0;\n        long right_difference_value_temp = 0;\n        long left_difference_value_temp2 = 0;\n        long right_difference_value_temp2 = 0;\n        long left_difference_value_temp3 = 0;\n        long right_difference_value_temp3 = 0;\n        long left_difference_value_temp4 = 0;\n        long right_difference_value_temp4 = 0;\n        long left_difference_value_temp5 = 0;\n        long right_difference_value_temp5 = 0;\n        long left_difference_value_temp6 = 0;\n        long right_difference_value_temp6 = 0;\n        long left_difference_value_temp7 = 0;\n        long right_difference_value_temp7 = 0;\n        long left_difference_value_temp8 = 0;\n        long right_difference_value_temp8 = 0;\n        long left_difference_value_temp9 = 0;\n        long right_difference_value_temp9 = 0;\n        long left_difference_value_temp10 = 0;\n        long right_difference_value_temp10 = 0;\n        long left_difference_value_temp11 = 0;\n        long right_difference_value_temp11 = 0;\n        long left_difference_value_temp12 = 0;\n        long right_difference_value_temp12 = 0;\n        long left_difference_value_temp13 = 0;\n        long right_difference_value_temp13 = 0;\n        long left_difference_value_temp14 = 0;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293207,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuha4rdvl.cs(23,14): warning CS0219: The variable 'result' is assigned but its value is never used\n/tmp/tmpuha4rdvl.cs(24,14): warning CS0219: The variable 'left' is assigned but its value is never used\n/tmp/tmpuha4rdvl.cs(25,14): warning CS0219: The variable 'right' is assigned but its value is never used\n/tmp/tmpuha4rdvl.cs(26,14): warning CS0219: The variable 'left_distance' is assigned but its value is never used\n/tmp/tmpuha4rdvl.cs(27,14): warning CS0219: The variable 'right_distance' is assigned but its value is never used\n/tmp/tmpuha4rdvl.cs(28,14): warning CS0219: The variable 'left_value' is assigned but its value is never used\n/tmp/tmpuha4rdvl.cs(29,14): warning CS0219: The variable 'right_value' is assigned but its value is never used\n/tmp/tmpuha4rdvl.cs(30,14): warning CS0219: The variable 'left_difference' is assigned but its value is never used\n/tmp/tmpuha4rdvl.cs(31,14): warning CS0219: The variable 'right_difference' is assigned but its value is never used\n/tmp/tmpuha4rdvl.cs(32,14): warning CS0219: The variable 'difference' is assigned but its value is never used\n/tmp/tmpuha4rdvl.cs(33,14): warning CS0219: The variable 'left_difference_value' is assigned but its value is never used\n/tmp/tmpuha4rdvl.cs(34,14): warning CS0219: The variable 'right_difference_value' is assigned but its value is never used\n/tmp/tmpuha4rdvl.cs(35,14): warning CS0219: The variable 'left_difference_value_temp' is assigned but its value is never used\n/tmp/tmpuha4rdvl.cs(36,14): warning CS0219: The variable 'right_difference_value_temp' is assigned but its value is never used\n/tmp/tmpuha4rdvl.cs(37,14): warning CS0219: The variable 'left_difference_value_temp2' is assigned but its value is never used\n/tmp/tmpuha4rdvl.cs(38,14): warning CS0219: The variable 'right_difference_value_temp2' is assigned but its value is never used\n/tmp/tmpuha4rdvl.cs(39,14): warning CS0219: The variable 'left_dif",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprgu4mf1d.cs(87,23): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long number = 0;\n        long diff_min = 0;\n        long diff_max = 0;\n        long diff_diff = 0;\n        long diff_diff_min = 0;\n        long diff_diff_max = 0;\n        long diff_diff_diff = 0;\n        long diff_diff_diff_min = 0;\n        long diff_diff_diff_max = 0;\n        long diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_min = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_max = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = 0;\n        long diff_diff_diff_diff_diff_diff_diff_diff_\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1dlp2vu8.cs(55,54): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        int i = 0;\n        int j = 0;\n        int len = value.Length;\n        char[] chars = value.ToCharArray();\n        for (i = 0; i < len; i++) {\n            if (chars[i] == '.') {\n                break;\n            }\n        }\n        if (i == len) {\n            return 0;\n        }\n        for (j = i + 1; j < len; j++) {\n            if (chars[j] == '.') {\n                break;\n            }\n        }\n        if (j == len) {\n            return 0;\n        }\n        min = Long.Parse(value.Substring(0, i));\n        max = Long.Parse(value.Substring(j, len));\n        diff = max - min;\n        if (diff == 0) {\n            return max;\n        }\n        if (diff > 0) {\n            result = max;\n        }\n        else {\n            result = min;\n        }\n        for (i = 0; i < len; i++) {\n            if (chars[i] == '.') {\n                continue;\n            }\n            temp = Long.Parse(value.Substring(i, len));\n            if (temp < result) {\n                result = temp;\n            }\n            else if (temp > result) {\n                result = temp;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293207,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4xq9ck9w.cs(48,15): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmp4xq9ck9w.cs(49,15): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmp4xq9ck9w.cs(64,20): error CS0103: The name 'Long' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0;\n        long num61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1525: Invalid expression term '}'\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_delta = 0;\n        long right_delta = 0;\n        long delta = 0;\n        long left_delta_abs = 0;\n        long right_delta_abs = 0;\n        long delta_abs = 0;\n        long left_delta_abs_temp = 0;\n        long right_delta_abs_temp = 0;\n        long delta_abs_temp = 0;\n        long left_delta_temp = 0;\n        long right_delta_temp = 0;\n        long delta_temp = 0;\n        long left_delta_abs_temp_2 = 0;\n        long right_delta_abs_temp_2 = 0;\n        long delta_abs_temp_2 = 0;\n        long left_delta_temp_2 = 0;\n        long right_delta_temp_2 = 0;\n        long delta_temp_2 = 0;\n        long left_delta_abs_temp_3 = 0;\n        long right_delta_abs_temp_3 = 0;\n        long delta_abs_temp_3 = 0;\n        long left_delta_temp_3 = 0;\n        long right_delta_temp_3 = 0;\n        long delta_temp_3 = 0;\n        long left_delta_abs_temp_4 = 0;\n        long right_delta_abs_temp_4 = 0;\n        long delta_abs_temp_4 = 0;\n        long left_delta_temp_4 = 0;\n        long right_delta_temp_4 = 0;\n        long delta_temp_4 = 0;\n        long left_delta_abs_temp_5 = 0;\n        long right_delta_abs_temp_5 = 0;\n        long delta_abs_temp_5 = 0;\n        long left_delta_temp_5 = 0;\n        long right_delta_temp_5 = 0;\n        long delta_temp_5 = 0;\n        long left_delta_abs_temp_6 = 0;\n        long right_delta_\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnawggl1r.cs(63,26): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long diff = 0;\n        long diff_left = 0;\n        long diff_right = 0;\n        long diff_left_right = 0;\n        long diff_right_left = 0;\n        long diff_left_right_left = 0;\n        long diff_right_left_right = 0;\n        long diff_left_left = 0;\n        long diff_right_right = 0;\n        long diff_left_left_left = 0;\n        long diff_right_right_right = 0;\n        long diff_left_left_left_left = 0;\n        long diff_right_right_right_right = 0;\n        long diff_left_left_left_left_left = 0;\n        long diff_right_right_right_right_right = 0;\n        long diff_left_left_left_left_left_left = 0;\n        long diff_right_right_right_right_right_right = 0;\n        long diff_left_left_left_left_left_left_left = 0;\n        long diff_right_right_right_right_right_right_right = 0;\n        long diff_left_left_left_left_left_left_left_left = 0;\n        long diff_right_right_right_right_right_right_right_right = 0;\n        long diff_left_left_left_left_left_left_left_left_left = 0;\n        long diff_right_right_right_right_right_right_right_right_right = 0;\n        long diff_left_left_left_left_left_left_left_left_left_left = 0;\n        long diff_right_right_right_right_right_right_right_right_right_right = 0;\n        long diff_left_left_left_left_left_left_left_left_left_left_left = 0;\n        long diff_right_right_right_right_right_right_right_right_right_right_right = 0;\n        long diff_left_left_left_left_left_left_left_\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpumq6seie.cs(53,54): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long distance = 0;\n        long left_int = 0;\n        long right_int = 0;\n        long left_int_distance = 0;\n        long right_int_distance = 0;\n        long left_int_distance_square = 0;\n        long right_int_distance_square = 0;\n        long left_int_distance_square_sum = 0;\n        long right_int_distance_square_sum = 0;\n        long left_int_distance_square_sum_square = 0;\n        long right_int_distance_square_sum_square = 0;\n        long left_int_distance_square_sum_sum = 0;\n        long right_int_distance_square_sum_sum = 0;\n        long left_int_distance_square_sum_sum_square = 0;\n        long right_int_distance_square_sum_sum_square = 0;\n        long left_int_distance_square_sum_sum_sum = 0;\n        long right_int_distance_square_sum_sum_sum = 0;\n        long left_int_distance_square_sum_sum_sum_square = 0;\n        long right_int_distance_square_sum_sum_sum_square = 0;\n        long left_int_distance_square_sum_sum_sum_sum = 0;\n        long right_int_distance_square_sum_sum_sum_sum = 0;\n        long left_int_distance_square_sum_sum_sum_sum_square = 0;\n        long right_int_distance_square_sum_sum_sum_sum_square = 0;\n        long left_int_distance_square_sum_sum_sum_sum_sum = 0;\n        long right_int_distance_square_sum_sum_sum_sum_sum = 0;\n        long left_int_distance_square_sum_sum_sum_sum_sum_square = 0;\n        long right_int_distance_square_sum_sum_sum_sum_sum_square = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphgrq_jak.cs(23,14): warning CS0219: The variable 'result' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(24,14): warning CS0219: The variable 'left' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(25,14): warning CS0219: The variable 'right' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(26,14): warning CS0219: The variable 'left_distance' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(27,14): warning CS0219: The variable 'right_distance' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(28,14): warning CS0219: The variable 'distance' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(29,14): warning CS0219: The variable 'left_int' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(30,14): warning CS0219: The variable 'right_int' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(31,14): warning CS0219: The variable 'left_int_distance' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(32,14): warning CS0219: The variable 'right_int_distance' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(33,14): warning CS0219: The variable 'left_int_distance_square' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(34,14): warning CS0219: The variable 'right_int_distance_square' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(35,14): warning CS0219: The variable 'left_int_distance_square_sum' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(36,14): warning CS0219: The variable 'right_int_distance_square_sum' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(37,14): warning CS0219: The variable 'left_int_distance_square_sum_square' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(38,14): warning CS0219: The variable 'right_int_distance_square_sum_square' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(39,14): warning CS0219",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long number = 0;\n        long sign = 1;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293207,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqovh3p1i.cs(23,14): warning CS0219: The variable 'result' is assigned but its value is never used\n/tmp/tmpqovh3p1i.cs(24,14): warning CS0219: The variable 'min' is assigned but its value is never used\n/tmp/tmpqovh3p1i.cs(25,14): warning CS0219: The variable 'max' is assigned but its value is never used\n/tmp/tmpqovh3p1i.cs(26,14): warning CS0219: The variable 'diff' is assigned but its value is never used\n/tmp/tmpqovh3p1i.cs(27,14): warning CS0219: The variable 'number' is assigned but its value is never used\n/tmp/tmpqovh3p1i.cs(28,14): warning CS0219: The variable 'sign' is assigned but its value is never used\n/tmp/tmpqovh3p1i.cs(29,14): warning CS0219: The variable 'temp' is assigned but its value is never used\n/tmp/tmpqovh3p1i.cs(30,14): warning CS0219: The variable 'temp2' is assigned but its value is never used\n/tmp/tmpqovh3p1i.cs(31,14): warning CS0219: The variable 'temp3' is assigned but its value is never used\n/tmp/tmpqovh3p1i.cs(32,14): warning CS0219: The variable 'temp4' is assigned but its value is never used\n/tmp/tmpqovh3p1i.cs(33,14): warning CS0219: The variable 'temp5' is assigned but its value is never used\n/tmp/tmpqovh3p1i.cs(34,14): warning CS0219: The variable 'temp6' is assigned but its value is never used\n/tmp/tmpqovh3p1i.cs(35,14): warning CS0219: The variable 'temp7' is assigned but its value is never used\n/tmp/tmpqovh3p1i.cs(36,14): warning CS0219: The variable 'temp8' is assigned but its value is never used\n/tmp/tmpqovh3p1i.cs(37,14): warning CS0219: The variable 'temp9' is assigned but its value is never used\n/tmp/tmpqovh3p1i.cs(38,14): warning CS0219: The variable 'temp10' is assigned but its value is never used\n/tmp/tmpqovh3p1i.cs(39,14): warning CS0219: The variable 'temp11' is assigned but its value is never used\n/tmp/tmpqovh3p1i.cs(40,14): warning CS0219: The variable 'temp12' is assigned but its value is never used\n/tmp/tmpqovh3p1i.cs(41,14): warni",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid input\");\n        }\n        if (Math.Abs(result) > Math.Abs(Math.MaxInt64)) {\n            throw new Exception(\"Invalid input\");\n        }\n        if (Math.Abs(result) < Math.Abs(Math.MinInt64)) {\n            throw new Exception(\"Invalid input\");\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293207,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpietehwsg.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmpietehwsg.cs(30,46): error CS0117: 'Math' does not contain a definition for 'MaxInt64'\n/tmp/tmpietehwsg.cs(33,46): error CS0117: 'Math' does not contain a definition for 'MinInt64'\n/tmp/tmpietehwsg.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long diff = 0;\n        long abs = 0;\n        long min = 0;\n        long max = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293206,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp51u_bgs3.cs(87,24): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long diff = 0;\n        long diff_left = 0;\n        long diff_right = 0;\n        long diff_left_abs = 0;\n        long diff_right_abs = 0;\n        long abs_diff = 0;\n        long abs_diff_left = 0;\n        long abs_diff_right = 0;\n        long abs_diff_left_abs = 0;\n        long abs_diff_right_abs = 0;\n        long abs_diff_left_abs_abs = 0;\n        long abs_diff_right_abs_abs = 0;\n        long abs_diff_left_abs_abs_abs = 0;\n        long abs_diff_right_abs_abs_abs = 0;\n        long abs_diff_left_abs_abs_abs_abs = 0;\n        long abs_diff_right_abs_abs_abs_abs = 0;\n        long diff_left_abs_abs = 0;\n        long diff_right_abs_abs = 0;\n        long diff_left_abs_abs_abs = 0;\n        long diff_right_abs_abs_abs = 0;\n        long diff_left_abs_abs_abs_abs = 0;\n        long diff_right_abs_abs_abs_abs = 0;\n        long diff_left_abs_abs_abs_abs_abs = 0;\n        long diff_right_abs_abs_abs_abs_abs = 0;\n        long diff_left_abs_abs_abs_abs_abs_abs = 0;\n        long diff_right_abs_abs_abs_abs_abs_abs = 0;\n        long diff_left_abs_abs_abs_abs_abs_abs_abs = 0;\n        long diff_right_abs_abs_abs_abs_abs_abs_abs = 0;\n        long diff_left_abs_abs_abs_abs_abs_abs_abs_abs = 0;\n        long diff_right_abs_abs_abs_abs_abs_abs_abs_abs = 0;\n        long diff_left_abs_abs_abs_abs_abs_abs_abs\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1uqnseho.cs(56,51): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid input\");\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp24yc1yt6.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmp24yc1yt6.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpip3jfl94.cs(87,22): error CS1525: Invalid expression term '}'\n/tmp/tmpip3jfl94.cs(87,22): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long number = 0;\n        long diff = 0;\n        long min = 0;\n        long max = 0;\n        long diff1 = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293207,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcu6dgp8u.cs(87,22): error CS1525: Invalid expression term '}'\n/tmp/tmpcu6dgp8u.cs(87,22): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpip3jfl94.cs(87,22): error CS1525: Invalid expression term '}'\n/tmp/tmpip3jfl94.cs(87,22): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception e) {\n            throw new Exception(\"Invalid input\");\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293207,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnz80o6fs.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmpnz80o6fs.cs(27,26): warning CS0168: The variable 'e' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_value = 0;\n        long right_value = 0;\n        long left_difference = 0;\n        long right_difference = 0;\n        long difference = 0;\n        long temp = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293207,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnk563yag.cs(60,13): error CS0128: A local variable or function named 'i' is already defined in this scope\n/tmp/tmpnk563yag.cs(61,13): error CS0128: A local variable or function named 'j' is already defined in this scope\n/tmp/tmpnk563yag.cs(62,13): error CS0128: A local variable or function named 'k' is already defined in this scope\n/tmp/tmpnk563yag.cs(63,13): error CS0128: A local variable or function named 'l' is already defined in this scope\n/tmp/tmpnk563yag.cs(64,13): error CS0128: A local variable or function named 'm' is already defined in this scope\n/tmp/tmpnk563yag.cs(65,13): error CS0128: A local variable or function named 'n' is already defined in this scope\n/tmp/tmpnk563yag.cs(66,13): error CS0128: A local variable or function named 'o' is already defined in this scope\n/tmp/tmpnk563yag.cs(67,13): error CS0128: A local variable or function named 'p' is already defined in this scope\n/tmp/tmpnk563yag.cs(68,13): error CS0128: A local variable or function named 'q' is already defined in this scope\n/tmp/tmpnk563yag.cs(69,13): error CS0128: A local variable or function named 'r' is already defined in this scope\n/tmp/tmpnk563yag.cs(70,13): error CS0128: A local variable or function named 's' is already defined in this scope\n/tmp/tmpnk563yag.cs(71,13): error CS0128: A local variable or function named 't' is already defined in this scope\n/tmp/tmpnk563yag.cs(72,13): error CS0128: A local variable or function named 'u' is already defined in this scope\n/tmp/tmpnk563yag.cs(73,13): error CS0128: A local variable or function named 'v' is already defined in this scope\n/tmp/tmpnk563yag.cs(74,13): error CS0128: A local variable or function named 'w' is already defined in this scope\n/tmp/tmpnk563yag.cs(75,13): error CS0128: A local variable or function named 'x' is already defined in this scope\n/tmp/tmpnk563yag.cs(76,13): error CS0128: A local variable or function named 'y' is already defin",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid number: \" + value);\n        }\n        return Math.Round(result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293207,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpr3ssvgd5.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmpr3ssvgd5.cs(30,21): error CS0121: The call is ambiguous between the following methods or properties: 'Math.Round(decimal)' and 'Math.Round(double)'\n/tmp/tmpr3ssvgd5.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long number = 0;\n        long difference = 0;\n        long min = 0;\n        long max = 0;\n        if (value.Length > 0) {\n            number = Long.Parse(value);\n            min = Math.Min(Math.Abs(number), Math.Abs(number + 1));\n            max = Math.Max(Math.Abs(number), Math.Abs(number - 1));\n            difference = Math.Abs(number - Math.Round(number));\n            if (difference < min) {\n                result = Math.Round(number);\n            }\n            else if (difference == min) {\n                if (number > 0) {\n                    result = Math.Round(number) + 1;\n                }\n                else {\n                    result = Math.Round(number) - 1;\n                }\n            }\n            else {\n                result = Math.Round(number);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293207,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprsuoa28w.cs(29,22): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmprsuoa28w.cs(32,49): error CS0121: The call is ambiguous between the following methods or properties: 'Math.Round(decimal)' and 'Math.Round(double)'\n/tmp/tmprsuoa28w.cs(34,31): error CS0121: The call is ambiguous between the following methods or properties: 'Math.Round(decimal)' and 'Math.Round(double)'\n/tmp/tmprsuoa28w.cs(38,35): error CS0121: The call is ambiguous between the following methods or properties: 'Math.Round(decimal)' and 'Math.Round(double)'\n/tmp/tmprsuoa28w.cs(41,35): error CS0121: The call is ambiguous between the following methods or properties: 'Math.Round(decimal)' and 'Math.Round(double)'\n/tmp/tmprsuoa28w.cs(45,31): error CS0121: The call is ambiguous between the following methods or properties: 'Math.Round(decimal)' and 'Math.Round(double)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60 = 0;\n        long num61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1525: Invalid expression term '}'\n/tmp/tmpuo4wzkqq.cs(87,21): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long number = 0;\n        try {\n            number = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid number: \" + value);\n        }\n        if (number < 0) {\n            throw new Exception(\"Negative numbers are not supported\");\n        }\n        if (number == 0) {\n            return 0;\n        }\n        if (number == Long.MaxValue) {\n            return Long.MaxValue;\n        }\n        if (number == Long.MinValue) {\n            return Long.MinValue;\n        }\n        if (number % 1 == 0) {\n            return number;\n        }\n        // Find the closest integer to the given number\n        // and return it.\n        // If the given number is equidistant from two integers,\n        // round it away from zero.\n        // Examples\n        // >>> ClosestInteger((\"10\"))\n        // (10L)\n        // >>> ClosestInteger((\"15.3\"))\n        // (15L)\n        // Note:\n        // Rounding away from zero means that if the given number is equidistant\n        // from two integers, the one you should return is the one that is the\n        // farthest from zero. For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return -15.\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293207,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppz4wdv6q.cs(26,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmppz4wdv6q.cs(37,23): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmppz4wdv6q.cs(38,20): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmppz4wdv6q.cs(40,23): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmppz4wdv6q.cs(41,20): error CS0103: The name 'Long' does not exist in the current context\n/tmp/tmppz4wdv6q.cs(28,26): warning CS0168: The variable 'ex' is declared but never used\n/tmp/tmppz4wdv6q.cs(23,14): warning CS0219: The variable 'result' is assigned but its value is never used\n/tmp/tmppz4wdv6q.cs(22,24): error CS0161: 'Problem.ClosestInteger(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long distance = 0;\n        long left_int = 0;\n        long right_int = 0;\n        long left_int_distance = 0;\n        long right_int_distance = 0;\n        long left_int_distance_square = 0;\n        long right_int_distance_square = 0;\n        long left_int_distance_square_sum = 0;\n        long right_int_distance_square_sum = 0;\n        long left_int_distance_square_sum_square = 0;\n        long right_int_distance_square_sum_square = 0;\n        long left_int_distance_square_sum_sum = 0;\n        long right_int_distance_square_sum_sum = 0;\n        long left_int_distance_square_sum_sum_square = 0;\n        long right_int_distance_square_sum_sum_square = 0;\n        long left_int_distance_square_sum_sum_sum = 0;\n        long right_int_distance_square_sum_sum_sum = 0;\n        long left_int_distance_square_sum_sum_sum_square = 0;\n        long right_int_distance_square_sum_sum_sum_square = 0;\n        long left_int_distance_square_sum_sum_sum_sum = 0;\n        long right_int_distance_square_sum_sum_sum_sum = 0;\n        long left_int_distance_square_sum_sum_sum_sum_square = 0;\n        long right_int_distance_square_sum_sum_sum_sum_square = 0;\n        long left_int_distance_square_sum_sum_sum_sum_sum = 0;\n        long right_int_distance_square_sum_sum_sum_sum_sum = 0;\n        long left_int_distance_square_sum_sum_sum_sum_sum_square = 0;\n        long right_int_distance_square_sum_sum_sum_sum_sum_square = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphgrq_jak.cs(23,14): warning CS0219: The variable 'result' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(24,14): warning CS0219: The variable 'left' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(25,14): warning CS0219: The variable 'right' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(26,14): warning CS0219: The variable 'left_distance' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(27,14): warning CS0219: The variable 'right_distance' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(28,14): warning CS0219: The variable 'distance' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(29,14): warning CS0219: The variable 'left_int' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(30,14): warning CS0219: The variable 'right_int' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(31,14): warning CS0219: The variable 'left_int_distance' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(32,14): warning CS0219: The variable 'right_int_distance' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(33,14): warning CS0219: The variable 'left_int_distance_square' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(34,14): warning CS0219: The variable 'right_int_distance_square' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(35,14): warning CS0219: The variable 'left_int_distance_square_sum' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(36,14): warning CS0219: The variable 'right_int_distance_square_sum' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(37,14): warning CS0219: The variable 'left_int_distance_square_sum_square' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(38,14): warning CS0219: The variable 'right_int_distance_square_sum_square' is assigned but its value is never used\n/tmp/tmphgrq_jak.cs(39,14): warning CS0219",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n        long diff62\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjk92qz22.cs(87,20): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long number = 0;\n        long min = 0;\n        long max = 0;\n        long diff = 0;\n        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6dgq58_a.cs(87,22): error CS1525: Invalid expression term '}'\n/tmp/tmp6dgq58_a.cs(87,22): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long number = 0;\n        long number_diff = 0;\n        long number_diff_abs = 0;\n        long number_abs = 0;\n        long number_abs_diff = 0;\n        long number_abs_diff_abs = 0;\n        long number_abs_diff_abs_diff = 0;\n        long number_abs_diff_abs_diff_abs = 0;\n        long number_abs_diff_abs_diff_abs_diff = 0;\n        long number_abs_diff_abs_diff_abs_diff_abs = 0;\n        long number_abs_diff_abs_diff_abs_diff_abs_diff = 0;\n        long number_abs_diff_abs_diff_abs_diff_abs_diff_abs = 0;\n        long number_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff = 0;\n        long number_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff_abs = 0;\n        long number_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff = 0;\n        long number_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff_abs = 0;\n        long number_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff = 0;\n        long number_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff_abs = 0;\n        long number_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff = 0;\n        long number_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff_abs = 0;\n        long number_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff_abs_diff = 0;\n        long number_abs_diff_abs_\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293207,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpu4cz8l1i.cs(45,34): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long left = 0;\n        long right = 0;\n        long left_distance = 0;\n        long right_distance = 0;\n        long left_value = 0;\n        long right_value = 0;\n        long left_value_distance = 0;\n        long right_value_distance = 0;\n        long left_distance_value = 0;\n        long right_distance_value = 0;\n        long left_distance_value_distance = 0;\n        long right_distance_value_distance = 0;\n        long left_distance_value_distance_value = 0;\n        long right_distance_value_distance_value = 0;\n        long left_distance_value_distance_value_distance = 0;\n        long right_distance_value_distance_value_distance = 0;\n        long left_distance_value_distance_value_distance_value = 0;\n        long right_distance_value_distance_value_distance_value = 0;\n        long left_distance_value_distance_value_distance_value_distance = 0;\n        long right_distance_value_distance_value_distance_value_distance = 0;\n        long left_distance_value_distance_value_distance_value_distance_value = 0;\n        long right_distance_value_distance_value_distance_value_distance_value = 0;\n        long left_distance_value_distance_value_distance_value_distance_value_distance = 0;\n        long right_distance_value_distance_value_distance_value_distance_value_distance = 0;\n        long left_distance_value_distance_value_distance_value_distance_value_distance_value = 0;\n        long right_distance_value_distance_value_distance_value_distance_value_distance_value = 0;\n        long left_distance_value_distance_value_distance_value_distance_value_distance_value_distance = 0;\n        long right_distance_value_distance_value_distance_value_distance_value_distance_value_distance = 0;\n        long left_distance_value_distance_value_distance_value_distance_value_distance_value_distance_value = 0;\n        long\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293207,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwff45zba.cs(53,13): error CS1001: Identifier expected\n/tmp/tmpwff45zba.cs(53,13): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long number = 0;\n        long diff = 0;\n        long min = 0;\n        long max = 0;\n        if (value.Length > 0) {\n            number = Convert.ToLong(value);\n            min = Math.Min(Math.Abs(number), Math.Abs(number + 1));\n            max = Math.Max(Math.Abs(number), Math.Abs(number - 1));\n            diff = Math.Abs(number - Math.Round(number));\n            if (diff < min) {\n                result = Math.Round(number);\n            }\n            else if (diff < max) {\n                result = Math.Round(number);\n            }\n            else {\n                result = Math.Round(number);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293207,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3mk09zu0.cs(29,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmp3mk09zu0.cs(32,43): error CS0121: The call is ambiguous between the following methods or properties: 'Math.Round(decimal)' and 'Math.Round(double)'\n/tmp/tmp3mk09zu0.cs(34,31): error CS0121: The call is ambiguous between the following methods or properties: 'Math.Round(decimal)' and 'Math.Round(double)'\n/tmp/tmp3mk09zu0.cs(37,31): error CS0121: The call is ambiguous between the following methods or properties: 'Math.Round(decimal)' and 'Math.Round(double)'\n/tmp/tmp3mk09zu0.cs(40,31): error CS0121: The call is ambiguous between the following methods or properties: 'Math.Round(decimal)' and 'Math.Round(double)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        try {\n            result = Convert.ToLong(value);\n        }\n        catch (Exception ex) {\n            throw new Exception(\"Invalid input\");\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293205,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp24yc1yt6.cs(25,30): error CS0117: 'Convert' does not contain a definition for 'ToLong'\n/tmp/tmp24yc1yt6.cs(27,26): warning CS0168: The variable 'ex' is declared but never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        long temp = 0;\n        long diff = 0;\n        long min = 0;\n        long max = 0;\n        long abs = 0;\n        long sign = 0;\n        long num = 0;\n        long num2 = 0;\n        long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"-15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n",
      "timestamp": 1664293207,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0eetiilo.cs(23,14): warning CS0219: The variable 'result' is assigned but its value is never used\n/tmp/tmp0eetiilo.cs(24,14): warning CS0219: The variable 'temp' is assigned but its value is never used\n/tmp/tmp0eetiilo.cs(25,14): warning CS0219: The variable 'diff' is assigned but its value is never used\n/tmp/tmp0eetiilo.cs(26,14): warning CS0219: The variable 'min' is assigned but its value is never used\n/tmp/tmp0eetiilo.cs(27,14): warning CS0219: The variable 'max' is assigned but its value is never used\n/tmp/tmp0eetiilo.cs(28,14): warning CS0219: The variable 'abs' is assigned but its value is never used\n/tmp/tmp0eetiilo.cs(29,14): warning CS0219: The variable 'sign' is assigned but its value is never used\n/tmp/tmp0eetiilo.cs(30,14): warning CS0219: The variable 'num' is assigned but its value is never used\n/tmp/tmp0eetiilo.cs(31,14): warning CS0219: The variable 'num2' is assigned but its value is never used\n/tmp/tmp0eetiilo.cs(32,14): warning CS0219: The variable 'num3' is assigned but its value is never used\n/tmp/tmp0eetiilo.cs(33,14): warning CS0219: The variable 'num4' is assigned but its value is never used\n/tmp/tmp0eetiilo.cs(34,14): warning CS0219: The variable 'num5' is assigned but its value is never used\n/tmp/tmp0eetiilo.cs(35,14): warning CS0219: The variable 'num6' is assigned but its value is never used\n/tmp/tmp0eetiilo.cs(36,14): warning CS0219: The variable 'num7' is assigned but its value is never used\n/tmp/tmp0eetiilo.cs(37,14): warning CS0219: The variable 'num8' is assigned but its value is never used\n/tmp/tmp0eetiilo.cs(38,14): warning CS0219: The variable 'num9' is assigned but its value is never used\n/tmp/tmp0eetiilo.cs(39,14): warning CS0219: The variable 'num10' is assigned but its value is never used\n/tmp/tmp0eetiilo.cs(40,14): warning CS0219: The variable 'num11' is assigned but its value is never used\n/tmp/tmp0eetiilo.cs(41,14): warning CS0219: The v",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}