name: HumanEval_14_all_prefixes
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return list of all prefixes from shortest to longest of the\
  \ input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
  \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
  \ List<string> AllPrefixes(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
  \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new\
  \ List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"\
  asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
  WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
  WWW\"}))));\n    }\n\n}\n"
completions: ["        List<string> prefixes = new List<string>();\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i +\
    \ 1));\n        }\n        return prefixes;", "        List<string> prefixes =\
    \ new List<string>();\n        if (str == null || str.Length == 0) return prefixes;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> result\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        result.Add(str.Substring(0, i + 1));\n        }\n        return result;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        if (str.Length == 0) return prefixes;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n    \
    \    return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str.Length == 0) return prefixes;\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str.Length == 0) return prefixes;\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        if (str.Length ==\
    \ 0) return prefixes;\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        if (str == null || str.Length == 0)\n            return prefixes;\n \
    \       for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;\n\
    \    }\n\n    // Return list of all suffixes from shortest to longest of the input\
    \ string\n    // >>> AllSuffixes((\"abc\"))\n    // (new List<string>(new string[]{(string)\"\
    c\", (string)\"bc\", (string)\"abc\"}))\n    public static List<string> AllSuffixes(string\
    \ str) {\n        List<string> suffixes = new List<string>();\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            suffixes.Add(str.Substring(i, str.Length));\n\
    \        }\n        return suffixes;\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> AllPermutations(\"abc\")\n    // (new List<string>(new\
    \ string[]{(string)\"abc\", (string)\"acb\", (string)\"bac\", (string)\"bca\"\
    , (string)\"cab\", (string)\"cba\"}))\n    public static List<string> AllPermutations(string\
    \ str) {\n        List<string> permutations = new List<string>();\n        if\
    \ (str.Length <= 1) {\n            return permutations;\n        }\n        for\
    \ (int i = 0; i < str.Length; i++) {\n            permutations.Add(str.Substring(0,\
    \ i) + str.Substring(i + 1, str.Length));\n        }\n        return permutations;\n\
    \    }\n\n    // Return list of all permutations of the input string\n    // >>>\
    \ AllPermutations(\"abc\")\n    // (new List<string>(new string[]{(string)\"abc\"\
    , (string)\"acb\", (string)\"bac\", (string)\"bca\", (string)\"cab\", (string)\"\
    cba\"}))\n    public static List<string> AllPermutations(string str) {\n     \
    \   List<string> permutations = new List<string>();\n        if (str.Length <=\
    \ 1) {\n            return permutations;\n        ", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        if (str.Length ==\
    \ 0) return prefixes;\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i <= str.Length; i++) {\n   \
    \         prefixes.Add(str.Substring(0, i));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        if (str == null || str.Length == 0)\n            return prefixes;\n \
    \       for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str == null || str.Length == 0)\n       \
    \     return prefixes;\n        for (int i = 0; i < str.Length; i++) {\n     \
    \       prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ <= str.Length; i++) {\n            prefixes.Add(str.Substring(0, i));\n    \
    \    }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> result = new List<string>();\n        for (int i = 0; i <\
    \ str.Length; i++) {\n            result.Add(str.Substring(0, i + 1));\n     \
    \   }\n        return result;", "        List<string> prefixes = new List<string>();\n\
    \        if (str.Length == 0) return prefixes;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n    \
    \    return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str.Length == 0) return prefixes;\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> result\
    \ = new List<string>();\n        if (str == null || str.Length == 0) return result;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return result;", "        List<string> result =\
    \ new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      result.Add(str.Substring(0, i + 1));\n        }\n        return result;",
  "        List<string> result = new List<string>();\n        for (int i = 0; i <\
    \ str.Length; i++) {\n            result.Add(str.Substring(0, i + 1));\n     \
    \   }\n        return result;", "        List<string> result = new List<string>();\n\
    \        if (str == null || str.Length == 0) return result;\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0, i + 1));\n\
    \        }\n        return result;", "        List<string> prefixes = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;\n\
    \    }\n\n    // Return list of all suffixes from shortest to longest of the input\
    \ string\n    // >>> AllSuffixes((\"abc\"))\n    // (new List<string>(new string[]{(string)\"\
    c\", (string)\"bc\", (string)\"abc\"}))\n    public static List<string> AllSuffixes(string\
    \ str) {\n        List<string> suffixes = new List<string>();\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            suffixes.Add(str.Substring(str.Length\
    \ - i - 1, str.Length));\n        }\n        return suffixes;\n    }\n\n    //\
    \ Return list of all strings that are substrings of the input string\n    // >>>\
    \ AllSubstrings((\"abc\"))\n    // (new List<string>(new string[]{(string)\"a\"\
    , (string)\"ab\", (string)\"abc\", (string)\"ac\", (string)\"abcd\"}))\n    public\
    \ static List<string> AllSubstrings(string str) {\n        List<string> substrings\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        for (int j = i; j < str.Length; j++) {\n                substrings.Add(str.Substring(i,\
    \ j + 1));\n            }\n        }\n        return substrings;\n    }\n\n  \
    \  // Return list of all strings that are substrings of the input string\n   \
    \ // >>> AllSubstrings((\"abc\"))\n    // (new List<string>(new string[]{(string)\"\
    a\", (string)\"ab\", (string)\"abc\", (string)\"ac\", (string)\"abcd\"}))\n  \
    \  public static List<string> AllSubstrings(string str) {\n        List<string>\
    \ substrings = new List<string>();\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            for (int j = i; j < str.Length; j++) {\n                ", " \
    \       List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str.Length == 0) return prefixes;\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> result = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return result;", "        List<string> result =\
    \ new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      result.Add(str.Substring(0, i + 1));\n        }\n        return result;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        if (str.Length == 0) return prefixes;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n    \
    \    return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        if (str.Length == 0) return prefixes;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n    \
    \    return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        if (str.Length == 0) return prefixes;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n    \
    \    return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        if (str.Length ==\
    \ 0)\n            return prefixes;\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n        return\
    \ prefixes;", "        List<string> prefixes = new List<string>();\n        if\
    \ (str.Length == 0)\n            return prefixes;\n        for (int i = 0; i <\
    \ str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n   \
    \     }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        if (str.Length == 0) return prefixes;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n    \
    \    return prefixes;\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> AllSuffixes((\"abc\"))\n    // (new\
    \ List<string>(new string[]{(string)\"c\", (string)\"bc\", (string)\"abc\"}))\n\
    \    public static List<string> AllSuffixes(string str) {\n        List<string>\
    \ suffixes = new List<string>();\n        if (str.Length == 0) return suffixes;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            suffixes.Add(str.Substring(i,\
    \ str.Length));\n        }\n        return suffixes;\n    }\n\n    // Return list\
    \ of all permutations of the input string\n    // >>> AllPermutations(\"abc\"\
    )\n    // (new List<string>(new string[]{(string)\"abc\", (string)\"acb\", (string)\"\
    bac\", (string)\"bca\", (string)\"cab\", (string)\"cba\"}))\n    public static\
    \ List<string> AllPermutations(string str) {\n        List<string> permutations\
    \ = new List<string>();\n        if (str.Length == 0) return permutations;\n \
    \       for (int i = 0; i < str.Length; i++) {\n            for (int j = i + 1;\
    \ j < str.Length; j++) {\n                permutations.Add(str.Substring(i, j)\
    \ + str.Substring(j, str.Length));\n            }\n        }\n        return permutations;\n\
    \    }\n\n    // Return list of all strings of the input string where the first\
    \ and last characters are different\n    // >>> AllDistinct(\"mississippi\")\n\
    \    // (new List<string>(new string[]{(string)\"mi\", (string)\"ss\", (string)\"\
    iss\", (string)\"ppi\"}))\n    public static List<string> AllDistinct(string str",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        if (str.Length == 0) return prefixes;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n    \
    \    return prefixes;", "        List<string> result = new List<string>();\n \
    \       for (int i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return result;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str.Length == 0) return prefixes;\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str.Length == 0) return prefixes;\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str.Length == 0) return prefixes;\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str == null || str.Length == 0) return prefixes;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> result\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        result.Add(str.Substring(0, i + 1));\n        }\n        return result;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        if (str.Length == 0) return prefixes;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n    \
    \    return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;\n    }\n\n    // Return list of\
    \ all suffixes from shortest to longest of the input string\n    // >>> AllSuffixes((\"\
    abc\"))\n    // (new List<string>(new string[]{(string)\"c\", (string)\"bc\",\
    \ (string)\"abc\"}))\n    public static List<string> AllSuffixes(string str) {\n\
    \        List<string> suffixes = new List<string>();\n        for (int i = 0;\
    \ i < str.Length; i++) {\n            suffixes.Add(str.Substring(str.Length -\
    \ i - 1));\n        }\n        return suffixes;\n    }\n\n    // Return list of\
    \ all substrings from shortest to longest of the input string\n    // >>> AllSubstrings((\"\
    abc\"))\n    // (new List<string>(new string[]{(string)\"a\", (string)\"ab\",\
    \ (string)\"abc\", (string)\"b\", (string)\"bc\", (string)\"c\"}))\n    public\
    \ static List<string> AllSubstrings(string str) {\n        List<string> substrings\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        for (int j = i; j < str.Length; j++) {\n                substrings.Add(str.Substring(i,\
    \ j));\n            }\n        }\n        return substrings;\n    }\n\n    //\
    \ Return list of all permutations of the input string\n    // >>> AllPermutations(\"\
    abc\")\n    // (new List<string>(new string[]{(string)\"abc\", (string)\"acb\"\
    , (string)\"bac\", (string)\"bca\", (string)\"cab\", (string)\"cba\"}))\n    public\
    \ static List<string> AllPermutations(string str) {\n        List<string> permutations\
    \ = new List<string>();\n        if (str.Length > 1) {\n            for (int i\
    \ = 0; i < str.Length; i++) {\n                for", "        List<string> prefixes\
    \ = new List<string>();\n        if (str == null || str.Length == 0) return prefixes;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str == null || str.Length == 0) return prefixes;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str.Length == 0) return prefixes;\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str.Length == 0)\n            return prefixes;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str.Length == 0) return prefixes;\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str.Length == 0)\n            return prefixes;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> result\
    \ = new List<string>();\n        if (str == null || str.Length == 0) return result;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return result;\n    }\n\n    // Return list of\
    \ all suffixes from shortest to longest of the input string\n    // >>> AllSuffixes((\"\
    abc\"))\n    // (new List<string>(new string[]{(string)\"c\", (string)\"bc\",\
    \ (string)\"abc\"}))\n    public static List<string> AllSuffixes(string str) {\n\
    \        List<string> result = new List<string>();\n        if (str == null ||\
    \ str.Length == 0) return result;\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            result.Add(str.Substring(str.Length - i - 1, str.Length));\n\
    \        }\n        return result;\n    }\n\n    // Return list of all strings\
    \ of length n from shortest to longest of the input string\n    // >>> AllStrings((\"\
    abc\"), 2)\n    // (new List<string>(new string[]{(string)\"ab\", (string)\"abc\"\
    }))\n    public static List<string> AllStrings(string str, int n) {\n        List<string>\
    \ result = new List<string>();\n        if (str == null || str.Length == 0 ||\
    \ n == 0) return result;\n        for (int i = 0; i < str.Length; i++) {\n   \
    \         for (int j = 0; j < n; j++) {\n                result.Add(str.Substring(i,\
    \ i + n));\n            }\n        }\n        return result;\n    }\n\n    //\
    \ Return list of all strings of length n from shortest to longest of the input\
    \ string\n    // >>> AllStrings((\"abc\"), 2)\n    // (new List<string>(new string[]{(string)\"\
    ab\", (string)\"abc\"}))\n    public static List<string> AllStrings(string str,\
    \ int n) {\n        List<string> result = new List<string>();\n        if (str\
    \ == null || str.Length ==", "        List<string> result = new List<string>();\n\
    \        if (str == null || str.Length == 0) return result;\n        for (int\
    \ i = 0; i <= str.Length; i++) {\n            result.Add(str.Substring(0, i));\n\
    \        }\n        return result;", "        List<string> prefixes = new List<string>();\n\
    \        if (str.Length == 0) return prefixes;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n    \
    \    return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        if (str.Length == 0) return prefixes;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n    \
    \    return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        if (str == null ||\
    \ str.Length == 0) return prefixes;\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n        return\
    \ prefixes;", "        List<string> prefixes = new List<string>();\n        if\
    \ (str.Length == 0) return prefixes;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n    \
    \    return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        if (str == null || str.Length == 0)\n            return prefixes;\n \
    \       for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;\n\
    \    }\n\n    // Return list of all suffixes from shortest to longest of the input\
    \ string\n    // >>> AllSuffixes((\"abc\"))\n    // (new List<string>(new string[]{(string)\"\
    c\", (string)\"bc\", (string)\"abc\"}))\n    public static List<string> AllSuffixes(string\
    \ str) {\n        List<string> suffixes = new List<string>();\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            suffixes.Add(str.Substring(i));\n\
    \        }\n        return suffixes;\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> AllPermutations(\"abc\")\n    // (new List<string>(new\
    \ string[]{(string)\"abc\", (string)\"acb\", (string)\"bac\", (string)\"bca\"\
    , (string)\"cab\", (string)\"cba\"}))\n    public static List<string> AllPermutations(string\
    \ str) {\n        List<string> permutations = new List<string>();\n        if\
    \ (str.Length > 1) {\n            for (int i = 0; i < str.Length; i++) {\n   \
    \             for (int j = i + 1; j < str.Length; j++) {\n                   \
    \ permutations.Add(str.Substring(i, j - i + 1));\n                }\n        \
    \    }\n        }\n        return permutations;\n    }\n\n    // Return list of\
    \ all strings that are substrings of the input string\n    // >>> AllSubstrings(\"\
    abc\")\n    // (new List<string>(new string[]{(string)\"a\", (string)\"ab\", (string)\"\
    abc\"}))\n    public static List<string> AllSubstrings(string str) {\n       \
    \ List<string> substrings = new List<string>();\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            for (int j = i + 1; j <= str.Length;", "        List<string>\
    \ prefixes = new List<string>();\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n        return\
    \ prefixes;", "        List<string> prefixes = new List<string>();\n        for\
    \ (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;\n    }\n\n    // Return list of\
    \ all suffixes from shortest to longest of the input string\n    // >>> AllSuffixes((\"\
    abc\"))\n    // (new List<string>(new string[]{(string)\"c\", (string)\"bc\",\
    \ (string)\"abc\"}))\n    public static List<string> AllSuffixes(string str) {\n\
    \        List<string> suffixes = new List<string>();\n        for (int i = 0;\
    \ i < str.Length; i++) {\n            suffixes.Add(str.Substring(str.Length -\
    \ i - 1));\n        }\n        return suffixes;\n    }\n\n    // Return list of\
    \ all substrings from shortest to longest of the input string\n    // >>> AllSubstrings((\"\
    abc\"))\n    // (new List<string>(new string[]{(string)\"a\", (string)\"ab\",\
    \ (string)\"abc\", (string)\"b\", (string)\"bc\", (string)\"c\"}))\n    public\
    \ static List<string> AllSubstrings(string str) {\n        List<string> substrings\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        for (int j = i; j < str.Length; j++) {\n                substrings.Add(str.Substring(i,\
    \ j));\n            }\n        }\n        return substrings;\n    }\n\n    //\
    \ Return list of all permutations of the input string\n    // >>> AllPermutations(\"\
    abc\")\n    // (new List<string>(new string[]{(string)\"abc\", (string)\"acb\"\
    , (string)\"bac\", (string)\"bca\", (string)\"cab\", (string)\"cba\"}))\n    public\
    \ static List<string> AllPermutations(string str) {\n        List<string> permutations\
    \ = new List<string>();\n        if (str.Length == 1) {\n            permutations.Add(str);\n\
    \        }\n        else {\n            for (int", "        List<string> prefixes\
    \ = new List<string>();\n        if (str.Length == 0) return prefixes;\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str == null || str.Length == 0) return prefixes;\n\
    \        int len = str.Length;\n        for (int i = 0; i < len; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        if (str.Length ==\
    \ 0) return prefixes;\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> result = new List<string>();\n        if (str.Length == 0)\
    \ return result;\n        for (int i = 0; i < str.Length; i++) {\n           \
    \ result.Add(str.Substring(0, i + 1));\n        }\n        return result;", " \
    \       List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        if (str.Length == 0) return prefixes;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n    \
    \    return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> result = new List<string>();\n        if (str.Length == 0)\
    \ return result;\n        for (int i = 0; i < str.Length; i++) {\n           \
    \ result.Add(str.Substring(0, i + 1));\n        }\n        return result;", " \
    \       List<string> prefixes = new List<string>();\n        if (str.Length ==\
    \ 0) return prefixes;\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> result = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return result;", "        List<string> result =\
    \ new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      result.Add(str.Substring(0, i + 1));\n        }\n        return result;",
  "        List<string> prefixes = new List<string>();\n        if (str.Length ==\
    \ 0) return prefixes;\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        if (str.Length ==\
    \ 0) return prefixes;\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        if (str == null || str.Length == 0) return prefixes;\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i +\
    \ 1));\n        }\n        return prefixes;", "        List<string> prefixes =\
    \ new List<string>();\n        if (str.Length == 0) return prefixes;\n       \
    \ for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> result = new List<string>();\n        if (str == null || str.Length\
    \ == 0) return result;\n        for (int i = 0; i < str.Length; i++) {\n     \
    \       result.Add(str.Substring(0, i + 1));\n        }\n        return result;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> AllSuffixes((\"abc\"\
    ))\n    // (new List<string>(new string[]{(string)\"c\", (string)\"bc\", (string)\"\
    abc\"}))\n    public static List<string> AllSuffixes(string str) {\n        List<string>\
    \ suffixes = new List<string>();\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            suffixes.Add(str.Substring(str.Length - i - 1, str.Length));\n\
    \        }\n        return suffixes;\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> AllPermutations(\"abc\")\n    // (new List<string>(new\
    \ string[]{(string)\"abc\", (string)\"acb\", (string)\"bac\", (string)\"bca\"\
    , (string)\"cab\", (string)\"cba\"}))\n    public static List<string> AllPermutations(string\
    \ str) {\n        List<string> permutations = new List<string>();\n        if\
    \ (str.Length > 1) {\n            for (int i = 0; i < str.Length; i++) {\n   \
    \             for (int j = i + 1; j < str.Length; j++) {\n                   \
    \ permutations.Add(str.Substring(i, j) + str.Substring(j, i));\n             \
    \   }\n            }\n        }\n        return permutations;\n    }\n\n    //\
    \ Return list of all permutations of the input string\n    // >>> AllPermutations(\"\
    abc\")\n    // (new List<string>(new string[]{(string)\"abc\", (string)\"acb\"\
    , (string)\"bac\", (string)\"bca\", (string)\"cab\", (string)\"cba\"}))\n    public\
    \ static List<string> AllPermutations(string str) {\n        List<string> permutations\
    \ = new List<string>();", "        List<string> prefixes = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str == null || str.Length == 0) return prefixes;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> result = new List<string>();\n        for (int i = 0; i <=\
    \ str.Length; i++) {\n            result.Add(str.Substring(0, i));\n        }\n\
    \        return result;", "        List<string> result = new List<string>();\n\
    \        if (str == null || str.Length == 0)\n            return result;\n   \
    \     for (int i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return result;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str == null || str.Length == 0) return prefixes;\n\
    \        prefixes.Add(str);\n        for (int i = 0; i < str.Length; i++) {\n\
    \            prefixes.Add(str.Substring(0, i + 1));\n        }\n        return\
    \ prefixes;", "        List<string> prefixes = new List<string>();\n        for\
    \ (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> result\
    \ = new List<string>();\n        if (str == null || str.Length == 0) return result;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return result;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        if (str.Length ==\
    \ 0) return prefixes;\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> result = new List<string>();\n        if (str == null || str.Length\
    \ == 0) return result;\n        for (int i = 0; i < str.Length; i++) {\n     \
    \       result.Add(str.Substring(0, i + 1));\n        }\n        return result;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> AllSuffixes((\"abc\"\
    ))\n    // (new List<string>(new string[]{(string)\"c\", (string)\"bc\", (string)\"\
    abc\"}))\n    public static List<string> AllSuffixes(string str) {\n        List<string>\
    \ suffixes = new List<string>();\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            suffixes.Add(str.Substring(i, str.Length));\n        }\n    \
    \    return suffixes;\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> AllPermutations(\"abc\")\n    // (new List<string>(new\
    \ string[]{(string)\"abc\", (string)\"acb\", (string)\"bac\", (string)\"bca\"\
    , (string)\"cab\", (string)\"cba\"}))\n    public static List<string> AllPermutations(string\
    \ str) {\n        List<string> permutations = new List<string>();\n        if\
    \ (str.Length <= 1) {\n            return permutations;\n        }\n        for\
    \ (int i = 0; i < str.Length; i++) {\n            List<string> subPermutations\
    \ = AllPermutations(str.Substring(0, i) + str.Substring(i + 1, str.Length));\n\
    \            for (string subPermutation : subPermutations) {\n               \
    \ permutations.Add(str.Substring(0, i) + subPermutation + str.Substring(i + 1,\
    \ str.Length));\n            }\n        }\n        return permutations;\n    }\n\
    \n    // Return list of all permutations of the input string\n    // >>> AllPermutations(\"\
    abc\")\n    // (new List<string>(new string[]{(string)\"abc\", (string)\"acb\"\
    , (string)\"bac\", (string)\"bca\", (", "        List<string> prefixes = new List<string>();\n\
    \        if (str == null || str.Length == 0)\n            return prefixes;\n \
    \       for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str.Length == 0) return prefixes;\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;\n\
    \    }\n\n    // Return list of all suffixes from shortest to longest of the input\
    \ string\n    // >>> AllSuffixes((\"abc\"))\n    // (new List<string>(new string[]{(string)\"\
    c\", (string)\"bc\", (string)\"abc\"}))\n    public static List<string> AllSuffixes(string\
    \ str) {\n        List<string> suffixes = new List<string>();\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            suffixes.Add(str.Substring(i, str.Length));\n\
    \        }\n        return suffixes;\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> AllPermutations(\"abc\")\n    // (new List<string>(new\
    \ string[]{(string)\"abc\", (string)\"acb\", (string)\"bac\", (string)\"bca\"\
    , (string)\"cab\", (string)\"cba\"}))\n    public static List<string> AllPermutations(string\
    \ str) {\n        List<string> permutations = new List<string>();\n        if\
    \ (str.Length <= 1) {\n            permutations.Add(str);\n        }\n       \
    \ else {\n            for (int i = 0; i < str.Length; i++) {\n               \
    \ List<string> subPermutations = AllPermutations(str.Substring(0, i) + str.Substring(i\
    \ + 1, str.Length));\n                for (string subPermutation : subPermutations)\
    \ {\n                    permutations.Add(str.Substring(0, i) + subPermutation\
    \ + str.Substring(i + 1, str.Length));\n                }\n            }\n   \
    \     }\n        return permutations;\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> AllPermutations(\"abc\")\n    // (new List<string>(new\
    \ string[]{(string)\"abc\", (string)\"acb\", (string)\"", "        List<string>\
    \ prefixes = new List<string>();\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n        return\
    \ prefixes;", "        List<string> prefixes = new List<string>();\n        if\
    \ (str.Length == 0) return prefixes;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n    \
    \    return prefixes;", "        List<string> result = new List<string>();\n \
    \       for (int i = 0; i <= str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i));\n        }\n        return result;", "        List<string> prefixes = new\
    \ List<string>();\n        for (int i = 0; i < str.Length; i++) {\n          \
    \  prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        if (str == null ||\
    \ str.Length == 0)\n            return prefixes;\n        prefixes.Add(str);\n\
    \        for (int i = 1; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i));\n        }\n        return prefixes;", "        List<string> prefixes =\
    \ new List<string>();\n        if (str == null || str.Length == 0) return prefixes;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> result\
    \ = new List<string>();\n        if (str.Length == 0) return result;\n       \
    \ for (int i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return result;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str == null || str.Length == 0) return prefixes;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str.Length == 0) return prefixes;\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str == null || str.Length == 0) return prefixes;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str == null || str.Length == 0) return prefixes;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str.Length == 0) return prefixes;\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> result\
    \ = new List<string>();\n        if (str.Length == 0) return result;\n       \
    \ for (int i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return result;\n    }\n\n    // Return list of\
    \ all suffixes from shortest to longest of the input string\n    // >>> AllSuffixes((\"\
    abc\"))\n    // (new List<string>(new string[]{(string)\"c\", (string)\"bc\",\
    \ (string)\"abc\"}))\n    public static List<string> AllSuffixes(string str) {\n\
    \        List<string> result = new List<string>();\n        if (str.Length ==\
    \ 0) return result;\n        for (int i = 0; i < str.Length; i++) {\n        \
    \    result.Add(str.Substring(str.Length - i - 1, str.Length));\n        }\n \
    \       return result;\n    }\n\n    // Return list of all substrings from shortest\
    \ to longest of the input string\n    // >>> AllSubstrings((\"abc\"))\n    //\
    \ (new List<string>(new string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"\
    , (string)\"b\", (string)\"bc\", (string)\"c\"}))\n    public static List<string>\
    \ AllSubstrings(string str) {\n        List<string> result = new List<string>();\n\
    \        if (str.Length == 0) return result;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            for (int j = i; j < str.Length; j++) {\n               \
    \ result.Add(str.Substring(i, j + 1));\n            }\n        }\n        return\
    \ result;\n    }\n\n    // Return list of all permutations of the input string\n\
    \    // >>> AllPermutations(\"abc\")\n    // (new List<string>(new string[]{(string)\"\
    abc\", (string)\"acb\", (string)\"bac\", (string)\"bca\", (string)\"cab\", (string)\"\
    cba\"}))\n    public static List<string> AllPermutations(string str) {\n     \
    \   List<string> result = new List<string", "        List<string> prefixes = new\
    \ List<string>();\n        if (str == null || str.Length == 0)\n            return\
    \ prefixes;\n        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str.Length == 0) return prefixes;\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str.Length == 0) return prefixes;\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> result = new List<string>();\n\
    \        if (str.Length == 0) return result;\n        for (int i = 0; i <= str.Length;\
    \ i++) {\n            result.Add(str.Substring(0, i));\n        }\n        return\
    \ result;", "        List<string> prefixes = new List<string>();\n        if (str.Length\
    \ == 0) return prefixes;\n        for (int i = 0; i < str.Length; i++) {\n   \
    \         prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        if (str.Length ==\
    \ 0) return prefixes;\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        if (str == null || str.Length == 0) return prefixes;\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i +\
    \ 1));\n        }\n        return prefixes;", "        List<string> prefixes =\
    \ new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        if (str.Length ==\
    \ 0) return prefixes;\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        if (str.Length ==\
    \ 0) return prefixes;\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;\n\
    \    }\n\n    // Return list of all suffixes from shortest to longest of the input\
    \ string\n    // >>> AllSuffixes((\"abc\"))\n    // (new List<string>(new string[]{(string)\"\
    c\", (string)\"bc\", (string)\"abc\"}))\n    public static List<string> AllSuffixes(string\
    \ str) {\n        List<string> suffixes = new List<string>();\n        if (str.Length\
    \ == 0) return suffixes;\n        for (int i = 0; i < str.Length; i++) {\n   \
    \         suffixes.Add(str.Substring(str.Length - i - 1, str.Length));\n     \
    \   }\n        return suffixes;\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> AllPermutations((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"abc\", (string)\"acb\", (string)\"bac\", (string)\"bca\"\
    , (string)\"cab\", (string)\"cba\"}))\n    public static List<string> AllPermutations(string\
    \ str) {\n        List<string> permutations = new List<string>();\n        if\
    \ (str.Length == 0) return permutations;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            for (int j = 0; j < str.Length; j++) {\n               \
    \ if (i != j) {\n                    permutations.Add(str.Substring(i, i + 1)\
    \ + str.Substring(j, j + 1));\n                }\n            }\n        }\n \
    \       return permutations;\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> AllPermutations2((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"abc\", (string)\"acb\", (string)\"bac\", (string)\"bca\",",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        if (str == null || str.Length == 0) return prefixes;\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i +\
    \ 1));\n        }\n        return prefixes;", "        List<string> prefixes =\
    \ new List<string>();\n        if (str == null || str.Length == 0)\n         \
    \   return prefixes;\n        for (int i = 0; i < str.Length; i++) {\n       \
    \     prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        if (str.Length ==\
    \ 0) return prefixes;\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        if (str.Length ==\
    \ 0) return prefixes;\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;\n\
    \    }\n\n    // Return list of all suffixes from shortest to longest of the input\
    \ string\n    // >>> AllSuffixes((\"abc\"))\n    // (new List<string>(new string[]{(string)\"\
    c\", (string)\"bc\", (string)\"abc\"}))\n    public static List<string> AllSuffixes(string\
    \ str) {\n        List<string> suffixes = new List<string>();\n        if (str.Length\
    \ == 0) return suffixes;\n        for (int i = 0; i < str.Length; i++) {\n   \
    \         suffixes.Add(str.Substring(i, str.Length));\n        }\n        return\
    \ suffixes;\n    }\n\n    // Return list of all permutations of the input string\n\
    \    // >>> AllPermutations(\"abc\")\n    // (new List<string>(new string[]{(string)\"\
    abc\", (string)\"acb\", (string)\"bac\", (string)\"bca\", (string)\"cab\", (string)\"\
    cba\"}))\n    public static List<string> AllPermutations(string str) {\n     \
    \   List<string> permutations = new List<string>();\n        if (str.Length ==\
    \ 0) return permutations;\n        for (int i = 0; i < str.Length; i++) {\n  \
    \          for (int j = i + 1; j < str.Length; j++) {\n                permutations.Add(str.Substring(i,\
    \ j) + str.Substring(j, str.Length));\n            }\n        }\n        return\
    \ permutations;\n    }\n\n    // Return list of all strings that are substrings\
    \ of the input string\n    // >>> AllSubstrings(\"abc\")\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllSubstrings(string str) {\n        List<string> substrings =\
    \ new", "        List<string> prefixes = new List<string>();\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i +\
    \ 1));\n        }\n        return prefixes;", "        List<string> prefixes =\
    \ new List<string>();\n        if (str.Length == 0) return prefixes;\n       \
    \ for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;\n    }\n\n    // Return list of\
    \ all suffixes from shortest to longest of the input string\n    // >>> AllSuffixes((\"\
    abc\"))\n    // (new List<string>(new string[]{(string)\"c\", (string)\"bc\",\
    \ (string)\"abc\"}))\n    public static List<string> AllSuffixes(string str) {\n\
    \        List<string> suffixes = new List<string>();\n        if (str.Length ==\
    \ 0) return suffixes;\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      suffixes.Add(str.Substring(i, str.Length));\n        }\n        return\
    \ suffixes;\n    }\n\n    // Return list of all permutations of the input string\n\
    \    // >>> AllPermutations((\"abc\"))\n    // (new List<string>(new string[]{(string)\"\
    abc\", (string)\"acb\", (string)\"bac\", (string)\"bca\", (string)\"cab\", (string)\"\
    cba\"}))\n    public static List<string> AllPermutations(string str) {\n     \
    \   List<string> permutations = new List<string>();\n        if (str.Length ==\
    \ 0) return permutations;\n        for (int i = 0; i < str.Length; i++) {\n  \
    \          for (int j = i + 1; j < str.Length; j++) {\n                permutations.Add(str.Substring(i,\
    \ j) + str.Substring(j, str.Length));\n            }\n        }\n        return\
    \ permutations;\n    }\n\n    // Return list of all strings that are substrings\
    \ of the input string\n    // >>> AllSubstrings((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
    \ List<string> AllSubstrings(string str) {\n        List<string> substrings",
  "        List<string> result = new List<string>();\n        if (str.Length == 0)\
    \ return result;\n        for (int i = 0; i < str.Length; i++) {\n           \
    \ result.Add(str.Substring(0, i + 1));\n        }\n        return result;", " \
    \       List<string> result = new List<string>();\n        if (str.Length == 0)\
    \ return result;\n        for (int i = 0; i < str.Length; i++) {\n           \
    \ result.Add(str.Substring(0, i + 1));\n        }\n        return result;", " \
    \       List<string> prefixes = new List<string>();\n        if (str.Length ==\
    \ 0) return prefixes;\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> AllSuffixes((\"abc\"\
    ))\n    // (new List<string>(new string[]{(string)\"c\", (string)\"bc\", (string)\"\
    abc\"}))\n    public static List<string> AllSuffixes(string str) {\n        List<string>\
    \ suffixes = new List<string>();\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            suffixes.Add(str.Substring(str.Length - i - 1, str.Length));\n\
    \        }\n        return suffixes;\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> AllPermutations(\"abc\")\n    // (new List<string>(new\
    \ string[]{(string)\"abc\", (string)\"acb\", (string)\"bac\", (string)\"bca\"\
    , (string)\"cab\", (string)\"cba\"}))\n    public static List<string> AllPermutations(string\
    \ str) {\n        List<string> permutations = new List<string>();\n        if\
    \ (str.Length == 1) {\n            permutations.Add(str);\n            return\
    \ permutations;\n        }\n        for (int i = 0; i < str.Length; i++) {\n \
    \           List<string> subPermutations = AllPermutations(str.Substring(0, i)\
    \ + str.Substring(i + 1, str.Length));\n            for (string subPermutation\
    \ : subPermutations) {\n                permutations.Add(str.Substring(0, i) +\
    \ subPermutation + str.Substring(i, str.Length));\n            }\n        }\n\
    \        return permutations;\n    }\n\n    // Return list of all permutations\
    \ of the input string\n    // >>> AllPermutations(\"abc\")\n    // (new List<string>(new\
    \ string[]{(string)\"abc\", (string)\"acb\",", "        List<string> prefixes\
    \ = new List<string>();\n        if (str == null || str.Length == 0) return prefixes;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str.Length == 0) return prefixes;\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> result\
    \ = new List<string>();\n        if (str.Length == 0) return result;\n       \
    \ for (int i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return result;\n    }\n\n    // Return list of\
    \ all suffixes from shortest to longest of the input string\n    // >>> AllSuffixes((\"\
    abc\"))\n    // (new List<string>(new string[]{(string)\"c\", (string)\"bc\",\
    \ (string)\"abc\"}))\n    public static List<string> AllSuffixes(string str) {\n\
    \        List<string> result = new List<string>();\n        if (str.Length ==\
    \ 0) return result;\n        for (int i = 0; i < str.Length; i++) {\n        \
    \    result.Add(str.Substring(i, str.Length));\n        }\n        return result;\n\
    \    }\n\n    // Return list of all substrings from shortest to longest of the\
    \ input string\n    // >>> AllSubstrings((\"abc\"))\n    // (new List<string>(new\
    \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\", (string)\"b\", (string)\"\
    bc\", (string)\"c\"}))\n    public static List<string> AllSubstrings(string str)\
    \ {\n        List<string> result = new List<string>();\n        if (str.Length\
    \ == 0) return result;\n        for (int i = 0; i < str.Length; i++) {\n     \
    \       for (int j = i; j < str.Length; j++) {\n                result.Add(str.Substring(i,\
    \ j + 1));\n            }\n        }\n        return result;\n    }\n\n    //\
    \ Return list of all permutations of the input string\n    // >>> AllPermutations(\"\
    abc\")\n    // (new List<string>(new string[]{(string)\"abc\", (string)\"acb\"\
    , (string)\"bac\", (string)\"bca\", (string)\"cab\", (string)\"cba\"}))\n    public\
    \ static List<string> AllPermutations(string str) {\n        List<string> result\
    \ = new List<string>();\n        if (", "        List<string> result = new List<string>();\n\
    \        if (str == null || str.Length == 0)\n            return result;\n   \
    \     for (int i = 0; i < str.Length; i++) {\n            result.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return result;", "        List<string> result =\
    \ new List<string>();\n        for (int i = 0; i <= str.Length; i++) {\n     \
    \       result.Add(str.Substring(0, i));\n        }\n        return result;",
  "        List<string> result = new List<string>();\n        if (str == null || str.Length\
    \ == 0)\n            return result;\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            result.Add(str.Substring(0, i + 1));\n        }\n        return\
    \ result;", "        List<string> prefixes = new List<string>();\n        if (str.Length\
    \ == 0) return prefixes;\n        for (int i = 0; i < str.Length; i++) {\n   \
    \         prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ <= str.Length; i++) {\n            prefixes.Add(str.Substring(0, i));\n    \
    \    }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        if (str.Length == 0) return prefixes;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n    \
    \    return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        if (str.Length == 0) return prefixes;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n    \
    \    return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        if (str == null || str.Length == 0) return prefixes;\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i +\
    \ 1));\n        }\n        return prefixes;", "        List<string> prefixes =\
    \ new List<string>();\n        if (str.Length == 0) return prefixes;\n       \
    \ for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        if (str.Length == 0) return prefixes;\n     \
    \   for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        if (str.Length ==\
    \ 0) return prefixes;\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        if (str.Length ==\
    \ 0) return prefixes;\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        if (str.Length ==\
    \ 0) return prefixes;\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;",
  "        List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;\n    }\n\n    // Return list of all suffixes\
    \ from shortest to longest of the input string\n    // >>> AllSuffixes((\"abc\"\
    ))\n    // (new List<string>(new string[]{(string)\"c\", (string)\"bc\", (string)\"\
    abc\"}))\n    public static List<string> AllSuffixes(string str) {\n        List<string>\
    \ suffixes = new List<string>();\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            suffixes.Add(str.Substring(i, str.Length));\n        }\n    \
    \    return suffixes;\n    }\n\n    // Return list of all permutations of the\
    \ input string\n    // >>> AllPermutations(\"abc\")\n    // (new List<string>(new\
    \ string[]{(string)\"abc\", (string)\"acb\", (string)\"bac\", (string)\"bca\"\
    , (string)\"cab\", (string)\"cba\"}))\n    public static List<string> AllPermutations(string\
    \ str) {\n        List<string> permutations = new List<string>();\n        if\
    \ (str.Length <= 1) {\n            return permutations;\n        }\n        for\
    \ (int i = 0; i < str.Length; i++) {\n            permutations.Add(str.Substring(0,\
    \ i) + str.Substring(i + 1, str.Length));\n        }\n        return permutations;\n\
    \    }\n\n    // Return list of all strings that are substrings of the input string\n\
    \    // >>> AllSubstrings(\"abc\")\n    // (new List<string>(new string[]{(string)\"\
    a\", (string)\"ab\", (string)\"abc\"}))\n    public static List<string> AllSubstrings(string\
    \ str) {\n        List<string> substrings = new List<string>();\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            for (int j = i; j < str.Length; j++)\
    \ {\n                ", "        List<string> prefixes = new List<string>();\n\
    \        for (int i = 0; i <= str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i));\n        }\n        return prefixes;", "        List<string> result = new\
    \ List<string>();\n        for (int i = 0; i < str.Length; i++) {\n          \
    \  result.Add(str.Substring(0, i + 1));\n        }\n        return result;", " \
    \       List<string> prefixes = new List<string>();\n        if (str == null ||\
    \ str.Length == 0) return prefixes;\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n        return\
    \ prefixes;", "        List<string> prefixes = new List<string>();\n        if\
    \ (str == null || str.Length == 0) return prefixes;\n        prefixes.Add(str);\n\
    \        for (int i = 1; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i));\n        }\n        return prefixes;", "        List<string> result = new\
    \ List<string>();\n        for (int i = 0; i <= str.Length; i++) {\n         \
    \   result.Add(str.Substring(0, i));\n        }\n        return result;", "  \
    \      List<string> prefixes = new List<string>();\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n \
    \       }\n        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        if (str.Length == 0) return prefixes;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            prefixes.Add(str.Substring(0, i + 1));\n        }\n    \
    \    return prefixes;\n    }\n\n    // Return list of all suffixes from shortest\
    \ to longest of the input string\n    // >>> AllSuffixes((\"abc\"))\n    // (new\
    \ List<string>(new string[]{(string)\"c\", (string)\"bc\", (string)\"abc\"}))\n\
    \    public static List<string> AllSuffixes(string str) {\n        List<string>\
    \ suffixes = new List<string>();\n        if (str.Length == 0) return suffixes;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            suffixes.Add(str.Substring(i,\
    \ str.Length));\n        }\n        return suffixes;\n    }\n\n    // Return list\
    \ of all permutations of the input string\n    // >>> AllPermutations(\"abc\"\
    )\n    // (new List<string>(new string[]{(string)\"abc\", (string)\"acb\", (string)\"\
    bac\", (string)\"bca\", (string)\"cab\", (string)\"cba\"}))\n    public static\
    \ List<string> AllPermutations(string str) {\n        List<string> permutations\
    \ = new List<string>();\n        if (str.Length == 0) return permutations;\n \
    \       for (int i = 0; i < str.Length; i++) {\n            for (int j = i + 1;\
    \ j < str.Length; j++) {\n                permutations.Add(str.Substring(i, j)\
    \ + str.Substring(j, str.Length));\n            }\n        }\n        return permutations;\n\
    \    }\n\n    // Return list of all permutations of the input string\n    // >>>\
    \ AllPermutations(\"abc\")\n    // (new List<string>(new string[]{(string)\"abc\"\
    , (string)\"acb\", (string)\"bac\", (string)\"bca\", (string)\"cab\", (string)\"\
    cba\"}))\n    public static List<string>", "        List<string> prefixes = new\
    \ List<string>();\n        if (str == null || str.Length == 0) return prefixes;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            prefixes.Add(str.Substring(0,\
    \ i + 1));\n        }\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        for (int i = 0; i < str.Length; i++) {\n    \
    \        prefixes.Add(str.Substring(0, i + 1));\n        }\n        return prefixes;"]
stop_tokens:
- "\n    }\n"
