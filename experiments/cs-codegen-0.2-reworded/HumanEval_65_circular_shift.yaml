name: HumanEval_65_circular_shift
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Circular shift the digits of the integer x, shift the digits\
  \ right by shift\n    // and return the result as a string.\n    // If shift > number\
  \ of digits, return digits reversed.\n    // >>> CircularShift((12L), (1L))\n  \
  \  // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\")\n    public\
  \ static string CircularShift(long x, long shift) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
  \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
  12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
  \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
  11\")));\n    }\n\n}\n"
completions: ["        long result = 0;\n        long mask = 1;\n        for (int\
    \ i = 0; i < shift; i++) {\n            result = (result << 1) + (x & mask);\n\
    \            mask = mask << 1;\n        }\n        return (result == x) ? \"\"\
    \ : (result + \"\").ToString();", "        string result = \"\";\n        while\
    \ (shift > 0) {\n            result = (char)(x % 10 + 48) + result;\n        \
    \    x /= 10;\n            shift--;\n        }\n        while (shift < 0) {\n\
    \            result = (char)(x % 10 + 48) + result;\n            x /= 10;\n  \
    \          shift++;\n        }\n        return result;", "        long[] digits\
    \ = new long[Long.bitCount(x)];\n        for (int i = 0; i < digits.Length; i++)\
    \ {\n            digits[i] = (x >> (i + shift)) & 1;\n        }\n        return\
    \ String.Join(\"\", digits);", "        long result = 0;\n        for (int i =\
    \ 0; i < shift; i++) {\n            result = (result * 10) + (x % 10);\n     \
    \       x /= 10;\n        }\n        return result.ToString();", "        if (shift\
    \ > x)\n            return Reverse(x);\n        string result = \"\";\n      \
    \  while (shift > 0) {\n            result = (char)((int)x % 10 + 48) + result;\n\
    \            x /= 10;\n            shift--;\n        }\n        return result;",
  "        if (shift > x)\n            return Reverse(x);\n        if (shift == 0)\n\
    \            return Long.ToString(x);\n        long result = 0;\n        while\
    \ (shift > 0) {\n            result = result * 10 + x % 10;\n            x /=\
    \ 10;\n            shift--;\n        }\n        return Long.ToString(result);",
  "        long result = x;\n        for (int i = 0; i < shift; i++) {\n         \
    \   result = (result * 10) + (result % 10);\n        }\n        return (result\
    \ == 0) ? \"0\" : String.valueOf(result);\n    }\n\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, int shift) {\n        long result\
    \ = x;\n        for (int i = 0; i < shift; i++) {\n            result = (result\
    \ * 10) + (result % 10);\n        }\n        return (result == 0) ? \"0\" : String.valueOf(result);\n\
    \    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(long x, long\
    \ shift) {\n        long result = x;\n        for (int i = 0; i < shift; i++)\
    \ {\n            result = (result * 10) + (result % 10);\n        }\n        return\
    \ (result == 0) ? \"0\" : String.valueOf(result);\n    }\n\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, int shift) {\n        long result\
    \ = x;\n        for (int i = 0; i < shift; i++) {\n            result = (result\
    \ * 10) + (result % 10);\n        }\n        return (result == 0) ? \"0\" : String.valueOf(result);\n\
    \    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(long x, long\
    \ shift) {\n        long result = x;\n        for (int i = 0; i < shift; i++)\
    \ {\n            ", "        long[] digits = new long[Long.bitCount(x)];\n   \
    \     for (int i = 0; i < digits.Length; i++) {\n            digits[i] = x % 10;\n\
    \            x /= 10;\n        }\n        if (shift > digits.Length) {\n     \
    \       shift = digits.Length;\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < shift; i++) {\n            sb.Append(digits[digits.Length\
    \ - i - 1]);\n        }\n        for (int i = 0; i < digits.Length - shift; i++)\
    \ {\n            sb.Append(digits[i]);\n        }\n        return sb.ToString();",
  "        long result = 0;\n        for (int i = 0; i < shift; i++) {\n         \
    \   result = (result * 10) + (x % 10);\n            x /= 10;\n        }\n    \
    \    result = (result * 10) + (x % 10);\n        return result.ToString();\n \
    \   }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(long x, int shift)\
    \ {\n        long result = 0;\n        for (int i = 0; i < shift; i++) {\n   \
    \         result = (result * 10) + (x % 10);\n            x /= 10;\n        }\n\
    \        result = (result * 10) + (x % 10);\n        return result.ToString();\n\
    \    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(int x, int shift)\
    \ {\n        int result = 0;\n        for (int i = 0; i < shift; i++) {\n    \
    \        result = (result * 10) + (x % 10);\n            x /= 10;\n        }\n\
    \        result = (result * 10) + (x % 10);\n        return result.ToString();\n\
    \    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(int x, long shift)\
    \ {\n        long result = 0;\n        for (int i = 0; i < shift; i++) {\n   \
    \         result = (result * 10) + (x % 10);\n            x /= 10;\n        }\n\
    \        result = (result * 10) + (x % 10);\n        return result.ToString();\n\
    \    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n", "        if (shift > x)\n            return String.Join(\"\
    \", Reverse(Array.ConvertAll(x, Convert.ToString)));\n        return String.Join(\"\
    \", Array.ConvertAll(x, Convert.ToString).Select(a => a + shift).ToArray());",
  "        long result = 0;\n        for (int i = 0; i < shift; i++) {\n         \
    \   result = (result * 10) + (x % 10);\n            x /= 10;\n        }\n    \
    \    result = (result * 10) + (x % 10);\n        return (result == 0) ? \"0\"\
    \ : (result + \"\").ToString();", "        if (shift > x)\n            return\
    \ Reverse(x);\n        string result = \"\";\n        while (shift > 0) {\n  \
    \          result = (char)(x % 10 + 48) + result;\n            x /= 10;\n    \
    \        shift--;\n        }\n        while (shift < 0) {\n            result\
    \ = (char)(x % 10 + 48) + result;\n            x /= 10;\n            shift++;\n\
    \        }\n        return result;\n    }\n\n    // Reverse the digits of the\
    \ integer x and return the result as a string.\n    // >>> Reverse(12L)\n    //\
    \ (\"21\")\n    // >>> Reverse(21L)\n    // (\"12\")\n    public static string\
    \ Reverse(long x) {\n        string result = \"\";\n        while (x > 0) {\n\
    \            result = (char)(x % 10 + 48) + result;\n            x /= 10;\n  \
    \      }\n        return result;\n    }\n\n    // Convert the string s to a long\
    \ and return it.\n    // If s is empty, return 0.\n    // If s is not a valid\
    \ representation of a long, return -1.\n    // >>> Convert(\"123\")\n    // (123)\n\
    \    // >>> Convert(\"abc\")\n    // (-1)\n    // >>> Convert(\"12345\")\n   \
    \ // (-1)\n    public static long Convert(string s) {\n        long result = 0;\n\
    \        for (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n  \
    \          if (c < '0' || c > '9')\n                return -1;\n            result\
    \ = result * 10 + (c - '0');\n        }\n        return result;\n    }\n\n   \
    \ // Convert the string s to an integer and return it.\n    // If s is empty,\
    \ return 0.\n    // If s is not a valid representation of an integer, return -1.\n\
    \    // >>> ConvertToInteger(\"123\")\n    // (123)\n    // >>> ConvertToInteger(\"\
    abc\")\n    // (-1)\n    // >>> ConvertToInteger(\"12345\")\n    // (-1)\n   \
    \ public static int ConvertToInteger(string s) {\n        int result = 0;\n  \
    \      for (int i", "        long result = 0;\n        for (int i = 0; i < shift;\
    \ i++) {\n            result = (result * 10) + (x % 10);\n            x /= 10;\n\
    \        }\n        return (result == 0) ? \"\" : ((result < 10) ? \"0\" + result.ToString()\
    \ : result.ToString());\n    }\n\n    // >>> CircularShift((12L), (1L))\n    //\
    \ (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\")\n    public\
    \ static void Main() {\n        Console.WriteLine(\"CircularShift(12, 1) = {0}\"\
    , CircularShift(12, 1));\n        Console.WriteLine(\"CircularShift(12, 2) = {0}\"\
    , CircularShift(12, 2));", "        long[] digits = new long[Long.bitCount(x)];\n\
    \        for (int i = 0; i < digits.Length; i++) {\n            digits[i] = (x\
    \ >> i) & 1;\n        }\n        for (int i = 0; i < shift; i++) {\n         \
    \   for (int j = 0; j < digits.Length; j++) {\n                digits[j] = (digits[j]\
    \ << 1) | (digits[(j + 1) % digits.Length] >> 1);\n            }\n        }\n\
    \        return String.Join(\"\", digits);", "        if (shift < 0)\n       \
    \     return \"\";\n        if (shift == 0)\n            return Long.ToString(x);\n\
    \        if (shift > Long.MaxValue / 10)\n            return Long.ToString(x);\n\
    \        long n = shift;\n        long r = x;\n        string s = \"\";\n    \
    \    while (n > 0) {\n            s = s + (char)(r % 10 + '0');\n            r\
    \ = r / 10;\n            n--;\n        }\n        while (n < 0) {\n          \
    \  s = (char)(r % 10 + '0') + s;\n            r = r / 10;\n            n++;\n\
    \        }\n        return s;", "        long result = 0;\n        for (int i\
    \ = 0; i < shift; i++) {\n            result = (result * 10) + (x % 10);\n   \
    \         x /= 10;\n        }\n        return (result == 0) ? \"\" : (result <\
    \ 10) ? \"0\" + result.ToString() : result.ToString();", "        if (shift >\
    \ x)\n            return Reverse(x);\n        long result = 0;\n        for (int\
    \ i = 0; i < shift; i++)\n            result = (result * 10) + (x % 10);\n   \
    \     result = result * 10 + (x / 10);\n        return ToString(result);\n   \
    \ }\n\n    // Reverse the digits of the integer x and return the result as a string.\n\
    \    // >>> Reverse(123)\n    // (\"321\")\n    // >>> Reverse(12345)\n    //\
    \ (\"54321\")\n    public static string Reverse(long x) {\n        long result\
    \ = 0;\n        for (int i = 0; i < x.Length; i++)\n            result = (result\
    \ * 10) + (x % 10);\n        return ToString(result);\n    }\n\n    // Convert\
    \ the integer x to a string and return the result as a string.\n    // >>> ToString(123)\n\
    \    // (\"123\")\n    // >>> ToString(123L)\n    // (\"123\")\n    // >>> ToString(123.0)\n\
    \    // (\"123.0\")\n    // >>> ToString(123.0f)\n    // (\"123.0\")\n    // >>>\
    \ ToString(123.0d)\n    // (\"123.0\")\n    public static string ToString(double\
    \ x) {\n        return ToString(x, 0);\n    }\n\n    // Convert the integer x\
    \ to a string and return the result as a string.\n    // The string is padded\
    \ with leading zeros to the length of the string\n    // representation of the\
    \ number x.\n    // >>> ToString(123, 1)\n    // (\"00123\")\n    // >>> ToString(123,\
    \ 2)\n    // (\"0123\")\n    // >>> ToString(123, 3)\n    // (\"123\")\n    //\
    \ >>> ToString(123, 4)\n    // (\"1230\")\n    // >>> ToString(123, 5)\n    //\
    \ (\"123\")\n    // >>> ToString(123, 6)\n    // (\"0123\")\n    // >>> ToString(123,\
    \ 7)\n    // (\"00123\")\n    public static string ToString(double x, int precision)\
    \ {\n        if (precision < 0)\n            ", "        if (shift > x)\n    \
    \        return String.Join(\"\", Reverse(ToString(x)));\n        else\n     \
    \       return String.Join(\"\", ToString(x).Select(s => s + shift).ToArray());",
  "        long result = x;\n        for (long i = 0; i < shift; i++) {\n        \
    \    result = (result << 1) % 10;\n        }\n        return (result == 0) ? \"\
    0\" : \"\" + result;", "        long result = 0;\n        for (int i = 0; i <\
    \ shift; i++) {\n            result = (result * 10) + (x % 10);\n            x\
    \ /= 10;\n        }\n        result = (result * 10) + (x % 10);\n        return\
    \ result.ToString();", "        if (shift > x)\n            return String.Join(\"\
    \", Enumerable.Range(0, x).Select(i => (i + shift) % 10).ToArray());\n       \
    \ return String.Join(\"\", Enumerable.Range(0, shift).Select(i => (x % 10) + (i\
    \ * 10)).ToArray());", "        long result = 0;\n        for (int i = 0; i <\
    \ shift; i++) {\n            result = (result * 10) + (x % 10);\n            x\
    \ /= 10;\n        }\n        result = (result * 10) + (x % 10);\n        return\
    \ result.ToString();", "        if (shift < 0) {\n            throw new Exception(\"\
    Shift must be non-negative\");\n        }\n        if (shift > 10) {\n       \
    \     throw new Exception(\"Shift must be less than or equal to 10\");\n     \
    \   }\n        string result = \"\";\n        while (shift > 0) {\n          \
    \  result = (char)(x % 10 + 48) + result;\n            x /= 10;\n            shift--;\n\
    \        }\n        while (shift < 0) {\n            result = (char)(x % 10 +\
    \ 48) + result;\n            x /= 10;\n            shift++;\n        }\n     \
    \   return result;", "        if (shift > x)\n            return Reverse(x);\n\
    \        if (shift < 0)\n            return Reverse(x);\n        if (shift ==\
    \ 0)\n            return x.ToString();\n        long result = 0;\n        for\
    \ (int i = 0; i < shift; i++) {\n            result = result * 10 + x % 10;\n\
    \            x /= 10;\n        }\n        return result.ToString();\n    }\n\n\
    \    // Reverse the digits of the integer x and return the result as a string.\n\
    \    // >>> Reverse((12L))\n    // (\"21\")\n    // >>> Reverse((123L))\n    //\
    \ (\"321\")\n    public static string Reverse(long x) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % 10);\n            x /= 10;\n        }\n        return sb.ToString();\n   \
    \ }\n\n    // Convert the string s to a long and return it.\n    // If s is invalid,\
    \ return 0.\n    // >>> stringToLong(\"123\")\n    // 123\n    // >>> stringToLong(\"\
    abc\")\n    // 0\n    // >>> stringToLong(\"123abc\")\n    // 123\n    public\
    \ static long stringToLong(string s) {\n        long result = 0;\n        for\
    \ (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n            if\
    \ (c < '0' || c > '9')\n                return 0;\n            result = result\
    \ * 10 + (c - '0');\n        }\n        return result;\n    }\n\n    // Convert\
    \ the string s to an integer and return it.\n    // If s is invalid, return 0.\n\
    \    // >>> stringToInt(\"123\")\n    // 123\n    // >>> stringToInt(\"abc\")\n\
    \    // 0\n    // >>> stringToInt(\"123abc\")\n    // 123\n    public static int\
    \ stringToInt(string s) {\n        return (int)stringToLong(s);\n    }\n\n   \
    \ // Convert the string s to a double and return it.\n    // If s is invalid,\
    \ return 0.0.\n    // >>> stringToDouble(\"123\")\n    // 123.0", "        if\
    \ (shift > x)\n            return Reverse(x);\n        if (shift < 0)\n      \
    \      return Reverse(x);\n        if (shift == 0)\n            return x.ToString();\n\
    \        long mask = 1;\n        for (int i = 0; i < shift; i++)\n           \
    \ mask = mask * 10;\n        long result = 0;\n        for (int i = 0; i < x;\
    \ i++) {\n            result = result * 10 + (x / mask % 10);\n            mask\
    \ = mask / 10;\n        }\n        return result.ToString();\n    }\n\n    //\
    \ Reverse the digits of the integer x and return the result as a string.\n   \
    \ // >>> Reverse((12L))\n    // (\"21\")\n    public static string Reverse(long\
    \ x) {\n        StringBuilder sb = new StringBuilder();\n        while (x > 0)\
    \ {\n            sb.Append(x % 10);\n            x = x / 10;\n        }\n    \
    \    return sb.ToString();\n    }\n\n    // Convert the string s to a long and\
    \ return it.\n    // If s is invalid, return 0.\n    // >>> stringToLong(\"123\"\
    )\n    // 123\n    // >>> stringToLong(\"abc\")\n    // 0\n    public static long\
    \ stringToLong(string s) {\n        long result = 0;\n        for (int i = 0;\
    \ i < s.Length; i++) {\n            int digit = s[i] - '0';\n            if (digit\
    \ < 0 || digit > 9)\n                return 0;\n            result = result *\
    \ 10 + digit;\n        }\n        return result;\n    }\n\n    // Convert the\
    \ string s to an integer and return it.\n    // If s is invalid, return 0.\n \
    \   // >>> stringToInt(\"123\")\n    // 123\n    // >>> stringToInt(\"abc\")\n\
    \    // 0\n    public static int stringToInt(string s) {\n        return (int)stringToLong(s);\n\
    \    }\n\n    // Convert the string s to a double and return it.\n    // If s\
    \ is invalid, return 0.0.\n    // >>> stringToDouble(\"123\")\n    // 123.0\n\
    \    // >>> stringToDouble(\"abc\")\n    //", "        long result = 0;\n    \
    \    for (int i = 0; i < shift; i++) {\n            result = (result * 10) + (x\
    \ % 10);\n            x /= 10;\n        }\n        return (result == 0) ? \"\"\
    \ : (result + \"\").ToString();", "        string result = \"\";\n        while\
    \ (shift > 0) {\n            result = (char)(x % 10 + 48) + result;\n        \
    \    x /= 10;\n            shift--;\n        }\n        while (shift < 0) {\n\
    \            result = (char)(x % 10 + 48) + result;\n            x /= 10;\n  \
    \          shift++;\n        }\n        return result;", "        if (shift >\
    \ x)\n            return String.Join(\"\", Reverse(ToString(x)));\n        if\
    \ (shift == 0)\n            return ToString(x);\n        return String.Join(\"\
    \", Reverse(ToString(x))).Substring(shift);", "        long result = 0;\n    \
    \    for (int i = 0; i < shift; i++) {\n            result = (result * 10) + (x\
    \ % 10);\n            x /= 10;\n        }\n        return result.ToString();",
  "        long[] digits = new long[Long.bitCount(x)];\n        for (int i = 0; i\
    \ < digits.Length; i++) {\n            digits[i] = x % 10;\n            x /= 10;\n\
    \        }\n        if (shift > digits.Length) {\n            shift = digits.Length;\n\
    \        }\n        for (int i = 0; i < shift; i++) {\n            int j = i %\
    \ digits.Length;\n            digits[i] = digits[j];\n            digits[j] =\
    \ 0;\n        }\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < digits.Length; i++) {\n            sb.Append(digits[i]);\n \
    \       }\n        return sb.ToString();", "        if (shift > x) return Reverse(x);\n\
    \        string s = ToString(x);\n        for (int i = 0; i < shift; i++) {\n\
    \            s = s.Substring(1) + s.Substring(0, 1);\n        }\n        return\
    \ s;\n    }\n\n    // Reverse the digits of the integer x and return the result\
    \ as a string.\n    // >>> Reverse((12L))\n    // (\"21\")\n    public static\
    \ string Reverse(long x) {\n        return ToString(x).Reverse();\n    }\n\n \
    \   // Convert the string s to a long and return it.\n    // If s is empty, return\
    \ 0.\n    // If s is not a valid representation of a long, return -1.\n    //\
    \ >>> Convert(\"123\")\n    // (123)\n    // >>> Convert(\"abc\")\n    // (-1)\n\
    \    public static long Convert(string s) {\n        if (s.Length == 0) return\
    \ 0;\n        long result = 0;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            char c = s[i];\n            if (c < '0' || c > '9') return -1;\n\
    \            result = result * 10 + (c - '0');\n        }\n        return result;\n\
    \    }\n\n    // Convert the string s to a long and return it.\n    // If s is\
    \ empty, return 0.\n    // If s is not a valid representation of a long, return\
    \ -1.\n    // >>> Convert(\"123\")\n    // (123)\n    // >>> Convert(\"abc\")\n\
    \    // (-1)\n    public static long Convert(char[] s) {\n        if (s.Length\
    \ == 0) return 0;\n        long result = 0;\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            char c = s[i];\n            if (c < '0' || c > '9') return\
    \ -1;\n            result = result * 10 + (c - '0');\n        }\n        return\
    \ result;\n    }\n\n    // Convert the string s to a long and return it.\n   \
    \ // If s is empty, return 0.\n    // If s is not a valid representation of",
  "        // Write your code here\n        if (shift > x)\n            return Reverse(x.ToString());\n\
    \        if (shift == 0)\n            return x.ToString();\n        if (shift\
    \ < 0)\n            return Reverse(x.ToString());\n        StringBuilder sb =\
    \ new StringBuilder();\n        while (shift > 0) {\n            sb.Append(x %\
    \ 10);\n            x = x / 10;\n            shift--;\n        }\n        while\
    \ (shift < 0) {\n            sb.Append(x % 10);\n            x = x / 10;\n   \
    \         shift++;\n        }\n        return sb.ToString();\n    }\n\n    //\
    \ Reverse the digits of the integer x and return it as a string.\n    // >>> Reverse(123)\n\
    \    // \"321\"\n    public static string Reverse(long x) {\n        // Write\
    \ your code here\n        StringBuilder sb = new StringBuilder();\n        while\
    \ (x > 0) {\n            sb.Append(x % 10);\n            x = x / 10;\n       \
    \ }\n        return sb.ToString();\n    }\n\n    // Return the sum of the digits\
    \ of the integer x.\n    // >>> SumDigits(123)\n    // 3\n    public static int\
    \ SumDigits(long x) {\n        // Write your code here\n        int sum = 0;\n\
    \        while (x > 0) {\n            sum += x % 10;\n            x = x / 10;\n\
    \        }\n        return sum;\n    }\n\n    // Return the product of the digits\
    \ of the integer x.\n    // >>> ProductDigits(123)\n    // 2\n    public static\
    \ int ProductDigits(long x) {\n        // Write your code here\n        int product\
    \ = 1;\n        while (x > 0) {\n            product *= x % 10;\n            x\
    \ = x / 10;\n        }\n        return product;\n    }\n\n    // Return the sum\
    \ of the digits of the integer x.\n    // >>> SumDigits(123)\n    // 3\n    public\
    \ static int SumDigits(int x) {\n        // Write your code here\n        int\
    \ sum = 0;\n        while (x > 0) {\n            sum += x % 10;\n            ",
  "        long[] digits = new long[Long.bitCount(x)];\n        for (int i = 0; i\
    \ < digits.Length; i++) {\n            digits[i] = x % 10;\n            x /= 10;\n\
    \        }\n        for (int i = 0; i < shift; i++) {\n            for (int j\
    \ = 0; j < digits.Length; j++) {\n                digits[j] = (digits[j] + 1)\
    \ % 10;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = digits.Length - 1; i >= 0; i--) {\n            sb.Append(digits[i]);\n\
    \        }\n        return sb.ToString();", "        long result = 0;\n      \
    \  for (int i = 0; i < shift; i++) {\n            result = (result * 10) + (x\
    \ % 10);\n            x /= 10;\n        }\n        return (result == 0) ? \"\"\
    \ : ((result < 10) ? \"0\" + result.ToString() : result.ToString());", "     \
    \   long result = 0;\n        for (int i = 0; i < shift; i++) {\n            result\
    \ = (result * 10) + (x % 10);\n            x /= 10;\n        }\n        result\
    \ = (result * 10) + (x % 10);\n        return result.ToString();", "        if\
    \ (shift < 0)\n            throw new Exception(\"Shift must be non-negative\"\
    );\n        if (shift == 0)\n            return String.Format(\"{0}\", x);\n \
    \       if (shift > 0) {\n            long mask = 1;\n            for (int i =\
    \ 0; i < shift; i++) {\n                mask = mask << 1;\n            }\n   \
    \         return String.Format(\"{0}{1}\", x & mask, x >> shift);\n        }\n\
    \        else {\n            long mask = 1;\n            for (int i = 0; i < -shift;\
    \ i++) {\n                mask = mask << 1;\n            }\n            return\
    \ String.Format(\"{0}{1}\", x >> mask, x & mask);\n        }", "        string\
    \ result = \"\";\n        while (shift > 0) {\n            result = (char)(x %\
    \ 10 + 48) + result;\n            x /= 10;\n            shift--;\n        }\n\
    \        while (shift < 0) {\n            result = (char)(x % 10 + 48) + result;\n\
    \            x /= 10;\n            shift++;\n        }\n        return result;",
  "        string result = \"\";\n        long n = shift;\n        while (n > 0) {\n\
    \            result = (char)(x % 10 + 48) + result;\n            x /= 10;\n  \
    \          n--;\n        }\n        while (n < 0) {\n            result = (char)(x\
    \ % 10 + 48) + result;\n            x /= 10;\n            n++;\n        }\n  \
    \      return result;", "        string result = \"\";\n        while (shift >\
    \ 0) {\n            result = (char)(x % 10 + 48) + result;\n            x /= 10;\n\
    \            shift--;\n        }\n        while (shift < 0) {\n            result\
    \ = (char)(x % 10 + 48) + result;\n            x /= 10;\n            shift++;\n\
    \        }\n        return result;", "        string result = \"\";\n        while\
    \ (shift > 0) {\n            result = (char)((int)x % 10 + 48) + result;\n   \
    \         x = x / 10;\n            shift--;\n        }\n        while (shift <\
    \ 0) {\n            result = (char)((int)x % 10 + 48) + result;\n            x\
    \ = x / 10;\n            shift++;\n        }\n        return result;", "     \
    \   long result = x;\n        for (int i = 0; i < shift; i++) {\n            result\
    \ = (result * 10) + (result % 10);\n        }\n        return (result == x) ?\
    \ \"\" : ((result < 10) ? \"0\" + result : result.ToString());", "        if (shift\
    \ > x) {\n            return String.Join(\"\", Enumerable.Range(0, x).Select(i\
    \ => (i + shift) % 10).ToArray());\n        }\n        else {\n            return\
    \ String.Join(\"\", Enumerable.Range(0, shift).Select(i => (x % 10) + (i * 10)).ToArray());\n\
    \        }", "        long result = 0;\n        for (int i = 0; i < shift; i++)\
    \ {\n            result = (result * 10) + (x % 10);\n            x /= 10;\n  \
    \      }\n        return (result == 0) ? \"\" : (result + \"\").ToString();",
  "        long result = x;\n        for (long i = 0; i < shift; i++) {\n        \
    \    result = (result * 10) + (result % 10);\n        }\n        return (result\
    \ == x) ? \"\" : (result + \"\").ToString();", "        if (shift > x) {\n   \
    \         return String.Join(\"\", Enumerable.Range(0, x).Select(i => (i + shift)\
    \ % x).ToArray());\n        }\n        else {\n            return String.Join(\"\
    \", Enumerable.Range(0, shift).Select(i => (i + x) % shift).ToArray());\n    \
    \    }", "        long[] digits = new long[Long.bitCount(x)];\n        for (int\
    \ i = 0; i < digits.Length; i++) {\n            digits[i] = x % 10;\n        \
    \    x /= 10;\n        }\n        for (int i = 0; i < shift; i++) {\n        \
    \    for (int j = 0; j < digits.Length; j++) {\n                digits[j] = (digits[j]\
    \ + 1) % 10;\n            }\n        }\n        return String.Join(\"\", digits);",
  "        if (shift > x) {\n            return String.Join(\"\", Enumerable.Range(0,\
    \ x).Select(i => (i + shift) % 10).ToArray());\n        }\n        else {\n  \
    \          return String.Join(\"\", Enumerable.Range(0, shift).Select(i => (i\
    \ + x) % 10).ToArray());\n        }", "        if (shift > x)\n            return\
    \ String.Join(\"\", Reverse(ToString(x)));\n        else\n            return String.Join(\"\
    \", Reverse(ToString(x))).Substring(shift);\n    }\n\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift) {\n        if (shift\
    \ > x)\n            return String.Join(\"\", Reverse(ToString(x)));\n        else\n\
    \            return String.Join(\"\", Reverse(ToString(x))).Substring(shift);\n\
    \    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(long x, long\
    \ shift) {\n        if (shift > x)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        else\n            return String.Join(\"\", Reverse(ToString(x))).Substring(shift);\n\
    \    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(long x, long\
    \ shift) {\n        if (shift > x)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        else\n            return String.Join(\"\", Reverse(ToString(x))).Substring(shift);\n\
    \    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(long x, long\
    \ shift) {\n        if (shift > x)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        else\n            return String.Join(\"\", Reverse(ToString(x))).Substring(shift);\n\
    \    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> Circ",
  "        if (shift > x) {\n            return String.Join(\"\", Enumerable.Range(0,\
    \ x).Select(i => (i + shift) % x).ToArray());\n        }\n        else {\n   \
    \         return String.Join(\"\", Enumerable.Range(0, x).Select(i => (i + shift)\
    \ % x).ToArray());\n        }", "        if (shift > x)\n            return Reverse(x);\n\
    \        if (shift == 0)\n            return ToString(x);\n        if (shift <\
    \ 0)\n            return Reverse(x);\n        string result = \"\";\n        while\
    \ (shift > 0) {\n            result = ToString(x % 10) + result;\n           \
    \ x /= 10;\n            shift--;\n        }\n        return result;\n    }\n\n\
    \    // Reverse the digits of the integer x and return the result as a string.\n\
    \    // >>> Reverse(123)\n    // (\"321\")\n    // >>> Reverse(12345)\n    //\
    \ (\"54321\")\n    public static string Reverse(long x) {\n        string result\
    \ = \"\";\n        while (x > 0) {\n            result = ToString(x % 10) + result;\n\
    \            x /= 10;\n        }\n        return result;\n    }\n\n    // Convert\
    \ the integer x to a string and return the result as a string.\n    // >>> ToString(123)\n\
    \    // (\"123\")\n    // >>> ToString(12345)\n    // (\"12345\")\n    public\
    \ static string ToString(long x) {\n        return ToString(x, 10);\n    }\n\n\
    \    // Convert the integer x to a string and return the result as a string.\n\
    \    // The parameter radix specifies the radix of the string representation.\n\
    \    // >>> ToString(123, 2)\n    // (\"11\")\n    // >>> ToString(12345, 2)\n\
    \    // (\"1101\")\n    public static string ToString(long x, int radix) {\n \
    \       string result = \"\";\n        while (x > 0) {\n            result = ToString(x\
    \ % radix) + result;\n            x /= radix;\n        }\n        return result;\n\
    \    }\n\n    // Convert the integer x to a string and return the result as a\
    \ string.\n    // The parameter radix specifies the radix of the string representation.\n\
    \    // >>> ToString(123, 2)\n    // (\"11\")\n    // >>> ToString(12345, 2)\n\
    \    // (\"1101\")\n    public static string ToString(long x, int radix, int precision)\
    \ {\n        string result = \"", "        long result = 0;\n        for (int\
    \ i = 0; i < shift; i++) {\n            result = (result * 10) + (x % 10);\n \
    \           x /= 10;\n        }\n        result = (result * 10) + (x % 10);\n\
    \        return (result == 0) ? \"0\" : (result + \"\").ToString();", "      \
    \  if (shift > x)\n            return Reverse(x);\n        string result = \"\"\
    ;\n        while (shift > 0) {\n            result = (char)((x % 10) + 48) + result;\n\
    \            x /= 10;\n            shift--;\n        }\n        while (shift <\
    \ 0) {\n            result = (char)((x % 10) + 48) + result;\n            x /=\
    \ 10;\n            shift++;\n        }\n        return result;\n    }\n\n    //\
    \ Reverse the digits of the integer x and return the result as a string.\n   \
    \ // >>> Reverse(123)\n    // (\"321\")\n    // >>> Reverse(12345)\n    // (\"\
    54321\")\n    public static string Reverse(long x) {\n        string result =\
    \ \"\";\n        while (x > 0) {\n            result = (char)((x % 10) + 48) +\
    \ result;\n            x /= 10;\n        }\n        return result;\n    }\n\n\
    \    // Compute the sum of the digits of the integer x and return the result as\
    \ a string.\n    // >>> SumDigits(123)\n    // (\"3\")\n    // >>> SumDigits(12345)\n\
    \    // (\"15\")\n    public static string SumDigits(long x) {\n        string\
    \ result = \"\";\n        while (x > 0) {\n            result = (char)((x % 10)\
    \ + 48) + result;\n            x /= 10;\n        }\n        return result;\n \
    \   }\n\n    // Compute the product of the digits of the integer x and return\
    \ the result as a string.\n    // >>> ProductDigits(123)\n    // (\"123\")\n \
    \   // >>> ProductDigits(12345)\n    // (\"1523225\")\n    public static string\
    \ ProductDigits(long x) {\n        string result = \"\";\n        while (x > 0)\
    \ {\n            result = (char)((x % 10) + 48) + result;\n            x /= 10;\n\
    \        }\n        return result;\n    }\n\n    // Compute the sum of the digits\
    \ of the integer x and y and return the result as a string.\n    // >>> SumDigits(123,\
    \ 456)\n    // (\"3579\")\n    ", "        long result = 0;\n        for (int\
    \ i = 0; i < shift; i++) {\n            result = (result * 10) + (x % 10);\n \
    \           x /= 10;\n        }\n        result = (result * 10) + (x % 10);\n\
    \        return (result < 0) ? \"\" + (result * -1) : \"\" + result;\n    }\n\n\
    \    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(long x, int shift)\
    \ {\n        long result = 0;\n        for (int i = 0; i < shift; i++) {\n   \
    \         result = (result * 10) + (x % 10);\n            x /= 10;\n        }\n\
    \        result = (result * 10) + (x % 10);\n        return (result < 0) ? \"\"\
    \ + (result * -1) : \"\" + result;\n    }\n\n    // >>> CircularShift((12L), (1L))\n\
    \    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\")\n   \
    \ public static string CircularShift(long x, long shift) {\n        long result\
    \ = 0;\n        for (int i = 0; i < shift; i++) {\n            result = (result\
    \ * 10) + (x % 10);\n            x /= 10;\n        }\n        result = (result\
    \ * 10) + (x % 10);\n        return (result < 0) ? \"\" + (result * -1) : \"\"\
    \ + result;\n    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n\
    \    // >>> CircularShift((12L), (2L))\n    // (\"12\")\n    public static string\
    \ CircularShift(long x, int shift) {\n        long result = 0;\n        for (int\
    \ i = 0; i < shift; i++) {\n            result = (result * 10) + (x % 10);\n \
    \           x /= 10;\n        }\n        result = (result * 10) + (x % 10);\n\
    \        return (result < 0) ? \"\" + (", "        long[] digits = new long[Long.bitCount(x)];\n\
    \        for (int i = 0; i < digits.Length; i++) {\n            digits[i] = x\
    \ % 10;\n            x /= 10;\n        }\n        if (shift > digits.Length) {\n\
    \            shift = digits.Length;\n        }\n        for (int i = 0; i < shift;\
    \ i++) {\n            int j = i;\n            while (j < digits.Length) {\n  \
    \              digits[j] = digits[j + 1];\n                j++;\n            }\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < digits.Length; i++) {\n            sb.Append(digits[i]);\n      \
    \  }\n        return sb.ToString();", "        if (shift > x)\n            return\
    \ Reverse(x);\n        if (shift == 0)\n            return Long.ToString(x);\n\
    \        long result = 0;\n        for (int i = 0; i < shift; i++)\n         \
    \   result = (result * 10) + (x % 10);\n        result = (result * 10) + (x /\
    \ 10);\n        return Long.ToString(result);\n    }\n\n    // Reverse the digits\
    \ of the integer x and return the result as a string.\n    // >>> Reverse(12L)\n\
    \    // (\"21\")\n    // >>> Reverse(21L)\n    // (\"12\")\n    public static\
    \ string Reverse(long x) {\n        StringBuilder sb = new StringBuilder();\n\
    \        while (x > 0) {\n            sb.Append(x % 10);\n            x = x /\
    \ 10;\n        }\n        return sb.ToString();\n    }\n\n    // Reverse the digits\
    \ of the integer x and return the result as a string.\n    // >>> Reverse(12L)\n\
    \    // (\"21\")\n    // >>> Reverse(21L)\n    // (\"12\")\n    public static\
    \ string Reverse(int x) {\n        StringBuilder sb = new StringBuilder();\n \
    \       while (x > 0) {\n            sb.Append(x % 10);\n            x = x / 10;\n\
    \        }\n        return sb.ToString();\n    }\n\n    // Reverse the digits\
    \ of the integer x and return the result as a string.\n    // >>> Reverse(12L)\n\
    \    // (\"21\")\n    // >>> Reverse(21L)\n    // (\"12\")\n    public static\
    \ string Reverse(short x) {\n        StringBuilder sb = new StringBuilder();\n\
    \        while (x > 0) {\n            sb.Append(x % 10);\n            x = x /\
    \ 10;\n        }\n        return sb.ToString();\n    }\n\n    // Reverse the digits\
    \ of the integer x and return the result as a string.\n    // >>> Reverse(12L)\n\
    \    // (\"21\")\n    // >>> Reverse(21L)\n    // (\"12\")\n    public static\
    \ string Reverse(byte x) {\n        StringBuilder sb = new StringBuilder();\n\
    \        while (x >", "        string result = \"\";\n        while (shift > 0)\
    \ {\n            result = (char)(x % 10 + 48) + result;\n            x /= 10;\n\
    \            shift--;\n        }\n        while (shift < 0) {\n            result\
    \ = (char)(x % 10 + 48) + result;\n            x /= 10;\n            shift++;\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  long result = x;\n        for (int i = 0; i < shift; i++) {\n            result\
    \ = (result * 10) + (result % 10);\n        }\n        return result.ToString();",
  "        if (shift > x)\n            return Reverse(x);\n        long result = 0;\n\
    \        for (int i = 0; i < shift; i++)\n            result = (result * 10) +\
    \ (x % 10);\n        return ToString(result);\n    }\n\n    // Reverse the digits\
    \ of the integer x and return the result as a string.\n    // >>> Reverse(12)\n\
    \    // (\"21\")\n    // >>> Reverse(21)\n    // (\"12\")\n    public static string\
    \ Reverse(long x) {\n        long result = 0;\n        for (int i = 0; i < x;\
    \ i++)\n            result = (result * 10) + (x % 10);\n        return ToString(result);\n\
    \    }\n\n    // Convert the integer x to a string and return the result as a\
    \ string.\n    // >>> ToString(12)\n    // (\"12\")\n    // >>> ToString(21)\n\
    \    // (\"21\")\n    public static string ToString(long x) {\n        return\
    \ ToString(x, 10);\n    }\n\n    // Convert the integer x to a string and return\
    \ the result as a string.\n    // The parameter radix specifies the radix of the\
    \ string representation.\n    // >>> ToString(12, 2)\n    // (\"12\")\n    //\
    \ >>> ToString(21, 2)\n    // (\"3\")\n    public static string ToString(long\
    \ x, int radix) {\n        if (x < 0)\n            return \"-\" + ToString(-x,\
    \ radix);\n        if (x == 0)\n            return \"0\";\n        if (x < 10)\n\
    \            return ToString(x, radix);\n        if (x < 100)\n            return\
    \ ToString(x / 10, radix) + \"0\" + ToString(x % 10, radix);\n        if (x <\
    \ 1000)\n            return ToString(x / 100, radix) + \"0\" + ToString(x % 100,\
    \ radix);\n        if (x < 10000)\n            return ToString(x / 1000, radix)\
    \ + \"0\" + ToString(x % 1000, radix);\n        if (x < 100000)\n            return\
    \ ToString(x / 10000, radix) + \"0", "        if (shift < 0)\n            throw\
    \ new Exception(\"shift must be non-negative\");\n        if (shift > 10)\n  \
    \          throw new Exception(\"shift too large\");\n        if (x < 0)\n   \
    \         throw new Exception(\"x must be non-negative\");\n        if (x == 0)\n\
    \            return \"0\";\n        string result = \"\";\n        while (shift\
    \ > 0) {\n            result = (char)(x % 10 + 48) + result;\n            x /=\
    \ 10;\n            shift--;\n        }\n        while (shift < 0) {\n        \
    \    result = (char)(x % 10 + 48) + result;\n            x /= 10;\n          \
    \  shift++;\n        }\n        return result;", "        if (shift > x)\n   \
    \         return Reverse(x);\n        if (shift < 0)\n            return Reverse(x);\n\
    \        if (shift == 0)\n            return x.ToString();\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (shift > 0) {\n            sb.Append(x\
    \ % 10);\n            x /= 10;\n            shift--;\n        }\n        sb.Append(x);\n\
    \        return sb.ToString();\n    }\n\n    // Reverse the digits of the integer\
    \ x and return the result as a string.\n    // >>> Reverse(12)\n    // (\"21\"\
    )\n    // >>> Reverse(21)\n    // (\"12\")\n    // >>> Reverse(1234)\n    // (\"\
    4321\")\n    public static string Reverse(long x) {\n        StringBuilder sb\
    \ = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x % 10);\n\
    \            x /= 10;\n        }\n        return sb.ToString();\n    }\n\n   \
    \ // Convert the string s to a long and return it.\n    // If s is empty, return\
    \ 0.\n    // If s contains more than one character, return 0.\n    // >>> Convert(\"\
    1234\")\n    // (1234)\n    // >>> Convert(\"abc\")\n    // (0)\n    // >>> Convert(\"\
    1a2b3c\")\n    // (0)\n    public static long Convert(string s) {\n        if\
    \ (s.Length == 0)\n            return 0;\n        if (s.Length > 1)\n        \
    \    return 0;\n        return Long.Parse(s);\n    }\n\n    // Convert the string\
    \ s to a long and return it.\n    // If s is empty, return 0.\n    // If s contains\
    \ more than one character, return 0.\n    // >>> Convert(\"1234\")\n    // (1234)\n\
    \    // >>> Convert(\"abc\")\n    // (0)\n    // >>> Convert(\"1a2b3c\")\n   \
    \ // (0)\n    public static long Convert(string s, int base) {\n        if (s.Length\
    \ == 0)\n            return 0;\n        if (s.Length > 1)\n            return\
    \ 0;", "        long[] digits = new long[Long.bitCount(x)];\n        for (int\
    \ i = 0; i < digits.Length; i++) {\n            digits[i] = x % 10;\n        \
    \    x /= 10;\n        }\n        for (int i = 0; i < shift; i++) {\n        \
    \    for (int j = 0; j < digits.Length; j++) {\n                digits[j] = (digits[j]\
    \ + 1) % 10;\n            }\n        }\n        return String.Join(\"\", digits);",
  "        if (shift > x)\n            return String.Join(\"\", Reverse(Array.ConvertAll(x,\
    \ Convert.ToString)));\n        else\n            return String.Join(\"\", Array.ConvertAll(x,\
    \ Convert.ToString).Take((int)shift));", "        if (shift > x) return \"\";\n\
    \        long result = 0;\n        for (int i = 0; i < shift; i++) {\n       \
    \     result = (result * 10) + (x % 10);\n            x /= 10;\n        }\n  \
    \      return result.ToString();", "        long result = 0;\n        for (int\
    \ i = 0; i < shift; i++) {\n            result = (result * 10) + (x % 10);\n \
    \           x /= 10;\n        }\n        return (result == 0) ? \"\" : (result\
    \ < 10) ? \"0\" + result.ToString() : result.ToString();", "        long result\
    \ = 0;\n        for (int i = 0; i < shift; i++) {\n            result = (result\
    \ * 10) + (x % 10);\n            x /= 10;\n        }\n        return (result +\
    \ \"\").ToString();", "        long[] digits = new long[Long.bitCount(x)];\n \
    \       for (int i = 0; i < digits.Length; i++) {\n            digits[i] = x %\
    \ 10;\n            x /= 10;\n        }\n        if (shift > digits.Length) {\n\
    \            shift = digits.Length;\n        }\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (int i = digits.Length - shift; i < digits.Length;\
    \ i++) {\n            sb.Append(digits[i]);\n        }\n        for (int i = 0;\
    \ i < shift; i++) {\n            sb.Append(digits[i]);\n        }\n        return\
    \ sb.ToString();", "        long result = 0;\n        for (int i = 0; i < shift;\
    \ i++) {\n            result = result * 10 + x % 10;\n            x /= 10;\n \
    \       }\n        return (result == 0) ? \"\" : (result + \"\").ToString();\n\
    \    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static void CircularShiftTest() {\n     \
    \   Console.WriteLine(\"CircularShiftTest\");\n        Console.WriteLine(\"CircularShift((12L),\
    \ (1L)) = {0}\", CircularShift(12L, 1L));\n        Console.WriteLine(\"CircularShift((12L),\
    \ (2L)) = {0}\", CircularShift(12L, 2L));", "        long result = 0;\n      \
    \  for (int i = 0; i < shift; i++) {\n            result = (result * 10) + (x\
    \ % 10);\n            x /= 10;\n        }\n        return (result == 0) ? \"\"\
    \ : ((result < 10) ? \"0\" + result.ToString() : result.ToString());\n    }\n\n\
    \    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(long x, int shift)\
    \ {\n        return CircularShift(x, shift.ToString());\n    }\n\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, string shift) {\n        return\
    \ CircularShift(x, Convert.ToLong(shift));\n    }\n\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, char shift) {\n        return\
    \ CircularShift(x, (long)shift);\n    }\n\n    // >>> CircularShift((12L), (1L))\n\
    \    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\")\n   \
    \ public static string CircularShift(long x, Decimal shift) {\n        return\
    \ CircularShift(x, shift.ToString());\n    }\n\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, double shift) {\n        return\
    \ CircularShift(x, shift.ToString());\n    }\n\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long", "        // Write your code here\n\
    \        if (shift > x)\n            return String.Join(\"\", Reverse(Array.ConvertAll(x,\
    \ typeof(long))));\n        else\n            return String.Join(\"\", Array.ConvertAll(x,\
    \ typeof(long))).Substring(shift);", "        if (shift > x)\n            return\
    \ String.Join(\"\", Reverse(ToString(x)));\n        return String.Join(\"\", Reverse(ToString(x))).Substring(shift);\n\
    \    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(long x, int shift)\
    \ {\n        if (shift > x)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        return String.Join(\"\", Reverse(ToString(x))).Substring(shift);\n  \
    \  }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(long x, long\
    \ shift, int radix) {\n        if (shift > x)\n            return String.Join(\"\
    \", Reverse(ToString(x, radix)));\n        return String.Join(\"\", Reverse(ToString(x,\
    \ radix))).Substring(shift);\n    }\n\n    // >>> CircularShift((12L), (1L))\n\
    \    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\")\n   \
    \ public static string CircularShift(long x, int shift, int radix) {\n       \
    \ if (shift > x)\n            return String.Join(\"\", Reverse(ToString(x, radix)));\n\
    \        return String.Join(\"\", Reverse(ToString(x, radix))).Substring(shift);\n\
    \    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(long x, long\
    \ shift, int radix, int digits) {\n        if (shift > x)\n            return\
    \ String.Join(\"\", Reverse(ToString(x, radix, digits)));\n        return String.Join(\"\
    \", Reverse(ToString(x, radix, digits))).Substring(shift);\n    }\n\n    // >>>",
  "        if (shift > x)\n            return Reverse(x);\n        long result = 0;\n\
    \        while (shift > 0) {\n            result = (result << 1) + (x & 1);\n\
    \            x >>= 1;\n            shift--;\n        }\n        return ToString(result);\n\
    \    }\n\n    // Reverse the digits of the integer x and return the result as\
    \ a string.\n    // >>> Reverse(12L)\n    // (\"21\")\n    // >>> Reverse(21L)\n\
    \    // (\"12\")\n    public static string Reverse(long x) {\n        string result\
    \ = \"\";\n        while (x > 0) {\n            result = (char)(x % 10) + result;\n\
    \            x /= 10;\n        }\n        return result;\n    }\n\n    // Convert\
    \ the string s to a long and return it.\n    // If s is invalid, return 0.\n \
    \   // >>> stringToLong(\"123\")\n    // 123\n    // >>> stringToLong(\"abc\"\
    )\n    // 0\n    // >>> stringToLong(\"123abc\")\n    // 123\n    public static\
    \ long stringToLong(string s) {\n        long result = 0;\n        for (int i\
    \ = 0; i < s.Length; i++) {\n            char c = s[i];\n            if (c < '0'\
    \ || c > '9')\n                return 0;\n            result = (result * 10) +\
    \ (c - '0');\n        }\n        return result;\n    }\n\n    // Convert the string\
    \ s to an integer and return it.\n    // If s is invalid, return 0.\n    // >>>\
    \ stringToInt(\"123\")\n    // 123\n    // >>> stringToInt(\"abc\")\n    // 0\n\
    \    // >>> stringToInt(\"123abc\")\n    // 123\n    public static int stringToInt(string\
    \ s) {\n        return (int)stringToLong(s);\n    }\n\n    // Convert the string\
    \ s to a double and return it.\n    // If s is invalid, return 0.0.\n    // >>>\
    \ stringToDouble(\"123\")\n    // 123.0\n    // >>> stringToDouble(\"abc\")\n\
    \    // 0.0\n    // >>> stringToDouble(\"123abc\")\n    // 123.0", "        long[]\
    \ digits = new long[Long.bitCount(x)];\n        for (int i = 0; i < digits.Length;\
    \ i++) {\n            digits[i] = x % 10;\n            x /= 10;\n        }\n \
    \       for (int i = 0; i < shift; i++) {\n            int j = (i + digits.Length\
    \ - 1) % digits.Length;\n            digits[j] = digits[j - 1];\n            digits[j\
    \ - 1] = 0;\n        }\n        return String.Join(\"\", digits);", "        long\
    \ result = 0;\n        for (int i = 0; i < shift; i++) {\n            result =\
    \ (result * 10) + (x % 10);\n            x /= 10;\n        }\n        result =\
    \ (result * 10) + (x % 10);\n        return result.ToString();", "        if (shift\
    \ > x) return String.Join(\"\", Enumerable.Range(0, shift).Select(i => x % 10).ToArray());\n\
    \        if (shift < 0) return String.Join(\"\", Enumerable.Range(0, -shift).Select(i\
    \ => x % 10).ToArray());\n        long n = x;\n        long m = shift;\n     \
    \   long result = 0;\n        while (m > 0) {\n            m--;\n            result\
    \ = result * 10 + n % 10;\n            n /= 10;\n        }\n        while (m <\
    \ 0) {\n            m++;\n            result = result * 10 + n % 10;\n       \
    \     n /= 10;\n        }\n        return String.Join(\"\", Enumerable.Range(0,\
    \ (int)Math.Abs(shift)).Select(i => (int)result % 10).ToArray());", "        string\
    \ result = \"\";\n        while (shift > 0) {\n            result = (char)(x %\
    \ 10 + 48) + result;\n            x /= 10;\n            shift--;\n        }\n\
    \        while (shift < 0) {\n            result = (char)(x % 10 + 48) + result;\n\
    \            x /= 10;\n            shift++;\n        }\n        return result;",
  "        if (shift > x)\n            return Reverse(x);\n        long result = 0;\n\
    \        for (int i = 0; i < shift; i++) {\n            result = result * 10 +\
    \ x % 10;\n            x /= 10;\n        }\n        return result.ToString();\n\
    \    }\n\n    // Reverse the digits of the integer x and return the result as\
    \ a string.\n    // >>> Reverse((12L))\n    // (\"21\")\n    // >>> Reverse((123L))\n\
    \    // (\"321\")\n    public static string Reverse(long x) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (x > 0) {\n            sb.Append(x\
    \ % 10);\n            x /= 10;\n        }\n        return sb.ToString();\n   \
    \ }\n\n    // Convert the string s to a long and return it.\n    // If s is empty,\
    \ return 0.\n    // If s is not a number, return -1.\n    // >>> stringToLong(\"\
    123\")\n    // 123\n    // >>> stringToLong(\"abc\")\n    // -1\n    public static\
    \ long stringToLong(string s) {\n        if (s.Length == 0)\n            return\
    \ 0;\n        long result = 0;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            char c = s[i];\n            if (c < '0' || c > '9')\n           \
    \     return -1;\n            result = result * 10 + (c - '0');\n        }\n \
    \       return result;\n    }\n\n    // Convert the string s to an integer and\
    \ return it.\n    // If s is empty, return 0.\n    // If s is not a number, return\
    \ -1.\n    // >>> stringToInt(\"123\")\n    // 123\n    // >>> stringToInt(\"\
    abc\")\n    // -1\n    public static int stringToInt(string s) {\n        long\
    \ result = stringToLong(s);\n        if (result < Integer.MinValue || result >\
    \ Integer.MaxValue)\n            return -1;\n        return (int) result;\n  \
    \  }\n\n    // Convert the string s to a double and return it.\n    // If s is\
    \ empty, return 0.0.", "        long[] digits = new long[Long.bitCount(x)];\n\
    \        for (int i = 0; i < digits.Length; i++) {\n            digits[i] = x\
    \ % 10;\n            x /= 10;\n        }\n        for (int i = 0; i < shift; i++)\
    \ {\n            for (int j = 0; j < digits.Length; j++) {\n                digits[j]\
    \ = (digits[j] + 1) % 10;\n            }\n        }\n        return String.Join(\"\
    \", digits);", "        if (shift > x)\n            return Reverse(x);\n     \
    \   if (shift == 0)\n            return ToString(x);\n        if (shift == 1)\n\
    \            return ToString(x) + ToString(x);\n        if (shift == 2)\n    \
    \        return ToString(x) + ToString(x) + ToString(x);\n        if (shift ==\
    \ 3)\n            return ToString(x) + ToString(x) + ToString(x) + ToString(x);\n\
    \        if (shift == 4)\n            return ToString(x) + ToString(x) + ToString(x)\
    \ + ToString(x) + ToString(x);\n        if (shift == 5)\n            return ToString(x)\
    \ + ToString(x) + ToString(x) + ToString(x) + ToString(x) + ToString(x);\n   \
    \     if (shift == 6)\n            return ToString(x) + ToString(x) + ToString(x)\
    \ + ToString(x) + ToString(x) + ToString(x) + ToString(x);\n        if (shift\
    \ == 7)\n            return ToString(x) + ToString(x) + ToString(x) + ToString(x)\
    \ + ToString(x) + ToString(x) + ToString(x) + ToString(x);\n        if (shift\
    \ == 8)\n            return ToString(x) + ToString(x) + ToString(x) + ToString(x)\
    \ + ToString(x) + ToString(x) + ToString(x) + ToString(x) + ToString(x);\n   \
    \     if (shift == 9)\n            return ToString(x) + ToString(x) + ToString(x)\
    \ + ToString(x) + ToString(x) + ToString(x) + ToString(x) + ToString(x) + ToString(x)\
    \ + ToString(x);\n        if (shift == 10)\n            return ToString(x) + ToString(x)\
    \ + ToString(x) + ToString(x) + ToString(x) + ToString(x) + ToString(x) + ToString(x)\
    \ + ToString(x) + ToString(", "        long result = 0;\n        for (int i =\
    \ 0; i < shift; i++) {\n            result = (result * 10) + (x % 10);\n     \
    \       x /= 10;\n        }\n        return (result == 0) ? \"\" : (result + \"\
    \").ToString();", "        long[] digits = new long[(int)Math.Abs(shift)];\n \
    \       for (int i = 0; i < digits.Length; i++) {\n            digits[i] = x %\
    \ 10;\n            x /= 10;\n        }\n        if (shift > 0) {\n           \
    \ for (int i = 0; i < digits.Length; i++) {\n                digits[i] = digits[i\
    \ + shift];\n            }\n        }\n        else {\n            for (int i\
    \ = 0; i < digits.Length; i++) {\n                digits[i] = digits[digits.Length\
    \ - 1 - i];\n            }\n        }\n        return String.Join(\"\", digits);",
  "        long result = x;\n        for (long i = 0; i < shift; i++) {\n        \
    \    result = (result * 10) + (x % 10);\n            x /= 10;\n        }\n   \
    \     return result.ToString();", "        if (shift > x)\n            return\
    \ Reverse(x);\n        if (shift == 0)\n            return Long.ToString(x);\n\
    \        if (shift < 0)\n            return Reverse(x);\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (shift > 0) {\n            sb.Append(Long.ToString(x\
    \ % 10));\n            x /= 10;\n            shift--;\n        }\n        sb.Append(Long.ToString(x));\n\
    \        return sb.ToString();\n    }\n\n    // Reverse the digits of the integer\
    \ x and return the result as a string.\n    // >>> Reverse(123)\n    // (\"321\"\
    )\n    // >>> Reverse(1234)\n    // (\"4321\")\n    public static string Reverse(long\
    \ x) {\n        StringBuilder sb = new StringBuilder();\n        while (x > 0)\
    \ {\n            sb.Append(Long.ToString(x % 10));\n            x /= 10;\n   \
    \     }\n        return sb.ToString();\n    }\n\n    // Convert a string of digits\
    \ to an integer and return the result.\n    // >>> stringToInt(\"123\")\n    //\
    \ 123\n    // >>> stringToInt(\"abc\")\n    // 0\n    // >>> stringToInt(\"123abc\"\
    )\n    // 123\n    // >>> stringToInt(\"abc123\")\n    // 0\n    public static\
    \ int stringToInt(string s) {\n        int result = 0;\n        for (int i = 0;\
    \ i < s.Length; i++) {\n            int digit = s[i] - '0';\n            if (digit\
    \ < 0 || digit > 9)\n                return 0;\n            result = result *\
    \ 10 + digit;\n        }\n        return result;\n    }\n\n    // Convert a string\
    \ of digits to a long and return the result.\n    // >>> stringToLong(\"123\"\
    )\n    // 123\n    // >>> stringToLong(\"abc\")\n    // 0\n    // >>> stringToLong(\"\
    123abc\")\n    // 123\n    // >>> stringToLong(\"abc123\")\n    // 0\n    public\
    \ static long stringToLong(string s) {\n        long result = 0;\n        for\
    \ (int i = 0; i < s.Length", "        long result = 0;\n        for (int i = 0;\
    \ i < shift; i++) {\n            result = (result * 10) + (x % 10);\n        \
    \    x /= 10;\n        }\n        return (result == 0) ? \"\" : ((result < 10)\
    \ ? \"0\" + result.ToString() : result.ToString());", "        if (shift > x)\
    \ {\n            return String.Join(\"\", Enumerable.Range(0, x).Select(i => (i\
    \ + shift) % 10).ToArray());\n        }\n        else if (shift == 0) {\n    \
    \        return String.Join(\"\", Enumerable.Range(0, x).ToArray());\n       \
    \ }\n        else {\n            return String.Join(\"\", Enumerable.Range(0,\
    \ x).Select(i => (i + shift) % 10).ToArray());\n        }", "        string result\
    \ = \"\";\n        while (shift > 0) {\n            result = (char)((int)x % 10\
    \ + 48) + result;\n            x = x / 10;\n            shift--;\n        }\n\
    \        while (shift < 0) {\n            result = (char)((int)x % 10 + 48) +\
    \ result;\n            x = x / 10;\n            shift++;\n        }\n        return\
    \ result;", "        if (shift > x) {\n            return Reverse(x);\n      \
    \  }\n        if (shift == 0) {\n            return ToString(x);\n        }\n\
    \        string result = \"\";\n        while (shift > 0) {\n            result\
    \ = ToString(x % 10) + result;\n            x /= 10;\n            shift--;\n \
    \       }\n        while (shift < 0) {\n            result = ToString(x % 10)\
    \ + result;\n            x /= 10;\n            shift++;\n        }\n        return\
    \ result;\n    }\n\n    // Reverse the digits of the integer x and return the\
    \ result as a string.\n    // >>> Reverse((12L))\n    // (\"21\")\n    public\
    \ static string Reverse(long x) {\n        string result = \"\";\n        while\
    \ (x > 0) {\n            result = ToString(x % 10) + result;\n            x /=\
    \ 10;\n        }\n        return result;\n    }\n\n    // Convert the integer\
    \ x to a string and return the result as a string.\n    // >>> ToString(12L)\n\
    \    // (\"12\")\n    public static string ToString(long x) {\n        string\
    \ result = \"\";\n        while (x > 0) {\n            result = ToString(x % 10)\
    \ + result;\n            x /= 10;\n        }\n        return result;\n    }\n\n\
    \    // Convert the integer x to a string and return the result as a string.\n\
    \    // >>> ToString(12L)\n    // (\"12\")\n    public static string ToString(long\
    \ x) {\n        string result = \"\";\n        while (x > 0) {\n            result\
    \ = ToString(x % 10) + result;\n            x /= 10;\n        }\n        return\
    \ result;\n    }\n\n    // Convert the integer x to a string and return the result\
    \ as a string.\n    // >>> ToString(12L)\n    // (\"12\")\n    public static string\
    \ ToString(long x) {\n        string result = \"\";\n        while (x > 0) {\n\
    \            result = ToString(x % 10) + result;\n            x /= 10;\n     \
    \   }\n        return result;\n    }\n\n    // Convert the integer x to a string",
  "        if (shift < 0)\n            throw new Exception(\"Shift must be non-negative\"\
    );\n        if (shift > 10)\n            throw new Exception(\"Shift must be less\
    \ than 10\");\n        if (x < 0)\n            throw new Exception(\"Cannot shift\
    \ a negative number\");\n        if (x == 0)\n            return \"0\";\n    \
    \    string result = \"\";\n        while (shift > 0) {\n            result =\
    \ (char)((x % 10) + 48) + result;\n            x /= 10;\n            shift--;\n\
    \        }\n        while (shift < 0) {\n            result = (char)((x % 10)\
    \ + 48) + result;\n            x /= 10;\n            shift++;\n        }\n   \
    \     return result;", "        if (shift < 0)\n            throw new Exception(\"\
    Shift must be non-negative\");\n        if (shift > 10)\n            throw new\
    \ Exception(\"Shift too large\");\n        if (x < 0)\n            throw new Exception(\"\
    Negative input\");\n        if (x == 0)\n            return \"0\";\n        string\
    \ result = \"\";\n        while (shift > 0) {\n            result = (char)(x %\
    \ 10 + 48) + result;\n            x /= 10;\n            shift--;\n        }\n\
    \        while (shift < 0) {\n            result = (char)(x % 10 + 48) + result;\n\
    \            x /= 10;\n            shift++;\n        }\n        return result;",
  "        if (shift > x) return \"\";\n        StringBuilder sb = new StringBuilder();\n\
    \        while (shift > 0) {\n            sb.Append(x % 10);\n            x /=\
    \ 10;\n            shift--;\n        }\n        while (sb.Length > 0) {\n    \
    \        sb.Insert(0, x % 10);\n            x /= 10;\n        }\n        return\
    \ sb.ToString();", "        if (shift > x) {\n            return Reverse(x);\n\
    \        }\n        long result = 0;\n        for (int i = 0; i < shift; i++)\
    \ {\n            result = (result * 10) + (x % 10);\n            x /= 10;\n  \
    \      }\n        result = (result * 10) + (x % 10);\n        return result.ToString();",
  "        if (shift > x)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        else\n            return String.Join(\"\", Reverse(ToString(x))).Substring(shift);",
  "        long result = x;\n        for (int i = 0; i < shift; i++) {\n         \
    \   result = (result << 1) % 10;\n        }\n        return (result == 0) ? \"\
    0\" : \"\" + result;", "        if (shift > x) {\n            return Reverse(x);\n\
    \        }\n        string result = \"\";\n        while (shift > 0) {\n     \
    \       result = (char)((int)x % 10 + 48) + result;\n            x /= 10;\n  \
    \          shift--;\n        }\n        while (shift < 0) {\n            result\
    \ = (char)((int)x % 10 + 48) + result;\n            x /= 10;\n            shift++;\n\
    \        }\n        return result;\n    }\n\n    // Reverse the digits of the\
    \ integer x and return the result as a string.\n    // >>> Reverse(1234)\n   \
    \ // (\"4321\")\n    public static string Reverse(long x) {\n        string result\
    \ = \"\";\n        while (x > 0) {\n            result = (char)((int)x % 10 +\
    \ 48) + result;\n            x /= 10;\n        }\n        return result;\n   \
    \ }\n\n    // Convert the string s to a long and return it.\n    // If s is empty,\
    \ return 0.\n    // If s is not a valid representation of a long, return -1.\n\
    \    // >>> stringToLong(\"123\")\n    // (123)\n    // >>> stringToLong(\"abc\"\
    )\n    // (-1)\n    // >>> stringToLong(\"12345\")\n    // (-1)\n    // >>> stringToLong(\"\
    1a\")\n    // (-1)\n    // >>> stringToLong(\"1a1\")\n    // (11)\n    public\
    \ static long stringToLong(string s) {\n        if (s.Length == 0) {\n       \
    \     return 0;\n        }\n        s = s.ToLower();\n        int i = 0;\n   \
    \     long result = 0;\n        while (i < s.Length && s[i] >= '0' && s[i] <=\
    \ '9') {\n            result = result * 10 + (s[i] - '0');\n            i++;\n\
    \        }\n        if (i == s.Length) {\n            return result;\n       \
    \ }\n        return -1;\n    }\n\n    // Convert the string s to an integer and\
    \ return it.\n    // If s is empty, return 0.\n    // If s is not a valid", " \
    \       string result = \"\";\n        while (shift > 0) {\n            result\
    \ = (char)(x % 10 + 48) + result;\n            x /= 10;\n            shift--;\n\
    \        }\n        while (shift < 0) {\n            result = (char)(x % 10 +\
    \ 48) + result;\n            x /= 10;\n            shift++;\n        }\n     \
    \   return result;", "        long result = x;\n        for (long i = 0; i < shift;\
    \ i++) {\n            result = (result * 10) + (x % 10);\n            x /= 10;\n\
    \        }\n        return (result == 0) ? \"\" : ((result < 0) ? (\"-\" + String.Join(\"\
    \", Array.Create(Math.Abs(result), (char) ('0')))) : String.Join(\"\", Array.Create(result,\
    \ (char) ('0'))));", "        if (shift > x)\n            return Reverse(x);\n\
    \        string result = \"\";\n        while (shift > 0) {\n            result\
    \ = (char)((int)x % 10 + 48) + result;\n            x /= 10;\n            shift--;\n\
    \        }\n        return result;\n    }\n\n    // Reverse the digits of the\
    \ integer x and return the result as a string.\n    // >>> Reverse(123)\n    //\
    \ (\"321\")\n    // >>> Reverse(12345)\n    // (\"54321\")\n    public static\
    \ string Reverse(long x) {\n        string result = \"\";\n        while (x >\
    \ 0) {\n            result = (char)((int)x % 10 + 48) + result;\n            x\
    \ /= 10;\n        }\n        return result;\n    }\n\n    // Convert the string\
    \ s to a long and return it.\n    // If s is invalid, return 0.\n    // >>> stringToLong(\"\
    123\")\n    // (123)\n    // >>> stringToLong(\"abc\")\n    // (0)\n    // >>>\
    \ stringToLong(\"5432\")\n    // (5432)\n    public static long stringToLong(string\
    \ s) {\n        long result = 0;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            char c = s[i];\n            if (c < '0' || c > '9')\n           \
    \     return result;\n            result = result * 10 + (c - '0');\n        }\n\
    \        return result;\n    }\n\n    // Convert the string s to an integer and\
    \ return it.\n    // If s is invalid, return 0.\n    // >>> stringToInt(\"123\"\
    )\n    // (123)\n    // >>> stringToInt(\"abc\")\n    // (0)\n    // >>> stringToInt(\"\
    5432\")\n    // (5432)\n    public static int stringToInt(string s) {\n      \
    \  int result = 0;\n        for (int i = 0; i < s.Length; i++) {\n           \
    \ char c = s[i];\n            if (c < '0' || c > '9')\n                return\
    \ result;\n            result = result * 10 + (c - '0');\n        }\n", "    \
    \    if (shift > x) {\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        }\n        if (shift == 0) {\n            return ToString(x);\n     \
    \   }\n        string result = \"\";\n        while (shift > 0) {\n          \
    \  result = ToString(x % 10) + result;\n            x /= 10;\n            shift--;\n\
    \        }\n        while (shift < 0) {\n            result = ToString(x % 10)\
    \ + result;\n            x /= 10;\n            shift++;\n        }\n        return\
    \ result;\n    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n \
    \   // >>> CircularShift((12L), (2L))\n    // (\"12\")\n    public static string\
    \ CircularShift(long x, int shift) {\n        if (shift > x) {\n            return\
    \ String.Join(\"\", Reverse(ToString(x)));\n        }\n        if (shift == 0)\
    \ {\n            return ToString(x);\n        }\n        string result = \"\"\
    ;\n        while (shift > 0) {\n            result = ToString(x % 10) + result;\n\
    \            x /= 10;\n            shift--;\n        }\n        while (shift <\
    \ 0) {\n            result = ToString(x % 10) + result;\n            x /= 10;\n\
    \            shift++;\n        }\n        return result;\n    }\n\n    // >>>\
    \ CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(int x, int shift)\
    \ {\n        if (shift > x) {\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        }\n        if (shift == 0) {\n            return ToString(x);\n     \
    \   }\n        string result = \"\";\n        while (shift > 0) {\n          \
    \  result = ToString(x % 10) + result;\n            x /= 10;\n            shift--;\n\
    \        }\n        while (shift < 0) {\n            result = ToString(x % 10)\
    \ + result;\n            x /=", "        if (shift > x)\n            return Reverse(x);\n\
    \        if (shift == 0)\n            return ToString(x);\n        if (shift <\
    \ 0)\n            return Reverse(x);\n        long n = x;\n        long m = 1;\n\
    \        long result = 0;\n        while (m < shift) {\n            result = result\
    \ + n;\n            n = n / 10;\n            m = m + 1;\n        }\n        result\
    \ = result + n;\n        return ToString(result);", "        string result = \"\
    \";\n        while (shift > 0) {\n            result = (char)(x % 10 + 48) + result;\n\
    \            x = x / 10;\n            shift--;\n        }\n        while (shift\
    \ < 0) {\n            result = (char)(x % 10 + 48) + result;\n            x =\
    \ x / 10;\n            shift++;\n        }\n        return result;", "       \
    \ if (shift > x)\n            return String.Join(\"\", Reverse(Array.ConvertAll(x,\
    \ (d) => (d + shift).ToString())));\n        else\n            return String.Join(\"\
    \", Array.ConvertAll(x, (d) => (d + shift).ToString()));", "        if (shift\
    \ > x)\n            return Reverse(x);\n        if (shift == 0)\n            return\
    \ Long.ToString(x);\n        StringBuilder sb = new StringBuilder();\n       \
    \ while (shift > 0) {\n            sb.Append(Long.ToString(x % 10));\n       \
    \     x /= 10;\n            shift--;\n        }\n        sb.Append(Long.ToString(x));\n\
    \        return sb.ToString();\n    }\n\n    // Reverse the digits of the integer\
    \ x and return the result as a string.\n    // >>> Reverse(123)\n    // (\"321\"\
    )\n    // >>> Reverse(12345)\n    // (\"54321\")\n    public static string Reverse(long\
    \ x) {\n        StringBuilder sb = new StringBuilder();\n        while (x > 0)\
    \ {\n            sb.Append(Long.ToString(x % 10));\n            x /= 10;\n   \
    \     }\n        return sb.ToString();\n    }\n\n    // Compute the circular shift\
    \ of the digits of the integer x, shift the digits\n    // right by shift and\
    \ return the result as a string.\n    // If shift > number of digits, return digits\
    \ reversed.\n    // >>> CircularShiftRight((12L), (1L))\n    // (\"21\")\n   \
    \ // >>> CircularShiftRight((12L), (2L))\n    // (\"32\")\n    public static string\
    \ CircularShiftRight(long x, long shift) {\n        if (shift > x)\n         \
    \   return Reverse(x);\n        if (shift == 0)\n            return Long.ToString(x);\n\
    \        StringBuilder sb = new StringBuilder();\n        while (shift > 0) {\n\
    \            sb.Append(Long.ToString(x % 10));\n            x /= 10;\n       \
    \     shift--;\n        }\n        sb.Append(Long.ToString(x));\n        return\
    \ sb.ToString();\n    }\n\n    // Compute the circular shift of the digits of\
    \ the integer x, shift the digits\n    // right by shift and return the result\
    \ as a string.\n    // If shift > number of digits, return digits reversed.\n\
    \    // >>> CircularShiftRight2((12L), (1L))\n    //", "        long result =\
    \ 0;\n        for (int i = 0; i < shift; i++) {\n            result = result *\
    \ 10 + x % 10;\n            x /= 10;\n        }\n        return result.ToString();",
  "        if (shift > x)\n            return String.Join(\"\", Reverse(Array.ConvertAll(x,\
    \ Convert.ToChar)));\n        else\n            return String.Join(\"\", Array.ConvertAll(x,\
    \ Convert.ToChar).Take((int)shift).Reverse());", "        string result = \"\"\
    ;\n        while (shift > 0) {\n            result = (char)(x % 10 + 48) + result;\n\
    \            x /= 10;\n            shift--;\n        }\n        while (shift <\
    \ 0) {\n            result = (char)(x % 10 + 48) + result;\n            x /= 10;\n\
    \            shift++;\n        }\n        return result;", "        if (shift\
    \ > x)\n            return String.Join(\"\", Reverse(ToString(x)));\n        else\n\
    \            return String.Join(\"\", Reverse(ToString(x))).Substring(shift);",
  "        string result = \"\";\n        while (shift > 0) {\n            result\
    \ = (char)(x % 10 + 48) + result;\n            x /= 10;\n            shift--;\n\
    \        }\n        while (shift < 0) {\n            result = (char)(x % 10 +\
    \ 48) + result;\n            x /= 10;\n            shift++;\n        }\n     \
    \   return result;", "        if (shift > x)\n            return Reverse(x);\n\
    \        long result = 0;\n        for (int i = 0; i < shift; i++)\n         \
    \   result = result * 10 + x % 10;\n        return ToString(result);\n    }\n\n\
    \    // Reverse the digits of the integer x and return the result as a string.\n\
    \    // >>> Reverse(12L)\n    // (\"21\")\n    public static string Reverse(long\
    \ x) {\n        return ToString(x).Reverse();\n    }\n\n    // Convert the integer\
    \ x to a string and return the result as a string.\n    // >>> ToString(12L)\n\
    \    // (\"12\")\n    public static string ToString(long x) {\n        return\
    \ ToString(x, 10);\n    }\n\n    // Convert the integer x to a string and return\
    \ the result as a string.\n    // The parameter radix specifies the radix of the\
    \ resulting string.\n    // >>> ToString(12L, 2)\n    // (\"12\")\n    public\
    \ static string ToString(long x, int radix) {\n        if (x < 0)\n          \
    \  return \"-\" + Reverse(x * -1, radix);\n        return Reverse(x, radix);\n\
    \    }\n\n    // Convert the integer x to a string and return the result as a\
    \ string.\n    // The parameter radix specifies the radix of the resulting string.\n\
    \    // >>> ToString(12L, 2)\n    // (\"12\")\n    public static string ToString(long\
    \ x, int radix) {\n        if (x < 0)\n            return \"-\" + Reverse(x *\
    \ -1, radix);\n        return Reverse(x, radix);\n    }\n\n    // Reverse the\
    \ digits of the integer x and return the result as an integer.\n    // >>> Reverse(12L)\n\
    \    // (21)\n    public static long Reverse(long x) {\n        return Reverse(x,\
    \ 10);\n    }\n\n    // Reverse the digits of the integer x and return the result\
    \ as an integer.\n    // The parameter radix specifies the radix of the resulting\
    \ string.\n    // >>> Reverse(12L, 2)\n    // (12)\n    public static long Reverse(long\
    \ x, int radix) {\n        long", "        long result = x;\n        for (int\
    \ i = 0; i < shift; i++) {\n            result = (result * 10) + (x % 10);\n \
    \           x /= 10;\n        }\n        if (x > 0) {\n            result = (result\
    \ * 10) + (x % 10);\n        }\n        return result.ToString();", "        long\
    \ result = x;\n        for (int i = 0; i < shift; i++) {\n            result =\
    \ (result * 10) + (result % 10);\n        }\n        return result.ToString();",
  "        long result = 0;\n        for (int i = 0; i < shift; i++) {\n         \
    \   result = (result * 10) + (x % 10);\n            x /= 10;\n        }\n    \
    \    result = (result * 10) + (x % 10);\n        return (result < 0) ? \"-\" +\
    \ Long.ToString(result) : Long.ToString(result);", "        long result = 0;\n\
    \        for (int i = 0; i < shift; i++) {\n            result = (result * 10)\
    \ + (x % 10);\n            x /= 10;\n        }\n        result = (result * 10)\
    \ + (x % 10);\n        return (result == 0) ? \"0\" : \"\" + result;", "     \
    \   long result = 0;\n        for (int i = 0; i < shift; i++) {\n            result\
    \ = (result * 10) + (x % 10);\n            x /= 10;\n        }\n        return\
    \ (result == 0) ? \"\" : (result < 10) ? \"0\" + result.ToString() : result.ToString();",
  "        if (shift > x) {\n            return String.Join(\"\", Reverse(Array.ConvertAll(x,\
    \ typeof(long))));\n        }\n        return String.Join(\"\", Array.ConvertAll(x,\
    \ typeof(long))).Substring(shift);", "        long result = 0;\n        for (int\
    \ i = 0; i < shift; i++) {\n            result = (result * 10) + (x % 10);\n \
    \           x /= 10;\n        }\n        return result.ToString();", "       \
    \ long result = 0;\n        for (int i = 0; i < shift; i++) {\n            result\
    \ = (result * 10) + (x % 10);\n            x /= 10;\n        }\n        return\
    \ (result == 0) ? \"\" : (result < 10) ? \"0\" + result.ToString() : result.ToString();",
  "        string result = \"\";\n        long temp = x;\n        while (shift > 0)\
    \ {\n            result = (temp % 10) + result;\n            temp = temp / 10;\n\
    \            shift--;\n        }\n        while (shift < 0) {\n            result\
    \ = (temp % 10) + result;\n            temp = temp / 10;\n            shift++;\n\
    \        }\n        return result;", "        string result = \"\";\n        while\
    \ (shift > 0) {\n            result = (char)(x % 10 + 48) + result;\n        \
    \    x = x / 10;\n            shift--;\n        }\n        while (shift < 0) {\n\
    \            result = (char)(x % 10 + 48) + result;\n            x = x / 10;\n\
    \            shift++;\n        }\n        return result;", "        long result\
    \ = 0;\n        for (int i = 0; i < shift; i++) {\n            result = (result\
    \ * 10) + (x % 10);\n            x /= 10;\n        }\n        result = (result\
    \ * 10) + (x % 10);\n        return result.ToString();", "        long result\
    \ = x;\n        for (int i = 0; i < shift; i++) {\n            result = (result\
    \ * 10) + (x % 10);\n            x /= 10;\n        }\n        if (shift > 0) {\n\
    \            result = (result * 10) + (x % 10);\n        }\n        return result.ToString();\n\
    \    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(long x, int shift)\
    \ {\n        return CircularShift(x, shift);\n    }\n\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(int x, int shift) {\n        return\
    \ CircularShift((long) x, shift);\n    }\n\n    // >>> CircularShift((12L), (1L))\n\
    \    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\")\n   \
    \ public static string CircularShift(int x, long shift) {\n        return CircularShift((long)\
    \ x, shift);\n    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n\
    \    // >>> CircularShift((12L), (2L))\n    // (\"12\")\n    public static string\
    \ CircularShift(long x, long shift) {\n        return CircularShift(x, (int) shift);\n\
    \    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(long x, int shift)\
    \ {\n        return CircularShift(x, (long) shift);\n    }\n\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long shift)", "        if (shift\
    \ > x)\n            return String.Join(\"\", Reverse(ToString(x)));\n        else\n\
    \            return String.Join(\"\", Reverse(ToString(x))).Substring(shift);",
  "        long[] digits = new long[Long.bitCount(x)];\n        for (int i = 0; i\
    \ < digits.Length; i++) {\n            digits[i] = (x >> i) & 1;\n        }\n\
    \        shift = Math.abs(shift);\n        if (shift > digits.Length) {\n    \
    \        shift = digits.Length;\n        }\n        for (int i = 0; i < shift;\
    \ i++) {\n            int j = (digits.Length - 1 - i) % digits.Length;\n     \
    \       int k = (digits.Length - 1 - i) / digits.Length;\n            digits[j]\
    \ = digits[j] ^ digits[k];\n            digits[k] = digits[j] ^ digits[k];\n \
    \           digits[j] = digits[j] ^ digits[k];\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < digits.Length; i++) {\n\
    \            sb.Append(digits[i]);\n        }\n        return sb.ToString();",
  "        long result = 0;\n        for (int i = 0; i < shift; i++) {\n         \
    \   result = (result * 10) + (x % 10);\n            x /= 10;\n        }\n    \
    \    return result.ToString();", "        string result = \"\";\n        while\
    \ (shift > 0) {\n            result = (char)(x % 10 + 48) + result;\n        \
    \    x /= 10;\n            shift--;\n        }\n        while (shift < 0) {\n\
    \            result = (char)(x % 10 + 48) + result;\n            x /= 10;\n  \
    \          shift++;\n        }\n        return result;", "        long result\
    \ = 0;\n        for (int i = 0; i < shift; i++) {\n            result = (result\
    \ * 10) + (x % 10);\n            x /= 10;\n        }\n        result = (result\
    \ * 10) + (x % 10);\n        return result.ToString();", "        if (shift >\
    \ x)\n            return String.Join(\"\", Reverse(ToString(x)));\n        else\n\
    \            return String.Join(\"\", Reverse(ToString(x))).Substring(shift);",
  "        long result = 0;\n        for (int i = 0; i < shift; i++) {\n         \
    \   result = (result * 10) + (x % 10);\n            x /= 10;\n        }\n    \
    \    return (result == 0) ? \"\" : ((result < 10) ? \"0\" + result.ToString()\
    \ : result.ToString());", "        string result = \"\";\n        while (shift\
    \ > 0) {\n            result = (char)(x % 10 + 48) + result;\n            x /=\
    \ 10;\n            shift--;\n        }\n        while (shift < 0) {\n        \
    \    result = (char)(x % 10 + 48) + result;\n            x /= 10;\n          \
    \  shift++;\n        }\n        return result;", "        if (shift > x) {\n \
    \           return String.Join(\"\", Enumerable.Range(0, x).Select(i => (i + shift)\
    \ % 10).ToArray());\n        }\n        else {\n            return String.Join(\"\
    \", Enumerable.Range(0, shift).Select(i => (i + x) % 10).ToArray());\n       \
    \ }", "        long[] digits = new long[Long.bitCount(x)];\n        for (int i\
    \ = 0; i < digits.Length; i++) {\n            digits[i] = (x >> i) & 1;\n    \
    \    }\n        for (int i = 0; i < shift; i++) {\n            for (int j = 0;\
    \ j < digits.Length; j++) {\n                digits[j] = (digits[j] << 1) | (digits[(j\
    \ + 1) % digits.Length] >> i & 1);\n            }\n        }\n        return String.Join(\"\
    \", digits);", "        if (shift > x)\n            return String.Join(\"\", Reverse(Array.ConvertAll(x,\
    \ Convert.ToChar)));\n        return String.Join(\"\", Array.ConvertAll(x, Convert.ToChar).Select(x\
    \ => (char)((int)x + shift)));", "        string result = \"\";\n        while\
    \ (shift > 0) {\n            result = (char)((int)x % 10 + 48) + result;\n   \
    \         x = x / 10;\n            shift--;\n        }\n        while (shift <\
    \ 0) {\n            result = (char)((int)x % 10 + 48) + result;\n            x\
    \ = x / 10;\n            shift++;\n        }\n        return result;", "     \
    \   if (shift > x)\n            return Reverse(x);\n        long result = 0;\n\
    \        for (int i = 0; i < shift; i++) {\n            result = (result * 10)\
    \ + (x % 10);\n            x /= 10;\n        }\n        result = (result * 10)\
    \ + (x % 10);\n        return result.ToString();\n    }\n\n    // Reverse the\
    \ digits of the integer x and return the result as a string.\n    // >>> Reverse((12L))\n\
    \    // (\"21\")\n    public static string Reverse(long x) {\n        long result\
    \ = 0;\n        for (int i = 0; i < x.Length; i++) {\n            result = (result\
    \ * 10) + (x % 10);\n            x /= 10;\n        }\n        return result.ToString();\n\
    \    }\n\n    // Convert the string s to a long and return it.\n    // If s is\
    \ invalid, return 0.\n    // >>> ConvertToLong(\"123\")\n    // 123\n    // >>>\
    \ ConvertToLong(\"abc\")\n    // 0\n    public static long ConvertToLong(string\
    \ s) {\n        long result = 0;\n        for (int i = 0; i < s.Length; i++) {\n\
    \            char c = s[i];\n            if (c < '0' || c > '9')\n           \
    \     return 0;\n            result = (result * 10) + (c - '0');\n        }\n\
    \        return result;\n    }\n\n    // Convert the string s to an integer and\
    \ return it.\n    // If s is invalid, return 0.\n    // >>> ConvertToInteger(\"\
    123\")\n    // 123\n    // >>> ConvertToInteger(\"abc\")\n    // 0\n    public\
    \ static int ConvertToInteger(string s) {\n        int result = 0;\n        for\
    \ (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n            if\
    \ (c < '0' || c > '9')\n                return 0;\n            result = (result\
    \ * 10) + (c - '0');\n        }\n        return result;\n    }\n\n    // Convert\
    \ the string s to a double and return it.\n    // If s is invalid, return 0.",
  "        long result = 0;\n        for (int i = 0; i < shift; i++) {\n         \
    \   result = (result * 10) + (x % 10);\n            x /= 10;\n        }\n    \
    \    return (result == 0) ? \"\" : ((result < 10) ? \"0\" + result.ToString()\
    \ : result.ToString());", "        long result = 0;\n        for (int i = 0; i\
    \ < shift; i++) {\n            result = (result * 10) + (x % 10);\n          \
    \  x /= 10;\n        }\n        result = (result * 10) + (x % 10);\n        return\
    \ result.ToString();", "        long[] digits = new long[Long.bitCount(x)];\n\
    \        for (int i = 0; i < digits.Length; i++) {\n            digits[i] = x\
    \ % 10;\n            x /= 10;\n        }\n        if (shift > digits.Length)\n\
    \            return String.Join(\"\", Reverse(digits));\n        else {\n    \
    \        for (int i = 0; i < shift; i++) {\n                int j = i % digits.Length;\n\
    \                int k = (digits.Length - 1 - i) % digits.Length;\n          \
    \      digits[j] = digits[k];\n            }\n            return String.Join(\"\
    \", digits);\n        }", "        if (shift > x) return \"\";\n        if (shift\
    \ == 0) return String.Format(\"{0}\", x);\n        if (shift == 1) return String.Format(\"\
    {0}\", x);\n        if (shift == 2) return String.Format(\"{0}\", x);\n      \
    \  if (shift == 3) return String.Format(\"{0}\", x);\n        if (shift == 4)\
    \ return String.Format(\"{0}\", x);\n        if (shift == 5) return String.Format(\"\
    {0}\", x);\n        if (shift == 6) return String.Format(\"{0}\", x);\n      \
    \  if (shift == 7) return String.Format(\"{0}\", x);\n        if (shift == 8)\
    \ return String.Format(\"{0}\", x);\n        if (shift == 9) return String.Format(\"\
    {0}\", x);\n        if (shift == 10) return String.Format(\"{0}\", x);\n     \
    \   if (shift == 11) return String.Format(\"{0}\", x);\n        if (shift == 12)\
    \ return String.Format(\"{0}\", x);\n        if (shift == 13) return String.Format(\"\
    {0}\", x);\n        if (shift == 14) return String.Format(\"{0}\", x);\n     \
    \   if (shift == 15) return String.Format(\"{0}\", x);\n        if (shift == 16)\
    \ return String.Format(\"{0}\", x);\n        if (shift == 17) return String.Format(\"\
    {0}\", x);\n        if (shift == 18) return String.Format(\"{0}\", x);\n     \
    \   if (shift == 19) return String.Format(\"{0}\", x);\n        if (shift == 20)\
    \ return String.Format(\"{0}\", x);\n        if (shift == 21) return String.Format(\"\
    {0}\", x);\n        if (shift == 22) return String.Format(\"{0}\", x);\n     \
    \   if (shift == 23) return String.Format(\"{0}\", x);\n        if (shift == 24)\
    \ return String.Format(\"{0}\", x);\n        if (shift == 25) return String.Format(\"\
    {0}\", x);\n        if (shift == 26)", "        if (shift > x)\n            return\
    \ Reverse(x);\n        long result = 0;\n        for (int i = 0; i < shift; i++)\n\
    \            result = (result * 10) + (x % 10);\n        return (new string(ToCharArray(result)));\n\
    \    }\n\n    // Reverse the digits of the integer x and return the result as\
    \ a string.\n    // >>> Reverse(123)\n    // (\"321\")\n    public static string\
    \ Reverse(long x) {\n        long result = 0;\n        for (int i = 0; i < x.Length;\
    \ i++)\n            result = (result * 10) + (x % 10);\n        return (new string(ToCharArray(result)));\n\
    \    }\n\n    // Convert the integer x to a string and return the result as a\
    \ string.\n    // >>> ToString(123)\n    // (\"123\")\n    public static string\
    \ ToString(long x) {\n        return (new string(ToCharArray(x)));\n    }\n\n\
    \    // Convert the integer x to a string and return the result as a string.\n\
    \    // >>> ToString(123L)\n    // (\"123\")\n    public static string ToString(long\
    \ x, int radix) {\n        return (new string(ToCharArray(x, radix)));\n    }\n\
    \n    // Convert the integer x to a string and return the result as a string.\n\
    \    // >>> ToString(123L, 2)\n    // (\"123\")\n    public static string ToString(long\
    \ x, int radix, int precision) {\n        if (precision < 0)\n            throw\
    \ new ArgumentOutOfRangeException(\"precision\");\n        if (radix < 2 || radix\
    \ > 36)\n            throw new ArgumentOutOfRangeException(\"radix\");\n     \
    \   if (precision >= radix)\n            throw new ArgumentOutOfRangeException(\"\
    precision\");\n        long result = 0;\n        for (int i = 0; i < precision;\
    \ i++)\n            result = (result * radix) + (x % radix);\n        return (new\
    \ string(ToCharArray(result)));\n    }\n\n    // Convert the integer x to a string\
    \ and return the result as a string.\n    // >>> ToString(123L, 2,", "       \
    \ long result = 0;\n        for (int i = 0; i < shift; i++) {\n            result\
    \ = (result * 10) + (x % 10);\n            x /= 10;\n        }\n        return\
    \ (result == 0) ? \"\" : ((result < 10) ? \"0\" + result.ToString() : result.ToString());",
  "        if (shift > x)\n            return String.Join(\"\", Reverse(Array.ConvertAll(x,\
    \ Convert.ToChar)));\n        else {\n            long y = x;\n            long\
    \ z = 0;\n            while (shift > 0) {\n                z = y;\n          \
    \      y = y * 10 + z % 10;\n                shift--;\n            }\n       \
    \     return String.Join(\"\", Array.ConvertAll(y, Convert.ToChar));\n       \
    \ }", "        long result = x;\n        for (long i = 0; i < shift; i++) {\n\
    \            result = (result * 10) + (x % 10);\n            x /= 10;\n      \
    \  }\n        if (result < 0)\n            return \"-\" + Long.ToString(Math.Abs(result));\n\
    \        return Long.ToString(Math.Abs(result));", "        long[] digits = new\
    \ long[Long.bitCount(x)];\n        for (int i = 0; i < digits.Length; i++) {\n\
    \            digits[i] = (x >> i) & 1;\n        }\n        for (int i = 0; i <\
    \ shift; i++) {\n            for (int j = 0; j < digits.Length; j++) {\n     \
    \           digits[j] = (digits[j] << 1) | (digits[(j + 1) % digits.Length]);\n\
    \            }\n        }\n        return String.Join(\"\", digits);", "     \
    \   long result = 0;\n        for (int i = 0; i < shift; i++) {\n            result\
    \ = (result * 10) + (x % 10);\n            x /= 10;\n        }\n        return\
    \ (result == 0) ? \"\" : (result < 10) ? \"0\" + result.ToString() : result.ToString();",
  "        long result = 0;\n        for (int i = 0; i < shift; i++) {\n         \
    \   result = (result * 10) + (x % 10);\n            x /= 10;\n        }\n    \
    \    result = (result * 10) + (x % 10);\n        return result.ToString();", " \
    \       long result = 0;\n        long n = shift;\n        while (n > 0) {\n \
    \           result = (result * 10) + (x % 10);\n            x /= 10;\n       \
    \     n--;\n        }\n        while (n < 0) {\n            result = (result *\
    \ 10) + (x % 10);\n            x /= 10;\n            n++;\n        }\n       \
    \ return result.ToString();", "        if (shift < 0) {\n            throw new\
    \ ArgumentOutOfRangeException(\"shift\");\n        }\n        if (shift > 10)\
    \ {\n            throw new ArgumentOutOfRangeException(\"shift\");\n        }\n\
    \        string result = \"\";\n        while (shift > 0) {\n            result\
    \ = (char)(x % 10 + 48) + result;\n            x /= 10;\n            shift--;\n\
    \        }\n        while (shift < 0) {\n            result = (char)(x % 10 +\
    \ 48) + result;\n            x /= 10;\n            shift++;\n        }\n     \
    \   return result;", "        // Write your code here\n        if (shift > x)\
    \ {\n            return String.Join(\"\", Reverse(Array.ConvertAll(x, Convert.ToString)));\n\
    \        }\n        else {\n            return String.Join(\"\", Array.ConvertAll(x,\
    \ Convert.ToString).Select(i => (i + shift) % 10));\n        }", "        long[]\
    \ digits = new long[Long.bitCount(x)];\n        for (int i = 0; i < digits.Length;\
    \ i++) {\n            digits[i] = (x >> i) & 1;\n        }\n        for (int i\
    \ = 0; i < shift; i++) {\n            for (int j = 0; j < digits.Length; j++)\
    \ {\n                digits[j] = (digits[j] << 1) | (digits[(j + 1) % digits.Length]\
    \ >> i & 1);\n            }\n        }\n        return String.Join(\"\", digits);",
  "        if (shift > x)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift < 0)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 0)\n            return ToString(x);\n        long result\
    \ = 0;\n        for (int i = 0; i < shift; i++)\n            result = (result\
    \ << 1) + (x & 1);\n        return ToString(result);", "        string result\
    \ = \"\";\n        while (shift > 0) {\n            result = (char)(x % 10 + 48)\
    \ + result;\n            x /= 10;\n            shift--;\n        }\n        while\
    \ (shift < 0) {\n            result = (char)(x % 10 + 48) + result;\n        \
    \    x /= 10;\n            shift++;\n        }\n        return result;", "   \
    \     if (shift > x)\n            return Reverse(x);\n        StringBuilder sb\
    \ = new StringBuilder();\n        while (shift > 0) {\n            sb.Append(x\
    \ % 10);\n            x /= 10;\n            shift--;\n        }\n        sb.Append(x);\n\
    \        return sb.ToString();\n    }\n\n    // Reverse the digits of the integer\
    \ x and return the result as a string.\n    // >>> Reverse(123)\n    // (\"321\"\
    )\n    // >>> Reverse(1234)\n    // (\"4321\")\n    public static string Reverse(long\
    \ x) {\n        StringBuilder sb = new StringBuilder();\n        while (x > 0)\
    \ {\n            sb.Append(x % 10);\n            x /= 10;\n        }\n       \
    \ return sb.ToString();\n    }\n\n    // Convert the string s to a long and return\
    \ the result.\n    // If s is empty, return 0.\n    // If s is not a valid representation\
    \ of a long, return -1.\n    // >>> stringToLong(\"123\")\n    // (123)\n    //\
    \ >>> stringToLong(\"abc\")\n    // (-1)\n    // >>> stringToLong(\"0\")\n   \
    \ // (0)\n    // >>> stringToLong(\"-1\")\n    // (-1)\n    public static long\
    \ stringToLong(string s) {\n        if (s.Length == 0)\n            return 0;\n\
    \        long result = 0;\n        for (int i = 0; i < s.Length; i++) {\n    \
    \        char c = s[i];\n            if (c < '0' || c > '9')\n               \
    \ return -1;\n            result = result * 10 + (c - '0');\n        }\n     \
    \   return result;\n    }\n\n    // Convert the string s to an integer and return\
    \ the result.\n    // If s is empty, return 0.\n    // If s is not a valid representation\
    \ of an integer, return -1.\n    // >>> stringToInteger(\"123\")\n    // (123)\n\
    \    // >>> stringToInteger(\"abc\")\n    // (-1)\n    // >>> stringToInteger(\"\
    0\")\n    // (0)\n    // >>> stringToInteger(\"-1", "        long result = 0;\n\
    \        for (int i = 0; i < shift; i++) {\n            result = (result * 10)\
    \ + (x % 10);\n            x /= 10;\n        }\n        result = (result * 10)\
    \ + (x % 10);\n        return result.ToString();", "        long result = 0;\n\
    \        for (int i = 0; i < shift; i++) {\n            result = (result * 10)\
    \ + (x % 10);\n            x /= 10;\n        }\n        result = (result * 10)\
    \ + (x % 10);\n        return result.ToString();", "        long result = x;\n\
    \        for (long i = 0; i < shift; i++) {\n            result = (result * 10)\
    \ + (x % 10);\n            x /= 10;\n        }\n        if (result < 0) {\n  \
    \          result = -result;\n        }\n        return result.ToString();\n \
    \   }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(long x, int shift)\
    \ {\n        long result = x;\n        for (int i = 0; i < shift; i++) {\n   \
    \         result = (result * 10) + (x % 10);\n            x /= 10;\n        }\n\
    \        if (result < 0) {\n            result = -result;\n        }\n       \
    \ return result.ToString();\n    }\n\n    // >>> CircularShift((12L), (1L))\n\
    \    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\")\n   \
    \ public static string CircularShift(int x, int shift) {\n        int result =\
    \ x;\n        for (int i = 0; i < shift; i++) {\n            result = (result\
    \ * 10) + (x % 10);\n            x /= 10;\n        }\n        if (result < 0)\
    \ {\n            result = -result;\n        }\n        return result.ToString();\n\
    \    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(int x, long shift)\
    \ {\n        long result = x;\n        for (long i = 0; i < shift; i++) {\n  \
    \          result = (result * 10) + (x % 10);\n            x /= 10;\n        }\n\
    \        if (result < 0) {\n            result = -result;\n        }\n       \
    \ return result.ToString();\n    }\n\n    // >>> CircularShift((12L), (1L))\n\
    \    // (\"21\")\n    // >>> Circular", "        long result = x;\n        for\
    \ (long i = 0; i < shift; i++) {\n            result = (result * 10) + (result\
    \ % 10);\n        }\n        return result.ToString();", "        long result\
    \ = 0;\n        for (int i = 0; i < shift; i++) {\n            result = (result\
    \ * 10) + (x % 10);\n            x /= 10;\n        }\n        return (result ==\
    \ 0) ? \"\" : (result < 10) ? \"0\" + result.ToString() : result.ToString();",
  "        string result = \"\";\n        while (shift > 0) {\n            result\
    \ = (char)(x % 10 + 48) + result;\n            x = x / 10;\n            shift--;\n\
    \        }\n        while (shift < 0) {\n            result = (char)(x % 10 +\
    \ 48) + result;\n            x = x / 10;\n            shift++;\n        }\n  \
    \      return result;", "        if (shift > x) return \"\";\n        if (shift\
    \ == 0) return Long.toString(x);\n        long result = 0;\n        for (int i\
    \ = 0; i < shift; i++) {\n            result = result * 10 + x % 10;\n       \
    \     x /= 10;\n        }\n        return Long.toString(result) + Long.toString(x);",
  "        long result = 0;\n        for (int i = 0; i < shift; i++) {\n         \
    \   result = (result * 10) + (x % 10);\n            x /= 10;\n        }\n    \
    \    return result.ToString();", "        if (shift > x)\n            return String.Join(\"\
    \", Reverse(ToString(x)));\n        if (shift == 0)\n            return ToString(x);\n\
    \        if (shift < 0)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 1)\n            return ToString(x);\n        if (shift ==\
    \ 2)\n            return CircularShift(x, 1);\n        if (shift == 3)\n     \
    \       return CircularShift(x, 2);\n        if (shift == 4)\n            return\
    \ CircularShift(x, 3);\n        if (shift == 5)\n            return CircularShift(x,\
    \ 4);\n        if (shift == 6)\n            return CircularShift(x, 5);\n    \
    \    if (shift == 7)\n            return CircularShift(x, 6);\n        if (shift\
    \ == 8)\n            return CircularShift(x, 7);\n        if (shift == 9)\n  \
    \          return CircularShift(x, 8);\n        if (shift == 10)\n           \
    \ return CircularShift(x, 9);\n        if (shift == 11)\n            return CircularShift(x,\
    \ 10);\n        if (shift == 12)\n            return CircularShift(x, 11);\n \
    \       if (shift == 13)\n            return CircularShift(x, 12);\n        if\
    \ (shift == 14)\n            return CircularShift(x, 13);\n        if (shift ==\
    \ 15)\n            return CircularShift(x, 14);\n        if (shift == 16)\n  \
    \          return CircularShift(x, 15);\n        if (shift == 17)\n          \
    \  return CircularShift(x, 16);\n        if (shift == 18)\n            return\
    \ CircularShift(x, 17);\n        if (shift == 19)\n            return CircularShift(x,\
    \ 18);\n        if (shift == 20)\n            return CircularShift(x, 19);\n \
    \       if (shift == 21)\n            return CircularShift(x, 20);\n        if\
    \ (shift == 22)\n            return CircularShift(x, 21);\n        if (shift ==\
    \ 23)\n            return CircularShift(x, 22);\n        if (shift == 24)\n  \
    \          return CircularShift(", "        long result = x;\n        for (long\
    \ i = 0; i < shift; i++) {\n            result = (result * 10) + (result % 10);\n\
    \        }\n        return (result == 0) ? \"\" : (result < 10) ? \"0\" + result.ToString()\
    \ : result.ToString();", "        if (shift < 0)\n            throw new Exception(\"\
    Shift must be a positive integer\");\n        if (shift > 10)\n            throw\
    \ new Exception(\"Shift must be less than 10\");\n        if (x < 0)\n       \
    \     throw new Exception(\"Input must be a positive integer\");\n        if (x\
    \ == 0)\n            return \"0\";\n        string result = \"\";\n        while\
    \ (shift > 0) {\n            result = (char)((x % 10) + 48) + result;\n      \
    \      x /= 10;\n            shift--;\n        }\n        while (shift < 0) {\n\
    \            result = (char)((x % 10) + 48) + result;\n            x /= 10;\n\
    \            shift++;\n        }\n        return result;", "        long result\
    \ = 0;\n        for (int i = 0; i < shift; i++) {\n            result = (result\
    \ * 10) + (x % 10);\n            x /= 10;\n        }\n        return (result ==\
    \ 0) ? \"\" : (result < 10) ? \"0\" + result.ToString() : result.ToString();",
  "        if (shift > x) {\n            return String.Join(\"\", Enumerable.Range(0,\
    \ x).Select(i => (i + shift) % x).ToArray());\n        }\n        else {\n   \
    \         return String.Join(\"\", Enumerable.Range(0, shift).Select(i => (i +\
    \ x) % shift).ToArray());\n        }", "        if (shift > x) {\n           \
    \ return Reverse(x);\n        }\n        string result = \"\";\n        while\
    \ (shift > 0) {\n            result = (char)((int)x % 10 + 48) + result;\n   \
    \         x /= 10;\n            shift--;\n        }\n        return result;\n\
    \    }\n\n    // Reverse the digits of the integer x and return the result as\
    \ a string.\n    // >>> Reverse(123)\n    // (\"321\")\n    // >>> Reverse(12345)\n\
    \    // (\"54321\")\n    public static string Reverse(long x) {\n        string\
    \ result = \"\";\n        while (x > 0) {\n            result = (char)((int)x\
    \ % 10 + 48) + result;\n            x /= 10;\n        }\n        return result;\n\
    \    }\n\n    // Convert the string s to a long and return it.\n    // If s is\
    \ invalid, return 0.\n    // >>> stringToLong(\"123\")\n    // (123)\n    // >>>\
    \ stringToLong(\"abc\")\n    // (0)\n    // >>> stringToLong(\"543210\")\n   \
    \ // (543210)\n    public static long stringToLong(string s) {\n        long result\
    \ = 0;\n        for (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n\
    \            if (c < '0' || c > '9') {\n                return result;\n     \
    \       }\n            result = result * 10 + (c - '0');\n        }\n        return\
    \ result;\n    }\n\n    // Convert the string s to an integer and return it.\n\
    \    // If s is invalid, return 0.\n    // >>> stringToInt(\"123\")\n    // (123)\n\
    \    // >>> stringToInt(\"abc\")\n    // (0)\n    // >>> stringToInt(\"543210\"\
    )\n    // (543210)\n    public static int stringToInt(string s) {\n        return\
    \ (int)stringToLong(s);\n    }\n\n    // Convert the string s to a double and\
    \ return it.\n    // If s is invalid, return 0.0.\n    // >>> stringToDouble(\"\
    123\")\n    // (123.0)", "        if (shift > x)\n            return String.Join(\"\
    \", Reverse(ToString(x)));\n        if (shift == 0)\n            return ToString(x);\n\
    \        if (shift == 1)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 2)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 3)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 4)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 5)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 6)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 7)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 8)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 9)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 10)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 11)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 12)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 13)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 14)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 15)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 16)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 17)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 18)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 19)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 20)\n            return String.Join(\"\", Reverse", "  \
    \      if (shift > x)\n            return Reverse(x);\n        StringBuilder sb\
    \ = new StringBuilder();\n        while (shift > 0) {\n            sb.Append(x\
    \ % 10);\n            x /= 10;\n            shift--;\n        }\n        sb.Append(x);\n\
    \        return sb.ToString();\n    }\n\n    // Reverse the digits of the integer\
    \ x and return the result as a string.\n    // >>> Reverse(123)\n    // (\"321\"\
    )\n    // >>> Reverse(12345)\n    // (\"54321\")\n    public static string Reverse(long\
    \ x) {\n        StringBuilder sb = new StringBuilder();\n        while (x > 0)\
    \ {\n            sb.Append(x % 10);\n            x /= 10;\n        }\n       \
    \ return sb.ToString();\n    }\n\n    // Convert the string s to a long integer\
    \ and return the result.\n    // If s is invalid, return 0.\n    // >>> stringToLong(\"\
    123\")\n    // 123\n    // >>> stringToLong(\"abc\")\n    // 0\n    // >>> stringToLong(\"\
    123abc\")\n    // 123\n    public static long stringToLong(string s) {\n     \
    \   long result = 0;\n        for (int i = 0; i < s.Length; i++) {\n         \
    \   char c = s.Chars[i];\n            if (c < '0' || c > '9')\n              \
    \  return 0;\n            result = result * 10 + (c - '0');\n        }\n     \
    \   return result;\n    }\n\n    // Convert the string s to an integer and return\
    \ the result.\n    // If s is invalid, return 0.\n    // >>> stringToInt(\"123\"\
    )\n    // 123\n    // >>> stringToInt(\"abc\")\n    // 0\n    // >>> stringToInt(\"\
    123abc\")\n    // 123\n    public static int stringToInt(string s) {\n       \
    \ int result = 0;\n        for (int i = 0; i < s.Length; i++) {\n            char\
    \ c = s.Chars[i];\n            if (c < '0' || c > '9')\n                return\
    \ 0;\n            result = result * 10 + (c - '0');", "        if (shift > x)\n\
    \            return Reverse(x);\n        long n = Math.abs(shift);\n        long\
    \ m = Math.abs(x);\n        long r = 0;\n        while (n > 0) {\n           \
    \ r = r * 10 + (m % 10);\n            m = m / 10;\n            n--;\n        }\n\
    \        if (shift < 0)\n            r = r * 10 + (m % 10);\n        return Reverse(r);\n\
    \    }\n\n    // Reverse the digits of the integer x and return the result as\
    \ a string.\n    // >>> Reverse((12L))\n    // (\"21\")\n    // >>> Reverse((123L))\n\
    \    // (\"321\")\n    public static string Reverse(long x) {\n        long n\
    \ = Math.abs(x);\n        long r = 0;\n        while (n > 0) {\n            r\
    \ = r * 10 + (n % 10);\n            n = n / 10;\n        }\n        return Reverse(r);\n\
    \    }\n\n    // Reverse the digits of the integer x and return the result as\
    \ a string.\n    // >>> Reverse((1234L))\n    // (\"4321\")\n    public static\
    \ string Reverse(long x, int n) {\n        long r = 0;\n        while (n > 0)\
    \ {\n            r = r * 10 + (x % 10);\n            x = x / 10;\n           \
    \ n--;\n        }\n        return Reverse(r);\n    }\n\n    // Reverse the digits\
    \ of the integer x and return the result as a string.\n    // >>> Reverse((12345L))\n\
    \    // (\"54321\")\n    public static string Reverse(long x, int n, int m) {\n\
    \        long r = 0;\n        while (n > 0) {\n            r = r * 10 + (x % 10);\n\
    \            x = x / 10;\n            n--;\n        }\n        while (m > 0) {\n\
    \            r = r * 10 + (x % 10);\n            x = x / 10;\n            m--;\n\
    \        }\n        return Reverse(r);\n    }\n\n    // Reverse the digits of\
    \ the integer x and return the result as a string.\n    // >>> Reverse((1234567L))\n",
  "        if (shift > x)\n            return Reverse(x);\n        string result =\
    \ \"\";\n        while (shift > 0) {\n            result = (char)((int)x % 10\
    \ + 48) + result;\n            x /= 10;\n            shift--;\n        }\n   \
    \     while (shift < 0) {\n            result = (char)((int)x % 10 + 48) + result;\n\
    \            x /= 10;\n            shift++;\n        }\n        return result;\n\
    \    }\n\n    // Reverse the digits of the integer x and return the result as\
    \ a string.\n    // >>> Reverse(123)\n    // (\"321\")\n    // >>> Reverse(12345)\n\
    \    // (\"54321\")\n    public static string Reverse(long x) {\n        string\
    \ result = \"\";\n        while (x > 0) {\n            result = (char)((int)x\
    \ % 10 + 48) + result;\n            x /= 10;\n        }\n        return result;\n\
    \    }\n\n    // Convert the string s to a long integer.\n    // Return true if\
    \ the string is a valid integer representation of a long integer.\n    // >>>\
    \ IsInteger(\"123\")\n    // (True)\n    // >>> IsInteger(\"abc\")\n    // (False)\n\
    \    // >>> IsInteger(\"0\")\n    // (True)\n    // >>> IsInteger(\"0x0\")\n \
    \   // (True)\n    // >>> IsInteger(\"0x0x0\")\n    // (False)\n    public static\
    \ bool IsInteger(string s) {\n        if (s.Length == 0)\n            return true;\n\
    \        if (s.Length == 1 && s[0] == '0')\n            return true;\n       \
    \ if (s.Length > 1 && s[0] == '0' && s[1] == 'x')\n            return true;\n\
    \        long n = 0;\n        for (int i = 0; i < s.Length; i++) {\n         \
    \   char c = s[i];\n            if (c >= '0' && c <= '9')\n                n =\
    \ (n * 10) + (c - '0');\n            else\n                return false;\n   \
    \     }\n        return true;\n    }\n\n    // Convert the string s to", "   \
    \     long result = x;\n        for (long i = 0; i < shift; i++) {\n         \
    \   result = (result * 10) + (x % 10);\n            x /= 10;\n        }\n    \
    \    if (result < 0)\n            return \"-\" + (new string(Int64.ToString(Math.Abs(result),\
    \ 10)));\n        return (new string(Int64.ToString(Math.Abs(result), 10)));",
  "        if (shift > x)\n            return String.Join(\"\", Reverse(Array.ConvertAll(x,\
    \ Convert.ToChar)));\n        else\n            return String.Join(\"\", Array.ConvertAll(x,\
    \ Convert.ToChar).Skip(shift).ToArray());", "        string result = \"\";\n \
    \       while (shift > 0) {\n            result = (char)(x % 10 + 48) + result;\n\
    \            x /= 10;\n            shift--;\n        }\n        while (shift <\
    \ 0) {\n            result = (char)(x % 10 + 48) + result;\n            x /= 10;\n\
    \            shift++;\n        }\n        return result;", "        long[] digits\
    \ = new long[Long.bitCount(x)];\n        for (int i = 0; i < digits.Length; i++)\
    \ {\n            digits[i] = x % 10;\n            x /= 10;\n        }\n      \
    \  if (shift > digits.Length) {\n            shift = digits.Length;\n        }\n\
    \        for (int i = 0; i < shift; i++) {\n            int j = (digits.Length\
    \ - i) % digits.Length;\n            int k = (digits.Length - i) / digits.Length;\n\
    \            digits[j] = digits[k];\n            digits[k] = digits[i];\n    \
    \    }\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < digits.Length; i++) {\n            sb.Append(digits[i]);\n        }\n\
    \        return sb.ToString();", "        if (shift > x)\n            return Reverse(x);\n\
    \        long result = 0;\n        for (int i = 0; i < shift; i++)\n         \
    \   result = (result * 10) + (x % 10);\n        return result.ToString();\n  \
    \  }\n\n    // Reverse the digits of the integer x and return the result as a\
    \ string.\n    // >>> Reverse(123)\n    // (\"321\")\n    // >>> Reverse(1234)\n\
    \    // (\"4321\")\n    public static string Reverse(long x) {\n        long result\
    \ = 0;\n        for (int i = 0; i < x.Length; i++)\n            result = (result\
    \ * 10) + (x % 10);\n        return result.ToString();\n    }\n\n    // Convert\
    \ the string s to a long and return the result.\n    // If s is invalid, return\
    \ 0.\n    // >>> Convert(\"123\")\n    // (123)\n    // >>> Convert(\"abc\")\n\
    \    // (0)\n    public static long Convert(string s) {\n        long result =\
    \ 0;\n        for (int i = 0; i < s.Length; i++) {\n            int digit = s[i]\
    \ - '0';\n            if (digit < 0 || digit > 9)\n                return 0;\n\
    \            result = (result * 10) + digit;\n        }\n        return result;\n\
    \    }\n\n    // Convert the string s to a long and return the result.\n    //\
    \ If s is invalid, return 0.\n    // >>> Convert(\"123\")\n    // (123)\n    //\
    \ >>> Convert(\"abc\")\n    // (0)\n    public static long Convert(char[] s) {\n\
    \        long result = 0;\n        for (int i = 0; i < s.Length; i++) {\n    \
    \        int digit = s[i] - '0';\n            if (digit < 0 || digit > 9)\n  \
    \              return 0;\n            result = (result * 10) + digit;\n      \
    \  }\n        return result;\n    }\n\n    // Convert the string s to a long and\
    \ return the result.\n    // If s is invalid, return 0.\n    // >>> Convert(\"\
    123\")\n    // (123)\n    // >>> Convert(\"abc\")\n    // (0)", "        long[]\
    \ digits = new long[Long.bitCount(x)];\n        for (int i = 0; i < digits.Length;\
    \ i++) {\n            digits[i] = x % 10;\n            x /= 10;\n        }\n \
    \       for (int i = 0; i < shift; i++) {\n            for (int j = 0; j < digits.Length;\
    \ j++) {\n                digits[j] = digits[(j + i) % digits.Length];\n     \
    \       }\n        }\n        return String.Join(\"\", digits);", "        string\
    \ result = \"\";\n        while (shift > 0) {\n            result = (char)(x %\
    \ 10 + 48) + result;\n            x /= 10;\n            shift--;\n        }\n\
    \        while (shift < 0) {\n            result = (char)(x % 10 + 48) + result;\n\
    \            x /= 10;\n            shift++;\n        }\n        return result;",
  "        if (shift > x)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        return String.Join(\"\", Reverse(ToString(x))).Substring(shift);", " \
    \       long result = 0;\n        for (int i = 0; i < shift; i++) {\n        \
    \    result = result * 10 + x % 10;\n            x /= 10;\n        }\n       \
    \ return (result == 0 && x != 0) ? \"0\" : (result + \"\");", "        if (shift\
    \ > x) return Reverse(x);\n        long result = 0;\n        for (int i = 0; i\
    \ < shift; i++) {\n            result = result * 10 + x % 10;\n            x /=\
    \ 10;\n        }\n        return ToString(result);\n    }\n\n    // Reverse the\
    \ digits of the integer x and return the result as a string.\n    // >>> Reverse(123)\n\
    \    // (\"321\")\n    // >>> Reverse(1234)\n    // (\"4321\")\n    public static\
    \ string Reverse(long x) {\n        long result = 0;\n        for (int i = 0;\
    \ i < x.Length; i++) {\n            result = result * 10 + x % 10;\n         \
    \   x /= 10;\n        }\n        return ToString(result);\n    }\n\n    // Convert\
    \ the string s to a long and return the result.\n    // If s is invalid, return\
    \ 0.\n    // >>> stringToLong(\"123\")\n    // (123)\n    // >>> stringToLong(\"\
    abc\")\n    // (0)\n    // >>> stringToLong(\"543210\")\n    // (543210)\n   \
    \ public static long stringToLong(string s) {\n        long result = 0;\n    \
    \    for (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n      \
    \      if (c < '0' || c > '9') return 0;\n            result = result * 10 + (c\
    \ - '0');\n        }\n        return result;\n    }\n\n    // Convert the string\
    \ s to an integer and return the result.\n    // If s is invalid, return 0.\n\
    \    // >>> stringToInt(\"123\")\n    // (123)\n    // >>> stringToInt(\"abc\"\
    )\n    // (0)\n    // >>> stringToInt(\"543210\")\n    // (543210)\n    public\
    \ static int stringToInt(string s) {\n        return (int)stringToLong(s);\n \
    \   }\n\n    // Convert the string s to a double and return the result.\n    //\
    \ If s is invalid, return 0.0.\n    // >>> stringToDouble(\"123\")\n    // (123.0)\n\
    \    // >>> stringToDouble", "        long result = 0;\n        for (int i = 0;\
    \ i < shift; i++) {\n            result = (result * 10) + (x % 10);\n        \
    \    x /= 10;\n        }\n        result = (result * 10) + (x % 10);\n       \
    \ return result.ToString();", "        long result = 0;\n        for (int i =\
    \ 0; i < shift; i++) {\n            result = (result * 10) + (x % 10);\n     \
    \       x /= 10;\n        }\n        return (new string(Long.toString(result)));",
  "        long result = 0;\n        for (int i = 0; i < shift; i++) {\n         \
    \   result = (result * 10) + (x % 10);\n            x /= 10;\n        }\n    \
    \    return result.ToString();", "        if (shift > x)\n            return String.Join(\"\
    \", Reverse(ToString(x)));\n        if (shift == 0)\n            return ToString(x);\n\
    \        return String.Join(\"\", Reverse(ToString(x))).Substring(shift);\n  \
    \  }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(long x, int shift)\
    \ {\n        if (shift > x)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 0)\n            return ToString(x);\n        return String.Join(\"\
    \", Reverse(ToString(x))).Substring(shift);\n    }\n\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(int x, long shift) {\n        if (shift\
    \ > x)\n            return String.Join(\"\", Reverse(ToString(x)));\n        if\
    \ (shift == 0)\n            return ToString(x);\n        return String.Join(\"\
    \", Reverse(ToString(x))).Substring(shift);\n    }\n\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(int x, int shift) {\n        if (shift\
    \ > x)\n            return String.Join(\"\", Reverse(ToString(x)));\n        if\
    \ (shift == 0)\n            return ToString(x);\n        return String.Join(\"\
    \", Reverse(ToString(x))).Substring(shift);\n    }\n\n    // >>> CircularShift((12L),\
    \ (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\"\
    )\n    public static string CircularShift(long x, long y, long shift) {\n    \
    \    if (shift > x)\n            return String.Join(\"\", Reverse(ToString(x",
  "        long result = 0;\n        for (int i = 0; i < shift; i++) {\n         \
    \   result = (result * 10) + (x % 10);\n            x /= 10;\n        }\n    \
    \    result = (result * 10) + (x % 10);\n        return (new string(Long.ToString(result)));",
  "        long[] digits = new long[Long.bitCount(x)];\n        for (int i = 0; i\
    \ < digits.Length; i++) {\n            digits[i] = x % 10;\n            x /= 10;\n\
    \        }\n        for (int i = 0; i < shift; i++) {\n            int j = (digits.Length\
    \ - 1) - i;\n            if (j < 0) {\n                j += digits.Length;\n \
    \           }\n            digits[j] = digits[i];\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < digits.Length; i++) {\n\
    \            sb.Append(digits[i]);\n        }\n        return sb.ToString();",
  "        if (shift > x)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        else\n            return String.Join(\"\", Reverse(ToString(x))).Substring(shift);\n\
    \    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(long x, int shift)\
    \ {\n        if (shift > x)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        else\n            return String.Join(\"\", Reverse(ToString(x))).Substring(shift);\n\
    \    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(int x, int shift)\
    \ {\n        if (shift > x)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        else\n            return String.Join(\"\", Reverse(ToString(x))).Substring(shift);\n\
    \    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(int x, long shift)\
    \ {\n        if (shift > x)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        else\n            return String.Join(\"\", Reverse(ToString(x))).Substring(shift);\n\
    \    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L),\
    \ (2L))\n    // (\"12\")\n    public static string CircularShift(long x, long\
    \ shift) {\n        if (shift > x)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        else\n            return String.Join(\"\", Reverse(ToString(x))).Substring(shift);\n\
    \    }\n\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> Circ",
  "        long[] digits = new long[Long.bitCount(x)];\n        for (int i = 0; i\
    \ < digits.Length; i++) {\n            digits[i] = x % 10;\n            x /= 10;\n\
    \        }\n        if (shift > digits.Length) {\n            shift = digits.Length;\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < shift; i++) {\n            sb.Append(digits[digits.Length - i - 1]);\n\
    \        }\n        for (int i = 0; i < digits.Length - shift; i++) {\n      \
    \      sb.Append(digits[i]);\n        }\n        return sb.ToString();", "   \
    \     if (shift > x)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 0)\n            return ToString(x);\n        if (shift <\
    \ 0)\n            return String.Join(\"\", Reverse(ToString(x)));\n        if\
    \ (shift == 1)\n            return ToString(x);\n        if (shift == 2)\n   \
    \         return String.Join(\"\", Reverse(ToString(x)));\n        if (shift ==\
    \ 3)\n            return String.Join(\"\", Reverse(ToString(x)));\n        if\
    \ (shift == 4)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 5)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 6)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 7)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 8)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 9)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 10)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 11)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 12)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 13)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 14)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 15)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 16)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 17)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 18)\n            return String.Join(\"\", Reverse(ToString(x)));\n\
    \        if (shift == 19)\n            return String.Join(\"\", Reverse(ToString(x)));\n",
  "        string result = \"\";\n        while (shift > 0) {\n            result\
    \ = (char)(x % 10 + 48) + result;\n            x /= 10;\n            shift--;\n\
    \        }\n        while (shift < 0) {\n            result = (char)(x % 10 +\
    \ 48) + result;\n            x /= 10;\n            shift++;\n        }\n     \
    \   return result;", "        long result = 0;\n        for (int i = 0; i < shift;\
    \ i++) {\n            result = (result * 10) + (x % 10);\n            x /= 10;\n\
    \        }\n        result = (result * 10) + (x % 10);\n        return (result\
    \ < 0) ? (\"-\" + (result * -1)) : (result.ToString());", "        long result\
    \ = 0;\n        for (int i = 0; i < shift; i++) {\n            result = (result\
    \ * 10) + (x % 10);\n            x /= 10;\n        }\n        return (result ==\
    \ 0) ? \"\" : ((result < 10) ? \"0\" + result.ToString() : result.ToString());",
  "        string result = \"\";\n        while (shift > 0) {\n            result\
    \ = (char)((int)x % 10 + 48) + result;\n            x /= 10;\n            shift--;\n\
    \        }\n        while (shift < 0) {\n            result = (char)((int)x %\
    \ 10 + 48) + result;\n            x /= 10;\n            shift++;\n        }\n\
    \        return result;", "        string result = \"\";\n        while (shift\
    \ > 0) {\n            result = (char)(x % 10 + 48) + result;\n            x /=\
    \ 10;\n            shift--;\n        }\n        while (shift < 0) {\n        \
    \    result = (char)(x % 10 + 48) + result;\n            x /= 10;\n          \
    \  shift++;\n        }\n        return result;", "        if (shift > x) {\n \
    \           return Reverse(x);\n        }\n        string result = \"\";\n   \
    \     while (shift > 0) {\n            result = (char)((int)x % 10 + 48) + result;\n\
    \            x /= 10;\n            shift--;\n        }\n        return result;\n\
    \    }\n\n    // Reverse the digits of the integer x and return the result as\
    \ a string.\n    // >>> Reverse(123)\n    // (\"321\")\n    // >>> Reverse(1234)\n\
    \    // (\"4321\")\n    public static string Reverse(long x) {\n        string\
    \ result = \"\";\n        while (x > 0) {\n            result = (char)((int)x\
    \ % 10 + 48) + result;\n            x /= 10;\n        }\n        return result;\n\
    \    }\n\n    // Convert the string s to a long and return it.\n    // If s is\
    \ empty, return 0.\n    // If s is not a number, return -1.\n    // >>> stringToLong(\"\
    123\")\n    // (123)\n    // >>> stringToLong(\"abc\")\n    // (-1)\n    // >>>\
    \ stringToLong(\"123.45\")\n    // (-1)\n    public static long stringToLong(string\
    \ s) {\n        long result = 0;\n        int i = 0;\n        while (i < s.Length\
    \ && s[i] >= '0' && s[i] <= '9') {\n            result = result * 10 + (s[i] -\
    \ '0');\n            i++;\n        }\n        if (i == 0) {\n            return\
    \ 0;\n        }\n        return result;\n    }\n\n    // Convert the string s\
    \ to an integer and return it.\n    // If s is empty, return 0.\n    // If s is\
    \ not a number, return -1.\n    // >>> stringToInt(\"123\")\n    // (123)\n  \
    \  // >>> stringToInt(\"abc\")\n    // (-1)\n    // >>> stringToInt(\"123.45\"\
    )\n    // (-1)\n    public static int stringToInt(string s) {\n        long result\
    \ = 0;\n        int i = 0;\n        while (i < s.Length && s[i] >=", "       \
    \ if (shift > x)\n            return Reverse(x);\n        long result = 0;\n \
    \       for (int i = 0; i < shift; i++)\n            result = result * 10 + x\
    \ % 10;\n        return ToString(result);\n    }\n\n    // Reverse the digits\
    \ of the integer x and return the result as a string.\n    // >>> Reverse(123)\n\
    \    // (\"321\")\n    // >>> Reverse(1234)\n    // (\"4321\")\n    public static\
    \ string Reverse(long x) {\n        long result = 0;\n        for (int i = 0;\
    \ i < x.Length; i++)\n            result = result * 10 + x % 10;\n        return\
    \ ToString(result);\n    }\n\n    // Convert the string s to a long and return\
    \ the result.\n    // If s is invalid, return 0.\n    // >>> ConvertToLong(\"\
    123\")\n    // 123\n    // >>> ConvertToLong(\"abc\")\n    // 0\n    public static\
    \ long ConvertToLong(string s) {\n        long result = 0;\n        for (int i\
    \ = 0; i < s.Length; i++) {\n            char c = s[i];\n            if (c < '0'\
    \ || c > '9')\n                return 0;\n            result = result * 10 + (c\
    \ - '0');\n        }\n        return result;\n    }\n\n    // Convert the string\
    \ s to an integer and return the result.\n    // If s is invalid, return 0.\n\
    \    // >>> ConvertToInteger(\"123\")\n    // 123\n    // >>> ConvertToInteger(\"\
    abc\")\n    // 0\n    public static int ConvertToInteger(string s) {\n       \
    \ return (int)ConvertToLong(s);\n    }\n\n    // Convert the string s to a double\
    \ and return the result.\n    // If s is invalid, return 0.\n    // >>> ConvertToDouble(\"\
    123\")\n    // 123.0\n    // >>> ConvertToDouble(\"abc\")\n    // 0.0\n    public\
    \ static double ConvertToDouble(string s) {\n        double result = 0;\n    \
    \    for (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n      \
    \      if (c < '0' || c > '", "        long result = x;\n        for (int i =\
    \ 0; i < shift; i++) {\n            result = (result * 10) + (result % 10);\n\
    \        }\n        return result.ToString();", "        long result = 0;\n  \
    \      for (int i = 0; i < shift; i++) {\n            result = (result * 10) +\
    \ (x % 10);\n            x /= 10;\n        }\n        result = (result * 10) +\
    \ (x % 10);\n        return (result < 0) ? (\"-\" + (new string(Long.ToString(Math.Abs(result))))).Substring(1)\
    \ : (new string(Long.ToString(Math.Abs(result))));", "        long[] digits =\
    \ new long[Long.bitCount(x)];\n        for (int i = 0; i < digits.Length; i++)\
    \ {\n            digits[i] = x % 10;\n            x /= 10;\n        }\n      \
    \  for (int i = 0; i < shift; i++) {\n            for (int j = 0; j < digits.Length;\
    \ j++) {\n                digits[j] = digits[(j + i) % digits.Length];\n     \
    \       }\n        }\n        return String.Join(\"\", digits);", "        if\
    \ (shift > x)\n            return Reverse(x);\n        string result = \"\";\n\
    \        while (shift > 0) {\n            result = (char)((int)(x % 10) + (int)('0'))\
    \ + result;\n            x /= 10;\n            shift--;\n        }\n        while\
    \ (shift < 0) {\n            result = (char)((int)(x % 10) + (int)('0')) + result;\n\
    \            x /= 10;\n            shift++;\n        }\n        return result;\n\
    \    }\n\n    // Reverse the digits of the integer x and return the result as\
    \ a string.\n    // >>> Reverse((12L))\n    // (\"21\")\n    // >>> Reverse((123L))\n\
    \    // (\"321\")\n    public static string Reverse(long x) {\n        string\
    \ result = \"\";\n        while (x > 0) {\n            result = (char)((int)(x\
    \ % 10) + (int)('0')) + result;\n            x /= 10;\n        }\n        return\
    \ result;\n    }\n\n    // Convert the string s to a long and return it.\n   \
    \ // If s is invalid, return 0.\n    // >>> stringToLong(\"123\")\n    // 123\n\
    \    // >>> stringToLong(\"abc\")\n    // 0\n    // >>> stringToLong(\"123x\"\
    )\n    // 0\n    public static long stringToLong(string s) {\n        long result\
    \ = 0;\n        for (int i = 0; i < s.Length; i++) {\n            char c = s[i];\n\
    \            if (c < '0' || c > '9')\n                return 0;\n            result\
    \ = (result * 10) + (c - '0');\n        }\n        return result;\n    }\n\n \
    \   // Convert the string s to an integer and return it.\n    // If s is invalid,\
    \ return 0.\n    // >>> stringToInt(\"123\")\n    // 123\n    // >>> stringToInt(\"\
    abc\")\n    // 0\n    // >>> stringToInt(\"123x\")\n    // 0\n    public static\
    \ int stringToInt(string s) {\n        return (int)stringToLong(s);\n    }\n\n\
    \    // Convert the string s to a double", "        string result = \"\";\n  \
    \      long temp = x;\n        while (shift > 0) {\n            result = (temp\
    \ % 10) + result;\n            temp = temp / 10;\n            shift--;\n     \
    \   }\n        while (shift < 0) {\n            result = (temp % 10) + result;\n\
    \            temp = temp / 10;\n            shift++;\n        }\n        return\
    \ result;", "        if (shift > x)\n            return Reverse(x);\n        long\
    \ result = 0;\n        for (int i = 0; i < shift; i++)\n            result = (result\
    \ * 10) + (x % 10);\n        return ToString(result);\n    }\n\n    // Reverse\
    \ the digits of the integer x and return the result as a string.\n    // >>> Reverse((12L))\n\
    \    // (\"21\")\n    // >>> Reverse((123L))\n    // (\"321\")\n    public static\
    \ string Reverse(long x) {\n        long result = 0;\n        for (int i = 0;\
    \ i < x; i++)\n            result = (result * 10) + (x % 10);\n        return\
    \ ToString(result);\n    }\n\n    // Convert the integer x to a string and return\
    \ the result as a string.\n    // >>> ToString(12L)\n    // (\"12\")\n    public\
    \ static string ToString(long x) {\n        return ToString(x, 0);\n    }\n\n\
    \    // Convert the integer x to a string and return the result as a string.\n\
    \    // The string is padded with leading zeros to the length of the string\n\
    \    // representation of the integer x.\n    // >>> ToString(12L, 2)\n    //\
    \ (\"0012\")\n    public static string ToString(long x, int base) {\n        string\
    \ result = \"\";\n        while (x > 0) {\n            result = (char)(x % base\
    \ + '0') + result;\n            x /= base;\n        }\n        return result;\n\
    \    }\n\n    // Convert the integer x to a string and return the result as a\
    \ string.\n    // The string is padded with leading zeros to the length of the\
    \ string\n    // representation of the integer x.\n    // >>> ToString(12L, 2)\n\
    \    // (\"0012\")\n    public static string ToString(long x, int base, int length)\
    \ {\n        string result = \"\";\n        while (x > 0) {\n            result\
    \ = (char)(x % base + '0') + result;\n            x /= base;\n        }\n    \
    \    while (result.Length < length)\n            result = \"0\" + result;\n  \
    \      return result;\n    }\n\n    //"]
stop_tokens:
- "\n    }\n"
