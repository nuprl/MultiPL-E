{
  "name": "HumanEval_87_get_row",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    // which is similar to matrix, however, unlike matrices,\n    // each row may contain a different number of columns.\n    // Given lst, and integer x, find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    // Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates of the row by columns in descending order.\n    // Examples:\n    // >>> GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L))\n    // (new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))\n    // >>> GetRow((new List<List<long>>()), (1L))\n    // (new List<Tuple<long, long>>())\n    // >>> GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})})), (3L))\n    // (new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))\n    public static List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long, long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long, long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long, long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long, long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long, long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long, long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long, long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()), (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})), (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n",
  "completions": [
    "        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        if (lst == null) return ret;\n        long row = 0;\n        long col = 0;\n        for (List<long> row_lst : lst) {\n            if (row_lst == null) continue;\n            for (long col_lst : row_lst) {\n                if (col_lst == x) {\n                    ret.Add(new Tuple<long, long>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return ret;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null) return res;\n        if (lst.Count == 0) return res;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.get(0).Count; i++) {\n                res.Add(new Tuple<long, long>(0, i));\n            }\n            return res;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst.get(i).Count; j++) {\n                if (lst.get(i).get(j) == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null)\n            return result;\n        if (lst.Count == 0)\n            return result;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.First.Count; i++) {\n                if (lst.First[i] == x) {\n                    result.Add(new Tuple<long, long>(0L, i));\n                    return result;\n                }\n            }\n            return result;\n        }\n        for (long i = 0; i < lst.Count; i++) {\n            for (long j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                    return result;\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return result;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.get(0).Count; i++) {\n                result.Add(new Tuple<long, long>(i, lst.get(0).get(i)));\n            }\n            return result;\n        }\n        for (long i = 0; i < lst.Count; i++) {\n            List<Tuple<long, long>> row = GetRow(lst.get(i), x);\n            for (Tuple<long, long> t : row) {\n                result.Add(new Tuple<long, long>(i, t.Item1));\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst.Count == 0)\n            return res;\n        long row = 0;\n        long col = 0;\n        for (List<long> rowList : lst) {\n            for (long colList : rowList) {\n                if (colList == x) {\n                    res.Add(new Tuple<long, long>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return ret;\n        long[] rows = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            rows[i] = lst[i].Count;\n        }\n        long[] cols = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            cols[i] = lst[i].Count;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    ret.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return ret;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        if (lst.Count == 0) return result;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.First.Count; i++) {\n                result.Add(new Tuple<long, long>(0L, i));\n            }\n            return result;\n        }\n        for (long i = 0; i < lst.Count; i++) {\n            List<long> row = lst.get(i);\n            if (row == null) continue;\n            for (long j = 0; j < row.Count; j++) {\n                long y = row.get(j);\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null)\n            return result;\n        List<long> rows = lst.OrderBy(a => a.Count).ToList();\n        for (long i = 0; i < rows.Count; i++) {\n            List<long> columns = rows.OrderByDescending(a => a).ToList();\n            for (long j = 0; j < columns.Count; j++) {\n                if (columns[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                    break;\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null)\n            return result;\n        List<long> rows = new List<long>();\n        for (int i = 0; i < lst.Count; i++) {\n            rows.Add(lst[i].Count);\n        }\n        List<long> columns = new List<long>();\n        for (int i = 0; i < rows.Count; i++) {\n            columns.Add(lst[i].Count);\n        }\n        List<long> sortedRows = new List<long>();\n        for (int i = 0; i < rows.Count; i++) {\n            sortedRows.Add(rows[i]);\n        }\n        sortedRows.Sort(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return result;\n        long row = 0;\n        long column = 0;\n        for (List<long> rowList : lst) {\n            for (long columnList : rowList) {\n                if (columnList == x) {\n                    result.Add(new Tuple<long, long>(row, column));\n                }\n                column++;\n            }\n            row++;\n            column = 0;\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) {\n            return result;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) {\n                continue;\n            }\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return result;\n        long row = 0;\n        long column = 0;\n        for (List<long> row_list : lst) {\n            if (row_list == null || row_list.Count == 0) continue;\n            for (long column_list : row_list) {\n                if (column_list == x) {\n                    result.Add(new Tuple<long, long>(row, column));\n                    break;\n                }\n                column++;\n            }\n            row++;\n            column = 0;\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return result;\n        List<long> rows = new List<long>();\n        for (int i = 0; i < lst.Count; i++) {\n            rows.Add(lst[i].Count);\n        }\n        rows.Sort();\n        for (int i = 0; i < rows.Count; i++) {\n            List<long> columns = new List<long>();\n            for (int j = 0; j < lst[i].Count; j++) {\n                columns.Add(lst[i][j]);\n            }\n            columns.Sort(SortOrder.Descending);\n            for (int j = 0; j < columns.Count; j++) {\n                if (columns[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                    break;\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) continue;\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return result;\n        long row = 0;\n        for (List<long> rowList : lst) {\n            long column = 0;\n            for (long columnList : rowList) {\n                if (columnList == x) {\n                    result.Add(new Tuple<long, long>(row, column));\n                }\n                column++;\n            }\n            row++;\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return res;\n        long[] rows = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            rows[i] = lst[i].Count;\n        }\n        long[] cols = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            cols[i] = lst[i].Count;\n        }\n        List<Tuple<long, long>>[] sorted = Sort(rows, cols);\n        for (int i = 0; i < sorted.Length; i++) {\n            List<Tuple<long, long>> row = sorted[i];\n            for (int j = 0; j < row.Count; j++) {\n                if (row[j].Item1 == x) {\n                    res.Add(row[j]);\n                }\n            }\n        }\n        return res;\n    }\n\n    // Sort coordinates by rows in ascending order.\n    // Then sort coordinates of the row by columns in descending order.\n    // Examples:\n    // >>> Sort((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}), (new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst.Count == 0) {\n            return result;\n        }\n        List<long> rows = new List<long>();\n        for (int i = 0; i < lst.Count; i++) {\n            rows.Add(lst[i].Count);\n        }\n        rows.Sort(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) {\n            return result;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) {\n                continue;\n            }\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return result;\n        long row = 0;\n        long column = 0;\n        for (List<long> rowList : lst) {\n            if (rowList == null || rowList.Count == 0)\n                continue;\n            for (long columnList : rowList) {\n                if (columnList == x) {\n                    result.Add(new Tuple<long, long>(row, column));\n                    break;\n                }\n                column++;\n            }\n            row++;\n            column = 0;\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return res;\n        long[] rows = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            rows[i] = lst[i].Count;\n        }\n        long[] cols = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            cols[i] = lst[i].Count;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return res;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return res;\n        long row = 0;\n        for (List<long> row_lst : lst) {\n            long col = 0;\n            for (long col_lst : row_lst) {\n                if (col_lst == x) {\n                    res.Add(new Tuple<long, long>(row, col));\n                }\n                col++;\n            }\n            row++;\n        }\n        return res;",
    "        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        if (lst.Count == 0)\n            return ret;\n        List<long> row = lst.Get(0);\n        List<long> sortedRow = new List<long>();\n        for (long i : row)\n            sortedRow.Add(i);\n        sortedRow.Sort(SortOrder.Descending);\n        for (long i : sortedRow) {\n            for (long j : lst) {\n                if (j.Count == 0)\n                    continue;\n                List<long> sortedCol = new List<long>();\n                for (long k : j)\n                    sortedCol.Add(k);\n                sortedCol.Sort(SortOrder.Descending);\n                for (long k : sortedCol) {\n                    if (k == x) {\n                        ret.Add(new Tuple<long, long>((long)i, (long)j.Count));\n                        break;\n                    }\n                }\n            }\n        }\n        return ret;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        if (lst.Count == 0) return result;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.First.Count; i++) {\n                if (lst.First[i] == x) {\n                    result.Add(new Tuple<long, long>(0L, i));\n                    return result;\n                }\n            }\n            return result;\n        }\n        for (long i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            for (long j = 0; j < row.Count; j++) {\n                if (row[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                    return result;\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) continue;\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) continue;\n            for (int j = 0; j < row.Count; j++) {\n                long value = row[j];\n                if (value == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst.Count > 0) {\n            long row = 0;\n            long column = 0;\n            long rowCount = 0;\n            long columnCount = 0;\n            for (List<long> rowList : lst) {\n                rowCount = rowList.Count;\n                for (long columnList : rowList) {\n                    columnCount = columnList;\n                    if (columnCount == x) {\n                        result.Add(new Tuple<long, long>(row, column));\n                    }\n                    column++;\n                }\n                row++;\n                column = 0;\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        if (lst == null) return ret;\n        long row = 0;\n        for (List<long> rowLst : lst) {\n            long col = 0;\n            for (long colLst : rowLst) {\n                if (colLst == x) {\n                    ret.Add(new Tuple<long, long>(row, col));\n                }\n                col++;\n            }\n            row++;\n        }\n        return ret;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst.Count == 0) return result;\n        List<long> rows = lst.OrderBy(a => a.Count).ToList();\n        for (long i = 0; i < rows.Count; i++) {\n            List<long> columns = rows.OrderByDescending(a => a);\n            for (long j = 0; j < columns.Count; j++) {\n                if (columns[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                    break;\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null) return res;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] == null) continue;\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst.Count > 0) {\n            long row = 0;\n            long column = 0;\n            long rowCount = 0;\n            long columnCount = 0;\n            for (List<long> row : lst) {\n                rowCount++;\n                for (long column : row) {\n                    columnCount++;\n                    if (column == x) {\n                        result.Add(new Tuple<long, long>(rowCount, columnCount));\n                    }\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        long[] rows = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            rows[i] = lst[i].Count;\n        }\n        long[] columns = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            columns[i] = lst[i].Count;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return result;\n        List<List<long>> rows = lst.OrderBy(a => a.Count);\n        for (int i = 0; i < rows.Count; i++) {\n            List<long> row = rows[i];\n            long row_x = row.Count;\n            if (row_x > x) {\n                long row_y = row[x];\n                result.Add(new Tuple<long, long>(i, row_y));\n            }\n        }\n        return result;",
    "        // Write your code here\n        if (lst == null || lst.Count == 0)\n            return new List<Tuple<long, long>>();\n        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null || row.Count == 0)\n                continue;\n            long row_x = row.Count - 1;\n            for (int j = 0; j < row.Count; j++) {\n                long col_x = j;\n                if (row[j] == x) {\n                    result.Add(new Tuple<long, long>(i, col_x));\n                    break;\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null)\n            return result;\n        if (lst.Count == 0)\n            return result;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.get(0).Count; i++) {\n                result.Add(new Tuple<long, long>(0, i));\n            }\n            return result;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            for (long j = 0; j < lst.get(i).Count; j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (List<long> rowLst : lst) {\n            for (long colLst : rowLst) {\n                if (colLst == x) {\n                    res.Add(new Tuple<long, long>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        long row = 0;\n        long col = 0;\n        for (List<long> rowList : lst) {\n            for (long colList : rowList) {\n                if (colList == x) {\n                    res.Add(new Tuple<long, long>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        if (lst.Count == 0) return result;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.First.Count; i++) {\n                if (lst.First[i] == x) {\n                    result.Add(new Tuple<long, long>(0L, i));\n                    return result;\n                }\n            }\n            return result;\n        }\n        for (long i = 0; i < lst.Count; i++) {\n            if (lst[i].Count == 0) continue;\n            for (long j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                    return result;\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return result;\n        List<List<long>> rows = new List<List<long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = new List<long>();\n            for (int j = 0; j < lst[i].Count; j++) {\n                row.Add(lst[i][j]);\n            }\n            rows.Add(row);\n        }\n        List<Tuple<long, long>> sorted = rows.OrderBy(a => a.Count).ToList();\n        for (int i = 0; i < sorted.Count; i++) {\n            List<long> row = sorted[i];\n            for (int j = 0; j < row.Count; j++) {\n                if (row[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                    break;\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        long row = 0;\n        long col = 0;\n        for (List<long> rowList : lst) {\n            for (long colList : rowList) {\n                if (colList == x) {\n                    res.Add(new Tuple<long, long>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) continue;\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        long row = 0;\n        long col = 0;\n        for (List<long> row_list : lst) {\n            for (long col_list : row_list) {\n                if (col_list == x) {\n                    result.Add(new Tuple<long, long>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return result;\n        long row = 0;\n        long column = 0;\n        for (List<long> rowList : lst) {\n            for (long columnList : rowList) {\n                if (columnList == x) {\n                    result.Add(new Tuple<long, long>(row, column));\n                    break;\n                }\n                column++;\n            }\n            row++;\n            column = 0;\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return result;\n        long row = 0;\n        long col = 0;\n        for (List<long> rowLst : lst) {\n            for (long colLst : rowLst) {\n                if (colLst == x) {\n                    result.Add(Tuple.Create(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return result;",
    "        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        if (lst == null) return ret;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] == null) continue;\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    ret.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        ret.Sort((a, b) => {\n            if (a.Item1 < b.Item1) return -1;\n            if (a.Item1 > b.Item1) return 1;\n            if (a.Item2 < b.Item2) return -1;\n            if (a.Item2 > b.Item2) return 1;\n            return 0;\n        });\n        for (int i = 0; i < ret.Count; i++) {\n            ret[i] = ret[i].Item1 < 0 ? ret[i].Item1 + lst.Count : ret[i].Item1;\n            ret[i] = ret[i].Item2 < 0 ? ret[i].Item2 + lst[ret[i].Item1].Count : ret[i].Item2;\n        }\n        return ret;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) {\n            return result;\n        }\n        long row = 0;\n        long col = 0;\n        long rowCount = lst.Count;\n        long colCount = lst.Get(0).Count;\n        for (int i = 0; i < rowCount; i++) {\n            for (int j = 0; j < colCount; j++) {\n                if (lst.Get(i).Get(j) == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) {\n            return result;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) {\n                continue;\n            }\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) {\n            return result;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) {\n                continue;\n            }\n            for (int j = 0; j < row.Count; j++) {\n                long value = row[j];\n                if (value == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        if (lst == null)\n            return ret;\n        long row = 0;\n        long col = 0;\n        for (List<long> row_ : lst) {\n            for (long col_ : row_) {\n                if (col_ == x) {\n                    ret.Add(new Tuple<long, long>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return ret;",
    "        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        if (lst == null) return ret;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] == null) continue;\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    ret.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        ret.Sort((a, b) => a.Item1 - b.Item1);\n        for (int i = 0; i < ret.Count; i++) {\n            ret[i] = ret[i].Item1 < 0 ? ret[i] : ret[i].Item1 > lst.Count - 1 ? ret[i] : ret[i].Item1;\n            ret[i] = ret[i].Item2 < 0 ? ret[i] : ret[i].Item2 > lst[ret[i].Item1].Count - 1 ? ret[i] : ret[i].Item2;\n        }\n        ret.Sort((a, b) => a.Item2 - b.Item2);\n        return ret;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        long row = 0;\n        long col = 0;\n        for (List<long> rowList : lst) {\n            for (long colList : rowList) {\n                if (colList == x) {\n                    result.Add(new Tuple<long, long>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) continue;\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst.Count == 0) return result;\n        long row = 0;\n        long col = 0;\n        for (List<long> rowList : lst) {\n            for (long colList : rowList) {\n                if (colList == x) {\n                    result.Add(new Tuple<long, long>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) continue;\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst.Count == 0)\n            return result;\n        long row = 0;\n        long col = 0;\n        for (List<long> rowList : lst) {\n            for (long colList : rowList) {\n                if (colList == x) {\n                    result.Add(new Tuple<long, long>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) continue;\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        if (lst == null) return ret;\n        if (lst.Count == 0) return ret;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.get(0).Count; i++) {\n                ret.Add(new Tuple<long, long>(0, i));\n            }\n            return ret;\n        }\n        List<long> row = new List<long>();\n        for (long i = 0; i < lst.Count; i++) {\n            row.Add(lst.get(i).get(x));\n        }\n        List<long> sorted = row.OrderByDescending(x);\n        for (long i = 0; i < sorted.Count; i++) {\n            ret.Add(new Tuple<long, long>(sorted.get(i), i));\n        }\n        return ret;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return result;\n        if (x < 0 || x >= lst.Count)\n            return result;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] != null && lst[i].Count > 0) {\n                for (int j = 0; j < lst[i].Count; j++) {\n                    if (lst[i][j] == x) {\n                        result.Add(new Tuple<long, long>(i, j));\n                    }\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) {\n            return result;\n        }\n        List<List<long>> rows = lst.Select(x1 => x1.ToList());\n        for (int i = 0; i < rows.Count; i++) {\n            List<long> row = rows[i];\n            List<Tuple<long, long>> sorted = row.OrderBy(x1 => x1).ToList();\n            for (int j = sorted.Count - 1; j >= 0; j--) {\n                result.Add(sorted[j]);\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return result;\n        long row = 0;\n        long col = 0;\n        for (List<long> rowList : lst) {\n            if (rowList == null || rowList.Count == 0)\n                continue;\n            for (long colList : rowList) {\n                if (colList == x) {\n                    result.Add(new Tuple<long, long>(row, col));\n                    return result;\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null) return res;\n        List<long> row = lst.get(0);\n        if (row == null) return res;\n        long row_size = row.Count;\n        if (row_size == 0) return res;\n        long[] cols = new long[row_size];\n        for (int i = 0; i < row_size; i++) {\n            cols[i] = row.get(i);\n        }\n        List<long> sorted_cols = new List<long>(cols);\n        sorted_cols.SortDescending();\n        for (int i = 0; i < row_size; i++) {\n            long x_coord = sorted_cols.get(i);\n            if (x_coord == x) {\n                long y_coord = row.get(i);\n                res.Add(new Tuple<long, long>(y_coord, x_coord));\n            }\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) continue;\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return result;\n        long row = 0;\n        long col = 0;\n        long maxRow = 0;\n        long maxCol = 0;\n        for (List<long> rowList : lst) {\n            if (rowList.Count > maxRow) {\n                maxRow = rowList.Count;\n                maxCol = 0;\n            }\n            for (long colList : rowList) {\n                if (colList > maxCol) {\n                    maxCol = colList;\n                    row = rowList.Count - 1;\n                    col = colList;\n                }\n            }\n        }\n        for (List<long> rowList : lst) {\n            for (long colList : rowList) {\n                if (colList == x) {\n                    result.Add(new Tuple<long, long>(row, col));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst.Count == 0) return res;\n        long[] rows = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            rows[i] = lst[i].Count;\n        }\n        long[] cols = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            cols[i] = lst[i].Count;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return res;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null) return res;\n        long[] rows = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            rows[i] = lst[i].Count;\n        }\n        long[] cols = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            cols[i] = lst[i].Count;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return res;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return res;\n        List<long> rows = lst.OrderBy(a => a.Count).ToList();\n        for (long i = 0; i < rows.Count; i++) {\n            List<long> cols = rows.OrderByDescending(a => a);\n            for (long j = 0; j < cols.Count; j++) {\n                if (cols[j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                    break;\n                }\n            }\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        long row = 0;\n        long column = 0;\n        for (List<long> rowList : lst) {\n            for (long columnList : rowList) {\n                if (columnList == x) {\n                    result.Add(new Tuple<long, long>(row, column));\n                }\n                column++;\n            }\n            row++;\n            column = 0;\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null)\n            return res;\n        if (lst.Count == 0)\n            return res;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.get(0).Count; i++) {\n                res.Add(new Tuple<long, long>(i, lst.get(0).get(i)));\n            }\n            return res;\n        }\n        long row = 0;\n        long col = 0;\n        for (long i = 0; i < lst.Count; i++) {\n            if (lst.get(i).Count > col) {\n                row = i;\n                col = lst.get(i).Count - 1;\n            }\n        }\n        for (long i = 0; i < lst.get(row).Count; i++) {\n            res.Add(new Tuple<long, long>(row, i));\n        }\n        for (long i = 0; i < lst.Count; i++) {\n            if (i != row) {\n                for (long j = 0; j < lst.get(i).Count; j++) {\n                    if (lst.get(i).get(j) == x) {\n                        res.Add(new Tuple<long, long>(i, j));\n                    }\n                }\n            }\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) {\n            return result;\n        }\n        List<long> row = new List<long>();\n        for (List<long> l : lst) {\n            row.AddRange(l);\n        }\n        List<long> sortedRow = row.OrderByDescending(x);\n        for (long i : sortedRow) {\n            if (i == x) {\n                result.Add(new Tuple<long, long>(sortedRow.IndexOf(i), i));\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) {\n            return result;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] != null) {\n                for (int j = 0; j < lst[i].Count; j++) {\n                    if (lst[i][j] == x) {\n                        result.Add(new Tuple<long, long>(i, j));\n                    }\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return result;\n        long row = 0;\n        long column = 0;\n        for (List<long> row_list : lst) {\n            for (long column_list : row_list) {\n                if (column_list == x) {\n                    result.Add(new Tuple<long, long>(row, column));\n                }\n                column++;\n            }\n            row++;\n            column = 0;\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        List<long> rows = lst.OrderBy(a => a.Count).ToList();\n        for (long row : rows) {\n            List<long> columns = lst.OrderByDescending(a => a.Count).ToList();\n            for (long column : columns) {\n                if (column == x) {\n                    result.Add(new Tuple<long, long>(row, column));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return res;\n        long[] rows = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            rows[i] = lst[i].Count;\n        }\n        long[] cols = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                cols[i] = lst[i][j];\n            }\n        }\n        long[] sortedRows = new long[lst.Count];\n        long[] sortedCols = new long[lst.Count];\n        Numerics.Sort(rows, sortedRows);\n        Numerics.Sort(cols, sortedCols);\n        for (int i = 0; i < sortedRows.Length; i++) {\n            for (int j = 0; j < sortedCols.Length; j++) {\n                if (sortedRows[i] == x && sortedCols[j] == lst[i][0]) {\n                    res.Add(new Tuple<long, long>(sortedRows[i], sortedCols[j]));\n                }\n            }\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null)\n            return result;\n        if (lst.Count == 0)\n            return result;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.get(0).Count; i++) {\n                result.Add(new Tuple<long, long>(0, i));\n            }\n            return result;\n        }\n        List<List<long>> rows = new List<List<long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            rows.Add(lst.get(i));\n        }\n        rows.Sort(new List<long>().Comparer);\n        for (int i = 0; i < rows.Count; i++) {\n            List<long> row = rows.get(i);\n            List<Tuple<long, long>> sorted = new List<Tuple<long, long>>();\n            for (int j = 0; j < row.Count; j++) {\n                sorted.Add(new Tuple<long, long>(row.get(j), j));\n            }\n            sorted.Sort(new List<long>().ComparerDescending);\n            for (int j = 0; j < sorted.Count; j++) {\n                if (sorted.get(j).Item1 == x) {\n                    result.Add(sorted.get(j));\n                    break;\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) {\n            return result;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) {\n                continue;\n            }\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null) return res;\n        long[] rows = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            rows[i] = lst[i].Count;\n        }\n        long[] cols = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            cols[i] = lst[i].Count;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) {\n            return result;\n        }\n        List<long> rows = lst.OrderBy(a => a.Count).ToList();\n        for (long row : rows) {\n            List<long> columns = lst[row].OrderByDescending(a => a);\n            for (long column : columns) {\n                if (column == x) {\n                    result.Add(new Tuple<long, long>(row, column));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null)\n            return result;\n        List<long> rows = lst.OrderBy(a => a.Count());\n        for (long i = 0; i < rows.Count(); i++) {\n            List<long> columns = rows.OrderByDescending(a => a);\n            for (long j = 0; j < columns.Count(); j++) {\n                if (columns[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                    break;\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null)\n            return result;\n        List<List<long>> rows = new List<List<long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            rows.Add(lst[i]);\n        }\n        rows.Sort((a, b) => a.Count - b.Count);\n        for (int i = 0; i < rows.Count; i++) {\n            List<long> row = rows[i];\n            row.Sort((a, b) => b - a);\n            for (int j = 0; j < row.Count; j++) {\n                if (row[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return result;\n        if (x < 0 || x >= lst.Count) return result;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] == null) continue;\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return result;\n        long rows = lst.Count;\n        long columns = lst.get(0).Count;\n        for (int i = 0; i < rows; i++) {\n            List<long> row = lst.get(i);\n            long row_size = row.Count;\n            if (row_size == 0) continue;\n            long row_index = 0;\n            long row_column = 0;\n            while (row_index < row_size) {\n                long column = row.get(row_index);\n                if (column == x) {\n                    result.Add(new Tuple<long, long>(i, row_column));\n                    break;\n                }\n                row_index++;\n                row_column++;\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        if (lst.Count == 0) return result;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.First.Count; i++) {\n                if (lst.First[i] == x) {\n                    result.Add(new Tuple<long, long>(0L, i));\n                    return result;\n                }\n            }\n            return result;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i].Count == 0) continue;\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                    return result;\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        if (lst == null) return ret;\n        if (lst.Count == 0) return ret;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.get(0).Count; i++) {\n                ret.Add(new Tuple<long, long>(0, i));\n            }\n            return ret;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst.get(i).Count; j++) {\n                if (lst.get(i).get(j) == x) {\n                    ret.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return ret;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst.Count == 0) return result;\n        List<long> row = lst.Get(0);\n        if (row.Count == 0) return result;\n        long row_size = row.Count;\n        long column_size = row_size;\n        for (int i = 1; i < lst.Count; i++) {\n            row = lst.Get(i);\n            if (row.Count != row_size) {\n                column_size = row.Count;\n                row_size = row.Count;\n            }\n        }\n        long row_index = 0;\n        long column_index = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            row = lst.Get(i);\n            for (int j = 0; j < row.Count; j++) {\n                if (row.Get(j) == x) {\n                    row_index = i;\n                    column_index = j;\n                    break;\n                }\n            }\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            row = lst.Get(i);\n            for (int j = 0; j < row.Count; j++) {\n                if (i == row_index && j == column_index) continue;\n                result.Add(Tuple.Create(i, j));\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) {\n            return result;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] == null) {\n                continue;\n            }\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) continue;\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return result;\n        long row = 0;\n        for (List<long> row_list : lst) {\n            if (row_list == null || row_list.Count == 0) continue;\n            long column = 0;\n            for (long column_value : row_list) {\n                if (column_value == x) {\n                    result.Add(new Tuple<long, long>(row, column));\n                }\n                column++;\n            }\n            row++;\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) continue;\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return result;\n        List<long> rows = lst.OrderBy(a => a.Count).ToList();\n        for (long row : rows) {\n            List<long> columns = lst.OrderBy(a => a.Count).ToList();\n            for (long column : columns) {\n                if (column == x) {\n                    result.Add(new Tuple<long, long>(row, column));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return result;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null || row.Count == 0)\n                continue;\n            long row_x = row[0];\n            if (row_x == x) {\n                for (int j = 0; j < row.Count; j++) {\n                    long col_x = row[j];\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return res;\n        long row = 0;\n        long col = 0;\n        for (List<long> row_list : lst) {\n            if (row_list == null || row_list.Count == 0)\n                continue;\n            for (long col_val : row_list) {\n                if (col_val == x) {\n                    res.Add(new Tuple<long, long>(row, col));\n                    return res;\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst.Count == 0) return result;\n        List<long> rows = lst.OrderBy(a => a.Count).ToList();\n        for (long i = 0; i < rows.Count; i++) {\n            List<long> columns = rows.OrderByDescending(a => a).ToList();\n            for (long j = 0; j < columns.Count; j++) {\n                if (columns[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                    break;\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] == null) continue;\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null) return res;\n        if (lst.Count == 0) return res;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.First.Count; i++) {\n                if (lst.First[i] == x) {\n                    res.Add(new Tuple<long, long>(0L, i));\n                    return res;\n                }\n            }\n            return res;\n        }\n        List<List<long>> rows = new List<List<long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            rows.Add(new List<long>(lst.GetRange(i, 1)));\n        }\n        List<Tuple<long, long>> sorted = rows.Sort((a, b) => {\n            if (a.Count < b.Count) return 1;\n            if (a.Count > b.Count) return -1;\n            return 0;\n        }).ToList();\n        for (int i = 0; i < sorted.Count; i++) {\n            for (int j = 0; j < sorted[i].Count; j++) {\n                if (sorted[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                    return res;\n                }\n            }\n        }\n        return res;",
    "        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return ret;\n        long row = 0;\n        long col = 0;\n        for (List<long> row_lst : lst) {\n            if (row_lst == null || row_lst.Count == 0) continue;\n            for (long col_lst : row_lst) {\n                if (col_lst == x) {\n                    ret.Add(new Tuple<long, long>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return ret;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        long row = 0;\n        long column = 0;\n        for (List<long> rowList : lst) {\n            for (long columnList : rowList) {\n                if (columnList == x) {\n                    result.Add(new Tuple<long, long>(row, column));\n                }\n                column++;\n            }\n            row++;\n            column = 0;\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return result;\n        long[] rows = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            rows[i] = lst[i].Count;\n        }\n        long[] columns = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            columns[i] = lst[i].Count;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) {\n            return result;\n        }\n        List<long> rows = lst.OrderBy(a => a.Count).ToList();\n        List<long> columns = rows.OrderByDescending(a => a);\n        for (long row : rows) {\n            for (long column : columns) {\n                if (lst.Get(row).Get(column) == x) {\n                    result.Add(new Tuple<long, long>(row, column));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst.Count == 0) {\n            return result;\n        }\n        long row = 0;\n        long col = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i].Count == 0) {\n                continue;\n            }\n            if (lst[i].Count == 1) {\n                if (lst[i][0] == x) {\n                    result.Add(new Tuple<long, long>(i, 0));\n                }\n                continue;\n            }\n            if (lst[i][0] == x) {\n                result.Add(new Tuple<long, long>(i, 0));\n            }\n            for (int j = 1; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        long row = 0;\n        long col = 0;\n        for (List<long> row_lst : lst) {\n            for (long col_lst : row_lst) {\n                if (col_lst == x) {\n                    ret.Add(new Tuple<long, long>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return ret;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst.Count == 0)\n            return res;\n        long row = 0;\n        long col = 0;\n        for (List<long> row_lst : lst) {\n            if (row_lst.Count == 0)\n                continue;\n            long row_col = 0;\n            for (long col_lst : row_lst) {\n                if (col_lst == x) {\n                    res.Add(new Tuple<long, long>(row, col));\n                    return res;\n                }\n                col_lst--;\n                row_col++;\n            }\n            col++;\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return result;\n        long row = 0;\n        for (List<long> rowList : lst) {\n            long column = 0;\n            for (long columnList : rowList) {\n                if (columnList == x) {\n                    result.Add(new Tuple<long, long>(row, column));\n                    break;\n                }\n                column++;\n            }\n            row++;\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return result;\n        List<long> rows = lst.OrderBy(a => a.Count).ToList();\n        for (long i = 0; i < rows.Count; i++) {\n            List<long> columns = rows.OrderByDescending(a => a).ToList();\n            for (long j = 0; j < columns.Count; j++) {\n                if (columns[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                    break;\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return result;\n        long[] rows = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            rows[i] = lst[i].Count;\n        }\n        long[] columns = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            columns[i] = lst[i].Count;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return result;\n        List<long> row = lst.GetAt(0);\n        if (row == null || row.Count == 0) return result;\n        long rowCount = row.Count;\n        long colCount = rowCount;\n        if (rowCount > 0) {\n            colCount = row.GetAt(0);\n        }\n        for (int i = 0; i < rowCount; i++) {\n            long rowIndex = i;\n            long colIndex = 0;\n            if (i > 0) {\n                rowIndex = row.GetAt(i);\n                colIndex = row.GetAt(i - 1);\n            }\n            List<long> subList = lst.GetAt(rowIndex);\n            if (subList == null || subList.Count == 0) continue;\n            long subListCount = subList.Count;\n            for (int j = 0; j < subListCount; j++) {\n                long subListIndex = j;\n                long subListValue = subList.GetAt(j);\n                if (subListIndex > 0) {\n                    subListIndex = subList.GetAt(subListIndex - 1);\n                }\n                if (subListIndex == x) {\n                    result.Add(new Tuple<long, long>(rowIndex, colIndex));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst.Count == 0) return result;\n        List<long> row = lst.Get(0);\n        if (row.Count == 0) return result;\n        long minRow = 0;\n        long maxRow = 0;\n        for (long i = 0; i < row.Count; i++) {\n            if (row.Get(i) > x) {\n                maxRow = i;\n                break;\n            }\n            if (row.Get(i) < x) {\n                minRow = i;\n                break;\n            }\n        }\n        if (minRow == maxRow) {\n            result.Add(new Tuple<long, long>(row.Get(minRow), minRow));\n            return result;\n        }\n        List<long> row1 = lst.Get(minRow);\n        List<long> row2 = lst.Get(maxRow);\n        for (long i = 0; i < row1.Count; i++) {\n            if (row1.Get(i) > x) {\n                result.Add(new Tuple<long, long>(row1.Get(i), maxRow));\n                break;\n            }\n            if (row1.Get(i) < x) {\n                result.Add(new Tuple<long, long>(row1.Get(i), minRow));\n                break;\n            }\n        }\n        for (long i = 0; i < row2.Count; i++) {\n            if (row2.Get(i) > x) {\n                result.Add(new Tuple<long, long>(row2.Get(i), maxRow));\n                break;\n            }\n            if (row2.Get(i) < x) {\n                result.Add(new Tuple<long, long>(row2.Get(i), minRow));\n                break;\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return result;\n        long row = 0;\n        for (List<long> rowList : lst) {\n            long column = 0;\n            for (long columnList : rowList) {\n                if (columnList == x) {\n                    result.Add(new Tuple<long, long>(row, column));\n                    break;\n                }\n                column++;\n            }\n            row++;\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) {\n            return result;\n        }\n        List<long> rows = new List<long>();\n        for (List<long> row : lst) {\n            rows.AddRange(row);\n        }\n        rows.Sort(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) {\n            return result;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null)\n            return result;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] == null)\n                continue;\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst.Count == 0) {\n            return result;\n        }\n        List<long> rows = new List<long>();\n        for (int i = 0; i < lst.Count; i++) {\n            rows.Add(lst[i].Count);\n        }\n        rows.Sort();\n        for (int i = 0; i < rows.Count; i++) {\n            List<long> columns = new List<long>();\n            for (int j = 0; j < lst[i].Count; j++) {\n                columns.Add(lst[i][j]);\n            }\n            columns.Sort(SortOrder.Descending);\n            for (int j = 0; j < columns.Count; j++) {\n                if (columns[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst.Count == 0) {\n            return result;\n        }\n        List<long> rows = lst.OrderBy(a => a.Count).ToList();\n        for (long row = 0; row < rows.Count; row++) {\n            List<long> columns = rows[row].OrderByDescending(a => a);\n            for (long column = 0; column < columns.Count; column++) {\n                if (columns[column] == x) {\n                    result.Add(new Tuple<long, long>(row, column));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) {\n            return result;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) {\n                continue;\n            }\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) {\n            return result;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null || row.Count == 0) {\n                continue;\n            }\n            long row_x = row[0];\n            if (row_x == x) {\n                result.Add(new Tuple<long, long>(i, 0));\n                for (int j = 1; j < row.Count; j++) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst.Count == 0) return result;\n        long rows = lst.Count;\n        long columns = lst.get(0).Count;\n        long[][] matrix = new long[rows][columns];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < columns; j++) {\n                matrix[i][j] = lst.get(i).get(j);\n            }\n        }\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < columns; j++) {\n                if (matrix[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) continue;\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst.Count == 0) {\n            return result;\n        }\n        List<long> rows = lst.OrderBy(a => a.Count).ToList();\n        for (long i = 0; i < rows.Count; i++) {\n            List<long> columns = rows.OrderByDescending(a => a).ToList();\n            for (long j = 0; j < columns.Count; j++) {\n                if (columns[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (List<long> rowList : lst) {\n            for (long colList : rowList) {\n                if (colList == x) {\n                    res.Add(new Tuple<long, long>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) continue;\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            long row_x = row.Count;\n            if (row_x > x) {\n                for (int j = 0; j < row_x; j++) {\n                    if (row[j] == x) {\n                        ret.Add(new Tuple<long, long>(i, j));\n                    }\n                }\n            }\n        }\n        return ret;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null) return res;\n        if (lst.Count == 0) return res;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.get(0).Count; i++) {\n                res.Add(new Tuple<long, long>(0, i));\n            }\n            return res;\n        }\n        long row = 0;\n        for (row = 0; row < lst.Count; row++) {\n            if (lst.get(row).Count == 0) continue;\n            long col = 0;\n            for (col = 0; col < lst.get(row).Count; col++) {\n                if (lst.get(row).get(col) == x) {\n                    res.Add(new Tuple<long, long>(row, col));\n                    break;\n                }\n            }\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null)\n            return result;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null)\n                continue;\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        if (lst.Count == 0) return result;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.get(0).Count; i++) {\n                result.Add(new Tuple<long, long>(0, i));\n            }\n            return result;\n        }\n        if (lst.Count == 2) {\n            for (long i = 0; i < lst.get(0).Count; i++) {\n                result.Add(new Tuple<long, long>(0, i));\n            }\n            for (long i = 0; i < lst.get(1).Count; i++) {\n                result.Add(new Tuple<long, long>(1, i));\n            }\n            return result;\n        }\n        if (lst.Count == 3) {\n            for (long i = 0; i < lst.get(0).Count; i++) {\n                result.Add(new Tuple<long, long>(0, i));\n            }\n            for (long i = 0; i < lst.get(1).Count; i++) {\n                result.Add(new Tuple<long, long>(1, i));\n            }\n            for (long i = 0; i < lst.get(2).Count; i++) {\n                result.Add(new Tuple<long, long>(2, i));\n            }\n            return result;\n        }\n        if (lst.Count == 4) {\n            for (long i = 0; i < lst.get(0).Count; i++) {\n                result.Add(new Tuple<long, long>(0, i));\n            }\n            for (long i = 0; i < lst.get(1).Count; i++) {\n                result.Add(new Tuple<long, long>(1, i));\n            }\n            for (long i = 0; i < lst.get(2).Count; i++) {\n                result.Add(new Tuple<long, long>(2,",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst.Count == 0)\n            return result;\n        long row = 0;\n        long column = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i].Count == 0)\n                continue;\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create(row, column));\n                    return result;\n                }\n                column++;\n            }\n            row++;\n            column = 0;\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return result;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.First.Count; i++) {\n                if (lst.First[i] == x) {\n                    result.Add(new Tuple<long, long>(0, i));\n                    break;\n                }\n            }\n            return result;\n        }\n        for (long i = 0; i < lst.Count; i++) {\n            for (long j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                    break;\n                }\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst.Count > 0) {\n            List<long> rows = lst.OrderBy(a => a.Count).ToList();\n            for (long i = 0; i < rows.Count; i++) {\n                List<long> columns = rows.OrderByDescending(a => a).ToList();\n                for (long j = 0; j < columns.Count; j++) {\n                    if (columns[j] == x) {\n                        result.Add(new Tuple<long, long>(i, j));\n                    }\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        long row = 0;\n        long column = 0;\n        for (List<long> rowList : lst) {\n            for (long columnList : rowList) {\n                if (columnList == x) {\n                    result.Add(new Tuple<long, long>(row, column));\n                }\n                column++;\n            }\n            row++;\n            column = 0;\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return result;\n        List<long> rows = new List<long>();\n        for (int i = 0; i < lst.Count; i++) {\n            rows.Add(lst[i].Count);\n        }\n        rows.Sort(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) continue;\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        long rows = lst.Count;\n        long columns = lst.get(0).Count;\n        long row = 0, column = 0;\n        for (long i = 0; i < rows; i++) {\n            for (long j = 0; j < columns; j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                    row = i;\n                    column = j;\n                    break;\n                }\n            }\n        }\n        if (result.Count == 0) return result;\n        List<Tuple<long, long>> sorted = new List<Tuple<long, long>>();\n        for (long i = 0; i < result.Count; i++) {\n            sorted.Add(result.get(i));\n        }\n        sorted.Sort((a, b) => {\n            if (a.Item1 < b.Item1) return -1;\n            if (a.Item1 > b.Item1) return 1;\n            if (a.Item2 < b.Item2) return -1;\n            if (a.Item2 > b.Item2) return 1;\n            return 0;\n        });\n        for (long i = 0; i < sorted.Count; i++) {\n            result.Add(sorted.get(i));\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return result;\n        List<long> rows = lst.OrderBy(a => a.Count).ToList();\n        for (long row : rows) {\n            List<long> columns = lst[row].OrderByDescending(a => a);\n            for (long column : columns) {\n                if (column == x) {\n                    result.Add(new Tuple<long, long>(row, column));\n                    break;\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) {\n            return result;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) {\n                continue;\n            }\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) continue;\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        long[] rows = new long[lst.Count];\n        long[] columns = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            rows[i] = lst[i].Count;\n            columns[i] = lst[i].Count;\n        }\n        List<Tuple<long, long>> sorted = Sort(rows, columns);\n        for (int i = 0; i < sorted.Count; i++) {\n            long row = sorted[i].Item1;\n            long column = sorted[i].Item2;\n            if (row == x) {\n                for (int j = 0; j < lst.Count; j++) {\n                    if (lst[j].Count == column) {\n                        for (int k = 0; k < lst[j].Count; k++) {\n                            result.Add(new Tuple<long, long>(lst[j][k], k));\n                        }\n                    }\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return result;\n        long rows = lst.Count;\n        long columns = lst.get(0).Count;\n        long[] rowsArray = new long[rows];\n        for (int i = 0; i < rows; i++) {\n            rowsArray[i] = i;\n        }\n        long[] columnsArray = new long[columns];\n        for (int i = 0; i < columns; i++) {\n            columnsArray[i] = i;\n        }\n        List<long[]> sortedRows = Sort(rowsArray);\n        List<long[]> sortedColumns = Sort(columnsArray);\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < columns; j++) {\n                if (lst.get(sortedRows[i])[sortedColumns[j]] == x) {\n                    result.Add(new Tuple<long, long>(sortedRows[i], sortedColumns[j]));\n                }\n            }\n        }\n        return result;\n    }\n\n    private static List<long[]> Sort(long[] arr) {\n        List<long[]> result = new List<long[]>();\n        long[] sorted = new long[arr.Length];\n        for (int i = 0; i < arr.Length; i++) {\n            sorted[i] = arr[i];\n        }\n        Arrays.sort(sorted);\n        for (int i = 0; i < sorted.Length; i++) {\n            result.Add(new long[]{sorted[i]});\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst.Count == 0)\n            return res;\n        long row = 0;\n        long col = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i].Count == 0)\n                continue;\n            if (lst[i].Count > col) {\n                row = i;\n                col = lst[i].Count;\n            }\n        }\n        for (int i = 0; i < lst[row].Count; i++) {\n            if (lst[row][i] == x) {\n                res.Add(new Tuple<long, long>(row, i));\n            }\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return result;\n        long[] rows = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++)\n            rows[i] = lst[i].Count;\n        long[] columns = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++)\n            columns[i] = lst[i].Count;\n        for (int i = 0; i < lst.Count; i++)\n            for (int j = 0; j < lst[i].Count; j++)\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                    break;\n                }\n        for (int i = 0; i < lst.Count; i++)\n            for (int j = 0; j < lst[i].Count; j++)\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                    break;\n                }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        List<long> rows = new List<long>();\n        for (int i = 0; i < lst.Count; i++) {\n            rows.Add(lst[i].Count);\n        }\n        List<long> sortedRows = rows.OrderByDescending(x);\n        for (int i = 0; i < sortedRows.Count; i++) {\n            List<long> sortedCols = lst[sortedRows[i]].OrderByDescending(x);\n            for (int j = 0; j < sortedCols.Count; j++) {\n                result.Add(new Tuple<long, long>(sortedRows[i], sortedCols[j]));\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null)\n            return result;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null)\n                continue;\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst.Count == 0)\n            return res;\n        List<long> row = lst.Get(0);\n        long rowCount = row.Count;\n        long rowIndex = 0;\n        long colIndex = 0;\n        while (rowIndex < rowCount) {\n            if (row.Get(rowIndex) == x) {\n                res.Add(new Tuple<long, long>(rowIndex, colIndex));\n                rowIndex++;\n                colIndex++;\n            }\n            else if (row.Get(rowIndex) > x)\n                colIndex++;\n            else\n                rowIndex++;\n        }\n        if (res.Count == 0)\n            return res;\n        List<long> sortedRow = new List<long>();\n        for (long i = 0; i < res.Count; i++) {\n            sortedRow.Add(res.Get(i).Item1);\n        }\n        Collections.Sort(sortedRow, new Comparator<long>() {\n            public int Compare(long x, long y) {\n                return (int)y - (int)x;\n            }\n        });\n        List<long> sortedCol = new List<long>();\n        for (long i = 0; i < sortedRow.Count; i++) {\n            sortedCol.Add(sortedRow.Get(i) + rowCount);\n        }\n        Collections.Sort(sortedCol, new Comparator<long>() {\n            public int Compare(long x, long y) {\n                return (int)y - (int)x;\n            }\n        });\n        for (long i = 0; i < sortedCol.Count; i++) {\n            res.Add(new Tuple<long, long>(sortedRow.Get(i), sortedCol.Get(i)));\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst.Count > 0) {\n            int row = 0;\n            for (List<long> rowList : lst) {\n                int column = 0;\n                for (long columnList : rowList) {\n                    if (columnList == x) {\n                        result.Add(new Tuple<long, long>(row, column));\n                    }\n                    column++;\n                }\n                row++;\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        if (lst.Count == 0) return result;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.get(0).Count; i++) {\n                result.Add(new Tuple<long, long>(i, lst.get(0).get(i)));\n            }\n            return result;\n        }\n        for (long i = 0; i < lst.Count; i++) {\n            for (long j = 0; j < lst.get(i).Count; j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        // Write your code here\n        if (lst == null || lst.Count == 0)\n            return new List<Tuple<long, long>>();\n        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row.Count == 0)\n                continue;\n            long row_x = row[0];\n            if (row_x == x) {\n                for (int j = 0; j < row.Count; j++) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null)\n            return result;\n        List<long> rows = new List<long>();\n        for (List<long> row : lst) {\n            rows.AddRange(row);\n        }\n        rows.Sort(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst.Count > 0) {\n            List<long> row = lst.Get(0);\n            List<long> sortedRow = new List<long>();\n            for (long i : row) {\n                sortedRow.Add(i);\n            }\n            sortedRow.Sort(new long.Compare());\n            for (long i = 0; i < sortedRow.Count; i++) {\n                long y = sortedRow[i];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, y));\n                }\n            }\n            for (int i = 1; i < lst.Count; i++) {\n                List<long> row2 = lst.Get(i);\n                List<long> sortedRow2 = new List<long>();\n                for (long i2 : row2) {\n                    sortedRow2.Add(i2);\n                }\n                sortedRow2.Sort(new long.Compare());\n                for (long i2 = 0; i2 < sortedRow2.Count; i2++) {\n                    long y2 = sortedRow2[i2];\n                    if (y2 == x) {\n                        result.Add(new Tuple<long, long>(i, i2));\n                    }\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null)\n            return result;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] == null)\n                continue;\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return result;\n        long row = 0;\n        long column = 0;\n        for (List<long> rowList : lst) {\n            if (rowList == null || rowList.Count == 0)\n                continue;\n            long rowCount = rowList.Count;\n            for (long columnList : rowList) {\n                if (columnList == x) {\n                    result.Add(new Tuple<long, long>(row, column));\n                    return result;\n                }\n                column++;\n            }\n            row++;\n            column = 0;\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        if (lst.Count == 0) return result;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.get(0).Count; i++) {\n                result.Add(new Tuple<long, long>(0, i));\n            }\n            return result;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst.get(i).Count; j++) {\n                if (lst.get(i).get(j) == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return result;\n        long row = 0;\n        long col = 0;\n        for (List<long> rowList : lst) {\n            if (rowList == null || rowList.Count == 0)\n                continue;\n            for (long colList : rowList) {\n                if (colList == x) {\n                    result.Add(new Tuple<long, long>(row, col));\n                    break;\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null) return res;\n        if (lst.Count == 0) return res;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.get(0).Count; i++) {\n                res.Add(new Tuple<long, long>(0L, i));\n            }\n            return res;\n        }\n        List<long> rows = new List<long>();\n        for (int i = 0; i < lst.Count; i++) {\n            rows.Add(lst.get(i).Count);\n        }\n        rows.Sort();\n        for (int i = 0; i < rows.Count; i++) {\n            List<long> cols = new List<long>();\n            for (int j = 0; j < lst.get(i).Count; j++) {\n                cols.Add(lst.get(i).get(j));\n            }\n            cols.Sort(SortOrder.Descending);\n            for (int j = 0; j < cols.Count; j++) {\n                if (cols.get(j) == x) {\n                    for (int k = 0; k < lst.get(i).Count; k++) {\n                        res.Add(new Tuple<long, long>(i, k));\n                    }\n                    return res;\n                }\n            }\n        }\n        return res;",
    "        // Write your code here\n        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return res;\n        List<List<long>> rows = lst.OrderBy(a => a.Count).ToList();\n        for (int i = 0; i < rows.Count; i++) {\n            List<long> row = rows[i];\n            long row_x = row.Count;\n            if (row_x > x) {\n                for (int j = 0; j < row.Count; j++) {\n                    if (row[j] == x) {\n                        res.Add(new Tuple<long, long>(i, j));\n                        break;\n                    }\n                }\n            }\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] == null) continue;\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        result.Sort((a, b) => a.Item1 - b.Item1);\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = result[i].Item1 < 0 ? result[i].Item2 : result[i].Item1;\n        }\n        result.Sort((a, b) => a.Item2 - b.Item2);\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null)\n            return res;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row.Count == 0)\n                continue;\n            long row_x = row[0];\n            if (row_x == x) {\n                for (int j = 0; j < row.Count; j++) {\n                    res.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null)\n            return result;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] == null)\n                continue;\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return result;\n        long[] rows = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            rows[i] = lst[i].Count;\n        }\n        long[] columns = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            columns[i] = lst[i].Count - 1;\n        }\n        long[] sortedRows = new long[lst.Count];\n        long[] sortedColumns = new long[lst.Count];\n        Sort(rows, sortedRows);\n        Sort(columns, sortedColumns);\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(sortedRows[i], sortedColumns[j]));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return res;\n        long[] rows = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            rows[i] = lst[i].Count;\n        }\n        long[] cols = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            cols[i] = lst[i].Count;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] == null) continue;\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) {\n            return result;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) {\n                continue;\n            }\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (List<long> row_lst : lst) {\n            if (row_lst == null || row_lst.Count == 0) continue;\n            for (long col_lst : row_lst) {\n                if (col_lst == x) {\n                    res.Add(new Tuple<long, long>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) {\n            return result;\n        }\n        long row = 0;\n        long col = 0;\n        for (List<long> rowList : lst) {\n            for (long colList : rowList) {\n                if (colList == x) {\n                    result.Add(new Tuple<long, long>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        List<List<long>> rows = lst.Select(a => a);\n        rows.Sort((a, b) => a.Count - b.Count);\n        for (List<long> row : rows) {\n            List<Tuple<long, long>> coordinates = new List<Tuple<long, long>>();\n            for (long column : row) {\n                coordinates.Add(new Tuple<long, long>(row.Count - 1, column));\n            }\n            coordinates.Sort((a, b) => a.Item1 - b.Item1);\n            for (Tuple<long, long> coordinate : coordinates) {\n                if (coordinate.Item1 == x) {\n                    result.Add(coordinate);\n                    break;\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return ret;\n        long row = 0;\n        long col = 0;\n        for (List<long> row_lst : lst) {\n            if (row_lst == null || row_lst.Count == 0) continue;\n            for (long col_lst : row_lst) {\n                if (col_lst == x) {\n                    ret.Add(new Tuple<long, long>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return ret;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null)\n            return res;\n        if (lst.Count == 0)\n            return res;\n        long[] rows = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            rows[i] = lst[i].Count;\n        }\n        long[] cols = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            cols[i] = lst[i].Count;\n        }\n        long[] sorted_rows = new long[lst.Count];\n        long[] sorted_cols = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            sorted_rows[i] = lst[i].Count;\n            sorted_cols[i] = lst[i].Count;\n        }\n        Sort(sorted_rows, rows);\n        Sort(sorted_cols, cols);\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return res;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return res;\n        long[] rows = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            rows[i] = lst[i].Count;\n        }\n        long[] cols = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            cols[i] = lst[i].Count;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return result;\n        List<long> rows = new List<long>();\n        for (int i = 0; i < lst.Count; i++) {\n            rows.Add(lst[i].Count);\n        }\n        rows.Sort(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer",
    "        // Write your code here\n        if (lst == null || lst.Count == 0) return new List<Tuple<long, long>>();\n        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null || row.Count == 0) continue;\n            long row_x = row.Count - 1;\n            for (int j = 0; j < row.Count; j++) {\n                long col_x = j;\n                if (row[j] == x) {\n                    result.Add(new Tuple<long, long>(i, col_x));\n                    break;\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) {\n            return result;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row != null) {\n                for (int j = 0; j < row.Count; j++) {\n                    long y = row[j];\n                    if (y == x) {\n                        result.Add(new Tuple<long, long>(i, j));\n                    }\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst.Count > 0) {\n            List<long> rows = lst.Get(0);\n            for (long i = 0; i < rows.Count; i++) {\n                long row = rows.Get(i);\n                List<long> columns = lst.Get(row);\n                for (long j = 0; j < columns.Count; j++) {\n                    long column = columns.Get(j);\n                    if (column == x) {\n                        result.Add(new Tuple<long, long>(row, j));\n                    }\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) {\n            return result;\n        }\n        List<List<long>> rows = new List<List<long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            rows.Add(lst[i]);\n        }\n        rows.Sort(new List<long>().Comparer);\n        for (int i = 0; i < rows.Count; i++) {\n            List<long> row = rows[i];\n            row.Sort(new List<long>().ComparerDescending);\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst.Count == 0)\n            return res;\n        long row = 0;\n        long col = 0;\n        long row_count = 0;\n        long col_count = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            row_count = lst[i].Count;\n            col_count = lst[i].Count;\n            for (int j = 0; j < row_count; j++) {\n                col = lst[i][j];\n                if (col == x) {\n                    res.Add(new Tuple<long, long>(row, col));\n                }\n            }\n            for (int j = 0; j < col_count; j++) {\n                row = lst[i][j];\n                if (row == x) {\n                    res.Add(new Tuple<long, long>(row, col));\n                }\n            }\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        long row = 0;\n        long column = 0;\n        long size = 0;\n        for (List<long> row_ : lst) {\n            size = row_.size();\n            for (long column_ : row_) {\n                if (column_ == x) {\n                    result.Add(new Tuple<long, long>(row, column));\n                }\n                column++;\n            }\n            row++;\n            column = 0;\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return res;\n        long row = 0;\n        long col = 0;\n        for (List<long> row_list : lst) {\n            for (long col_list : row_list) {\n                if (col_list == x) {\n                    res.Add(new Tuple<long, long>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) {\n            return result;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            for (int j = 0; j < row.Count; j++) {\n                if (row[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) {\n            return result;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row != null) {\n                for (int j = 0; j < row.Count; j++) {\n                    long y = row[j];\n                    if (y == x) {\n                        result.Add(new Tuple<long, long>(i, j));\n                    }\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return result;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null || row.Count == 0)\n                continue;\n            long row_x = row.Count - 1;\n            for (int j = 0; j < row.Count; j++) {\n                long col_x = j;\n                if (row[j] == x) {\n                    result.Add(new Tuple<long, long>(i, col_x));\n                    break;\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        if (lst == null) return ret;\n        List<long> rows = new List<long>();\n        for (List<long> row : lst) {\n            rows.AddRange(row);\n        }\n        rows.Sort(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer(new List<long>().Comparer",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return result;\n        List<long> rows = lst.OrderBy(a => a.Count).ToList();\n        for (long i = 0; i < rows.Count; i++) {\n            List<long> columns = rows.OrderByDescending(a => a);\n            for (long j = 0; j < columns.Count; j++) {\n                if (columns[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                    break;\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null)\n            return res;\n        if (lst.Count == 0)\n            return res;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.get(0).Count; i++) {\n                res.Add(new Tuple<long, long>(0, i));\n            }\n            return res;\n        }\n        if (lst.Count == 2) {\n            for (long i = 0; i < lst.get(0).Count; i++) {\n                res.Add(new Tuple<long, long>(0, i));\n            }\n            for (long i = 0; i < lst.get(1).Count; i++) {\n                res.Add(new Tuple<long, long>(1, i));\n            }\n            return res;\n        }\n        if (lst.Count == 3) {\n            for (long i = 0; i < lst.get(0).Count; i++) {\n                res.Add(new Tuple<long, long>(0, i));\n            }\n            for (long i = 0; i < lst.get(1).Count; i++) {\n                res.Add(new Tuple<long, long>(1, i));\n            }\n            for (long i = 0; i < lst.get(2).Count; i++) {\n                res.Add(new Tuple<long, long>(2, i));\n            }\n            return res;\n        }\n        if (lst.Count == 4) {\n            for (long i = 0; i < lst.get(0).Count; i++) {\n                res.Add(new Tuple<long, long>(0, i));\n            }\n            for (long i = 0; i < lst.get(1).Count; i++) {\n                res.Add(new Tuple<long, long>(1, i));\n            }\n            for (long i = 0; i < lst.get(2).Count; i++) {\n                res.Add(new Tuple<long,",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null) continue;\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst.Count == 0) return result;\n        List<long> rows = new List<long>();\n        for (int i = 0; i < lst.Count; i++) {\n            rows.Add(lst[i].Count);\n        }\n        rows.Sort();\n        for (int i = 0; i < rows.Count; i++) {\n            List<long> columns = new List<long>();\n            for (int j = 0; j < lst[i].Count; j++) {\n                columns.Add(lst[i][j]);\n            }\n            columns.SortDescending();\n            for (int j = 0; j < columns.Count; j++) {\n                if (columns[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst.Count == 0)\n            return result;\n        List<List<long>> rows = new List<List<long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            rows.Add(lst[i]);\n        }\n        rows.Sort((a, b) => a.Count > b.Count ? -1 : 1);\n        for (int i = 0; i < rows.Count; i++) {\n            List<long> row = rows[i];\n            List<long> sortedRow = new List<long>();\n            for (int j = 0; j < row.Count; j++) {\n                sortedRow.Add(row[j]);\n            }\n            sortedRow.Sort((a, b) => a > b ? -1 : 1);\n            for (int j = 0; j < sortedRow.Count; j++) {\n                long y = sortedRow[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        List<long> rows = lst.OrderBy(a => a.Count).ToList();\n        for (long i = 0; i < rows.Count; i++) {\n            List<long> columns = rows.OrderByDescending(a => a).ToList();\n            for (long j = 0; j < columns.Count; j++) {\n                if (columns[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                    break;\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return res;\n        long row = 0;\n        for (List<long> rowList : lst) {\n            long col = 0;\n            for (long colList : rowList) {\n                if (colList == x) {\n                    res.Add(new Tuple<long, long>(row, col));\n                    break;\n                }\n                col++;\n            }\n            row++;\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null)\n            return result;\n        List<long> rows = new List<long>();\n        for (int i = 0; i < lst.Count; i++) {\n            rows.Add(lst[i].Count);\n        }\n        List<long> sortedRows = rows.OrderByDescending(x);\n        for (int i = 0; i < sortedRows.Count; i++) {\n            List<long> sortedColumns = lst[sortedRows[i]].OrderByDescending(x);\n            for (int j = 0; j < sortedColumns.Count; j++) {\n                result.Add(new Tuple<long, long>(sortedRows[i], sortedColumns[j]));\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        if (lst.Count == 0) return result;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.First.Count; i++) {\n                if (lst.First[i] == x) {\n                    result.Add(new Tuple<long, long>(0L, i));\n                    return result;\n                }\n            }\n            return result;\n        }\n        for (long i = 0; i < lst.First.Count; i++) {\n            if (lst.First[i] == x) {\n                result.Add(new Tuple<long, long>(0L, i));\n                return result;\n            }\n        }\n        for (long i = 0; i < lst.Count - 1; i++) {\n            for (long j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i + 1L, j));\n                    return result;\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) {\n            return result;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row.Count > x) {\n                result.Add(new Tuple<long, long>(i, x));\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0) return result;\n        long row = 0;\n        long column = 0;\n        for (List<long> rowList : lst) {\n            for (long columnList : rowList) {\n                if (columnList == x) {\n                    result.Add(new Tuple<long, long>(row, column));\n                }\n                column++;\n            }\n            row++;\n            column = 0;\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null)\n            return result;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null)\n                continue;\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null)\n            return res;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null)\n                continue;\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) {\n            return result;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] != null) {\n                for (int j = 0; j < lst[i].Count; j++) {\n                    if (lst[i][j] == x) {\n                        result.Add(new Tuple<long, long>(i, j));\n                    }\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return res;\n        long row = 0;\n        for (List<long> rowLst : lst) {\n            if (rowLst == null || rowLst.Count == 0)\n                continue;\n            long col = 0;\n            for (long colLst : rowLst) {\n                if (colLst == x)\n                    res.Add(new Tuple<long, long>(row, col));\n                col++;\n            }\n            row++;\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return result;\n        List<long> rows = lst.OrderBy(a => a.Count).ToList();\n        for (long i = 0; i < rows.Count; i++) {\n            List<long> columns = rows.OrderByDescending(a => a).ToList();\n            for (long j = 0; j < columns.Count; j++) {\n                if (columns[j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        long row = 0;\n        long col = 0;\n        for (List<long> rowList : lst) {\n            for (long colList : rowList) {\n                if (colList == x) {\n                    result.Add(new Tuple<long, long>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return result;\n        List<List<long>> rows = new List<List<long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            rows.Add(lst[i]);\n        }\n        rows.Sort(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new List<long>().ComparerBy(new",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst.Count == 0)\n            return res;\n        long[] rows = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            rows[i] = lst[i].Count;\n        }\n        long[] cols = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            cols[i] = lst[i].Count;\n        }\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return res;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null || lst.Count == 0)\n            return res;\n        long[] rows = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++)\n            rows[i] = lst[i].Count;\n        long[] cols = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++)\n            cols[i] = lst[i].Count;\n        for (int i = 0; i < lst.Count; i++)\n            for (int j = 0; j < lst[i].Count; j++)\n                if (lst[i][j] == x) {\n                    res.Add(new Tuple<long, long>(i, j));\n                    break;\n                }\n        return res;",
    "        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        if (lst == null) return ret;\n        long[] rows = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            rows[i] = lst[i].Count;\n        }\n        long[] cols = new long[lst.Count];\n        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n                cols[i] = lst[i][j];\n            }\n        }\n        long[] sortedRows = Sort(rows);\n        long[] sortedCols = Sort(cols);\n        for (int i = 0; i < sortedRows.Length; i++) {\n            for (int j = 0; j < sortedCols.Length; j++) {\n                if (sortedRows[i] == x) {\n                    ret.Add(new Tuple<long, long>(sortedCols[j], sortedRows[i]));\n                }\n            }\n        }\n        return ret;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        if (lst.Count == 0) return result;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.First.Count; i++) {\n                result.Add(new Tuple<long, long>(i, lst.First[i]));\n            }\n            return result;\n        }\n        for (long i = 0; i < lst.Count; i++) {\n            if (lst[i].Count == 0) continue;\n            for (long j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        if (lst == null)\n            return res;\n        long row = 0;\n        long col = 0;\n        for (List<long> row_lst : lst) {\n            for (long col_lst : row_lst) {\n                if (col_lst == x) {\n                    res.Add(new Tuple<long, long>(row, col));\n                }\n                col++;\n            }\n            row++;\n            col = 0;\n        }\n        return res;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null)\n            return result;\n        for (int i = 0; i < lst.Count; i++) {\n            List<long> row = lst[i];\n            if (row == null)\n                continue;\n            for (int j = 0; j < row.Count; j++) {\n                long y = row[j];\n                if (y == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                }\n            }\n        }\n        return result;",
    "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        if (lst == null) return result;\n        if (lst.Count == 0) return result;\n        if (lst.Count == 1) {\n            for (long i = 0; i < lst.First.Count; i++) {\n                if (lst.First[i] == x) {\n                    result.Add(new Tuple<long, long>(0L, i));\n                    return result;\n                }\n            }\n            return result;\n        }\n        for (long i = 0; i < lst.Count; i++) {\n            if (lst[i].Count == 0) continue;\n            for (long j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n                    result.Add(new Tuple<long, long>(i, j));\n                    return result;\n                }\n            }\n        }\n        return result;"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}