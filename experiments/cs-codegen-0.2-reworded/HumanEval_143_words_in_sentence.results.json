{
  "name": "HumanEval_143_words_in_sentence",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        primes[0] = 1;\n        for (int i = 1; i < words.Length; i++) {\n            primes[i] = primes[i - 1] * 2;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes[i]; j++) {\n                if (primes[i] % lengths[i] == 0) {\n                    primes[i] = primes[i] / lengths[i];\n                    break;\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] > 1) {\n                sb.Append(words[i]);\n                sb.Append(' ');\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3wy0d5hc.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string[] newWords = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            newWords[i] = words[primeIndex[i]];\n        }\n        return String.Join(\" \", newWords);\n    }\n\n    private static int IsPrime(string word) {\n        int len = word.Length;\n        if (len == 1) {\n            return 1;\n        }\n        int i = 2;\n        while (i < len) {\n            if (word[i] != word[0]) {\n                i++;\n                continue;\n            }\n            int j = 2;\n            while (j < len) {\n                if (word[j] != word[i]) {\n                    j++;\n                    continue;\n                }\n                if (i + j == len) {\n                    return 1;\n                }\n                int k = i + j;\n                while (k < len) {\n                    if (word[k] != word[j]) {\n                        k++;\n                        continue;\n                    }\n                    if (k - i == j) {\n                        return 1;\n                    }\n                    k++;\n                }\n                j++;\n            }\n            i++;\n        }\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <723548a049c64b31aa121682f3429619>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <723548a049c64b31aa121682f3429619>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        var result = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            if (IsPrime(words[i].Length())) {\n                result[i] = words[i];\n            }\n        }\n        return String.Join(\" \", result);\n    }\n\n    private static bool IsPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        if (num == 2) {\n            return true;\n        }\n        if (num % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= num; i += 2) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplrdvml3d.cs(28,34): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j] && primeIndex[i] != j) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[primeIndex[i]];\n        }\n        return result;\n    }\n\n    private static int IsPrime(string word) {\n        int prime = 2;\n        for (int i = 0; i < word.Length; i++) {\n            prime = (prime * prime) % 1000000007;\n        }\n        return prime;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1ecf9d335fb8404a9e05a7d41f294905>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1ecf9d335fb8404a9e05a7d41f294905>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = PrimeNumbers.IsPrime(words[i].Length());\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (words[i] == words[j] && primes[i] == primes[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndex[i] != 0) {\n                result += words[i];\n                result += \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpeux99vj2.cs(28,25): error CS0103: The name 'PrimeNumbers' does not exist in the current context\n/tmp/tmpeux99vj2.cs(28,55): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(lengths[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[j] == 1 && primeIndex[j] == 0) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[primeIndex[i]];\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwf6dqjnj.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpwf6dqjnj.cs(32,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (words[i] == words[j] && primes[i] == primes[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[primeIndex[i]];\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5v0ru30k.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] == max) {\n                sb.Append(words[i]);\n                sb.Append(' ');\n            }\n        }\n        return sb.ToString().TrimEnd(' ');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc6apuxt1.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 0) {\n                lengths[i]--;\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 1) {\n                lengths[i]++;\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 1) {\n                words[i] = words[i].Substring(0, lengths[i] / 2);\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n            sb.Append(words[i]);\n            if (i < words.Length - 1) {\n                sb.Append(' ');\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgknvok1x.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primeNumbers = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int primeNumberCount = primeNumbers.Length;\n        int wordCount = words.Length;\n        int[] primeNumbersIndex = new int[wordCount];\n        for (int i = 0; i < wordCount; i++) {\n            primeNumbersIndex[i] = -1;\n        }\n        for (int i = 0; i < primeNumberCount; i++) {\n            for (int j = 0; j < wordCount; j++) {\n                if (primeNumbers[i] == words[j].Length()) {\n                    primeNumbersIndex[j] = i;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < wordCount; i++) {\n            if (primeNumbersIndex[i] != -1) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjpis5xpx.cs(35,49): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primeNumbers = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers[i] = IsPrime(words[i]);\n        }\n        int[] primeNumbers2 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers2[i] = IsPrime(words[i]);\n        }\n        int[] primeNumbers3 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers3[i] = IsPrime(words[i]);\n        }\n        int[] primeNumbers4 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers4[i] = IsPrime(words[i]);\n        }\n        int[] primeNumbers5 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers5[i] = IsPrime(words[i]);\n        }\n        int[] primeNumbers6 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers6[i] = IsPrime(words[i]);\n        }\n        int[] primeNumbers7 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers7[i] = IsPrime(words[i]);\n        }\n        int[] primeNumbers8 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers8[i] = IsPrime(words[i]);\n        }\n        int[] primeNumbers9 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers9[i] = IsPrime(words[i]);\n        }\n        int[] primeNumbers10 = new int[words.Length];\n        for (int i = 0; i < words.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn13k0kh8.cs(63,35): error CS1001: Identifier expected\n/tmp/tmpn13k0kh8.cs(63,35): error CS1002: ; expected\n/tmp/tmpn13k0kh8.cs(63,35): error CS1026: ) expected\n/tmp/tmpn13k0kh8.cs(63,35): error CS1525: Invalid expression term '}'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] prime_count = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    prime_count[j]++;\n                }\n            }\n        }\n        int max_prime_count = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (prime_count[i] > max_prime_count) {\n                max_prime_count = prime_count[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0 && prime_count[j] == max_prime_count) {\n                    result += words[i];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpghz3oji2.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpghz3oji2.cs(44,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = i + 1; j < words.Length; j++) {\n                if (lengths[i] * lengths[j] > Math.Max(words[i].Length(), words[j].Length())) {\n                    lengths[i] = Math.Max(words[i].Length(), words[j].Length());\n                }\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 0) {\n                lengths[i]--;\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 1) {\n                lengths[i]++;\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 1) {\n                words[i] = words[i].Substring(0, lengths[i] / 2);\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[i];\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg5v62rvh.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpg5v62rvh.cs(32,65): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpg5v62rvh.cs(32,84): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpg5v62rvh.cs(33,52): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpg5v62rvh.cs(33,71): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[lengths.Length];\n        for (int i = 0; i < lengths.Length; i++) {\n            primes[i] = GetPrime(lengths[i]);\n        }\n        int[] primeIndex = new int[lengths.Length];\n        for (int i = 0; i < lengths.Length; i++) {\n            primeIndex[i] = 0;\n        }\n        for (int i = 0; i < lengths.Length; i++) {\n            for (int j = 0; j < lengths.Length; j++) {\n                if (lengths[i] == lengths[j] && primes[i] == primes[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < lengths.Length; i++) {\n            result += words[primeIndex[i]];\n            result += \" \";\n        }\n        return result;\n    }\n\n    private static int GetPrime(int num) {\n        if (num == 2) return 2;\n        if (num == 1) return 1;\n        if (num % 2 == 0) return 2;\n        int i = 3;\n        while (i * i <= num) {\n            if (num % i == 0) return i;\n            i += 2;\n        }\n        return num;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp81c86gol.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] prime_count = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    prime_count[j]++;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < primes.Length; i++) {\n            if (prime_count[i] > 0) {\n                result += words[i];\n                result += \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnpcr1vwd.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] == 0) {\n                return \"\";\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] == 0) {\n                return \"\";\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] == 0) {\n                return \"\";\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] == 0) {\n                return \"\";\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] == 0) {\n                return \"\";\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] == 0) {\n                return \"\";\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] == 0) {\n                return \"\";\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] == 0) {\n                return \"\";\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] == 0) {\n                return \"\";\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] == 0) {\n                return \"\";\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primes\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjldpkzrg.cs(81,23): error CS1026: ) expected\n/tmp/tmpjldpkzrg.cs(81,23): error CS1525: Invalid expression term '}'\n/tmp/tmpjldpkzrg.cs(81,23): error CS1002: ; expected\n/tmp/tmpjldpkzrg.cs(83,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpjldpkzrg.cs(93,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndices = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndices[i] = -1;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = i + 1; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndices[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndices[i] != -1) {\n                result += words[i] + \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvludifep.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(lengths[i]);\n        }\n        int[] primeIndices = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndices[i] = -1;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndices[i] = j;\n                    break;\n                }\n            }\n        }\n        string[] newWords = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            newWords[i] = words[primeIndices[i]];\n        }\n        return String.Join(\" \", newWords);\n    }\n\n    private static int IsPrime(int n) {\n        if (n < 2) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n            return 0;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_vzs3dx3.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndices = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndices[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[j] == 1 && primeIndices[j] == 0) {\n                    primeIndices[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndices[i] != 0) {\n                result += words[primeIndices[i]];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl7gjbv8j.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[lengths.Length];\n        primes[0] = 2;\n        for (int i = 1; i < lengths.Length; i++) {\n            primes[i] = primes[i - 1] + 1;\n        }\n        for (int i = 0; i < lengths.Length; i++) {\n            for (int j = i + 1; j < lengths.Length; j++) {\n                if (lengths[i] * primes[j] > lengths[j]) {\n                    lengths[j] = lengths[i] * primes[j];\n                }\n            }\n        }\n        for (int i = 0; i < lengths.Length; i++) {\n            if (lengths[i] > primes[i]) {\n                lengths[i] = primes[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < lengths.Length; i++) {\n            if (lengths[i] > 1) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp30w8mms4.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] result = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            result[i] = primes[i];\n        }\n        return String.Join(\" \", words).ToLower();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp87kfh4uf.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeCount[i] == max) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp33scqbj0.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        Array.Sort(lengths);\n        int[] primes = new int[lengths.Length];\n        for (int i = 0; i < lengths.Length; i++) {\n            primes[i] = GetPrime(lengths[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = GetPrimeIndex(primes, words[i]);\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n            sb.Append(words[primeIndex[i]]);\n            if (i < words.Length - 1) {\n                sb.Append(' ');\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsu2ppx_2.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpsu2ppx_2.cs(33,25): error CS0103: The name 'GetPrime' does not exist in the current context\n/tmp/tmpsu2ppx_2.cs(37,29): error CS0103: The name 'GetPrimeIndex' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                }\n            }\n        }\n        int max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n                maxIndex = i;\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[maxIndex] % words[i].Length() == 0) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz260yncy.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpz260yncy.cs(45,45): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = i + 1; j < words.Length; j++) {\n                if (lengths[i] * lengths[j] % 2 == 0) {\n                    words[i] = words[i] + \" \" + words[j];\n                    lengths[j] = 0;\n                }\n            }\n        }\n        return String.Join(\" \", words);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxksvto65.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] prime_index = new int[primes.Length];\n        for (int i = 0; i < primes.Length; i++) {\n            prime_index[i] = -1;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    prime_index[j] = i;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < primes.Length; i++) {\n            if (prime_index[i] != -1) {\n                result += words[prime_index[i]];\n                result += \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnyc7oal9.cs(33,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (words[i] == words[j] && primes[i] == primes[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndex[i] != -1) {\n                result += words[i];\n                result += \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6g0gv7t_.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] result = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    result[i] = primes[j];\n                    break;\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n            if (result[i] != 0) {\n                sb.Append(words[i]);\n                sb.Append(\" \");\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqz32usx_.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = GetPrime(lengths[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndex[i]++;\n                }\n            }\n        }\n        string[] newWords = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            newWords[i] = words[primeIndex[i]];\n        }\n        return String.Join(\" \", newWords);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7g0nhaub.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmp7g0nhaub.cs(32,25): error CS0103: The name 'GetPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primeNumbers = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers[i] = PrimeNumbers(words[i]);\n        }\n        int[] primeNumbers2 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers2[i] = primeNumbers[i];\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = i + 1; j < words.Length; j++) {\n                if (primeNumbers[i] * primeNumbers[j] > words[i].Length * words[j].Length) {\n                    primeNumbers2[i] *= primeNumbers2[j];\n                    primeNumbers2[j] *= primeNumbers2[i];\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers2[i] > 1) {\n                result += words[i] + \" \";\n            }\n        }\n        return result.TrimEnd(' ');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpaawsf64h.cs(28,31): error CS0103: The name 'PrimeNumbers' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        Array.Sort(lengths);\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 1) {\n                words[i] = \"\";\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i] != \"\") {\n                sb.Append(words[i]);\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwydigy1e.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (words[i] == words[j] && primes[i] == primes[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[primeIndex[i]];\n        }\n        return result;\n    }\n\n    private static int IsPrime(string word) {\n        int len = word.Length;\n        if (len == 1) return 1;\n        int i = 2;\n        while (i * i <= len) {\n            if (word.Substring(0, i) == word.Substring(0, i) && word.Substring(i, len) == word.Substring(i, len)) return 0;\n            i++;\n        }\n        return 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length must refer to a location within the string.\nParameter name: length\n  at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsPrime (System.String word) [0x00030] in <a915aadd92a1415888b8ed3245762c3c>:0 \n  at Problem.WordsInSentence (System.String sentence) [0x0001a] in <a915aadd92a1415888b8ed3245762c3c>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a915aadd92a1415888b8ed3245762c3c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.\nParameter name: length\n  at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsPrime (System.String word) [0x00030] in <a915aadd92a1415888b8ed3245762c3c>:0 \n  at Problem.WordsInSentence (System.String sentence) [0x0001a] in <a915aadd92a1415888b8ed3245762c3c>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <a915aadd92a1415888b8ed3245762c3c>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] == 0) {\n                return \"\";\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] == 1) {\n                return words[i];\n            }\n        }\n        return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp19izrn61.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    if (primeCount[j] == max) {\n                        result += words[i];\n                        break;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_gu9pytq.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmp_gu9pytq.cs(44,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = GetPrime(lengths[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndex[i]++;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndex[i] == words.Length - 1) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n\n    private static int GetPrime(int num) {\n        int prime = 2;\n        while (prime * prime <= num) {\n            if (num % prime == 0) {\n                return prime;\n            }\n            prime++;\n        }\n        return prime;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3k3ma2h0.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > 0) {\n                result += words[i];\n                result += \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6_7ub_xp.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[primeIndex[i]];\n            result += \" \";\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplf482nyb.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        string[] newWords = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            if (IsPrime(words[i].Length())) {\n                newWords[i] = words[i];\n            }\n        }\n        return String.Join(\" \", newWords);\n    }\n\n    private static bool IsPrime(int n) {\n        if (n < 2) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8ijniloj.cs(28,34): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = GetPrimes(words.Length);\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = -1;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (words[i].Equals(words[j])) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndex[i] != -1) {\n                result += words[primeIndex[i]];\n            }\n        }\n        return result;\n    }\n\n    private static int[] GetPrimes(int n) {\n        int[] primes = new int[n];\n        for (int i = 0; i < n; i++) {\n            primes[i] = i;\n        }\n        for (int i = 2; i < n; i++) {\n            if (primes[i] == i) {\n                for (int j = i * i; j < n; j += i) {\n                    primes[j] = 0;\n                }\n            }\n        }\n        return primes;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <af2bd7b0497f4db795e6ce3fabe6e5d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <af2bd7b0497f4db795e6ce3fabe6e5d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] prime_count = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    prime_count[j]++;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < primes.Length; i++) {\n            if (prime_count[i] > 0) {\n                result += words[i];\n                result += \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3sl2nlf0.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                    break;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0 && primeCount[j] == max) {\n                    result += words[i];\n                    result += \" \";\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2fc3obs0.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmp2fc3obs0.cs(45,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(lengths[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[primeIndex[i]];\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi5gilj22.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpi5gilj22.cs(32,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[lengths.Length];\n        for (int i = 0; i < lengths.Length; i++) {\n            primes[i] = PrimeNumbers.IsPrime(lengths[i]);\n        }\n        int[] indexes = new int[lengths.Length];\n        for (int i = 0; i < lengths.Length; i++) {\n            indexes[i] = -1;\n        }\n        for (int i = 0; i < lengths.Length; i++) {\n            for (int j = 0; j < lengths.Length; j++) {\n                if (primes[i] == primes[j] && lengths[i] == lengths[j]) {\n                    indexes[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < lengths.Length; i++) {\n            if (indexes[i] != -1) {\n                result += words[indexes[i]];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpggrw73ac.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpggrw73ac.cs(32,25): error CS0103: The name 'PrimeNumbers' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] prime_count = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    prime_count[j]++;\n                }\n            }\n        }\n        int max_prime_count = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (prime_count[i] > max_prime_count) {\n                max_prime_count = prime_count[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0 && prime_count[j] == max_prime_count) {\n                    result += words[i];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpghz3oji2.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpghz3oji2.cs(44,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (isPrime(words[i].Length())) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n\n    private static bool isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppwlrpm9w.cs(28,34): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = PrimeNumbers(words[i]);\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] != 0) {\n                sb.Append(words[i]);\n                sb.Append(' ');\n            }\n        }\n        return sb.ToString();\n    }\n\n    private static int PrimeNumbers(string word) {\n        int[] primes = new int[word.Length()];\n        for (int i = 0; i < word.Length(); i++) {\n            primes[i] = 0;\n        }\n        for (int i = 2; i < word.Length(); i++) {\n            if (IsPrime(i)) {\n                primes[i] = 1;\n            }\n        }\n        for (int i = 2; i < word.Length(); i++) {\n            if (primes[i] == 1) {\n                for (int j = i + i; j < word.Length(); j += i) {\n                    primes[j] = 1;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < word.Length(); i++) {\n            if (primes[i] == 1) {\n                max = i;\n            }\n        }\n        return max;\n    }\n\n    private static bool IsPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        if (num == 2) {\n            return true;\n        }\n        if (num % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= num; i += 2) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1a3tzgqu.cs(41,37): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmp1a3tzgqu.cs(42,34): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmp1a3tzgqu.cs(45,34): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmp1a3tzgqu.cs(50,34): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmp1a3tzgqu.cs(52,46): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmp1a3tzgqu.cs(58,34): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                    break;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0 && primeCount[j] == max) {\n                    result += words[i];\n                    result += \" \";\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2fc3obs0.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmp2fc3obs0.cs(45,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] result = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            result[i] = primes[i];\n        }\n        return String.Join(\" \", words);\n    }\n\n    private static int IsPrime(string word) {\n        int length = word.Length;\n        if (length == 1) {\n            return 1;\n        }\n        int[] primes = new int[length];\n        primes[0] = 1;\n        for (int i = 1; i < length; i++) {\n            primes[i] = 1;\n        }\n        for (int i = 2; i < length; i++) {\n            if (primes[i] == 1) {\n                for (int j = 2; j < i; j++) {\n                    if (i % j == 0) {\n                        primes[i] = 0;\n                        break;\n                    }\n                }\n            }\n        }\n        for (int i = 2; i < length; i++) {\n            if (primes[i] == 1) {\n                return i;\n            }\n        }\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <90fd5597e666479f829946fa06ff5446>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <90fd5597e666479f829946fa06ff5446>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] prime_count = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    prime_count[j]++;\n                }\n            }\n        }\n        int max_count = 0;\n        int max_index = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (prime_count[i] > max_count) {\n                max_count = prime_count[i];\n                max_index = i;\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[max_index] == words[i].Length()) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6iarfg93.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmp6iarfg93.cs(45,47): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = PrimeNumbers.IsPrime(lengths[i]);\n        }\n        int[] primeIndices = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndices[i] = -1;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[j] == 1 && primeIndices[j] == -1) {\n                    primeIndices[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndices[i] != -1) {\n                result += words[primeIndices[i]];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpd0ln8cz_.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpd0ln8cz_.cs(32,25): error CS0103: The name 'PrimeNumbers' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = GetPrime(lengths[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[j] == lengths[i]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string[] newWords = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            newWords[i] = words[primeIndex[i]];\n        }\n        return String.Join(\" \", newWords);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpabu3m2gr.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpabu3m2gr.cs(32,25): error CS0103: The name 'GetPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primeNumbers = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers[i] = IsPrime(words[i].Length());\n        }\n        int[] primeNumbers2 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers2[i] = IsPrime(words[i].Length());\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers[i] == 0) {\n                primeNumbers[i] = IsPrime(words[i].Length());\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers2[i] == 0) {\n                primeNumbers2[i] = IsPrime(words[i].Length());\n            }\n        }\n        int[] primeNumbers3 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers3[i] = IsPrime(words[i].Length());\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers3[i] == 0) {\n                primeNumbers3[i] = IsPrime(words[i].Length());\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers[i] == 0) {\n                primeNumbers[i] = IsPrime(words[i].Length());\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers2[i] == 0) {\n                primeNumbers2[i] = IsPrime(words[i].Length());\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers3[i] == 0) {\n                primeNumbers3[i] = IsPrime(words[i].Length());\n            }\n        }\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw0cvaf11.cs(28,31): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmpw0cvaf11.cs(28,48): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpw0cvaf11.cs(32,32): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmpw0cvaf11.cs(32,49): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpw0cvaf11.cs(36,35): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmpw0cvaf11.cs(36,52): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpw0cvaf11.cs(41,36): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmpw0cvaf11.cs(41,53): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpw0cvaf11.cs(46,32): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmpw0cvaf11.cs(46,49): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpw0cvaf11.cs(50,36): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmpw0cvaf11.cs(50,53): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpw0cvaf11.cs(55,35): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmpw0cvaf11.cs(55,52): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpw0cvaf11.cs(60,36): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmpw0cvaf11.cs(60,53): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpw0cvaf11.cs(65,36): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmpw0cvaf11.cs(65,53): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpw0cvaf11.cs(23,26): error CS0161: 'Proble",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeCount = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeCount[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeCount[i]++;\n                }\n            }\n        }\n        int max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < words.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n                maxIndex = i;\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (i == maxIndex) {\n                result += words[i];\n            }\n            else {\n                result += \" \" + words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpttvgc9jl.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 0) {\n                lengths[i]--;\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 1) {\n                lengths[i]++;\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 0) {\n                words[i] = words[i].Substring(0, lengths[i] / 2);\n            }\n            else {\n                words[i] = words[i].Substring(lengths[i] / 2);\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n            sb.Append(words[i]);\n            if (i < words.Length - 1) {\n                sb.Append(' ');\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn7fyx12o.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] == 0) {\n                for (int j = i + 1; j < words.Length; j++) {\n                    if (primes[j] == 0) {\n                        primes[j] = IsPrime(words[j]);\n                    }\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] != 0) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n\n    private static int IsPrime(string word) {\n        int prime = 0;\n        for (int i = 0; i < word.Length; i++) {\n            prime += (word[i] - 'a' + 1) * (word[i] - 'a' + 1);\n        }\n        return prime;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <38e7bf121fc549f8a524c9ed7a0de727>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <38e7bf121fc549f8a524c9ed7a0de727>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] prime_count = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    prime_count[j]++;\n                }\n            }\n        }\n        int max_prime_count = 0;\n        int max_prime = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (prime_count[i] > max_prime_count) {\n                max_prime_count = prime_count[i];\n                max_prime = primes[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i].Length() % max_prime == 0) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpghbrumv7.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpghbrumv7.cs(45,26): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > 0) {\n                result += words[i];\n                result += \" \";\n            }\n        }\n        return result.TrimEnd(' ');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzvszb8c2.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < max; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (primeCount[j] == i) {\n                    result += words[j];\n                    result += \" \";\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmf10b8oi.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndex[i]++;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndex[i] > 0) {\n                result += words[i];\n                result += \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfmcz7k2z.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 0) {\n                lengths[i]--;\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 0) {\n                words[i] = words[i].Substring(0, lengths[i] / 2);\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n            if (i != 0) {\n                sb.Append(\" \");\n            }\n            sb.Append(words[i]);\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9no4xffk.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] result = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            result[i] = primes[i];\n        }\n        return String.Join(\" \", words).ToLower();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp87kfh4uf.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 0) {\n                words[i] = \"\";\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i] != \"\") {\n                for (int j = i + 1; j < words.Length; j++) {\n                    if (words[j] != \"\") {\n                        if (words[i].Length() + words[j].Length() == lengths[i] + lengths[j]) {\n                            words[i] += \" \" + words[j];\n                            words[j] = \"\";\n                        }\n                    }\n                }\n            }\n        }\n        return String.Join(\" \", words);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppo1juzq1.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmppo1juzq1.cs(39,38): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmppo1juzq1.cs(39,58): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(lengths[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[j] == 1 && primeIndex[j] == 0) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string[] newWords = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            newWords[i] = words[primeIndex[i]];\n        }\n        return String.Join(\" \", newWords);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5v0wwj9n.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmp5v0wwj9n.cs(32,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 0) {\n                lengths[i]++;\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 0) {\n                words[i] = words[i] + words[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 0) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfagc57v4.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                }\n            }\n        }\n        int max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n                maxIndex = i;\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[maxIndex] == words[i].Length()) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfbd_yqki.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpfbd_yqki.cs(45,46): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] result = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    result[i] = primes[j];\n                    break;\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n            if (result[i] != 0) {\n                sb.Append(words[i]);\n                sb.Append(\" \");\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqz32usx_.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] prime_count = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    prime_count[j]++;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < primes.Length; i++) {\n            if (prime_count[i] > 0) {\n                result += words[i];\n                result += \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3sl2nlf0.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = GetPrimes(lengths.Length);\n        int[] result = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (primes[j] == lengths[i]) {\n                    result[i] = j;\n                    break;\n                }\n            }\n        }\n        string resultString = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            resultString += words[result[i]];\n        }\n        return resultString;\n    }\n\n    private static int[] GetPrimes(int length) {\n        int[] primes = new int[length];\n        for (int i = 0; i < length; i++) {\n            primes[i] = i;\n        }\n        for (int i = 2; i < length; i++) {\n            if (primes[i] == i) {\n                for (int j = i * i; j < length; j += i) {\n                    primes[j] = 0;\n                }\n            }\n        }\n        return primes;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1tyc5694.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i].Length());\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndex[i]++;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndex[i] > 0) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp70s9q2zg.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmp70s9q2zg.cs(28,42): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i].Length());\n        }\n        int[] index = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            index[i] = 0;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (words[i] == words[j]) {\n                    index[i] = j;\n                    break;\n                }\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] == 0) {\n                for (int j = 0; j < words.Length; j++) {\n                    if (index[j] == i) {\n                        primes[j] = IsPrime(words[j].Length());\n                        break;\n                    }\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] == 0) {\n                continue;\n            }\n            for (int j = 0; j < words.Length; j++) {\n                if (index[j] == i) {\n                    sb.Append(words[j]);\n                    break;\n                }\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpre7_twhc.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmpre7_twhc.cs(28,42): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpre7_twhc.cs(46,37): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmpre7_twhc.cs(46,54): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (IsPrime(words[i].Length())) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n\n    private static bool IsPrime(int n) {\n        if (n < 2) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8qd65axh.cs(28,34): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i].Length());\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (words[j].Length() == primes[i]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[primeIndex[i]];\n        }\n        return result;\n    }\n\n    private static int IsPrime(int num) {\n        if (num < 2) {\n            return 2;\n        }\n        if (num == 2) {\n            return 2;\n        }\n        if (num % 2 == 0) {\n            return 2;\n        }\n        for (int i = 3; i * i <= num; i += 2) {\n            if (num % i == 0) {\n                return 2;\n            }\n        }\n        return num;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpe4hgeuwg.cs(28,42): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpe4hgeuwg.cs(34,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeCount = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeCount[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeCount[i]++;\n                }\n            }\n        }\n        int[] index = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            index[i] = -1;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    index[i] = j;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeCount[i] == 1) {\n                result += words[index[i]];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk9px7s1h.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < primes.Length; i++) {\n            primeCount[i] = 0;\n        }\n        for (int i = 0; i < primes.Length; i++) {\n            for (int j = i + 1; j < primes.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeCount[i]++;\n                    primeCount[j]++;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primes[i] > max) {\n                max = primes[i];\n            }\n        }\n        int[] result = new int[max];\n        for (int i = 0; i < max; i++) {\n            result[i] = 0;\n        }\n        for (int i = 0; i < primes.Length; i++) {\n            if (primes[i] == max) {\n                result[primes[i]]++;\n            }\n        }\n        string resultString = \"\";\n        for (int i = 0; i < result.Length; i++) {\n            if (result[i] > 0) {\n                resultString += words[i] + \" \";\n            }\n        }\n        return resultString;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3jqd2ali.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 0) {\n                words[i] = \"\";\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i].Length() > 0) {\n                for (int j = i + 1; j < words.Length; j++) {\n                    if (words[j].Length() > 0 && words[i] == words[j]) {\n                        words[i] = \"\";\n                        words[j] = \"\";\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i].Length() > 0) {\n                for (int j = i + 1; j < words.Length; j++) {\n                    if (words[j].Length() > 0 && words[i] == words[j]) {\n                        words[i] = \"\";\n                        words[j] = \"\";\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i].Length() > 0) {\n                for (int j = i + 1; j < words.Length; j++) {\n                    if (words[j].Length() > 0 && words[i] == words[j]) {\n                        words[i] = \"\";\n                        words[j] = \"\";\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i].Length() > 0) {\n                for (int j = i + 1; j < words.Length; j++) {\n                    if (words[j].Length() > 0 && words[i] == words[j]) {\n                        words[i] = \"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjasj8f92.cs(69,36): error CS1010: Newline in constant\n/tmp/tmpjasj8f92.cs(69,37): error CS1002: ; expected\n/tmp/tmpjasj8f92.cs(71,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpjasj8f92.cs(81,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[primeIndex[i]];\n        }\n        return result;\n    }\n\n    private static int IsPrime(string word) {\n        int prime = 2;\n        for (int i = 0; i < word.Length; i++) {\n            if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {\n                prime++;\n            }\n        }\n        if (prime == word.Length) {\n            return prime;\n        }\n        for (int i = 2; i <= Math.Sqrt(prime); i++) {\n            if (prime % i == 0) {\n                return 0;\n            }\n        }\n        return prime;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3c2d174b78ae45248b2fb5c2649e9708>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3c2d174b78ae45248b2fb5c2649e9708>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] == 0) {\n                for (int j = i + 1; j < words.Length; j++) {\n                    if (primes[j] == 0) {\n                        primes[i] = primes[j] = IsPrime(words[i] + \" \" + words[j]);\n                        if (primes[i] == 0) {\n                            primes[i] = primes[j] = IsPrime(words[j] + \" \" + words[i]);\n                        }\n                    }\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] == 1) {\n                sb.Append(words[i]);\n                sb.Append(\" \");\n            }\n        }\n        return sb.ToString().TrimEnd(' ');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzq9lakce.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmpzq9lakce.cs(34,49): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmpzq9lakce.cs(36,53): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7};\n        int[] prime_count = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    prime_count[j]++;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < primes.Length; i++) {\n            if (prime_count[i] > 0) {\n                result += words[i];\n                result += \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcoc1c7ks.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string[] newWords = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            newWords[i] = words[primeIndex[i]];\n        }\n        return String.Join(\" \", newWords);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp74x5l21x.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = PrimeNumbers(words[i]);\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] != 0) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n\n    private static int PrimeNumbers(string word) {\n        int result = 0;\n        for (int i = 0; i < word.Length(); i++) {\n            result += (word[i] - 'a' + 1) * (word[i] - 'a' + 1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpovu0yxnc.cs(41,34): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] result = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            result[i] = primes[i];\n        }\n        return String.Join(\" \", words).ToLower();\n    }\n\n    private static int IsPrime(string word) {\n        int n = word.Length;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n % 2 == 0) return 2;\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) return 2;\n            i += 2;\n        }\n        return i;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b9e688c9c38544ffad557a6db9eaddd2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b9e688c9c38544ffad557a6db9eaddd2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j] && i != j) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndex[i] != -1) {\n                result += words[i] + \" \";\n            }\n        }\n        return result;\n    }\n\n    private static int IsPrime(string word) {\n        int prime = 2;\n        for (int i = 0; i < word.Length; i++) {\n            prime = prime * 3 + 1;\n        }\n        return prime;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <52c9aab3f3f542a9abfe754edb4063ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <52c9aab3f3f542a9abfe754edb4063ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] prime_count = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    prime_count[j]++;\n                }\n            }\n        }\n        int max_prime_count = 0;\n        int max_prime = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (prime_count[i] > max_prime_count) {\n                max_prime_count = prime_count[i];\n                max_prime = primes[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i].Length() % max_prime == 0) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpghbrumv7.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpghbrumv7.cs(45,26): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (words[i] == words[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndex[i] != -1) {\n                result += words[primeIndex[i]];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbkhzzy43.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primeNumbers = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers[i] = IsPrime(words[i].Length());\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers[i] != 0) {\n                for (int j = i + 1; j < words.Length; j++) {\n                    if (primeNumbers[j] != 0) {\n                        if (primeNumbers[i] == primeNumbers[j]) {\n                            primeNumbers[j] = 0;\n                        }\n                    }\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers[i] != 0) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3ey_e4ar.cs(28,31): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmp3ey_e4ar.cs(28,48): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[primeIndex[i]];\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwf6auxww.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] result = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            result[i] = primes[i];\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = i + 1; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    result[i] = result[i] * primes[j];\n                    result[j] = result[i] * primes[j];\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n            if (result[i] != 1) {\n                sb.Append(words[i]);\n                sb.Append(' ');\n            }\n        }\n        return sb.ToString();\n    }\n\n    private static int IsPrime(string word) {\n        int len = word.Length;\n        if (len == 1) return 1;\n        if (len == 2) return 2;\n        if (len % 2 == 0) return 2;\n        int i = 3;\n        while (i * i <= len) {\n            if (len % i == 0) return 2;\n            i += 2;\n        }\n        return len;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <21c2f6b8f8e4490eae9753e9447124e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <21c2f6b8f8e4490eae9753e9447124e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j] && i != j) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndex[i] != -1) {\n                result += words[i] + \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptql7qopy.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primeNumbers = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int primeNumberCount = primeNumbers.Length;\n        int[] primeNumbersIndex = new int[primeNumberCount];\n        for (int i = 0; i < primeNumberCount; i++) {\n            primeNumbersIndex[i] = -1;\n        }\n        for (int i = 0; i < primeNumberCount; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (words[j].Length == primeNumbers[i]) {\n                    primeNumbersIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < primeNumberCount; i++) {\n            if (primeNumbersIndex[i] != -1) {\n                result += words[primeNumbersIndex[i]];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d37be3e080914a83ae969c6a25f2773d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d37be3e080914a83ae969c6a25f2773d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primeNumbers = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers[i] = IsPrime(words[i].Length());\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers[i] > 0) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxixf1a82.cs(28,31): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmpxixf1a82.cs(28,48): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[j] == 1 && primeIndex[j] == 0) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndex[i] != 0) {\n                result += words[primeIndex[i]];\n                result += \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc00gmfs2.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = i + 1; j < words.Length; j++) {\n                if (lengths[i] * lengths[j] > Math.Max(words[i].Length(), words[j].Length())) {\n                    lengths[i] = Math.Max(words[i].Length(), words[j].Length());\n                }\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 0) {\n                lengths[i]++;\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 1) {\n                result += words[i] + \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt5nh8yze.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpt5nh8yze.cs(32,65): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpt5nh8yze.cs(32,84): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpt5nh8yze.cs(33,52): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpt5nh8yze.cs(33,71): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primeNumbers = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers[i] = IsPrime(words[i]);\n        }\n        int[] primeNumbers2 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers2[i] = IsPrime(words[i]);\n        }\n        int[] primeNumbers3 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers3[i] = IsPrime(words[i]);\n        }\n        int[] primeNumbers4 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers4[i] = IsPrime(words[i]);\n        }\n        int[] primeNumbers5 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers5[i] = IsPrime(words[i]);\n        }\n        int[] primeNumbers6 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers6[i] = IsPrime(words[i]);\n        }\n        int[] primeNumbers7 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers7[i] = IsPrime(words[i]);\n        }\n        int[] primeNumbers8 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers8[i] = IsPrime(words[i]);\n        }\n        int[] primeNumbers9 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers9[i] = IsPrime(words[i]);\n        }\n        int[] primeNumbers10 = new int[words.Length];\n        for (int i = 0; i < words.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn13k0kh8.cs(63,35): error CS1001: Identifier expected\n/tmp/tmpn13k0kh8.cs(63,35): error CS1002: ; expected\n/tmp/tmpn13k0kh8.cs(63,35): error CS1026: ) expected\n/tmp/tmpn13k0kh8.cs(63,35): error CS1525: Invalid expression term '}'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeIndex = new int[primes.Length];\n        for (int i = 0; i < primes.Length; i++) {\n            primeIndex[i] = -1;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeIndex[j] = i;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeIndex[i] != -1) {\n                result += words[primeIndex[i]];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8zfosofz.cs(33,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                    break;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n            }\n        }\n        int[] primeIndex = new int[max];\n        for (int i = 0; i < primes.Length; i++) {\n            for (int j = 0; j < primeCount[i]; j++) {\n                primeIndex[j] = i;\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            int index = primeIndex[words[i].Length() % max];\n            result += words[i] + \" \";\n            primeIndex[index] = -1;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuue5vlqt.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpuue5vlqt.cs(50,45): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(lengths[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[j] == 1 && primeIndex[j] < lengths[i]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndex[i] != 0) {\n                result += words[primeIndex[i]];\n                result += \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpstpf9js0.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpstpf9js0.cs(32,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        string[] result = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            if (IsPrime(words[i].Length())) {\n                result[i] = words[i];\n            }\n        }\n        return String.Join(\" \", result);\n    }\n\n    private static bool IsPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        if (num == 2) {\n            return true;\n        }\n        if (num % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.Sqrt(num); i += 2) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpouhsu2v5.cs(28,34): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (words[i] == words[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndex[i] != -1) {\n                result += words[primeIndex[i]];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbkhzzy43.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(lengths[i]);\n        }\n        int[] indexes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            indexes[i] = 0;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words[i].Length(); j++) {\n                indexes[i] = (indexes[i] + primes[i]) % words[i].Length();\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[i].Substring(indexes[i], lengths[i]);\n        }\n        return result;\n    }\n\n    private static int IsPrime(int n) {\n        if (n < 2) return 0;\n        if (n == 2) return 1;\n        if (n % 2 == 0) return 0;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return 0;\n        }\n        return 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp80t9djxa.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmp80t9djxa.cs(39,42): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmp80t9djxa.cs(40,66): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(lengths[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = -1;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j] && lengths[i] == lengths[j] && primeIndex[i] != j) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndex[i] != -1) {\n                result += words[i] + \" \";\n            }\n        }\n        return result.TrimEnd(' ');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzlk_89d6.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpzlk_89d6.cs(32,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[primeIndex[i]];\n        }\n        return result;\n    }\n\n    private static int IsPrime(string word) {\n        int len = word.Length;\n        if (len == 1) {\n            return 1;\n        }\n        for (int i = 2; i <= Math.Sqrt(len); i++) {\n            if (len % i == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2774932e1a4ec18ca99e31fbc34264>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dd2774932e1a4ec18ca99e31fbc34264>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 0) {\n                lengths[i]--;\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 1) {\n                lengths[i]++;\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 1) {\n                words[i] = words[i].Substring(0, lengths[i] / 2);\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n            sb.Append(words[i]);\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsma0253i.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] result = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            result[i] = primes[i];\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = i + 1; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    result[i] = result[i] * result[j];\n                }\n            }\n        }\n        string resultString = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (result[i] != 1) {\n                resultString += words[i] + \" \";\n            }\n        }\n        return resultString;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpivryy2y2.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = GetPrime(lengths[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndex[i]++;\n                }\n            }\n        }\n        string[] newWords = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            newWords[i] = words[primeIndex[i]];\n        }\n        return String.Join(\" \", newWords);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7g0nhaub.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmp7g0nhaub.cs(32,25): error CS0103: The name 'GetPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primeNumbers = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers[i] = PrimeNumbers(words[i]);\n        }\n        int[] primeNumbers2 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers2[i] = primeNumbers[i];\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = i + 1; j < words.Length; j++) {\n                if (primeNumbers[i] == primeNumbers[j]) {\n                    primeNumbers2[i] = primeNumbers2[j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers2[i] != 0) {\n                primeNumbers2[i] = 0;\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers2[i] != 0) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n\n    private static int PrimeNumbers(string word) {\n        int result = 0;\n        for (int i = 0; i < word.Length(); i++) {\n            result += (int)Math.pow(word[i], 2);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc8sdut5j.cs(57,34): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpc8sdut5j.cs(58,33): error CS0117: 'Math' does not contain a definition for 'pow'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i].Length());\n        }\n        int[] result = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            result[i] = primes[i];\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = i + 1; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    result[i] = primes[i];\n                    result[j] = primes[i];\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n            if (result[i] > 0) {\n                sb.Append(words[i]);\n                sb.Append(' ');\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_2a90ng5.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmp_2a90ng5.cs(28,42): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        Array.Sort(lengths);\n        int count = 0;\n        for (int i = 0; i < lengths.Length; i++) {\n            if (lengths[i] > count) {\n                count = lengths[i];\n            }\n        }\n        count++;\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] == count) {\n                return words[i];\n            }\n        }\n        return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz7kgtfdu.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primeNumbers = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeNumbersCount = new int[primeNumbers.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primeNumbers.Length; j++) {\n                if (words[i].Length() % primeNumbers[j] == 0) {\n                    primeNumbersCount[j]++;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < primeNumbers.Length; i++) {\n            if (primeNumbersCount[i] > 0) {\n                result += words[i];\n                result += \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpp4_3r3l_.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i].Length());\n        }\n        int[] result = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            result[i] = primes[i];\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = i + 1; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    result[i] = result[i] + result[j];\n                }\n            }\n        }\n        string resultString = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (result[i] > 0) {\n                resultString += words[i] + \" \";\n            }\n        }\n        return resultString;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7mcftvlc.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmp7mcftvlc.cs(28,42): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i].Length());\n        }\n        int[] result = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    result[i]++;\n                }\n            }\n        }\n        string resultString = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (result[i] > 0) {\n                resultString += words[i] + \" \";\n            }\n        }\n        return resultString;\n    }\n\n    private static int IsPrime(int num) {\n        if (num == 1) {\n            return 0;\n        }\n        if (num == 2) {\n            return 1;\n        }\n        if (num % 2 == 0) {\n            return 0;\n        }\n        for (int i = 3; i <= Math.Sqrt(num); i += 2) {\n            if (num % i == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpathk2050.cs(28,42): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(lengths[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[j] == 1 && primeIndex[j] < lengths[i]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndex[i] != 0) {\n                result += words[primeIndex[i]];\n                result += \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpstpf9js0.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpstpf9js0.cs(32,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = GetPrime(lengths[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndex[i]++;\n                }\n            }\n        }\n        string[] newWords = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            newWords[i] = words[primeIndex[i]];\n        }\n        return String.Join(\" \", newWords);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7g0nhaub.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmp7g0nhaub.cs(32,25): error CS0103: The name 'GetPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(lengths[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[j] == 1 && primeIndex[j] == 0) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string[] newWords = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            newWords[i] = words[primeIndex[i]];\n        }\n        return String.Join(\" \", newWords);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5v0wwj9n.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmp5v0wwj9n.cs(32,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] result = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    result[i] = primes[j];\n                    break;\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n            if (result[i] != 0) {\n                sb.Append(words[i]);\n                sb.Append(' ');\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzjy_tp5o.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] prime_count = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    prime_count[j]++;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < primes.Length; i++) {\n            if (prime_count[i] > 0) {\n                result += words[i];\n                result += \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3sl2nlf0.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primeNumbers = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers[i] = IsPrime(words[i].Length());\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers[i] > 0) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n\n    private static int IsPrime(int n) {\n        if (n < 2) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n            return 0;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnfcdhf6b.cs(28,48): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = GetPrimes(lengths.Length);\n        for (int i = 0; i < lengths.Length; i++) {\n            if (primes[i] != lengths[i]) {\n                return \"\";\n            }\n        }\n        int[] index = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            index[i] = 0;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words[i].Length(); j++) {\n                index[i] = (index[i] + 1) % primes[i];\n                if (index[i] == 0) {\n                    index[i] = primes[i];\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[i].Substring(index[i]);\n        }\n        return result;\n    }\n\n    private static int[] GetPrimes(int n) {\n        int[] primes = new int[n];\n        primes[0] = 2;\n        primes[1] = 3;\n        for (int i = 2; i < n; i++) {\n            primes[i] = i;\n        }\n        for (int i = 2; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (primes[i] % primes[j] == 0) {\n                    primes[i] = 0;\n                    break;\n                }\n            }\n        }\n        return primes;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz8uxblgh.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpz8uxblgh.cs(41,42): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                }\n            }\n        }\n        int max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n                maxIndex = i;\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i].Length() % primes[maxIndex] == 0) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprmuh05cz.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmprmuh05cz.cs(45,26): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (IsPrime(words[i].Length())) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n\n    private static bool IsPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        if (num == 2) {\n            return true;\n        }\n        if (num % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.Sqrt(num); i += 2) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpojxnkrb9.cs(28,34): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i].Length());\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] != 0) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n\n    private static int IsPrime(int num) {\n        if (num < 2) return 0;\n        if (num == 2) return 1;\n        if (num % 2 == 0) return 0;\n        for (int i = 3; i * i <= num; i += 2) {\n            if (num % i == 0) return 0;\n        }\n        return 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpo1aogk_c.cs(28,42): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 0) {\n                words[i] = \"\";\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i] != \"\") {\n                for (int j = i + 1; j < words.Length; j++) {\n                    if (words[j] != \"\") {\n                        if (words[i].Length() + words[j].Length() == lengths[i] + lengths[j]) {\n                            words[i] += \" \" + words[j];\n                            words[j] = \"\";\n                        }\n                    }\n                }\n            }\n        }\n        return String.Join(\" \", words);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppo1juzq1.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmppo1juzq1.cs(39,38): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmppo1juzq1.cs(39,58): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[primeIndex[i]];\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwf6auxww.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                    break;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeCount[i] == max) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpat3zb2_w.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primeNumbers = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers[i] = IsPrime(words[i]);\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers[i] == 0) {\n                for (int j = i + 1; j < words.Length; j++) {\n                    if (primeNumbers[j] == 0) {\n                        primeNumbers[j] = IsPrime(words[j]);\n                    }\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers[i] != 0) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpm6zcjtz8.cs(28,31): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmpm6zcjtz8.cs(34,43): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeIndex = new int[primes.Length];\n        for (int i = 0; i < primes.Length; i++) {\n            primeIndex[i] = -1;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeIndex[j] = i;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeIndex[i] != -1) {\n                result += words[primeIndex[i]];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8zfosofz.cs(33,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndices = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndices[i] = -1;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = i + 1; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndices[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndices[i] != -1) {\n                result += words[i] + \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvludifep.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i].Length());\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (words[i] == words[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndex[i] != 0) {\n                result += words[primeIndex[i]];\n            }\n        }\n        return result;\n    }\n\n    private static int IsPrime(int n) {\n        if (n < 2) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        if (n % 2 == 0) {\n            return 0;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppukb124z.cs(28,42): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] result = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    result[i] = primes[j];\n                    break;\n                }\n            }\n        }\n        string resultString = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (result[i] != 0) {\n                resultString += words[i] + \" \";\n            }\n        }\n        return resultString;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0uw41z9p.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i].Length());\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] == 0) {\n                words[i] = \"\";\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i] != \"\") {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n\n    public static int IsPrime(int num) {\n        if (num < 2) {\n            return 0;\n        }\n        if (num == 2) {\n            return 1;\n        }\n        if (num % 2 == 0) {\n            return 0;\n        }\n        for (int i = 3; i * i <= num; i += 2) {\n            if (num % i == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfc7rpged.cs(28,42): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i].Length());\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (words[i] == words[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndex[i] != 0) {\n                result += words[primeIndex[i]];\n            }\n        }\n        return result;\n    }\n\n    private static int IsPrime(int num) {\n        if (num == 1) return 0;\n        if (num == 2) return 1;\n        if (num % 2 == 0) return 0;\n        for (int i = 3; i <= Math.Sqrt(num); i += 2) {\n            if (num % i == 0) return 0;\n        }\n        return 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp46gg3m51.cs(28,42): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 0) {\n                lengths[i]--;\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 1) {\n                lengths[i]++;\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 1) {\n                words[i] = words[i].Substring(0, lengths[i] / 2);\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n            sb.Append(words[i]);\n            if (i < words.Length - 1) {\n                sb.Append(' ');\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293407,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgknvok1x.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primeNumbers = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int primeNumberCount = primeNumbers.Length;\n        int wordCount = words.Length;\n        int[] primeNumbersIndex = new int[wordCount];\n        for (int i = 0; i < wordCount; i++) {\n            primeNumbersIndex[i] = -1;\n        }\n        for (int i = 0; i < primeNumberCount; i++) {\n            for (int j = 0; j < wordCount; j++) {\n                if (primeNumbers[i] == words[j].Length()) {\n                    primeNumbersIndex[j] = i;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < wordCount; i++) {\n            if (primeNumbersIndex[i] != -1) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcyoc6qee.cs(35,49): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] == 0) {\n                for (int j = i + 1; j < words.Length; j++) {\n                    if (primes[j] == 0) {\n                        primes[j] = primes[i];\n                    }\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] != 0) {\n                result += words[i] + \" \";\n            }\n        }\n        return result;\n    }\n\n    private static int IsPrime(string word) {\n        int prime = 0;\n        for (int i = 0; i < word.Length; i++) {\n            prime = prime * 10 + word[i] - '0';\n        }\n        if (prime == 0) {\n            return 0;\n        }\n        for (int i = 2; i <= Math.Sqrt(prime); i++) {\n            if (prime % i == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <362873e079db4f208e998b0cd06df4f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <362873e079db4f208e998b0cd06df4f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 0) {\n                words[i] = \"\";\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i] != \"\") {\n                for (int j = i + 1; j < words.Length; j++) {\n                    if (words[j] != \"\") {\n                        if (words[i].Length() + words[j].Length() == lengths[i] + lengths[j]) {\n                            words[i] += \" \" + words[j];\n                            words[j] = \"\";\n                        }\n                    }\n                }\n            }\n        }\n        return String.Join(\" \", words);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppo1juzq1.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmppo1juzq1.cs(39,38): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmppo1juzq1.cs(39,58): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (IsPrime(words[i].Length())) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n\n    private static bool IsPrime(int n) {\n        if (n == 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i <= Math.Sqrt(n); i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphdy8xzlu.cs(28,34): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = GetPrimeNumbers(lengths.Length);\n        int[] result = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (lengths[i] == primes[j]) {\n                    result[i] = j;\n                    break;\n                }\n            }\n        }\n        string resultString = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            resultString += words[result[i]];\n        }\n        return resultString;\n    }\n\n    private static int[] GetPrimeNumbers(int n) {\n        int[] primes = new int[n];\n        for (int i = 0; i < n; i++) {\n            primes[i] = i;\n        }\n        for (int i = 2; i < primes.Length; i++) {\n            if (primes[i] == i) {\n                for (int j = i * i; j < primes.Length; j += i) {\n                    primes[j] = 0;\n                }\n            }\n        }\n        return primes;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpr5nhglb3.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(lengths[i]);\n        }\n        int[] primeIndices = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndices[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[j] == 1 && primeIndices[j] < lengths[i]) {\n                    primeIndices[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[primeIndices[i]];\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptijf7gqz.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmptijf7gqz.cs(32,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] prime_count = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    prime_count[j]++;\n                }\n            }\n        }\n        int max_prime = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (prime_count[i] > max_prime) {\n                max_prime = prime_count[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (prime_count[i] == max_prime) {\n                result += words[i] + \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiy2lod7s.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = PrimeNumbers.IsPrime(lengths[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string[] newWords = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            newWords[i] = words[primeIndex[i]];\n        }\n        return String.Join(\" \", newWords);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuex124rl.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpuex124rl.cs(32,25): error CS0103: The name 'PrimeNumbers' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[lengths.Length];\n        for (int i = 0; i < lengths.Length; i++) {\n            primes[i] = GetPrime(lengths[i]);\n        }\n        int[] primeIndex = new int[lengths.Length];\n        for (int i = 0; i < lengths.Length; i++) {\n            primeIndex[i] = 0;\n        }\n        for (int i = 0; i < lengths.Length; i++) {\n            for (int j = 0; j < lengths.Length; j++) {\n                if (lengths[i] == lengths[j] && primes[i] == primes[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string[] newWords = new string[lengths.Length];\n        for (int i = 0; i < lengths.Length; i++) {\n            newWords[i] = words[primeIndex[i]];\n        }\n        return String.Join(\" \", newWords);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpolzd4z1f.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpolzd4z1f.cs(32,25): error CS0103: The name 'GetPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeCount[i] == max) {\n                result += words[i] + \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps2hoxdfu.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (IsPrime(words[i].Length())) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n\n    private static bool IsPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        if (num == 2) {\n            return true;\n        }\n        if (num % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.Sqrt(num); i += 2) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpojxnkrb9.cs(28,34): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primeNumbers = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int primeNumberCount = primeNumbers.Length;\n        int[] primeNumbersIndex = new int[primeNumberCount];\n        for (int i = 0; i < primeNumberCount; i++) {\n            primeNumbersIndex[i] = -1;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primeNumberCount; j++) {\n                if (words[i].Length == primeNumbers[j]) {\n                    primeNumbersIndex[j] = i;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < primeNumberCount; i++) {\n            if (primeNumbersIndex[i] != -1) {\n                result += words[primeNumbersIndex[i]];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c07362a3c8584ce1aad5292819227c7e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c07362a3c8584ce1aad5292819227c7e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 0) {\n                lengths[i]++;\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 0) {\n                words[i] = words[i].Substring(0, lengths[i] / 2);\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[i];\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpthpyliz6.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        Array.Sort(lengths);\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 1) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptqhs7uvd.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(lengths[i]);\n        }\n        int[] indexes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            indexes[i] = -1;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j] && lengths[i] == lengths[j] && words[i].ToLower() == words[j].ToLower()) {\n                    indexes[i] = j;\n                    break;\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n            if (indexes[i] != -1) {\n                sb.Append(words[i]);\n                sb.Append(' ');\n            }\n        }\n        return sb.ToString().Trim();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7ux0ju2u.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmp7ux0ju2u.cs(32,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                    break;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeCount[i] == max) {\n                result += words[i] + \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7jjxvvnz.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primeNumbers = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeNumbersCount = new int[primeNumbers.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primeNumbers.Length; j++) {\n                if (words[i].Length() % primeNumbers[j] == 0) {\n                    primeNumbersCount[j]++;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < primeNumbers.Length; i++) {\n            if (primeNumbersCount[i] > 0) {\n                result += words[primeNumbers[i] - 1];\n                result += \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgkd9bo_e.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                }\n            }\n        }\n        int max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n                maxIndex = i;\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[maxIndex] % words[i].Length() == 0) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz260yncy.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpz260yncy.cs(45,45): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string[] newWords = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            newWords[i] = words[primeIndex[i]];\n        }\n        return String.Join(\" \", newWords);\n    }\n\n    private static int IsPrime(string word) {\n        int n = word.Length;\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n % 2 == 0) return 2;\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) return 2;\n            i += 2;\n        }\n        return 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <56f1468adbd2418aadb4ab1ec4c694bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <56f1468adbd2418aadb4ab1ec4c694bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                    break;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0 && primeCount[j] == max) {\n                    result += words[i];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp020brxbe.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmp020brxbe.cs(45,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = PrimeNumbers.IsPrime(words[i].Length());\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[j] == 1 && words[i].Length() == words[j].Length()) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndex[i] != 0) {\n                result += words[i] + \" \";\n            }\n        }\n        return result.TrimEnd(' ');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpe_3pgjpc.cs(28,25): error CS0103: The name 'PrimeNumbers' does not exist in the current context\n/tmp/tmpe_3pgjpc.cs(28,55): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpe_3pgjpc.cs(34,48): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpe_3pgjpc.cs(34,69): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primeNumbers = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers[i] = PrimeNumbers(words[i]);\n        }\n        int[] primeNumbers2 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers2[i] = PrimeNumbers(words[i]);\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers[i] != primeNumbers2[i]) {\n                return \"\";\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers[i] != 0) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n\n    private static int PrimeNumbers(string word) {\n        int result = 0;\n        for (int i = 0; i < word.Length(); i++) {\n            result += Math.Abs(word.Substring(i, 1).ToLower().GetHashCode());\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6oqsk47j.cs(50,34): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i].Length());\n        }\n        int[] result = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            result[i] = primes[i];\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = i + 1; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    result[i] = Math.Max(result[i], result[j]);\n                }\n            }\n        }\n        string resultString = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (result[i] == 1) {\n                resultString += words[i] + \" \";\n            }\n        }\n        return resultString;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpx8blwn9c.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmpx8blwn9c.cs(28,42): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] result = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            result[i] = primes[i];\n        }\n        for (int i = 0; i < words.Length - 1; i++) {\n            if (result[i] == 0) {\n                result[i] = primes[i + 1];\n            }\n        }\n        return String.Join(\" \", words).ToLower();\n    }\n\n    private static int IsPrime(string word) {\n        int len = word.Length;\n        if (len == 1) {\n            return 1;\n        }\n        if (len == 2) {\n            return 2;\n        }\n        if (len % 2 == 0) {\n            return 0;\n        }\n        for (int i = 3; i <= Math.Sqrt(len); i += 2) {\n            if (len % i == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <749afd1648cc434e8ac60f0c01efc653>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <749afd1648cc434e8ac60f0c01efc653>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeIndex = new int[primes.Length];\n        for (int i = 0; i < primes.Length; i++) {\n            primeIndex[i] = -1;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeIndex[j] = i;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeIndex[i] != -1) {\n                result += words[primeIndex[i]];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8zfosofz.cs(33,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] result = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    result[i] = primes[j];\n                    break;\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n            if (result[i] != 0) {\n                sb.Append(words[i]);\n                sb.Append(\" \");\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqz32usx_.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > 0) {\n                result += words[i];\n                result += \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps__pv049.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        Array.Sort(lengths);\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] > 0 && lengths[i] % 2 == 1) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcw90_sxb.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[lengths.Length];\n        primes[0] = 2;\n        for (int i = 1; i < lengths.Length; i++) {\n            primes[i] = primes[i - 1] + 1;\n            for (int j = 0; j < i; j++) {\n                if (lengths[j] % primes[i] == 0) {\n                    primes[i] = primes[i] - 1;\n                }\n            }\n        }\n        int[] result = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < lengths[i]; j++) {\n                result[i] = result[i] * primes[i] + words[i][j];\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n            if (result[i] > 0) {\n                sb.Append(words[i]);\n                sb.Append(' ');\n            }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn7seb0u4.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] result = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            result[i] = primes[i];\n        }\n        return String.Join(\" \", words);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1a37617j.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndices = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndices[i] = -1;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = i + 1; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndices[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndices[i] != -1) {\n                result += words[i] + \" \";\n            }\n        }\n        return result.TrimEnd(' ');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdwhlsr5_.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i].Length());\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j] && primeIndex[i] != primeIndex[j]) {\n                    primeIndex[i]++;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndex[i] == words.Length - 1) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbxa_p2a5.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmpbxa_p2a5.cs(28,42): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i].Length());\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (words[i].Length() == primes[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndex[i] != 0) {\n                result += words[i];\n                result += \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxcqylemh.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmpxcqylemh.cs(28,42): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpxcqylemh.cs(34,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                    break;\n                }\n            }\n        }\n        int max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n                maxIndex = i;\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[maxIndex] == words[i].Length()) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmavqlc4a.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpmavqlc4a.cs(46,46): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeCount = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeCount[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeCount[i]++;\n                }\n            }\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndex[i] = j;\n                }\n            }\n        }\n        string[] newWords = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            newWords[i] = words[primeIndex[i]];\n        }\n        return String.Join(\" \", newWords);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_rkdl_ip.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primeNumbers = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers[i] = PrimeNumbers.IsPrime(words[i].Length());\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers[i] == 0) {\n                return \"\";\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers[i] == 0) {\n                return \"\";\n            }\n            for (int j = i + 1; j < words.Length; j++) {\n                if (primeNumbers[i] == primeNumbers[j]) {\n                    return \"\";\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers[i] != 0) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqkxbextx.cs(28,31): error CS0103: The name 'PrimeNumbers' does not exist in the current context\n/tmp/tmpqkxbextx.cs(28,61): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primeNumbers = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers[i] = IsPrime(words[i]);\n        }\n        int[] primeNumbers2 = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeNumbers2[i] = IsPrime(words[i]);\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers[i] != primeNumbers2[i]) {\n                return \"\";\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeNumbers[i] != 0) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n\n    private static int IsPrime(string word) {\n        int prime = 2;\n        int i = 0;\n        while (i < word.Length) {\n            if (word[i] == ' ') {\n                i++;\n                continue;\n            }\n            prime = Prime(prime);\n            if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {\n                prime = Prime(prime);\n            }\n            i++;\n        }\n        return prime;\n    }\n\n    private static int Prime(int prime) {\n        if (prime == 2) {\n            return 2;\n        }\n        if (prime % 2 == 0) {\n            return 2;\n        }\n        for (int i = 3; i <= Math.Sqrt(prime); i += 2) {\n            if (prime % i == 0) {\n                return 2;\n            }\n        }\n        return prime;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <15c3d698255040cb9c038489fd04fc82>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <15c3d698255040cb9c038489fd04fc82>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (IsPrime(words[i].Length())) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7lp33jje.cs(28,17): error CS0103: The name 'IsPrime' does not exist in the current context\n/tmp/tmp7lp33jje.cs(28,34): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] prime_count = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    prime_count[j]++;\n                }\n            }\n        }\n        int max_prime_count = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (max_prime_count < prime_count[i]) {\n                max_prime_count = prime_count[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < max_prime_count; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (prime_count[j] == max_prime_count && primes[j] % max_prime_count == 0) {\n                    result += words[j];\n                    result += \" \";\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp60ymudgs.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(lengths[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[j] == 1 && lengths[i] == lengths[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string[] newWords = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            newWords[i] = words[primeIndex[i]];\n        }\n        return String.Join(\" \", newWords);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpak0xgbqs.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpak0xgbqs.cs(32,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeIndex = new int[primes.Length];\n        for (int i = 0; i < primes.Length; i++) {\n            primeIndex[i] = -1;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length == primes[j]) {\n                    primeIndex[j] = i;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeIndex[i] != -1) {\n                result += words[primeIndex[i]];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2008aaad5404702badba76e3d4bb09d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e2008aaad5404702badba76e3d4bb09d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(lengths[i]);\n        }\n        int[] indexes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            indexes[i] = -1;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j] && lengths[i] == lengths[j]) {\n                    indexes[i] = j;\n                    break;\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n            if (indexes[i] != -1) {\n                sb.Append(words[i]);\n                sb.Append(' ');\n            }\n        }\n        return sb.ToString().TrimEnd(' ');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpstp7wpq9.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpstp7wpq9.cs(32,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 0) {\n                words[i] = \"\";\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i].Length() > 0) {\n                words[i] = words[i].Substring(0, 1);\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i].Length() > 0) {\n                words[i] = words[i].Substring(0, 1);\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i].Length() > 0) {\n                words[i] = words[i].Substring(0, 1);\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i].Length() > 0) {\n                words[i] = words[i].Substring(0, 1);\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i].Length() > 0) {\n                words[i] = words[i].Substring(0, 1);\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i].Length() > 0) {\n                words[i] = words[i].Substring(0, 1);\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i].Length() > 0) {\n                words[i] = words[i].Substring(0, 1);\n            }\n        }\n        for (int i\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqraygsdt.cs(70,19): error CS1002: ; expected\n/tmp/tmpqraygsdt.cs(70,19): error CS1525: Invalid expression term '}'\n/tmp/tmpqraygsdt.cs(70,19): error CS1026: ) expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeCount[i] == max) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnoocqigt.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (IsPrime(words[i].Length())) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n\n    private static bool IsPrime(int num) {\n        if (num == 1) {\n            return false;\n        }\n        if (num == 2) {\n            return true;\n        }\n        if (num % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.Sqrt(num); i += 2) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppbiv_uqa.cs(28,34): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i].Length());\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[i] > 0) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n\n    private static int IsPrime(int num) {\n        if (num < 2) {\n            return 0;\n        }\n        if (num == 2) {\n            return 1;\n        }\n        if (num % 2 == 0) {\n            return 0;\n        }\n        for (int i = 3; i * i <= num; i += 2) {\n            if (num % i == 0) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnqyl_w7j.cs(28,42): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[primeIndex[i]];\n        }\n        return result;\n    }\n\n    private static int IsPrime(string word) {\n        int prime = 2;\n        for (int i = 0; i < word.Length; i++) {\n            prime = prime * (int)Math.pow(word[i], 2);\n        }\n        return prime;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8u8p3q30.cs(49,39): error CS0117: 'Math' does not contain a definition for 'pow'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primeNumbers = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeNumbers2 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997};\n        int[] primeNumbers3 = {2, 3\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvfijc05n.cs(29,6): error CS1002: ; expected\n/tmp/tmpvfijc05n.cs(30,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpvfijc05n.cs(40,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > 0) {\n                result += words[i];\n                result += \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6_7ub_xp.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = PrimeNumbers.IsPrime(lengths[i]);\n        }\n        int[] indexes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            indexes[i] = -1;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = i + 1; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    indexes[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (indexes[i] != -1) {\n                result += words[i] + \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8p2dmu1g.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmp8p2dmu1g.cs(32,25): error CS0103: The name 'PrimeNumbers' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > 0) {\n                result += words[i];\n                result += \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6_7ub_xp.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        var result = new StringBuilder();\n        for (int i = 0; i < words.Length; i++) {\n            if (IsPrime(words[i].Length)) {\n                result.Append(words[i]);\n            }\n        }\n        return result.ToString();\n    }\n\n    private static bool IsPrime(int n) {\n        if (n < 2) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <19a47acf29394fa297d06b4e3f7177f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <19a47acf29394fa297d06b4e3f7177f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = GetPrime(lengths[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndex[i]++;\n                    break;\n                }\n            }\n        }\n        string[] newWords = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            newWords[i] = words[primeIndex[i]];\n        }\n        return String.Join(\" \", newWords);\n    }\n\n    private static int GetPrime(int n) {\n        if (n < 2) {\n            return 2;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n % 2 == 0) {\n            return 2;\n        }\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return i;\n            }\n            i += 2;\n        }\n        return n;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2gu2hlce.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndex[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[j] == 1 && primeIndex[j] == 0) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primeIndex[i] != 0) {\n                result += words[primeIndex[i]];\n                result += \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpc00gmfs2.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] prime_count = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    prime_count[j]++;\n                }\n            }\n        }\n        int max_prime = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (prime_count[i] > max_prime) {\n                max_prime = prime_count[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    if (prime_count[j] == max_prime) {\n                        result += words[i];\n                        break;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoyusexpr.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpoyusexpr.cs(44,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = GetPrimeNumbers(lengths.Length);\n        string[] newWords = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            int prime = primes[i];\n            newWords[i] = words[i].Substring(0, prime);\n        }\n        return String.Join(\" \", newWords);\n    }\n\n    private static int[] GetPrimeNumbers(int length) {\n        int[] primes = new int[length];\n        for (int i = 0; i < length; i++) {\n            primes[i] = i;\n        }\n        for (int i = 2; i < primes.Length; i++) {\n            if (IsPrime(primes[i])) {\n                for (int j = i * i; j < primes.Length; j += i) {\n                    primes[j] = 0;\n                }\n            }\n        }\n        return primes;\n    }\n\n    private static bool IsPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        if (num == 2) {\n            return true;\n        }\n        if (num % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= num; i += 2) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg6i569q7.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(lengths[i]);\n        }\n        int[] primeIndices = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndices[i] = -1;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[j] == 1 && primeIndices[j] == -1) {\n                    primeIndices[i] = j;\n                    break;\n                }\n            }\n        }\n        string[] newWords = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            newWords[i] = words[primeIndices[i]];\n        }\n        return String.Join(\" \", newWords);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpseep3gtt.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpseep3gtt.cs(32,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        string[] result = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            if (IsPrime(words[i].Length())) {\n                result[i] = words[i];\n            }\n        }\n        return String.Join(\" \", result);\n    }\n\n    private static bool IsPrime(int num) {\n        if (num < 2) {\n            return false;\n        }\n        if (num == 2) {\n            return true;\n        }\n        if (num % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.Sqrt(num); i += 2) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293409,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpouhsu2v5.cs(28,34): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                    break;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < max; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (primeCount[j] == i) {\n                    result += words[j];\n                    result += \" \";\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvlq_6zbt.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] == max) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpu1i3nn2f.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = i + 1; j < words.Length; j++) {\n                if (lengths[i] * lengths[j] <= lengths[i] + lengths[j]) {\n                    lengths[i] = lengths[i] + lengths[j];\n                    lengths[j] = lengths[i] - lengths[j];\n                    lengths[i] = lengths[i] - lengths[j];\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] > 1) {\n                result += words[i] + \" \";\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp151cr9le.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (lengths[i] % 2 == 0) {\n                words[i] = \"\";\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i].Length() > 0) {\n                words[i] = words[i].ToLower();\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i].Length() > 0) {\n                for (int j = i + 1; j < words.Length; j++) {\n                    if (words[i].Length() == words[j].Length()) {\n                        words[j] = \"\";\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i].Length() > 0) {\n                for (int j = i + 1; j < words.Length; j++) {\n                    if (words[i].Length() == words[j].Length()) {\n                        words[j] = \"\";\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i].Length() > 0) {\n                for (int j = i + 1; j < words.Length; j++) {\n                    if (words[i].Length() == words[j].Length()) {\n                        words[j] = \"\";\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < words.Length; i++) {\n            if (words[i].Length() > 0) {\n                for (int j = i + 1; j < words.Length; j++) {\n                    if (words[i].Length() == words[j].Length()) {\n                        words\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvzro678p.cs(71,30): error CS1002: ; expected\n/tmp/tmpvzro678p.cs(73,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpvzro678p.cs(83,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                }\n            }\n        }\n        int max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n                maxIndex = i;\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (primes[maxIndex] % words[i].Length() == 0) {\n                result += words[i];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz260yncy.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpz260yncy.cs(45,45): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        string[] result = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            if (IsPrime(words[i].Length())) {\n                result[i] = words[i];\n            }\n        }\n        return String.Join(\" \", result);\n    }\n\n    private static bool IsPrime(int n) {\n        if (n < 2) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi1zf3f2d.cs(28,34): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > 0) {\n                result += words[i];\n                result += \" \";\n            }\n        }\n        return result.TrimEnd(' ');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293408,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzvszb8c2.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = PrimeNumbers.IsPrime(lengths[i]);\n        }\n        int[] primeIndex = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    primeIndex[i] = j;\n                    break;\n                }\n            }\n        }\n        string[] newWords = new string[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            newWords[i] = words[primeIndex[i]];\n        }\n        return String.Join(\" \", newWords);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293410,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuex124rl.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpuex124rl.cs(32,25): error CS0103: The name 'PrimeNumbers' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] lengths = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            lengths[i] = words[i].Length();\n        }\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(lengths[i]);\n        }\n        int[] primeIndices = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primeIndices[i] = 0;\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[j] == 1 && lengths[j] == lengths[i]) {\n                    primeIndices[i] = j;\n                    break;\n                }\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            result += words[primeIndices[i]];\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnj50uf0j.cs(28,35): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n/tmp/tmpnj50uf0j.cs(32,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            primes[i] = IsPrime(words[i]);\n        }\n        int[] result = new int[words.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < words.Length; j++) {\n                if (primes[i] == primes[j]) {\n                    result[i]++;\n                }\n            }\n        }\n        string resultString = \"\";\n        for (int i = 0; i < words.Length; i++) {\n            if (result[i] > 0) {\n                resultString += words[i] + \" \";\n            }\n        }\n        return resultString;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkaw9wftk.cs(28,25): error CS0103: The name 'IsPrime' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        // Write your code here\n        string[] words = sentence.Split(' ');\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};\n        int[] primeCount = new int[primes.Length];\n        for (int i = 0; i < words.Length; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (words[i].Length() % primes[j] == 0) {\n                    primeCount[j]++;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < primes.Length; i++) {\n            if (primeCount[i] > max) {\n                max = primeCount[i];\n            }\n        }\n        string result = \"\";\n        for (int i = 0; i < max; i++) {\n            for (int j = 0; j < primes.Length; j++) {\n                if (primeCount[j] == i) {\n                    result += words[j];\n                    result += \" \";\n                }\n            }\n        }\n        return result.TrimEnd(' ');\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n    }\n\n}\n",
      "timestamp": 1664293411,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoczbpp2b.cs(30,30): error CS1955: Non-invocable member 'string.Length' cannot be used like a method.\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}