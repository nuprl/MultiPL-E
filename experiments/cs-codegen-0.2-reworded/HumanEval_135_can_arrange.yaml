name: HumanEval_135_can_arrange
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function which returns the largest index of an element\
  \ which\n    // is not greater than or equal to the element immediately preceding\
  \ it. If\n    // no such element exists then return -1. The given list will not\
  \ contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n \
  \   // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CanArrange((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))) ==\
  \ (3L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)4L, (long)5L}))) == (-1L));\n    Debug.Assert(CanArrange((new List<long>(new\
  \ long[]{(long)1L, (long)4L, (long)2L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L,\
  \ (long)10L}))) == (2L));\n    Debug.Assert(CanArrange((new List<long>(new long[]{(long)4L,\
  \ (long)8L, (long)5L, (long)7L, (long)3L}))) == (4L));\n    Debug.Assert(CanArrange((new\
  \ List<long>())) == (-1L));\n    }\n\n}\n"
completions: ["        long max = arr.Count - 1;\n        long min = 0;\n        while\
    \ (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid]\
    \ > arr[mid - 1]) {\n                return mid - 1;\n            }\n        \
    \    if (arr[mid] < arr[mid - 1]) {\n                max = mid - 1;\n        \
    \    }\n            else {\n                min = mid + 1;\n            }\n  \
    \      }\n        return -1;", "        long max = arr.Count - 1;\n        long\
    \ maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n\
    \            }\n        }\n        return maxIndex;", "        long max = arr.Count\
    \ - 1;\n        long result = -1;\n        for (long i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                result = i;\n   \
    \             break;\n            }\n        }\n        return result;", "   \
    \     long max = arr.Count - 1;\n        long min = 0;\n        while (min <=\
    \ max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] >\
    \ arr[mid - 1]) {\n                return mid - 1;\n            }\n          \
    \  if (arr[mid] < arr[mid - 1]) {\n                max = mid - 1;\n          \
    \  }\n            else {\n                min = mid + 1;\n            }\n    \
    \    }\n        return -1;", "        long max = arr.Count - 1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n     \
    \           max = i;\n            }\n        }\n        return max;", "      \
    \  long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] > arr[i + 1]) {\n                max = i;\n          \
    \  }\n        }\n        return max;", "        long max = arr.Count - 1;\n  \
    \      long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n     \
    \           break;\n            }\n        }\n        return maxIndex;", "   \
    \     long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n      \
    \      }\n        }\n        return max;", "        long max = arr.Count - 1;\n\
    \        long min = 0;\n        while (min <= max) {\n            long mid = (min\
    \ + max) / 2;\n            if (arr[mid] < arr[mid + 1]) {\n                return\
    \ mid;\n            }\n            if (arr[mid] < arr[mid - 1]) {\n          \
    \      return mid - 1;\n            }\n            if (arr[mid] < arr[mid - 1])\
    \ {\n                return mid - 1;\n            }\n            if (arr[mid]\
    \ < arr[mid + 1]) {\n                return mid;\n            }\n            min\
    \ = mid + 1;\n            max = mid - 1;\n        }\n        return -1;", "  \
    \      long max = arr.Count - 1;\n        long max_index = -1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n     \
    \           max_index = i;\n                break;\n            }\n        }\n\
    \        if (max_index == -1) {\n            return -1;\n        }\n        for\
    \ (int i = max_index; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n\
    \                return i;\n            }\n        }\n        return -1;", " \
    \       long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n     \
    \           maxIndex = i;\n                break;\n            }\n        }\n\
    \        if (maxIndex == -1) {\n            return -1;\n        }\n        for\
    \ (long i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n\
    \                maxIndex = i;\n                break;\n            }\n      \
    \  }\n        return maxIndex;", "        long max = arr.Count - 1;\n        long\
    \ maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n\
    \            }\n        }\n        if (maxIndex == -1) {\n            return -1;\n\
    \        }\n        for (int i = maxIndex; i >= 0; i--) {\n            if (arr[i]\
    \ > arr[i + 1]) {\n                maxIndex = i;\n                break;\n   \
    \         }\n        }\n        return maxIndex;", "        long max = arr.Count\
    \ - 1;\n        long max_index = -1;\n        for (long i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] <= arr[i + 1]) {\n                max_index =\
    \ i;\n                break;\n            }\n        }\n        return max_index;",
  "        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n      \
    \      }\n        }\n        return max;", "        long max = arr.Count - 1;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i\
    \ + 1]) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = arr.Count - 1;\n        long maxIndex = -1;\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i +\
    \ 1]) {\n                maxIndex = i;\n                break;\n            }\n\
    \        }\n        return maxIndex;", "        long max = arr.Count - 1;\n  \
    \      long min = 0;\n        while (min < max) {\n            long mid = (min\
    \ + max) / 2;\n            if (arr[mid] > arr[mid + 1]) {\n                max\
    \ = mid;\n            } else {\n                min = mid + 1;\n            }\n\
    \        }\n        return max;", "        long max = arr.Count - 1;\n       \
    \ for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1])\
    \ {\n                max = i;\n            }\n        }\n        return max;",
  "        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n     \
    \           maxIndex = i;\n                break;\n            }\n        }\n\
    \        if (maxIndex == -1) {\n            return -1;\n        }\n        for\
    \ (long i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n\
    \                return i;\n            }\n        }\n        return -1;", " \
    \       long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n      \
    \      }\n        }\n        return max;", "        long max = arr.Count - 1;\n\
    \        long min = 0;\n        while (min <= max) {\n            long mid = (min\
    \ + max) / 2;\n            if (arr[mid] < arr[mid + 1]) {\n                return\
    \ mid;\n            }\n            if (arr[mid] > arr[mid + 1]) {\n          \
    \      max = mid - 1;\n            } else {\n                min = mid + 1;\n\
    \            }\n        }\n        return -1;", "        long max = arr.Count\
    \ - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ > arr[i + 1]) {\n                max = i;\n            }\n        }\n      \
    \  return max;", "        long max = arr.Count - 1;\n        long max_index =\
    \ -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ <= arr[i + 1]) {\n                max_index = i;\n                break;\n \
    \           }\n        }\n        return max_index;", "        long max = arr.Count\
    \ - 1;\n        long min = 0;\n        while (min <= max) {\n            long\
    \ mid = (min + max) / 2;\n            if (arr[mid] <= arr[mid - 1]) {\n      \
    \          min = mid + 1;\n            }\n            else {\n               \
    \ max = mid - 1;\n            }\n        }\n        return max;", "        long\
    \ max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n \
    \       }\n        return max;", "        long max = arr.Count - 1;\n        long\
    \ maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n           \
    \ if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n\
    \            }\n        }\n        return maxIndex;", "        long max = arr.Count\
    \ - 1;\n        long max_index = -1;\n        for (long i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] > arr[i + 1]) {\n                max_index =\
    \ i;\n                break;\n            }\n        }\n        return max_index;",
  "        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n      \
    \      }\n        }\n        return max;", "        long max = arr.Count - 1;\n\
    \        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i\
    \ + 1]) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = arr.Count - 1;\n        long min = 0;\n        while\
    \ (min < max) {\n            long mid = (min + max) / 2;\n            if (arr[mid]\
    \ < arr[mid + 1]) {\n                max = mid;\n            }\n            else\
    \ {\n                min = mid + 1;\n            }\n        }\n        return\
    \ max;", "        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n \
    \           }\n        }\n        return max;", "        long max = arr.Count\
    \ - 1;\n        long max_index = -1;\n        for (long i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] <= arr[i + 1]) {\n                max_index =\
    \ i;\n                break;\n            }\n        }\n        return max_index;",
  "        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1; i++)\
    \ {\n            if (arr[i] < arr[i + 1]) {\n                max = i;\n      \
    \          break;\n            }\n        }\n        return max;", "        long\
    \ max = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1; i++) {\n  \
    \          if (arr[i] < arr[i + 1]) {\n                max = i;\n            }\n\
    \        }\n        return max;", "        long max = arr.Count - 1;\n       \
    \ for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1])\
    \ {\n                max = i;\n            }\n        }\n        return max;",
  "        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n    \
    \            maxIndex = i;\n                break;\n            }\n        }\n\
    \        return maxIndex;", "        long max = arr.Count - 1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n     \
    \           max = i;\n            }\n        }\n        return max;", "      \
    \  long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] > arr[i + 1]) {\n                max = i;\n          \
    \  }\n        }\n        return max;", "        long max = arr.Count - 1;\n  \
    \      for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i\
    \ + 1]) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = arr.Count - 1;\n        long min = 0;\n        while\
    \ (min < max) {\n            long mid = (min + max) / 2;\n            if (arr[mid]\
    \ < arr[mid + 1]) {\n                max = mid;\n            }\n            else\
    \ {\n                min = mid + 1;\n            }\n        }\n        return\
    \ max;", "        long max = arr.Count - 1;\n        long maxIndex = -1;\n   \
    \     for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i +\
    \ 1]) {\n                maxIndex = i;\n                break;\n            }\n\
    \        }\n        if (maxIndex == -1) {\n            return -1;\n        }\n\
    \        for (long i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i\
    \ + 1]) {\n                maxIndex = i;\n                break;\n           \
    \ }\n        }\n        return maxIndex;", "        long max = arr.Count - 1;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i\
    \ + 1]) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n \
    \           }\n        }\n        return max;", "        long max = arr.Count\
    \ - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n \
    \               break;\n            }\n        }\n        if (maxIndex == -1)\
    \ {\n            return -1;\n        }\n        for (long i = maxIndex; i >= 0;\
    \ i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n\
    \                break;\n            }\n        }\n        return maxIndex;",
  "        long max = arr.First();\n        long min = arr.Last();\n        for (int\
    \ i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] < max && arr[i] > arr[i\
    \ + 1]) {\n                max = arr[i];\n            }\n        }\n        if\
    \ (max < min) {\n            return -1;\n        }\n        for (int i = arr.Count\
    \ - 1; i > 0; i--) {\n            if (arr[i] > min && arr[i] < arr[i - 1]) {\n\
    \                min = arr[i];\n            }\n        }\n        if (max == min)\
    \ {\n            return -1;\n        }\n        return max - min;", "        long\
    \ max = arr.Count - 1;\n        long min = 0;\n        while (min < max) {\n \
    \           long mid = (min + max) / 2;\n            if (arr[mid] < arr[mid +\
    \ 1]) {\n                max = mid;\n            }\n            else {\n     \
    \           min = mid + 1;\n            }\n        }\n        return max;", " \
    \       long max = arr.Count - 1;\n        long min = 0;\n        while (min <\
    \ max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] >\
    \ arr[mid + 1]) {\n                max = mid;\n            } else {\n        \
    \        min = mid + 1;\n            }\n        }\n        return max;", "   \
    \     long max = arr.Count - 1;\n        long max_index = -1;\n        for (long\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n     \
    \           max_index = i;\n                break;\n            }\n        }\n\
    \        if (max_index == -1) {\n            return -1;\n        }\n        for\
    \ (long i = max_index; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n\
    \                max_index = i;\n                break;\n            }\n     \
    \   }\n        return max_index;", "        long max = arr.Count - 1;\n      \
    \  for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] < arr[i +\
    \ 1]) {\n                max = i;\n                break;\n            }\n   \
    \     }\n        return max;", "        long max = arr.Count - 1;\n        long\
    \ min = 0;\n        while (min <= max) {\n            long mid = (min + max) /\
    \ 2;\n            if (arr[mid] > arr[mid - 1]) {\n                return mid -\
    \ 1;\n            }\n            if (arr[mid] < arr[mid - 1]) {\n            \
    \    max = mid - 1;\n            }\n            else {\n                min =\
    \ mid + 1;\n            }\n        }\n        return -1;", "        long max =\
    \ arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex =\
    \ i;\n                break;\n            }\n        }\n        return maxIndex;",
  "        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n      \
    \      }\n        }\n        return max;", "        long max = arr.Count - 1;\n\
    \        long min = 0;\n        while (min <= max) {\n            long mid = (min\
    \ + max) / 2;\n            if (arr[mid] > arr[mid - 1]) {\n                return\
    \ mid - 1;\n            }\n            if (arr[mid] < arr[mid - 1]) {\n      \
    \          max = mid - 1;\n            } else {\n                min = mid + 1;\n\
    \            }\n        }\n        return -1;", "        long max = arr.Count\
    \ - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n \
    \               break;\n            }\n        }\n        if (maxIndex == -1)\n\
    \            return -1;\n        for (long i = maxIndex; i > 0; i--) {\n     \
    \       if (arr[i] > arr[i - 1]) {\n                maxIndex = i;\n          \
    \      break;\n            }\n        }\n        return maxIndex;", "        long\
    \ max = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1; i++) {\n  \
    \          if (arr[i] < arr[i + 1]) {\n                max = i;\n            }\n\
    \        }\n        return max;", "        long max = arr.Count - 1;\n       \
    \ for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1])\
    \ {\n                max = i;\n            }\n        }\n        return max;",
  "        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n     \
    \           maxIndex = i;\n                break;\n            }\n        }\n\
    \        if (maxIndex == -1) {\n            return -1;\n        }\n        for\
    \ (int i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n\
    \                maxIndex = i;\n                break;\n            }\n      \
    \  }\n        return maxIndex;", "        long max = arr.First();\n        for\
    \ (int i = 1; i < arr.Count(); i++) {\n            if (arr[i] > max) {\n     \
    \           max = arr[i];\n            }\n        }\n        for (int i = 0; i\
    \ < arr.Count(); i++) {\n            if (arr[i] > max) {\n                return\
    \ i;\n            }\n        }\n        return -1;", "        long max = arr.Count\
    \ - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ > arr[i + 1]) {\n                max = i;\n            }\n        }\n      \
    \  return max;", "        long max = arr.Count - 1;\n        long maxIndex = -1;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i\
    \ + 1]) {\n                maxIndex = i;\n                break;\n           \
    \ }\n        }\n        if (maxIndex == -1) {\n            return -1;\n      \
    \  }\n        for (int i = maxIndex; i >= 0; i--) {\n            if (arr[i] >\
    \ arr[i + 1]) {\n                maxIndex = i;\n                break;\n     \
    \       }\n        }\n        return maxIndex;", "        long max = arr.Count\
    \ - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ > arr[i + 1]) {\n                max = i;\n            }\n        }\n      \
    \  return max;", "        long max = arr.Count - 1;\n        long result = -1;\n\
    \        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] < arr[i\
    \ + 1]) {\n                result = i;\n                break;\n            }\n\
    \        }\n        if (result == -1) {\n            return max;\n        }\n\
    \        for (long i = result + 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ < arr[i - 1]) {\n                result = i;\n                break;\n     \
    \       }\n        }\n        return result;", "        long max = arr.Count -\
    \ 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >\
    \ arr[i + 1]) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = arr.Count - 1;\n        long min = 0;\n        while\
    \ (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid]\
    \ > arr[mid - 1]) {\n                return mid - 1;\n            }\n        \
    \    else if (arr[mid] < arr[mid - 1]) {\n                max = mid - 1;\n   \
    \         }\n            else {\n                min = mid + 1;\n            }\n\
    \        }\n        return -1;", "        long max = arr.Count - 1;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n\
    \                max = i;\n            }\n        }\n        return max;", " \
    \       long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count - 1;\
    \ i++) {\n            if (arr[i] < arr[i + 1]) {\n                max = i;\n \
    \           }\n        }\n        return max;", "        long max = arr.First();\n\
    \        for (int i = 1; i < arr.Count(); i++) {\n            if (arr[i] > max)\
    \ {\n                max = arr[i];\n            }\n        }\n        for (int\
    \ i = 0; i < arr.Count(); i++) {\n            if (arr[i] >= max) {\n         \
    \       return i;\n            }\n        }\n        return -1;", "        long\
    \ max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n     \
    \       if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n\
    \        }\n        return max;", "        long max = arr.Count - 1;\n       \
    \ long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n       \
    \     if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n           \
    \     break;\n            }\n        }\n        return maxIndex;", "        long\
    \ max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n \
    \       }\n        return max;", "        long max = arr.Count - 1;\n        long\
    \ max_index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n           \
    \ if (arr[i] <= arr[i + 1]) {\n                max_index = i;\n              \
    \  break;\n            }\n        }\n        return max_index;", "        long\
    \ max = arr.Count - 1;\n        long result = -1;\n        for (long i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n              \
    \  result = i;\n                break;\n            }\n        }\n        return\
    \ result;", "        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n \
    \           }\n        }\n        return max;", "        long max = arr.Count\
    \ - 1;\n        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n \
    \               break;\n            }\n        }\n        if (maxIndex == -1)\
    \ {\n            return -1;\n        }\n        for (int i = maxIndex; i >= 0;\
    \ i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n\
    \                break;\n            }\n        }\n        return maxIndex;",
  "        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n      \
    \      }\n        }\n        return max;", "        long max = arr.Count - 1;\n\
    \        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n    \
    \            break;\n            }\n        }\n        return maxIndex;", "  \
    \      long max = arr.Count - 1;\n        long min = 0;\n        while (min <\
    \ max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] >\
    \ arr[mid + 1]) {\n                max = mid;\n            } else {\n        \
    \        min = mid + 1;\n            }\n        }\n        return max;", "   \
    \     long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] > arr[i + 1]) {\n                max = i;\n          \
    \  }\n        }\n        return max;", "        long max = arr.Count - 1;\n  \
    \      for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i\
    \ + 1]) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = arr.Count - 1;\n        long min = 0;\n        while\
    \ (min <= max) {\n            long mid = (min + max) / 2;\n            if (arr[mid]\
    \ < arr[mid + 1]) {\n                return mid;\n            }\n            if\
    \ (arr[mid] > arr[mid + 1]) {\n                max = mid - 1;\n            } else\
    \ {\n                min = mid + 1;\n            }\n        }\n        return\
    \ -1;", "        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count\
    \ - 1; i++) {\n            if (arr[i] < arr[i + 1]) {\n                max = i;\n\
    \                break;\n            }\n        }\n        return max;", "   \
    \     long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n      \
    \      }\n        }\n        return max;", "        long max = arr.Count - 1;\n\
    \        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i\
    \ + 1]) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = arr.Count - 1;\n        long maxIndex = -1;\n   \
    \     for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i +\
    \ 1]) {\n                maxIndex = i;\n                break;\n            }\n\
    \        }\n        return maxIndex;", "        long max = arr.Count - 1;\n  \
    \      long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n  \
    \          if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n       \
    \         break;\n            }\n        }\n        if (maxIndex == -1) {\n  \
    \          return -1;\n        }\n        for (int i = maxIndex; i >= 0; i--)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                return i;\n     \
    \       }\n        }\n        return -1;", "        long max = arr.Count - 1;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i\
    \ + 1]) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = arr.Count - 1;\n        long maxIndex = -1;\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i +\
    \ 1]) {\n                maxIndex = i;\n                break;\n            }\n\
    \        }\n        return maxIndex;", "        long max = arr.Count - 1;\n  \
    \      long result = -1;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[i] > arr[i + 1]) {\n                result = i;\n           \
    \     break;\n            }\n        }\n        return result;", "        long\
    \ max = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1; i++) {\n  \
    \          if (arr[i] < arr[i + 1]) {\n                max = i;\n            \
    \    break;\n            }\n        }\n        return max;", "        long max\
    \ = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++) {\n         \
    \   if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n    \
    \    }\n        return max;", "        long max = arr.Count - 1;\n        long\
    \ maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n\
    \            }\n        }\n        return maxIndex;", "        long max = arr.Count\
    \ - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ > arr[i + 1]) {\n                max = i;\n            }\n        }\n      \
    \  return max;", "        long max = arr.Count - 1;\n        long maxIndex = -1;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i\
    \ + 1]) {\n                maxIndex = i;\n                break;\n           \
    \ }\n        }\n        return maxIndex;", "        long max = arr.Count - 1;\n\
    \        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n     \
    \           break;\n            }\n        }\n        if (maxIndex == -1) {\n\
    \            return -1;\n        }\n        for (long i = maxIndex; i >= 0; i--)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n \
    \               break;\n            }\n        }\n        return maxIndex;", " \
    \       long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1;\
    \ i++) {\n            if (arr[i] < arr[i + 1]) {\n                max = i;\n \
    \               break;\n            }\n        }\n        return max;", "    \
    \    long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n     \
    \           maxIndex = i;\n                break;\n            }\n        }\n\
    \        return maxIndex;", "        long max = arr.Count - 1;\n        long min\
    \ = 0;\n        while (min < max) {\n            long mid = (min + max) / 2;\n\
    \            if (arr[mid] > arr[mid + 1]) {\n                max = mid;\n    \
    \        }\n            else {\n                min = mid + 1;\n            }\n\
    \        }\n        return max;", "        long max = arr.Count - 1;\n       \
    \ long max_index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n     \
    \       if (arr[i] <= arr[i + 1]) {\n                max_index = i;\n        \
    \        break;\n            }\n        }\n        return max_index;", "     \
    \   long max = arr.Count - 1;\n        long max_index = -1;\n        for (long\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n    \
    \            max_index = i;\n                break;\n            }\n        }\n\
    \        return max_index;", "        long max = arr.Count - 1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n     \
    \           max = i;\n            }\n        }\n        return max;", "      \
    \  long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] > arr[i + 1]) {\n                max = i;\n          \
    \  }\n        }\n        return max;", "        long max = arr.Count - 1;\n  \
    \      long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n  \
    \          if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n       \
    \         break;\n            }\n        }\n        if (maxIndex == -1) {\n  \
    \          return -1;\n        }\n        for (int i = maxIndex; i >= 0; i--)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                return i;\n     \
    \       }\n        }\n        return -1;", "        long max = arr.Count - 1;\n\
    \        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n     \
    \           break;\n            }\n        }\n        if (maxIndex == -1) {\n\
    \            return -1;\n        }\n        for (long i = maxIndex; i >= 0; i--)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n \
    \               break;\n            }\n        }\n        return maxIndex;", " \
    \       long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n      \
    \      }\n        }\n        return max;", "        long max = arr.Count - 1;\n\
    \        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i\
    \ + 1]) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = arr.Count - 1;\n        long min = 0;\n        while\
    \ (min < max) {\n            long mid = (min + max) / 2;\n            if (arr[mid]\
    \ > arr[mid + 1]) {\n                max = mid;\n            }\n            else\
    \ {\n                min = mid + 1;\n            }\n        }\n        return\
    \ max;", "        long max = arr.Count - 1;\n        long maxIndex = -1;\n   \
    \     for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i\
    \ + 1]) {\n                maxIndex = i;\n                break;\n           \
    \ }\n        }\n        return maxIndex;", "        long max = arr.Count - 1;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i\
    \ + 1]) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = arr.Count - 1;\n        long max_index = -1;\n  \
    \      for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i\
    \ + 1]) {\n                max_index = i;\n                break;\n          \
    \  }\n        }\n        if (max_index == -1) {\n            return -1;\n    \
    \    }\n        for (long i = max_index; i >= 0; i--) {\n            if (arr[i]\
    \ > arr[i + 1]) {\n                return i;\n            }\n        }\n     \
    \   return -1;", "        long max = arr.Count - 1;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n              \
    \  max = i;\n            }\n        }\n        return max;", "        long max\
    \ = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1; i++) {\n      \
    \      if (arr[i] < arr[i + 1]) {\n                max = i;\n            }\n \
    \       }\n        return max;", "        long max = arr.Count - 1;\n        long\
    \ maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n           \
    \ if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n               \
    \ break;\n            }\n        }\n        return maxIndex;", "        long max\
    \ = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex\
    \ = i;\n                break;\n            }\n        }\n        if (maxIndex\
    \ == -1) {\n            return -1;\n        }\n        for (long i = maxIndex;\
    \ i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex\
    \ = i;\n                break;\n            }\n        }\n        return maxIndex;",
  "        long max = arr.Count - 1;\n        long min = 0;\n        while (min <=\
    \ max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] >\
    \ arr[mid - 1]) {\n                return mid;\n            }\n            if\
    \ (arr[mid] > arr[mid + 1]) {\n                max = mid - 1;\n            } else\
    \ {\n                min = mid + 1;\n            }\n        }\n        return\
    \ -1;", "        long max = arr.Count - 1;\n        long max_index = -1;\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i +\
    \ 1]) {\n                max_index = i;\n                break;\n            }\n\
    \        }\n        return max_index;", "        long max = arr.Count - 1;\n \
    \       long min = 0;\n        while (min < max) {\n            long mid = (min\
    \ + max) / 2;\n            if (arr[mid] > arr[mid + 1]) {\n                max\
    \ = mid;\n            }\n            else {\n                min = mid + 1;\n\
    \            }\n        }\n        return max;", "        long max = arr.Count\
    \ - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ > arr[i + 1]) {\n                max = i;\n            }\n        }\n      \
    \  return max;", "        long max = arr.Count - 1;\n        for (int i = 0; i\
    \ < arr.Count - 1; i++) {\n            if (arr[i] < arr[i + 1]) {\n          \
    \      max = i;\n                break;\n            }\n        }\n        return\
    \ max;", "        long max = arr.Count - 1;\n        long maxIndex = -1;\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i +\
    \ 1]) {\n                maxIndex = i;\n                break;\n            }\n\
    \        }\n        return maxIndex;", "        long max = arr.Count - 1;\n  \
    \      long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n      \
    \          break;\n            }\n        }\n        if (maxIndex == -1) {\n \
    \           return -1;\n        }\n        for (long i = maxIndex; i >= 0; i--)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n \
    \               break;\n            }\n        }\n        return maxIndex;", " \
    \       long max = arr.First();\n        for (long i = 1; i < arr.Count(); i++)\
    \ {\n            if (arr[i] > max) {\n                max = arr[i];\n        \
    \    }\n        }\n        for (long i = 0; i < arr.Count(); i++) {\n        \
    \    if (arr[i] >= max) {\n                return i;\n            }\n        }\n\
    \        return -1;", "        long max = arr.Count - 1;\n        long min = 0;\n\
    \        while (min <= max) {\n            long mid = (min + max) / 2;\n     \
    \       if (arr[mid] < arr[mid + 1]) {\n                return mid;\n        \
    \    }\n            if (arr[mid] > arr[mid + 1]) {\n                max = mid\
    \ - 1;\n            } else {\n                min = mid + 1;\n            }\n\
    \        }\n        return -1;", "        long max = arr.Count - 1;\n        long\
    \ min = 0;\n        while (min <= max) {\n            long mid = (min + max) /\
    \ 2;\n            if (arr[mid] > arr[mid - 1]) {\n                return mid;\n\
    \            }\n            if (arr[mid] < arr[mid - 1]) {\n                max\
    \ = mid - 1;\n            } else {\n                min = mid + 1;\n         \
    \   }\n        }\n        return -1;", "        long max = arr.Count - 1;\n  \
    \      long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n      \
    \          break;\n            }\n        }\n        return maxIndex;", "    \
    \    long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n     \
    \           maxIndex = i;\n                break;\n            }\n        }\n\
    \        if (maxIndex == -1) {\n            return max;\n        }\n        for\
    \ (int i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n\
    \                max = i;\n                break;\n            }\n        }\n\
    \        return max;", "        long max = arr.Count - 1;\n        for (long i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n       \
    \         max = i;\n            }\n        }\n        return max;", "        long\
    \ max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n            \
    \    maxIndex = i;\n                break;\n            }\n        }\n       \
    \ return maxIndex;", "        long max = arr.Count - 1;\n        long min = 0;\n\
    \        while (min <= max) {\n            long mid = (min + max) / 2;\n     \
    \       if (arr[mid] > arr[mid - 1]) {\n                return mid;\n        \
    \    }\n            if (arr[mid] < arr[mid - 1]) {\n                max = mid\
    \ - 1;\n            } else {\n                min = mid + 1;\n            }\n\
    \        }\n        return -1;", "        long max = arr.Count - 1;\n        for\
    \ (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] < arr[i + 1])\
    \ {\n                max = i;\n            }\n        }\n        return max;",
  "        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n     \
    \           maxIndex = i;\n                break;\n            }\n        }\n\
    \        return maxIndex;", "        long max = arr.Count - 1;\n        long maxIndex\
    \ = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n  \
    \          }\n        }\n        return maxIndex;", "        long max = arr.Count\
    \ - 1;\n        long min = 0;\n        while (min <= max) {\n            long\
    \ mid = (min + max) / 2;\n            if (arr[mid] <= arr[mid + 1]) {\n      \
    \          min = mid + 1;\n            }\n            else {\n               \
    \ max = mid - 1;\n            }\n        }\n        return max;", "        long\
    \ max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n \
    \       }\n        return max;", "        long max = arr.Count - 1;\n        long\
    \ min = 0;\n        while (min <= max) {\n            long mid = (min + max) /\
    \ 2;\n            if (arr[mid] < arr[mid + 1]) {\n                return mid;\n\
    \            }\n            else if (arr[mid] > arr[mid + 1]) {\n            \
    \    max = mid - 1;\n            }\n            else {\n                min =\
    \ mid + 1;\n            }\n        }\n        return -1;", "        long max =\
    \ arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] <= arr[i + 1]) {\n                maxIndex =\
    \ i;\n                break;\n            }\n        }\n        return maxIndex;",
  "        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n      \
    \      }\n        }\n        return max;", "        long max = arr.Count - 1;\n\
    \        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n    \
    \            break;\n            }\n        }\n        return maxIndex;", "  \
    \      long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n    \
    \            maxIndex = i;\n                break;\n            }\n        }\n\
    \        return maxIndex;", "        long max = arr.Count - 1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n     \
    \           max = i;\n            }\n        }\n        return max;", "      \
    \  long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1; i++)\
    \ {\n            if (arr[i] < arr[i + 1]) {\n                max = i;\n      \
    \          break;\n            }\n        }\n        return max;", "        long\
    \ max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n \
    \       }\n        return max;", "        long max = arr.Count - 1;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n\
    \                max = i;\n            }\n        }\n        return max;", " \
    \       long max = arr.Count - 1;\n        long min = 0;\n        while (min <=\
    \ max) {\n            long mid = (min + max) / 2;\n            if (arr[mid] <=\
    \ arr[mid + 1]) {\n                min = mid + 1;\n            }\n           \
    \ else {\n                max = mid - 1;\n            }\n        }\n        return\
    \ max;", "        long max = arr.Count - 1;\n        long maxIndex = -1;\n   \
    \     for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i +\
    \ 1]) {\n                maxIndex = i;\n                break;\n            }\n\
    \        }\n        return maxIndex;", "        long max = arr.Count - 1;\n  \
    \      for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i +\
    \ 1]) {\n                max = i;\n            }\n        }\n        return max;",
  "        long max = arr.Count - 1;\n        long result = -1;\n        for (long\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n    \
    \            result = i;\n                break;\n            }\n        }\n \
    \       return result;", "        long max = arr.Count - 1;\n        long maxIndex\
    \ = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n  \
    \          }\n        }\n        return maxIndex;", "        long max = arr.Count\
    \ - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ > arr[i + 1]) {\n                max = i;\n            }\n        }\n      \
    \  return max;", "        long max = arr.Count - 1;\n        long max_index =\
    \ -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ > arr[i + 1]) {\n                max_index = i;\n                break;\n  \
    \          }\n        }\n        if (max_index == -1) {\n            return max;\n\
    \        }\n        for (long i = max_index; i >= 0; i--) {\n            if (arr[i]\
    \ > arr[i + 1]) {\n                max = i;\n                break;\n        \
    \    }\n        }\n        return max;", "        long max = arr.Count - 1;\n\
    \        long min = 0;\n        while (min < max) {\n            long mid = (min\
    \ + max) / 2;\n            if (arr[mid] > arr[mid + 1]) {\n                max\
    \ = mid;\n            }\n            else {\n                min = mid + 1;\n\
    \            }\n        }\n        return max;", "        long max = arr.Count\
    \ - 1;\n        long min = 0;\n        while (min <= max) {\n            long\
    \ mid = (min + max) / 2;\n            if (arr[mid] > arr[mid - 1]) {\n       \
    \         return mid;\n            }\n            if (arr[mid] < arr[mid - 1])\
    \ {\n                max = mid - 1;\n            } else {\n                min\
    \ = mid + 1;\n            }\n        }\n        return -1;", "        long max\
    \ = arr.Count - 1;\n        for (int i = 0; i < arr.Count - 1; i++) {\n      \
    \      if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n \
    \       }\n        return max;", "        long max = arr.Count - 1;\n        for\
    \ (long i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] < arr[i + 1])\
    \ {\n                max = i;\n                break;\n            }\n       \
    \ }\n        return max;", "        long max = arr.Count - 1;\n        long maxIndex\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n  \
    \          }\n        }\n        return maxIndex;", "        long max = arr.Count\
    \ - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ > arr[i + 1]) {\n                return i;\n            }\n        }\n     \
    \   return max;", "        long max = arr.Count - 1;\n        long maxIndex =\
    \ -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ <= arr[i + 1]) {\n                maxIndex = i;\n                break;\n  \
    \          }\n        }\n        return maxIndex;", "        long max = arr.Count\
    \ - 1;\n        long max_index = -1;\n        for (long i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] > arr[i + 1]) {\n                max_index =\
    \ i;\n                break;\n            }\n        }\n        return max_index;",
  "        long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n    \
    \            maxIndex = i;\n                break;\n            }\n        }\n\
    \        return maxIndex;", "        long max = arr.Count - 1;\n        long maxIndex\
    \ = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ > arr[i + 1]) {\n                maxIndex = i;\n                break;\n   \
    \         }\n        }\n        if (maxIndex == -1) {\n            return max;\n\
    \        }\n        for (long i = maxIndex; i >= 0; i--) {\n            if (arr[i]\
    \ > arr[i + 1]) {\n                maxIndex = i;\n                break;\n   \
    \         }\n        }\n        return maxIndex;", "        long max = arr.Count\
    \ - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ > arr[i + 1]) {\n                max = i;\n            }\n        }\n      \
    \  return max;", "        long max = arr.Count - 1;\n        long maxIndex = -1;\n\
    \        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i\
    \ + 1]) {\n                maxIndex = i;\n                break;\n           \
    \ }\n        }\n        if (maxIndex == -1) {\n            return -1;\n      \
    \  }\n        for (long i = maxIndex; i >= 0; i--) {\n            if (arr[i] >\
    \ arr[i + 1]) {\n                maxIndex = i;\n                break;\n     \
    \       }\n        }\n        return maxIndex;", "        long max = arr.Count\
    \ - 1;\n        long result = -1;\n        for (long i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                result = i;\n   \
    \             break;\n            }\n        }\n        if (result == -1) {\n\
    \            return max;\n        }\n        for (long i = result + 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] > arr[i - 1]) {\n                result = i;\n\
    \                break;\n            }\n        }\n        return result;", " \
    \       long max = arr.Count - 1;\n        long max_index = -1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n    \
    \            max_index = i;\n                break;\n            }\n        }\n\
    \        return max_index;", "        long max = arr.Count - 1;\n        long\
    \ max_index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n          \
    \  if (arr[i] > arr[i + 1]) {\n                max_index = i;\n              \
    \  break;\n            }\n        }\n        return max_index;", "        long\
    \ max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] > arr[i + 1]) {\n                max = i;\n            }\n \
    \       }\n        return max;", "        long max = arr.Count - 1;\n        long\
    \ maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n                break;\n\
    \            }\n        }\n        if (maxIndex == -1) {\n            return max;\n\
    \        }\n        for (int i = maxIndex; i >= 0; i--) {\n            if (arr[i]\
    \ > arr[i + 1]) {\n                maxIndex = i;\n                break;\n   \
    \         }\n        }\n        return maxIndex;", "        long max = arr.Count\
    \ - 1;\n        long min = 0;\n        while (min <= max) {\n            long\
    \ mid = (min + max) / 2;\n            if (arr[mid] < arr[mid + 1]) {\n       \
    \         return mid;\n            }\n            if (arr[mid] > arr[mid + 1])\
    \ {\n                max = mid - 1;\n            } else {\n                min\
    \ = mid + 1;\n            }\n        }\n        return -1;", "        long max\
    \ = arr.First();\n        long min = arr.Last();\n        for (long i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n\
    \            }\n            if (arr[i] < min) {\n                min = arr[i];\n\
    \            }\n        }\n        if (max < min) {\n            return -1;\n\
    \        }\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ < max && arr[i] > min) {\n                return i;\n            }\n       \
    \ }\n        return -1;", "        long max = arr.Count - 1;\n        long maxIndex\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ > arr[i + 1]) {\n                maxIndex = i;\n                break;\n   \
    \         }\n        }\n        if (maxIndex == -1) {\n            return -1;\n\
    \        }\n        for (int i = maxIndex; i >= 0; i--) {\n            if (arr[i]\
    \ > arr[i + 1]) {\n                maxIndex = i;\n                break;\n   \
    \         }\n        }\n        return maxIndex;", "        long max = arr.Count\
    \ - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n \
    \               break;\n            }\n        }\n        return maxIndex;", " \
    \       long max = arr.Count - 1;\n        long maxIndex = -1;\n        for (long\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n     \
    \           maxIndex = i;\n                break;\n            }\n        }\n\
    \        if (maxIndex == -1) {\n            return max;\n        }\n        for\
    \ (long i = maxIndex; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n\
    \                maxIndex = i;\n                break;\n            }\n      \
    \  }\n        return maxIndex;", "        long max = arr.Count - 1;\n        long\
    \ maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n           \
    \ if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n               \
    \ break;\n            }\n        }\n        return maxIndex;", "        long max\
    \ = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] <= arr[i + 1]) {\n               \
    \ maxIndex = i;\n                break;\n            }\n        }\n        return\
    \ maxIndex;", "        long max = arr.Count - 1;\n        for (long i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                max\
    \ = i;\n            }\n        }\n        return max;", "        long max = arr.Count\
    \ - 1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ > arr[i + 1]) {\n                max = i;\n            }\n        }\n      \
    \  return max;", "        long max = arr.Count - 1;\n        long maxIndex = -1;\n\
    \        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] <= arr[i\
    \ + 1]) {\n                maxIndex = i;\n                break;\n           \
    \ }\n        }\n        return maxIndex;", "        long max = arr.Count - 1;\n\
    \        long min = 0;\n        while (min <= max) {\n            long mid = (min\
    \ + max) / 2;\n            if (arr[mid] <= arr[mid - 1]) {\n                max\
    \ = mid - 1;\n            } else {\n                min = mid + 1;\n         \
    \   }\n        }\n        return max;", "        long max = arr.Count - 1;\n \
    \       long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n     \
    \           break;\n            }\n        }\n        if (maxIndex == -1) {\n\
    \            return -1;\n        }\n        for (long i = maxIndex; i >= 0; i--)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n \
    \               break;\n            }\n        }\n        return maxIndex;", " \
    \       long max = arr.First();\n        for (int i = 1; i < arr.Count(); i++)\
    \ {\n            if (arr[i] > max) {\n                max = arr[i];\n        \
    \    }\n        }\n        for (int i = 0; i < arr.Count(); i++) {\n         \
    \   if (arr[i] >= max) {\n                return i;\n            }\n        }\n\
    \        return -1;", "        long max = arr.Count - 1;\n        long maxIndex\
    \ = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ > arr[i + 1]) {\n                maxIndex = i;\n                break;\n   \
    \         }\n        }\n        if (maxIndex == -1) {\n            return -1;\n\
    \        }\n        for (long i = maxIndex; i >= 0; i--) {\n            if (arr[i]\
    \ > arr[i + 1]) {\n                maxIndex = i;\n                break;\n   \
    \         }\n        }\n        return maxIndex;", "        long max = arr.Count\
    \ - 1;\n        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n \
    \               break;\n            }\n        }\n        if (maxIndex == -1)\
    \ {\n            return -1;\n        }\n        for (long i = maxIndex; i >= 0;\
    \ i--) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n\
    \                break;\n            }\n        }\n        return maxIndex;",
  "        long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n      \
    \      }\n        }\n        return max;", "        long max = arr.Count - 1;\n\
    \        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n     \
    \           break;\n            }\n        }\n        if (maxIndex == -1) {\n\
    \            return max;\n        }\n        for (long i = maxIndex; i >= 0; i--)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n \
    \               break;\n            }\n        }\n        return maxIndex;", " \
    \       long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n      \
    \      }\n        }\n        return max;", "        long max = arr.Count - 1;\n\
    \        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n    \
    \            break;\n            }\n        }\n        return maxIndex;", "  \
    \      long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n      \
    \      }\n        }\n        return max;", "        long max = arr.Count - 1;\n\
    \        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n     \
    \           break;\n            }\n        }\n        if (maxIndex == -1) {\n\
    \            return -1;\n        }\n        for (int i = maxIndex; i >= 0; i--)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex = i;\n \
    \               break;\n            }\n        }\n        return maxIndex;", " \
    \       long max = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n      \
    \      }\n        }\n        return max;", "        long max = arr.Count - 1;\n\
    \        long min = 0;\n        while (min < max) {\n            long mid = (min\
    \ + max) / 2;\n            if (arr[mid] > arr[mid + 1]) {\n                max\
    \ = mid;\n            } else {\n                min = mid + 1;\n            }\n\
    \        }\n        return max;", "        long max = arr.Count - 1;\n       \
    \ for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1])\
    \ {\n                max = i;\n            }\n        }\n        return max;",
  "        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n      \
    \      }\n        }\n        return max;", "        long max = arr.Count - 1;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i\
    \ + 1]) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n \
    \           }\n        }\n        return max;", "        long max = arr.Count\
    \ - 1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ > arr[i + 1]) {\n                max = i;\n            }\n        }\n      \
    \  return max;", "        long max = arr.Count - 1;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n              \
    \  max = i;\n            }\n        }\n        return max;", "        long max\
    \ = arr.Count - 1;\n        long min = 0;\n        while (min <= max) {\n    \
    \        long mid = (min + max) / 2;\n            if (arr[mid] > arr[mid - 1])\
    \ {\n                return mid;\n            }\n            if (arr[mid] < arr[mid\
    \ - 1]) {\n                max = mid - 1;\n            } else {\n            \
    \    min = mid + 1;\n            }\n        }\n        return -1;", "        long\
    \ max = arr.Count - 1;\n        long min = 0;\n        while (min < max) {\n \
    \           long mid = (min + max) / 2;\n            if (arr[mid] < arr[mid +\
    \ 1]) {\n                max = mid;\n            } else {\n                min\
    \ = mid + 1;\n            }\n        }\n        return max;", "        long max\
    \ = arr.Count - 1;\n        long maxIndex = -1;\n        for (long i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                maxIndex\
    \ = i;\n                break;\n            }\n        }\n        return maxIndex;",
  "        long max = arr.Count - 1;\n        for (long i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                max = i;\n      \
    \      }\n        }\n        return max;", "        long max = arr.Count - 1;\n\
    \        long maxIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] <= arr[i + 1]) {\n                maxIndex = i;\n    \
    \            break;\n            }\n        }\n        return maxIndex;"]
stop_tokens:
- "\n    }\n"
