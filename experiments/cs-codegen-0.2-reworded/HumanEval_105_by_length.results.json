{
  "name": "HumanEval_105_by_length",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<long> sorted = arr.OrderBy(x => x);\n        List<string> result = new List<string>();\n        for (long i : sorted) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph4glpn5x.cs(26,21): error CS1002: ; expected\n/tmp/tmph4glpn5x.cs(26,21): error CS1525: Invalid expression term ':'\n/tmp/tmph4glpn5x.cs(26,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => x > 9 ? \"Nine\" : (x > 4 ? \"Eight\" : (x > 2 ? \"Seven\" : (x > 1 ? \"Six\" : (x > 0 ? \"Five\" : \"Four\")))));\n        arr = arr.OrderBy(x => x);\n        return arr.Select(x => x.ToString());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvcmk2dp7.cs(24,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpvcmk2dp7.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpvcmk2dp7.cs(26,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpvcmk2dp7.cs(27,16): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<string>'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        if (arr.Count == 1)\n            return new List<string>(new string[] { \"One\" });\n        if (arr.Count == 2)\n            return new List<string>(new string[] { \"One\", \"Two\" });\n        if (arr.Count == 3)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\" });\n        if (arr.Count == 4)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\" });\n        if (arr.Count == 5)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\" });\n        if (arr.Count == 6)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\" });\n        if (arr.Count == 7)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\" });\n        if (arr.Count == 8)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\" });\n        if (arr.Count == 9)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" });\n        if (arr.Count == 10)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\" });\n        if (arr.Count == 11)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleven\" });\n        if (arr.Count == 12)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps3wvqsxj.cs(47,98): error CS1010: Newline in constant\n/tmp/tmps3wvqsxj.cs(48,6): error CS1026: ) expected\n/tmp/tmps3wvqsxj.cs(48,6): error CS1002: ; expected\n/tmp/tmps3wvqsxj.cs(49,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmps3wvqsxj.cs(57,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        if (arr.Count == 1)\n            return new List<string>(new string[] { \"One\" });\n        if (arr.Count == 2)\n            return new List<string>(new string[] { \"One\", \"Two\" });\n        if (arr.Count == 3)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\" });\n        if (arr.Count == 4)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\" });\n        if (arr.Count == 5)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\" });\n        if (arr.Count == 6)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\" });\n        if (arr.Count == 7)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\" });\n        if (arr.Count == 8)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\" });\n        if (arr.Count == 9)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" });\n        return arr.OrderBy(x => x).Select(x => String.Format(\"{0}\", x)).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <90435e906ca14d3e8101321c55395456>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <90435e906ca14d3e8101321c55395456>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0)\n            return result;\n        long[] arr_long = arr.ToArray();\n        Arrays.Sort(arr_long);\n        for (int i = 0; i < arr_long.Length; i++) {\n            if (arr_long[i] >= 1 && arr_long[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr_long[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq0ynm_5h.cs(26,9): error CS0103: The name 'Arrays' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        arr.Sort(new long[]{1, 2, 3, 4, 5, 6, 7, 8, 9}, new long[]{1, 2, 3, 4, 5, 6, 7, 8, 9});\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6 || i == 7 || i == 8 || i == 9) ? \"One\" : \"Two\"));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp109itduy.cs(24,21): error CS1002: ; expected\n/tmp/tmp109itduy.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmp109itduy.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i < 1 || i > 9) continue;\n            result.Add(String.Format(\"{0}\", i));\n        }\n        Collections.Reverse(result);\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4j3z_8y1.cs(24,21): error CS1002: ; expected\n/tmp/tmp4j3z_8y1.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmp4j3z_8y1.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        if (arr.Count == 1) return new List<string>(new string[]{(string)Math.ToString(arr.First)});\n        if (arr.Count == 2) return new List<string>(new string[]{(string)Math.ToString(arr.First), (string)Math.ToString(arr.Last)});\n        if (arr.Count == 3) return new List<string>(new string[]{(string)Math.ToString(arr.First), (string)Math.ToString(arr.Last), (string)Math.ToString(arr.Last)});\n        if (arr.Count == 4) return new List<string>(new string[]{(string)Math.ToString(arr.First), (string)Math.ToString(arr.Last), (string)Math.ToString(arr.Last), (string)Math.ToString(arr.Last)});\n        if (arr.Count == 5) return new List<string>(new string[]{(string)Math.ToString(arr.First), (string)Math.ToString(arr.Last), (string)Math.ToString(arr.Last), (string)Math.ToString(arr.Last), (string)Math.ToString(arr.Last)});\n        if (arr.Count == 6) return new List<string>(new string[]{(string)Math.ToString(arr.First), (string)Math.ToString(arr.Last), (string)Math.ToString(arr.Last), (string)Math.ToString(arr.Last), (string)Math.ToString(arr.Last), (string)Math.ToString(arr.Last)});\n        if (arr.Count == 7) return new List<string>(new string[]{(string)Math.ToString(arr.First), (string)Math.ToString(arr.Last), (string)Math.ToString(arr.Last), (string)Math.ToString(arr.Last), (string)Math.ToString(arr.Last), (string)Math.ToString(arr.Last), (string)Math.ToString(arr.Last)});\n        if (arr.Count == 8) return new List\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmposqnay52.cs(30,44): error CS1526: A new expression requires (), [], or {} after type\n/tmp/tmposqnay52.cs(30,44): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0eow0zka.cs(25,21): error CS1002: ; expected\n/tmp/tmp0eow0zka.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp0eow0zka.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => {\n            if (x < 1 || x > 9)\n                return \"\";\n            return String.Format(\"{0}\", x);\n        });\n        arr = arr.OrderBy(x => x);\n        return arr.Select(x => {\n            if (x == \"\")\n                return \"\";\n            return String.Format(\"{0}\", x);\n        });\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsd_18pfh.cs(24,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpsd_18pfh.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpsd_18pfh.cs(30,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpsd_18pfh.cs(32,17): error CS0019: Operator '==' cannot be applied to operands of type 'long' and 'string'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0) return result;\n        long min = arr.MinValue;\n        long max = arr.MaxValue;\n        if (min < 1 || max > 9) return result;\n        arr.Sort(new longComparer());\n        for (long i = min; i <= max; i++) {\n            result.Add(String.Format(\"{0}\", i));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0smgdc0h.cs(24,24): error CS1061: 'List<long>' does not contain a definition for 'MinValue' and no accessible extension method 'MinValue' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp0smgdc0h.cs(25,24): error CS1061: 'List<long>' does not contain a definition for 'MaxValue' and no accessible extension method 'MaxValue' accepting a first argument of type 'List<long>' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp0smgdc0h.cs(27,22): error CS0246: The type or namespace name 'longComparer' could not be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => Math.Abs(x) == 1 ? \"One\" : Math.Abs(x) == 2 ? \"Two\" : Math.Abs(x) == 3 ? \"Three\" : Math.Abs(x) == 4 ? \"Four\" : Math.Abs(x) == 5 ? \"Five\" : Math.Abs(x) == 6 ? \"Six\" : Math.Abs(x) == 7 ? \"Seven\" : Math.Abs(x) == 8 ? \"Eight\" : \"Nine\");\n        arr = arr.OrderBy(x => x);\n        return arr.Select(x => x.ToString());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgj_kmb7j.cs(24,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpgj_kmb7j.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpgj_kmb7j.cs(26,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpgj_kmb7j.cs(27,16): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<string>'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        arr.Sort((a, b) => {\n            if (a > b)\n                return 1;\n            if (a < b)\n                return -1;\n            return 0;\n        });\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzicddjxw.cs(30,21): error CS1002: ; expected\n/tmp/tmpzicddjxw.cs(30,21): error CS1525: Invalid expression term ':'\n/tmp/tmpzicddjxw.cs(30,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0) return result;\n        long min = arr.First();\n        long max = arr.Last();\n        if (min > max) return result;\n        if (min < 0 || max < 0) return result;\n        if (min > 9 || max > 9) return result;\n        if (min == max) return result;\n        if (min == 0) return result;\n        if (max == 0) return result;\n        if (min == 1 && max == 9) return result;\n        if (min == 2 && max == 9) return result;\n        if (min == 3 && max == 9) return result;\n        if (min == 4 && max == 9) return result;\n        if (min == 5 && max == 9) return result;\n        if (min == 6 && max == 9) return result;\n        if (min == 7 && max == 9) return result;\n        if (min == 8 && max == 9) return result;\n        if (min == 9 && max == 9) return result;\n        if (min == 1 && max == 2) return result;\n        if (min == 2 && max == 3) return result;\n        if (min == 3 && max == 4) return result;\n        if (min == 4 && max == 5) return result;\n        if (min == 5 && max == 6) return result;\n        if (min == 6 && max == 7) return result;\n        if (min == 7 && max == 8) return result;\n        if (min == 8 && max == 9) return result;\n        if (min == 1 && max == 3) return result;\n        if (min == 2 && max == 4) return result;\n        if (min == 3 && max == 5) return result;\n        if (min == 4 && max == 6) return result;\n        if (min == 5 && max == 7) return result;\n        if (min == 6 && max == 8) return result;\n        if (min == 7 && max == 9) return result;\n        if (min == 1 && max == 4) return result;\n        if (min == 2 && max == 5) return result;\n        if (\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy0ry_2xz.cs(58,13): error CS1525: Invalid expression term '}'\n/tmp/tmpy0ry_2xz.cs(58,13): error CS1026: ) expected\n/tmp/tmpy0ry_2xz.cs(58,13): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0) return result;\n        long[] arr_long = arr.ToArray();\n        if (arr_long.Length == 0) return result;\n        long min = arr_long[0];\n        long max = arr_long[0];\n        for (int i = 0; i < arr_long.Length; i++) {\n            if (arr_long[i] < min) min = arr_long[i];\n            if (arr_long[i] > max) max = arr_long[i];\n        }\n        if (min > 9 || max < 1) return result;\n        for (int i = 0; i < arr_long.Length; i++) {\n            if (arr_long[i] >= 1 && arr_long[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr_long[i]));\n            }\n        }\n        for (int i = 0; i < arr_long.Length; i++) {\n            if (arr_long[i] > 9) arr_long[i] -= 10;\n        }\n        for (int i = 0; i < arr_long.Length; i++) {\n            if (arr_long[i] >= 1 && arr_long[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr_long[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d59d3c7e286e4d68a2939415c7fc8dc2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d59d3c7e286e4d68a2939415c7fc8dc2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i - 1)));\n            }\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdinbseut.cs(25,21): error CS1002: ; expected\n/tmp/tmpdinbseut.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpdinbseut.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort((a, b) => {\n            if (a > b)\n                return 1;\n            else if (a < b)\n                return -1;\n            else\n                return 0;\n        });\n        List<string> result = new List<string>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a6a9a194f26e40ed869b5d8c70abf90b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a6a9a194f26e40ed869b5d8c70abf90b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> ret = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                ret.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : (i == 2) ? \"Two\" : (i == 3) ? \"Three\" : (i == 4) ? \"Four\" : (i == 5) ? \"Five\" : (i == 6) ? \"Six\" : (i == 7) ? \"Seven\" : (i == 8) ? \"Eight\" : \"Nine\"));\n            }\n        }\n        return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw1rbo8p_.cs(24,21): error CS1002: ; expected\n/tmp/tmpw1rbo8p_.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmpw1rbo8p_.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort((a, b) => a - b);\n        arr.Reverse();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpegw0f3w8.cs(26,21): error CS1002: ; expected\n/tmp/tmpegw0f3w8.cs(26,21): error CS1525: Invalid expression term ':'\n/tmp/tmpegw0f3w8.cs(26,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> ret = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                ret.Add(String.Format(\"{0}\", i));\n            }\n        }\n        ret.Sort((a, b) => a.CompareTo(b));\n        for (int i = 0; i < ret.Count; i++) {\n            ret[i] = String.Format(\"{0}\", ret[i]);\n        }\n        return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpx641xv08.cs(24,21): error CS1002: ; expected\n/tmp/tmpx641xv08.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmpx641xv08.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0)\n            return result;\n        long min = arr.First();\n        long max = arr.Last();\n        if (min < 0 || max < 0 || min > 9 || max > 9 || min > max)\n            return result;\n        for (long i = min; i <= max; i++) {\n            result.Add(String.Format(\"{0}\", i));\n        }\n        for (int i = 0; i < arr.Count; i++) {\n            arr[i] = arr[i] - min + 1;\n        }\n        for (int i = 0; i < arr.Count; i++) {\n            result[arr[i]] = result[arr[i]];\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpf51ai84h.cs(36,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpf51ai84h.cs(36,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkqpqm_pn.cs(24,21): error CS1002: ; expected\n/tmp/tmpkqpqm_pn.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmpkqpqm_pn.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<long> numbers = arr.Where(x => x >= 1 && x <= 9);\n        List<string> result = new List<string>();\n        for (long num : numbers) {\n            result.Add(String.Format(\"{0}\", num));\n        }\n        return result.Reverse();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps4tvi76v.cs(25,23): error CS1002: ; expected\n/tmp/tmps4tvi76v.cs(25,23): error CS1525: Invalid expression term ':'\n/tmp/tmps4tvi76v.cs(25,23): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        if (arr.Count == 1) return new List<string>(new string[]{\"One\"});\n        if (arr.Count == 2) return new List<string>(new string[]{\"One\", \"Two\"});\n        if (arr.Count == 3) return new List<string>(new string[]{\"One\", \"Two\", \"Three\"});\n        if (arr.Count == 4) return new List<string>(new string[]{\"One\", \"Two\", \"Three\", \"Four\"});\n        if (arr.Count == 5) return new List<string>(new string[]{\"One\", \"Two\", \"Three\", \"Four\", \"Five\"});\n        if (arr.Count == 6) return new List<string>(new string[]{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"});\n        if (arr.Count == 7) return new List<string>(new string[]{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"});\n        if (arr.Count == 8) return new List<string>(new string[]{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"});\n        if (arr.Count == 9) return new List<string>(new string[]{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"});\n        return new List<string>(new string[]{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"});\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <848336ca20dc4ad7b2a15cf4ed5a11d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <848336ca20dc4ad7b2a15cf4ed5a11d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : (i == 2) ? \"Two\" : (i == 3) ? \"Three\" : (i == 4) ? \"Four\" : (i == 5) ? \"Five\" : (i == 6) ? \"Six\" : (i == 7) ? \"Seven\" : (i == 8) ? \"Eight\" : \"Nine\"));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdb48bkpl.cs(25,21): error CS1002: ; expected\n/tmp/tmpdb48bkpl.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpdb48bkpl.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort(new long[]{1, 2, 3, 4, 5, 6, 7, 8, 9}, new long[]{1, 2, 3, 4, 5, 6, 7, 8, 9});\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i - 1)));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxr2zx0c_.cs(25,21): error CS1002: ; expected\n/tmp/tmpxr2zx0c_.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpxr2zx0c_.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        if (arr.Count == 1) return new List<string>(new string[]{\"One\"});\n        if (arr.Count == 2) return new List<string>(new string[]{\"One\", \"Two\"});\n        if (arr.Count == 3) return new List<string>(new string[]{\"One\", \"Two\", \"Three\"});\n        if (arr.Count == 4) return new List<string>(new string[]{\"One\", \"Two\", \"Three\", \"Four\"});\n        if (arr.Count == 5) return new List<string>(new string[]{\"One\", \"Two\", \"Three\", \"Four\", \"Five\"});\n        if (arr.Count == 6) return new List<string>(new string[]{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"});\n        if (arr.Count == 7) return new List<string>(new string[]{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"});\n        if (arr.Count == 8) return new List<string>(new string[]{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"});\n        if (arr.Count == 9) return new List<string>(new string[]{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"});\n        if (arr.Count > 9) return new List<string>(new string[]{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"});\n        return new List<string>(new string[]{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"});\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <812d377892f34037ad0567effb7f309c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <812d377892f34037ad0567effb7f309c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : (i == 2) ? \"Two\" : (i == 3) ? \"Three\" : (i == 4) ? \"Four\" : (i == 5) ? \"Five\" : (i == 6) ? \"Six\" : (i == 7) ? \"Seven\" : (i == 8) ? \"Eight\" : \"Nine\"));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp275y9et6.cs(24,21): error CS1002: ; expected\n/tmp/tmp275y9et6.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmp275y9et6.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<long> numbers = arr.Where(x => x >= 1 && x <= 9);\n        List<string> result = numbers.Select(x => {\n            switch (x) {\n                case 1: return \"One\";\n                case 2: return \"Two\";\n                case 3: return \"Three\";\n                case 4: return \"Four\";\n                case 5: return \"Five\";\n                case 6: return \"Six\";\n                case 7: return \"Seven\";\n                case 8: return \"Eight\";\n                case 9: return \"Nine\";\n                default: return \"\";\n            }\n        }).ToList();\n        result.Sort((x, y) => {\n            if (x.Length == y.Length) return 0;\n            return x.Length < y.Length ? 1 : -1;\n        });\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoz9louex.cs(23,30): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : (i == 2) ? \"Two\" : (i == 3) ? \"Three\" : (i == 4) ? \"Four\" : (i == 5) ? \"Five\" : (i == 6) ? \"Six\" : (i == 7) ? \"Seven\" : (i == 8) ? \"Eight\" : \"Nine\"));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdb48bkpl.cs(25,21): error CS1002: ; expected\n/tmp/tmpdb48bkpl.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpdb48bkpl.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i > 9 || i < 1)\n                continue;\n            result.Add(String.Format(\"{0}\", i));\n        }\n        for (int i = result.Count - 1; i >= 0; i--) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzn95nb7o.cs(25,21): error CS1002: ; expected\n/tmp/tmpzn95nb7o.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpzn95nb7o.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0eow0zka.cs(25,21): error CS1002: ; expected\n/tmp/tmp0eow0zka.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp0eow0zka.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => {\n            if (x < 10)\n                return \"One\";\n            if (x < 100)\n                return \"Two\";\n            if (x < 1000)\n                return \"Three\";\n            if (x < 10000)\n                return \"Four\";\n            if (x < 100000)\n                return \"Five\";\n            if (x < 1000000)\n                return \"Six\";\n            if (x < 10000000)\n                return \"Seven\";\n            if (x < 100000000)\n                return \"Eight\";\n            if (x < 1000000000)\n                return \"Nine\";\n            return \"\";\n        });\n        arr = arr.Select(x => {\n            if (x == 0)\n                return \"\";\n            return String.Format(\"{0}\", x);\n        });\n        return arr.ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2u6_lbqb.cs(22,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp2u6_lbqb.cs(23,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp2u6_lbqb.cs(44,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp2u6_lbqb.cs(49,16): error CS0029: Cannot implicitly convert type 'System.Collections.Generic.List<long>' to 'System.Collections.Generic.List<string>'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0) return result;\n        if (arr.Count == 1) {\n            if (arr[0] > 9 || arr[0] < 1) return result;\n            result.Add(String.Format(\"{0}\", arr[0]));\n            return result;\n        }\n        if (arr.Count == 2) {\n            if (arr[0] > 9 || arr[0] < 1 || arr[1] > 9 || arr[1] < 1) return result;\n            result.Add(String.Format(\"{0}\", arr[0]));\n            result.Add(String.Format(\"{0}\", arr[1]));\n            return result;\n        }\n        if (arr.Count == 3) {\n            if (arr[0] > 9 || arr[0] < 1 || arr[1] > 9 || arr[1] < 1 || arr[2] > 9 || arr[2] < 1) return result;\n            result.Add(String.Format(\"{0}\", arr[0]));\n            result.Add(String.Format(\"{0}\", arr[1]));\n            result.Add(String.Format(\"{0}\", arr[2]));\n            return result;\n        }\n        if (arr.Count == 4) {\n            if (arr[0] > 9 || arr[0] < 1 || arr[1] > 9 || arr[1] < 1 || arr[2] > 9 || arr[2] < 1 || arr[3] > 9 || arr[3] < 1) return result;\n            result.Add(String.Format(\"{0}\", arr[0]));\n            result.Add(String.Format(\"{0}\", arr[1]));\n            result.Add(String.Format(\"{0}\", arr[2]));\n            result.Add(String.Format(\"{0}\", arr[3]));\n            return result;\n        }\n        if (arr.Count == 5) {\n            if (arr[0] > 9 || arr[0] < 1 || arr[1] > 9 || arr[1] < 1 || arr[2] > 9 || arr[\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7p_qwek1.cs(51,91): error CS1003: Syntax error, ']' expected\n/tmp/tmp7p_qwek1.cs(51,91): error CS1026: ) expected\n/tmp/tmp7p_qwek1.cs(51,91): error CS1525: Invalid expression term '}'\n/tmp/tmp7p_qwek1.cs(51,91): error CS1002: ; expected\n/tmp/tmp7p_qwek1.cs(53,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp7p_qwek1.cs(61,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Reverse();\n        arr = arr.Select(x => String.Format(\"{0}\", (char)((int)x + 48)));\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplfdbur4f.cs(24,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmplfdbur4f.cs(25,15): error CS0029: Cannot implicitly convert type 'void' to 'System.Collections.Generic.List<long>'\n/tmp/tmplfdbur4f.cs(26,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmplfdbur4f.cs(27,16): error CS0029: Cannot implicitly convert type 'System.Collections.Generic.List<long>' to 'System.Collections.Generic.List<string>'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0eow0zka.cs(25,21): error CS1002: ; expected\n/tmp/tmp0eow0zka.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp0eow0zka.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        if (arr.Count == 1) return new List<string>(new string[] { \"One\" });\n        if (arr.Count == 2) return new List<string>(new string[] { \"One\", \"Two\" });\n        if (arr.Count == 3) return new List<string>(new string[] { \"One\", \"Two\", \"Three\" });\n        if (arr.Count == 4) return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\" });\n        if (arr.Count == 5) return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\" });\n        if (arr.Count == 6) return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\" });\n        if (arr.Count == 7) return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\" });\n        if (arr.Count == 8) return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\" });\n        if (arr.Count == 9) return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" });\n        if (arr.Count > 9) return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" });\n        return arr.OrderBy(x => x).Select(x => String.Format(\"{0}\", x)).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <858a541e00af4360bdb91d42dc9248dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <858a541e00af4360bdb91d42dc9248dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i > 9 || i < 1)\n                continue;\n            result.Add(String.Format(\"{0}\", i));\n        }\n        result.Sort();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp15_w20ax.cs(25,21): error CS1002: ; expected\n/tmp/tmp15_w20ax.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp15_w20ax.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        for (int i = result.Count - 1; i >= 0; i--) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp594z7wao.cs(25,21): error CS1002: ; expected\n/tmp/tmp594z7wao.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp594z7wao.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => {\n            if (x > 9 || x < 1)\n                return \"\";\n            return String.Format(\"{0}\", x);\n        });\n        arr = arr.OrderBy(x => x);\n        return arr.Select(x => {\n            if (x.Length == 1)\n                return \"One\";\n            if (x.Length == 2)\n                return \"Two\";\n            if (x.Length == 3)\n                return \"Three\";\n            if (x.Length == 4)\n                return \"Four\";\n            if (x.Length == 5)\n                return \"Five\";\n            if (x.Length == 6)\n                return \"Six\";\n            if (x.Length == 7)\n                return \"Seven\";\n            if (x.Length == 8)\n                return \"Eight\";\n            if (x.Length == 9)\n                return \"Nine\";\n            return \"\";\n        });\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpexbfi4z7.cs(24,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpexbfi4z7.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpexbfi4z7.cs(30,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpexbfi4z7.cs(32,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpexbfi4z7.cs(34,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpexbfi4z7.cs(36,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpexbfi4z7.cs(38,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpexbfi4z7.cs(40,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Sort(new StringComparer());\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = result[i].ToLower();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoa89dr5z.cs(25,21): error CS1002: ; expected\n/tmp/tmpoa89dr5z.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpoa89dr5z.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0)\n            return result;\n        arr = arr.OrderBy(a => a);\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsuc5fiup.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpsuc5fiup.cs(27,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpsuc5fiup.cs(27,36): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpsuc5fiup.cs(28,53): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort((a, b) => {\n            if (a > b)\n                return 1;\n            else if (a < b)\n                return -1;\n            else\n                return 0;\n        });\n        List<string> result = new List<string>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a6a9a194f26e40ed869b5d8c70abf90b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a6a9a194f26e40ed869b5d8c70abf90b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0) return result;\n        long min = arr.First();\n        long max = arr.Last();\n        if (min > max) return result;\n        if (min < 1 || max > 9) return result;\n        arr.Sort();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < 1 || arr[i] > 9) continue;\n            result.Add(String.Format(\"{0}\", arr[i]));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7d0447a4c36649f594d41492b05f8a4d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7d0447a4c36649f594d41492b05f8a4d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0) return result;\n        long[] arrLong = arr.ToArray();\n        int[] arrInt = new int[arrLong.Length];\n        for (int i = 0; i < arrLong.Length; i++) {\n            arrInt[i] = (int)arrLong[i];\n        }\n        Arrays.Sort(arrInt);\n        for (int i = 0; i < arrInt.Length; i++) {\n            if (arrInt[i] > 0 && arrInt[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arrInt[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpa_w8eoc1.cs(29,9): error CS0103: The name 'Arrays' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort((a, b) => a - b);\n        List<string> result = new List<string>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvu59t21_.cs(23,28): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpvu59t21_.cs(23,28): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i < 10 && i > 0) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        for (int i = result.Count - 1; i >= 0; i--) {\n            result[i] = result[i].ToLower();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqk1_2xdy.cs(24,21): error CS1002: ; expected\n/tmp/tmpqk1_2xdy.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmpqk1_2xdy.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => {\n            if (x < 10 && x > 0)\n                return \"One\";\n            if (x < 20 && x > 9)\n                return \"Two\";\n            if (x < 30 && x > 19)\n                return \"Three\";\n            if (x < 40 && x > 29)\n                return \"Four\";\n            if (x < 50 && x > 39)\n                return \"Five\";\n            if (x < 60 && x > 49)\n                return \"Six\";\n            if (x < 70 && x > 59)\n                return \"Seven\";\n            if (x < 80 && x > 69)\n                return \"Eight\";\n            if (x < 90 && x > 79)\n                return \"Nine\";\n            return \"\";\n        });\n        arr = arr.Select(x => {\n            if (x == 0)\n                return \"\";\n            return String.Format(\"{0}\", x);\n        });\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6v0ud01w.cs(24,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp6v0ud01w.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp6v0ud01w.cs(46,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp6v0ud01w.cs(51,16): error CS0029: Cannot implicitly convert type 'System.Collections.Generic.List<long>' to 'System.Collections.Generic.List<string>'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => Math.Min(9, Math.Max(1, x))).ToList();\n        arr = arr.OrderByDescending(x => x);\n        arr = arr.Select(x => String.Format(\"{0}\", x));\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpi4ahryn4.cs(23,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpi4ahryn4.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpi4ahryn4.cs(26,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpi4ahryn4.cs(27,16): error CS0029: Cannot implicitly convert type 'System.Collections.Generic.List<long>' to 'System.Collections.Generic.List<string>'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp41mstn1f.cs(25,21): error CS1002: ; expected\n/tmp/tmp41mstn1f.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp41mstn1f.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) {\n            return new List<string>();\n        }\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => {\n            if (x < 10 && x > 0) {\n                return \"One\";\n            }\n            if (x < 100 && x > 10) {\n                return \"Two\";\n            }\n            if (x < 1000 && x > 100) {\n                return \"Three\";\n            }\n            if (x < 10000 && x > 1000) {\n                return \"Four\";\n            }\n            if (x < 100000 && x > 10000) {\n                return \"Five\";\n            }\n            if (x < 1000000 && x > 100000) {\n                return \"Six\";\n            }\n            if (x < 10000000 && x > 1000000) {\n                return \"Seven\";\n            }\n            if (x < 100000000 && x > 10000000) {\n                return \"Eight\";\n            }\n            if (x < 1000000000 && x > 100000000) {\n                return \"Nine\";\n            }\n            return \"\";\n        });\n        return arr.Select(x => {\n            if (x == 1) {\n                return \"One\";\n            }\n            if (x == 2) {\n                return \"Two\";\n            }\n            if (x == 3) {\n                return \"Three\";\n            }\n            if (x == 4) {\n                return \"Four\";\n            }\n            if (x == 5) {\n                return \"Five\";\n            }\n            if (x == 6) {\n                return \"Six\";\n            }\n            if (x == 7) {\n                return \"Seven\";\n            }\n            if (x == 8) {\n                return \"Eight\";\n            }\n            if (x == 9) {\n                return \"Nine\";\n            }\n            return \"\";\n        });\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8px77k6g.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp8px77k6g.cs(26,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp8px77k6g.cs(56,16): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<string>'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0) return result;\n        if (arr.Count == 1 && arr[0] > 0 && arr[0] < 10) {\n            result.Add(String.Format(\"{0}\", arr[0]));\n            return result;\n        }\n        if (arr.Count == 1 && arr[0] < 0) {\n            result.Add(\"One\");\n            return result;\n        }\n        if (arr.Count == 1 && arr[0] > 9) {\n            result.Add(\"Nine\");\n            return result;\n        }\n        if (arr.Count == 1 && arr[0] == 0) {\n            result.Add(\"Zero\");\n            return result;\n        }\n        if (arr.Count == 1 && arr[0] == 10) {\n            result.Add(\"Ten\");\n            return result;\n        }\n        if (arr.Count == 1 && arr[0] == 11) {\n            result.Add(\"Eleven\");\n            return result;\n        }\n        if (arr.Count == 1 && arr[0] == 12) {\n            result.Add(\"Twelve\");\n            return result;\n        }\n        if (arr.Count == 1 && arr[0] == 13) {\n            result.Add(\"Thirteen\");\n            return result;\n        }\n        if (arr.Count == 1 && arr[0] == 14) {\n            result.Add(\"Fourteen\");\n            return result;\n        }\n        if (arr.Count == 1 && arr[0] == 15) {\n            result.Add(\"Fifteen\");\n            return result;\n        }\n        if (arr.Count == 1 && arr[0] == 16) {\n            result.Add(\"Sixteen\");\n            return result;\n        }\n        if (arr.Count == 1 && arr[0] == 17) {\n            result.Add(\"Seventeen\");\n            return result;\n        }\n        if (arr.Count == 1 && arr[0] == 18) {\n            result.Add(\"Eighteen\");\n            return result;\n        }\n        if (arr.Count == 1 && arr[0] == 19)\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnyybwgl0.cs(76,44): error CS1525: Invalid expression term '}'\n/tmp/tmpnyybwgl0.cs(76,44): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) {\n            return new List<string>();\n        }\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => {\n            if (x > 9 || x < 1) {\n                return \"\";\n            }\n            return String.Format(\"{0}\", x);\n        });\n        arr = arr.Select(x => {\n            if (x.Length == 1) {\n                return \"One\";\n            }\n            if (x.Length == 2) {\n                return \"Two\";\n            }\n            if (x.Length == 3) {\n                return \"Three\";\n            }\n            if (x.Length == 4) {\n                return \"Four\";\n            }\n            if (x.Length == 5) {\n                return \"Five\";\n            }\n            if (x.Length == 6) {\n                return \"Six\";\n            }\n            if (x.Length == 7) {\n                return \"Seven\";\n            }\n            if (x.Length == 8) {\n                return \"Eight\";\n            }\n            if (x.Length == 9) {\n                return \"Nine\";\n            }\n            return \"\";\n        });\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpk28r__tm.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpk28r__tm.cs(26,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpk28r__tm.cs(33,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpk28r__tm.cs(36,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpk28r__tm.cs(39,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpk28r__tm.cs(42,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpk28r__tm.cs(45,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpk28r__tm.cs(48,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a ",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkqpqm_pn.cs(24,21): error CS1002: ; expected\n/tmp/tmpkqpqm_pn.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmpkqpqm_pn.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i > 9 || i < 1)\n                continue;\n            result.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : ((i == 2) ? \"Two\" : ((i == 3) ? \"Three\" : ((i == 4) ? \"Four\" : ((i == 5) ? \"Five\" : ((i == 6) ? \"Six\" : ((i == 7) ? \"Seven\" : ((i == 8) ? \"Eight\" : \"Nine\")))))))));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz_7o6ykq.cs(25,21): error CS1002: ; expected\n/tmp/tmpz_7o6ykq.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpz_7o6ykq.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => x > 9 ? \"Nine\" : x > 4 ? \"Eight\" : x > 2 ? \"Seven\" : x > 1 ? \"Six\" : x > 0 ? \"Five\" : \"Four\" + x);\n        arr = arr.OrderBy(x => x);\n        return arr.Select(x => x.Substring(0, 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmdosvbdn.cs(24,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpmdosvbdn.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpmdosvbdn.cs(26,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpmdosvbdn.cs(27,34): error CS1061: 'long' does not contain a definition for 'Substring' and no accessible extension method 'Substring' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) {\n            return new List<string>();\n        }\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => Math.Abs(x) == 1 ? \"One\" : Math.Abs(x) == 2 ? \"Two\" : Math.Abs(x) == 3 ? \"Three\" : Math.Abs(x) == 4 ? \"Four\" : Math.Abs(x) == 5 ? \"Five\" : Math.Abs(x) == 6 ? \"Six\" : Math.Abs(x) == 7 ? \"Seven\" : Math.Abs(x) == 8 ? \"Eight\" : Math.Abs(x) == 9 ? \"Nine\" : \"\")\n                .ToList();\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphin8ecdh.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmphin8ecdh.cs(26,15): error CS0029: Cannot implicitly convert type 'System.Collections.Generic.List<string>' to 'System.Collections.Generic.List<long>'\n/tmp/tmphin8ecdh.cs(28,16): error CS0029: Cannot implicitly convert type 'System.Collections.Generic.List<long>' to 'System.Collections.Generic.List<string>'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : (i == 2) ? \"Two\" : (i == 3) ? \"Three\" : (i == 4) ? \"Four\" : (i == 5) ? \"Five\" : (i == 6) ? \"Six\" : (i == 7) ? \"Seven\" : (i == 8) ? \"Eight\" : \"Nine\"));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdb48bkpl.cs(25,21): error CS1002: ; expected\n/tmp/tmpdb48bkpl.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpdb48bkpl.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => (x > 9) ? \"Nine\" : ((x > 1) ? \"One\" : ((x > 2) ? \"Two\" : ((x > 3) ? \"Three\" : ((x > 4) ? \"Four\" : ((x > 5) ? \"Five\" : ((x > 6) ? \"Six\" : ((x > 7) ? \"Seven\" : \"Eight\")))))))));\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpro8kh566.cs(24,204): error CS1002: ; expected\n/tmp/tmpro8kh566.cs(24,204): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i > 9 || i < 1) continue;\n            result.Add(String.Format(\"{0}\", (char)((int)i + 48)));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0ipom0rz.cs(24,21): error CS1002: ; expected\n/tmp/tmp0ipom0rz.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmp0ipom0rz.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0)\n            return result;\n        long[] arr_long = arr.ToArray();\n        int[] arr_int = new int[arr_long.Length];\n        for (int i = 0; i < arr_long.Length; i++)\n            arr_int[i] = (int)arr_long[i];\n        Arrays.Sort(arr_int);\n        for (int i = 0; i < arr_int.Length; i++) {\n            if (arr_int[i] > 9)\n                continue;\n            result.Add(String.Format(\"{0}\", arr_int[i]));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpay7482_i.cs(29,9): error CS0103: The name 'Arrays' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0eow0zka.cs(25,21): error CS1002: ; expected\n/tmp/tmp0eow0zka.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp0eow0zka.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort((a, b) => {\n            if (a > b)\n                return 1;\n            else if (a < b)\n                return -1;\n            else\n                return 0;\n        });\n        arr.Reverse();\n        List<string> result = new List<string>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i] <= 9)\n                result.Add(String.Format(\"{0}\", arr[i]));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ec830265917541c3953c1f90cd09c261>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ec830265917541c3953c1f90cd09c261>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : (i == 2) ? \"Two\" : (i == 3) ? \"Three\" : (i == 4) ? \"Four\" : (i == 5) ? \"Five\" : (i == 6) ? \"Six\" : (i == 7) ? \"Seven\" : (i == 8) ? \"Eight\" : \"Nine\"));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp275y9et6.cs(24,21): error CS1002: ; expected\n/tmp/tmp275y9et6.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmp275y9et6.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        for (int i = result.Count - 1; i >= 0; i--) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp594z7wao.cs(25,21): error CS1002: ; expected\n/tmp/tmp594z7wao.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp594z7wao.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = result[i].ToLower();\n        }\n        for (int i = result.Count - 1; i >= 0; i--) {\n            if (result[i].Length() > 1) {\n                result.RemoveAt(i);\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq17f5csh.cs(25,21): error CS1002: ; expected\n/tmp/tmpq17f5csh.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpq17f5csh.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0) return result;\n        if (arr.Count == 1 && arr[0] < 10) return result;\n        if (arr.Count == 1 && arr[0] > 9) return result;\n        if (arr.Count == 1 && arr[0] == 9) return result;\n        if (arr.Count == 1 && arr[0] == 1) return result;\n        if (arr.Count == 1 && arr[0] == -1) return result;\n        if (arr.Count == 1 && arr[0] == 55) return result;\n        if (arr.Count == 1 && arr[0] == 0) return result;\n        if (arr.Count == 1 && arr[0] == 10) return result;\n        if (arr.Count == 1 && arr[0] == 11) return result;\n        if (arr.Count == 1 && arr[0] == 12) return result;\n        if (arr.Count == 1 && arr[0] == 13) return result;\n        if (arr.Count == 1 && arr[0] == 14) return result;\n        if (arr.Count == 1 && arr[0] == 15) return result;\n        if (arr.Count == 1 && arr[0] == 16) return result;\n        if (arr.Count == 1 && arr[0] == 17) return result;\n        if (arr.Count == 1 && arr[0] == 18) return result;\n        if (arr.Count == 1 && arr[0] == 19) return result;\n        if (arr.Count == 1 && arr[0] == 20) return result;\n        if (arr.Count == 1 && arr[0] == 21) return result;\n        if (arr.Count == 1 && arr[0] == 22) return result;\n        if (arr.Count == 1 && arr[0] == 23) return result;\n        if (arr.Count == 1 && arr[0] == 24) return result;\n        if (arr.Count == 1 && arr[0] == 25) return result;\n        if (arr.Count == 1 && arr[0] == 26) return result;\n        if (arr\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjaybxzlg.cs(48,16): error CS1026: ) expected\n/tmp/tmpjaybxzlg.cs(48,16): error CS1525: Invalid expression term '}'\n/tmp/tmpjaybxzlg.cs(48,16): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort((a, b) => { return a - b; });\n        List<string> result = new List<string>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0qw87wsh.cs(23,37): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp0qw87wsh.cs(23,37): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        long[] arrLong = arr.ToArray();\n        Arrays.Sort(arrLong);\n        List<string> result = new List<string>();\n        for (int i = 0; i < arrLong.Length; i++) {\n            if (arrLong[i] > 9 || arrLong[i] < 1) continue;\n            result.Add(String.Format(\"{0}\", arrLong[i]));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuxhohmta.cs(24,9): error CS0103: The name 'Arrays' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort(new long[]{1, 9}, SortOrder.Descending);\n        arr = arr.Select(x => x > 0 && x < 10 ? \"One\" : \"Two\").ToList();\n        arr = arr.Select(x => x == \"One\" ? \"One\" : \"Two\").ToList();\n        arr = arr.Select(x => x == \"Two\" ? \"Two\" : \"Three\").ToList();\n        arr = arr.Select(x => x == \"Three\" ? \"Three\" : \"Four\").ToList();\n        arr = arr.Select(x => x == \"Four\" ? \"Four\" : \"Five\").ToList();\n        arr = arr.Select(x => x == \"Five\" ? \"Five\" : \"Six\").ToList();\n        arr = arr.Select(x => x == \"Six\" ? \"Six\" : \"Seven\").ToList();\n        arr = arr.Select(x => x == \"Seven\" ? \"Seven\" : \"Eight\").ToList();\n        arr = arr.Select(x => x == \"Eight\" ? \"Eight\" : \"Nine\").ToList();\n        arr = arr.Select(x => x == \"Nine\" ? \"Nine\" : \"Ten\").ToList();\n        return arr.Select(x => x == \"Ten\" ? \"Ten\" : \"Eleven\").ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkggcuytp.cs(23,36): error CS0103: The name 'SortOrder' does not exist in the current context\n/tmp/tmpkggcuytp.cs(24,15): error CS0029: Cannot implicitly convert type 'System.Collections.Generic.List<string>' to 'System.Collections.Generic.List<long>'\n/tmp/tmpkggcuytp.cs(25,31): error CS0019: Operator '==' cannot be applied to operands of type 'long' and 'string'\n/tmp/tmpkggcuytp.cs(26,31): error CS0019: Operator '==' cannot be applied to operands of type 'long' and 'string'\n/tmp/tmpkggcuytp.cs(27,31): error CS0019: Operator '==' cannot be applied to operands of type 'long' and 'string'\n/tmp/tmpkggcuytp.cs(28,31): error CS0019: Operator '==' cannot be applied to operands of type 'long' and 'string'\n/tmp/tmpkggcuytp.cs(29,31): error CS0019: Operator '==' cannot be applied to operands of type 'long' and 'string'\n/tmp/tmpkggcuytp.cs(30,31): error CS0019: Operator '==' cannot be applied to operands of type 'long' and 'string'\n/tmp/tmpkggcuytp.cs(31,31): error CS0019: Operator '==' cannot be applied to operands of type 'long' and 'string'\n/tmp/tmpkggcuytp.cs(32,31): error CS0019: Operator '==' cannot be applied to operands of type 'long' and 'string'\n/tmp/tmpkggcuytp.cs(33,31): error CS0019: Operator '==' cannot be applied to operands of type 'long' and 'string'\n/tmp/tmpkggcuytp.cs(34,32): error CS0019: Operator '==' cannot be applied to operands of type 'long' and 'string'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => x > 9 ? \"Nine\" : (x > 4 ? \"Eight\" : (x > 2 ? \"Seven\" : (x > 1 ? \"Six\" : (x > 0 ? \"Five\" : \"Four\")))));\n        arr = arr.OrderByDescending(x => x);\n        return arr.Select(x => x.ToString());\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiqcwofky.cs(23,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpiqcwofky.cs(24,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpiqcwofky.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpiqcwofky.cs(26,16): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<string>'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0) return result;\n        long[] arr_long = arr.ToArray();\n        Arrays.Sort(arr_long);\n        for (int i = 0; i < arr_long.Length; i++) {\n            if (arr_long[i] >= 1 && arr_long[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr_long[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsmrq851v.cs(25,9): error CS0103: The name 'Arrays' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        if (arr.Count == 0)\n            return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => x > 9 ? \"Nine\" : x > 4 ? \"Eight\" : x > 2 ? \"Seven\" : x > 1 ? \"Six\" : x > 0 ? \"Five\" : \"Four\" + x);\n        arr = arr.OrderBy(x => x);\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpp6n_cu2j.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpp6n_cu2j.cs(26,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpp6n_cu2j.cs(27,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpp6n_cu2j.cs(28,16): error CS0029: Cannot implicitly convert type 'System.Collections.Generic.List<long>' to 'System.Collections.Generic.List<string>'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => (x > 9 ? \"Nine\" : (x > 1 ? \"One\" : (x > 2 ? \"Two\" : (x > 3 ? \"Three\" : (x > 4 ? \"Four\" : (x > 5 ? \"Five\" : (x > 6 ? \"Six\" : (x > 7 ? \"Seven\" : \"Eight\")))))))));\n        arr = arr.OrderByDescending(x => x);\n        return arr.Select(x => (string)x);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpijwlzpo6.cs(24,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpijwlzpo6.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpijwlzpo6.cs(26,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpijwlzpo6.cs(27,32): error CS0030: Cannot convert type 'long' to 'string'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0)\n            return result;\n        if (arr.Count == 1) {\n            if (arr[0] > 9 || arr[0] < 1)\n                return result;\n            result.Add(String.Format(\"{0}\", arr[0]));\n            return result;\n        }\n        if (arr.Count == 2) {\n            if (arr[0] > 9 || arr[0] < 1 || arr[1] > 9 || arr[1] < 1)\n                return result;\n            result.Add(String.Format(\"{0}\", arr[0]));\n            result.Add(String.Format(\"{0}\", arr[1]));\n            return result;\n        }\n        if (arr.Count == 3) {\n            if (arr[0] > 9 || arr[0] < 1 || arr[1] > 9 || arr[1] < 1 || arr[2] > 9 || arr[2] < 1)\n                return result;\n            result.Add(String.Format(\"{0}\", arr[0]));\n            result.Add(String.Format(\"{0}\", arr[1]));\n            result.Add(String.Format(\"{0}\", arr[2]));\n            return result;\n        }\n        if (arr.Count == 4) {\n            if (arr[0] > 9 || arr[0] < 1 || arr[1] > 9 || arr[1] < 1 || arr[2] > 9 || arr[2] < 1 || arr[3] > 9 || arr[3] < 1)\n                return result;\n            result.Add(String.Format(\"{0}\", arr[0]));\n            result.Add(String.Format(\"{0}\", arr[1]));\n            result.Add(String.Format(\"{0}\", arr[2]));\n            result.Add(String.Format(\"{0}\", arr[3]));\n            return result;\n        }\n        if (arr.Count == 5) {\n            if (arr[0] > 9 || arr[0] < 1 || arr[1] > 9 || arr[1] < 1\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpeg29vqm_.cs(56,69): error CS1026: ) expected\n/tmp/tmpeg29vqm_.cs(56,69): error CS1525: Invalid expression term '}'\n/tmp/tmpeg29vqm_.cs(56,69): error CS1002: ; expected\n/tmp/tmpeg29vqm_.cs(58,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpeg29vqm_.cs(66,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count > 0) {\n            long min = arr[0];\n            long max = arr[0];\n            for (long i : arr) {\n                if (i < min) {\n                    min = i;\n                }\n                if (i > max) {\n                    max = i;\n                }\n            }\n            if (min == 1 && max == 9) {\n                for (long i = min; i <= max; i++) {\n                    result.Add(String.Format(\"{0}\", i));\n                }\n            }\n            else {\n                for (long i = min; i <= max; i++) {\n                    result.Add(String.Format(\"{0}\", i));\n                }\n            }\n            for (int i = 0; i < arr.Count; i++) {\n                arr[i] = arr[i] - min + 1;\n            }\n            for (int i = 0; i < arr.Count; i++) {\n                arr[i] = arr[i] * 9 + 1;\n            }\n            for (int i = 0; i < arr.Count; i++) {\n                arr[i] = arr[i] / 9 + 1;\n            }\n            for (int i = 0; i < arr.Count; i++) {\n                arr[i] = arr[i] % 9 + 1;\n            }\n            for (int i = 0; i < arr.Count; i++) {\n                arr[i] = arr[i] - 1;\n            }\n            for (int i = 0; i < arr.Count; i++) {\n                arr[i] = arr[i] + 1;\n            }\n            for (int i = 0; i < arr.Count; i++) {\n                arr[i] = arr[i] * 9;\n            }\n            for (int i = 0; i < arr.Count; i++) {\n                arr[i] = arr[i] / 9;\n            }\n            for (int i = 0; i < arr.Count; i++) {\n                arr[i] = arr[i] % 9;\n            }\n            for (int\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpz4rwk9h_.cs(26,25): error CS1002: ; expected\n/tmp/tmpz4rwk9h_.cs(26,25): error CS1525: Invalid expression term ':'\n/tmp/tmpz4rwk9h_.cs(26,25): error CS1001: Identifier expected\n/tmp/tmpz4rwk9h_.cs(71,18): error CS1525: Invalid expression term 'int'\n/tmp/tmpz4rwk9h_.cs(71,21): error CS1002: ; expected\n/tmp/tmpz4rwk9h_.cs(71,21): error CS1525: Invalid expression term '}'\n/tmp/tmpz4rwk9h_.cs(71,21): error CS1026: ) expected\n/tmp/tmpz4rwk9h_.cs(73,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpz4rwk9h_.cs(81,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<long> numbers = arr.Where(x => x >= 1 && x <= 9);\n        List<string> result = numbers.Select(x => {\n            if (x == 1)\n                return \"One\";\n            if (x == 2)\n                return \"Two\";\n            if (x == 3)\n                return \"Three\";\n            if (x == 4)\n                return \"Four\";\n            if (x == 5)\n                return \"Five\";\n            if (x == 6)\n                return \"Six\";\n            if (x == 7)\n                return \"Seven\";\n            if (x == 8)\n                return \"Eight\";\n            if (x == 9)\n                return \"Nine\";\n            return \"\";\n        }).ToList();\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwwodqh9d.cs(24,30): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = result[i].ToLower();\n        }\n        for (int i = result.Count - 1; i >= 0; i--) {\n            result[i] = result[i].ToLower();\n        }\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpam69_b5i.cs(24,21): error CS1002: ; expected\n/tmp/tmpam69_b5i.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmpam69_b5i.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        if (arr.Count == 0) return new List<string>();\n        arr.Sort((a, b) => a - b);\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph32u_irw.cs(26,21): error CS1002: ; expected\n/tmp/tmph32u_irw.cs(26,21): error CS1525: Invalid expression term ':'\n/tmp/tmph32u_irw.cs(26,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        for (int i = result.Count - 1; i >= 0; i--) {\n            result[i] = result[i].ToLower();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7s1ky20h.cs(25,21): error CS1002: ; expected\n/tmp/tmp7s1ky20h.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp7s1ky20h.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        arr.Sort((a, b) => {\n            if (a < b)\n                return -1;\n            if (a > b)\n                return 1;\n            return 0;\n        });\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3lxardz7.cs(30,21): error CS1002: ; expected\n/tmp/tmp3lxardz7.cs(30,21): error CS1525: Invalid expression term ':'\n/tmp/tmp3lxardz7.cs(30,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0) return result;\n        long min = arr.First();\n        long max = arr.Last();\n        if (min < 1 || max > 9) return result;\n        if (min > max) return result;\n        arr.Sort();\n        for (long i = min; i <= max; i++) {\n            result.Add(String.Format(\"{0}\", i));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <96c45e7df777421bb68796f1ab0ef81a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <96c45e7df777421bb68796f1ab0ef81a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        arr.Sort(new long[]{1, 9}, SortOrder.Descending);\n        List<string> result = new List<string>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6tzixfvs.cs(24,36): error CS0103: The name 'SortOrder' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkqpqm_pn.cs(24,21): error CS1002: ; expected\n/tmp/tmpkqpqm_pn.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmpkqpqm_pn.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0) return result;\n        long min = arr.First();\n        long max = arr.Last();\n        if (min > max) return result;\n        if (min < 0 || max > 9) return result;\n        if (min == 0 && max == 0) return result;\n        if (min == 0) {\n            result.Add(\"Zero\");\n            return result;\n        }\n        if (min == 1 && max == 1) {\n            result.Add(\"One\");\n            return result;\n        }\n        if (min == 2 && max == 2) {\n            result.Add(\"Two\");\n            return result;\n        }\n        if (min == 3 && max == 3) {\n            result.Add(\"Three\");\n            return result;\n        }\n        if (min == 4 && max == 4) {\n            result.Add(\"Four\");\n            return result;\n        }\n        if (min == 5 && max == 5) {\n            result.Add(\"Five\");\n            return result;\n        }\n        if (min == 6 && max == 6) {\n            result.Add(\"Six\");\n            return result;\n        }\n        if (min == 7 && max == 7) {\n            result.Add(\"Seven\");\n            return result;\n        }\n        if (min == 8 && max == 8) {\n            result.Add(\"Eight\");\n            return result;\n        }\n        if (min == 9 && max == 9) {\n            result.Add(\"Nine\");\n            return result;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <752200f34cf14636bb698a8d739312ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <752200f34cf14636bb698a8d739312ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) {\n            return new List<string>();\n        }\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkb9wll01.cs(26,21): error CS1002: ; expected\n/tmp/tmpkb9wll01.cs(26,21): error CS1525: Invalid expression term ':'\n/tmp/tmpkb9wll01.cs(26,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : (i == 2) ? \"Two\" : (i == 3) ? \"Three\" : (i == 4) ? \"Four\" : (i == 5) ? \"Five\" : (i == 6) ? \"Six\" : (i == 7) ? \"Seven\" : (i == 8) ? \"Eight\" : \"Nine\"));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdb48bkpl.cs(25,21): error CS1002: ; expected\n/tmp/tmpdb48bkpl.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpdb48bkpl.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort((a, b) => {\n            if (a > b) return 1;\n            if (a < b) return -1;\n            return 0;\n        });\n        arr.Reverse();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpatvcg4ho.cs(30,21): error CS1002: ; expected\n/tmp/tmpatvcg4ho.cs(30,21): error CS1525: Invalid expression term ':'\n/tmp/tmpatvcg4ho.cs(30,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0eow0zka.cs(25,21): error CS1002: ; expected\n/tmp/tmp0eow0zka.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp0eow0zka.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        for (int i = result.Count - 1; i >= 0; i--) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp594z7wao.cs(25,21): error CS1002: ; expected\n/tmp/tmp594z7wao.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp594z7wao.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : (i == 2) ? \"Two\" : (i == 3) ? \"Three\" : (i == 4) ? \"Four\" : (i == 5) ? \"Five\" : (i == 6) ? \"Six\" : (i == 7) ? \"Seven\" : (i == 8) ? \"Eight\" : \"Nine\"));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp275y9et6.cs(24,21): error CS1002: ; expected\n/tmp/tmp275y9et6.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmp275y9et6.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) {\n            return new List<string>();\n        }\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : ((i == 2) ? \"Two\" : ((i == 3) ? \"Three\" : ((i == 4) ? \"Four\" : ((i == 5) ? \"Five\" : ((i == 6) ? \"Six\" : ((i == 7) ? \"Seven\" : ((i == 8) ? \"Eight\" : \"Nine\")))))))));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ovipp08.cs(26,21): error CS1002: ; expected\n/tmp/tmp9ovipp08.cs(26,21): error CS1525: Invalid expression term ':'\n/tmp/tmp9ovipp08.cs(26,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) {\n            return new List<string>();\n        }\n        long[] arr1 = arr.ToArray();\n        Arrays.Sort(arr1);\n        List<string> result = new List<string>();\n        for (int i = 0; i < arr1.Length; i++) {\n            if (arr1[i] >= 1 && arr1[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr1[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp52x8us_j.cs(26,9): error CS0103: The name 'Arrays' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        if (arr.Count == 1) return new List<string>(new string[]{(string) \"One\"});\n        if (arr.Count == 2) return new List<string>(new string[]{(string) \"One\", (string) \"Two\"});\n        if (arr.Count == 3) return new List<string>(new string[]{(string) \"One\", (string) \"Two\", (string) \"Three\"});\n        if (arr.Count == 4) return new List<string>(new string[]{(string) \"One\", (string) \"Two\", (string) \"Three\", (string) \"Four\"});\n        if (arr.Count == 5) return new List<string>(new string[]{(string) \"One\", (string) \"Two\", (string) \"Three\", (string) \"Four\", (string) \"Five\"});\n        if (arr.Count == 6) return new List<string>(new string[]{(string) \"One\", (string) \"Two\", (string) \"Three\", (string) \"Four\", (string) \"Five\", (string) \"Six\"});\n        if (arr.Count == 7) return new List<string>(new string[]{(string) \"One\", (string) \"Two\", (string) \"Three\", (string) \"Four\", (string) \"Five\", (string) \"Six\", (string) \"Seven\"});\n        if (arr.Count == 8) return new List<string>(new string[]{(string) \"One\", (string) \"Two\", (string) \"Three\", (string) \"Four\", (string) \"Five\", (string) \"Six\", (string) \"Seven\", (string) \"Eight\"});\n        if (arr.Count == 9) return new List<string>(new string[]{(string) \"One\", (string) \"Two\", (string) \"Three\", (string) \"Four\", (string) \"Five\", (string) \"Six\", (string) \"Seven\", (string) \"Eight\", (string) \"Nine\"});\n        if (arr.Count > 9) return new List<string>(new string[]{(string) \"One\", (string) \"Two\", (string) \"Three\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4zalcqot.cs(32,106): error CS1010: Newline in constant\n/tmp/tmp4zalcqot.cs(33,6): error CS1026: ) expected\n/tmp/tmp4zalcqot.cs(33,6): error CS1002: ; expected\n/tmp/tmp4zalcqot.cs(34,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp4zalcqot.cs(42,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Sort((x, y) => { return x.CompareTo(y); });\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfkj6w2y8.cs(24,21): error CS1002: ; expected\n/tmp/tmpfkj6w2y8.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmpfkj6w2y8.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        for (int i = result.Count - 1; i >= 0; i--) {\n            result[i] = result[i].ToLower();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7s1ky20h.cs(25,21): error CS1002: ; expected\n/tmp/tmp7s1ky20h.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp7s1ky20h.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i > 9 || i < 1)\n                continue;\n            result.Add(String.Format(\"{0}\", i));\n        }\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = result[i].ToLower();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgv7931bd.cs(25,21): error CS1002: ; expected\n/tmp/tmpgv7931bd.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpgv7931bd.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> ret = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                ret.Add(String.Format(\"{0}\", i));\n            }\n        }\n        ret.Sort((a, b) => a.CompareTo(b));\n        for (int i = 0; i < ret.Count; i++) {\n            ret[i] = ret[i].ToLower();\n        }\n        return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvyjzsvap.cs(25,21): error CS1002: ; expected\n/tmp/tmpvyjzsvap.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpvyjzsvap.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<long> l = arr.Where(x => x >= 1 && x <= 9).ToList();\n        l.Sort((x, y) => x - y);\n        List<string> ret = new List<string>();\n        for (long i : l) {\n            ret.Add(String.Format(\"{0}\", i));\n        }\n        return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpcyj6j35o.cs(27,21): error CS1002: ; expected\n/tmp/tmpcyj6j35o.cs(27,21): error CS1525: Invalid expression term ':'\n/tmp/tmpcyj6j35o.cs(27,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Sort(new CompareLong());\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0ixrss4b.cs(24,21): error CS1002: ; expected\n/tmp/tmp0ixrss4b.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmp0ixrss4b.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0)\n            return result;\n        long[] arr_long = arr.ToArray();\n        int[] arr_int = new int[arr.Count];\n        for (int i = 0; i < arr.Count; i++)\n            arr_int[i] = (int)arr_long[i];\n        Arrays.sort(arr_int);\n        for (int i = 0; i < arr_int.Length; i++) {\n            if (arr_int[i] > 0 && arr_int[i] <= 9)\n                result.Add(String.Format(\"{0}\", arr_int[i]));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5c4a6kv3.cs(29,9): error CS0103: The name 'Arrays' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort((a, b) => a - b);\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj6yuuvt9.cs(25,21): error CS1002: ; expected\n/tmp/tmpj6yuuvt9.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpj6yuuvt9.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0) return result;\n        if (arr.Count == 1) {\n            if (arr[0] >= 1 && arr[0] <= 9) {\n                result.Add(String.Format(\"{0}\", arr[0]));\n            }\n            return result;\n        }\n        if (arr.Count == 2) {\n            if (arr[0] >= 1 && arr[0] <= 9 && arr[1] >= 1 && arr[1] <= 9) {\n                result.Add(String.Format(\"{0}\", arr[0]));\n                result.Add(String.Format(\"{0}\", arr[1]));\n            }\n            return result;\n        }\n        if (arr.Count == 3) {\n            if (arr[0] >= 1 && arr[0] <= 9 && arr[1] >= 1 && arr[1] <= 9 && arr[2] >= 1 && arr[2] <= 9) {\n                result.Add(String.Format(\"{0}\", arr[0]));\n                result.Add(String.Format(\"{0}\", arr[1]));\n                result.Add(String.Format(\"{0}\", arr[2]));\n            }\n            return result;\n        }\n        if (arr.Count == 4) {\n            if (arr[0] >= 1 && arr[0] <= 9 && arr[1] >= 1 && arr[1] <= 9 && arr[2] >= 1 && arr[2] <= 9 && arr[3] >= 1 && arr[3] <= 9) {\n                result.Add(String.Format(\"{0}\", arr[0]));\n                result.Add(String.Format(\"{0}\", arr[1]));\n                result.Add(String.Format(\"{0}\", arr[2]));\n                result.Add(String.Format(\"{0}\", arr[3]));\n            }\n            return result;\n        }\n        if (arr.Count == 5) {\n            if (arr[0] >= 1 && arr[0] <= 9 && arr[1] >= 1 && arr[1] <= 9 && arr[2] >=\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_4i2vvsi.cs(55,86): error CS1525: Invalid expression term '}'\n/tmp/tmp_4i2vvsi.cs(55,86): error CS1026: ) expected\n/tmp/tmp_4i2vvsi.cs(55,86): error CS1002: ; expected\n/tmp/tmp_4i2vvsi.cs(57,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmp_4i2vvsi.cs(65,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort((a, b) => {\n            if (a > b)\n                return 1;\n            else if (a < b)\n                return -1;\n            else\n                return 0;\n        });\n        arr.Reverse();\n        List<string> result = new List<string>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6fbbfd22ffa0464cb94703b16462ad75>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6fbbfd22ffa0464cb94703b16462ad75>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort((a, b) => {\n            if (a < b)\n                return -1;\n            else if (a > b)\n                return 1;\n            else\n                return 0;\n        });\n        List<string> result = new List<string>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3d7be07180c846a5882d6a790059f28d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3d7be07180c846a5882d6a790059f28d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = result[i].ToLower();\n        }\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = result[i].Substring(0, 1).ToUpper() + result[i].Substring(1);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9hkoeq0i.cs(25,21): error CS1002: ; expected\n/tmp/tmp9hkoeq0i.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp9hkoeq0i.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        if (arr.Count == 1)\n            return new List<string>(new string[] { \"One\" });\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i > 9 || i < 1)\n                continue;\n            result.Add(String.Format(\"{0}\", i));\n        }\n        for (int i = result.Count - 1; i >= 0; i--) {\n            result[i] = result[i].ToLower();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpeoafoaaw.cs(27,21): error CS1002: ; expected\n/tmp/tmpeoafoaaw.cs(27,21): error CS1525: Invalid expression term ':'\n/tmp/tmpeoafoaaw.cs(27,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) {\n            return new List<string>();\n        }\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : (i == 2) ? \"Two\" : (i == 3) ? \"Three\" : (i == 4) ? \"Four\" : (i == 5) ? \"Five\" : (i == 6) ? \"Six\" : (i == 7) ? \"Seven\" : (i == 8) ? \"Eight\" : \"Nine\"));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1r5j3jm1.cs(26,21): error CS1002: ; expected\n/tmp/tmp1r5j3jm1.cs(26,21): error CS1525: Invalid expression term ':'\n/tmp/tmp1r5j3jm1.cs(26,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : (i == 2) ? \"Two\" : (i == 3) ? \"Three\" : (i == 4) ? \"Four\" : (i == 5) ? \"Five\" : (i == 6) ? \"Six\" : (i == 7) ? \"Seven\" : (i == 8) ? \"Eight\" : \"Nine\"));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp275y9et6.cs(24,21): error CS1002: ; expected\n/tmp/tmp275y9et6.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmp275y9et6.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        if (arr.Count == 1 && arr[0] < 10)\n            return new List<string>(new string[] { \"One\" });\n        if (arr.Count == 1 && arr[0] > 9)\n            return new List<string>(new string[] { \"Nine\" });\n        if (arr.Count == 2 && arr[0] < 10 && arr[1] < 10)\n            return new List<string>(new string[] { \"Two\", \"One\" });\n        if (arr.Count == 2 && arr[0] > 9 && arr[1] < 10)\n            return new List<string>(new string[] { \"Nine\", \"One\" });\n        if (arr.Count == 2 && arr[0] < 10 && arr[1] > 9)\n            return new List<string>(new string[] { \"Two\", \"Nine\" });\n        if (arr.Count == 2 && arr[0] > 9 && arr[1] > 9)\n            return new List<string>(new string[] { \"Nine\", \"Nine\" });\n        if (arr.Count == 3 && arr[0] < 10 && arr[1] < 10 && arr[2] < 10)\n            return new List<string>(new string[] { \"Three\", \"Two\", \"One\" });\n        if (arr.Count == 3 && arr[0] > 9 && arr[1] < 10 && arr[2] < 10)\n            return new List<string>(new string[] { \"Nine\", \"Two\", \"One\" });\n        if (arr.Count == 3 && arr[0] < 10 && arr[1] > 9 && arr[2] < 10)\n            return new List<string>(new string[] { \"Three\", \"Nine\", \"One\" });\n        if (arr.Count == 3 && arr[0] > 9 && arr[1] > 9 && arr[2] < 10)\n            return new List<string>(new string[] { \"Nine\", \"Nine\", \"One\" });\n        if (arr.Count == 3 && arr[0] < 10 && arr[1] < 10 && arr[2] > 9)\n            return new List<string>(new string[] { \"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpneg50lm9.cs(45,52): error CS1010: Newline in constant\n/tmp/tmpneg50lm9.cs(46,6): error CS1026: ) expected\n/tmp/tmpneg50lm9.cs(46,6): error CS1002: ; expected\n/tmp/tmpneg50lm9.cs(47,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpneg50lm9.cs(55,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => {\n            if (x < 1 || x > 9)\n                return \"\";\n            return String.Format(\"{0}\", x);\n        });\n        arr = arr.OrderBy(x => x);\n        return arr.Select(x => String.Format(\"{0}\", x));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdzq9yu9v.cs(24,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpdzq9yu9v.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpdzq9yu9v.cs(30,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpdzq9yu9v.cs(31,16): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<string>'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0)\n            return result;\n        if (arr.Count == 1) {\n            if (arr[0] >= 1 && arr[0] <= 9)\n                result.Add(String.Format(\"{0}\", arr[0]));\n            return result;\n        }\n        long[] arr2 = arr.ToArray();\n        Arrays.Sort(arr2);\n        for (int i = 0; i < arr2.Length; i++) {\n            if (arr2[i] >= 1 && arr2[i] <= 9)\n                result.Add(String.Format(\"{0}\", arr2[i]));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphycmjmtc.cs(31,9): error CS0103: The name 'Arrays' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0eow0zka.cs(25,21): error CS1002: ; expected\n/tmp/tmp0eow0zka.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp0eow0zka.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0eow0zka.cs(25,21): error CS1002: ; expected\n/tmp/tmp0eow0zka.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp0eow0zka.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i - 1)));\n            }\n        }\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = result[i].ToLower();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8nv1i71w.cs(25,21): error CS1002: ; expected\n/tmp/tmp8nv1i71w.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp8nv1i71w.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        arr.Sort((x, y) => { return x - y; });\n        List<string> result = new List<string>();\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > 9 || arr[i] < 1) continue;\n            result.Add(String.Format(\"{0}\", arr[i]));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqzhzx0qa.cs(23,37): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpqzhzx0qa.cs(23,37): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type\n/tmp/tmpqzhzx0qa.cs(26,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqzhzx0qa.cs(26,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpqzhzx0qa.cs(27,49): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => Math.Abs(x) == 1 ? \"One\" : \"Two\");\n        arr = arr.Select(x => Math.Abs(x) == 2 ? \"Two\" : \"Three\");\n        arr = arr.Select(x => Math.Abs(x) == 3 ? \"Three\" : \"Four\");\n        arr = arr.Select(x => Math.Abs(x) == 4 ? \"Four\" : \"Five\");\n        arr = arr.Select(x => Math.Abs(x) == 5 ? \"Five\" : \"Six\");\n        arr = arr.Select(x => Math.Abs(x) == 6 ? \"Six\" : \"Seven\");\n        arr = arr.Select(x => Math.Abs(x) == 7 ? \"Seven\" : \"Eight\");\n        arr = arr.Select(x => Math.Abs(x) == 8 ? \"Eight\" : \"Nine\");\n        arr = arr.Select(x => Math.Abs(x) == 9 ? \"Nine\" : \"Ten\");\n        arr = arr.Select(x => \"Ten\");\n        return arr.ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpuhsztprg.cs(24,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpuhsztprg.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpuhsztprg.cs(26,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpuhsztprg.cs(27,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpuhsztprg.cs(28,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpuhsztprg.cs(29,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpuhsztprg.cs(30,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpuhsztprg.cs(31,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpuhsztprg.cs(32,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.Li",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkqpqm_pn.cs(24,21): error CS1002: ; expected\n/tmp/tmpkqpqm_pn.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmpkqpqm_pn.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        if (arr.Count == 1)\n            return new List<string>(new string[] { \"One\" });\n        if (arr.Count == 2)\n            return new List<string>(new string[] { \"One\", \"Two\" });\n        if (arr.Count == 3)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\" });\n        if (arr.Count == 4)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\" });\n        if (arr.Count == 5)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\" });\n        if (arr.Count == 6)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\" });\n        if (arr.Count == 7)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\" });\n        if (arr.Count == 8)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\" });\n        if (arr.Count == 9)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" });\n        return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" });\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <83b33e1994154042a649b619b67549ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <83b33e1994154042a649b619b67549ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Sort((x, y) => x.CompareTo(y));\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbec_eqpl.cs(26,21): error CS1002: ; expected\n/tmp/tmpbec_eqpl.cs(26,21): error CS1525: Invalid expression term ':'\n/tmp/tmpbec_eqpl.cs(26,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0) return result;\n        long[] arr_long = arr.ToArray();\n        int[] arr_int = new int[arr.Count];\n        for (int i = 0; i < arr.Count; i++)\n            arr_int[i] = (int)arr_long[i];\n        Arrays.Sort(arr_int);\n        for (int i = 0; i < arr_int.Length; i++) {\n            if (arr_int[i] >= 1 && arr_int[i] <= 9)\n                result.Add(String.Format(\"{0}\", arr_int[i]));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphx68bn01.cs(28,9): error CS0103: The name 'Arrays' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        if (arr.Count == 1 && arr[0] < 10)\n            return new List<string>(new string[]{(string) \"One\"});\n        if (arr.Count == 1 && arr[0] > 9)\n            return new List<string>(new string[]{(string) \"Nine\"});\n        if (arr.Count == 2 && arr[0] < 10 && arr[1] < 10)\n            return new List<string>(new string[]{(string) \"Two\", (string) \"One\"});\n        if (arr.Count == 2 && arr[0] > 9 && arr[1] < 10)\n            return new List<string>(new string[]{(string) \"Nine\", (string) \"One\"});\n        if (arr.Count == 2 && arr[0] < 10 && arr[1] > 9)\n            return new List<string>(new string[]{(string) \"Two\", (string) \"Nine\"});\n        if (arr.Count == 2 && arr[0] > 9 && arr[1] > 9)\n            return new List<string>(new string[]{(string) \"Nine\", (string) \"Nine\"});\n        if (arr.Count == 3 && arr[0] < 10 && arr[1] < 10 && arr[2] < 10)\n            return new List<string>(new string[]{(string) \"Three\", (string) \"Two\", (string) \"One\"});\n        if (arr.Count == 3 && arr[0] > 9 && arr[1] < 10 && arr[2] < 10)\n            return new List<string>(new string[]{(string) \"Nine\", (string) \"Two\", (string) \"One\"});\n        if (arr.Count == 3 && arr[0] < 10 && arr[1] > 9 && arr[2] < 10)\n            return new List<string>(new string[]{(string) \"Three\", (string) \"Nine\", (string) \"One\"});\n        if (arr.Count == 3 && arr[0] > 9 && arr[1] > 9 && arr[2] < 10)\n            return new List<string>(new\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzh117x8g.cs(43,40): error CS1031: Type expected\n/tmp/tmpzh117x8g.cs(43,40): error CS1526: A new expression requires (), [], or {} after type\n/tmp/tmpzh117x8g.cs(43,40): error CS1026: ) expected\n/tmp/tmpzh117x8g.cs(43,40): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0) return result;\n        if (arr.Count == 1) {\n            result.Add(String.Format(\"{0}\", arr[0]));\n            return result;\n        }\n        long[] arr_int = arr.ToArray();\n        long[] arr_rev = arr_int.Reverse();\n        for (int i = 0; i < arr_rev.Length; i++) {\n            if (arr_rev[i] >= 1 && arr_rev[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr_rev[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3vmufmoy.cs(29,26): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<long>' to 'long[]'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> ret = new List<string>();\n        if (arr.Count == 0)\n            return ret;\n        long[] arr_long = arr.ToArray();\n        int[] arr_int = new int[arr_long.Length];\n        for (int i = 0; i < arr_long.Length; i++)\n            arr_int[i] = (int)arr_long[i];\n        Arrays.Sort(arr_int);\n        for (int i = 0; i < arr_int.Length; i++) {\n            if (arr_int[i] > 9 || arr_int[i] < 1)\n                continue;\n            ret.Add(String.Format(\"{0}\", arr_int[i]));\n        }\n        return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0lcak3nr.cs(29,9): error CS0103: The name 'Arrays' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) {\n            return new List<string>();\n        }\n        arr.Sort(new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 }, new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });\n        List<string> result = new List<string>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn2fassp_.cs(25,13): error CS7036: There is no argument given that corresponds to the required formal parameter 'comparer' of 'List<long>.Sort(int, int, IComparer<long>)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => Math.Abs(x) == 1 ? \"One\" : \"Two\" + (Math.Abs(x) - 2) * \"Three\");\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => \"Four\" + (x - 4) * \"Five\");\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => \"Six\" + (x - 6) * \"Seven\");\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => \"Eight\" + (x - 8) * \"Nine\");\n        return arr.OrderBy(x => x);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyz27h9qd.cs(23,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpyz27h9qd.cs(24,66): error CS0019: Operator '*' cannot be applied to operands of type 'long' and 'string'\n/tmp/tmpyz27h9qd.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpyz27h9qd.cs(26,40): error CS0019: Operator '*' cannot be applied to operands of type 'long' and 'string'\n/tmp/tmpyz27h9qd.cs(27,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpyz27h9qd.cs(28,39): error CS0019: Operator '*' cannot be applied to operands of type 'long' and 'string'\n/tmp/tmpyz27h9qd.cs(29,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpyz27h9qd.cs(30,41): error CS0019: Operator '*' cannot be applied to operands of type 'long' and 'string'\n/tmp/tmpyz27h9qd.cs(31,16): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<string>'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        long[] arr2 = arr.ToArray();\n        Arrays.Sort(arr2);\n        List<string> result = new List<string>();\n        for (int i = 0; i < arr2.Length; i++) {\n            if (arr2[i] > 9 || arr2[i] < 1)\n                continue;\n            result.Add(String.Format(\"{0}\", arr2[i]));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptps5owsx.cs(25,9): error CS0103: The name 'Arrays' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : (i == 2) ? \"Two\" : (i == 3) ? \"Three\" : (i == 4) ? \"Four\" : (i == 5) ? \"Five\" : (i == 6) ? \"Six\" : (i == 7) ? \"Seven\" : (i == 8) ? \"Eight\" : \"Nine\"));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp275y9et6.cs(24,21): error CS1002: ; expected\n/tmp/tmp275y9et6.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmp275y9et6.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort((a, b) => {\n            if (a < b)\n                return -1;\n            else if (a > b)\n                return 1;\n            else\n                return 0;\n        });\n        arr.Sort((a, b) => {\n            if (a < b)\n                return 1;\n            else if (a > b)\n                return -1;\n            else\n                return 0;\n        });\n        arr.Sort((a, b) => {\n            if (a < b)\n                return -1;\n            else if (a > b)\n                return 1;\n            else\n                return 0;\n        });\n        arr.Sort((a, b) => {\n            if (a < b)\n                return 1;\n            else if (a > b)\n                return -1;\n            else\n                return 0;\n        });\n        arr.Sort((a, b) => {\n            if (a < b)\n                return -1;\n            else if (a > b)\n                return 1;\n            else\n                return 0;\n        });\n        arr.Sort((a, b) => {\n            if (a < b)\n                return 1;\n            else if (a > b)\n                return -1;\n            else\n                return 0;\n        });\n        arr.Sort((a, b) => {\n            if (a < b)\n                return -1;\n            else if (a > b)\n                return 1;\n            else\n                return 0;\n        });\n        arr.Sort((a, b) => {\n            if (a < b)\n                return 1;\n            else if (a > b)\n                return -1;\n            else\n                return 0;\n        });\n        arr.Sort((a, b) => {\n            if (a < b)\n                return -1;\n            else if (a > b)\n                return 1;\n            else\n                return 0;\n        });\n        arr.Sort((a, b) => {\n            if (a < b)\n                return 1;\n            else if (a > b)\n                return -1;\n            else\n                return 0\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoo92gjif.cs(101,25): error CS1002: ; expected\n/tmp/tmpoo92gjif.cs(102,6): error CS1026: ) expected\n/tmp/tmpoo92gjif.cs(102,6): error CS1002: ; expected\n/tmp/tmpoo92gjif.cs(103,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpoo92gjif.cs(111,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<long> arr1 = arr.Where(x => x >= 1 && x <= 9);\n        arr1.Sort((x, y) => x - y);\n        List<string> result = new List<string>();\n        for (long i = 0; i < arr1.Count; i++) {\n            result.Add(String.Format(\"{0}\", arr1[i]));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5wocsps1.cs(24,27): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp5wocsps1.cs(25,29): error CS0266: Cannot implicitly convert type 'long' to 'int'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp5wocsps1.cs(25,29): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type\n/tmp/tmp5wocsps1.cs(28,50): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> ret = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                ret.Add(String.Format(\"{0}\", i));\n            }\n        }\n        ret.Sort((a, b) => a.CompareTo(b));\n        for (int i = 0; i < ret.Count; i++) {\n            ret[i] = String.Format(\"{0}\", ret[i]);\n        }\n        return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpckn5dp4_.cs(25,21): error CS1002: ; expected\n/tmp/tmpckn5dp4_.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpckn5dp4_.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort(new long[]{1, 9}, SortOrder.Descending);\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : (i == 2) ? \"Two\" : (i == 3) ? \"Three\" : (i == 4) ? \"Four\" : (i == 5) ? \"Five\" : (i == 6) ? \"Six\" : (i == 7) ? \"Seven\" : (i == 8) ? \"Eight\" : \"Nine\"));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptsn1ey49.cs(25,21): error CS1002: ; expected\n/tmp/tmptsn1ey49.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmptsn1ey49.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort(new long[]{1, 2, 3, 4, 5, 6, 7, 8, 9}, new long[]{1, 2, 3, 4, 5, 6, 7, 8, 9});\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptzmnao7w.cs(25,21): error CS1002: ; expected\n/tmp/tmptzmnao7w.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmptzmnao7w.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort((a, b) => {\n            if (a > b)\n                return 1;\n            else if (a < b)\n                return -1;\n            else\n                return 0;\n        });\n        arr.Reverse();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpluqml70a.cs(33,21): error CS1002: ; expected\n/tmp/tmpluqml70a.cs(33,21): error CS1525: Invalid expression term ':'\n/tmp/tmpluqml70a.cs(33,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        long[] arr_long = arr.ToArray();\n        List<string> result = new List<string>();\n        if (arr_long.Length == 0) return result;\n        long min = arr_long[0];\n        long max = arr_long[0];\n        for (int i = 1; i < arr_long.Length; i++) {\n            if (arr_long[i] < min) min = arr_long[i];\n            if (arr_long[i] > max) max = arr_long[i];\n        }\n        if (min != 1 || max != 9) return result;\n        for (int i = 0; i < arr_long.Length; i++) {\n            if (arr_long[i] < 1 || arr_long[i] > 9) continue;\n            result.Add(String.Format(\"{0}\", arr_long[i]));\n        }\n        for (int i = result.Count - 1; i >= 0; i--) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <eb1ea549b87e4d688604308393ace755>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <eb1ea549b87e4d688604308393ace755>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0eow0zka.cs(25,21): error CS1002: ; expected\n/tmp/tmp0eow0zka.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp0eow0zka.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i < 1 || i > 9)\n                continue;\n            result.Add(String.Format(\"{0}\", i));\n        }\n        Collections.Reverse(result);\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpp0zybgkf.cs(25,21): error CS1002: ; expected\n/tmp/tmpp0zybgkf.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpp0zybgkf.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        arr.Sort(new long[]{1, 2, 3, 4, 5, 6, 7, 8, 9});\n        arr.Sort(new long[]{-1, -2, -3, -4, -5, -6, -7, -8, -9});\n        List<string> result = new List<string>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpiggdns6w.cs(23,18): error CS1503: Argument 1: cannot convert from 'long[]' to 'System.Collections.Generic.IComparer<long>'\n/tmp/tmpiggdns6w.cs(24,18): error CS1503: Argument 1: cannot convert from 'long[]' to 'System.Collections.Generic.IComparer<long>'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : ((i == 2) ? \"Two\" : ((i == 3) ? \"Three\" : ((i == 4) ? \"Four\" : ((i == 5) ? \"Five\" : ((i == 6) ? \"Six\" : ((i == 7) ? \"Seven\" : ((i == 8) ? \"Eight\" : \"Nine\")))))))));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqkn_lr15.cs(25,21): error CS1002: ; expected\n/tmp/tmpqkn_lr15.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpqkn_lr15.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0) return result;\n        long min = arr.First();\n        long max = arr.Last();\n        if (min > max) return result;\n        if (min < 0 || max < 0) return result;\n        if (min > 9 || max > 9) return result;\n        if (min == max) return result;\n        if (min == 0) return result;\n        if (max == 0) return result;\n        if (min == 1 && max == 9) return result;\n        if (min == 2 && max == 8) return result;\n        if (min == 3 && max == 7) return result;\n        if (min == 4 && max == 6) return result;\n        if (min == 5 && max == 5) return result;\n        if (min == 6 && max == 4) return result;\n        if (min == 7 && max == 3) return result;\n        if (min == 8 && max == 2) return result;\n        if (min == 9 && max == 1) return result;\n        for (long i = min; i <= max; i++) {\n            result.Add(String.Format(\"{0}\", i));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <49e752e298f64f97af9f883d58efb755>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <49e752e298f64f97af9f883d58efb755>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Reverse();\n        arr = arr.Select(x => {\n            if (x < 10)\n                return \"One\";\n            if (x < 100)\n                return \"Two\";\n            if (x < 1000)\n                return \"Three\";\n            if (x < 10000)\n                return \"Four\";\n            if (x < 100000)\n                return \"Five\";\n            if (x < 1000000)\n                return \"Six\";\n            if (x < 10000000)\n                return \"Seven\";\n            if (x < 100000000)\n                return \"Eight\";\n            if (x < 1000000000)\n                return \"Nine\";\n            return \"Ten\";\n        });\n        return arr.Select(x => {\n            if (x == 10)\n                return \"Ten\";\n            if (x == 11)\n                return \"Eleven\";\n            if (x == 12)\n                return \"Twelve\";\n            if (x == 13)\n                return \"Thirteen\";\n            if (x == 14)\n                return \"Fourteen\";\n            if (x == 15)\n                return \"Fifteen\";\n            if (x == 16)\n                return \"Sixteen\";\n            if (x == 17)\n                return \"Seventeen\";\n            if (x == 18)\n                return \"Eighteen\";\n            if (x == 19)\n                return \"Nineteen\";\n            if (x == 20)\n                return \"Twenty\";\n            if (x == 30)\n                return \"Thirty\";\n            if (x == 40)\n                return \"Forty\";\n            if (x == 50)\n                return \"Fifty\";\n            if (x == 60)\n                return \"Sixty\";\n            if (x == 70)\n                return \"Seventy\";\n            if (x == 80)\n                return \"Eighty\";\n            if (x == 90)\n                return \"Ninety\";\n            return \"\";\n        });\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpw57rr301.cs(24,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpw57rr301.cs(25,15): error CS0029: Cannot implicitly convert type 'void' to 'System.Collections.Generic.List<long>'\n/tmp/tmpw57rr301.cs(26,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpw57rr301.cs(47,16): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<string>'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0eow0zka.cs(25,21): error CS1002: ; expected\n/tmp/tmp0eow0zka.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp0eow0zka.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0)\n            return result;\n        long min = arr.First();\n        long max = arr.Last();\n        if (min > 9 || max < 1)\n            return result;\n        if (min == max)\n            return result;\n        for (long i = min; i <= max; i++) {\n            result.Add(String.Format(\"{0}\", i));\n        }\n        for (int i = 0; i < arr.Count; i++) {\n            arr[i] = arr[i] - min + 1;\n        }\n        for (int i = 0; i < arr.Count; i++) {\n            arr[i] = arr[i] * 10 + min - 1;\n        }\n        for (int i = 0; i < arr.Count; i++) {\n            result[arr[i]] = result[arr[i]];\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp308qn2qn.cs(41,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp308qn2qn.cs(41,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        long[] arr2 = arr.ToArray();\n        Arrays.Sort(arr2);\n        List<string> result = new List<string>();\n        for (int i = 0; i < arr2.Length; i++) {\n            if (arr2[i] >= 1 && arr2[i] <= 9)\n                result.Add(String.Format(\"{0}\", arr2[i]));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpylkjcarp.cs(25,9): error CS0103: The name 'Arrays' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) {\n            return new List<string>();\n        }\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => {\n            if (x > 9 || x < 1) {\n                return \"\";\n            }\n            return String.Format(\"{0}\", x);\n        });\n        arr = arr.OrderBy(x => x);\n        return arr.Select(x => {\n            if (x.Length == 1) {\n                return \"One\";\n            }\n            if (x.Length == 2) {\n                return \"Two\";\n            }\n            if (x.Length == 3) {\n                return \"Three\";\n            }\n            if (x.Length == 4) {\n                return \"Four\";\n            }\n            if (x.Length == 5) {\n                return \"Five\";\n            }\n            if (x.Length == 6) {\n                return \"Six\";\n            }\n            if (x.Length == 7) {\n                return \"Seven\";\n            }\n            if (x.Length == 8) {\n                return \"Eight\";\n            }\n            if (x.Length == 9) {\n                return \"Nine\";\n            }\n            return \"\";\n        });\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ag68l67.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp9ag68l67.cs(26,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp9ag68l67.cs(32,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp9ag68l67.cs(34,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp9ag68l67.cs(37,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp9ag68l67.cs(40,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp9ag68l67.cs(43,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp9ag68l67.cs(46,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0) return result;\n        long[] arr_long = arr.ToArray();\n        int[] arr_int = new int[arr_long.Length];\n        for (int i = 0; i < arr_long.Length; i++) {\n            arr_int[i] = (int)arr_long[i];\n        }\n        Arrays.Sort(arr_int);\n        for (int i = 0; i < arr_int.Length; i++) {\n            if (arr_int[i] >= 1 && arr_int[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr_int[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_6jngel_.cs(29,9): error CS0103: The name 'Arrays' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0)\n            return result;\n        long[] arr_long = arr.ToArray();\n        int[] arr_int = new int[arr.Count];\n        for (int i = 0; i < arr.Count; i++)\n            arr_int[i] = (int)arr_long[i];\n        Arrays.Sort(arr_int);\n        for (int i = 0; i < arr_int.Length; i++) {\n            if (arr_int[i] < 10)\n                result.Add(String.Format(\"{0}\", arr_int[i]));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppgrjf0ql.cs(29,9): error CS0103: The name 'Arrays' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<long> sorted = arr.OrderBy(x => x);\n        List<string> result = new List<string>();\n        for (long i : sorted) {\n            if (i >= 1 && i <= 9)\n                result.Add(String.Format(\"{0}\", i));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9g5xr5mg.cs(26,21): error CS1002: ; expected\n/tmp/tmp9g5xr5mg.cs(26,21): error CS1525: Invalid expression term ':'\n/tmp/tmp9g5xr5mg.cs(26,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        if (arr.Count == 1 && arr[0] < 10)\n            return new List<string>(new string[] { \"One\" });\n        if (arr.Count == 1 && arr[0] > 9)\n            return new List<string>(new string[] { \"Nine\" });\n        arr.Sort(new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 }, new long[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9)\n                result.Add(String.Format(\"{0}\", i));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjnk_5xcp.cs(30,21): error CS1002: ; expected\n/tmp/tmpjnk_5xcp.cs(30,21): error CS1525: Invalid expression term ':'\n/tmp/tmpjnk_5xcp.cs(30,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        if (arr.Count == 1) return new List<string>(new string[] { \"One\" });\n        if (arr.Count == 2) return new List<string>(new string[] { \"One\", \"Two\" });\n        if (arr.Count == 3) return new List<string>(new string[] { \"One\", \"Two\", \"Three\" });\n        if (arr.Count == 4) return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\" });\n        if (arr.Count == 5) return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\" });\n        if (arr.Count == 6) return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\" });\n        if (arr.Count == 7) return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\" });\n        if (arr.Count == 8) return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\" });\n        if (arr.Count == 9) return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" });\n        if (arr.Count > 9) return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" });\n        return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" });\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3df1742baef74cd18f1595cd9b5f2c49>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3df1742baef74cd18f1595cd9b5f2c49>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        long[] arr2 = arr.ToArray();\n        Arrays.Sort(arr2);\n        List<string> result = new List<string>();\n        for (int i = 0; i < arr2.Length; i++) {\n            if (arr2[i] >= 1 && arr2[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr2[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwezsba0r.cs(23,9): error CS0103: The name 'Arrays' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : (i == 2) ? \"Two\" : (i == 3) ? \"Three\" : (i == 4) ? \"Four\" : (i == 5) ? \"Five\" : (i == 6) ? \"Six\" : (i == 7) ? \"Seven\" : (i == 8) ? \"Eight\" : \"Nine\"));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp275y9et6.cs(24,21): error CS1002: ; expected\n/tmp/tmp275y9et6.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmp275y9et6.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) {\n            return new List<string>();\n        }\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => {\n            if (x < 10 && x > 0) {\n                return \"One\";\n            }\n            if (x < 20 && x > 10) {\n                return \"Two\";\n            }\n            if (x < 30 && x > 20) {\n                return \"Three\";\n            }\n            if (x < 40 && x > 30) {\n                return \"Four\";\n            }\n            if (x < 50 && x > 40) {\n                return \"Five\";\n            }\n            if (x < 60 && x > 50) {\n                return \"Six\";\n            }\n            if (x < 70 && x > 60) {\n                return \"Seven\";\n            }\n            if (x < 80 && x > 70) {\n                return \"Eight\";\n            }\n            if (x < 90 && x > 80) {\n                return \"Nine\";\n            }\n            return \"\";\n        });\n        return arr.Select(x => {\n            if (x.Length == 1) {\n                return \"One\";\n            }\n            if (x.Length == 2) {\n                return \"Two\";\n            }\n            if (x.Length == 3) {\n                return \"Three\";\n            }\n            if (x.Length == 4) {\n                return \"Four\";\n            }\n            if (x.Length == 5) {\n                return \"Five\";\n            }\n            if (x.Length == 6) {\n                return \"Six\";\n            }\n            if (x.Length == 7) {\n                return \"Seven\";\n            }\n            if (x.Length == 8) {\n                return \"Eight\";\n            }\n            if (x.Length == 9) {\n                return \"Nine\";\n            }\n            return \"\";\n        });\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp24a10mlc.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp24a10mlc.cs(26,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp24a10mlc.cs(57,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp24a10mlc.cs(60,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp24a10mlc.cs(63,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp24a10mlc.cs(66,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp24a10mlc.cs(69,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp24a10mlc.cs(72,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a ",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Sort((x, y) => x.CompareTo(y));\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = result[i].ToLower();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6p2afncz.cs(25,21): error CS1002: ; expected\n/tmp/tmp6p2afncz.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp6p2afncz.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0)\n            return result;\n        long[] arr_long = arr.ToArray();\n        int[] arr_int = new int[arr.Count];\n        for (int i = 0; i < arr.Count; i++)\n            arr_int[i] = (int)arr_long[i];\n        Arrays.sort(arr_int);\n        for (int i = 0; i < arr_int.Length; i++) {\n            if (arr_int[i] < 10)\n                result.Add(String.Format(\"{0}\", arr_int[i]));\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp5p0fp8tg.cs(29,9): error CS0103: The name 'Arrays' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i < 1 || i > 9) continue;\n            result.Add(String.Format(\"{0}\", i));\n        }\n        for (int i = result.Count - 1; i >= 0; i--) {\n            result[i] = result[i].ToLower();\n        }\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = result[i].ToUpper();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2ng6qhek.cs(24,21): error CS1002: ; expected\n/tmp/tmp2ng6qhek.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmp2ng6qhek.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) {\n            return new List<string>();\n        }\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => {\n            if (x > 9 || x < 1) {\n                return \"\";\n            }\n            return String.Format(\"{0}\", x);\n        });\n        arr = arr.OrderBy(x => x);\n        return arr.Select(x => {\n            if (x.Length == 1) {\n                return \"One\";\n            }\n            if (x.Length == 2) {\n                return \"Two\";\n            }\n            if (x.Length == 3) {\n                return \"Three\";\n            }\n            if (x.Length == 4) {\n                return \"Four\";\n            }\n            if (x.Length == 5) {\n                return \"Five\";\n            }\n            if (x.Length == 6) {\n                return \"Six\";\n            }\n            if (x.Length == 7) {\n                return \"Seven\";\n            }\n            if (x.Length == 8) {\n                return \"Eight\";\n            }\n            if (x.Length == 9) {\n                return \"Nine\";\n            }\n            return \"\";\n        });\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ag68l67.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp9ag68l67.cs(26,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp9ag68l67.cs(32,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp9ag68l67.cs(34,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp9ag68l67.cs(37,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp9ag68l67.cs(40,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp9ag68l67.cs(43,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp9ag68l67.cs(46,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort((a, b) => {\n            if (a > b)\n                return 1;\n            if (a < b)\n                return -1;\n            return 0;\n        });\n        arr.Reverse();\n        List<string> result = new List<string>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c75dd7e2d5fd4cedb81b0bfb7d742db4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c75dd7e2d5fd4cedb81b0bfb7d742db4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) {\n            return new List<string>();\n        }\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => {\n            if (x > 9 || x < 1) {\n                return \"\";\n            }\n            return String.Format(\"{0}\", x);\n        });\n        arr = arr.OrderBy(x => x);\n        return arr.Select(x => {\n            if (x.Length == 1) {\n                return \"One\";\n            }\n            if (x.Length == 2) {\n                return \"Two\";\n            }\n            if (x.Length == 3) {\n                return \"Three\";\n            }\n            if (x.Length == 4) {\n                return \"Four\";\n            }\n            if (x.Length == 5) {\n                return \"Five\";\n            }\n            if (x.Length == 6) {\n                return \"Six\";\n            }\n            if (x.Length == 7) {\n                return \"Seven\";\n            }\n            if (x.Length == 8) {\n                return \"Eight\";\n            }\n            if (x.Length == 9) {\n                return \"Nine\";\n            }\n            return \"\";\n        });\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9ag68l67.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp9ag68l67.cs(26,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp9ag68l67.cs(32,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmp9ag68l67.cs(34,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp9ag68l67.cs(37,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp9ag68l67.cs(40,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp9ag68l67.cs(43,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmp9ag68l67.cs(46,19): error CS1061: 'long' does not contain a definition for 'Length' and no accessible extension method 'Length' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0eow0zka.cs(25,21): error CS1002: ; expected\n/tmp/tmp0eow0zka.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp0eow0zka.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : ((i == 2) ? \"Two\" : ((i == 3) ? \"Three\" : ((i == 4) ? \"Four\" : ((i == 5) ? \"Five\" : ((i == 6) ? \"Six\" : ((i == 7) ? \"Seven\" : ((i == 8) ? \"Eight\" : \"Nine\")))))))));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqkn_lr15.cs(25,21): error CS1002: ; expected\n/tmp/tmpqkn_lr15.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpqkn_lr15.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : (i == 2) ? \"Two\" : (i == 3) ? \"Three\" : (i == 4) ? \"Four\" : (i == 5) ? \"Five\" : (i == 6) ? \"Six\" : (i == 7) ? \"Seven\" : (i == 8) ? \"Eight\" : \"Nine\"));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdb48bkpl.cs(25,21): error CS1002: ; expected\n/tmp/tmpdb48bkpl.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpdb48bkpl.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Sort((x, y) => {\n            return x.CompareTo(y);\n        });\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = result[i].ToLower();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgnkqpz4b.cs(24,21): error CS1002: ; expected\n/tmp/tmpgnkqpz4b.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmpgnkqpz4b.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => {\n            if (x > 9 || x < 1)\n                return \"\";\n            return String.Format(\"{0}\", x);\n        });\n        arr = arr.OrderBy(x => x);\n        return arr.Select(x => {\n            if (x == \"\")\n                return \"\";\n            return String.Format(\"{0}\", x);\n        });\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnj2i86lr.cs(24,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpnj2i86lr.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpnj2i86lr.cs(30,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpnj2i86lr.cs(32,17): error CS0019: Operator '==' cannot be applied to operands of type 'long' and 'string'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0eow0zka.cs(25,21): error CS1002: ; expected\n/tmp/tmp0eow0zka.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp0eow0zka.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Reverse();\n        arr = arr.Select(x => (string) ((char) ('0' + (int) (x % 10))));\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpqtjetbg7.cs(24,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpqtjetbg7.cs(25,15): error CS0029: Cannot implicitly convert type 'void' to 'System.Collections.Generic.List<long>'\n/tmp/tmpqtjetbg7.cs(26,31): error CS0030: Cannot convert type 'char' to 'string'\n/tmp/tmpqtjetbg7.cs(27,16): error CS0029: Cannot implicitly convert type 'System.Collections.Generic.List<long>' to 'System.Collections.Generic.List<string>'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        arr.Sort(new long[]{1, 2, 3, 4, 5, 6, 7, 8, 9}, new long[]{1, 2, 3, 4, 5, 6, 7, 8, 9});\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(new string(new char[]{(char)('0' + i)}));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdovnpy4a.cs(24,21): error CS1002: ; expected\n/tmp/tmpdovnpy4a.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmpdovnpy4a.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort((a, b) => {\n            if (a > b)\n                return 1;\n            else if (a < b)\n                return -1;\n            else\n                return 0;\n        });\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : (i == 2) ? \"Two\" : (i == 3) ? \"Three\" : (i == 4) ? \"Four\" : (i == 5) ? \"Five\" : (i == 6) ? \"Six\" : (i == 7) ? \"Seven\" : (i == 8) ? \"Eight\" : \"Nine\"));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq1r0mtci.cs(32,21): error CS1002: ; expected\n/tmp/tmpq1r0mtci.cs(32,21): error CS1525: Invalid expression term ':'\n/tmp/tmpq1r0mtci.cs(32,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : (i == 2) ? \"Two\" : (i == 3) ? \"Three\" : (i == 4) ? \"Four\" : (i == 5) ? \"Five\" : (i == 6) ? \"Six\" : (i == 7) ? \"Seven\" : (i == 8) ? \"Eight\" : \"Nine\"));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdb48bkpl.cs(25,21): error CS1002: ; expected\n/tmp/tmpdb48bkpl.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpdb48bkpl.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        if (arr.Count == 1 && arr.First() < 1 || arr.First() > 9)\n            return new List<string>(new string[] { \"One\" });\n        arr = arr.OrderBy(a => a);\n        arr = arr.Reverse();\n        arr = arr.Select(a => (a > 9 ? \"Nine\" : a > 4 ? \"Eight\" : a > 2 ? \"Seven\" : a > 1 ? \"Six\" : a > 0 ? \"Five\" : \"Four\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a > 9 ? \" \" : \"\") + (a\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpl7h6ax7e.cs(28,844): error CS1026: ) expected\n/tmp/tmpl7h6ax7e.cs(28,844): error CS1002: ; expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => {\n            if (x < 1 || x > 9)\n                return \"\";\n            return String.Format(\"{0}\", x);\n        });\n        arr = arr.OrderBy(x => x);\n        return arr.Select(x => {\n            if (x == \"\")\n                return \"\";\n            return String.Format(\"{0}\", x);\n        });\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsd_18pfh.cs(24,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpsd_18pfh.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpsd_18pfh.cs(30,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpsd_18pfh.cs(32,17): error CS0019: Operator '==' cannot be applied to operands of type 'long' and 'string'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => {\n            if (x < 10 && x > 0)\n                return \"One\";\n            if (x < 100 && x > 10)\n                return \"Two\";\n            if (x < 1000 && x > 100)\n                return \"Three\";\n            if (x < 10000 && x > 1000)\n                return \"Four\";\n            if (x < 100000 && x > 10000)\n                return \"Five\";\n            if (x < 1000000 && x > 100000)\n                return \"Six\";\n            if (x < 10000000 && x > 1000000)\n                return \"Seven\";\n            if (x < 100000000 && x > 10000000)\n                return \"Eight\";\n            if (x < 1000000000 && x > 100000000)\n                return \"Nine\";\n            return \"\";\n        });\n        arr = arr.Select(x => {\n            if (x == 0)\n                return \"\";\n            return String.Format(\"{0}\", x);\n        });\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpx8fpzh41.cs(24,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpx8fpzh41.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpx8fpzh41.cs(46,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpx8fpzh41.cs(51,16): error CS0029: Cannot implicitly convert type 'System.Collections.Generic.List<long>' to 'System.Collections.Generic.List<string>'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort(new long[]{1, 2, 3, 4, 5, 6, 7, 8, 9}, new long[]{1, 2, 3, 4, 5, 6, 7, 8, 9});\n        List<string> result = new List<string>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9tagk80z.cs(23,13): error CS7036: There is no argument given that corresponds to the required formal parameter 'comparer' of 'List<long>.Sort(int, int, IComparer<long>)'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0) return result;\n        long[] arr2 = arr.ToArray();\n        Arrays.Sort(arr2);\n        for (int i = 0; i < arr2.Length; i++) {\n            if (arr2[i] >= 1 && arr2[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr2[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprs5j4f0i.cs(25,9): error CS0103: The name 'Arrays' does not exist in the current context\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort((a, b) => a - b);\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : (i == 2) ? \"Two\" : (i == 3) ? \"Three\" : (i == 4) ? \"Four\" : (i == 5) ? \"Five\" : (i == 6) ? \"Six\" : (i == 7) ? \"Seven\" : (i == 8) ? \"Eight\" : \"Nine\"));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0vg3hqc0.cs(25,21): error CS1002: ; expected\n/tmp/tmp0vg3hqc0.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp0vg3hqc0.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Sort();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6lwt4ins.cs(25,21): error CS1002: ; expected\n/tmp/tmp6lwt4ins.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp6lwt4ins.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0eow0zka.cs(25,21): error CS1002: ; expected\n/tmp/tmp0eow0zka.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp0eow0zka.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i < 1 || i > 9) continue;\n            result.Add(String.Format(\"{0}\", i));\n        }\n        for (int i = result.Count - 1; i >= 0; i--) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0h9_0d68.cs(24,21): error CS1002: ; expected\n/tmp/tmp0h9_0d68.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmp0h9_0d68.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => (x > 9 ? \"Nine\" : (x > 1 ? \"One\" : (x > 2 ? \"Two\" : (x > 3 ? \"Three\" : (x > 4 ? \"Four\" : (x > 5 ? \"Five\" : (x > 6 ? \"Six\" : (x > 7 ? \"Seven\" : (x > 8 ? \"Eight\" : \"Nine\")))))))));\n        return arr.ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzlvv66mr.cs(25,208): error CS1026: ) expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort(new long[]{1, 2, 3, 4, 5, 6, 7, 8, 9}, new long[]{1, 2, 3, 4, 5, 6, 7, 8, 9});\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptzmnao7w.cs(25,21): error CS1002: ; expected\n/tmp/tmptzmnao7w.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmptzmnao7w.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        if (arr.Count == 1 && arr[0] < 10)\n            return new List<string>(new string[] { \"One\" });\n        if (arr.Count == 1 && arr[0] > 9)\n            return new List<string>(new string[] { \"Nine\" });\n        if (arr.Count == 2 && arr[0] < 10 && arr[1] < 10)\n            return new List<string>(new string[] { \"One\", \"Two\" });\n        if (arr.Count == 2 && arr[0] > 9 && arr[1] < 10)\n            return new List<string>(new string[] { \"Nine\", \"Two\" });\n        if (arr.Count == 2 && arr[0] < 10 && arr[1] > 9)\n            return new List<string>(new string[] { \"One\", \"Three\" });\n        if (arr.Count == 2 && arr[0] > 9 && arr[1] > 9)\n            return new List<string>(new string[] { \"Nine\", \"Three\" });\n        if (arr.Count == 3 && arr[0] < 10 && arr[1] < 10 && arr[2] < 10)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\" });\n        if (arr.Count == 3 && arr[0] > 9 && arr[1] < 10 && arr[2] < 10)\n            return new List<string>(new string[] { \"Nine\", \"Two\", \"Three\" });\n        if (arr.Count == 3 && arr[0] < 10 && arr[1] > 9 && arr[2] < 10)\n            return new List<string>(new string[] { \"One\", \"Three\", \"Four\" });\n        if (arr.Count == 3 && arr[0] > 9 && arr[1] > 9 && arr[2] < 10)\n            return new List<string>(new string[] { \"Nine\", \"Three\", \"Four\" });\n        if (arr.Count == 3 && arr[0] < 10 && arr[1] < 10 && arr[2] > 9)\n            return new List<string>(new string[] { \"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpf4wekdmq.cs(45,52): error CS1010: Newline in constant\n/tmp/tmpf4wekdmq.cs(46,6): error CS1026: ) expected\n/tmp/tmpf4wekdmq.cs(46,6): error CS1002: ; expected\n/tmp/tmpf4wekdmq.cs(47,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpf4wekdmq.cs(55,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0eow0zka.cs(25,21): error CS1002: ; expected\n/tmp/tmp0eow0zka.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmp0eow0zka.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => x >= 1 && x <= 9 ? \"One\" + (x - 1) : \"\").ToList();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => x.Substring(0, 1)).ToList();\n        return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpbrv3a85y.cs(23,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpbrv3a85y.cs(24,15): error CS0029: Cannot implicitly convert type 'System.Collections.Generic.List<string>' to 'System.Collections.Generic.List<long>'\n/tmp/tmpbrv3a85y.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpbrv3a85y.cs(26,33): error CS1061: 'long' does not contain a definition for 'Substring' and no accessible extension method 'Substring' accepting a first argument of type 'long' could be found (are you missing a using directive or an assembly reference?)\n/tmp/tmpbrv3a85y.cs(27,16): error CS0029: Cannot implicitly convert type 'System.Collections.Generic.List<long>' to 'System.Collections.Generic.List<string>'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292694,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkqpqm_pn.cs(24,21): error CS1002: ; expected\n/tmp/tmpkqpqm_pn.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmpkqpqm_pn.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i > 9 || i < 1) continue;\n            result.Add(String.Format(\"{0}\", i));\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8n9qqr9m.cs(24,21): error CS1002: ; expected\n/tmp/tmp8n9qqr9m.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmp8n9qqr9m.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n        if (arr.Count == 0)\n            return result;\n        long[] arr_long = arr.ToArray();\n        long min = arr_long[0];\n        long max = arr_long[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr_long[i] < min)\n                min = arr_long[i];\n            if (arr_long[i] > max)\n                max = arr_long[i];\n        }\n        if (min < 1 || max > 9)\n            return result;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr_long[i] >= 1 && arr_long[i] <= 9)\n                result.Add(String.Format(\"{0}\", arr_long[i]));\n            else\n                result.Add(\"\");\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <842c196995ce403ea5aceb7c7d6020c3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <842c196995ce403ea5aceb7c7d6020c3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort((a, b) => a - b);\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292696,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj6yuuvt9.cs(25,21): error CS1002: ; expected\n/tmp/tmpj6yuuvt9.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpj6yuuvt9.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => {\n            if (x > 9 || x < 1)\n                return \"\";\n            return String.Format(\"{0}\", x);\n        });\n        arr = arr.Select(x => {\n            if (x.ToString().Length > 1)\n                return \"\";\n            return String.Format(\"{0}\", x);\n        });\n        return arr.ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmppiv9u8u6.cs(22,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmppiv9u8u6.cs(23,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmppiv9u8u6.cs(28,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmppiv9u8u6.cs(33,16): error CS0029: Cannot implicitly convert type 'System.Collections.Generic.List<long>' to 'System.Collections.Generic.List<string>'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        if (arr.Count == 1 && arr[0] < 10)\n            return new List<string>(new string[] { \"One\" });\n        if (arr.Count == 1 && arr[0] > 9)\n            return new List<string>(new string[] { \"Nine\" });\n        if (arr.Count == 2 && arr[0] < 10 && arr[1] < 10)\n            return new List<string>(new string[] { \"One\", \"Two\" });\n        if (arr.Count == 2 && arr[0] > 9 && arr[1] < 10)\n            return new List<string>(new string[] { \"Nine\", \"Two\" });\n        if (arr.Count == 2 && arr[0] < 10 && arr[1] > 9)\n            return new List<string>(new string[] { \"One\", \"Three\" });\n        if (arr.Count == 2 && arr[0] > 9 && arr[1] > 9)\n            return new List<string>(new string[] { \"Nine\", \"Three\" });\n        if (arr.Count == 3 && arr[0] < 10 && arr[1] < 10 && arr[2] < 10)\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\" });\n        if (arr.Count == 3 && arr[0] > 9 && arr[1] < 10 && arr[2] < 10)\n            return new List<string>(new string[] { \"Nine\", \"Two\", \"Three\" });\n        if (arr.Count == 3 && arr[0] < 10 && arr[1] > 9 && arr[2] < 10)\n            return new List<string>(new string[] { \"One\", \"Three\", \"Four\" });\n        if (arr.Count == 3 && arr[0] > 9 && arr[1] > 9 && arr[2] < 10)\n            return new List<string>(new string[] { \"Nine\", \"Three\", \"Four\" });\n        if (arr.Count == 3 && arr[0] < 10 && arr[1] < 10 && arr[2] > 9)\n            return new List<string>(new string[] { \"\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpf4wekdmq.cs(45,52): error CS1010: Newline in constant\n/tmp/tmpf4wekdmq.cs(46,6): error CS1026: ) expected\n/tmp/tmpf4wekdmq.cs(46,6): error CS1002: ; expected\n/tmp/tmpf4wekdmq.cs(47,5): error CS0106: The modifier 'public' is not valid for this item\n/tmp/tmpf4wekdmq.cs(55,2): error CS1513: } expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) {\n            return new List<string>();\n        }\n        if (arr.Count == 1) {\n            return new List<string>(new string[] { \"One\" });\n        }\n        if (arr.Count == 2) {\n            return new List<string>(new string[] { \"One\", \"Two\" });\n        }\n        if (arr.Count == 3) {\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\" });\n        }\n        if (arr.Count == 4) {\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\" });\n        }\n        if (arr.Count == 5) {\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\" });\n        }\n        if (arr.Count == 6) {\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\" });\n        }\n        if (arr.Count == 7) {\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\" });\n        }\n        if (arr.Count == 8) {\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\" });\n        }\n        if (arr.Count == 9) {\n            return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" });\n        }\n        return new List<string>(new string[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" });\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <743547ae700a437ab7e04446f09048ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <743547ae700a437ab7e04446f09048ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort((a, b) => {\n            if (a < b)\n                return -1;\n            else if (a > b)\n                return 1;\n            else\n                return 0;\n        });\n        arr.Sort((a, b) => {\n            if (a < b)\n                return 1;\n            else if (a > b)\n                return -1;\n            else\n                return 0;\n        });\n        List<string> result = new List<string>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1aa7697831a54c529993004e2dfabdb9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1aa7697831a54c529993004e2dfabdb9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => {\n            if (x < 10)\n                return \"One\";\n            if (x < 20)\n                return \"Two\";\n            if (x < 30)\n                return \"Three\";\n            if (x < 40)\n                return \"Four\";\n            if (x < 50)\n                return \"Five\";\n            if (x < 60)\n                return \"Six\";\n            if (x < 70)\n                return \"Seven\";\n            if (x < 80)\n                return \"Eight\";\n            if (x < 90)\n                return \"Nine\";\n            return \"\";\n        });\n        return arr.Select(x => {\n            if (x == 1)\n                return \"One\";\n            if (x == 2)\n                return \"Two\";\n            if (x == 3)\n                return \"Three\";\n            if (x == 4)\n                return \"Four\";\n            if (x == 5)\n                return \"Five\";\n            if (x == 6)\n                return \"Six\";\n            if (x == 7)\n                return \"Seven\";\n            if (x == 8)\n                return \"Eight\";\n            if (x == 9)\n                return \"Nine\";\n            return \"\";\n        });\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzwkh3t4p.cs(24,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpzwkh3t4p.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpzwkh3t4p.cs(46,16): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<string>'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => Math.Abs(x) == 1 ? \"One\" : Math.Abs(x) == 2 ? \"Two\" : Math.Abs(x) == 3 ? \"Three\" : Math.Abs(x) == 4 ? \"Four\" : Math.Abs(x) == 5 ? \"Five\" : Math.Abs(x) == 6 ? \"Six\" : Math.Abs(x) == 7 ? \"Seven\" : Math.Abs(x) == 8 ? \"Eight\" : Math.Abs(x) == 9 ? \"Nine\" : \"Other\");\n        arr = arr.OrderByDescending(x => x);\n        return arr.Select(x => String.Format(\"{0}\", x));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpoycsft8a.cs(24,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpoycsft8a.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpoycsft8a.cs(26,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpoycsft8a.cs(27,16): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<string>'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        if (arr.Count == 0)\n            return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        for (int i = result.Count - 1; i >= 0; i--) {\n            result[i] = result[i].ToLower();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzcgp2w7w.cs(26,21): error CS1002: ; expected\n/tmp/tmpzcgp2w7w.cs(26,21): error CS1525: Invalid expression term ':'\n/tmp/tmpzcgp2w7w.cs(26,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0)\n            return new List<string>();\n        arr = arr.OrderBy(x => x);\n        arr = arr.Select(x => {\n            if (x < 10)\n                return \"One\";\n            if (x < 100)\n                return \"Two\";\n            if (x < 1000)\n                return \"Three\";\n            if (x < 10000)\n                return \"Four\";\n            if (x < 100000)\n                return \"Five\";\n            if (x < 1000000)\n                return \"Six\";\n            if (x < 10000000)\n                return \"Seven\";\n            if (x < 100000000)\n                return \"Eight\";\n            if (x < 1000000000)\n                return \"Nine\";\n            return \"Ten\";\n        });\n        arr = arr.Select(x => {\n            if (x < 10)\n                return \"One\";\n            if (x < 100)\n                return \"Two\";\n            if (x < 1000)\n                return \"Three\";\n            if (x < 10000)\n                return \"Four\";\n            if (x < 100000)\n                return \"Five\";\n            if (x < 1000000)\n                return \"Six\";\n            if (x < 10000000)\n                return \"Seven\";\n            if (x < 100000000)\n                return \"Eight\";\n            if (x < 1000000000)\n                return \"Nine\";\n            return \"Ten\";\n        });\n        return arr.Select(x => {\n            if (x < 10)\n                return \"One\";\n            if (x < 100)\n                return \"Two\";\n            if (x < 1000)\n                return \"Three\";\n            if (x < 10000)\n                return \"Four\";\n            if (x < 100000)\n                return \"Five\";\n            if (x < 1000000)\n                return \"Six\";\n            if (x < 10000000)\n                return \"Seven\";\n            if (x < 100000000)\n                return \"Eight\";\n            if (x < 1000000000)\n                return \"Nine\";\n            return \"Ten\";\n        });\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnq4laxa7.cs(24,15): error CS0266: Cannot implicitly convert type 'System.Linq.IOrderedEnumerable<long>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpnq4laxa7.cs(25,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpnq4laxa7.cs(46,15): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<long>'. An explicit conversion exists (are you missing a cast?)\n/tmp/tmpnq4laxa7.cs(67,16): error CS0266: Cannot implicitly convert type 'System.Collections.Generic.IEnumerable<string>' to 'System.Collections.Generic.List<string>'. An explicit conversion exists (are you missing a cast?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort((a, b) => {\n            if (a < b)\n                return -1;\n            if (a > b)\n                return 1;\n            return 0;\n        });\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", (i == 1) ? \"One\" : (i == 2) ? \"Two\" : (i == 3) ? \"Three\" : (i == 4) ? \"Four\" : (i == 5) ? \"Five\" : (i == 6) ? \"Six\" : (i == 7) ? \"Seven\" : (i == 8) ? \"Eight\" : \"Nine\"));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvj22xt9w.cs(31,21): error CS1002: ; expected\n/tmp/tmpvj22xt9w.cs(31,21): error CS1525: Invalid expression term ':'\n/tmp/tmpvj22xt9w.cs(31,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        // Write your code here\n        arr.Sort((a, b) => {\n            if (a > b)\n                return 1;\n            else if (a < b)\n                return -1;\n            else\n                return 0;\n        });\n        List<string> result = new List<string>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr[i]));\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292695,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a6a9a194f26e40ed869b5d8c70abf90b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a6a9a194f26e40ed869b5d8c70abf90b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        if (arr.Count == 1) return new List<string>(new string[]{(string)String.Format(\"{0}\", arr.First)});\n        List<string> result = new List<string>();\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i] <= 9) {\n                result.Add(String.Format(\"{0}\", arr[i]));\n            }\n        }\n        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = String.Format(\"{0}\", result[i]);\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9pyxoncl.cs(23,95): error CS1503: Argument 2: cannot convert from 'method group' to 'object'\n/tmp/tmp9pyxoncl.cs(26,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9pyxoncl.cs(26,36): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp9pyxoncl.cs(27,53): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        arr.Sort(new long[]{1, 9}, SortOrder.Descending);\n        List<string> ret = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                ret.Add(String.Format(\"{0}\", i));\n            }\n        }\n        return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpus1d0_qu.cs(25,21): error CS1002: ; expected\n/tmp/tmpus1d0_qu.cs(25,21): error CS1525: Invalid expression term ':'\n/tmp/tmpus1d0_qu.cs(25,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        if (arr.Count == 0) return new List<string>();\n        List<string> result = new List<string>();\n        for (long i : arr) {\n            if (i >= 1 && i <= 9) {\n                result.Add(String.Format(\"{0}\", i));\n            }\n        }\n        result.Sort((x, y) => x.CompareTo(y));\n        for (int i = 0; i < result.Count; i++) {\n            result[i] = result[i].ToLower();\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n",
      "timestamp": 1664292697,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdj53wmq1.cs(24,21): error CS1002: ; expected\n/tmp/tmpdj53wmq1.cs(24,21): error CS1525: Invalid expression term ':'\n/tmp/tmpdj53wmq1.cs(24,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}