name: HumanEval_156_int_to_mini_roman
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
  \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num\
  \ <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n\
  \    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
  \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
  xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
  ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n   \
  \ Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
  i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
  xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
  xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n   \
  \ Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
  cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n    }\n\
  \n}\n"
completions: ["        string result = \"\";\n        long num = number;\n       \
    \ while (num > 0) {\n            if (num >= 1000) {\n                result =\
    \ \"m\" + result;\n                num -= 1000;\n            }\n            else\
    \ if (num >= 900) {\n                result = \"cm\" + result;\n             \
    \   num -= 900;\n            }\n            else if (num >= 500) {\n         \
    \       result = \"d\" + result;\n                num -= 500;\n            }\n\
    \            else if (num >= 400) {\n                result = \"cd\" + result;\n\
    \                num -= 400;\n            }\n            else if (num >= 100)\
    \ {\n                result = \"c\" + result;\n                num -= 100;\n \
    \           }\n            else if (num >= 90) {\n                result = \"\
    xc\" + result;\n                num -= 90;\n            }\n            else if\
    \ (num >= 50) {\n                result = \"l\" + result;\n                num\
    \ -= 50;\n            }\n            else if (num >= 40) {\n                result\
    \ = \"xl\" + result;\n                num -= 40;\n            }\n            else\
    \ if (num >= 10) {\n                result = \"x\" + result;\n               \
    \ num -= 10;\n            }\n            else if (num >= 9) {\n              \
    \  result = \"ix\" + result;\n                num -= 9;\n            }\n     \
    \       else if (num >= 5) {\n                result = \"v\" + result;\n     \
    \           num -= 5;\n            }\n            else if (num >= 4) {\n     \
    \           result = \"iv\" + result;\n                num -= 4;\n           \
    \ }\n            else if (num >= 1) {\n                result = \"i\" + result;\n\
    \                num -= 1;\n            }\n        }\n        return result.ToLower();",
  "        string[] roman = new string[] { \"\", \"i\", \"ii\", \"iii\", \"iv\", \"\
    v\", \"vi\", \"vii\", \"viii\", \"ix\" };\n        string[] digits = new string[]\
    \ { \"\", \"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\"\
    \ };\n        string result = \"\";\n        while (number > 0) {\n          \
    \  int digit = (int) (number % 10);\n            result = roman[digit] + result;\n\
    \            number /= 10;\n        }\n        return result;", "        if (number\
    \ < 1 || number > 1000)\n            throw new Exception(\"Invalid number\");\n\
    \n        string roman = \"\";\n        int[] digits = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n        for (int i = 0; i < digits.Length; i++)\
    \ {\n            while (number >= digits[i]) {\n                number -= digits[i];\n\
    \                roman += \"m\";\n            }\n        }\n        return roman;",
  "        if (number < 1 || number > 1000)\n            throw new Exception(\"Invalid\
    \ number\");\n        string result = \"\";\n        long num = number;\n    \
    \    while (num > 0) {\n            int digit = (int)(num % 10);\n           \
    \ switch (digit) {\n                case 1:\n                    result = result\
    \ + \"i\";\n                    break;\n                case 2:\n            \
    \        result = result + \"ii\";\n                    break;\n             \
    \   case 3:\n                    result = result + \"iii\";\n                \
    \    break;\n                case 4:\n                    result = result + \"\
    iv\";\n                    break;\n                case 5:\n                 \
    \   result = result + \"v\";\n                    break;\n                case\
    \ 6:\n                    result = result + \"vi\";\n                    break;\n\
    \                case 7:\n                    result = result + \"vii\";\n   \
    \                 break;\n                case 8:\n                    result\
    \ = result + \"viii\";\n                    break;\n                case 9:\n\
    \                    result = result + \"ix\";\n                    break;\n \
    \               case 10:\n                    result = result + \"x\";\n     \
    \               break;\n                case 11:\n                    result =\
    \ result + \"xi\";\n                    break;\n                case 12:\n   \
    \                 result = result + \"xii\";\n                    break;\n   \
    \             case 13:\n                    result = result + \"xiii\";\n    \
    \                break;\n                case 14:\n                    result\
    \ = result + \"xiv\";\n                    break;\n                case 15:\n\
    \                    result = result + \"xv\";\n                    break;\n \
    \               case 16:\n                    result = result + \"xvi\";\n   \
    \                 break;\n                case 17:\n                    result\
    \ = result + \"xvii\";\n                    break;\n                case 18:\n\
    \                    result = result + \"xviii\";\n                    break;\n\
    \                case 19:\n                    result = result + \"xix\";\n  \
    \                  break;\n                case 20:\n                    result\
    \ = result + \"xx\";\n                    break;\n                case 21:\n \
    \                   result = result + \"xxi\";\n                    break;\n \
    \               case 22:\n                    result = result + \"xxii\";\n  \
    \                  break;\n                case 23:\n                    result\
    \ = result + \"xxiii\";\n                    break;\n                case 24:\n\
    \                    result = result + \"xxiv\";\n                    break;\n\
    \                ", "        if (number < 1 || number > 1000)\n            throw\
    \ new Exception(\"Invalid number\");\n\n        string roman = \"\";\n       \
    \ int[] digits = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n   \
    \     int[] roman_digits = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4,\
    \ 1};\n        for (int i = 0; i < digits.Length; i++) {\n            while (number\
    \ >= digits[i]) {\n                number -= digits[i];\n                roman\
    \ += roman_digits[i];\n            }\n        }\n        return roman;", "   \
    \     if (number < 1 || number > 1000)\n            throw new ArgumentOutOfRangeException(\"\
    number\");\n        string roman = \"\";\n        long num = number;\n       \
    \ while (num > 0) {\n            int digit = (int)(num % 10);\n            switch\
    \ (digit) {\n                case 1:\n                    roman = \"i\" + roman;\n\
    \                    break;\n                case 2:\n                    roman\
    \ = \"ii\" + roman;\n                    break;\n                case 3:\n   \
    \                 roman = \"iii\" + roman;\n                    break;\n     \
    \           case 4:\n                    roman = \"iv\" + roman;\n           \
    \         break;\n                case 5:\n                    roman = \"v\" +\
    \ roman;\n                    break;\n                case 6:\n              \
    \      roman = \"vi\" + roman;\n                    break;\n                case\
    \ 7:\n                    roman = \"vii\" + roman;\n                    break;\n\
    \                case 8:\n                    roman = \"viii\" + roman;\n    \
    \                break;\n                case 9:\n                    roman =\
    \ \"ix\" + roman;\n                    break;\n                case 10:\n    \
    \                roman = \"x\" + roman;\n                    break;\n        \
    \        case 11:\n                    roman = \"xi\" + roman;\n             \
    \       break;\n                case 12:\n                    roman = \"xii\"\
    \ + roman;\n                    break;\n                case 13:\n           \
    \         roman = \"xiii\" + roman;\n                    break;\n            \
    \    case 14:\n                    roman = \"xiv\" + roman;\n                \
    \    break;\n                case 15:\n                    roman = \"xv\" + roman;\n\
    \                    break;\n                case 16:\n                    roman\
    \ = \"xvi\" + roman;\n                    break;\n                case 17:\n \
    \                   roman = \"xvii\" + roman;\n                    break;\n  \
    \              case 18:\n                    roman = \"xviii\" + roman;\n    \
    \                break;\n                case 19:\n                    roman =\
    \ \"xix\" + roman;\n                    break;\n                case 20:\n   \
    \                 roman = \"xx\" + roman;\n                    break;\n      \
    \          case 21:\n                    roman = \"xxi\" + roman;\n          \
    \          break;\n                case 22:\n                    roman = \"xxii\"",
  "        if (number < 1 || number > 1000)\n            throw new InvalidOperationException(\"\
    number must be in the range [1, 1000]\");\n        string result = \"\";\n   \
    \     long num = number;\n        while (num > 0) {\n            int digit = num\
    \ % 10;\n            if (digit == 0)\n                continue;\n            if\
    \ (digit == 1)\n                result += \"i\";\n            else if (digit ==\
    \ 2)\n                result += \"ii\";\n            else if (digit == 3)\n  \
    \              result += \"iii\";\n            else if (digit == 4)\n        \
    \        result += \"iv\";\n            else if (digit == 5)\n               \
    \ result += \"v\";\n            else if (digit == 6)\n                result +=\
    \ \"vi\";\n            else if (digit == 7)\n                result += \"vii\"\
    ;\n            else if (digit == 8)\n                result += \"viii\";\n   \
    \         else if (digit == 9)\n                result += \"ix\";\n          \
    \  num /= 10;\n        }\n        return result.ToLower();", "        if (number\
    \ < 1 || number > 1000)\n            throw new Exception(\"Invalid number\");\n\
    \        string roman = \"\";\n        int[] roman_numerals = {1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for (int i = 0; i < roman_numerals.Length;\
    \ i++) {\n            while (number >= roman_numerals[i]) {\n                number\
    \ -= roman_numerals[i];\n                roman += \"M\";\n            }\n    \
    \    }\n        return roman;", "        string roman = \"\";\n        long num\
    \ = number;\n        while (num > 0) {\n            roman = roman + IntToRoman(num\
    \ % 10);\n            num /= 10;\n        }\n        return roman;\n    }\n\n\
    \    // Convert a number to its roman numeral equivalent.\n    // Return the roman\
    \ numeral as a string.\n    // For example,\n    // IntToRoman(3) returns \"III\"\
    \n    // IntToRoman(5) returns \"V\"\n    // IntToRoman(10) returns \"X\"\n  \
    \  // IntToRoman(100) returns \"C\"\n    // IntToRoman(101) returns \"CC\"\n \
    \   // IntToRoman(1000) returns \"M\"\n    public static string IntToRoman(int\
    \ number) {\n        string roman = \"\";\n        int num = number;\n       \
    \ while (num > 0) {\n            roman = roman + IntToRoman(num % 10);\n     \
    \       num /= 10;\n        }\n        return roman;\n    }\n\n    // Convert\
    \ a number to its roman numeral equivalent.\n    // Return the roman numeral as\
    \ a string.\n    // For example,\n    // IntToRoman(3) returns \"III\"\n    //\
    \ IntToRoman(5) returns \"V\"\n    // IntToRoman(10) returns \"X\"\n    // IntToRoman(100)\
    \ returns \"C\"\n    // IntToRoman(101) returns \"CC\"\n    // IntToRoman(1000)\
    \ returns \"M\"\n    public static string IntToRoman(long number) {\n        string\
    \ roman = \"\";\n        long num = number;\n        while (num > 0) {\n     \
    \       roman = roman + IntToRoman(num % 10);\n            num /= 10;\n      \
    \  }\n        return roman;\n    }\n\n    // Convert a roman numeral to its decimal\
    \ equivalent.\n    // Return the decimal number as a string.\n    // For example,\n\
    \    // RomanToInt(\"III\") returns 3\n    // RomanToInt(\"V\") returns 5\n  \
    \  // RomanToInt(\"X\") returns 10\n    // RomanToInt(\"C\") returns 100\n   \
    \ // RomanToInt(\"CC\") returns 200\n    // RomanTo", "        if (number < 1\
    \ || number > 1000)\n            throw new InvalidOperationException(\"number\
    \ must be in the range [1, 1000]\");\n\n        string result = \"\";\n      \
    \  long remainder = number;\n        while (remainder > 0) {\n            long\
    \ digit = remainder % 10;\n            remainder = remainder / 10;\n         \
    \   if (digit == 1)\n                result = result + \"i\";\n            else\
    \ if (digit == 2)\n                result = result + \"ii\";\n            else\
    \ if (digit == 3)\n                result = result + \"iii\";\n            else\
    \ if (digit == 4)\n                result = result + \"iv\";\n            else\
    \ if (digit == 5)\n                result = result + \"v\";\n            else\
    \ if (digit == 6)\n                result = result + \"vi\";\n            else\
    \ if (digit == 7)\n                result = result + \"vii\";\n            else\
    \ if (digit == 8)\n                result = result + \"viii\";\n            else\
    \ if (digit == 9)\n                result = result + \"ix\";\n            else\
    \ if (digit == 0)\n                result = result + \"x\";\n        }\n     \
    \   return result.ToLower();", "        // Create a string builder to hold the\
    \ result\n        StringBuilder sb = new StringBuilder();\n        // Create a\
    \ dictionary to hold the roman numerals\n        Dictionary<long, string> roman\
    \ = new Dictionary<long, string>();\n        // Populate the dictionary\n    \
    \    roman.Add(1000, \"m\");\n        roman.Add(900, \"cm\");\n        roman.Add(500,\
    \ \"d\");\n        roman.Add(400, \"cd\");\n        roman.Add(100, \"c\");\n \
    \       roman.Add(90, \"xc\");\n        roman.Add(50, \"l\");\n        roman.Add(40,\
    \ \"xl\");\n        roman.Add(10, \"x\");\n        roman.Add(9, \"ix\");\n   \
    \     roman.Add(5, \"v\");\n        roman.Add(4, \"iv\");\n        roman.Add(1,\
    \ \"i\");\n        // Loop through the number\n        while (number > 0) {\n\
    \            // Get the roman numeral for the current number\n            string\
    \ romanNum = roman[number];\n            // If the roman numeral is not empty\n\
    \            if (romanNum != \"\") {\n                // Add it to the result\n\
    \                sb.Append(romanNum);\n            }\n            // Decrease\
    \ the number\n            number--;\n        }\n        // Return the result\n\
    \        return sb.ToString();", "        string roman = \"\";\n        if (number\
    \ < 1 || number > 1000)\n            throw new Exception(\"Invalid number\");\n\
    \        long[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \        for (int i = 0; i < values.Length; i++) {\n            while (number\
    \ >= values[i]) {\n                number -= values[i];\n                roman\
    \ += values[i];\n            }\n        }\n        return roman;", "        string\
    \ result = \"\";\n        if (number < 1 || number > 1000)\n            throw\
    \ new Exception(\"Invalid number\");\n        if (number < 4) {\n            result\
    \ = \"i\";\n        }\n        else if (number < 9) {\n            result = \"\
    ii\";\n        }\n        else if (number < 40) {\n            result = \"iii\"\
    ;\n        }\n        else if (number < 90) {\n            result = \"iv\";\n\
    \        }\n        else if (number < 400) {\n            result = \"v\";\n  \
    \      }\n        else if (number < 900) {\n            result = \"vi\";\n   \
    \     }\n        else if (number < 4000) {\n            result = \"vii\";\n  \
    \      }\n        else if (number < 9000) {\n            result = \"viii\";\n\
    \        }\n        else if (number < 40000) {\n            result = \"ix\";\n\
    \        }\n        else if (number < 90000) {\n            result = \"x\";\n\
    \        }\n        else if (number < 400000) {\n            result = \"xi\";\n\
    \        }\n        else if (number < 900000) {\n            result = \"xii\"\
    ;\n        }\n        else if (number < 4000000) {\n            result = \"xiii\"\
    ;\n        }\n        else if (number < 9000000) {\n            result = \"xiv\"\
    ;\n        }\n        else if (number < 40000000) {\n            result = \"xv\"\
    ;\n        }\n        else if (number < 90000000) {\n            result = \"xvi\"\
    ;\n        }\n        else if (number < 400000000) {\n            result = \"\
    xvii\";\n        }\n        else if (number < 900000000) {\n            result\
    \ = \"xviii\";\n        }\n        else if (number < 4000000000) {\n         \
    \   result = \"xix\";\n        }\n        else if (number < 9000000000) {\n  \
    \          result = \"xx\";\n        }\n        else if (number < 40000000000)\
    \ {\n            result = \"xxi\";\n        }\n        else if (number < 90000000000)\
    \ {\n            result = \"xxii\";\n        }\n        else if (number < 400000000000)\
    \ {\n            ", "        string result = \"\";\n        long remainder = number;\n\
    \        while (remainder > 0) {\n            int digit = (int)remainder % 10;\n\
    \            if (digit == 1) {\n                result = \"i\" + result;\n   \
    \         }\n            else if (digit == 2) {\n                result = \"ii\"\
    \ + result;\n            }\n            else if (digit == 3) {\n             \
    \   result = \"iii\" + result;\n            }\n            else if (digit == 4)\
    \ {\n                result = \"iv\" + result;\n            }\n            else\
    \ if (digit == 5) {\n                result = \"v\" + result;\n            }\n\
    \            else if (digit == 6) {\n                result = \"vi\" + result;\n\
    \            }\n            else if (digit == 7) {\n                result = \"\
    vii\" + result;\n            }\n            else if (digit == 8) {\n         \
    \       result = \"viii\" + result;\n            }\n            else if (digit\
    \ == 9) {\n                result = \"ix\" + result;\n            }\n        \
    \    else if (digit == 0) {\n                result = \"x\" + result;\n      \
    \      }\n            remainder = remainder / 10;\n        }\n        return result.ToLower();",
  "        string result = \"\";\n        long num = number;\n        while (num >\
    \ 0) {\n            long digit = num % 10;\n            if (digit == 0) {\n  \
    \              result = result + \"x\";\n            }\n            else if (digit\
    \ == 5) {\n                result = result + \"v\";\n            }\n         \
    \   else if (digit == 4) {\n                result = result + \"iv\";\n      \
    \      }\n            else if (digit == 9) {\n                result = result\
    \ + \"ix\";\n            }\n            else {\n                result = result\
    \ + digit;\n            }\n            num = num / 10;\n        }\n        return\
    \ result;", "        string result = \"\";\n        long num = number;\n     \
    \   while (num > 0) {\n            long digit = num % 10;\n            if (digit\
    \ == 4 || digit == 9) {\n                result = \"cd\" + result;\n         \
    \   }\n            else if (digit == 5) {\n                result = \"d\" + result;\n\
    \            }\n            else if (digit == 6) {\n                result = \"\
    mc\" + result;\n            }\n            else if (digit == 7) {\n          \
    \      result = \"m\" + result;\n            }\n            else if (digit ==\
    \ 8) {\n                result = \"x\" + result;\n            }\n            else\
    \ if (digit == 9) {\n                result = \"ix\" + result;\n            }\n\
    \            else {\n                result = String.valueOf(digit) + result;\n\
    \            }\n            num /= 10;\n        }\n        return result;", " \
    \       if (number < 1 || number > 1000)\n            throw new ArgumentOutOfRangeException(\"\
    number\");\n\n        string roman = \"\";\n        int[] roman_num = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] roman_num_rev = {1,\
    \ 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900};\n        for (int i = 0; i < roman_num.Length;\
    \ i++) {\n            while (number >= roman_num[i]) {\n                number\
    \ -= roman_num[i];\n                roman += roman_num_rev[i];\n            }\n\
    \        }\n        return roman;", "        string[] roman = { \"\", \"i\", \"\
    ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\" };\n        string\
    \ result = \"\";\n        while (number > 0) {\n            int digit = (int)\
    \ (number % 10);\n            result = roman[digit] + result;\n            number\
    \ /= 10;\n        }\n        return result.ToLower();", "        // Create a dictionary\
    \ of roman numerals\n        Hashtable<long, string> roman = new Hashtable<long,\
    \ string>();\n        roman.Add(1000, \"m\");\n        roman.Add(900, \"cm\");\n\
    \        roman.Add(500, \"d\");\n        roman.Add(400, \"cd\");\n        roman.Add(100,\
    \ \"c\");\n        roman.Add(90, \"xc\");\n        roman.Add(50, \"l\");\n   \
    \     roman.Add(40, \"xl\");\n        roman.Add(10, \"x\");\n        roman.Add(9,\
    \ \"ix\");\n        roman.Add(5, \"v\");\n        roman.Add(4, \"iv\");\n    \
    \    roman.Add(1, \"i\");\n\n        // Convert the number to a string\n     \
    \   string romanString = \"\";\n        while (number > 0) {\n            // Get\
    \ the next roman numeral\n            long romanNum = number % 10;\n         \
    \   number /= 10;\n\n            // If the roman numeral is in the dictionary,\
    \ add it to the string\n            if (roman.ContainsKey(romanNum)) {\n     \
    \           romanString = roman.get(romanNum) + romanString;\n            }\n\
    \        }\n\n        // Return the string\n        return romanString.ToLower();",
  "        if (number < 1 || number > 1000)\n            throw new Exception(\"Invalid\
    \ number\");\n        string result = \"\";\n        long num = number;\n    \
    \    while (num > 0) {\n            long digit = num % 10;\n            if (digit\
    \ == 1)\n                result = result + \"x\";\n            else if (digit\
    \ == 2)\n                result = result + \"c\";\n            else if (digit\
    \ == 3)\n                result = result + \"m\";\n            else if (digit\
    \ == 4)\n                result = result + \"d\";\n            else if (digit\
    \ == 5)\n                result = result + \"l\";\n            else if (digit\
    \ == 6)\n                result = result + \"x\";\n            else if (digit\
    \ == 7)\n                result = result + \"c\";\n            else if (digit\
    \ == 8)\n                result = result + \"l\";\n            else if (digit\
    \ == 9)\n                result = result + \"x\";\n            num = num / 10;\n\
    \        }\n        return result.ToLower();", "        string roman = \"\";\n\
    \        long num = number;\n        while (num > 0) {\n            roman = roman\
    \ + IntToRoman(num % 10);\n            num /= 10;\n        }\n        return roman;",
  "        string result = \"\";\n        long num = number;\n        while (num >\
    \ 0) {\n            long digit = num % 10;\n            if (digit == 1) {\n  \
    \              result = result + \"i\";\n            }\n            else if (digit\
    \ == 2) {\n                result = result + \"ii\";\n            }\n        \
    \    else if (digit == 3) {\n                result = result + \"iii\";\n    \
    \        }\n            else if (digit == 4) {\n                result = result\
    \ + \"iv\";\n            }\n            else if (digit == 5) {\n             \
    \   result = result + \"v\";\n            }\n            else if (digit == 6)\
    \ {\n                result = result + \"vi\";\n            }\n            else\
    \ if (digit == 7) {\n                result = result + \"vii\";\n            }\n\
    \            else if (digit == 8) {\n                result = result + \"viii\"\
    ;\n            }\n            else if (digit == 9) {\n                result =\
    \ result + \"ix\";\n            }\n            else if (digit == 0) {\n      \
    \          result = result + \"x\";\n            }\n            num = num / 10;\n\
    \        }\n        return result.ToLower();", "        string roman = \"\";\n\
    \        long num = number;\n        while (num > 0) {\n            long digit\
    \ = num % 10;\n            switch (digit) {\n                case 1:\n       \
    \             roman += \"i\";\n                    break;\n                case\
    \ 2:\n                    roman += \"ii\";\n                    break;\n     \
    \           case 3:\n                    roman += \"iii\";\n                 \
    \   break;\n                case 4:\n                    roman += \"iv\";\n  \
    \                  break;\n                case 5:\n                    roman\
    \ += \"v\";\n                    break;\n                case 6:\n           \
    \         roman += \"vi\";\n                    break;\n                case 7:\n\
    \                    roman += \"vii\";\n                    break;\n         \
    \       case 8:\n                    roman += \"viii\";\n                    break;\n\
    \                case 9:\n                    roman += \"ix\";\n             \
    \       break;\n                case 10:\n                    roman += \"x\";\n\
    \                    break;\n                case 11:\n                    roman\
    \ += \"xi\";\n                    break;\n                case 12:\n         \
    \           roman += \"xii\";\n                    break;\n                case\
    \ 13:\n                    roman += \"xiii\";\n                    break;\n  \
    \              case 14:\n                    roman += \"xiv\";\n             \
    \       break;\n                case 15:\n                    roman += \"xv\"\
    ;\n                    break;\n                case 16:\n                    roman\
    \ += \"xvi\";\n                    break;\n                case 17:\n        \
    \            roman += \"xvii\";\n                    break;\n                case\
    \ 18:\n                    roman += \"xviii\";\n                    break;\n \
    \               case 19:\n                    roman += \"xix\";\n            \
    \        break;\n                case 20:\n                    roman += \"xx\"\
    ;\n                    break;\n                case 21:\n                    roman\
    \ += \"xxi\";\n                    break;\n                case 22:\n        \
    \            roman += \"xxii\";\n                    break;\n                case\
    \ 23:\n                    roman += \"xxiii\";\n                    break;\n \
    \               case 24:\n                    roman += \"xxiv\";\n           \
    \         break;\n                case 25:\n                    roman += \"xxv\"\
    ;\n                    break;\n                case 26:\n                    roman\
    \ += \"xxvi\";\n                    break;\n                case 27:\n       \
    \             roman += \"xxvii\";\n                    break;\n              \
    \  case 28:\n                    roman += \"xxviii\";\n                    break;\n\
    \                case", "        if (number < 1 || number > 1000)\n          \
    \  throw new InvalidOperationException(\"number must be in the range [1, 1000]\"\
    );\n        string result = \"\";\n        long num = number;\n        while (num\
    \ > 0) {\n            long digit = num % 10;\n            if (digit == 0)\n  \
    \              continue;\n            if (digit == 1) {\n                result\
    \ = result + \"i\";\n            }\n            else if (digit == 2) {\n     \
    \           result = result + \"ii\";\n            }\n            else if (digit\
    \ == 3) {\n                result = result + \"iii\";\n            }\n       \
    \     else if (digit == 4) {\n                result = result + \"iv\";\n    \
    \        }\n            else if (digit == 5) {\n                result = result\
    \ + \"v\";\n            }\n            else if (digit == 6) {\n              \
    \  result = result + \"vi\";\n            }\n            else if (digit == 7)\
    \ {\n                result = result + \"vii\";\n            }\n            else\
    \ if (digit == 8) {\n                result = result + \"viii\";\n           \
    \ }\n            else if (digit == 9) {\n                result = result + \"\
    ix\";\n            }\n            num = num / 10;\n        }\n        return result.ToLower();",
  "        if (number < 1 || number > 1000)\n            throw new Exception(\"Invalid\
    \ number\");\n\n        string roman = \"\";\n        int[] roman_numbers = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] roman_values\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int roman_index\
    \ = 0;\n        while (number > 0) {\n            if (number >= roman_numbers[roman_index])\
    \ {\n                number -= roman_numbers[roman_index];\n                roman\
    \ += roman_values[roman_index];\n            }\n            else {\n         \
    \       roman += roman_values[roman_index];\n                number -= roman_numbers[roman_index];\n\
    \            }\n            roman_index++;\n        }\n        return roman;",
  "        string roman = \"\";\n        int num = (int)number;\n        if (num <\
    \ 1 || num > 1000)\n            throw new Exception(\"Invalid number\");\n   \
    \     for (int i = 0; i < 4; i++) {\n            int[] values = {1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n            int[] romanValues = {'M',\
    \ 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'};\n       \
    \     int value = values[i];\n            while (num >= value) {\n           \
    \     roman += romanValues[i];\n                num -= value;\n            }\n\
    \        }\n        return roman;", "        if (number < 1 || number > 1000)\n\
    \            throw new Exception(\"Invalid number\");\n        string roman =\
    \ \"\";\n        long num = number;\n        while (num > 0) {\n            long\
    \ digit = num % 10;\n            switch (digit) {\n                case 1:\n \
    \                   roman = \"i\" + roman;\n                    break;\n     \
    \           case 2:\n                    roman = \"ii\" + roman;\n           \
    \         break;\n                case 3:\n                    roman = \"iii\"\
    \ + roman;\n                    break;\n                case 4:\n            \
    \        roman = \"iv\" + roman;\n                    break;\n               \
    \ case 5:\n                    roman = \"v\" + roman;\n                    break;\n\
    \                case 6:\n                    roman = \"vi\" + roman;\n      \
    \              break;\n                case 7:\n                    roman = \"\
    vii\" + roman;\n                    break;\n                case 8:\n        \
    \            roman = \"viii\" + roman;\n                    break;\n         \
    \       case 9:\n                    roman = \"ix\" + roman;\n               \
    \     break;\n                case 10:\n                    roman = \"x\" + roman;\n\
    \                    break;\n                case 11:\n                    roman\
    \ = \"xi\" + roman;\n                    break;\n                case 12:\n  \
    \                  roman = \"xii\" + roman;\n                    break;\n    \
    \            case 13:\n                    roman = \"xiii\" + roman;\n       \
    \             break;\n                case 14:\n                    roman = \"\
    xiv\" + roman;\n                    break;\n                case 15:\n       \
    \             roman = \"xv\" + roman;\n                    break;\n          \
    \      case 16:\n                    roman = \"xvi\" + roman;\n              \
    \      break;\n                case 17:\n                    roman = \"xvii\"\
    \ + roman;\n                    break;\n                case 18:\n           \
    \         roman = \"xviii\" + roman;\n                    break;\n           \
    \     case 19:\n                    roman = \"xix\" + roman;\n               \
    \     break;\n                case 20:\n                    roman = \"xx\" + roman;\n\
    \                    break;\n                case 21:\n                    roman\
    \ = \"xxi\" + roman;\n                    break;\n                case 22:\n \
    \                   roman = \"xxii\" + roman;\n                    ", "      \
    \  string roman = \"\";\n        long num = number;\n        while (num > 0) {\n\
    \            int digit = (int)(num % 10);\n            switch (digit) {\n    \
    \            case 1:\n                    roman = roman + \"i\";\n           \
    \         break;\n                case 2:\n                    roman = roman +\
    \ \"ii\";\n                    break;\n                case 3:\n             \
    \       roman = roman + \"iii\";\n                    break;\n               \
    \ case 4:\n                    roman = roman + \"iv\";\n                    break;\n\
    \                case 5:\n                    roman = roman + \"v\";\n       \
    \             break;\n                case 6:\n                    roman = roman\
    \ + \"vi\";\n                    break;\n                case 7:\n           \
    \         roman = roman + \"vii\";\n                    break;\n             \
    \   case 8:\n                    roman = roman + \"viii\";\n                 \
    \   break;\n                case 9:\n                    roman = roman + \"ix\"\
    ;\n                    break;\n                case 10:\n                    roman\
    \ = roman + \"x\";\n                    break;\n                case 11:\n   \
    \                 roman = roman + \"xi\";\n                    break;\n      \
    \          case 12:\n                    roman = roman + \"xii\";\n          \
    \          break;\n                case 13:\n                    roman = roman\
    \ + \"xiii\";\n                    break;\n                case 14:\n        \
    \            roman = roman + \"xiv\";\n                    break;\n          \
    \      case 15:\n                    roman = roman + \"xv\";\n               \
    \     break;\n                case 16:\n                    roman = roman + \"\
    xvi\";\n                    break;\n                case 17:\n               \
    \     roman = roman + \"xvii\";\n                    break;\n                case\
    \ 18:\n                    roman = roman + \"xviii\";\n                    break;\n\
    \                case 19:\n                    roman = roman + \"xix\";\n    \
    \                break;\n                case 20:\n                    roman =\
    \ roman + \"xx\";\n                    break;\n                case 21:\n    \
    \                roman = roman + \"xxi\";\n                    break;\n      \
    \          case 22:\n                    roman = roman + \"xxii\";\n         \
    \           break;\n                case 23:\n                    roman = roman\
    \ + \"xxiii\";\n                    break;\n                case 24:\n       \
    \             roman = roman + \"xxiv\";\n                    ", "        string\
    \ roman = \"\";\n        long num = number;\n        while (num > 0) {\n     \
    \       int digit = (int) (num % 10);\n            switch (digit) {\n        \
    \        case 1:\n                    roman = roman + \"i\";\n               \
    \     break;\n                case 2:\n                    roman = roman + \"\
    ii\";\n                    break;\n                case 3:\n                 \
    \   roman = roman + \"iii\";\n                    break;\n                case\
    \ 4:\n                    roman = roman + \"iv\";\n                    break;\n\
    \                case 5:\n                    roman = roman + \"v\";\n       \
    \             break;\n                case 6:\n                    roman = roman\
    \ + \"vi\";\n                    break;\n                case 7:\n           \
    \         roman = roman + \"vii\";\n                    break;\n             \
    \   case 8:\n                    roman = roman + \"viii\";\n                 \
    \   break;\n                case 9:\n                    roman = roman + \"ix\"\
    ;\n                    break;\n                case 10:\n                    roman\
    \ = roman + \"x\";\n                    break;\n                case 11:\n   \
    \                 roman = roman + \"xi\";\n                    break;\n      \
    \          case 12:\n                    roman = roman + \"xii\";\n          \
    \          break;\n                case 13:\n                    roman = roman\
    \ + \"xiii\";\n                    break;\n                case 14:\n        \
    \            roman = roman + \"xiv\";\n                    break;\n          \
    \      case 15:\n                    roman = roman + \"xv\";\n               \
    \     break;\n                case 16:\n                    roman = roman + \"\
    xvi\";\n                    break;\n                case 17:\n               \
    \     roman = roman + \"xvii\";\n                    break;\n                case\
    \ 18:\n                    roman = roman + \"xviii\";\n                    break;\n\
    \                case 19:\n                    roman = roman + \"xix\";\n    \
    \                break;\n                case 20:\n                    roman =\
    \ roman + \"xx\";\n                    break;\n                case 21:\n    \
    \                roman = roman + \"xxi\";\n                    break;\n      \
    \          case 22:\n                    roman = roman + \"xxii\";\n         \
    \           break;\n                case 23:\n                    roman = roman\
    \ + \"xxiii\";\n                    break;\n                case 24:\n       \
    \             roman = roman + \"xxiv\";\n", "        string roman = \"\";\n  \
    \      long num = number;\n        while (num > 0) {\n            int digit =\
    \ num % 10;\n            if (digit == 0) {\n                roman = \"x\" + roman;\n\
    \                num = num / 10;\n            }\n            else if (digit ==\
    \ 5) {\n                roman = \"v\" + roman;\n                num = num / 5;\n\
    \            }\n            else if (digit == 4) {\n                roman = \"\
    l\" + roman;\n                num = num / 4;\n            }\n            else\
    \ if (digit == 9) {\n                roman = \"x\" + roman;\n                num\
    \ = num / 9;\n            }\n            else if (digit == 8) {\n            \
    \    roman = \"c\" + roman;\n                num = num / 8;\n            }\n \
    \           else if (digit == 3) {\n                roman = \"m\" + roman;\n \
    \               num = num / 3;\n            }\n            else if (digit == 2)\
    \ {\n                roman = \"ii\" + roman;\n                num = num / 2;\n\
    \            }\n            else if (digit == 1) {\n                roman = \"\
    i\" + roman;\n                num = num / 1;\n            }\n        }\n     \
    \   return roman;", "        string[] roman = { \"\", \"i\", \"ii\", \"iii\",\
    \ \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\" };\n        string[] digits\
    \ = { \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" };\n        int[]\
    \ values = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n        int[] digitsValues = { 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n        int i = 0;\n        while (number > 0)\
    \ {\n            int digit = (int) (number % 10);\n            number /= 10;\n\
    \            if (digit > 0) {\n                digitsValues[i] = digit;\n    \
    \            i++;\n            }\n        }\n        for (int j = 0; j < i; j++)\
    \ {\n            int digit = digitsValues[j];\n            if (digit > 0) {\n\
    \                int value = values[digit];\n                if (value > 0) {\n\
    \                    string romanNum = roman[value];\n                    if (romanNum.Length\
    \ > 0) {\n                        digits[j] = romanNum;\n                    }\n\
    \                }\n            }\n        }\n        return String.Join(\"\"\
    , digits);", "        string[] roman = { \"\", \"i\", \"ii\", \"iii\", \"iv\"\
    , \"v\", \"vi\", \"vii\", \"viii\", \"ix\" };\n        string result = \"\";\n\
    \        while (number > 0) {\n            int digit = (int) (number % 10);\n\
    \            result = roman[digit] + result;\n            number /= 10;\n    \
    \    }\n        return result;", "        string result = \"\";\n        if (number\
    \ <= 0) {\n            throw new IllegalArgumentException(\"Invalid number\");\n\
    \        }\n        if (number > 1000) {\n            throw new IllegalArgumentException(\"\
    Invalid number\");\n        }\n        long n = number;\n        while (n > 0)\
    \ {\n            if (n % 10 == 1) {\n                result = \"i\" + result;\n\
    \            }\n            else if (n % 10 == 2) {\n                result =\
    \ \"ii\" + result;\n            }\n            else if (n % 10 == 3) {\n     \
    \           result = \"iii\" + result;\n            }\n            else if (n\
    \ % 10 == 4) {\n                result = \"iv\" + result;\n            }\n   \
    \         else if (n % 10 == 5) {\n                result = \"v\" + result;\n\
    \            }\n            else if (n % 10 == 6) {\n                result =\
    \ \"vi\" + result;\n            }\n            else if (n % 10 == 7) {\n     \
    \           result = \"vii\" + result;\n            }\n            else if (n\
    \ % 10 == 8) {\n                result = \"viii\" + result;\n            }\n \
    \           else if (n % 10 == 9) {\n                result = \"ix\" + result;\n\
    \            }\n            n = n / 10;\n        }\n        return result.ToLower();",
  "        string result = \"\";\n        if (number < 1 || number > 1000)\n     \
    \       throw new InvalidOperationException(\"Invalid number\");\n        for\
    \ (int i = 0; i < 4; i++) {\n            int num = number % 10;\n            if\
    \ (num == 0)\n                break;\n            if (i == 0)\n              \
    \  result += IntToRoman(num);\n            else\n                result += IntToRoman(num);\n\
    \            number /= 10;\n        }\n        return result.ToLower();", "  \
    \      if (number < 1 || number > 1000)\n            throw new ArgumentOutOfRangeException(\"\
    number\");\n        string roman = \"\";\n        long num = number;\n       \
    \ while (num > 0) {\n            long num2 = num % 10;\n            if (num2 ==\
    \ 1)\n                roman = \"i\" + roman;\n            else if (num2 == 2)\n\
    \                roman = \"ii\" + roman;\n            else if (num2 == 3)\n  \
    \              roman = \"iii\" + roman;\n            else if (num2 == 4)\n   \
    \             roman = \"iv\" + roman;\n            else if (num2 == 5)\n     \
    \           roman = \"v\" + roman;\n            else if (num2 == 6)\n        \
    \        roman = \"vi\" + roman;\n            else if (num2 == 7)\n          \
    \      roman = \"vii\" + roman;\n            else if (num2 == 8)\n           \
    \     roman = \"viii\" + roman;\n            else if (num2 == 9)\n           \
    \     roman = \"ix\" + roman;\n            else if (num2 == 10)\n            \
    \    roman = \"x\" + roman;\n            num = num / 10;\n        }\n        return\
    \ roman;", "        string result = \"\";\n        if (number < 1 || number >\
    \ 1000)\n            throw new Exception(\"Invalid number\");\n        for (int\
    \ i = 0; i < 4; i++) {\n            int num = number % 10;\n            if (num\
    \ == 0)\n                break;\n            if (num == 4 || num == 9) {\n   \
    \             result += \"cd\";\n                number -= 4;\n            }\n\
    \            else {\n                result += \"xc\";\n                number\
    \ -= 9;\n            }\n        }\n        return result;", "        string roman\
    \ = \"\";\n        long num = number;\n        while (num > 0) {\n           \
    \ int digit = (int) (num % 10);\n            switch (digit) {\n              \
    \  case 1:\n                    roman += \"i\";\n                    break;\n\
    \                case 2:\n                    roman += \"ii\";\n             \
    \       break;\n                case 3:\n                    roman += \"iii\"\
    ;\n                    break;\n                case 4:\n                    roman\
    \ += \"iv\";\n                    break;\n                case 5:\n          \
    \          roman += \"v\";\n                    break;\n                case 6:\n\
    \                    roman += \"vi\";\n                    break;\n          \
    \      case 7:\n                    roman += \"vii\";\n                    break;\n\
    \                case 8:\n                    roman += \"viii\";\n           \
    \         break;\n                case 9:\n                    roman += \"ix\"\
    ;\n                    break;\n                case 10:\n                    roman\
    \ += \"x\";\n                    break;\n                case 11:\n          \
    \          roman += \"xi\";\n                    break;\n                case\
    \ 12:\n                    roman += \"xii\";\n                    break;\n   \
    \             case 13:\n                    roman += \"xiii\";\n             \
    \       break;\n                case 14:\n                    roman += \"xiv\"\
    ;\n                    break;\n                case 15:\n                    roman\
    \ += \"xv\";\n                    break;\n                case 16:\n         \
    \           roman += \"xvi\";\n                    break;\n                case\
    \ 17:\n                    roman += \"xvii\";\n                    break;\n  \
    \              case 18:\n                    roman += \"xviii\";\n           \
    \         break;\n                case 19:\n                    roman += \"xix\"\
    ;\n                    break;\n                case 20:\n                    roman\
    \ += \"xx\";\n                    break;\n                case 21:\n         \
    \           roman += \"xxi\";\n                    break;\n                case\
    \ 22:\n                    roman += \"xxii\";\n                    break;\n  \
    \              case 23:\n                    roman += \"xxiii\";\n           \
    \         break;\n                case 24:\n                    roman += \"xxiv\"\
    ;\n                    break;\n                case 25:\n                    roman\
    \ += \"xxv\";\n                    break;\n                case 26:\n        \
    \            roman += \"xxvi\";\n                    break;\n                case\
    \ 27:\n                    roman += \"xxvii\";\n                    break;\n \
    \               case 28:\n                    roman += \"xxviii\";\n         \
    \           break", "        string roman = \"\";\n        long num = number;\n\
    \        while (num > 0) {\n            roman = roman + IntToRoman(num % 1000);\n\
    \            num /= 1000;\n        }\n        return roman;\n    }\n\n    // Given\
    \ a positive integer, obtain its roman numeral equivalent as a string,\n    //\
    \ and return it in lowercase.\n    // Restrictions: 1 <= num <= 1000\n    // Examples:\n\
    \    // >>> IntToRoman(19)\n    // \"xix\"\n    // >>> IntToRoman(152)\n    //\
    \ \"clii\"\n    // >>> IntToRoman(426)\n    // \"cdxxvi\"\n    public static string\
    \ IntToRoman(long number) {\n        string roman = \"\";\n        long num =\
    \ number;\n        while (num > 0) {\n            roman = roman + IntToRoman(num\
    \ % 1000);\n            num /= 1000;\n        }\n        return roman;\n    }\n\
    \n    // Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    \    // and return it in lowercase.\n    // Restrictions: 1 <= num <= 1000\n \
    \   // Examples:\n    // >>> IntToRoman(19)\n    // \"xix\"\n    // >>> IntToRoman(152)\n\
    \    // \"clii\"\n    // >>> IntToRoman(426)\n    // \"cdxxvi\"\n    public static\
    \ string IntToRoman(int number) {\n        string roman = \"\";\n        int num\
    \ = number;\n        while (num > 0) {\n            roman = roman + IntToRoman(num\
    \ % 1000);\n            num /= 1000;\n        }\n        return roman;\n    }\n\
    \n    // Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    \    // and return it in lowercase.\n    // Restrictions: 1 <= num <= 1000\n \
    \   // Examples:\n    // >>> IntToRoman(19)\n    // \"xix\"\n    // >>> IntToRoman(152)\n\
    \    // \"clii\"\n    // >>> IntToRoman(426)\n    // \"cdxxvi\"\n    public static\
    \ string IntToRoman(int number) {\n        string roman = \"\";\n", "        string\
    \ result = \"\";\n        long num = number;\n        while (num > 0) {\n    \
    \        long remainder = num % 10;\n            if (remainder == 4 || remainder\
    \ == 9) {\n                result = \"cd\" + result;\n            } else if (remainder\
    \ == 5) {\n                result = \"d\" + result;\n            } else if (remainder\
    \ == 6) {\n                result = \"m\" + result;\n            } else if (remainder\
    \ == 7) {\n                result = \"mc\" + result;\n            } else if (remainder\
    \ == 8) {\n                result = \"x\" + result;\n            } else if (remainder\
    \ == 9) {\n                result = \"ix\" + result;\n            } else {\n \
    \               result = String.valueOf(remainder) + result;\n            }\n\
    \            num = num / 10;\n        }\n        return result.ToLower();", " \
    \       string result = \"\";\n        long num = number;\n        while (num\
    \ > 0) {\n            long digit = num % 10;\n            if (digit == 4 || digit\
    \ == 9) {\n                result = \"cd\" + result;\n            }\n        \
    \    else if (digit == 5) {\n                result = \"d\" + result;\n      \
    \      }\n            else if (digit == 6) {\n                result = \"m\" +\
    \ result;\n            }\n            else if (digit == 7) {\n               \
    \ result = \"mc\" + result;\n            }\n            else if (digit == 8) {\n\
    \                result = \"x\" + result;\n            }\n            else if\
    \ (digit == 9) {\n                result = \"xc\" + result;\n            }\n \
    \           else {\n                result = String.valueOf(digit) + result;\n\
    \            }\n            num /= 10;\n        }\n        return result.ToLower();",
  "        if (number < 1 || number > 1000)\n            throw new Exception(\"Invalid\
    \ number\");\n\n        string result = \"\";\n        int[] digits = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] roman = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for (int i = 0; i < digits.Length;\
    \ i++) {\n            while (number >= digits[i]) {\n                number -=\
    \ digits[i];\n                result += roman[i];\n            }\n        }\n\
    \        return result.ToLower();", "        string roman = \"\";\n        if\
    \ (number < 0)\n            throw new Exception(\"Negative numbers are not supported\"\
    );\n        if (number > 1000)\n            throw new Exception(\"Numbers greater\
    \ than 1000 are not supported\");\n        if (number == 0)\n            return\
    \ \"\";\n        int[] digits = new int[4];\n        int[] romanDigits = new int[]\
    \ {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for (int i\
    \ = 0; i < 4; i++) {\n            digits[i] = number % romanDigits[i];\n     \
    \       number /= romanDigits[i];\n        }\n        for (int i = 0; i < 4; i++)\
    \ {\n            roman += romanDigits[digits[i]];\n        }\n        return roman.ToLower();",
  "        string result = \"\";\n        if (number < 1 || number > 1000)\n     \
    \       throw new Exception(\"Invalid number\");\n        long[] digits = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for (int i = 0; i\
    \ < digits.Length; i++) {\n            while (number >= digits[i]) {\n       \
    \         number -= digits[i];\n                result += \"m\";\n           \
    \ }\n        }\n        return result.ToLower();", "        if (number < 1 ||\
    \ number > 1000)\n            throw new Exception(\"Invalid number\");\n\n   \
    \     string roman = \"\";\n        long num = number;\n        while (num > 0)\
    \ {\n            if (num >= 1000) {\n                roman = roman + \"m\";\n\
    \                num -= 1000;\n            }\n            else if (num >= 900)\
    \ {\n                roman = roman + \"cm\";\n                num -= 900;\n  \
    \          }\n            else if (num >= 500) {\n                roman = roman\
    \ + \"d\";\n                num -= 500;\n            }\n            else if (num\
    \ >= 400) {\n                roman = roman + \"cd\";\n                num -= 400;\n\
    \            }\n            else if (num >= 100) {\n                roman = roman\
    \ + \"c\";\n                num -= 100;\n            }\n            else if (num\
    \ >= 90) {\n                roman = roman + \"xc\";\n                num -= 90;\n\
    \            }\n            else if (num >= 50) {\n                roman = roman\
    \ + \"l\";\n                num -= 50;\n            }\n            else if (num\
    \ >= 40) {\n                roman = roman + \"xl\";\n                num -= 40;\n\
    \            }\n            else if (num >= 10) {\n                roman = roman\
    \ + \"x\";\n                num -= 10;\n            }\n            else if (num\
    \ >= 9) {\n                roman = roman + \"ix\";\n                num -= 9;\n\
    \            }\n            else if (num >= 5) {\n                roman = roman\
    \ + \"v\";\n                num -= 5;\n            }\n            else if (num\
    \ >= 4) {\n                roman = roman + \"iv\";\n                num -= 4;\n\
    \            }\n            else if (num >= 1) {\n                roman = roman\
    \ + \"i\";\n                num -= 1;\n            }\n        }\n        return\
    \ roman;", "        string roman = \"\";\n        if (number < 1 || number > 1000)\n\
    \            throw new Exception(\"Invalid number\");\n        // Create a list\
    \ of the roman numerals\n        List<string> romanNumerals = new List<string>()\
    \ {\n            { \"m\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"", "        if (number < 1 || number >\
    \ 1000)\n            throw new Exception(\"Invalid number\");\n        string\
    \ result = \"\";\n        long num = number;\n        while (num > 0) {\n    \
    \        int digit = (int)(num % 10);\n            switch (digit) {\n        \
    \        case 1:\n                    result = result + \"i\";\n             \
    \       break;\n                case 2:\n                    result = result +\
    \ \"ii\";\n                    break;\n                case 3:\n             \
    \       result = result + \"iii\";\n                    break;\n             \
    \   case 4:\n                    result = result + \"iv\";\n                 \
    \   break;\n                case 5:\n                    result = result + \"\
    v\";\n                    break;\n                case 6:\n                  \
    \  result = result + \"vi\";\n                    break;\n                case\
    \ 7:\n                    result = result + \"vii\";\n                    break;\n\
    \                case 8:\n                    result = result + \"viii\";\n  \
    \                  break;\n                case 9:\n                    result\
    \ = result + \"ix\";\n                    break;\n                case 10:\n \
    \                   result = result + \"x\";\n                    break;\n   \
    \             case 11:\n                    result = result + \"xi\";\n      \
    \              break;\n                case 12:\n                    result =\
    \ result + \"xii\";\n                    break;\n                case 13:\n  \
    \                  result = result + \"xiii\";\n                    break;\n \
    \               case 14:\n                    result = result + \"xiv\";\n   \
    \                 break;\n                case 15:\n                    result\
    \ = result + \"xv\";\n                    break;\n                case 16:\n \
    \                   result = result + \"xvi\";\n                    break;\n \
    \               case 17:\n                    result = result + \"xvii\";\n  \
    \                  break;\n                case 18:\n                    result\
    \ = result + \"xviii\";\n                    break;\n                case 19:\n\
    \                    result = result + \"xix\";\n                    break;\n\
    \                case 20:\n                    result = result + \"xx\";\n   \
    \                 break;\n                case 30:\n                    result\
    \ = result + \"xxi\";\n                    break;\n                case 40:\n\
    \                    result = result + \"xxx\";\n                    break;\n\
    \                case 50:\n                    result = result + \"xxxi\";\n \
    \                   break;\n                case 60:\n                    result\
    \ = result + \"xxxx\";\n                    break;\n                case 70",
  "        string roman = \"\";\n        if (number == 0)\n            return \"\"\
    ;\n        if (number < 0)\n            throw new ArgumentOutOfRangeException(\"\
    number\");\n        if (number > 1000)\n            throw new ArgumentOutOfRangeException(\"\
    number\");\n        int[] roman_num = {1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1};\n        int[] roman_num_inv = {1, 4, 5, 9, 10, 40, 50, 90, 100,\
    \ 400, 500, 900};\n        for (int i = 0; i < roman_num.Length; i++) {\n    \
    \        while (number >= roman_num[i]) {\n                number -= roman_num[i];\n\
    \                roman += roman_num_inv[i];\n            }\n        }\n      \
    \  return roman;", "        string roman = \"\";\n        long num = number;\n\
    \        while (num > 0) {\n            roman = roman + IntToRoman(num % 1000);\n\
    \            num /= 1000;\n        }\n        return roman;\n    }\n\n    // Given\
    \ a positive integer, obtain its roman numeral equivalent as a string,\n    //\
    \ and return it in lowercase.\n    // Restrictions: 1 <= num <= 1000\n    // Examples:\n\
    \    // >>> IntToRoman(19)\n    // (\"xix\")\n    // >>> IntToRoman(152)\n   \
    \ // (\"clii\")\n    // >>> IntToRoman(426)\n    // (\"cdxxvi\")\n    public static\
    \ string IntToRoman(long number) {\n        string roman = \"\";\n        long\
    \ num = number;\n        while (num > 0) {\n            roman = roman + IntToRoman(num\
    \ % 1000);\n            num /= 1000;\n        }\n        return roman;\n    }\n\
    \n    // Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    \    // and return it in lowercase.\n    // Restrictions: 1 <= num <= 1000\n \
    \   // Examples:\n    // >>> IntToRoman(19)\n    // (\"xix\")\n    // >>> IntToRoman(152)\n\
    \    // (\"clii\")\n    // >>> IntToRoman(426)\n    // (\"cdxxvi\")\n    public\
    \ static string IntToRoman(long number) {\n        string roman = \"\";\n    \
    \    long num = number;\n        while (num > 0) {\n            roman = roman\
    \ + IntToRoman(num % 1000);\n            num /= 1000;\n        }\n        return\
    \ roman;\n    }\n\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToRoman(19)\n    // (\"xix\")\n\
    \    // >>> IntToRoman(152)\n    // (\"clii\")\n    // >>> IntToRoman(426)\n \
    \   // (\"cdxxvi\")\n    public static string IntToRoman(long number) {\n    \
    \    string roman = \"\";\n", "        string[] roman = { \"\", \"i\", \"ii\"\
    , \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\" };\n        string[]\
    \ num = { \"\", \"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\",\
    \ \"dccc\" };\n        string result = \"\";\n        for (int i = 0; i < roman.length;\
    \ i++) {\n            while (number >= num[i].length()) {\n                number\
    \ -= num[i].length();\n                result += roman[i];\n            }\n  \
    \      }\n        return result;", "        if (number < 1 || number > 1000)\n\
    \            throw new Exception(\"Invalid number\");\n        string roman =\
    \ \"\";\n        int[] roman_nums = {1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1};\n        int[] roman_num_count = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0};\n        for (int i = 0; i < roman_nums.Length; i++) {\n         \
    \   while (number >= roman_nums[i]) {\n                number -= roman_nums[i];\n\
    \                roman_num_count[i]++;\n            }\n        }\n        for\
    \ (int i = roman_nums.Length - 1; i >= 0; i--) {\n            for (int j = 0;\
    \ j < roman_num_count[i]; j++)\n                roman += roman_nums[i];\n    \
    \    }\n        return roman.ToLower();", "        string roman = \"\";\n    \
    \    if (number < 1 || number > 1000)\n            throw new Exception(\"Invalid\
    \ number\");\n        for (int i = 0; i < 4; i++) {\n            int num = number\
    \ % 10;\n            if (num == 0)\n                break;\n            if (num\
    \ == 1)\n                roman += \"i\";\n            else if (num == 2)\n   \
    \             roman += \"ii\";\n            else if (num == 3)\n             \
    \   roman += \"iii\";\n            else if (num == 4)\n                roman +=\
    \ \"iv\";\n            else if (num == 5)\n                roman += \"v\";\n \
    \           else if (num == 6)\n                roman += \"vi\";\n           \
    \ else if (num == 7)\n                roman += \"vii\";\n            else if (num\
    \ == 8)\n                roman += \"viii\";\n            else if (num == 9)\n\
    \                roman += \"ix\";\n            number /= 10;\n        }\n    \
    \    return roman;", "        string roman = \"\";\n        long num = number;\n\
    \        while (num > 0) {\n            int digit = (int)(num % 10);\n       \
    \     switch (digit) {\n                case 1:\n                    roman = roman\
    \ + \"i\";\n                    break;\n                case 2:\n            \
    \        roman = roman + \"ii\";\n                    break;\n               \
    \ case 3:\n                    roman = roman + \"iii\";\n                    break;\n\
    \                case 4:\n                    roman = roman + \"iv\";\n      \
    \              break;\n                case 5:\n                    roman = roman\
    \ + \"v\";\n                    break;\n                case 6:\n            \
    \        roman = roman + \"vi\";\n                    break;\n               \
    \ case 7:\n                    roman = roman + \"vii\";\n                    break;\n\
    \                case 8:\n                    roman = roman + \"viii\";\n    \
    \                break;\n                case 9:\n                    roman =\
    \ roman + \"ix\";\n                    break;\n                case 10:\n    \
    \                roman = roman + \"x\";\n                    break;\n        \
    \        case 11:\n                    roman = roman + \"xi\";\n             \
    \       break;\n                case 12:\n                    roman = roman +\
    \ \"xii\";\n                    break;\n                case 13:\n           \
    \         roman = roman + \"xiii\";\n                    break;\n            \
    \    case 14:\n                    roman = roman + \"xiv\";\n                \
    \    break;\n                case 15:\n                    roman = roman + \"\
    xv\";\n                    break;\n                case 16:\n                \
    \    roman = roman + \"xvi\";\n                    break;\n                case\
    \ 17:\n                    roman = roman + \"xvii\";\n                    break;\n\
    \                case 18:\n                    roman = roman + \"xviii\";\n  \
    \                  break;\n                case 19:\n                    roman\
    \ = roman + \"xix\";\n                    break;\n                case 20:\n \
    \                   roman = roman + \"xx\";\n                    break;\n    \
    \            case 21:\n                    roman = roman + \"xxi\";\n        \
    \            break;\n                case 22:\n                    roman = roman\
    \ + \"xxii\";\n                    break;\n                case 23:\n        \
    \            roman = roman + \"xxiii\";\n                    break;\n        \
    \        case 24:\n                    roman = roman + \"xxiv\";\n           \
    \         ", "        string roman = \"\";\n        long num = number;\n     \
    \   while (num > 0) {\n            long digit = num % 10;\n            switch\
    \ (digit) {\n                case 1:\n                    roman = roman + \"i\"\
    ;\n                    break;\n                case 2:\n                    roman\
    \ = roman + \"ii\";\n                    break;\n                case 3:\n   \
    \                 roman = roman + \"iii\";\n                    break;\n     \
    \           case 4:\n                    roman = roman + \"iv\";\n           \
    \         break;\n                case 5:\n                    roman = roman +\
    \ \"v\";\n                    break;\n                case 6:\n              \
    \      roman = roman + \"vi\";\n                    break;\n                case\
    \ 7:\n                    roman = roman + \"vii\";\n                    break;\n\
    \                case 8:\n                    roman = roman + \"viii\";\n    \
    \                break;\n                case 9:\n                    roman =\
    \ roman + \"ix\";\n                    break;\n                case 10:\n    \
    \                roman = roman + \"x\";\n                    break;\n        \
    \        case 11:\n                    roman = roman + \"xi\";\n             \
    \       break;\n                case 12:\n                    roman = roman +\
    \ \"xii\";\n                    break;\n                case 13:\n           \
    \         roman = roman + \"xiii\";\n                    break;\n            \
    \    case 14:\n                    roman = roman + \"xiv\";\n                \
    \    break;\n                case 15:\n                    roman = roman + \"\
    xv\";\n                    break;\n                case 16:\n                \
    \    roman = roman + \"xvi\";\n                    break;\n                case\
    \ 17:\n                    roman = roman + \"xvii\";\n                    break;\n\
    \                case 18:\n                    roman = roman + \"xviii\";\n  \
    \                  break;\n                case 19:\n                    roman\
    \ = roman + \"xix\";\n                    break;\n                case 20:\n \
    \                   roman = roman + \"xx\";\n                    break;\n    \
    \            case 21:\n                    roman = roman + \"xxi\";\n        \
    \            break;\n                case 22:\n                    roman = roman\
    \ + \"xxii\";\n                    break;\n                case 23:\n        \
    \            roman = roman + \"xxiii\";\n                    break;\n        \
    \        case 24:\n                    roman = roman + \"xxiv\";\n           \
    \         break;\n", "        if (number < 1 || number > 1000)\n            throw\
    \ new Exception(\"Invalid number\");\n\n        string result = \"\";\n      \
    \  long num = number;\n        while (num > 0) {\n            int digit = (int)(num\
    \ % 10);\n            if (digit == 1)\n                result = \"i\" + result;\n\
    \            else if (digit == 2)\n                result = \"ii\" + result;\n\
    \            else if (digit == 3)\n                result = \"iii\" + result;\n\
    \            else if (digit == 4)\n                result = \"iv\" + result;\n\
    \            else if (digit == 5)\n                result = \"v\" + result;\n\
    \            else if (digit == 6)\n                result = \"vi\" + result;\n\
    \            else if (digit == 7)\n                result = \"vii\" + result;\n\
    \            else if (digit == 8)\n                result = \"viii\" + result;\n\
    \            else if (digit == 9)\n                result = \"ix\" + result;\n\
    \            else if (digit == 10)\n                result = \"x\" + result;\n\
    \            else if (digit == 11)\n                result = \"xi\" + result;\n\
    \            else if (digit == 12)\n                result = \"xii\" + result;\n\
    \            else if (digit == 13)\n                result = \"xiii\" + result;\n\
    \            else if (digit == 14)\n                result = \"xiv\" + result;\n\
    \            else if (digit == 15)\n                result = \"xv\" + result;\n\
    \            else if (digit == 16)\n                result = \"xvi\" + result;\n\
    \            else if (digit == 17)\n                result = \"xvii\" + result;\n\
    \            else if (digit == 18)\n                result = \"xviii\" + result;\n\
    \            else if (digit == 19)\n                result = \"xix\" + result;\n\
    \            else if (digit == 20)\n                result = \"xx\" + result;\n\
    \            else if (digit == 21)\n                result = \"xxi\" + result;\n\
    \            else if (digit == 22)\n                result = \"xxii\" + result;\n\
    \            else if (digit == 23)\n                result = \"xxiii\" + result;\n\
    \            else if (digit", "        string result = \"\";\n        if (number\
    \ < 0) {\n            throw new ArgumentOutOfRangeException(\"number\");\n   \
    \     }\n        if (number > 1000) {\n            throw new ArgumentOutOfRangeException(\"\
    number\");\n        }\n        if (number == 0) {\n            return \"\";\n\
    \        }\n        long[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1};\n        for (int i = 0; i < values.Length; i++) {\n          \
    \  while (number >= values[i]) {\n                number -= values[i];\n     \
    \           result += values[i];\n            }\n        }\n        return result;",
  "        if (number < 1 || number > 1000)\n            throw new Exception(\"Invalid\
    \ number\");\n        string roman = \"\";\n        long num = number;\n     \
    \   while (num > 0) {\n            int digit = num % 10;\n            switch (digit)\
    \ {\n                case 1:\n                    roman = \"i\" + roman;\n   \
    \                 break;\n                case 2:\n                    roman =\
    \ \"ii\" + roman;\n                    break;\n                case 3:\n     \
    \               roman = \"iii\" + roman;\n                    break;\n       \
    \         case 4:\n                    roman = \"iv\" + roman;\n             \
    \       break;\n                case 5:\n                    roman = \"v\" + roman;\n\
    \                    break;\n                case 6:\n                    roman\
    \ = \"vi\" + roman;\n                    break;\n                case 7:\n   \
    \                 roman = \"vii\" + roman;\n                    break;\n     \
    \           case 8:\n                    roman = \"viii\" + roman;\n         \
    \           break;\n                case 9:\n                    roman = \"ix\"\
    \ + roman;\n                    break;\n                case 10:\n           \
    \         roman = \"x\" + roman;\n                    break;\n               \
    \ case 11:\n                    roman = \"xi\" + roman;\n                    break;\n\
    \                case 12:\n                    roman = \"xii\" + roman;\n    \
    \                break;\n                case 13:\n                    roman =\
    \ \"xiii\" + roman;\n                    break;\n                case 14:\n  \
    \                  roman = \"xiv\" + roman;\n                    break;\n    \
    \            case 15:\n                    roman = \"xv\" + roman;\n         \
    \           break;\n                case 16:\n                    roman = \"xvi\"\
    \ + roman;\n                    break;\n                case 17:\n           \
    \         roman = \"xvii\" + roman;\n                    break;\n            \
    \    case 18:\n                    roman = \"xviii\" + roman;\n              \
    \      break;\n                case 19:\n                    roman = \"xix\" +\
    \ roman;\n                    break;\n                case 20:\n             \
    \       roman = \"xx\" + roman;\n                    break;\n                case\
    \ 21:\n                    roman = \"xxi\" + roman;\n                    break;\n\
    \                case 22:\n                    roman = \"xxii\" + roman;\n   \
    \                 ", "        string[] roman = new string[] { \"\", \"i\", \"\
    ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\" };\n        string\
    \ result = \"\";\n        for (int i = 0; i < roman.length; i++) {\n         \
    \   while (number >= roman[i].length()) {\n                number -= roman[i].length();\n\
    \                result += roman[i];\n            }\n        }\n        return\
    \ result;", "        string result = \"\";\n        long num = number;\n     \
    \   while (num > 0) {\n            long digit = num % 10;\n            if (digit\
    \ == 1) {\n                result = result + \"i\";\n            }\n         \
    \   else if (digit == 2) {\n                result = result + \"ii\";\n      \
    \      }\n            else if (digit == 3) {\n                result = result\
    \ + \"iii\";\n            }\n            else if (digit == 4) {\n            \
    \    result = result + \"iv\";\n            }\n            else if (digit == 5)\
    \ {\n                result = result + \"v\";\n            }\n            else\
    \ if (digit == 6) {\n                result = result + \"vi\";\n            }\n\
    \            else if (digit == 7) {\n                result = result + \"vii\"\
    ;\n            }\n            else if (digit == 8) {\n                result =\
    \ result + \"viii\";\n            }\n            else if (digit == 9) {\n    \
    \            result = result + \"ix\";\n            }\n            else if (digit\
    \ == 10) {\n                result = result + \"x\";\n            }\n        \
    \    else if (digit == 11) {\n                result = result + \"xi\";\n    \
    \        }\n            else if (digit == 12) {\n                result = result\
    \ + \"xii\";\n            }\n            else if (digit == 13) {\n           \
    \     result = result + \"xiii\";\n            }\n            else if (digit ==\
    \ 14) {\n                result = result + \"xiv\";\n            }\n         \
    \   else if (digit == 15) {\n                result = result + \"xv\";\n     \
    \       }\n            else if (digit == 16) {\n                result = result\
    \ + \"xvi\";\n            }\n            else if (digit == 17) {\n           \
    \     result = result + \"xvii\";\n            }\n            else if (digit ==\
    \ 18) {\n                result = result + \"xviii\";\n            }\n       \
    \     else if (digit == 19) {\n                result = result + \"xix\";\n  \
    \          }\n            else if (digit == 20) {\n                result = result\
    \ + \"xx\";\n            }\n            else if (digit == 21) {\n            \
    \    result = result + \"xxi\";\n            }\n            else if (digit ==",
  "        string roman = \"\";\n        if (number < 1 || number > 1000)\n      \
    \      throw new Exception(\"Invalid input\");\n        for (int i = 0; i < 4;\
    \ i++) {\n            int num = number % 10;\n            if (num == 9) {\n  \
    \              roman += \"ix\";\n                number -= 9;\n            }\n\
    \            else if (num == 4) {\n                roman += \"iv\";\n        \
    \        number -= 4;\n            }\n            else if (num == 5) {\n     \
    \           roman += \"v\";\n                number -= 5;\n            }\n   \
    \         else if (num == 1) {\n                roman += \"i\";\n            \
    \    number -= 1;\n            }\n            else if (num == 2) {\n         \
    \       roman += \"ii\";\n                number -= 2;\n            }\n      \
    \      else if (num == 3) {\n                roman += \"iii\";\n             \
    \   number -= 3;\n            }\n            else if (num == 6) {\n          \
    \      roman += \"vi\";\n                number -= 6;\n            }\n       \
    \     else if (num == 7) {\n                roman += \"vii\";\n              \
    \  number -= 7;\n            }\n            else if (num == 8) {\n           \
    \     roman += \"viii\";\n                number -= 8;\n            }\n      \
    \      else if (num == 0) {\n                roman += \"x\";\n               \
    \ number -= 0;\n            }\n        }\n        return roman;", "        string\
    \ roman = \"\";\n        long num = number;\n        while (num > 0) {\n     \
    \       long digit = num % 10;\n            switch (digit) {\n               \
    \ case 1:\n                    roman = \"i\" + roman;\n                    break;\n\
    \                case 2:\n                    roman = \"ii\" + roman;\n      \
    \              break;\n                case 3:\n                    roman = \"\
    iii\" + roman;\n                    break;\n                case 4:\n        \
    \            roman = \"iv\" + roman;\n                    break;\n           \
    \     case 5:\n                    roman = \"v\" + roman;\n                  \
    \  break;\n                case 6:\n                    roman = \"vi\" + roman;\n\
    \                    break;\n                case 7:\n                    roman\
    \ = \"vii\" + roman;\n                    break;\n                case 8:\n  \
    \                  roman = \"viii\" + roman;\n                    break;\n   \
    \             case 9:\n                    roman = \"ix\" + roman;\n         \
    \           break;\n                case 10:\n                    roman = \"x\"\
    \ + roman;\n                    break;\n                case 11:\n           \
    \         roman = \"xi\" + roman;\n                    break;\n              \
    \  case 12:\n                    roman = \"xii\" + roman;\n                  \
    \  break;\n                case 13:\n                    roman = \"xiii\" + roman;\n\
    \                    break;\n                case 14:\n                    roman\
    \ = \"xiv\" + roman;\n                    break;\n                case 15:\n \
    \                   roman = \"xv\" + roman;\n                    break;\n    \
    \            case 16:\n                    roman = \"xvi\" + roman;\n        \
    \            break;\n                case 17:\n                    roman = \"\
    xvii\" + roman;\n                    break;\n                case 18:\n      \
    \              roman = \"xviii\" + roman;\n                    break;\n      \
    \          case 19:\n                    roman = \"xix\" + roman;\n          \
    \          break;\n                case 20:\n                    roman = \"xx\"\
    \ + roman;\n                    break;\n                case 21:\n           \
    \         roman = \"xxi\" + roman;\n                    break;\n             \
    \   case 22:\n                    roman = \"xxii\" + roman;\n                \
    \    break;\n                case 23:\n                    roman = \"xxiii\" +\
    \ roman;\n                    ", "        string result = \"\";\n        if (number\
    \ < 0) {\n            throw new ArgumentOutOfRangeException(\"number\");\n   \
    \     }\n        if (number > 1000) {\n            throw new ArgumentOutOfRangeException(\"\
    number\");\n        }\n        if (number == 0) {\n            return \"\";\n\
    \        }\n        long[] roman = {1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1};\n        for (int i = 0; i < roman.length; i++) {\n           \
    \ while (number >= roman[i]) {\n                number -= roman[i];\n        \
    \        result += roman[i];\n            }\n        }\n        return result.ToLower();",
  "        string[] roman = { \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\"\
    , \"vii\", \"viii\", \"ix\" };\n        string[] num = { \"\", \"\", \"c\", \"\
    cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\" };\n        string result\
    \ = \"\";\n        for (int i = 0; i < roman.length; i++) {\n            while\
    \ (number >= num[i].length()) {\n                number -= num[i].length();\n\
    \                result += roman[i];\n            }\n        }\n        return\
    \ result;", "        string roman = \"\";\n        int[] roman_nums = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] roman_nums_rev =\
    \ {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900};\n        int roman_num = 0;\n\
    \        int i = 0;\n        while (number > 0) {\n            roman_num = number\
    \ % roman_nums[i];\n            if (roman_num > 0) {\n                roman +=\
    \ roman_nums_rev[i];\n                number -= roman_num;\n            }\n  \
    \          i++;\n        }\n        return roman;", "        // Create a dictionary\
    \ of roman numerals\n        Hashtable<long, string> roman = new Hashtable<long,\
    \ string>();\n        roman.Add(1000, \"m\");\n        roman.Add(900, \"cm\");\n\
    \        roman.Add(500, \"d\");\n        roman.Add(400, \"cd\");\n        roman.Add(100,\
    \ \"c\");\n        roman.Add(90, \"xc\");\n        roman.Add(50, \"l\");\n   \
    \     roman.Add(40, \"xl\");\n        roman.Add(10, \"x\");\n        roman.Add(9,\
    \ \"ix\");\n        roman.Add(5, \"v\");\n        roman.Add(4, \"iv\");\n    \
    \    roman.Add(1, \"i\");\n\n        // Create a string builder to hold the result\n\
    \        StringBuilder result = new StringBuilder();\n\n        // Iterate through\
    \ the number, adding the roman numeral\n        // for each value to the result\n\
    \        while (number > 0) {\n            long value = number % 10;\n       \
    \     number /= 10;\n            result.Append(roman[value]);\n        }\n\n \
    \       // Return the result\n        return result.ToString();", "        string\
    \ result = \"\";\n        long num = number;\n        while (num > 0) {\n    \
    \        long digit = num % 10;\n            if (digit == 4 || digit == 9) {\n\
    \                result = \" \" + result;\n            }\n            if (digit\
    \ == 4) {\n                result = \" \" + result;\n            }\n         \
    \   if (digit == 9) {\n                result = \" \" + result;\n            }\n\
    \            num = num / 10;\n        }\n        return result.ToLower();", " \
    \       if (number < 1 || number > 1000)\n            throw new InvalidOperationException(\"\
    number must be in range [1, 1000]\");\n\n        string roman = \"\";\n      \
    \  int[] roman_numerals = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4,\
    \ 1};\n        int[] roman_numerals_rev = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400,\
    \ 500, 900};\n        int[] roman_numerals_rev_2 = {1, 10, 100, 1000};\n     \
    \   int[] roman_numerals_rev_3 = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4};\n        int[] roman_numerals_rev_4 = {1000, 900, 500, 400, 100, 90,\
    \ 50, 40, 10, 9, 5, 4, 1};\n        int[] roman_numerals_rev_5 = {1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] roman_numerals_rev_6 =\
    \ {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] roman_numerals_rev_7\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] roman_numerals_rev_8\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] roman_numerals_rev_9\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] roman_numerals_rev_10\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] roman_numerals_rev_11\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4,", "        if (number\
    \ < 1 || number > 1000)\n            throw new InvalidOperationException(\"Argument\
    \ must be between 1 and 1000\");\n\n        string roman = \"\";\n        int[]\
    \ digits = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[]\
    \ nums = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for\
    \ (int i = 0; i < digits.Length; i++) {\n            while (number >= digits[i])\
    \ {\n                number -= digits[i];\n                roman += nums[i];\n\
    \            }\n        }\n        return roman;", "        // Create a dictionary\
    \ of roman numerals\n        var romanNumerals = new Dictionary<long, string>();\n\
    \        romanNumerals[1000] = \"m\";\n        romanNumerals[900] = \"cm\";\n\
    \        romanNumerals[500] = \"d\";\n        romanNumerals[400] = \"cd\";\n \
    \       romanNumerals[100] = \"c\";\n        romanNumerals[90] = \"xc\";\n   \
    \     romanNumerals[50] = \"l\";\n        romanNumerals[40] = \"xl\";\n      \
    \  romanNumerals[10] = \"x\";\n        romanNumerals[9] = \"ix\";\n        romanNumerals[5]\
    \ = \"v\";\n        romanNumerals[4] = \"iv\";\n        romanNumerals[1] = \"\
    i\";\n\n        // Create a string builder to hold the result\n        var result\
    \ = new StringBuilder();\n\n        // Iterate through the number, and build the\
    \ roman numeral string\n        for (var i = 0; i < number; i++) {\n         \
    \   // If the current number is in the dictionary, append the roman numeral\n\
    \            if (romanNumerals.ContainsKey(number - i)) {\n                result.Append(romanNumerals[number\
    \ - i]);\n            }\n            // If the current number is not in the dictionary,\
    \ append the number\n            else {\n                result.Append(number\
    \ - i);\n            }\n        }\n\n        // Return the string\n        return\
    \ result.ToString();", "        string roman = \"\";\n        long num = number;\n\
    \        while (num > 0) {\n            roman = roman + IntToRoman(num % 10);\n\
    \            num /= 10;\n        }\n        return roman;\n    }\n\n    // Convert\
    \ a number to its roman numeral equivalent.\n    // Return the roman numeral as\
    \ a string.\n    //\n    // Examples:\n    // >>> RomanToInt(\"xix\")\n    //\
    \ 19\n    // >>> RomanToInt(\"clii\")\n    // 152\n    // >>> RomanToInt(\"cdxxvi\"\
    )\n    // 426\n    // >>> RomanToInt(\"m\")\n    // 1000\n    // >>> RomanToInt(\"\
    MMMCMXCIX\")\n    // 1999\n    // >>> RomanToInt(\"MMMCMXCIX\")\n    // 1999\n\
    \    // >>> RomanToInt(\"MMMCMXCIX\")\n    // 1999\n    // >>> RomanToInt(\"MMMCMXCIX\"\
    )\n    // 1999\n    // >>> RomanToInt(\"MMMCMXCIX\")\n    // 1999\n    // >>>\
    \ RomanToInt(\"MMMCMXCIX\")\n    // 1999\n    // >>> RomanToInt(\"MMMCMXCIX\"\
    )\n    // 1999\n    // >>> RomanToInt(\"MMMCMXCIX\")\n    // 1999\n    // >>>\
    \ RomanToInt(\"MMMCMXCIX\")\n    // 1999\n    // >>> RomanToInt(\"MMMCMXCIX\"\
    )\n    // 1999\n    // >>> RomanToInt(\"MMMCMXCIX\")\n    // 1999\n    // >>>\
    \ RomanToInt(\"MMMCMXCIX\")\n    // 1999\n    // >>> RomanToInt(\"MMMCMXCIX\"\
    )\n    // 1999\n    // >>> RomanToInt(\"MMMCMXCIX\")\n    // 1999\n    // >>>\
    \ RomanToInt(\"MMMCMXCIX\")\n    // 1999\n    // >>> RomanToInt(\"MMMCMXCIX\"\
    )\n    // 1999\n    // >>> RomanToInt(\"MMMCMXCIX\")\n    // 1999\n    // >>>\
    \ RomanToInt(\"MMMCMXCIX\")\n    // 1999\n    // >>> RomanToInt(\"MMMCMXCIX\"\
    )\n    // 1999\n    // >>> RomanToInt(\"MMMCMXCIX\")\n    // 1999", "        if\
    \ (number < 1 || number > 1000)\n            throw new Exception(\"Invalid number\"\
    );\n\n        string roman = \"\";\n        int[] digits = {1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] nums = {1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for (int i = 0; i < digits.Length;\
    \ i++) {\n            while (number >= nums[i]) {\n                number -= nums[i];\n\
    \                roman += \"m\";\n            }\n        }\n        return roman;",
  "        string result = \"\";\n        if (number < 0) {\n            throw new\
    \ ArgumentOutOfRangeException(\"number\");\n        }\n        if (number > 1000)\
    \ {\n            throw new ArgumentOutOfRangeException(\"number\");\n        }\n\
    \        for (int i = 0; i < 4; i++) {\n            int num = number % 10;\n \
    \           if (num == 0) {\n                break;\n            }\n         \
    \   if (num == 1) {\n                result += \"i\";\n            }\n       \
    \     else if (num == 2) {\n                result += \"ii\";\n            }\n\
    \            else if (num == 3) {\n                result += \"iii\";\n      \
    \      }\n            else if (num == 4) {\n                result += \"iv\";\n\
    \            }\n            else if (num == 5) {\n                result += \"\
    v\";\n            }\n            else if (num == 6) {\n                result\
    \ += \"vi\";\n            }\n            else if (num == 7) {\n              \
    \  result += \"vii\";\n            }\n            else if (num == 8) {\n     \
    \           result += \"viii\";\n            }\n            else if (num == 9)\
    \ {\n                result += \"ix\";\n            }\n            number /= 10;\n\
    \        }\n        return result.ToLower();", "        string result = \"\";\n\
    \        long num = number;\n        while (num > 0) {\n            int digit\
    \ = (int) (num % 10);\n            switch (digit) {\n                case 1:\n\
    \                    result = \"i\" + result;\n                    break;\n  \
    \              case 2:\n                    result = \"ii\" + result;\n      \
    \              break;\n                case 3:\n                    result = \"\
    iii\" + result;\n                    break;\n                case 4:\n       \
    \             result = \"iv\" + result;\n                    break;\n        \
    \        case 5:\n                    result = \"v\" + result;\n             \
    \       break;\n                case 6:\n                    result = \"vi\" +\
    \ result;\n                    break;\n                case 7:\n             \
    \       result = \"vii\" + result;\n                    break;\n             \
    \   case 8:\n                    result = \"viii\" + result;\n               \
    \     break;\n                case 9:\n                    result = \"ix\" + result;\n\
    \                    break;\n                case 10:\n                    result\
    \ = \"x\" + result;\n                    break;\n                case 11:\n  \
    \                  result = \"xi\" + result;\n                    break;\n   \
    \             case 12:\n                    result = \"xii\" + result;\n     \
    \               break;\n                case 13:\n                    result =\
    \ \"xiii\" + result;\n                    break;\n                case 14:\n \
    \                   result = \"xiv\" + result;\n                    break;\n \
    \               case 15:\n                    result = \"xv\" + result;\n    \
    \                break;\n                case 16:\n                    result\
    \ = \"xvi\" + result;\n                    break;\n                case 17:\n\
    \                    result = \"xvii\" + result;\n                    break;\n\
    \                case 18:\n                    result = \"xviii\" + result;\n\
    \                    break;\n                case 19:\n                    result\
    \ = \"xix\" + result;\n                    break;\n                case 20:\n\
    \                    result = \"xx\" + result;\n                    break;\n \
    \               case 21:\n                    result = \"xxi\" + result;\n   \
    \                 break;\n                case 22:\n                    result\
    \ = \"xxii\" + result;\n                    break;\n                case 23:\n\
    \                    result = \"xxiii\" + result;\n                    break;\n\
    \                case 24:\n                    result = \"xxiv\" + result;\n \
    \                   ", "        if (number < 1 || number > 1000)\n           \
    \ throw new Exception(\"Invalid number\");\n        string roman = \"\";\n   \
    \     int[] digits = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \        int[] roman_digits = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1};\n        for (int i = 0; i < digits.Length; i++) {\n            while\
    \ (number >= digits[i]) {\n                number -= digits[i];\n            \
    \    roman += roman_digits[i];\n            }\n        }\n        return roman;",
  "        string[] roman = new string[] { \"\", \"i\", \"ii\", \"iii\", \"iv\", \"\
    v\", \"vi\", \"vii\", \"viii\", \"ix\" };\n        string result = \"\";\n   \
    \     int i = 0;\n        while (number > 0) {\n            if (number >= 1000)\
    \ {\n                result = roman[i] + result;\n                number -= 1000;\n\
    \            }\n            else if (number >= 900) {\n                result\
    \ = roman[i] + result;\n                number -= 900;\n            }\n      \
    \      else if (number >= 500) {\n                result = roman[i] + result;\n\
    \                number -= 500;\n            }\n            else if (number >=\
    \ 400) {\n                result = roman[i] + result;\n                number\
    \ -= 400;\n            }\n            else if (number >= 100) {\n            \
    \    result = roman[i] + result;\n                number -= 100;\n           \
    \ }\n            else if (number >= 90) {\n                result = roman[i] +\
    \ result;\n                number -= 90;\n            }\n            else if (number\
    \ >= 50) {\n                result = roman[i] + result;\n                number\
    \ -= 50;\n            }\n            else if (number >= 40) {\n              \
    \  result = roman[i] + result;\n                number -= 40;\n            }\n\
    \            else if (number >= 10) {\n                result = roman[i] + result;\n\
    \                number -= 10;\n            }\n            else if (number >=\
    \ 9) {\n                result = roman[i] + result;\n                number -=\
    \ 9;\n            }\n            else if (number >= 5) {\n                result\
    \ = roman[i] + result;\n                number -= 5;\n            }\n        \
    \    else if (number >= 4) {\n                result = roman[i] + result;\n  \
    \              number -= 4;\n            }\n            else if (number >= 1)\
    \ {\n                result = roman[i] + result;\n                number -= 1;\n\
    \            }\n            i++;\n        }\n        return result.ToLower();",
  "        string result = \"\";\n        if (number < 1 || number > 1000)\n     \
    \       throw new InvalidOperationException(\"Invalid number\");\n        int[]\
    \ roman = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for\
    \ (int i = 0; i < roman.length; i++) {\n            while (number >= roman[i])\
    \ {\n                number -= roman[i];\n                result += roman[i];\n\
    \            }\n        }\n        return result.ToLower();", "        if (number\
    \ < 1 || number > 1000)\n            throw new Exception(\"Invalid number\");\n\
    \        string roman = \"\";\n        int[] digits = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n        for (int i = 0; i < digits.Length; i++)\
    \ {\n            while (number >= digits[i]) {\n                number -= digits[i];\n\
    \                roman += \"m\";\n            }\n        }\n        return roman;",
  "        string roman = \"\";\n        long num = number;\n        while (num >\
    \ 0) {\n            int digit = num % 10;\n            if (digit == 1 || digit\
    \ == 5) {\n                roman = \"x\" + roman;\n            }\n           \
    \ else if (digit == 2 || digit == 3) {\n                roman = \"c\" + roman;\n\
    \            }\n            else if (digit == 4 || digit == 9) {\n           \
    \     roman = \"cd\" + roman;\n            }\n            else if (digit == 6\
    \ || digit == 7) {\n                roman = \"d\" + roman;\n            }\n  \
    \          else if (digit == 8 || digit == 9) {\n                roman = \"m\"\
    \ + roman;\n            }\n            num = num / 10;\n        }\n        return\
    \ roman;", "        if (number < 1 || number > 1000)\n            throw new InvalidOperationException(\"\
    number must be in the range [1, 1000]\");\n        string result = \"\";\n   \
    \     long num = number;\n        while (num > 0) {\n            long digit =\
    \ num % 10;\n            if (digit == 1)\n                result = result + \"\
    x\";\n            else if (digit == 2)\n                result = result + \"c\"\
    ;\n            else if (digit == 3)\n                result = result + \"m\";\n\
    \            else if (digit == 4)\n                result = result + \"d\";\n\
    \            else if (digit == 5)\n                result = result + \"v\";\n\
    \            else if (digit == 6)\n                result = result + \"l\";\n\
    \            else if (digit == 7)\n                result = result + \"x\";\n\
    \            else if (digit == 8)\n                result = result + \"c\";\n\
    \            else if (digit == 9)\n                result = result + \"x\";\n\
    \            num = num / 10;\n        }\n        return result.ToLower();", " \
    \       string roman = \"\";\n        if (number < 0)\n            throw new ArgumentOutOfRangeException(\"\
    number\");\n        if (number == 0)\n            return \"\";\n        if (number\
    \ == 1)\n            return \"i\";\n        if (number == 2)\n            return\
    \ \"ii\";\n        if (number == 3)\n            return \"iii\";\n        if (number\
    \ == 4)\n            return \"iv\";\n        if (number == 5)\n            return\
    \ \"v\";\n        if (number == 6)\n            return \"vi\";\n        if (number\
    \ == 7)\n            return \"vii\";\n        if (number == 8)\n            return\
    \ \"viii\";\n        if (number == 9)\n            return \"ix\";\n        if\
    \ (number == 10)\n            return \"x\";\n        if (number == 11)\n     \
    \       return \"xi\";\n        if (number == 12)\n            return \"xii\"\
    ;\n        if (number == 13)\n            return \"xiii\";\n        if (number\
    \ == 14)\n            return \"xiv\";\n        if (number == 15)\n           \
    \ return \"xv\";\n        if (number == 16)\n            return \"xvi\";\n   \
    \     if (number == 17)\n            return \"xvii\";\n        if (number == 18)\n\
    \            return \"xviii\";\n        if (number == 19)\n            return\
    \ \"xix\";\n        if (number == 20)\n            return \"xx\";\n        if\
    \ (number == 30)\n            return \"xxx\";\n        if (number == 40)\n   \
    \         return \"xl\";\n        if (number == 50)\n            return \"l\"\
    ;\n        if (number == 60)\n            return \"lx\";\n        if (number ==\
    \ 70)\n            return \"lxx\";\n        if (number == 80)\n            return\
    \ \"lxxx\";\n        if (number == 90)\n            return \"xc\";\n        if\
    \ (number == 100)\n            return \"c\";\n        if (number == 200)\n   \
    \         return \"cc\";\n        if (number == 300)\n            return \"ccc\"\
    ;\n        if (number == 400)\n            return \"cd\";\n        if (number\
    \ == 500)\n            return \"d\";\n        if (number == 600", "        string\
    \ roman = \"\";\n        long num = number;\n        while (num > 0) {\n     \
    \       long digit = num % 10;\n            switch (digit) {\n               \
    \ case 1:\n                    roman = roman + \"i\";\n                    break;\n\
    \                case 2:\n                    roman = roman + \"ii\";\n      \
    \              break;\n                case 3:\n                    roman = roman\
    \ + \"iii\";\n                    break;\n                case 4:\n          \
    \          roman = roman + \"iv\";\n                    break;\n             \
    \   case 5:\n                    roman = roman + \"v\";\n                    break;\n\
    \                case 6:\n                    roman = roman + \"vi\";\n      \
    \              break;\n                case 7:\n                    roman = roman\
    \ + \"vii\";\n                    break;\n                case 8:\n          \
    \          roman = roman + \"viii\";\n                    break;\n           \
    \     case 9:\n                    roman = roman + \"ix\";\n                 \
    \   break;\n                case 10:\n                    roman = roman + \"x\"\
    ;\n                    break;\n                case 11:\n                    roman\
    \ = roman + \"xi\";\n                    break;\n                case 12:\n  \
    \                  roman = roman + \"xii\";\n                    break;\n    \
    \            case 13:\n                    roman = roman + \"xiii\";\n       \
    \             break;\n                case 14:\n                    roman = roman\
    \ + \"xiv\";\n                    break;\n                case 15:\n         \
    \           roman = roman + \"xv\";\n                    break;\n            \
    \    case 16:\n                    roman = roman + \"xvi\";\n                \
    \    break;\n                case 17:\n                    roman = roman + \"\
    xvii\";\n                    break;\n                case 18:\n              \
    \      roman = roman + \"xviii\";\n                    break;\n              \
    \  case 19:\n                    roman = roman + \"xix\";\n                  \
    \  break;\n                case 20:\n                    roman = roman + \"xx\"\
    ;\n                    break;\n                case 21:\n                    roman\
    \ = roman + \"xxi\";\n                    break;\n                case 22:\n \
    \                   roman = roman + \"xxii\";\n                    break;\n  \
    \              case 23:\n                    roman = roman + \"xxiii\";\n    \
    \                break;\n                case 24:\n                    roman =\
    \ roman + \"xxiv\";\n                    break;\n", "        string result = \"\
    \";\n        if (number < 1 || number > 1000)\n            throw new Exception(\"\
    Invalid number\");\n        long[] roman = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n        for (int i = 0; i < roman.length; i++) {\n   \
    \         while (number >= roman[i]) {\n                number -= roman[i];\n\
    \                result += roman[i];\n            }\n        }\n        return\
    \ result.ToLower();", "        if (number < 1 || number > 1000)\n            throw\
    \ new Exception(\"Invalid number\");\n        string result = \"\";\n        long\
    \ num = number;\n        while (num > 0) {\n            if (num >= 1000) {\n \
    \               result = \"m\" + result;\n                num -= 1000;\n     \
    \       }\n            else if (num >= 900) {\n                result = \"cm\"\
    \ + result;\n                num -= 900;\n            }\n            else if (num\
    \ >= 500) {\n                result = \"d\" + result;\n                num -=\
    \ 500;\n            }\n            else if (num >= 400) {\n                result\
    \ = \"cd\" + result;\n                num -= 400;\n            }\n           \
    \ else if (num >= 100) {\n                result = \"c\" + result;\n         \
    \       num -= 100;\n            }\n            else if (num >= 90) {\n      \
    \          result = \"xc\" + result;\n                num -= 90;\n           \
    \ }\n            else if (num >= 50) {\n                result = \"l\" + result;\n\
    \                num -= 50;\n            }\n            else if (num >= 40) {\n\
    \                result = \"xl\" + result;\n                num -= 40;\n     \
    \       }\n            else if (num >= 10) {\n                result = \"x\" +\
    \ result;\n                num -= 10;\n            }\n            else if (num\
    \ >= 9) {\n                result = \"ix\" + result;\n                num -= 9;\n\
    \            }\n            else if (num >= 5) {\n                result = \"\
    v\" + result;\n                num -= 5;\n            }\n            else if (num\
    \ >= 4) {\n                result = \"iv\" + result;\n                num -= 4;\n\
    \            }\n            else if (num >= 1) {\n                result = \"\
    i\" + result;\n                num -= 1;\n            }\n        }\n        return\
    \ result.ToLower();", "        string result = \"\";\n        if (number < 1 ||\
    \ number > 1000)\n            throw new Exception(\"Invalid number\");\n     \
    \   for (int i = 0; i < 4; i++) {\n            int num = number % 10;\n      \
    \      if (num == 0)\n                continue;\n            if (num == 1) {\n\
    \                result += \"i\";\n                number -= 1;\n            }\n\
    \            else if (num == 2) {\n                result += \"ii\";\n       \
    \         number -= 2;\n            }\n            else if (num == 3) {\n    \
    \            result += \"iii\";\n                number -= 3;\n            }\n\
    \            else if (num == 4) {\n                result += \"iv\";\n       \
    \         number -= 4;\n            }\n            else if (num == 5) {\n    \
    \            result += \"v\";\n                number -= 5;\n            }\n \
    \           else if (num == 6) {\n                result += \"vi\";\n        \
    \        number -= 6;\n            }\n            else if (num == 7) {\n     \
    \           result += \"vii\";\n                number -= 7;\n            }\n\
    \            else if (num == 8) {\n                result += \"viii\";\n     \
    \           number -= 8;\n            }\n            else if (num == 9) {\n  \
    \              result += \"ix\";\n                number -= 9;\n            }\n\
    \            else if (num == 10) {\n                result += \"x\";\n       \
    \         number -= 10;\n            }\n            else if (num == 11) {\n  \
    \              result += \"xi\";\n                number -= 11;\n            }\n\
    \            else if (num == 12) {\n                result += \"xii\";\n     \
    \           number -= 12;\n            }\n            else if (num == 13) {\n\
    \                result += \"xiii\";\n                number -= 13;\n        \
    \    }\n            else if (num == 14) {\n                result += \"xiv\";\n\
    \                number -= 14;\n            }\n            else if (num == 15)\
    \ {\n                result += \"xv\";\n                number -= 15;\n      \
    \      }\n            else if (num == 16) {\n                result += \"xvi\"\
    ;\n                number -= 16;\n            }\n            else if (num == 17)\
    \ {\n                result += \"xvii\";\n                number -= 17;\n", " \
    \       if (number < 1 || number > 1000)\n            throw new Exception(\"Invalid\
    \ number\");\n\n        // Create a dictionary of roman numerals\n        Dictionary<int,\
    \ string> roman = new Dictionary<int, string>();\n        roman.Add(1000, \"m\"\
    );\n        roman.Add(900, \"cm\");\n        roman.Add(500, \"d\");\n        roman.Add(400,\
    \ \"cd\");\n        roman.Add(100, \"c\");\n        roman.Add(90, \"xc\");\n \
    \       roman.Add(50, \"l\");\n        roman.Add(40, \"xl\");\n        roman.Add(10,\
    \ \"x\");\n        roman.Add(9, \"ix\");\n        roman.Add(5, \"v\");\n     \
    \   roman.Add(4, \"iv\");\n        roman.Add(1, \"i\");\n\n        // Convert\
    \ the number to a string\n        string romanString = \"\";\n        while (number\
    \ > 0) {\n            int romanValue = number % 10;\n            number /= 10;\n\
    \            romanString = roman[romanValue] + romanString;\n        }\n\n   \
    \     // Return the string in lowercase\n        return romanString.ToLower();",
  "        string result = \"\";\n        if (number < 1 || number > 1000)\n     \
    \       throw new InvalidOperationException(\"number must be between 1 and 1000\"\
    );\n        if (number == 1) {\n            result = \"i\";\n        }\n     \
    \   else if (number == 2) {\n            result = \"ii\";\n        }\n       \
    \ else if (number == 3) {\n            result = \"iii\";\n        }\n        else\
    \ if (number == 4) {\n            result = \"iv\";\n        }\n        else if\
    \ (number == 5) {\n            result = \"v\";\n        }\n        else if (number\
    \ == 6) {\n            result = \"vi\";\n        }\n        else if (number ==\
    \ 7) {\n            result = \"vii\";\n        }\n        else if (number == 8)\
    \ {\n            result = \"viii\";\n        }\n        else if (number == 9)\
    \ {\n            result = \"ix\";\n        }\n        else if (number == 10) {\n\
    \            result = \"x\";\n        }\n        else if (number == 11) {\n  \
    \          result = \"xi\";\n        }\n        else if (number == 12) {\n   \
    \         result = \"xii\";\n        }\n        else if (number == 13) {\n   \
    \         result = \"xiii\";\n        }\n        else if (number == 14) {\n  \
    \          result = \"xiv\";\n        }\n        else if (number == 15) {\n  \
    \          result = \"xv\";\n        }\n        else if (number == 16) {\n   \
    \         result = \"xvi\";\n        }\n        else if (number == 17) {\n   \
    \         result = \"xvii\";\n        }\n        else if (number == 18) {\n  \
    \          result = \"xviii\";\n        }\n        else if (number == 19) {\n\
    \            result = \"xix\";\n        }\n        else if (number == 20) {\n\
    \            result = \"xx\";\n        }\n        else if (number == 30) {\n \
    \           result = \"xxx\";\n        }\n        else if (number == 40) {\n \
    \           result = \"xl\";\n        }\n        else if (number == 50) {\n  \
    \          result = \"l\";\n        }\n        else if (number", "        string\
    \ roman = \"\";\n        if (number < 1 || number > 1000)\n            throw new\
    \ Exception(\"Invalid number\");\n        long[] roman_numbers = {1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for (int i = 0; i < roman_numbers.Length;\
    \ i++) {\n            while (number >= roman_numbers[i]) {\n                number\
    \ -= roman_numbers[i];\n                roman += \"M\";\n            }\n     \
    \   }\n        return roman;", "        if (number < 1 || number > 1000)\n   \
    \         throw new InvalidOperationException(\"number must be between 1 and 1000\"\
    );\n        string result = \"\";\n        long num = number;\n        while (num\
    \ > 0) {\n            long digit = num % 10;\n            if (digit == 1)\n  \
    \              result = result + \"x\";\n            else if (digit == 2)\n  \
    \              result = result + \"c\";\n            else if (digit == 3)\n  \
    \              result = result + \"m\";\n            else if (digit == 4)\n  \
    \              result = result + \"d\";\n            else if (digit == 5)\n  \
    \              result = result + \"l\";\n            else if (digit == 6)\n  \
    \              result = result + \"x\";\n            else if (digit == 7)\n  \
    \              result = result + \"c\";\n            else if (digit == 8)\n  \
    \              result = result + \"m\";\n            else if (digit == 9)\n  \
    \              result = result + \"d\";\n            else if (digit == 0)\n  \
    \              result = result + \"c\";\n            num = num / 10;\n       \
    \ }\n        return result.ToLower();", "        if (number < 1 || number > 1000)\n\
    \            throw new Exception(\"Invalid number\");\n        string result =\
    \ \"\";\n        long num = number;\n        while (num > 0) {\n            long\
    \ digit = num % 10;\n            if (digit == 1)\n                result = \"\
    i\" + result;\n            else if (digit == 2)\n                result = \"ii\"\
    \ + result;\n            else if (digit == 3)\n                result = \"iii\"\
    \ + result;\n            else if (digit == 4)\n                result = \"iv\"\
    \ + result;\n            else if (digit == 5)\n                result = \"v\"\
    \ + result;\n            else if (digit == 6)\n                result = \"vi\"\
    \ + result;\n            else if (digit == 7)\n                result = \"vii\"\
    \ + result;\n            else if (digit == 8)\n                result = \"viii\"\
    \ + result;\n            else if (digit == 9)\n                result = \"ix\"\
    \ + result;\n            else if (digit == 10)\n                result = \"x\"\
    \ + result;\n            else if (digit == 11)\n                result = \"xi\"\
    \ + result;\n            else if (digit == 12)\n                result = \"xii\"\
    \ + result;\n            else if (digit == 13)\n                result = \"xiii\"\
    \ + result;\n            else if (digit == 14)\n                result = \"xiv\"\
    \ + result;\n            else if (digit == 15)\n                result = \"xv\"\
    \ + result;\n            else if (digit == 16)\n                result = \"xvi\"\
    \ + result;\n            else if (digit == 17)\n                result = \"xvii\"\
    \ + result;\n            else if (digit == 18)\n                result = \"xviii\"\
    \ + result;\n            else if (digit == 19)\n                result = \"xix\"\
    \ + result;\n            else if (digit == 20)\n                result = \"xx\"\
    \ + result;\n            else if (digit == 21)\n                result = \"xxi\"\
    \ + result;\n            else if (digit == 22)\n                result = \"xxii\"\
    \ + result;\n            else if (digit == 23)\n                result = \"xxiii\"\
    \ + result;\n            else if (digit == 24)", "        if (number < 1 || number\
    \ > 1000)\n            throw new Exception(\"Invalid number\");\n\n        //\
    \ Create a dictionary of roman numerals\n        Dictionary<long, string> roman\
    \ = new Dictionary<long, string>();\n        roman.Add(1000, \"m\");\n       \
    \ roman.Add(900, \"cm\");\n        roman.Add(500, \"d\");\n        roman.Add(400,\
    \ \"cd\");\n        roman.Add(100, \"c\");\n        roman.Add(90, \"xc\");\n \
    \       roman.Add(50, \"l\");\n        roman.Add(40, \"xl\");\n        roman.Add(10,\
    \ \"x\");\n        roman.Add(9, \"ix\");\n        roman.Add(5, \"v\");\n     \
    \   roman.Add(4, \"iv\");\n        roman.Add(1, \"i\");\n\n        // Create a\
    \ string builder\n        StringBuilder romanString = new StringBuilder();\n\n\
    \        // Iterate through the dictionary\n        for (long i = number; i >\
    \ 0; i--) {\n            // If the number is in the dictionary, add it to the\
    \ string\n            if (roman.ContainsKey(i)) {\n                romanString.Append(roman[i]);\n\
    \            }\n            // If the number is not in the dictionary, add the\
    \ number of roman\n            // numerals to the string\n            else {\n\
    \                romanString.Append(roman[i]);\n            }\n        }\n\n \
    \       // Return the string\n        return romanString.ToString();", "     \
    \   string roman = \"\";\n        long num = number;\n        while (num > 0)\
    \ {\n            int digit = (int)(num % 10);\n            switch (digit) {\n\
    \                case 1:\n                    roman += \"i\";\n              \
    \      break;\n                case 2:\n                    roman += \"ii\";\n\
    \                    break;\n                case 3:\n                    roman\
    \ += \"iii\";\n                    break;\n                case 4:\n         \
    \           roman += \"iv\";\n                    break;\n                case\
    \ 5:\n                    roman += \"v\";\n                    break;\n      \
    \          case 6:\n                    roman += \"vi\";\n                   \
    \ break;\n                case 7:\n                    roman += \"vii\";\n   \
    \                 break;\n                case 8:\n                    roman +=\
    \ \"viii\";\n                    break;\n                case 9:\n           \
    \         roman += \"ix\";\n                    break;\n                case 10:\n\
    \                    roman += \"x\";\n                    break;\n           \
    \     case 11:\n                    roman += \"xi\";\n                    break;\n\
    \                case 12:\n                    roman += \"xii\";\n           \
    \         break;\n                case 13:\n                    roman += \"xiii\"\
    ;\n                    break;\n                case 14:\n                    roman\
    \ += \"xiv\";\n                    break;\n                case 15:\n        \
    \            roman += \"xv\";\n                    break;\n                case\
    \ 16:\n                    roman += \"xvi\";\n                    break;\n   \
    \             case 17:\n                    roman += \"xvii\";\n             \
    \       break;\n                case 18:\n                    roman += \"xviii\"\
    ;\n                    break;\n                case 19:\n                    roman\
    \ += \"xix\";\n                    break;\n                case 20:\n        \
    \            roman += \"xx\";\n                    break;\n                case\
    \ 21:\n                    roman += \"xxi\";\n                    break;\n   \
    \             case 22:\n                    roman += \"xxii\";\n             \
    \       break;\n                case 23:\n                    roman += \"xxiii\"\
    ;\n                    break;\n                case 24:\n                    roman\
    \ += \"xxiv\";\n                    break;\n                case 25:\n       \
    \             roman += \"xxv\";\n                    break;\n                case\
    \ 26:\n                    roman += \"xxvi\";\n                    break;\n  \
    \              case 27:\n                    roman += \"xxvii\";\n           \
    \         break;\n                case 28:\n                    roman += \"xxviii\"\
    ;\n                    break;", "        if (number < 1 || number > 1000)\n  \
    \          throw new Exception(\"Invalid number\");\n        string result = \"\
    \";\n        long num = number;\n        while (num > 0) {\n            int digit\
    \ = num % 10;\n            if (digit == 1 || digit == 5) {\n                result\
    \ = \"x\" + result;\n            }\n            else if (digit == 2 || digit ==\
    \ 3) {\n                result = \"c\" + result;\n            }\n            else\
    \ if (digit == 4 || digit == 9) {\n                result = \"d\" + result;\n\
    \            }\n            else if (digit == 6 || digit == 7) {\n           \
    \     result = \"m\" + result;\n            }\n            else if (digit == 8\
    \ || digit == 9) {\n                result = \"v\" + result;\n            }\n\
    \            num = num / 10;\n        }\n        return result.ToLower();", " \
    \       string roman = \"\";\n        int[] digits = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] roman_digits = {1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] roman_digits_rev = {1,\
    \ 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        int i = 0;\n  \
    \      while (number > 0) {\n            int digit = number % 10;\n          \
    \  if (digit == 0) {\n                roman = roman + \"0\";\n            }\n\
    \            else {\n                while (i < digits.Length && digit > digits[i])\
    \ {\n                    roman = roman + roman_digits[i];\n                  \
    \  i++;\n                }\n                if (i < digits.Length) {\n       \
    \             roman = roman + roman_digits[i];\n                }\n          \
    \  }\n            number = number / 10;\n        }\n        return roman.ToLower();",
  "        // Create a dictionary of roman numerals\n        var romanNumerals = new\
    \ Dictionary<int, string>();\n        romanNumerals[1000] = \"m\";\n        romanNumerals[900]\
    \ = \"cm\";\n        romanNumerals[500] = \"d\";\n        romanNumerals[400] =\
    \ \"cd\";\n        romanNumerals[100] = \"c\";\n        romanNumerals[90] = \"\
    xc\";\n        romanNumerals[50] = \"l\";\n        romanNumerals[40] = \"xl\"\
    ;\n        romanNumerals[10] = \"x\";\n        romanNumerals[9] = \"ix\";\n  \
    \      romanNumerals[5] = \"v\";\n        romanNumerals[4] = \"iv\";\n       \
    \ romanNumerals[1] = \"i\";\n\n        // Create a string builder to hold the\
    \ result\n        var result = new StringBuilder();\n\n        // Convert the\
    \ number to a string\n        var numberString = number.ToString();\n\n      \
    \  // Iterate through the string and convert each character\n        for (var\
    \ i = 0; i < numberString.Length; i++) {\n            // Get the current character\n\
    \            var currentChar = numberString[i];\n\n            // If the current\
    \ character is a digit, add it to the result\n            if (currentChar.IsDigit())\
    \ {\n                result.Append(currentChar);\n            }\n            //\
    \ If the current character is a roman numeral, add it to the result\n        \
    \    else if (romanNumerals.ContainsKey(currentChar)) {\n                result.Append(romanNumerals[currentChar]);\n\
    \            }\n            // If the current character is not a digit or a roman\
    \ numeral,\n            // add a \"?\" to the result\n            else {\n   \
    \             result.Append(\"?\");\n            }\n        }\n\n        // Return\
    \ the result\n        return result.ToString().ToLower();", "        string result\
    \ = \"\";\n        if (number < 1 || number > 1000)\n            throw new Exception(\"\
    Invalid number\");\n        for (int i = 0; i < 4; i++) {\n            int num\
    \ = number % 10;\n            if (num == 0)\n                break;\n        \
    \    if (i == 0)\n                result += numToRoman[num];\n            else\
    \ if (i == 1)\n                result += numToRoman[num] + numToRoman[num];\n\
    \            else if (i == 2)\n                result += numToRoman[num] + numToRoman[num]\
    \ + numToRoman[num];\n            else if (i == 3)\n                result +=\
    \ numToRoman[num] + numToRoman[num] + numToRoman[num] + numToRoman[num];\n   \
    \         number /= 10;\n        }\n        return result.ToLower();", "     \
    \   string roman = \"\";\n        if (number < 1 || number > 1000)\n         \
    \   throw new Exception(\"Invalid number\");\n        for (int i = 0; i < 10;\
    \ i++) {\n            int num = number % 10;\n            if (num == 0)\n    \
    \            continue;\n            if (num == 1)\n                roman += \"\
    i\";\n            else if (num == 2)\n                roman += \"ii\";\n     \
    \       else if (num == 3)\n                roman += \"iii\";\n            else\
    \ if (num == 4)\n                roman += \"iv\";\n            else if (num ==\
    \ 5)\n                roman += \"v\";\n            else if (num == 6)\n      \
    \          roman += \"vi\";\n            else if (num == 7)\n                roman\
    \ += \"vii\";\n            else if (num == 8)\n                roman += \"viii\"\
    ;\n            else if (num == 9)\n                roman += \"ix\";\n        \
    \    number /= 10;\n        }\n        return roman.ToLower();", "        string[]\
    \ roman = { \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\"\
    , \"ix\" };\n        string result = \"\";\n        int i = 0;\n        while\
    \ (number > 0) {\n            int digit = (int) (number % 10);\n            number\
    \ /= 10;\n            if (digit > 0 && digit <= 4) {\n                result =\
    \ roman[i] + result;\n            }\n            i++;\n        }\n        return\
    \ result.ToLower();", "        if (number < 1 || number > 1000)\n            throw\
    \ new Exception(\"Invalid number\");\n\n        string[] roman = new string[]\
    \ { \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"\
    ix\" };\n        string result = \"\";\n        while (number > 0) {\n       \
    \     int digit = (int)(number % 10);\n            number /= 10;\n           \
    \ result = roman[digit] + result;\n        }\n        return result.ToLower();",
  "        if (number < 1 || number > 1000)\n            throw new Exception(\"Invalid\
    \ number\");\n\n        string roman = \"\";\n        int[] digits = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] nums = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for (int i = 0; i < digits.Length;\
    \ i++) {\n            while (number >= nums[i]) {\n                number -= nums[i];\n\
    \                roman += \"M\";\n            }\n        }\n        return roman;",
  "        string roman = \"\";\n        long num = number;\n        while (num >\
    \ 0) {\n            roman = roman + IntToRoman(num % 1000);\n            num /=\
    \ 1000;\n        }\n        return roman;", "        string result = \"\";\n \
    \       long num = number;\n        while (num > 0) {\n            long digit\
    \ = num % 10;\n            if (digit == 1) {\n                result = result\
    \ + \"i\";\n            }\n            else if (digit == 2) {\n              \
    \  result = result + \"ii\";\n            }\n            else if (digit == 3)\
    \ {\n                result = result + \"iii\";\n            }\n            else\
    \ if (digit == 4) {\n                result = result + \"iv\";\n            }\n\
    \            else if (digit == 5) {\n                result = result + \"v\";\n\
    \            }\n            else if (digit == 6) {\n                result = result\
    \ + \"vi\";\n            }\n            else if (digit == 7) {\n             \
    \   result = result + \"vii\";\n            }\n            else if (digit == 8)\
    \ {\n                result = result + \"viii\";\n            }\n            else\
    \ if (digit == 9) {\n                result = result + \"ix\";\n            }\n\
    \            else if (digit == 0) {\n                result = result + \"x\";\n\
    \            }\n            num = num / 10;\n        }\n        return result.ToLower();",
  "        string result = \"\";\n        if (number < 1 || number > 1000) {\n   \
    \         throw new Exception(\"Invalid number\");\n        }\n        if (number\
    \ == 1) {\n            result = \"i\";\n        }\n        else if (number ==\
    \ 2) {\n            result = \"ii\";\n        }\n        else if (number == 3)\
    \ {\n            result = \"iii\";\n        }\n        else if (number == 4) {\n\
    \            result = \"iv\";\n        }\n        else if (number == 5) {\n  \
    \          result = \"v\";\n        }\n        else if (number == 6) {\n     \
    \       result = \"vi\";\n        }\n        else if (number == 7) {\n       \
    \     result = \"vii\";\n        }\n        else if (number == 8) {\n        \
    \    result = \"viii\";\n        }\n        else if (number == 9) {\n        \
    \    result = \"ix\";\n        }\n        else if (number == 10) {\n         \
    \   result = \"x\";\n        }\n        else if (number == 11) {\n           \
    \ result = \"xi\";\n        }\n        else if (number == 12) {\n            result\
    \ = \"xii\";\n        }\n        else if (number == 13) {\n            result\
    \ = \"xiii\";\n        }\n        else if (number == 14) {\n            result\
    \ = \"xiv\";\n        }\n        else if (number == 15) {\n            result\
    \ = \"xv\";\n        }\n        else if (number == 16) {\n            result =\
    \ \"xvi\";\n        }\n        else if (number == 17) {\n            result =\
    \ \"xvii\";\n        }\n        else if (number == 18) {\n            result =\
    \ \"xviii\";\n        }\n        else if (number == 19) {\n            result\
    \ = \"xix\";\n        }\n        else if (number == 20) {\n            result\
    \ = \"xx\";\n        }\n        else if (number == 30) {\n            result =\
    \ \"xxx\";\n        }\n        else if (number == 40) {\n            result =\
    \ \"xl\";\n        }\n        else if (number == 50) {\n            result = \"\
    l\";\n        }\n        else if (number == 60)", "        string roman = \"\"\
    ;\n        long num = number;\n        while (num > 0) {\n            int digit\
    \ = (int)(num % 10);\n            switch (digit) {\n                case 1:\n\
    \                    roman += \"i\";\n                    break;\n           \
    \     case 2:\n                    roman += \"ii\";\n                    break;\n\
    \                case 3:\n                    roman += \"iii\";\n            \
    \        break;\n                case 4:\n                    roman += \"iv\"\
    ;\n                    break;\n                case 5:\n                    roman\
    \ += \"v\";\n                    break;\n                case 6:\n           \
    \         roman += \"vi\";\n                    break;\n                case 7:\n\
    \                    roman += \"vii\";\n                    break;\n         \
    \       case 8:\n                    roman += \"viii\";\n                    break;\n\
    \                case 9:\n                    roman += \"ix\";\n             \
    \       break;\n                case 10:\n                    roman += \"x\";\n\
    \                    break;\n                case 11:\n                    roman\
    \ += \"xi\";\n                    break;\n                case 12:\n         \
    \           roman += \"xii\";\n                    break;\n                case\
    \ 13:\n                    roman += \"xiii\";\n                    break;\n  \
    \              case 14:\n                    roman += \"xiv\";\n             \
    \       break;\n                case 15:\n                    roman += \"xv\"\
    ;\n                    break;\n                case 16:\n                    roman\
    \ += \"xvi\";\n                    break;\n                case 17:\n        \
    \            roman += \"xvii\";\n                    break;\n                case\
    \ 18:\n                    roman += \"xviii\";\n                    break;\n \
    \               case 19:\n                    roman += \"xix\";\n            \
    \        break;\n                case 20:\n                    roman += \"xx\"\
    ;\n                    break;\n                case 21:\n                    roman\
    \ += \"xxi\";\n                    break;\n                case 22:\n        \
    \            roman += \"xxii\";\n                    break;\n                case\
    \ 23:\n                    roman += \"xxiii\";\n                    break;\n \
    \               case 24:\n                    roman += \"xxiv\";\n           \
    \         break;\n                case 25:\n                    roman += \"xxv\"\
    ;\n                    break;\n                case 26:\n                    roman\
    \ += \"xxvi\";\n                    break;\n                case 27:\n       \
    \             roman += \"xxvii\";\n                    break;\n              \
    \  case 28:\n                    roman += \"xxviii\";\n                    break;",
  "        string result = \"\";\n        if (number < 0) {\n            throw new\
    \ ArgumentOutOfRangeException(\"number\");\n        }\n        if (number > 1000)\
    \ {\n            throw new ArgumentOutOfRangeException(\"number\");\n        }\n\
    \        if (number == 0) {\n            return \"\";\n        }\n        int[]\
    \ digits = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[]\
    \ tens = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[]\
    \ hundreds = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n       \
    \ int[] thousands = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \        int[] hundreds_tens = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1};\n        int[] hundreds_thousands = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n        int[] thousands_tens = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] thousands_hundreds = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] thousands_thousands\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] hundreds_thousands_tens\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] hundreds_thousands_hundreds\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] hundreds_thousands_thousands\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] hundreds_thousands_thousands_",
  "        string roman = \"\";\n        if (number < 0) {\n            throw new\
    \ Exception(\"Invalid number\");\n        }\n        if (number == 0) {\n    \
    \        return \"\";\n        }\n        if (number == 1) {\n            roman\
    \ = \"i\";\n        }\n        else if (number == 2) {\n            roman = \"\
    ii\";\n        }\n        else if (number == 3) {\n            roman = \"iii\"\
    ;\n        }\n        else if (number == 4) {\n            roman = \"iv\";\n \
    \       }\n        else if (number == 5) {\n            roman = \"v\";\n     \
    \   }\n        else if (number == 6) {\n            roman = \"vi\";\n        }\n\
    \        else if (number == 7) {\n            roman = \"vii\";\n        }\n  \
    \      else if (number == 8) {\n            roman = \"viii\";\n        }\n   \
    \     else if (number == 9) {\n            roman = \"ix\";\n        }\n      \
    \  else if (number == 10) {\n            roman = \"x\";\n        }\n        else\
    \ if (number == 11) {\n            roman = \"xi\";\n        }\n        else if\
    \ (number == 12) {\n            roman = \"xii\";\n        }\n        else if (number\
    \ == 13) {\n            roman = \"xiii\";\n        }\n        else if (number\
    \ == 14) {\n            roman = \"xiv\";\n        }\n        else if (number ==\
    \ 15) {\n            roman = \"xv\";\n        }\n        else if (number == 16)\
    \ {\n            roman = \"xvi\";\n        }\n        else if (number == 17) {\n\
    \            roman = \"xvii\";\n        }\n        else if (number == 18) {\n\
    \            roman = \"xviii\";\n        }\n        else if (number == 19) {\n\
    \            roman = \"xix\";\n        }\n        else if (number == 20) {\n \
    \           roman = \"xx\";\n        }\n        else if (number == 30) {\n   \
    \         roman = \"xxx\";\n        }\n        else if (number == 40) {\n    \
    \        roman = \"xl\";\n        }\n        else if (number == 50) {\n      \
    \      roman = \"", "        string roman = \"\";\n        int[] roman_num = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] roman_den =\
    \ {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] roman_num_rem\
    \ = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        int[] roman_den_rem = {0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        int[] roman_num_rem_temp = {0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        int[] roman_den_rem_temp = {0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        int[] roman_num_rem_temp2 = {0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        int[] roman_den_rem_temp2 = {0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        int[] roman_num_rem_temp3 = {0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        int[] roman_den_rem_temp3 = {0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        int[] roman_num_rem_temp4 = {0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        int[] roman_den_rem_temp4 = {0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        int[] roman_num_rem_temp5 = {0,\
    \ 0, 0, 0, 0, 0, 0, 0,", "        string roman = \"\";\n        if (number < 1\
    \ || number > 1000) {\n            throw new Exception(\"Invalid number\");\n\
    \        }\n        // Initialize the roman numeral\n        roman = \"\";\n \
    \       // Iterate through the number\n        for (int i = 0; i < number; i++)\
    \ {\n            // If the number is greater than the previous one, add a \"M\"\
    \n            if (i + 1 < number && number % 10 > i) {\n                roman\
    \ += \"M\";\n            }\n            // If the number is greater than the previous\
    \ one, add a \"D\"\n            if (i + 1 < number && number % 5 > i) {\n    \
    \            roman += \"D\";\n            }\n            // If the number is greater\
    \ than the previous one, add a \"C\"\n            if (i + 1 < number && number\
    \ % 100 > i) {\n                roman += \"C\";\n            }\n            //\
    \ If the number is greater than the previous one, add a \"L\"\n            if\
    \ (i + 1 < number && number % 50 > i) {\n                roman += \"L\";\n   \
    \         }\n            // If the number is greater than the previous one, add\
    \ a \"X\"\n            if (i + 1 < number && number % 10 > i) {\n            \
    \    roman += \"X\";\n            }\n            // If the number is greater than\
    \ the previous one, add a \"V\"\n            if (i + 1 < number && number % 5\
    \ > i) {\n                roman += \"V\";\n            }\n        }\n        //\
    \ Return the roman numeral\n        return roman;", "        string result = \"\
    \";\n        if (number < 1 || number > 1000)\n            throw new InvalidOperationException(\"\
    The number must be between 1 and 1000\");\n        if (number == 1)\n        \
    \    result = \"i\";\n        else if (number == 2)\n            result = \"ii\"\
    ;\n        else if (number == 3)\n            result = \"iii\";\n        else\
    \ if (number == 4)\n            result = \"iv\";\n        else if (number == 5)\n\
    \            result = \"v\";\n        else if (number == 6)\n            result\
    \ = \"vi\";\n        else if (number == 7)\n            result = \"vii\";\n  \
    \      else if (number == 8)\n            result = \"viii\";\n        else if\
    \ (number == 9)\n            result = \"ix\";\n        else if (number == 10)\n\
    \            result = \"x\";\n        else if (number == 11)\n            result\
    \ = \"xi\";\n        else if (number == 12)\n            result = \"xii\";\n \
    \       else if (number == 13)\n            result = \"xiii\";\n        else if\
    \ (number == 14)\n            result = \"xiv\";\n        else if (number == 15)\n\
    \            result = \"xv\";\n        else if (number == 16)\n            result\
    \ = \"xvi\";\n        else if (number == 17)\n            result = \"xvii\";\n\
    \        else if (number == 18)\n            result = \"xviii\";\n        else\
    \ if (number == 19)\n            result = \"xix\";\n        else if (number ==\
    \ 20)\n            result = \"xx\";\n        else if (number == 21)\n        \
    \    result = \"xxi\";\n        else if (number == 22)\n            result = \"\
    xxii\";\n        else if (number == 23)\n            result = \"xxiii\";\n   \
    \     else if (number == 24)\n            result = \"xxiv\";\n        else if\
    \ (number == 25)\n            result = \"xxv\";\n        else if (number == 26)\n\
    \            result = \"xxvi\";\n        else if (number == 27)\n            result\
    \ = \"xxvii\";\n        else if (number == 28)\n            result = \"xxviii\"\
    ;\n        else if (number == 29", "        string roman = \"\";\n        if (number\
    \ == 0) return \"\";\n        if (number < 0) return \"\";\n        if (number\
    \ > 1000) return \"\";\n        if (number < 10) return IntToRoman(number);\n\
    \        if (number < 100) return IntToRoman(number / 10) + IntToRoman(number\
    \ % 10);\n        if (number < 1000) return IntToRoman(number / 100) + IntToRoman(number\
    \ % 100);\n        if (number < 10000) return IntToRoman(number / 1000) + IntToRoman(number\
    \ % 1000);\n        return IntToRoman(number / 10000) + IntToRoman(number % 10000);\n\
    \    }\n\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToRoman(19)\n    // (\"xix\")\n\
    \    // >>> IntToRoman(152)\n    // (\"clii\")\n    // >>> IntToRoman(426)\n \
    \   // (\"cdxxvi\")\n    // >>> IntToRoman(1000)\n    // (\"m\")\n    public static\
    \ string IntToRoman(long number) {\n        string roman = \"\";\n        if (number\
    \ == 0) return \"\";\n        if (number < 0) return \"\";\n        if (number\
    \ > 1000) return \"\";\n        if (number < 10) return IntToRoman(number);\n\
    \        if (number < 100) return IntToRoman(number / 10) + IntToRoman(number\
    \ % 10);\n        if (number < 1000) return IntToRoman(number / 100) + IntToRoman(number\
    \ % 100);\n        if (number < 10000) return IntToRoman(number / 1000) + IntToRoman(number\
    \ % 1000);\n        return IntToRoman(number / 10000) + IntToRoman(number % 10000);\n\
    \    }\n\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToRoman(19)\n    // (\"xix\")\n\
    \    // >>> IntToRoman(152)\n", "        string result = \"\";\n        if (number\
    \ < 1 || number > 1000) {\n            throw new InvalidOperationException(\"\
    The number must be between 1 and 1000.\");\n        }\n        long[] roman =\
    \ {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for (int i\
    \ = 0; i < roman.length; i++) {\n            while (number >= roman[i]) {\n  \
    \              number -= roman[i];\n                result += roman[i];\n    \
    \        }\n        }\n        return result;", "        string result = \"\"\
    ;\n        if (number < 1 || number > 1000)\n            throw new Exception(\"\
    Invalid number\");\n        if (number == 1)\n            result = \"I\";\n  \
    \      else if (number == 2)\n            result = \"II\";\n        else if (number\
    \ == 3)\n            result = \"III\";\n        else if (number == 4)\n      \
    \      result = \"IV\";\n        else if (number == 5)\n            result = \"\
    V\";\n        else if (number == 6)\n            result = \"VI\";\n        else\
    \ if (number == 7)\n            result = \"VII\";\n        else if (number ==\
    \ 8)\n            result = \"VIII\";\n        else if (number == 9)\n        \
    \    result = \"IX\";\n        else if (number == 10)\n            result = \"\
    X\";\n        else if (number == 11)\n            result = \"XI\";\n        else\
    \ if (number == 12)\n            result = \"XII\";\n        else if (number ==\
    \ 13)\n            result = \"XIII\";\n        else if (number == 14)\n      \
    \      result = \"XIV\";\n        else if (number == 15)\n            result =\
    \ \"XV\";\n        else if (number == 16)\n            result = \"XVI\";\n   \
    \     else if (number == 17)\n            result = \"XVII\";\n        else if\
    \ (number == 18)\n            result = \"XVIII\";\n        else if (number ==\
    \ 19)\n            result = \"XIX\";\n        else if (number == 20)\n       \
    \     result = \"XX\";\n        else if (number == 30)\n            result = \"\
    XXX\";\n        else if (number == 40)\n            result = \"XL\";\n       \
    \ else if (number == 50)\n            result = \"L\";\n        else if (number\
    \ == 60)\n            result = \"LX\";\n        else if (number == 70)\n     \
    \       result = \"LXX\";\n        else if (number == 80)\n            result\
    \ = \"LXXX\";\n        else if (number == 90)\n            result = \"XC\";\n\
    \        else if (number == 100)\n            result = \"C\";\n        else if\
    \ (number == 200)\n            result = \"CC\";\n        else if (number ==",
  "        string roman = \"\";\n        if (number < 1 || number > 1000)\n      \
    \      throw new Exception(\"Invalid number\");\n        long[] values = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for (int i = 0; i\
    \ < values.Length; i++) {\n            while (number >= values[i]) {\n       \
    \         number -= values[i];\n                roman += values[i];\n        \
    \    }\n        }\n        return roman;", "        string roman = \"\";\n   \
    \     if (number < 1 || number > 1000)\n            throw new Exception(\"Invalid\
    \ number\");\n        for (int i = 0; i < 4; i++) {\n            int num = number\
    \ % 10;\n            if (num == 0)\n                break;\n            if (i\
    \ == 0)\n                roman = roman + IntToRoman(num);\n            else if\
    \ (i == 1)\n                roman = roman + IntToRoman(num);\n            else\
    \ if (i == 2)\n                roman = roman + IntToRoman(num);\n            else\
    \ if (i == 3)\n                roman = roman + IntToRoman(num);\n            number\
    \ /= 10;\n        }\n        return roman;", "        string[] roman = { \"\"\
    , \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\" };\n\
    \        string[] num = { \"\", \"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"\
    dc\", \"dcc\", \"dccc\" };\n        string result = \"\";\n        for (int i\
    \ = 0; i < roman.length; i++) {\n            while (number >= num[i].length())\
    \ {\n                number -= num[i].length();\n                result += roman[i];\n\
    \            }\n        }\n        return result;", "        string result = \"\
    \";\n        if (number < 1 || number > 1000)\n            throw new Exception(\"\
    Invalid number\");\n        if (number == 1)\n            result = \"i\";\n  \
    \      else if (number == 2)\n            result = \"ii\";\n        else if (number\
    \ == 3)\n            result = \"iii\";\n        else if (number == 4)\n      \
    \      result = \"iv\";\n        else if (number == 5)\n            result = \"\
    v\";\n        else if (number == 6)\n            result = \"vi\";\n        else\
    \ if (number == 7)\n            result = \"vii\";\n        else if (number ==\
    \ 8)\n            result = \"viii\";\n        else if (number == 9)\n        \
    \    result = \"ix\";\n        else if (number == 10)\n            result = \"\
    x\";\n        else if (number == 11)\n            result = \"xi\";\n        else\
    \ if (number == 12)\n            result = \"xii\";\n        else if (number ==\
    \ 13)\n            result = \"xiii\";\n        else if (number == 14)\n      \
    \      result = \"xiv\";\n        else if (number == 15)\n            result =\
    \ \"xv\";\n        else if (number == 16)\n            result = \"xvi\";\n   \
    \     else if (number == 17)\n            result = \"xvii\";\n        else if\
    \ (number == 18)\n            result = \"xviii\";\n        else if (number ==\
    \ 19)\n            result = \"xix\";\n        else if (number == 20)\n       \
    \     result = \"xx\";\n        else if (number == 21)\n            result = \"\
    xxi\";\n        else if (number == 22)\n            result = \"xxii\";\n     \
    \   else if (number == 23)\n            result = \"xxiii\";\n        else if (number\
    \ == 24)\n            result = \"xxiv\";\n        else if (number == 25)\n   \
    \         result = \"xxv\";\n        else if (number == 26)\n            result\
    \ = \"xxvi\";\n        else if (number == 27)\n            result = \"xxvii\"\
    ;\n        else if (number == 28)\n            result = \"xxviii\";\n        else\
    \ if (number == 29)\n            result = \"xxix", "        string roman = \"\"\
    ;\n        if (number < 1 || number > 1000)\n            throw new Exception(\"\
    Invalid number\");\n        // base case\n        if (number == 1)\n         \
    \   roman = \"i\";\n        else if (number == 2)\n            roman = \"ii\"\
    ;\n        else if (number == 3)\n            roman = \"iii\";\n        else if\
    \ (number == 4)\n            roman = \"iv\";\n        else if (number == 5)\n\
    \            roman = \"v\";\n        else if (number == 6)\n            roman\
    \ = \"vi\";\n        else if (number == 7)\n            roman = \"vii\";\n   \
    \     else if (number == 8)\n            roman = \"viii\";\n        else if (number\
    \ == 9)\n            roman = \"ix\";\n        else if (number == 10)\n       \
    \     roman = \"x\";\n        else if (number == 11)\n            roman = \"xi\"\
    ;\n        else if (number == 12)\n            roman = \"xii\";\n        else\
    \ if (number == 13)\n            roman = \"xiii\";\n        else if (number ==\
    \ 14)\n            roman = \"xiv\";\n        else if (number == 15)\n        \
    \    roman = \"xv\";\n        else if (number == 16)\n            roman = \"xvi\"\
    ;\n        else if (number == 17)\n            roman = \"xvii\";\n        else\
    \ if (number == 18)\n            roman = \"xviii\";\n        else if (number ==\
    \ 19)\n            roman = \"xix\";\n        else if (number == 20)\n        \
    \    roman = \"xx\";\n        else if (number == 30)\n            roman = \"xxx\"\
    ;\n        else if (number == 40)\n            roman = \"xl\";\n        else if\
    \ (number == 50)\n            roman = \"l\";\n        else if (number == 60)\n\
    \            roman = \"lx\";\n        else if (number == 70)\n            roman\
    \ = \"lxx\";\n        else if (number == 80)\n            roman = \"lxxx\";\n\
    \        else if (number == 90)\n            roman = \"xc\";\n        else if\
    \ (number == 100)\n            roman = \"c\";\n        else if (number == 200)\n\
    \            roman = \"cc\";", "        string result = \"\";\n        if (number\
    \ < 0)\n            throw new Exception(\"Invalid number\");\n        if (number\
    \ > 1000)\n            throw new Exception(\"Invalid number\");\n        int[]\
    \ digits = new int[4];\n        int[] roman = new int[] { 1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        for (int i = 0; i < digits.Length;\
    \ i++) {\n            digits[i] = number % roman[i];\n            number /= roman[i];\n\
    \        }\n        for (int i = 0; i < digits.Length; i++) {\n            if\
    \ (digits[i] != 0) {\n                for (int j = 0; j < digits[i]; j++) {\n\
    \                    result += \"M\";\n                }\n            }\n    \
    \        else {\n                for (int j = 0; j < roman[i + 1] - roman[i];\
    \ j++) {\n                    result += \"C\";\n                }\n          \
    \  }\n        }\n        return result.ToLower();", "        if (number < 1 ||\
    \ number > 1000)\n            throw new Exception(\"Invalid number\");\n\n   \
    \     string roman = \"\";\n        int[] roman_nums = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] roman_num_count = {0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0};\n        int[] roman_num_index = {0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0};\n        int[] roman_num_index_count = {0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0};\n\n        for (int i = 0; i < roman_nums.length; i++)\
    \ {\n            while (number >= roman_nums[i]) {\n                roman += roman_nums[i];\n\
    \                number -= roman_nums[i];\n                roman_num_count[i]++;\n\
    \                roman_num_index[i]++;\n            }\n        }\n\n        for\
    \ (int i = 0; i < roman_nums.length; i++) {\n            if (roman_num_count[i]\
    \ > 0) {\n                while (roman_num_index_count[i] < roman_num_count[i])\
    \ {\n                    roman += roman_nums[i];\n                    roman_num_index_count[i]++;\n\
    \                }\n            }\n        }\n\n        return roman.ToLower();",
  "        string[] roman = { \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\"\
    , \"vii\", \"viii\", \"ix\" };\n        string[] digits = { \"\", \"\", \"\",\
    \ \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",", "        string result\
    \ = \"\";\n        if (number < 1 || number > 1000)\n            throw new Exception(\"\
    Invalid number\");\n        for (int i = 0; i < 10; i++) {\n            if (number\
    \ >= i) {\n                result += \"m\";\n                number -= i;\n  \
    \          }\n            else if (number >= i / 2) {\n                result\
    \ += \"c\";\n                number -= i / 2;\n            }\n            else\
    \ if (number >= i / 3) {\n                result += \"x\";\n                number\
    \ -= i / 3;\n            }\n            else if (number >= i / 4) {\n        \
    \        result += \"l\";\n                number -= i / 4;\n            }\n \
    \           else if (number >= i / 5) {\n                result += \"d\";\n  \
    \              number -= i / 5;\n            }\n            else if (number >=\
    \ i / 6) {\n                result += \"v\";\n                number -= i / 6;\n\
    \            }\n            else if (number >= i / 7) {\n                result\
    \ += \"i\";\n                number -= i / 7;\n            }\n            else\
    \ if (number >= i / 8) {\n                result += \"v\";\n                number\
    \ -= i / 8;\n            }\n            else if (number >= i / 9) {\n        \
    \        result += \"i\";\n                number -= i / 9;\n            }\n \
    \           else if (number >= i / 10) {\n                result += \"x\";\n \
    \               number -= i / 10;\n            }\n        }\n        return result.ToLower();",
  "        string result = \"\";\n        if (number < 0) {\n            throw new\
    \ Exception(\"Invalid number\");\n        }\n        if (number > 1000) {\n  \
    \          throw new Exception(\"Invalid number\");\n        }\n        if (number\
    \ == 0) {\n            return \"\";\n        }\n        long[] values = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for (int i = 0; i\
    \ < values.Length; i++) {\n            while (number >= values[i]) {\n       \
    \         number -= values[i];\n                result += values[i];\n       \
    \     }\n        }\n        return result.ToLower();", "        if (number < 1\
    \ || number > 1000)\n            throw new Exception(\"Invalid number\");\n  \
    \      string roman = \"\";\n        int[] roman_numerals = {1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for (int i = 0; i < roman_numerals.Length;\
    \ i++) {\n            while (number >= roman_numerals[i]) {\n                number\
    \ -= roman_numerals[i];\n                roman += \"M\";\n            }\n    \
    \    }\n        return roman;", "        string roman = \"\";\n        long num\
    \ = number;\n        while (num > 0) {\n            long num2 = num % 10;\n  \
    \          switch (num2) {\n                case 1:\n                    roman\
    \ = roman + \"i\";\n                    break;\n                case 2:\n    \
    \                roman = roman + \"ii\";\n                    break;\n       \
    \         case 3:\n                    roman = roman + \"iii\";\n            \
    \        break;\n                case 4:\n                    roman = roman +\
    \ \"iv\";\n                    break;\n                case 5:\n             \
    \       roman = roman + \"v\";\n                    break;\n                case\
    \ 6:\n                    roman = roman + \"vi\";\n                    break;\n\
    \                case 7:\n                    roman = roman + \"vii\";\n     \
    \               break;\n                case 8:\n                    roman = roman\
    \ + \"viii\";\n                    break;\n                case 9:\n         \
    \           roman = roman + \"ix\";\n                    break;\n            \
    \    case 10:\n                    roman = roman + \"x\";\n                  \
    \  break;\n                case 11:\n                    roman = roman + \"xi\"\
    ;\n                    break;\n                case 12:\n                    roman\
    \ = roman + \"xii\";\n                    break;\n                case 13:\n \
    \                   roman = roman + \"xiii\";\n                    break;\n  \
    \              case 14:\n                    roman = roman + \"xiv\";\n      \
    \              break;\n                case 15:\n                    roman = roman\
    \ + \"xv\";\n                    break;\n                case 16:\n          \
    \          roman = roman + \"xvi\";\n                    break;\n            \
    \    case 17:\n                    roman = roman + \"xvii\";\n               \
    \     break;\n                case 18:\n                    roman = roman + \"\
    xviii\";\n                    break;\n                case 19:\n             \
    \       roman = roman + \"xix\";\n                    break;\n               \
    \ case 20:\n                    roman = roman + \"xx\";\n                    break;\n\
    \                case 21:\n                    roman = roman + \"xxi\";\n    \
    \                break;\n                case 22:\n                    roman =\
    \ roman + \"xxii\";\n                    break;\n                case 23:\n  \
    \                  roman = roman + \"xxiii\";\n                    break;\n  \
    \              case 24:\n                    roman = roman + \"xxiv\";\n     \
    \               break", "        string result = \"\";\n        if (number < 1\
    \ || number > 1000)\n            throw new Exception(\"Invalid number\");\n  \
    \      for (int i = 0; i < 4; i++) {\n            int num = number % 10;\n   \
    \         if (num == 0)\n                break;\n            if (num == 1)\n \
    \               result += \"i\";\n            else if (num == 2)\n           \
    \     result += \"ii\";\n            else if (num == 3)\n                result\
    \ += \"iii\";\n            else if (num == 4)\n                result += \"iv\"\
    ;\n            else if (num == 5)\n                result += \"v\";\n        \
    \    else if (num == 6)\n                result += \"vi\";\n            else if\
    \ (num == 7)\n                result += \"vii\";\n            else if (num ==\
    \ 8)\n                result += \"viii\";\n            else if (num == 9)\n  \
    \              result += \"ix\";\n            number /= 10;\n        }\n     \
    \   return result;", "        if (number < 1 || number > 1000)\n            throw\
    \ new Exception(\"Invalid number\");\n\n        // Create a string builder to\
    \ hold the roman numeral\n        StringBuilder roman = new StringBuilder();\n\
    \n        // Create a dictionary to hold the roman numerals\n        Dictionary<long,\
    \ string> romanNumerals = new Dictionary<long, string>();\n        romanNumerals.Add(1000,\
    \ \"M\");\n        romanNumerals.Add(900, \"CM\");\n        romanNumerals.Add(500,\
    \ \"D\");\n        romanNumerals.Add(400, \"CD\");\n        romanNumerals.Add(100,\
    \ \"C\");\n        romanNumerals.Add(90, \"XC\");\n        romanNumerals.Add(50,\
    \ \"L\");\n        romanNumerals.Add(40, \"XL\");\n        romanNumerals.Add(10,\
    \ \"X\");\n        romanNumerals.Add(9, \"IX\");\n        romanNumerals.Add(5,\
    \ \"V\");\n        romanNumerals.Add(4, \"IV\");\n        romanNumerals.Add(1,\
    \ \"I\");\n\n        // Iterate through the number, and add the roman numeral\n\
    \        // to the string builder\n        while (number > 0) {\n            long\
    \ num = number % 10;\n            if (num != 0) {\n                roman.Append(romanNumerals[num]);\n\
    \            }\n            number /= 10;\n        }\n\n        // Return the\
    \ string\n        return roman.ToString();", "        if (number < 1 || number\
    \ > 1000)\n            throw new Exception(\"Invalid number\");\n\n        string\
    \ result = \"\";\n        int[] digits = {1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1};\n        int[] roman = {1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1};\n        for (int i = 0; i < digits.Length; i++) {\n      \
    \      while (number >= digits[i]) {\n                number -= digits[i];\n \
    \               result += roman[i];\n            }\n        }\n        return\
    \ result;", "        string roman = \"\";\n        long num = number;\n      \
    \  while (num > 0) {\n            long num1 = num % 10;\n            if (num1\
    \ == 1) {\n                roman = \"x\" + roman;\n            }\n           \
    \ else if (num1 == 2) {\n                roman = \"x\" + roman;\n            }\n\
    \            else if (num1 == 3) {\n                roman = \"c\" + roman;\n \
    \           }\n            else if (num1 == 4) {\n                roman = \"c\"\
    \ + roman;\n            }\n            else if (num1 == 5) {\n               \
    \ roman = \"d\" + roman;\n            }\n            else if (num1 == 6) {\n \
    \               roman = \"d\" + roman;\n            }\n            else if (num1\
    \ == 7) {\n                roman = \"m\" + roman;\n            }\n           \
    \ else if (num1 == 8) {\n                roman = \"m\" + roman;\n            }\n\
    \            else if (num1 == 9) {\n                roman = \"x\" + roman;\n \
    \           }\n            else if (num1 == 0) {\n                roman = \"x\"\
    \ + roman;\n            }\n            num = num / 10;\n        }\n        return\
    \ roman;", "        string roman = \"\";\n        if (number < 1 || number > 1000)\n\
    \            throw new Exception(\"Invalid number\");\n        if (number == 1)\n\
    \            roman = \"i\";\n        else if (number == 2)\n            roman\
    \ = \"ii\";\n        else if (number == 3)\n            roman = \"iii\";\n   \
    \     else if (number == 4)\n            roman = \"iv\";\n        else if (number\
    \ == 5)\n            roman = \"v\";\n        else if (number == 6)\n         \
    \   roman = \"vi\";\n        else if (number == 7)\n            roman = \"vii\"\
    ;\n        else if (number == 8)\n            roman = \"viii\";\n        else\
    \ if (number == 9)\n            roman = \"ix\";\n        else if (number == 10)\n\
    \            roman = \"x\";\n        else if (number == 11)\n            roman\
    \ = \"xi\";\n        else if (number == 12)\n            roman = \"xii\";\n  \
    \      else if (number == 13)\n            roman = \"xiii\";\n        else if\
    \ (number == 14)\n            roman = \"xiv\";\n        else if (number == 15)\n\
    \            roman = \"xv\";\n        else if (number == 16)\n            roman\
    \ = \"xvi\";\n        else if (number == 17)\n            roman = \"xvii\";\n\
    \        else if (number == 18)\n            roman = \"xviii\";\n        else\
    \ if (number == 19)\n            roman = \"xix\";\n        else if (number ==\
    \ 20)\n            roman = \"xx\";\n        else if (number == 30)\n         \
    \   roman = \"xxx\";\n        else if (number == 40)\n            roman = \"xl\"\
    ;\n        else if (number == 50)\n            roman = \"l\";\n        else if\
    \ (number == 60)\n            roman = \"lx\";\n        else if (number == 70)\n\
    \            roman = \"lxx\";\n        else if (number == 80)\n            roman\
    \ = \"lxxx\";\n        else if (number == 90)\n            roman = \"xc\";\n \
    \       else if (number == 100)\n            roman = \"c\";\n        else if (number\
    \ == 200)\n            roman = \"cc\";\n        else if (", "        if (number\
    \ < 1 || number > 1000)\n            throw new ArgumentOutOfRangeException(\"\
    number\");\n\n        string result = \"\";\n        int[] roman = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for (int i = 0; i < roman.Length;\
    \ i++) {\n            while (number >= roman[i]) {\n                number -=\
    \ roman[i];\n                result += roman[i];\n            }\n        }\n \
    \       return result.ToLower();", "        if (number < 1 || number > 1000)\n\
    \            throw new Exception(\"Invalid number\");\n        string[] roman\
    \ = new string[] { \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\"\
    , \"viii\", \"ix\" };\n        string result = \"\";\n        for (int i = 0;\
    \ i < roman.Length; i++) {\n            while (number >= roman[i].Length) {\n\
    \                number -= roman[i].Length;\n                result += roman[i];\n\
    \            }\n        }\n        return result;", "        string result = \"\
    \";\n        if (number < 0) {\n            throw new Exception(\"Invalid number\"\
    );\n        }\n        if (number > 1000) {\n            throw new Exception(\"\
    Invalid number\");\n        }\n        int[] roman = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] digits = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] tens = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] hundreds = {1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] thousands = {1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] thousands_ten = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] thousands_hundred\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] thousands_thousand\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] thousands_thousands\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] hundreds_ten\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] hundreds_hundred\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] hundreds_thousand\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] hundreds_thousands\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] hundreds_thousands_ten\
    \ = {", "        if (number < 1 || number > 1000)\n            throw new Exception(\"\
    Invalid number\");\n\n        string roman = \"\";\n        long num = number;\n\
    \        while (num > 0) {\n            roman = roman + IntToRoman(num % 10);\n\
    \            num /= 10;\n        }\n        return roman;\n    }\n\n    // Given\
    \ a positive integer, obtain its roman numeral equivalent as a string,\n    //\
    \ and return it in lowercase.\n    // Restrictions: 1 <= num <= 1000\n    // Examples:\n\
    \    // >>> IntToRoman(19)\n    // (\"xix\")\n    // >>> IntToRoman(152)\n   \
    \ // (\"clii\")\n    // >>> IntToRoman(426)\n    // (\"cdxxvi\")\n    public static\
    \ string IntToRoman(int number) {\n        if (number < 1 || number > 1000)\n\
    \            throw new Exception(\"Invalid number\");\n\n        string roman\
    \ = \"\";\n        int num = number;\n        while (num > 0) {\n            roman\
    \ = roman + IntToRoman(num % 10);\n            num /= 10;\n        }\n       \
    \ return roman;\n    }\n\n    // Given a positive integer, obtain its roman numeral\
    \ equivalent as a string,\n    // and return it in lowercase.\n    // Restrictions:\
    \ 1 <= num <= 1000\n    // Examples:\n    // >>> IntToRoman(19)\n    // (\"xix\"\
    )\n    // >>> IntToRoman(152)\n    // (\"clii\")\n    // >>> IntToRoman(426)\n\
    \    // (\"cdxxvi\")\n    public static string IntToRoman(long number) {\n   \
    \     if (number < 1 || number > 1000)\n            throw new Exception(\"Invalid\
    \ number\");\n\n        string roman = \"\";\n        long num = number;\n   \
    \     while (num > 0) {\n            roman = roman + IntToRoman(num % 10);\n \
    \           num /= 10;\n        }\n        return roman;\n    }\n\n    // Given\
    \ a positive integer, obtain its roman numeral equivalent as a string,\n    //\
    \ and return it in lowercase.\n    // Restrictions: 1 <= num <= 1000\n    // Examples:\n\
    \    // >>> IntToRoman(19)\n", "        string result = \"\";\n        if (number\
    \ < 1 || number > 1000)\n            throw new Exception(\"Invalid number\");\n\
    \        if (number == 1)\n            result = \"i\";\n        else if (number\
    \ == 2)\n            result = \"ii\";\n        else if (number == 3)\n       \
    \     result = \"iii\";\n        else if (number == 4)\n            result = \"\
    iv\";\n        else if (number == 5)\n            result = \"v\";\n        else\
    \ if (number == 6)\n            result = \"vi\";\n        else if (number == 7)\n\
    \            result = \"vii\";\n        else if (number == 8)\n            result\
    \ = \"viii\";\n        else if (number == 9)\n            result = \"ix\";\n \
    \       else if (number == 10)\n            result = \"x\";\n        else if (number\
    \ == 11)\n            result = \"xi\";\n        else if (number == 12)\n     \
    \       result = \"xii\";\n        else if (number == 13)\n            result\
    \ = \"xiii\";\n        else if (number == 14)\n            result = \"xiv\";\n\
    \        else if (number == 15)\n            result = \"xv\";\n        else if\
    \ (number == 16)\n            result = \"xvi\";\n        else if (number == 17)\n\
    \            result = \"xvii\";\n        else if (number == 18)\n            result\
    \ = \"xviii\";\n        else if (number == 19)\n            result = \"xix\";\n\
    \        else if (number == 20)\n            result = \"xx\";\n        else if\
    \ (number == 30)\n            result = \"xxx\";\n        else if (number == 40)\n\
    \            result = \"xl\";\n        else if (number == 50)\n            result\
    \ = \"l\";\n        else if (number == 60)\n            result = \"lx\";\n   \
    \     else if (number == 70)\n            result = \"lxx\";\n        else if (number\
    \ == 80)\n            result = \"lxxx\";\n        else if (number == 90)\n   \
    \         result = \"xc\";\n        else if (number == 100)\n            result\
    \ = \"c\";\n        else if (number == 200)\n            result = \"cc\";\n  \
    \      else if (number", "        string roman = \"\";\n        if (number < 0)\n\
    \            throw new Exception(\"Negative number\");\n        if (number > 1000)\n\
    \            throw new Exception(\"Number too big\");\n        int[] roman_numbers\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] roman_numbers_reversed\
    \ = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900};\n        for (int i = 0;\
    \ i < roman_numbers.Length; i++) {\n            while (number >= roman_numbers[i])\
    \ {\n                number -= roman_numbers[i];\n                roman += roman_numbers_reversed[i];\n\
    \            }\n        }\n        return roman;", "        string roman = \"\"\
    ;\n        if (number < 1 || number > 1000)\n            throw new Exception(\"\
    Invalid number\");\n        int[] digits = new int[4];\n        digits[0] = 1000;\n\
    \        digits[1] = 900;\n        digits[2] = 500;\n        digits[3] = 100;\n\
    \        for (int i = 0; i < 4; i++) {\n            while (number >= digits[i])\
    \ {\n                roman += \"m\";\n                number -= digits[i];\n \
    \           }\n        }\n        return roman;", "        string[] roman = {\
    \ \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"\
    \ };\n        string result = \"\";\n        while (number > 0) {\n          \
    \  int digit = number % 10;\n            number /= 10;\n            result = roman[digit]\
    \ + result;\n        }\n        return result;", "        if (number < 1 || number\
    \ > 1000)\n            throw new InvalidOperationException(\"number must be between\
    \ 1 and 1000\");\n        string roman = \"\";\n        int num = number;\n  \
    \      while (num > 0) {\n            int digit = num % 10;\n            switch\
    \ (digit) {\n                case 1:\n                    roman = \"i\" + roman;\n\
    \                    break;\n                case 2:\n                    roman\
    \ = \"ii\" + roman;\n                    break;\n                case 3:\n   \
    \                 roman = \"iii\" + roman;\n                    break;\n     \
    \           case 4:\n                    roman = \"iv\" + roman;\n           \
    \         break;\n                case 5:\n                    roman = \"v\" +\
    \ roman;\n                    break;\n                case 6:\n              \
    \      roman = \"vi\" + roman;\n                    break;\n                case\
    \ 7:\n                    roman = \"vii\" + roman;\n                    break;\n\
    \                case 8:\n                    roman = \"viii\" + roman;\n    \
    \                break;\n                case 9:\n                    roman =\
    \ \"ix\" + roman;\n                    break;\n                case 10:\n    \
    \                roman = \"x\" + roman;\n                    break;\n        \
    \        case 11:\n                    roman = \"xi\" + roman;\n             \
    \       break;\n                case 12:\n                    roman = \"xii\"\
    \ + roman;\n                    break;\n                case 13:\n           \
    \         roman = \"xiii\" + roman;\n                    break;\n            \
    \    case 14:\n                    roman = \"xiv\" + roman;\n                \
    \    break;\n                case 15:\n                    roman = \"xv\" + roman;\n\
    \                    break;\n                case 16:\n                    roman\
    \ = \"xvi\" + roman;\n                    break;\n                case 17:\n \
    \                   roman = \"xvii\" + roman;\n                    break;\n  \
    \              case 18:\n                    roman = \"xviii\" + roman;\n    \
    \                break;\n                case 19:\n                    roman =\
    \ \"xix\" + roman;\n                    break;\n                case 20:\n   \
    \                 roman = \"xx\" + roman;\n                    break;\n      \
    \          case 30:\n                    roman = \"xxx\" + roman;\n          \
    \          break;\n                case 40:\n                    roman = \"xl\"",
  "        if (number < 1 || number > 1000)\n            throw new ArgumentOutOfRangeException(\"\
    number\");\n        string result = \"\";\n        long num = number;\n      \
    \  while (num > 0) {\n            int digit = (int)(num % 10);\n            if\
    \ (digit == 1)\n                result = result + \"x\";\n            else if\
    \ (digit == 2)\n                result = result + \"c\";\n            else if\
    \ (digit == 3)\n                result = result + \"m\";\n            else if\
    \ (digit == 4)\n                result = result + \"d\";\n            else if\
    \ (digit == 5)\n                result = result + \"l\";\n            else if\
    \ (digit == 6)\n                result = result + \"x\";\n            else if\
    \ (digit == 7)\n                result = result + \"v\";\n            else if\
    \ (digit == 8)\n                result = result + \"i\";\n            else if\
    \ (digit == 9)\n                result = result + \"x\";\n            num = num\
    \ / 10;\n        }\n        return result.ToLower();", "        string result\
    \ = \"\";\n        long num = number;\n        while (num > 0) {\n           \
    \ int digit = (int) (num % 10);\n            switch (digit) {\n              \
    \  case 1:\n                    result = result + \"i\";\n                   \
    \ break;\n                case 2:\n                    result = result + \"ii\"\
    ;\n                    break;\n                case 3:\n                    result\
    \ = result + \"iii\";\n                    break;\n                case 4:\n \
    \                   result = result + \"iv\";\n                    break;\n  \
    \              case 5:\n                    result = result + \"v\";\n       \
    \             break;\n                case 6:\n                    result = result\
    \ + \"vi\";\n                    break;\n                case 7:\n           \
    \         result = result + \"vii\";\n                    break;\n           \
    \     case 8:\n                    result = result + \"viii\";\n             \
    \       break;\n                case 9:\n                    result = result +\
    \ \"ix\";\n                    break;\n                case 10:\n            \
    \        result = result + \"x\";\n                    break;\n              \
    \  case 11:\n                    result = result + \"xi\";\n                 \
    \   break;\n                case 12:\n                    result = result + \"\
    xii\";\n                    break;\n                case 13:\n               \
    \     result = result + \"xiii\";\n                    break;\n              \
    \  case 14:\n                    result = result + \"xiv\";\n                \
    \    break;\n                case 15:\n                    result = result + \"\
    xv\";\n                    break;\n                case 16:\n                \
    \    result = result + \"xvi\";\n                    break;\n                case\
    \ 17:\n                    result = result + \"xvii\";\n                    break;\n\
    \                case 18:\n                    result = result + \"xviii\";\n\
    \                    break;\n                case 19:\n                    result\
    \ = result + \"xix\";\n                    break;\n                case 20:\n\
    \                    result = result + \"xx\";\n                    break;\n \
    \               case 21:\n                    result = result + \"xxi\";\n   \
    \                 break;\n                case 22:\n                    result\
    \ = result + \"xxii\";\n                    break;\n                case 23:\n\
    \                    result = result + \"xxiii\";\n                    break;\n\
    \                case 24:\n                    result = result + \"xxiv\";\n \
    \                   break;\n                case 25:\n                    result\
    \ = result + \"xxv\";\n                    break;\n                case", "  \
    \      string result = \"\";\n        long num = number;\n        while (num >\
    \ 0) {\n            long digit = num % 10;\n            if (digit == 4 || digit\
    \ == 9) {\n                result = \"cd\" + result;\n            }\n        \
    \    else if (digit == 5) {\n                result = \"d\" + result;\n      \
    \      }\n            else if (digit == 6) {\n                result = \"m\" +\
    \ result;\n            }\n            else if (digit == 7) {\n               \
    \ result = \"m\" + result;\n            }\n            else if (digit == 8) {\n\
    \                result = \"c\" + result;\n            }\n            else if\
    \ (digit == 9) {\n                result = \"x\" + result;\n            }\n  \
    \          else {\n                result = String.valueOf(digit) + result;\n\
    \            }\n            num /= 10;\n        }\n        return result.ToLower();",
  "        if (number < 1 || number > 1000)\n            throw new Exception(\"Invalid\
    \ number\");\n        string result = \"\";\n        int[] digits = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] digits_rev = {1,\
    \ 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900};\n        for (int i = 0; i < digits.length;\
    \ i++) {\n            while (number >= digits[i]) {\n                number -=\
    \ digits[i];\n                result += digits_rev[i];\n            }\n      \
    \  }\n        return result;", "        string result = \"\";\n        if (number\
    \ < 1 || number > 1000)\n            throw new Exception(\"Invalid input\");\n\
    \        if (number == 1)\n            result = \"I\";\n        else if (number\
    \ == 2)\n            result = \"II\";\n        else if (number == 3)\n       \
    \     result = \"III\";\n        else if (number == 4)\n            result = \"\
    IV\";\n        else if (number == 5)\n            result = \"V\";\n        else\
    \ if (number == 6)\n            result = \"VI\";\n        else if (number == 7)\n\
    \            result = \"VII\";\n        else if (number == 8)\n            result\
    \ = \"VIII\";\n        else if (number == 9)\n            result = \"IX\";\n \
    \       else if (number == 10)\n            result = \"X\";\n        else if (number\
    \ == 11)\n            result = \"XI\";\n        else if (number == 12)\n     \
    \       result = \"XII\";\n        else if (number == 13)\n            result\
    \ = \"XIII\";\n        else if (number == 14)\n            result = \"XIV\";\n\
    \        else if (number == 15)\n            result = \"XV\";\n        else if\
    \ (number == 16)\n            result = \"XVI\";\n        else if (number == 17)\n\
    \            result = \"XVII\";\n        else if (number == 18)\n            result\
    \ = \"XVIII\";\n        else if (number == 19)\n            result = \"XIX\";\n\
    \        else if (number == 20)\n            result = \"XX\";\n        else if\
    \ (number == 30)\n            result = \"XXX\";\n        else if (number == 40)\n\
    \            result = \"XL\";\n        else if (number == 50)\n            result\
    \ = \"L\";\n        else if (number == 60)\n            result = \"LX\";\n   \
    \     else if (number == 70)\n            result = \"LXX\";\n        else if (number\
    \ == 80)\n            result = \"LXXX\";\n        else if (number == 90)\n   \
    \         result = \"XC\";\n        else if (number == 100)\n            result\
    \ = \"C\";\n        else if (number == 200)\n            result = \"CC\";\n  \
    \      else if (number ==", "        string roman = \"\";\n        long num =\
    \ number;\n        while (num > 0) {\n            int digit = (int) (num % 10);\n\
    \            switch (digit) {\n                case 1:\n                    roman\
    \ = roman + \"i\";\n                    break;\n                case 2:\n    \
    \                roman = roman + \"ii\";\n                    break;\n       \
    \         case 3:\n                    roman = roman + \"iii\";\n            \
    \        break;\n                case 4:\n                    roman = roman +\
    \ \"iv\";\n                    break;\n                case 5:\n             \
    \       roman = roman + \"v\";\n                    break;\n                case\
    \ 6:\n                    roman = roman + \"vi\";\n                    break;\n\
    \                case 7:\n                    roman = roman + \"vii\";\n     \
    \               break;\n                case 8:\n                    roman = roman\
    \ + \"viii\";\n                    break;\n                case 9:\n         \
    \           roman = roman + \"ix\";\n                    break;\n            \
    \    case 10:\n                    roman = roman + \"x\";\n                  \
    \  break;\n                case 11:\n                    roman = roman + \"xi\"\
    ;\n                    break;\n                case 12:\n                    roman\
    \ = roman + \"xii\";\n                    break;\n                case 13:\n \
    \                   roman = roman + \"xiii\";\n                    break;\n  \
    \              case 14:\n                    roman = roman + \"xiv\";\n      \
    \              break;\n                case 15:\n                    roman = roman\
    \ + \"xv\";\n                    break;\n                case 16:\n          \
    \          roman = roman + \"xvi\";\n                    break;\n            \
    \    case 17:\n                    roman = roman + \"xvii\";\n               \
    \     break;\n                case 18:\n                    roman = roman + \"\
    xviii\";\n                    break;\n                case 19:\n             \
    \       roman = roman + \"xix\";\n                    break;\n               \
    \ case 20:\n                    roman = roman + \"xx\";\n                    break;\n\
    \                case 21:\n                    roman = roman + \"xxi\";\n    \
    \                break;\n                case 22:\n                    roman =\
    \ roman + \"xxii\";\n                    break;\n                case 23:\n  \
    \                  roman = roman + \"xxiii\";\n                    break;\n  \
    \              case 24:\n                    roman = roman + \"xxiv\";\n", " \
    \       if (number < 1 || number > 1000)\n            throw new Exception(\"Invalid\
    \ input\");\n        string result = \"\";\n        long num = number;\n     \
    \   while (num > 0) {\n            long digit = num % 10;\n            if (digit\
    \ == 1)\n                result = result + \"x\";\n            else if (digit\
    \ == 2)\n                result = result + \"c\";\n            else if (digit\
    \ == 3)\n                result = result + \"m\";\n            else if (digit\
    \ == 4)\n                result = result + \"d\";\n            else if (digit\
    \ == 5)\n                result = result + \"l\";\n            else if (digit\
    \ == 6)\n                result = result + \"v\";\n            else if (digit\
    \ == 7)\n                result = result + \"x\";\n            else if (digit\
    \ == 8)\n                result = result + \"l\";\n            else if (digit\
    \ == 9)\n                result = result + \"c\";\n            num = num / 10;\n\
    \        }\n        return result.ToLower();", "        if (number < 1 || number\
    \ > 1000)\n            throw new InvalidOperationException(\"Invalid number\"\
    );\n\n        string roman = \"\";\n        int[] digits = {1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] nums = {1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int i = 0;\n        while (number\
    \ > 0) {\n            while (number >= nums[i]) {\n                number -= nums[i];\n\
    \                roman += digits[i];\n            }\n            i++;\n      \
    \  }\n        return roman;", "        string result = \"\";\n        if (number\
    \ <= 0)\n            throw new Exception(\"Invalid number\");\n        if (number\
    \ > 1000)\n            throw new Exception(\"Invalid number\");\n        long\
    \ num = number;\n        while (num > 0) {\n            int digit = (int) (num\
    \ % 10);\n            if (digit == 1)\n                result = result + \"i\"\
    ;\n            else if (digit == 2)\n                result = result + \"ii\"\
    ;\n            else if (digit == 3)\n                result = result + \"iii\"\
    ;\n            else if (digit == 4)\n                result = result + \"iv\"\
    ;\n            else if (digit == 5)\n                result = result + \"v\";\n\
    \            else if (digit == 6)\n                result = result + \"vi\";\n\
    \            else if (digit == 7)\n                result = result + \"vii\";\n\
    \            else if (digit == 8)\n                result = result + \"viii\"\
    ;\n            else if (digit == 9)\n                result = result + \"ix\"\
    ;\n            num = num / 10;\n        }\n        return result.ToLower();",
  "        string result = \"\";\n        long num = number;\n        while (num >\
    \ 0) {\n            long digit = num % 10;\n            if (digit == 1) {\n  \
    \              result = result + \"i\";\n            }\n            else if (digit\
    \ == 2) {\n                result = result + \"ii\";\n            }\n        \
    \    else if (digit == 3) {\n                result = result + \"iii\";\n    \
    \        }\n            else if (digit == 4) {\n                result = result\
    \ + \"iv\";\n            }\n            else if (digit == 5) {\n             \
    \   result = result + \"v\";\n            }\n            else if (digit == 6)\
    \ {\n                result = result + \"vi\";\n            }\n            else\
    \ if (digit == 7) {\n                result = result + \"vii\";\n            }\n\
    \            else if (digit == 8) {\n                result = result + \"viii\"\
    ;\n            }\n            else if (digit == 9) {\n                result =\
    \ result + \"ix\";\n            }\n            else if (digit == 0) {\n      \
    \          result = result + \"x\";\n            }\n            num = num / 10;\n\
    \        }\n        return result.ToLower();", "        string roman = \"\";\n\
    \        int[] digits = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \        int[] digits_rev = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n\
    \        for (int i = 0; i < digits.length; i++) {\n            while (number\
    \ >= digits[i]) {\n                number -= digits[i];\n                roman\
    \ += digits_rev[i];\n            }\n        }\n        return roman;", "     \
    \   string[] roman = { \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"\
    vii\", \"viii\", \"ix\" };\n        string[] num = { \"\", \"\", \"c\", \"cc\"\
    , \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\" };\n        string result\
    \ = \"\";\n        int i = 0;\n        while (number > 0) {\n            if (number\
    \ >= num[i]) {\n                number -= num[i];\n                result += roman[i];\n\
    \            }\n            else {\n                i++;\n            }\n    \
    \    }\n        return result.ToLower();", "        string roman = \"\";\n   \
    \     if (number == 0)\n            return \"\";\n        if (number < 0)\n  \
    \          throw new Exception(\"Negative numbers are not supported\");\n    \
    \    if (number > 1000)\n            throw new Exception(\"Numbers greater than\
    \ 1000 are not supported\");\n        if (number < 10) {\n            roman =\
    \ \"\";\n            for (int i = 0; i < number; i++)\n                roman +=\
    \ \"i\";\n        }\n        else if (number < 100) {\n            roman = \"\"\
    ;\n            for (int i = 0; i < number / 10; i++)\n                roman +=\
    \ \"c\";\n            for (int i = 0; i < number % 10; i++)\n                roman\
    \ += \"i\";\n        }\n        else if (number < 1000) {\n            roman =\
    \ \"\";\n            for (int i = 0; i < number / 100; i++)\n                roman\
    \ += \"c\";\n            for (int i = 0; i < number % 100 / 10; i++)\n       \
    \         roman += \"x\";\n            for (int i = 0; i < number % 100 % 10;\
    \ i++)\n                roman += \"i\";\n        }\n        return roman;", " \
    \       string roman = \"\";\n        if (number < 1 || number > 1000)\n     \
    \       throw new Exception(\"Invalid number\");\n        for (int i = 0; i <\
    \ 4; i++) {\n            int num = number % 10;\n            if (num == 9) {\n\
    \                roman = \"ix\" + roman;\n                number -= 9;\n     \
    \       }\n            else if (num == 4) {\n                roman = \"iv\" +\
    \ roman;\n                number -= 4;\n            }\n            else if (num\
    \ == 5) {\n                roman = \"v\" + roman;\n                number -= 5;\n\
    \            }\n            else if (num == 1) {\n                roman = \"i\"\
    \ + roman;\n                number -= 1;\n            }\n            else if (num\
    \ == 2) {\n                roman = \"ii\" + roman;\n                number -=\
    \ 2;\n            }\n            else if (num == 3) {\n                roman =\
    \ \"iii\" + roman;\n                number -= 3;\n            }\n            else\
    \ if (num == 0) {\n                roman = \"x\" + roman;\n                number\
    \ -= 0;\n            }\n        }\n        return roman.ToLower();", "       \
    \ string roman = \"\";\n        int[] roman_numerals = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] roman_numerals_rev = {1, 4, 5, 9,\
    \ 10, 40, 50, 90, 100, 400, 500, 900};\n        int roman_num = 0;\n        int\
    \ roman_num_rev = 0;\n        int i = 0;\n        while (number > 0) {\n     \
    \       roman_num = number % roman_numerals[i];\n            roman_num_rev = number\
    \ / roman_numerals[i];\n            if (roman_num_rev > 0) {\n               \
    \ roman = roman + roman_numerals_rev[i] + roman_numerals[i];\n               \
    \ number = number - roman_numerals[i] * roman_numerals_rev[i];\n            }\n\
    \            else {\n                roman = roman + roman_numerals[i];\n    \
    \            number = number - roman_numerals[i];\n            }\n           \
    \ i++;\n        }\n        return roman.ToLower();", "        string roman = \"\
    \";\n        if (number < 1 || number > 1000)\n            throw new Exception(\"\
    Invalid number\");\n        for (int i = 0; i < 4; i++) {\n            long num\
    \ = number % 10;\n            if (num == 9)\n                roman += \"ix\";\n\
    \            else if (num == 4)\n                roman += \"iv\";\n          \
    \  else if (num == 5)\n                roman += \"v\";\n            else if (num\
    \ == 6)\n                roman += \"vi\";\n            else if (num == 7)\n  \
    \              roman += \"vii\";\n            else if (num == 8)\n           \
    \     roman += \"viii\";\n            else if (num == 9)\n                roman\
    \ += \"ix\";\n            else if (num == 1)\n                roman += \"i\";\n\
    \            else if (num == 2)\n                roman += \"ii\";\n          \
    \  else if (num == 3)\n                roman += \"iii\";\n            number /=\
    \ 10;\n        }\n        return roman;", "        string roman = \"\";\n    \
    \    long num = number;\n        while (num > 0) {\n            int digit = num\
    \ % 10;\n            switch (digit) {\n                case 1:\n             \
    \       roman = \"i\" + roman;\n                    break;\n                case\
    \ 2:\n                    roman = \"ii\" + roman;\n                    break;\n\
    \                case 3:\n                    roman = \"iii\" + roman;\n     \
    \               break;\n                case 4:\n                    roman = \"\
    iv\" + roman;\n                    break;\n                case 5:\n         \
    \           roman = \"v\" + roman;\n                    break;\n             \
    \   case 6:\n                    roman = \"vi\" + roman;\n                   \
    \ break;\n                case 7:\n                    roman = \"vii\" + roman;\n\
    \                    break;\n                case 8:\n                    roman\
    \ = \"viii\" + roman;\n                    break;\n                case 9:\n \
    \                   roman = \"ix\" + roman;\n                    break;\n    \
    \            case 10:\n                    roman = \"x\" + roman;\n          \
    \          break;\n                case 11:\n                    roman = \"xi\"\
    \ + roman;\n                    break;\n                case 12:\n           \
    \         roman = \"xii\" + roman;\n                    break;\n             \
    \   case 13:\n                    roman = \"xiii\" + roman;\n                \
    \    break;\n                case 14:\n                    roman = \"xiv\" + roman;\n\
    \                    break;\n                case 15:\n                    roman\
    \ = \"xv\" + roman;\n                    break;\n                case 16:\n  \
    \                  roman = \"xvi\" + roman;\n                    break;\n    \
    \            case 17:\n                    roman = \"xvii\" + roman;\n       \
    \             break;\n                case 18:\n                    roman = \"\
    xviii\" + roman;\n                    break;\n                case 19:\n     \
    \               roman = \"xix\" + roman;\n                    break;\n       \
    \         case 20:\n                    roman = \"xx\" + roman;\n            \
    \        break;\n                case 21:\n                    roman = \"xxi\"\
    \ + roman;\n                    break;\n                case 22:\n           \
    \         roman = \"xxii\" + roman;\n                    break;\n            \
    \    case 23:\n                    roman = \"xxiii\" + roman;\n              \
    \      ", "        string result = \"\";\n        long num = number;\n       \
    \ while (num > 0) {\n            long digit = num % 10;\n            switch (digit)\
    \ {\n                case 1:\n                    result = \"x\" + result;\n \
    \                   break;\n                case 2:\n                    result\
    \ = \"c\" + result;\n                    break;\n                case 3:\n   \
    \                 result = \"m\" + result;\n                    break;\n     \
    \           case 4:\n                    result = \"d\" + result;\n          \
    \          break;\n                case 5:\n                    result = \"l\"\
    \ + result;\n                    break;\n                case 6:\n           \
    \         result = \"x\" + result;\n                    break;\n             \
    \   case 7:\n                    result = \"v\" + result;\n                  \
    \  break;\n                case 8:\n                    result = \"i\" + result;\n\
    \                    break;\n                case 9:\n                    result\
    \ = \"c\" + result;\n                    break;\n                case 10:\n  \
    \                  result = \"x\" + result;\n                    break;\n    \
    \            case 11:\n                    result = \"l\" + result;\n        \
    \            break;\n                case 12:\n                    result = \"\
    x\" + result;\n                    break;\n                case 13:\n        \
    \            result = \"c\" + result;\n                    break;\n          \
    \      case 14:\n                    result = \"d\" + result;\n              \
    \      break;\n                case 15:\n                    result = \"m\" +\
    \ result;\n                    break;\n                case 16:\n            \
    \        result = \"c\" + result;\n                    break;\n              \
    \  case 17:\n                    result = \"v\" + result;\n                  \
    \  break;\n                case 18:\n                    result = \"i\" + result;\n\
    \                    break;\n                case 19:\n                    result\
    \ = \"x\" + result;\n                    break;\n                case 20:\n  \
    \                  result = \"l\" + result;\n                    break;\n    \
    \            case 21:\n                    result = \"x\" + result;\n        \
    \            break;\n                case 22:\n                    result = \"\
    c\" + result;\n                    break;\n                case 23:\n        \
    \            result = \"d\" + result;\n                    break;\n          \
    \      case 24:\n                    result = \"m\" + result;\n              \
    \      break;\n                case 25:\n                    result = \"c\" +\
    \ result;\n                    break", "        string roman = \"\";\n       \
    \ if (number < 1 || number > 1000)\n            throw new Exception(\"Invalid\
    \ number\");\n        long[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1};\n        for (int i = 0; i < values.Length; i++) {\n          \
    \  while (number >= values[i]) {\n                number -= values[i];\n     \
    \           roman += values[i];\n            }\n        }\n        return roman;",
  "        string result = \"\";\n        long num = number;\n        while (num >\
    \ 0) {\n            long digit = num % 10;\n            if (digit == 4 || digit\
    \ == 9) {\n                result = \" \" + result;\n            }\n         \
    \   result = numToRoman(digit) + result;\n            num /= 10;\n        }\n\
    \        return result.ToLower();\n    }\n\n    // Convert a digit to its roman\
    \ numeral equivalent.\n    private static string numToRoman(long digit) {\n  \
    \      switch (digit) {\n            case 1: return \"I\";\n            case 2:\
    \ return \"II\";\n            case 3: return \"III\";\n            case 4: return\
    \ \"IV\";\n            case 5: return \"V\";\n            case 6: return \"VI\"\
    ;\n            case 7: return \"VII\";\n            case 8: return \"VIII\";\n\
    \            case 9: return \"IX\";\n            default: return \"\";\n     \
    \   }", "        string result = \"\";\n        if (number < 0) {\n          \
    \  throw new ArgumentOutOfRangeException(\"number\");\n        }\n        if (number\
    \ > 1000) {\n            throw new ArgumentOutOfRangeException(\"number\");\n\
    \        }\n        if (number == 0) {\n            return \"\";\n        }\n\
    \        int[] roman = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \        int[] arabic = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \        for (int i = 0; i < roman.length; i++) {\n            while (number >=\
    \ roman[i]) {\n                number -= roman[i];\n                result +=\
    \ arabic[i];\n            }\n        }\n        return result;", "        string\
    \ result = \"\";\n        if (number < 1 || number > 1000) {\n            throw\
    \ new Exception(\"Invalid number\");\n        }\n        int[] digits = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] roman = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for (int i = 0; i\
    \ < digits.Length; i++) {\n            while (number >= digits[i]) {\n       \
    \         number -= digits[i];\n                result += roman[i];\n        \
    \    }\n        }\n        return result;", "        string roman = \"\";\n  \
    \      long num = number;\n        while (num > 0) {\n            long rem = num\
    \ % 10;\n            if (rem == 4 || rem == 9) {\n                roman = \"cd\"\
    \ + roman;\n                num -= 4;\n            }\n            else if (rem\
    \ == 5) {\n                roman = \"cd\" + roman;\n                num -= 5;\n\
    \            }\n            else if (rem == 1) {\n                roman = \"x\"\
    \ + roman;\n                num -= 1;\n            }\n            else if (rem\
    \ == 2) {\n                roman = \"x\" + roman;\n                num -= 2;\n\
    \            }\n            else if (rem == 3) {\n                roman = \"x\"\
    \ + roman;\n                num -= 3;\n            }\n            else if (rem\
    \ == 6) {\n                roman = \"cd\" + roman;\n                num -= 6;\n\
    \            }\n            else if (rem == 7) {\n                roman = \"cd\"\
    \ + roman;\n                num -= 7;\n            }\n            else if (rem\
    \ == 8) {\n                roman = \"cd\" + roman;\n                num -= 8;\n\
    \            }\n            else if (rem == 0) {\n                roman = \"x\"\
    \ + roman;\n                num -= 0;\n            }\n        }\n        return\
    \ roman;", "        string[] roman = new string[] { \"\", \"i\", \"ii\", \"iii\"\
    , \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\" };\n        string result =\
    \ \"\";\n        for (int i = 0; i < roman.length; i++) {\n            while (number\
    \ >= roman[i].length()) {\n                number -= roman[i].length();\n    \
    \            result += roman[i];\n            }\n        }\n        return result;",
  "        string roman = \"\";\n        long num = number;\n        while (num >\
    \ 0) {\n            roman = roman + IntToRoman(num % 10);\n            num /=\
    \ 10;\n        }\n        return roman;\n    }\n\n    // Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\n    // and return it in lowercase.\n\
    \    // Restrictions: 1 <= num <= 1000\n    // Examples:\n    // >>> IntToRoman(19)\n\
    \    // \"xix\"\n    // >>> IntToRoman(152)\n    // \"clii\"\n    // >>> IntToRoman(426)\n\
    \    // \"cdxxvi\"\n    public static string IntToRoman(long number) {\n     \
    \   string roman = \"\";\n        long num = number;\n        while (num > 0)\
    \ {\n            roman = roman + IntToRoman(num % 10);\n            num /= 10;\n\
    \        }\n        return roman;\n    }\n\n    // Given a positive integer, obtain\
    \ its roman numeral equivalent as a string,\n    // and return it in lowercase.\n\
    \    // Restrictions: 1 <= num <= 1000\n    // Examples:\n    // >>> IntToRoman(19)\n\
    \    // \"xix\"\n    // >>> IntToRoman(152)\n    // \"clii\"\n    // >>> IntToRoman(426)\n\
    \    // \"cdxxvi\"\n    public static string IntToRoman(int number) {\n      \
    \  return IntToRoman((long) number);\n    }\n\n    // Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\n    // and return it in lowercase.\n\
    \    // Restrictions: 1 <= num <= 1000\n    // Examples:\n    // >>> IntToRoman(19)\n\
    \    // \"xix\"\n    // >>> IntToRoman(152)\n    // \"clii\"\n    // >>> IntToRoman(426)\n\
    \    // \"cdxxvi\"\n    public static string IntToRoman(long number) {\n     \
    \   string roman = \"\";\n        long num = number;\n        while (num > 0)\
    \ {\n            roman = roman + IntToRoman(num % 10);\n            num /= 10;\n\
    \        }\n        return r", "        string roman = \"\";\n        if (number\
    \ < 1 || number > 1000)\n            throw new Exception(\"Invalid number\");\n\
    \        if (number == 1)\n            roman = \"i\";\n        else if (number\
    \ == 2)\n            roman = \"ii\";\n        else if (number == 3)\n        \
    \    roman = \"iii\";\n        else if (number == 4)\n            roman = \"iv\"\
    ;\n        else if (number == 5)\n            roman = \"v\";\n        else if\
    \ (number == 6)\n            roman = \"vi\";\n        else if (number == 7)\n\
    \            roman = \"vii\";\n        else if (number == 8)\n            roman\
    \ = \"viii\";\n        else if (number == 9)\n            roman = \"ix\";\n  \
    \      else if (number == 10)\n            roman = \"x\";\n        else if (number\
    \ == 11)\n            roman = \"xi\";\n        else if (number == 12)\n      \
    \      roman = \"xii\";\n        else if (number == 13)\n            roman = \"\
    xiii\";\n        else if (number == 14)\n            roman = \"xiv\";\n      \
    \  else if (number == 15)\n            roman = \"xv\";\n        else if (number\
    \ == 16)\n            roman = \"xvi\";\n        else if (number == 17)\n     \
    \       roman = \"xvii\";\n        else if (number == 18)\n            roman =\
    \ \"xviii\";\n        else if (number == 19)\n            roman = \"xix\";\n \
    \       else if (number == 20)\n            roman = \"xx\";\n        else if (number\
    \ == 30)\n            roman = \"xxx\";\n        else if (number == 40)\n     \
    \       roman = \"xl\";\n        else if (number == 50)\n            roman = \"\
    l\";\n        else if (number == 60)\n            roman = \"lx\";\n        else\
    \ if (number == 70)\n            roman = \"lxx\";\n        else if (number ==\
    \ 80)\n            roman = \"lxxx\";\n        else if (number == 90)\n       \
    \     roman = \"xc\";\n        else if (number == 100)\n            roman = \"\
    c\";\n        else if (number == 200)\n            roman = \"cc\";\n        else\
    \ if (", "        string result = \"\";\n        long num = number;\n        while\
    \ (num > 0) {\n            long digit = num % 10;\n            if (digit == 1)\
    \ {\n                result = result + \"x\";\n            }\n            else\
    \ if (digit == 2) {\n                result = result + \"c\";\n            }\n\
    \            else if (digit == 3) {\n                result = result + \"m\";\n\
    \            }\n            else if (digit == 4) {\n                result = result\
    \ + \"d\";\n            }\n            else if (digit == 5) {\n              \
    \  result = result + \"l\";\n            }\n            else if (digit == 6) {\n\
    \                result = result + \"x\";\n            }\n            else if\
    \ (digit == 7) {\n                result = result + \"v\";\n            }\n  \
    \          else if (digit == 8) {\n                result = result + \"i\";\n\
    \            }\n            else if (digit == 9) {\n                result = result\
    \ + \"c\";\n            }\n            else if (digit == 0) {\n              \
    \  result = result + \"c\";\n            }\n            num = num / 10;\n    \
    \    }\n        return result.ToLower();", "        if (number < 1 || number >\
    \ 1000)\n            throw new InvalidOperationException(\"Argument must be between\
    \ 1 and 1000.\");\n        string roman = \"\";\n        int[] digits = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for (int i = 0; i\
    \ < digits.Length; i++) {\n            while (number >= digits[i]) {\n       \
    \         number -= digits[i];\n                roman += \"m\";\n            }\n\
    \        }\n        return roman;", "        if (number < 1 || number > 1000)\n\
    \            throw new Exception(\"Invalid number\");\n        string result =\
    \ \"\";\n        long remainder = number;\n        while (remainder > 0) {\n \
    \           int digit = remainder % 10;\n            remainder = remainder / 10;\n\
    \            if (digit == 1)\n                result = result + \"i\";\n     \
    \       else if (digit == 2)\n                result = result + \"ii\";\n    \
    \        else if (digit == 3)\n                result = result + \"iii\";\n  \
    \          else if (digit == 4)\n                result = result + \"iv\";\n \
    \           else if (digit == 5)\n                result = result + \"v\";\n \
    \           else if (digit == 6)\n                result = result + \"vi\";\n\
    \            else if (digit == 7)\n                result = result + \"vii\";\n\
    \            else if (digit == 8)\n                result = result + \"viii\"\
    ;\n            else if (digit == 9)\n                result = result + \"ix\"\
    ;\n            else if (digit == 10)\n                result = result + \"x\"\
    ;\n            else if (digit == 11)\n                result = result + \"xi\"\
    ;\n            else if (digit == 12)\n                result = result + \"xii\"\
    ;\n            else if (digit == 13)\n                result = result + \"xiii\"\
    ;\n            else if (digit == 14)\n                result = result + \"xiv\"\
    ;\n            else if (digit == 15)\n                result = result + \"xv\"\
    ;\n            else if (digit == 16)\n                result = result + \"xvi\"\
    ;\n            else if (digit == 17)\n                result = result + \"xvii\"\
    ;\n            else if (digit == 18)\n                result = result + \"xviii\"\
    ;\n            else if (digit == 19)\n                result = result + \"xix\"\
    ;\n            else if (digit == 20)\n                result = result + \"xx\"\
    ;\n            else if (digit == 21)\n                result = result + \"xxi\"\
    ;\n            else if (digit == 22)\n                result = result + \"xxii\"\
    ;\n            else if (digit == 23)\n                result = result + \"xxiii\"\
    ;\n            else if (digit == 24)\n                result = result + \"xxiv\"\
    ;\n", "        string roman = \"\";\n        long num = number;\n        while\
    \ (num > 0) {\n            long num2 = num % 10;\n            if (num2 == 1) {\n\
    \                roman = roman + \"I\";\n            }\n            else if (num2\
    \ == 5) {\n                roman = roman + \"V\";\n            }\n           \
    \ else if (num2 == 9) {\n                roman = roman + \"X\";\n            }\n\
    \            else if (num2 == 4) {\n                roman = roman + \"IV\";\n\
    \            }\n            else if (num2 == 6) {\n                roman = roman\
    \ + \"VI\";\n            }\n            else if (num2 == 8) {\n              \
    \  roman = roman + \"VIII\";\n            }\n            else if (num2 == 3) {\n\
    \                roman = roman + \"III\";\n            }\n            else if\
    \ (num2 == 7) {\n                roman = roman + \"VII\";\n            }\n   \
    \         else if (num2 == 2) {\n                roman = roman + \"II\";\n   \
    \         }\n            num = num / 10;\n        }\n        return roman;", " \
    \       string roman = \"\";\n        long num = number;\n        while (num >\
    \ 0) {\n            long digit = num % 10;\n            switch (digit) {\n   \
    \             case 1:\n                    roman = \"i\" + roman;\n          \
    \          break;\n                case 2:\n                    roman = \"ii\"\
    \ + roman;\n                    break;\n                case 3:\n            \
    \        roman = \"iii\" + roman;\n                    break;\n              \
    \  case 4:\n                    roman = \"iv\" + roman;\n                    break;\n\
    \                case 5:\n                    roman = \"v\" + roman;\n       \
    \             break;\n                case 6:\n                    roman = \"\
    vi\" + roman;\n                    break;\n                case 7:\n         \
    \           roman = \"vii\" + roman;\n                    break;\n           \
    \     case 8:\n                    roman = \"viii\" + roman;\n               \
    \     break;\n                case 9:\n                    roman = \"ix\" + roman;\n\
    \                    break;\n                case 10:\n                    roman\
    \ = \"x\" + roman;\n                    break;\n                case 11:\n   \
    \                 roman = \"xi\" + roman;\n                    break;\n      \
    \          case 12:\n                    roman = \"xii\" + roman;\n          \
    \          break;\n                case 13:\n                    roman = \"xiii\"\
    \ + roman;\n                    break;\n                case 14:\n           \
    \         roman = \"xiv\" + roman;\n                    break;\n             \
    \   case 15:\n                    roman = \"xv\" + roman;\n                  \
    \  break;\n                case 16:\n                    roman = \"xvi\" + roman;\n\
    \                    break;\n                case 17:\n                    roman\
    \ = \"xvii\" + roman;\n                    break;\n                case 18:\n\
    \                    roman = \"xviii\" + roman;\n                    break;\n\
    \                case 19:\n                    roman = \"xix\" + roman;\n    \
    \                break;\n                case 20:\n                    roman =\
    \ \"xx\" + roman;\n                    break;\n                case 21:\n    \
    \                roman = \"xxi\" + roman;\n                    break;\n      \
    \          case 22:\n                    roman = \"xxii\" + roman;\n         \
    \           break;\n                case 23:\n                    roman = \"xxiii\"\
    \ + roman;\n                    ", "        string roman = \"\";\n        long\
    \ num = number;\n        while (num > 0) {\n            long num1 = num % 10;\n\
    \            if (num1 == 1) {\n                roman = \"x\" + roman;\n      \
    \      }\n            else if (num1 == 2) {\n                roman = \"c\" + roman;\n\
    \            }\n            else if (num1 == 3) {\n                roman = \"\
    cc\" + roman;\n            }\n            else if (num1 == 4) {\n            \
    \    roman = \"ccc\" + roman;\n            }\n            else if (num1 == 5)\
    \ {\n                roman = \"cccc\" + roman;\n            }\n            else\
    \ if (num1 == 6) {\n                roman = \"ccccc\" + roman;\n            }\n\
    \            else if (num1 == 7) {\n                roman = \"cccccc\" + roman;\n\
    \            }\n            else if (num1 == 8) {\n                roman = \"\
    ccccccc\" + roman;\n            }\n            else if (num1 == 9) {\n       \
    \         roman = \"cccccccc\" + roman;\n            }\n            num = num\
    \ / 10;\n        }\n        return roman;", "        string roman = \"\";\n  \
    \      if (number < 1 || number > 1000)\n            throw new Exception(\"Invalid\
    \ number\");\n        if (number == 1)\n            roman = \"I\";\n        else\
    \ if (number == 2)\n            roman = \"II\";\n        else if (number == 3)\n\
    \            roman = \"III\";\n        else if (number == 4)\n            roman\
    \ = \"IV\";\n        else if (number == 5)\n            roman = \"V\";\n     \
    \   else if (number == 6)\n            roman = \"VI\";\n        else if (number\
    \ == 7)\n            roman = \"VII\";\n        else if (number == 8)\n       \
    \     roman = \"VIII\";\n        else if (number == 9)\n            roman = \"\
    IX\";\n        else if (number == 10)\n            roman = \"X\";\n        else\
    \ if (number == 11)\n            roman = \"XI\";\n        else if (number == 12)\n\
    \            roman = \"XII\";\n        else if (number == 13)\n            roman\
    \ = \"XIII\";\n        else if (number == 14)\n            roman = \"XIV\";\n\
    \        else if (number == 15)\n            roman = \"XV\";\n        else if\
    \ (number == 16)\n            roman = \"XVI\";\n        else if (number == 17)\n\
    \            roman = \"XVII\";\n        else if (number == 18)\n            roman\
    \ = \"XVIII\";\n        else if (number == 19)\n            roman = \"XIX\";\n\
    \        else if (number == 20)\n            roman = \"XX\";\n        else if\
    \ (number == 21)\n            roman = \"XXI\";\n        else if (number == 22)\n\
    \            roman = \"XXII\";\n        else if (number == 23)\n            roman\
    \ = \"XXIII\";\n        else if (number == 24)\n            roman = \"XXIV\";\n\
    \        else if (number == 25)\n            roman = \"XXV\";\n        else if\
    \ (number == 26)\n            roman = \"XXVI\";\n        else if (number == 27)\n\
    \            roman = \"XXVII\";\n        else if (number == 28)\n            roman\
    \ = \"XXVIII\";\n        else if (number == 29)\n            roman = \"XXIX\";",
  "        string roman = \"\";\n        if (number < 1 || number > 1000)\n      \
    \      throw new Exception(\"Invalid number\");\n\n        // Initialize the roman\
    \ numeral string\n        roman = \"m\";\n        // Iterate through the number\n\
    \        for (int i = 1; i <= number; i++) {\n            // Get the next roman\
    \ numeral\n            string romanNum = IntToRoman(i);\n            // If the\
    \ roman numeral is greater than the previous one,\n            // add it to the\
    \ string\n            if (romanNum.CompareTo(roman) > 0)\n                roman\
    \ = roman + romanNum;\n        }\n        // Return the roman numeral string\n\
    \        return roman;\n    }\n\n    // Convert a positive integer to its roman\
    \ numeral equivalent\n    // Restrictions: 1 <= num <= 1000\n    // Examples:\n\
    \    // >>> IntToRoman(19)\n    // (\"xix\")\n    // >>> IntToRoman(152)\n   \
    \ // (\"clii\")\n    // >>> IntToRoman(426)\n    // (\"cdxxvi\")\n    public static\
    \ string IntToRoman(long number) {\n        string roman = \"\";\n        if (number\
    \ < 1 || number > 1000)\n            throw new Exception(\"Invalid number\");\n\
    \n        // Initialize the roman numeral string\n        roman = \"m\";\n   \
    \     // Iterate through the number\n        for (int i = 1; i <= number; i++)\
    \ {\n            // Get the next roman numeral\n            string romanNum =\
    \ IntToRoman(i);\n            // If the roman numeral is greater than the previous\
    \ one,\n            // add it to the string\n            if (romanNum.CompareTo(roman)\
    \ > 0)\n                roman = roman + romanNum;\n        }\n        // Return\
    \ the roman numeral string\n        return roman;\n    }\n\n    // Convert a positive\
    \ integer to its roman numeral equivalent\n    // Restrictions: 1 <= num <= 1000\n\
    \    // Examples:\n    // >>> IntToRoman(19)\n    // (\"xix\")\n    // >>> IntToRoman(152)\n\
    \    // (\"clii\")\n    // >>> IntToRoman(426)\n    // (\"cdxxvi\")\n    public\
    \ static", "        string roman = \"\";\n        long num = number;\n       \
    \ while (num > 0) {\n            roman = roman + IntToRoman(num % 10);\n     \
    \       num = num / 10;\n        }\n        return roman;\n    }\n\n    // Convert\
    \ a number to its roman numeral equivalent.\n    // Return the roman numeral as\
    \ a string.\n    //\n    // Examples:\n    // >>> RomanToInt(\"xix\")\n    //\
    \ 19\n    // >>> RomanToInt(\"clii\")\n    // 152\n    // >>> RomanToInt(\"cdxxvi\"\
    )\n    // 426\n    // >>> RomanToInt(\"m\")\n    // 1000\n    // >>> RomanToInt(\"\
    MMMCMXCIX\")\n    // 1999\n    // >>> RomanToInt(\"MMMCMXCIXMMMM\")\n    // 1999\n\
    \    // >>> RomanToInt(\"MMMM\")\n    // 0\n    public static int RomanToInt(string\
    \ roman) {\n        int num = 0;\n        int roman_len = roman.Length;\n    \
    \    for (int i = 0; i < roman_len; i++) {\n            char c = roman[i];\n \
    \           if (c == 'I') {\n                num += 1;\n            } else if\
    \ (c == 'V') {\n                num += 5;\n            } else if (c == 'X') {\n\
    \                num += 10;\n            } else if (c == 'L') {\n            \
    \    num += 50;\n            } else if (c == 'C') {\n                num += 100;\n\
    \            } else if (c == 'D') {\n                num += 500;\n           \
    \ } else if (c == 'M') {\n                num += 1000;\n            }\n      \
    \  }\n        return num;\n    }\n\n    // Convert a roman numeral to its integer\
    \ value.\n    // Return the integer value.\n    //\n    // Examples:\n    // >>>\
    \ RomanToInt(\"MMMCMXCIX\")\n    // 1999\n    // >>> RomanToInt(\"MMMCMXCIXMMMM\"\
    )\n    // 1999\n    // >>> RomanToInt(\"MMMM\")\n    // 0\n    public static int\
    \ RomanToInt(string roman) {\n        int num = 0;\n", "        string result\
    \ = \"\";\n        if (number <= 0)\n            throw new Exception(\"Invalid\
    \ number\");\n        if (number > 1000)\n            throw new Exception(\"Invalid\
    \ number\");\n        long n = number;\n        while (n > 0) {\n            int\
    \ roman = 0;\n            if (n >= 1000) {\n                roman = 1000;\n  \
    \              n -= 1000;\n            }\n            else if (n >= 900) {\n \
    \               roman = 900;\n                n -= 900;\n            }\n     \
    \       else if (n >= 500) {\n                roman = 500;\n                n\
    \ -= 500;\n            }\n            else if (n >= 400) {\n                roman\
    \ = 400;\n                n -= 400;\n            }\n            else if (n >=\
    \ 100) {\n                roman = 100;\n                n -= 100;\n          \
    \  }\n            else if (n >= 90) {\n                roman = 90;\n         \
    \       n -= 90;\n            }\n            else if (n >= 50) {\n           \
    \     roman = 50;\n                n -= 50;\n            }\n            else if\
    \ (n >= 40) {\n                roman = 40;\n                n -= 40;\n       \
    \     }\n            else if (n >= 10) {\n                roman = 10;\n      \
    \          n -= 10;\n            }\n            else if (n >= 9) {\n         \
    \       roman = 9;\n                n -= 9;\n            }\n            else if\
    \ (n >= 5) {\n                roman = 5;\n                n -= 5;\n          \
    \  }\n            else if (n >= 4) {\n                roman = 4;\n           \
    \     n -= 4;\n            }\n            else if (n >= 1) {\n               \
    \ roman = 1;\n                n -= 1;\n            }\n            result += roman;\n\
    \        }\n        return result;", "        string roman = \"\";\n        if\
    \ (number < 1 || number > 1000) {\n            throw new Exception(\"Invalid number\"\
    );\n        }\n        int[] roman_num = {1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1};\n        int[] roman_den = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n        int[] roman_num_rem = {0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0};\n        int[] roman_den_rem = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0};\n        int i = 0;\n        while (number > 0) {\n            roman_num_rem[i]\
    \ = number % roman_num[i];\n            number = number / roman_num[i];\n    \
    \        roman_den_rem[i] = number % roman_den[i];\n            number = number\
    \ / roman_den[i];\n            i++;\n        }\n        for (int j = 0; j < i;\
    \ j++) {\n            if (roman_num_rem[j] != 0) {\n                roman += roman_num_rem[j]\
    \ + roman_num[j];\n            }\n            if (roman_den_rem[j] != 0) {\n \
    \               roman += roman_den_rem[j] + roman_den[j];\n            }\n   \
    \     }\n        return roman.ToLower();", "        if (number < 1 || number >\
    \ 1000)\n            throw new Exception(\"Invalid number\");\n\n        string\
    \ roman = \"\";\n        int[] digits = new int[4];\n        digits[0] = 1000;\n\
    \        digits[1] = 900;\n        digits[2] = 500;\n        digits[3] = 100;\n\
    \n        while (number > 0) {\n            int digit = number % 10;\n       \
    \     number /= 10;\n            roman = roman + IntToRoman(digit);\n        }\n\
    \n        return roman;\n    }\n\n    // Convert a digit to a roman numeral.\n\
    \    // Return the roman numeral as a string.\n    // Examples:\n    // >>> IntToRoman(0)\n\
    \    // (\"\")\n    // >>> IntToRoman(1)\n    // (\"I\")\n    // >>> IntToRoman(2)\n\
    \    // (\"II\")\n    // >>> IntToRoman(3)\n    // (\"III\")\n    // >>> IntToRoman(4)\n\
    \    // (\"IV\")\n    // >>> IntToRoman(5)\n    // (\"V\")\n    // >>> IntToRoman(6)\n\
    \    // (\"VI\")\n    // >>> IntToRoman(7)\n    // (\"VII\")\n    // >>> IntToRoman(8)\n\
    \    // (\"VIII\")\n    // >>> IntToRoman(9)\n    // (\"IX\")\n    // >>> IntToRoman(10)\n\
    \    // (\"X\")\n    // >>> IntToRoman(11)\n    // (\"XI\")\n    // >>> IntToRoman(12)\n\
    \    // (\"XII\")\n    // >>> IntToRoman(13)\n    // (\"XIII\")\n    // >>> IntToRoman(14)\n\
    \    // (\"XIV\")\n    // >>> IntToRoman(15)\n    // (\"XV\")\n    // >>> IntToRoman(16)\n\
    \    // (\"XVI\")\n    // >>> IntToRoman(17)\n    // (\"XVII\")\n    // >>> IntToRoman(18)\n\
    \    // (\"XVIII\")\n    // >>> IntToRoman(19)\n    // (\"XIX\")\n    // >>> IntToRoman(20)\n\
    \    // (\"XX\")\n    // >>> IntTo", "        string roman = \"\";\n        long\
    \ num = number;\n        while (num > 0) {\n            if (num >= 1000) {\n \
    \               roman = roman + \"m\";\n                num -= 1000;\n       \
    \     }\n            else if (num >= 900) {\n                roman = roman + \"\
    cm\";\n                num -= 900;\n            }\n            else if (num >=\
    \ 500) {\n                roman = roman + \"d\";\n                num -= 500;\n\
    \            }\n            else if (num >= 400) {\n                roman = roman\
    \ + \"cd\";\n                num -= 400;\n            }\n            else if (num\
    \ >= 100) {\n                roman = roman + \"c\";\n                num -= 100;\n\
    \            }\n            else if (num >= 90) {\n                roman = roman\
    \ + \"xc\";\n                num -= 90;\n            }\n            else if (num\
    \ >= 50) {\n                roman = roman + \"l\";\n                num -= 50;\n\
    \            }\n            else if (num >= 40) {\n                roman = roman\
    \ + \"xl\";\n                num -= 40;\n            }\n            else if (num\
    \ >= 10) {\n                roman = roman + \"x\";\n                num -= 10;\n\
    \            }\n            else if (num >= 9) {\n                roman = roman\
    \ + \"ix\";\n                num -= 9;\n            }\n            else if (num\
    \ >= 5) {\n                roman = roman + \"v\";\n                num -= 5;\n\
    \            }\n            else if (num >= 4) {\n                roman = roman\
    \ + \"iv\";\n                num -= 4;\n            }\n            else if (num\
    \ >= 1) {\n                roman = roman + \"i\";\n                num -= 1;\n\
    \            }\n        }\n        return roman;", "        string result = \"\
    \";\n        if (number < 0) {\n            throw new IllegalArgumentException(\"\
    Negative number\");\n        }\n        if (number > 1000) {\n            throw\
    \ new IllegalArgumentException(\"Number too big\");\n        }\n        int[]\
    \ digits = new int[4];\n        int[] roman = new int[] {1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for (int i = 0; i < 4; i++) {\n \
    \           digits[i] = number / roman[i];\n            number -= digits[i] *\
    \ roman[i];\n        }\n        for (int i = 0; i < 4; i++) {\n            for\
    \ (int j = 0; j < digits[i]; j++) {\n                result += \"m\";\n      \
    \      }\n        }\n        return result.ToLower();", "        string roman\
    \ = \"\";\n        if (number == 0) return \"\";\n        if (number < 0) return\
    \ \"\";\n        if (number > 1000) return \"\";\n        if (number == 1) return\
    \ \"I\";\n        if (number == 2) return \"II\";\n        if (number == 3) return\
    \ \"III\";\n        if (number == 4) return \"IV\";\n        if (number == 5)\
    \ return \"V\";\n        if (number == 6) return \"VI\";\n        if (number ==\
    \ 7) return \"VII\";\n        if (number == 8) return \"VIII\";\n        if (number\
    \ == 9) return \"IX\";\n        if (number == 10) return \"X\";\n        if (number\
    \ == 11) return \"XI\";\n        if (number == 12) return \"XII\";\n        if\
    \ (number == 13) return \"XIII\";\n        if (number == 14) return \"XIV\";\n\
    \        if (number == 15) return \"XV\";\n        if (number == 16) return \"\
    XVI\";\n        if (number == 17) return \"XVII\";\n        if (number == 18)\
    \ return \"XVIII\";\n        if (number == 19) return \"XIX\";\n        if (number\
    \ == 20) return \"XX\";\n        if (number == 30) return \"XXX\";\n        if\
    \ (number == 40) return \"XL\";\n        if (number == 50) return \"L\";\n   \
    \     if (number == 60) return \"LX\";\n        if (number == 70) return \"LXX\"\
    ;\n        if (number == 80) return \"LXXX\";\n        if (number == 90) return\
    \ \"XC\";\n        if (number == 100) return \"C\";\n        if (number == 200)\
    \ return \"CC\";\n        if (number == 300) return \"CCC\";\n        if (number\
    \ == 400) return \"CD\";\n        if (number == 500) return \"D\";\n        if\
    \ (number == 600) return \"DC\";\n        if (number == 700) return \"DCC\";\n\
    \        if (number == 800) return \"DCCC\";\n        if (number == 900) return\
    \ \"CM\";\n        if (number == 1000) return \"M\";\n        if (number == 1500)\
    \ return \"MM", "        if (number < 1 || number > 1000)\n            throw new\
    \ Exception(\"Invalid number\");\n        string result = \"\";\n        int[]\
    \ roman = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for\
    \ (int i = 0; i < roman.length; i++) {\n            while (number >= roman[i])\
    \ {\n                number -= roman[i];\n                result += roman[i];\n\
    \            }\n        }\n        return result.ToLower();", "        // Create\
    \ a string builder to hold the result\n        StringBuilder result = new StringBuilder();\n\
    \        // Create a dictionary to hold the roman numerals\n        Dictionary<int,\
    \ string> romanNumerals = new Dictionary<int, string>();\n        romanNumerals.Add(1000,\
    \ \"m\");\n        romanNumerals.Add(900, \"cm\");\n        romanNumerals.Add(500,\
    \ \"d\");\n        romanNumerals.Add(400, \"cd\");\n        romanNumerals.Add(100,\
    \ \"c\");\n        romanNumerals.Add(90, \"xc\");\n        romanNumerals.Add(50,\
    \ \"l\");\n        romanNumerals.Add(40, \"xl\");\n        romanNumerals.Add(10,\
    \ \"x\");\n        romanNumerals.Add(9, \"ix\");\n        romanNumerals.Add(5,\
    \ \"v\");\n        romanNumerals.Add(4, \"iv\");\n        romanNumerals.Add(1,\
    \ \"i\");\n        // Iterate through the number\n        for (int i = 1; i <=\
    \ number; i++) {\n            // If the number is greater than the next roman\
    \ numeral,\n            // then add the roman numeral to the result\n        \
    \    if (i > romanNumerals[i]) {\n                result.Append(romanNumerals[i]);\n\
    \            }\n            // If the number is less than the next roman numeral,\n\
    \            // then subtract the roman numeral from the result\n            else\
    \ if (i < romanNumerals[i]) {\n                result.Append(romanNumerals[i]);\n\
    \            }\n        }\n        // Return the result\n        return result.ToString();",
  "        string result = \"\";\n        if (number < 1 || number > 1000)\n     \
    \       throw new Exception(\"Invalid number\");\n        long num = number;\n\
    \        while (num > 0) {\n            int digit = (int) (num % 10);\n      \
    \      switch (digit) {\n                case 1:\n                    result =\
    \ result + \"i\";\n                    break;\n                case 2:\n     \
    \               result = result + \"ii\";\n                    break;\n      \
    \          case 3:\n                    result = result + \"iii\";\n         \
    \           break;\n                case 4:\n                    result = result\
    \ + \"iv\";\n                    break;\n                case 5:\n           \
    \         result = result + \"v\";\n                    break;\n             \
    \   case 6:\n                    result = result + \"vi\";\n                 \
    \   break;\n                case 7:\n                    result = result + \"\
    vii\";\n                    break;\n                case 8:\n                \
    \    result = result + \"viii\";\n                    break;\n               \
    \ case 9:\n                    result = result + \"ix\";\n                   \
    \ break;\n                case 10:\n                    result = result + \"x\"\
    ;\n                    break;\n                case 11:\n                    result\
    \ = result + \"xi\";\n                    break;\n                case 12:\n \
    \                   result = result + \"xii\";\n                    break;\n \
    \               case 13:\n                    result = result + \"xiii\";\n  \
    \                  break;\n                case 14:\n                    result\
    \ = result + \"xiv\";\n                    break;\n                case 15:\n\
    \                    result = result + \"xv\";\n                    break;\n \
    \               case 16:\n                    result = result + \"xvi\";\n   \
    \                 break;\n                case 17:\n                    result\
    \ = result + \"xvii\";\n                    break;\n                case 18:\n\
    \                    result = result + \"xviii\";\n                    break;\n\
    \                case 19:\n                    result = result + \"xix\";\n  \
    \                  break;\n                case 20:\n                    result\
    \ = result + \"xx\";\n                    break;\n                case 21:\n \
    \                   result = result + \"xxi\";\n                    break;\n \
    \               case 22:\n                    result = result + \"xxii\";\n  \
    \                  break;\n                case 23:\n                    result\
    \ = result + \"xxiii\";\n                    break;\n                case 24:\n\
    \                    result = result + \"xxiv\";\n                    break;\n",
  "        string result = \"\";\n        if (number < 1 || number > 1000)\n     \
    \       throw new Exception(\"Invalid number\");\n        for (int i = 0; i <\
    \ 4; i++) {\n            int num = number % 10;\n            if (num == 0)\n \
    \               continue;\n            if (num == 1)\n                result +=\
    \ \"i\";\n            else if (num == 2)\n                result += \"ii\";\n\
    \            else if (num == 3)\n                result += \"iii\";\n        \
    \    else if (num == 4)\n                result += \"iv\";\n            else if\
    \ (num == 5)\n                result += \"v\";\n            else if (num == 6)\n\
    \                result += \"vi\";\n            else if (num == 7)\n         \
    \       result += \"vii\";\n            else if (num == 8)\n                result\
    \ += \"viii\";\n            else if (num == 9)\n                result += \"ix\"\
    ;\n            number /= 10;\n        }\n        return result.ToLower();", " \
    \       string result = \"\";\n        if (number < 1 || number > 1000)\n    \
    \        throw new Exception(\"Invalid number\");\n        for (int i = 0; i <\
    \ 10; i++) {\n            int num = number % 10;\n            if (num == 0)\n\
    \                break;\n            if (num == 1)\n                result +=\
    \ \"i\";\n            else if (num == 2)\n                result += \"ii\";\n\
    \            else if (num == 3)\n                result += \"iii\";\n        \
    \    else if (num == 4)\n                result += \"iv\";\n            else if\
    \ (num == 5)\n                result += \"v\";\n            else if (num == 6)\n\
    \                result += \"vi\";\n            else if (num == 7)\n         \
    \       result += \"vii\";\n            else if (num == 8)\n                result\
    \ += \"viii\";\n            else if (num == 9)\n                result += \"ix\"\
    ;\n            number /= 10;\n        }\n        return result.ToLower();", " \
    \       string roman = \"\";\n        if (number < 1 || number > 1000)\n     \
    \       throw new Exception(\"Invalid number\");\n        for (int i = 0; i <\
    \ 4; i++) {\n            int num = number % 10;\n            if (num == 0)\n \
    \               continue;\n            if (num == 1)\n                roman +=\
    \ \"i\";\n            else if (num == 2)\n                roman += \"ii\";\n \
    \           else if (num == 3)\n                roman += \"iii\";\n          \
    \  else if (num == 4)\n                roman += \"iv\";\n            else if (num\
    \ == 5)\n                roman += \"v\";\n            else if (num == 6)\n   \
    \             roman += \"vi\";\n            else if (num == 7)\n             \
    \   roman += \"vii\";\n            else if (num == 8)\n                roman +=\
    \ \"viii\";\n            else if (num == 9)\n                roman += \"ix\";\n\
    \            number /= 10;\n        }\n        return roman;", "        if (number\
    \ < 1 || number > 1000)\n            throw new Exception(\"Invalid number\");\n\
    \n        string roman = \"\";\n        int[] roman_numbers = {1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] roman_numbers_reversed\
    \ = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900};\n        int roman_number\
    \ = 0;\n        for (int i = 0; i < roman_numbers.length; i++) {\n           \
    \ while (number >= roman_numbers[i]) {\n                number -= roman_numbers[i];\n\
    \                roman += roman_numbers_reversed[i];\n            }\n        }\n\
    \        return roman;", "        if (number < 1 || number > 1000)\n         \
    \   throw new Exception(\"Invalid number\");\n        string roman = \"\";\n \
    \       int[] digits = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \        int[] digits_inv = {1, 10, 9, 5, 4, 1, 5, 9, 10, 40, 50, 400, 500};\n\
    \        for (int i = 0; i < digits.length; i++) {\n            while (number\
    \ >= digits[i]) {\n                number -= digits[i];\n                roman\
    \ += digits_inv[i];\n            }\n        }\n        return roman;", "     \
    \   // Create a dictionary of roman numerals\n        var romanNumerals = new\
    \ Dictionary<int, string>();\n        romanNumerals[1000] = \"m\";\n        romanNumerals[900]\
    \ = \"cm\";\n        romanNumerals[500] = \"d\";\n        romanNumerals[400] =\
    \ \"cd\";\n        romanNumerals[100] = \"c\";\n        romanNumerals[90] = \"\
    xc\";\n        romanNumerals[50] = \"l\";\n        romanNumerals[40] = \"xl\"\
    ;\n        romanNumerals[10] = \"x\";\n        romanNumerals[9] = \"ix\";\n  \
    \      romanNumerals[5] = \"v\";\n        romanNumerals[4] = \"iv\";\n       \
    \ romanNumerals[1] = \"i\";\n\n        // Convert the number to a string\n   \
    \     string result = \"\";\n        while (number > 0) {\n            var key\
    \ = number % 10;\n            result = romanNumerals[key] + result;\n        \
    \    number = number / 10;\n        }\n\n        // Return the string\n      \
    \  return result.ToLower();", "        string roman = \"\";\n        if (number\
    \ < 1 || number > 1000)\n            throw new Exception(\"Invalid number\");\n\
    \        for (int i = 0; i < 4; i++) {\n            int num = number % 10;\n \
    \           if (num == 0)\n                break;\n            if (i == 0)\n \
    \               roman += IntToRoman(num);\n            else if (i == 1)\n    \
    \            roman += IntToRoman(num);\n            else if (i == 2)\n       \
    \         roman += IntToRoman(num);\n            else if (i == 3)\n          \
    \      roman += IntToRoman(num);\n            number /= 10;\n        }\n     \
    \   return roman;\n    }\n\n    // Convert a number to Roman numeral.\n    //\
    \ Return the string representation of the number in Roman numeral.\n    // Examples:\n\
    \    // >>> RomanToInt(\"xix\")\n    // 19\n    // >>> RomanToInt(\"clii\")\n\
    \    // 152\n    // >>> RomanToInt(\"cdxxvi\")\n    // 426\n    public static\
    \ string RomanToInt(string roman) {\n        int number = 0;\n        for (int\
    \ i = 0; i < roman.Length; i++) {\n            char c = roman[i];\n          \
    \  int num = IntToRoman(c);\n            number += num;\n        }\n        return\
    \ number.ToString();\n    }\n\n    // Convert a Roman numeral to an integer.\n\
    \    // Return the number represented by the Roman numeral in integer.\n    //\
    \ Examples:\n    // >>> RomanToInt(\"xix\")\n    // 19\n    // >>> RomanToInt(\"\
    clii\")\n    // 152\n    // >>> RomanToInt(\"cdxxvi\")\n    // 426\n    public\
    \ static int RomanToInt(string roman) {\n        int number = 0;\n        for\
    \ (int i = 0; i < roman.Length; i++) {\n            char c = roman[i];\n     \
    \       int num = IntToRoman(c);\n            number += num;\n        }\n    \
    \    return number;\n    }\n\n    // Convert a number to Roman numeral.\n    //\
    \ Return the string representation of the number in Roman numeral.\n    // Examples:\n\
    \    // >>> RomanToMiniRoman", "        string[] roman = { \"\", \"i\", \"ii\"\
    , \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\" };\n        string[]\
    \ arabic = { \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" };\n \
    \       int[] values = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n        int[] digits\
    \ = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 };\n\
    \        int i = 0;\n        while (number > 0) {\n            arabic[i] = roman[values[number\
    \ % 10]];\n            number /= 10;\n            i++;\n        }\n        for\
    \ (int j = 0; j < i; j++) {\n            if (arabic[j].Length() > arabic[j + 1].Length())\
    \ {\n                arabic[j + 1] = arabic[j + 1] + arabic[j];\n            \
    \    arabic[j] = \"\";\n            }\n        }\n        return arabic[i - 1];",
  "        string roman = \"\";\n        if (number < 1 || number > 1000)\n      \
    \      throw new Exception(\"Invalid number\");\n        for (int i = 0; i < 4;\
    \ i++) {\n            int num = number % 10;\n            if (num == 0)\n    \
    \            continue;\n            if (num == 1)\n                roman += \"\
    i\";\n            else if (num == 2)\n                roman += \"ii\";\n     \
    \       else if (num == 3)\n                roman += \"iii\";\n            else\
    \ if (num == 4)\n                roman += \"iv\";\n            else if (num ==\
    \ 5)\n                roman += \"v\";\n            else if (num == 6)\n      \
    \          roman += \"vi\";\n            else if (num == 7)\n                roman\
    \ += \"vii\";\n            else if (num == 8)\n                roman += \"viii\"\
    ;\n            else if (num == 9)\n                roman += \"ix\";\n        \
    \    number /= 10;\n        }\n        return roman;", "        string roman =\
    \ \"\";\n        if (number < 1 || number > 1000)\n            throw new Exception(\"\
    Invalid number\");\n        if (number == 1)\n            roman = \"i\";\n   \
    \     else if (number == 2)\n            roman = \"ii\";\n        else if (number\
    \ == 3)\n            roman = \"iii\";\n        else if (number == 4)\n       \
    \     roman = \"iv\";\n        else if (number == 5)\n            roman = \"v\"\
    ;\n        else if (number == 6)\n            roman = \"vi\";\n        else if\
    \ (number == 7)\n            roman = \"vii\";\n        else if (number == 8)\n\
    \            roman = \"viii\";\n        else if (number == 9)\n            roman\
    \ = \"ix\";\n        else if (number == 10)\n            roman = \"x\";\n    \
    \    else if (number == 11)\n            roman = \"xi\";\n        else if (number\
    \ == 12)\n            roman = \"xii\";\n        else if (number == 13)\n     \
    \       roman = \"xiii\";\n        else if (number == 14)\n            roman =\
    \ \"xiv\";\n        else if (number == 15)\n            roman = \"xv\";\n    \
    \    else if (number == 16)\n            roman = \"xvi\";\n        else if (number\
    \ == 17)\n            roman = \"xvii\";\n        else if (number == 18)\n    \
    \        roman = \"xviii\";\n        else if (number == 19)\n            roman\
    \ = \"xix\";\n        else if (number == 20)\n            roman = \"xx\";\n  \
    \      else if (number == 30)\n            roman = \"xxx\";\n        else if (number\
    \ == 40)\n            roman = \"xl\";\n        else if (number == 50)\n      \
    \      roman = \"l\";\n        else if (number == 60)\n            roman = \"\
    lx\";\n        else if (number == 70)\n            roman = \"lxx\";\n        else\
    \ if (number == 80)\n            roman = \"lxxx\";\n        else if (number ==\
    \ 90)\n            roman = \"xc\";\n        else if (number == 100)\n        \
    \    roman = \"c\";\n        else if (number == 200)\n            roman = \"cc\"\
    ;\n        else if (", "        string result = \"\";\n        long num = number;\n\
    \        while (num > 0) {\n            long digit = num % 10;\n            if\
    \ (digit == 1) {\n                result = result + \"x\";\n            }\n  \
    \          else if (digit == 2) {\n                result = result + \"c\";\n\
    \            }\n            else if (digit == 3) {\n                result = result\
    \ + \"m\";\n            }\n            else if (digit == 4) {\n              \
    \  result = result + \"d\";\n            }\n            else if (digit == 5) {\n\
    \                result = result + \"v\";\n            }\n            else if\
    \ (digit == 6) {\n                result = result + \"l\";\n            }\n  \
    \          else if (digit == 7) {\n                result = result + \"x\";\n\
    \            }\n            else if (digit == 8) {\n                result = result\
    \ + \"l\";\n            }\n            else if (digit == 9) {\n              \
    \  result = result + \"x\";\n            }\n            num = num / 10;\n    \
    \    }\n        return result.ToLower();", "        string roman = \"\";\n   \
    \     long num = number;\n        while (num > 0) {\n            roman = roman\
    \ + IntToRoman(num % 1000);\n            num /= 1000;\n        }\n        return\
    \ roman;\n    }\n\n    // Convert a positive integer to its roman numeral equivalent.\n\
    \    // Return the roman numeral as a string.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> IntToRoman(19)\n    // \"xix\"\n    // >>>\
    \ IntToRoman(152)\n    // \"clii\"\n    // >>> IntToRoman(426)\n    // \"cdxxvi\"\
    \n    public static string IntToRoman(long number) {\n        string roman = \"\
    \";\n        long num = number;\n        while (num > 0) {\n            roman\
    \ = roman + IntToRoman(num % 1000);\n            num /= 1000;\n        }\n   \
    \     return roman;\n    }\n\n    // Convert a positive integer to its roman numeral\
    \ equivalent.\n    // Return the roman numeral as a string.\n    // Restrictions:\
    \ 1 <= num <= 1000\n    // Examples:\n    // >>> IntToRoman(19)\n    // \"xix\"\
    \n    // >>> IntToRoman(152)\n    // \"clii\"\n    // >>> IntToRoman(426)\n  \
    \  // \"cdxxvi\"\n    public static string IntToRoman(long number) {\n       \
    \ string roman = \"\";\n        long num = number;\n        while (num > 0) {\n\
    \            roman = roman + IntToRoman(num % 1000);\n            num /= 1000;\n\
    \        }\n        return roman;\n    }\n\n    // Convert a positive integer\
    \ to its roman numeral equivalent.\n    // Return the roman numeral as a string.\n\
    \    // Restrictions: 1 <= num <= 1000\n    // Examples:\n    // >>> IntToRoman(19)\n\
    \    // \"xix\"\n    // >>> IntToRoman(152)\n    // \"clii\"\n    // >>> IntToRoman(426)\n\
    \    // \"cdxxvi\"\n    public static string IntToRoman(long number) {\n     \
    \   string roman = \"\";\n        long num", "        if (number < 1 || number\
    \ > 1000)\n            throw new InvalidOperationException(\"number must be in\
    \ the range [1, 1000]\");\n        string roman = \"\";\n        int[] roman_digits\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] digits\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        for (int\
    \ i = 0; i < roman_digits.Length; i++) {\n            while (number >= roman_digits[i])\
    \ {\n                number -= roman_digits[i];\n                roman += digits[i];\n\
    \            }\n        }\n        return roman;", "        string result = \"\
    \";\n        int[] digits = new int[4];\n        int[] digits_rev = new int[4];\n\
    \        int[] digits_rev_rev = new int[4];\n        int[] digits_rev_rev_rev\
    \ = new int[4];\n        int[] digits_rev_rev_rev_rev = new int[4];\n        int[]\
    \ digits_rev_rev_rev_rev_rev = new int[4];\n        int[] digits_rev_rev_rev_rev_rev_rev\
    \ = new int[4];\n        int[] digits_rev_rev_rev_rev_rev_rev_rev = new int[4];\n\
    \        int[] digits_rev_rev_rev_rev_rev_rev_rev_rev = new int[4];\n        int[]\
    \ digits_rev_rev_rev_rev_rev_rev_rev_rev_rev = new int[4];\n        int[] digits_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = new int[4];\n        int[] digits_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = new int[4];\n        int[] digits_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = new int[4];\n        int[] digits_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = new int[4];\n        int[] digits_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = new int[4];\n        int[] digits_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = new int[4];\n        int[] digits_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = new int[4];\n        int[] digits_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = new int[4];\n        ", "        if (number < 1 || number > 1000)\n      \
    \      throw new Exception(\"Invalid number\");\n        string roman = \"\";\n\
    \        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \        int[] digits = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \        int i = 0;\n        while (number > 0) {\n            while (number >=\
    \ values[i]) {\n                number -= values[i];\n                roman +=\
    \ digits[i];\n            }\n            i++;\n        }\n        return roman;",
  "        string result = \"\";\n        long num = number;\n        while (num >\
    \ 0) {\n            long digit = num % 10;\n            if (digit == 4 || digit\
    \ == 9) {\n                result = \"x\" + result;\n            }\n         \
    \   else if (digit == 5) {\n                result = \"c\" + result;\n       \
    \     }\n            else if (digit == 6) {\n                result = \"d\" +\
    \ result;\n            }\n            else if (digit == 7) {\n               \
    \ result = \"m\" + result;\n            }\n            else if (digit == 8) {\n\
    \                result = \"v\" + result;\n            }\n            else if\
    \ (digit == 9) {\n                result = \"i\" + result;\n            }\n  \
    \          num = num / 10;\n        }\n        return result.ToLower();", "  \
    \      string result = \"\";\n        long num = number;\n        while (num >\
    \ 0) {\n            long digit = num % 10;\n            if (digit == 1 || digit\
    \ == 2) {\n                result = result + \"x\";\n            }\n         \
    \   else if (digit == 3 || digit == 4) {\n                result = result + \"\
    c\";\n            }\n            else if (digit == 5 || digit == 6) {\n      \
    \          result = result + \"l\";\n            }\n            else if (digit\
    \ == 7 || digit == 8) {\n                result = result + \"d\";\n          \
    \  }\n            else if (digit == 9 || digit == 10) {\n                result\
    \ = result + \"m\";\n            }\n            num = num / 10;\n        }\n \
    \       return result.ToLower();", "        string[] roman = new string[] { \"\
    \", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\" };\n\
    \        string result = \"\";\n        for (int i = 0; i < roman.length; i++)\
    \ {\n            while (number >= roman[i].length()) {\n                number\
    \ -= roman[i].length();\n                result += roman[i];\n            }\n\
    \        }\n        return result;", "        if (number < 1 || number > 1000)\n\
    \            throw new InvalidOperationException(\"number must be between 1 and\
    \ 1000\");\n\n        string roman = \"\";\n        int[] roman_num = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] roman_den = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int[] roman_num_inv\
    \ = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        int[] roman_den_inv\
    \ = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n\n        for (int\
    \ i = 0; i < roman_num.length; i++) {\n            while (number >= roman_num[i])\
    \ {\n                number -= roman_num[i];\n                roman += roman_num_inv[i];\n\
    \            }\n        }\n\n        for (int i = roman_num.length - 1; i >= 0;\
    \ i--) {\n            while (number >= roman_den[i]) {\n                number\
    \ -= roman_den[i];\n                roman += roman_den_inv[i];\n            }\n\
    \        }\n\n        return roman;", "        string result = \"\";\n       \
    \ long num = number;\n        while (num > 0) {\n            int digit = (int)\
    \ (num % 10);\n            switch (digit) {\n                case 1:\n       \
    \             result = result + \"i\";\n                    break;\n         \
    \       case 2:\n                    result = result + \"ii\";\n             \
    \       break;\n                case 3:\n                    result = result +\
    \ \"iii\";\n                    break;\n                case 4:\n            \
    \        result = result + \"iv\";\n                    break;\n             \
    \   case 5:\n                    result = result + \"v\";\n                  \
    \  break;\n                case 6:\n                    result = result + \"vi\"\
    ;\n                    break;\n                case 7:\n                    result\
    \ = result + \"vii\";\n                    break;\n                case 8:\n \
    \                   result = result + \"viii\";\n                    break;\n\
    \                case 9:\n                    result = result + \"ix\";\n    \
    \                break;\n                case 10:\n                    result\
    \ = result + \"x\";\n                    break;\n                case 11:\n  \
    \                  result = result + \"xi\";\n                    break;\n   \
    \             case 12:\n                    result = result + \"xii\";\n     \
    \               break;\n                case 13:\n                    result =\
    \ result + \"xiii\";\n                    break;\n                case 14:\n \
    \                   result = result + \"xiv\";\n                    break;\n \
    \               case 15:\n                    result = result + \"xv\";\n    \
    \                break;\n                case 16:\n                    result\
    \ = result + \"xvi\";\n                    break;\n                case 17:\n\
    \                    result = result + \"xvii\";\n                    break;\n\
    \                case 18:\n                    result = result + \"xviii\";\n\
    \                    break;\n                case 19:\n                    result\
    \ = result + \"xix\";\n                    break;\n                case 20:\n\
    \                    result = result + \"xx\";\n                    break;\n \
    \               case 21:\n                    result = result + \"xxi\";\n   \
    \                 break;\n                case 22:\n                    result\
    \ = result + \"xxii\";\n                    break;\n                case 23:\n\
    \                    result = result + \"xxiii\";\n                    break;\n\
    \                case 24:\n                    result = result + \"xxiv\";\n \
    \                   break;\n                case 25:\n                    result\
    \ = result + \"xxv\";\n                    break;\n                case"]
stop_tokens:
- "\n    }\n"
