name: HumanEval_153_Strongest_Extension
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You will be given the name of a class (a string) and a list\
  \ of extensions.\n    // The extensions are to be used to load additional classes\
  \ to the class. The\n    // strength of the extension is as follows: Let CAP be\
  \ the number of the uppercase\n    // letters in the extension's name, and let SM\
  \ be the number of lowercase letters \n    // in the extension's name, the strength\
  \ is given by the fraction CAP - SM. \n    // You should find the strongest extension\
  \ and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
  \    // If there are two or more extensions with the same strength, you should\n\
  \    // choose the one that comes first in the list.\n    // For example, if you\
  \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
  \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
  \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n  \
  \  // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
  \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
  )\n    public static string StrongestExtension(string class_name, List<string> extensions)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
  Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
  eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
  Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
  , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
  )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
  \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
  , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
  )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
  Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
  )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new string[]{(string)\"\
  Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\"\
  )));\n    Debug.Assert(StrongestExtension((\"YameRore\"), (new List<string>(new\
  \ string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\", (string)\"\
  Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"\
  finNNalLLly\"), (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\"\
  , (string)\"Wow\", (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
  _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
  _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
  \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n  \
  \  }\n\n}\n"
completions: ["        // Write your code here\n        string[] exts = extensions.ToArray();\n\
    \        int[] strengths = new int[exts.Length];\n        for (int i = 0; i <\
    \ exts.Length; i++) {\n            strengths[i] = exts[i].ToLower().IndexOf('a');\n\
    \        }\n        int max = 0;\n        int max_index = 0;\n        for (int\
    \ i = 0; i < exts.Length; i++) {\n            if (strengths[i] > max) {\n    \
    \            max = strengths[i];\n                max_index = i;\n           \
    \ }\n        }\n        return class_name + \".\" + exts[max_index];", "     \
    \   // Write your code here\n        if (extensions.Count == 0) {\n          \
    \  return class_name;\n        }\n        string strongest_extension = \"\";\n\
    \        int strongest_extension_strength = 0;\n        for (string extension\
    \ : extensions) {\n            int strength = 0;\n            int cap = 0;\n \
    \           int sm = 0;\n            for (int i = 0; i < extension.Length; i++)\
    \ {\n                if (extension[i] >= 'A' && extension[i] <= 'Z') {\n     \
    \               cap++;\n                }\n                else if (extension[i]\
    \ >= 'a' && extension[i] <= 'z') {\n                    sm++;\n              \
    \  }\n            }\n            strength = cap - sm;\n            if (strength\
    \ > strongest_extension_strength) {\n                strongest_extension_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;", "     \
    \   int[] strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]--;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int max_strength = 0;\n        string strongest_extension = \"\";\n       \
    \ for (string extension : extensions) {\n            int strength = 0;\n     \
    \       for (char c : extension.ToCharArray()) {\n                if (c >= 'A'\
    \ && c <= 'Z') {\n                    strength++;\n                }\n       \
    \         else if (c >= 'a' && c <= 'z') {\n                    strength--;\n\
    \                }\n            }\n            if (strength > max_strength) {\n\
    \                max_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Write your code here\n        int[] strength\
    \ = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]--;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  string[] str = class_name.Split(\".\");\n        int cap = 0;\n        int\
    \ sm = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i].ToUpper()\
    \ != str[i]) {\n                cap++;\n            }\n            else {\n  \
    \              sm++;\n            }\n        }\n        int strength = cap - sm;\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            if (extensions[i].ToUpper()\
    \ != extensions[i]) {\n                cap++;\n            }\n            else\
    \ {\n                sm++;\n            }\n        }\n        if (cap - sm > strength)\
    \ {\n            strength = cap - sm;\n        }\n        for (int i = 0; i <\
    \ extensions.Count; i++) {\n            if (extensions[i].ToUpper() == extensions[i])\
    \ {\n                sm++;\n            }\n        }\n        if (sm > strength)\
    \ {\n            strength = sm;\n        }\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (extensions[i].ToUpper() == extensions[i]) {\n      \
    \          cap++;\n            }\n        }\n        if (cap > strength) {\n \
    \           strength = cap;\n        }\n        if (strength == 0) {\n       \
    \     return class_name + \".\" + extensions[0];\n        }\n        else {\n\
    \            return class_name + \".\" + extensions[0] + \".\" + strength;\n \
    \       }", "        // Write your code here\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strength[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            strength[i]++;\n                }\n            }\n            for\
    \ (int j = 0; j < extensions[i].Length; j++) {\n                if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i]++;\n \
    \               }\n            }\n        }\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n     \
    \       if (strength[i] > max) {\n                max = strength[i];\n       \
    \         max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  string[] strs = extensions.ToArray();\n        int[] strengths = new int[strs.Length];\n\
    \        for (int i = 0; i < strs.Length; i++) {\n            strengths[i] = strs[i].ToLower().Count('a')\
    \ - strs[i].ToLower().Count('e');\n        }\n        int max = 0;\n        int\
    \ index = 0;\n        for (int i = 0; i < strs.Length; i++) {\n            if\
    \ (strengths[i] > max) {\n                max = strengths[i];\n              \
    \  index = i;\n            }\n        }\n        return class_name + \".\" + strs[index];",
  "        // Write your code here\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strength[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            strength[i] += 1;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i] -= 1;\n\
    \                }\n            }\n        }\n        int max = 0;\n        int\
    \ maxIndex = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n      \
    \      if (strength[i] > max) {\n                max = strength[i];\n        \
    \        maxIndex = i;\n            }\n        }\n        return class_name +\
    \ \".\" + extensions[maxIndex];", "        // Write your code here\n        int\
    \ max = 0;\n        string max_ext = \"\";\n        for (string ext : extensions)\n\
    \        {\n            int cap = 0;\n            int sm = 0;\n            for\
    \ (char c : ext.ToCharArray())\n            {\n                if (c >= 'A' &&\
    \ c <= 'Z')\n                    cap++;\n                else\n              \
    \      sm++;\n            }\n            if (cap - sm > max)\n            {\n\
    \                max = cap - sm;\n                max_ext = ext;\n           \
    \ }\n        }\n        return class_name + \".\" + max_ext;", "        // Write\
    \ your code here\n        string[] str_arr = extensions.ToArray();\n        int[]\
    \ strength = new int[str_arr.Length];\n        for (int i = 0; i < str_arr.Length;\
    \ i++) {\n            strength[i] = str_arr[i].ToLower().IndexOf('a');\n     \
    \   }\n        int max = 0;\n        int max_index = 0;\n        for (int i =\
    \ 0; i < strength.Length; i++) {\n            if (strength[i] > max) {\n     \
    \           max = strength[i];\n                max_index = i;\n            }\n\
    \        }\n        return class_name + \".\" + str_arr[max_index];", "      \
    \  // Write your code here\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strength[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            strength[i]++;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i]--;\n \
    \               }\n            }\n        }\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n     \
    \       if (strength[i] > max) {\n                max = strength[i];\n       \
    \         max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strength[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            strength[i]++;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i]--;\n \
    \               }\n            }\n        }\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n     \
    \       if (strength[i] > max) {\n                max = strength[i];\n       \
    \         max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  var result = \"\";\n        var class_name_upper = class_name.ToUpper();\n\
    \        var class_name_lower = class_name.ToLower();\n        var class_name_extensions\
    \ = class_name_lower + \".\";\n        for (var i = 0; i < extensions.Count; i++)\
    \ {\n            var extension = extensions[i];\n            var extension_upper\
    \ = extension.ToUpper();\n            var extension_lower = extension.ToLower();\n\
    \            var extension_extensions = extension_lower + \".\";\n           \
    \ var strength = 0;\n            var cap = 0;\n            var sm = 0;\n     \
    \       if (extension_upper.Contains(\"CAP\")) {\n                cap = extension_upper.IndexOf(\"\
    CAP\");\n                sm = extension_upper.IndexOf(\"SM\");\n             \
    \   strength = cap - sm;\n            }\n            else if (extension_lower.Contains(\"\
    cap\")) {\n                cap = extension_lower.IndexOf(\"cap\");\n         \
    \       sm = extension_lower.IndexOf(\"sm\");\n                strength = cap\
    \ - sm;\n            }\n            else {\n                continue;\n      \
    \      }\n            if (cap > 0 && sm > 0) {\n                if (cap - sm >\
    \ strength) {\n                    strength = cap - sm;\n                }\n \
    \           }\n            if (strength > 0) {\n                if (class_name_extensions.Contains(extension_extensions))\
    \ {\n                    continue;\n                }\n                result\
    \ = class_name_extensions + extension_extensions;\n                break;\n  \
    \          }\n        }\n        return result;", "        // Write your code\
    \ here\n        int[] strength = new int[extensions.Count];\n        for (int\
    \ i = 0; i < extensions.Count; i++) {\n            strength[i] = 0;\n        \
    \    for (int j = 0; j < extensions[i].Length; j++) {\n                if (extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z') {\n                    strength[i]++;\n \
    \               }\n            }\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z')\
    \ {\n                    strength[i]++;\n                }\n            }\n  \
    \      }\n        int max = 0;\n        int maxIndex = 0;\n        for (int i\
    \ = 0; i < extensions.Count; i++) {\n            if (strength[i] > max) {\n  \
    \              max = strength[i];\n                maxIndex = i;\n           \
    \ }\n        }\n        return class_name + \".\" + extensions[maxIndex];", " \
    \       // Write your code here\n        string[] strs = extensions.ToArray();\n\
    \        int[] strengths = new int[strs.Length];\n        for (int i = 0; i <\
    \ strs.Length; i++) {\n            strengths[i] = strs[i].ToUpper().Count('A')\
    \ - strs[i].ToLower().Count('a');\n        }\n        int max = 0;\n        int\
    \ index = 0;\n        for (int i = 0; i < strs.Length; i++) {\n            if\
    \ (strengths[i] > max) {\n                max = strengths[i];\n              \
    \  index = i;\n            }\n        }\n        return class_name + \".\" + strs[index];",
  "        // Write your code here\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strength[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            strength[i]++;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i]--;\n \
    \               }\n            }\n        }\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n     \
    \       if (strength[i] > max) {\n                max = strength[i];\n       \
    \         max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  if (extensions.Count == 0)\n            return class_name;\n        string[]\
    \ str = extensions.ToArray();\n        int[] strength = new int[str.Length];\n\
    \        for (int i = 0; i < str.Length; i++) {\n            strength[i] = str[i].ToUpper().Count('A')\
    \ - str[i].ToLower().Count('a');\n        }\n        int max = 0;\n        int\
    \ index = 0;\n        for (int i = 0; i < strength.Length; i++) {\n          \
    \  if (strength[i] > max) {\n                max = strength[i];\n            \
    \    index = i;\n            }\n        }\n        return class_name + \".\" +\
    \ str[index];", "        // Write your code here\n        int max_strength = 0;\n\
    \        string strongest_extension = \"\";\n        for (string extension : extensions)\
    \ {\n            int strength = 0;\n            int cap = 0;\n            int\
    \ sm = 0;\n            for (char c : extension.ToCharArray()) {\n            \
    \    if (c >= 'A' && c <= 'Z') {\n                    cap++;\n               \
    \ }\n                else {\n                    sm++;\n                }\n  \
    \          }\n            strength = cap - sm;\n            if (strength > max_strength)\
    \ {\n                max_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Write your code here\n        string result\
    \ = \"\";\n        int max_strength = 0;\n        for (string extension : extensions)\
    \ {\n            int strength = 0;\n            for (char c : extension.ToCharArray())\
    \ {\n                if (c >= 'A' && c <= 'Z') {\n                    strength++;\n\
    \                }\n                else if (c >= 'a' && c <= 'z') {\n       \
    \             strength--;\n                }\n            }\n            if (strength\
    \ > max_strength) {\n                max_strength = strength;\n              \
    \  result = class_name + \".\" + extension;\n            }\n        }\n      \
    \  return result;", "        // Write your code here\n        int[] strength =\
    \ new int[extensions.Count];\n        for (int i = 0; i < extensions.Count; i++)\
    \ {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]++;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int max = 0;\n        string max_ext = \"\";\n        for (string ext : extensions)\
    \ {\n            int cap = 0, sm = 0;\n            for (char c : ext.ToCharArray())\
    \ {\n                if (c >= 'A' && c <= 'Z') {\n                    cap++;\n\
    \                }\n                else {\n                    sm++;\n      \
    \          }\n            }\n            if (cap - sm > max) {\n             \
    \   max = cap - sm;\n                max_ext = ext;\n            }\n        }\n\
    \        return class_name + \".\" + max_ext;", "        // Write your code here\n\
    \        var result = \"\";\n        var class_name_upper = class_name.ToUpper();\n\
    \        var class_name_lower = class_name.ToLower();\n        var extensions_upper\
    \ = extensions.Select(x => x.ToUpper());\n        var extensions_lower = extensions.Select(x\
    \ => x.ToLower());\n        var strength = extensions.Select(x => {\n        \
    \    var cap = 0;\n            var sm = 0;\n            var s = x.ToLower();\n\
    \            for (var i = 0; i < s.Length; i++) {\n                if (s[i] >=\
    \ 'A' && s[i] <= 'Z') {\n                    cap++;\n                }\n     \
    \           else {\n                    sm++;\n                }\n           \
    \ }\n            return cap - sm;\n        });\n        var max = 0;\n       \
    \ var max_extension = \"\";\n        for (var i = 0; i < strength.Count; i++)\
    \ {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_extension = extensions[i];\n            }\n        }\n  \
    \      result = class_name_upper + \".\" + max_extension;\n        return result;",
  "        // Write your code here\n        string[] strs = extensions.ToArray();\n\
    \        int[] strengths = new int[strs.Length];\n        for (int i = 0; i <\
    \ strs.Length; i++) {\n            strengths[i] = strs[i].ToLower().IndexOf('a');\n\
    \        }\n        int max = 0;\n        int maxIndex = 0;\n        for (int\
    \ i = 0; i < strs.Length; i++) {\n            if (strengths[i] > max) {\n    \
    \            max = strengths[i];\n                maxIndex = i;\n            }\n\
    \        }\n        return class_name + \".\" + strs[maxIndex];", "        //\
    \ Write your code here\n        string[] str = class_name.Split(\".\");\n    \
    \    int cap = 0, sm = 0;\n        for (int i = 0; i < str.Length; i++) {\n  \
    \          if (str[i].ToUpper() != str[i]) {\n                cap++;\n       \
    \     }\n            else {\n                sm++;\n            }\n        }\n\
    \        int max = 0;\n        string result = \"\";\n        for (int i = 0;\
    \ i < extensions.Count; i++) {\n            int temp = 0;\n            for (int\
    \ j = 0; j < extensions[i].Length; j++) {\n                if (extensions[i][j].ToUpper()\
    \ != extensions[i][j]) {\n                    temp++;\n                }\n   \
    \             else {\n                    temp++;\n                }\n       \
    \     }\n            if (temp > max) {\n                max = temp;\n        \
    \        result = extensions[i];\n            }\n        }\n        if (cap -\
    \ sm > max) {\n            return class_name + \".\" + result;\n        }\n  \
    \      else {\n            return class_name + \".\" + result;\n        }", " \
    \       // Write your code here\n        int max_strength = 0;\n        string\
    \ strongest_extension = \"\";\n        for (string extension : extensions) {\n\
    \            int strength = 0;\n            for (char c : extension.ToCharArray())\
    \ {\n                if (c >= 'A' && c <= 'Z') {\n                    strength\
    \ += 1;\n                }\n                else {\n                    strength\
    \ -= 1;\n                }\n            }\n            if (strength > max_strength)\
    \ {\n                max_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Write your code here\n        int[] strength\
    \ = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]--;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int[] strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]++;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  if (extensions.Count == 0) {\n            return class_name;\n        }\n \
    \       string strongest_extension = extensions[0];\n        int strength = 0;\n\
    \        for (string extension : extensions) {\n            int cap = 0;\n   \
    \         int sm = 0;\n            for (char c : extension.ToCharArray()) {\n\
    \                if (c >= 'A' && c <= 'Z') {\n                    cap++;\n   \
    \             }\n                else {\n                    sm++;\n         \
    \       }\n            }\n            strength += (cap - sm);\n            if\
    \ (strength > strongest_extension.Length) {\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Write your code here\n        string[] str_arr\
    \ = extensions.ToArray();\n        int[] strength = new int[str_arr.Length];\n\
    \        for (int i = 0; i < str_arr.Length; i++) {\n            strength[i] =\
    \ str_arr[i].ToLower().IndexOf('a');\n        }\n        int max = 0;\n      \
    \  int max_index = 0;\n        for (int i = 0; i < strength.Length; i++) {\n \
    \           if (strength[i] > max) {\n                max = strength[i];\n   \
    \             max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + str_arr[max_index];", "        // Write your code here\n        if\
    \ (extensions.Count == 0)\n            return class_name;\n        var strength\
    \ = extensions.First().ToLower().Split('.').Select(x => x.ToUpper()).ToArray();\n\
    \        var max_strength = strength[0];\n        var max_extension = strength[0];\n\
    \        for (var i = 0; i < strength.Length; i++) {\n            if (strength[i]\
    \ > max_strength) {\n                max_strength = strength[i];\n           \
    \     max_extension = extensions[i];\n            }\n        }\n        return\
    \ class_name + \".\" + max_extension;", "        // Write your code here\n   \
    \     var result = \"\";\n        var class_name_upper = class_name.ToUpper();\n\
    \        var class_name_lower = class_name.ToLower();\n        var extensions_upper\
    \ = extensions.Select(x => x.ToUpper());\n        var extensions_lower = extensions.Select(x\
    \ => x.ToLower());\n        var max_strength = 0;\n        var max_extension =\
    \ \"\";\n        for (var extension : extensions) {\n            var strength\
    \ = 0;\n            var extension_upper = extension.ToUpper();\n            var\
    \ extension_lower = extension.ToLower();\n            var class_name_upper_extension\
    \ = class_name_upper + extension_upper;\n            var class_name_lower_extension\
    \ = class_name_lower + extension_lower;\n            var class_name_upper_extension_upper\
    \ = class_name_upper_extension.ToUpper();\n            var class_name_lower_extension_upper\
    \ = class_name_lower_extension.ToUpper();\n            var class_name_upper_extension_lower\
    \ = class_name_upper_extension.ToLower();\n            var class_name_lower_extension_lower\
    \ = class_name_lower_extension.ToLower();\n            if (class_name_upper_extension_upper\
    \ == class_name_upper_extension) {\n                strength += 1;\n         \
    \   }\n            if (class_name_lower_extension_upper == class_name_lower_extension)\
    \ {\n                strength += 1;\n            }\n            if (class_name_upper_extension_lower\
    \ == class_name_upper_extension) {\n                strength += 1;\n         \
    \   }\n            if (class_name_lower_extension_lower == class_name_lower_extension)\
    \ {\n                strength += 1;\n            }\n            if (extension_upper\
    \ == extension_lower) {\n                strength += 1;\n            }\n     \
    \       if (strength > max_strength) {\n                max_strength = strength;\n\
    \                max_extension = extension;\n            }\n        }\n      \
    \  result = class_name + \".\" + max_extension;\n        return result;", "  \
    \      // Write your code here\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strength[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            strength[i]++;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i]--;\n \
    \               }\n            }\n        }\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n     \
    \       if (strength[i] > max) {\n                max = strength[i];\n       \
    \         max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int[] strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]++;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int[] strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i] += 1;\n                }\n              \
    \  else if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n          \
    \          strength[i] += 2;\n                }\n            }\n        }\n  \
    \      int max = 0;\n        int index = 0;\n        for (int i = 0; i < strength.Length;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[index];", "        // Write your code here\n        int[]\
    \ strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n            }\n  \
    \          for (int j = 0; j < extensions[i].Length; j++) {\n                if\
    \ (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                   \
    \ strength[i]--;\n                }\n            }\n        }\n        int max\
    \ = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  if (extensions.Count == 0)\n            return class_name;\n        var result\
    \ = class_name + \".\" + extensions[0];\n        for (var i = 1; i < extensions.Count;\
    \ i++) {\n            var strength = 0;\n            var cap = 0;\n          \
    \  var sm = 0;\n            for (var j = 0; j < extensions[i].Length; j++) {\n\
    \                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n   \
    \                 cap++;\n                else if (extensions[i][j] >= 'a' &&\
    \ extensions[i][j] <= 'z')\n                    sm++;\n            }\n       \
    \     strength = cap - sm;\n            if (strength > result.Length)\n      \
    \          result = class_name + \".\" + extensions[i];\n        }\n        return\
    \ result;", "        // Write your code here\n        string result = \"\";\n\
    \        int max_strength = 0;\n        for (string extension : extensions) {\n\
    \            int strength = 0;\n            for (char c : extension.ToCharArray())\
    \ {\n                if (c >= 'A' && c <= 'Z') {\n                    strength++;\n\
    \                }\n                else if (c >= 'a' && c <= 'z') {\n       \
    \             strength--;\n                }\n            }\n            if (strength\
    \ > max_strength) {\n                max_strength = strength;\n              \
    \  result = class_name + \".\" + extension;\n            }\n        }\n      \
    \  return result;", "        // Write your code here\n        var result = class_name\
    \ + \".\";\n        var strength = 0;\n        for (var extension : extensions)\
    \ {\n            var cap = extension.ToUpper().Count('A');\n            var sm\
    \ = extension.ToLower().Count('a');\n            strength = cap - sm;\n      \
    \      if (strength > 0) {\n                result += extension;\n           \
    \ }\n        }\n        return result;", "        // Write your code here\n  \
    \      string[] strs = extensions.ToArray();\n        int[] strengths = new int[strs.Length];\n\
    \        for (int i = 0; i < strs.Length; i++) {\n            strengths[i] = strs[i].ToLower().Count('a')\
    \ - strs[i].ToLower().Count('e');\n        }\n        int max = 0;\n        int\
    \ index = 0;\n        for (int i = 0; i < strs.Length; i++) {\n            if\
    \ (strengths[i] > max) {\n                max = strengths[i];\n              \
    \  index = i;\n            }\n        }\n        return class_name + \".\" + strs[index];",
  "        // Write your code here\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strength[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            strength[i] += 1;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i] -= 1;\n\
    \                }\n            }\n        }\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n     \
    \       if (strength[i] > max) {\n                max = strength[i];\n       \
    \         max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int max_strength = 0;\n        string strongest_extension = \"\";\n       \
    \ for (string extension : extensions) {\n            int strength = 0;\n     \
    \       for (char c : extension.ToCharArray()) {\n                if (c >= 'A'\
    \ && c <= 'Z') {\n                    strength++;\n                }\n       \
    \         else if (c >= 'a' && c <= 'z') {\n                    strength--;\n\
    \                }\n            }\n            if (strength > max_strength) {\n\
    \                max_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Write your code here\n        string[] strs\
    \ = extensions.ToArray();\n        int[] strengths = new int[strs.Length];\n \
    \       for (int i = 0; i < strs.Length; i++) {\n            strengths[i] = strs[i].ToLower().Count('a')\
    \ - strs[i].ToLower().Count('e');\n        }\n        int max = 0;\n        int\
    \ maxIndex = 0;\n        for (int i = 0; i < strs.Length; i++) {\n           \
    \ if (strengths[i] > max) {\n                max = strengths[i];\n           \
    \     maxIndex = i;\n            }\n        }\n        return class_name + \"\
    .\" + strs[maxIndex];", "        // Write your code here\n        int[] strength\
    \ = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]--;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int max_strength = 0;\n        string max_extension = \"\";\n        for (string\
    \ extension : extensions)\n        {\n            int strength = 0;\n        \
    \    for (char c : extension.ToCharArray())\n            {\n                if\
    \ (c >= 'A' && c <= 'Z')\n                    strength++;\n                else\
    \ if (c >= 'a' && c <= 'z')\n                    strength--;\n            }\n\
    \            if (strength > max_strength)\n            {\n                max_strength\
    \ = strength;\n                max_extension = extension;\n            }\n   \
    \     }\n        return class_name + \".\" + max_extension;", "        int[] strength\
    \ = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]--;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  string[] strs = extensions.ToArray();\n        int[] strengths = new int[strs.Length];\n\
    \        for (int i = 0; i < strs.Length; i++) {\n            strengths[i] = strs[i].ToUpper().Count('A')\
    \ - strs[i].ToLower().Count('a');\n        }\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < strs.Length; i++) {\n          \
    \  if (strengths[i] > max) {\n                max = strengths[i];\n          \
    \      max_index = i;\n            }\n        }\n        return class_name + \"\
    .\" + strs[max_index];", "        // Write your code here\n        if (extensions.Count\
    \ == 0)\n            return class_name;\n        int max_strength = 0;\n     \
    \   string strongest_extension = \"\";\n        for (string extension : extensions)\
    \ {\n            int strength = 0;\n            for (char c : extension.ToCharArray())\
    \ {\n                if (c >= 'A' && c <= 'Z')\n                    strength++;\n\
    \                else if (c >= 'a' && c <= 'z')\n                    strength--;\n\
    \            }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;", "     \
    \   // Write your code here\n        if (extensions.Count == 0)\n            return\
    \ class_name;\n        int[] strengths = new int[extensions.Count];\n        for\
    \ (int i = 0; i < extensions.Count; i++)\n            strengths[i] = extensions[i].ToLower().IndexOf('.')\
    \ - extensions[i].ToLower().IndexOf('.') + 1;\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < extensions.Count; i++)\n       \
    \     if (strengths[i] > max) {\n                max = strengths[i];\n       \
    \         max_index = i;\n            }\n        return class_name + \".\" + extensions[max_index];",
  "        int max_strength = 0;\n        string strongest_extension = \"\";\n   \
    \     for (string extension : extensions) {\n            int strength = 0;\n \
    \           for (char c : extension.ToCharArray()) {\n                if (c >=\
    \ 'A' && c <= 'Z') {\n                    strength += 1;\n                }\n\
    \                else if (c >= 'a' && c <= 'z') {\n                    strength\
    \ -= 1;\n                }\n            }\n            if (strength > max_strength)\
    \ {\n                max_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Write your code here\n        string[] strs\
    \ = extensions.ToArray();\n        int[] strengths = new int[strs.Length];\n \
    \       for (int i = 0; i < strs.Length; i++) {\n            strengths[i] = strs[i].ToLower().Count('a')\
    \ - strs[i].ToLower().Count('e');\n        }\n        int max = 0;\n        int\
    \ index = 0;\n        for (int i = 0; i < strs.Length; i++) {\n            if\
    \ (strengths[i] > max) {\n                max = strengths[i];\n              \
    \  index = i;\n            }\n        }\n        return class_name + \".\" + strs[index];",
  "        // Write your code here\n        string[] strs = extensions.ToArray();\n\
    \        int[] strengths = new int[strs.Length];\n        for (int i = 0; i <\
    \ strs.Length; i++) {\n            strengths[i] = strs[i].ToLower().IndexOf('a');\n\
    \        }\n        int max = 0;\n        int maxIndex = 0;\n        for (int\
    \ i = 0; i < strs.Length; i++) {\n            if (strengths[i] > max) {\n    \
    \            max = strengths[i];\n                maxIndex = i;\n            }\n\
    \        }\n        return class_name + \".\" + strs[maxIndex];", "        //\
    \ Write your code here\n        string[] strs = extensions.ToArray();\n      \
    \  int[] strength = new int[strs.Length];\n        for (int i = 0; i < strs.Length;\
    \ i++) {\n            strength[i] = strs[i].ToLower().IndexOf('a');\n        }\n\
    \        int max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i <\
    \ strength.Length; i++) {\n            if (strength[i] > max) {\n            \
    \    max = strength[i];\n                maxIndex = i;\n            }\n      \
    \  }\n        return class_name + \".\" + strs[maxIndex];", "        // Write\
    \ your code here\n        int[] strength = new int[extensions.Count];\n      \
    \  for (int i = 0; i < extensions.Count; i++) {\n            strength[i] = 0;\n\
    \            for (int j = 0; j < extensions[i].Length; j++) {\n              \
    \  if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n               \
    \     strength[i]++;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i]--;\n \
    \               }\n            }\n        }\n        int max = 0;\n        int\
    \ index = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n         \
    \   if (strength[i] > max) {\n                max = strength[i];\n           \
    \     index = i;\n            }\n        }\n        return class_name + \".\"\
    \ + extensions[index];", "        // Write your code here\n        if (extensions.Count\
    \ == 0)\n            return class_name;\n        string[] str_arr = extensions.ToArray();\n\
    \        int[] strength = new int[str_arr.Length];\n        for (int i = 0; i\
    \ < str_arr.Length; i++) {\n            strength[i] = str_arr[i].ToUpper().IndexOf('A');\n\
    \        }\n        int max_strength = strength[0];\n        int max_index = 0;\n\
    \        for (int i = 0; i < strength.Length; i++) {\n            if (strength[i]\
    \ > max_strength) {\n                max_strength = strength[i];\n           \
    \     max_index = i;\n            }\n        }\n        return class_name + \"\
    .\" + str_arr[max_index];", "        // Write your code here\n        if (extensions.Count\
    \ == 0) {\n            return class_name;\n        }\n        string strongest_extension\
    \ = extensions[0];\n        int strength = 0;\n        for (string extension :\
    \ extensions) {\n            int cap = 0, sm = 0;\n            for (char c : extension.ToCharArray())\
    \ {\n                if (c >= 'A' && c <= 'Z') {\n                    cap++;\n\
    \                }\n                else {\n                    sm++;\n      \
    \          }\n            }\n            strength += (cap - sm);\n           \
    \ if (strength > strongest_extension.Length) {\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Write your code here\n        if (extensions.Count\
    \ == 0) {\n            return class_name;\n        }\n        int[] strength =\
    \ new int[extensions.Count];\n        for (int i = 0; i < extensions.Count; i++)\
    \ {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i] += 1;\n                }\n              \
    \  else if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n          \
    \          strength[i] -= 1;\n                }\n            }\n        }\n  \
    \      int max = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int[] strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n            }\n  \
    \          for (int j = 0; j < extensions[i].Length; j++) {\n                if\
    \ (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                   \
    \ strength[i]++;\n                }\n            }\n        }\n        int max\
    \ = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  if (extensions.Count == 0)\n            return class_name;\n        string[]\
    \ str_arr = extensions.ToArray();\n        int[] strength = new int[str_arr.Length];\n\
    \        for (int i = 0; i < str_arr.Length; i++) {\n            strength[i] =\
    \ str_arr[i].ToLower().Count('a') - str_arr[i].ToLower().Count('e');\n       \
    \ }\n        int max_strength = strength[0];\n        int max_index = 0;\n   \
    \     for (int i = 0; i < strength.Length; i++) {\n            if (strength[i]\
    \ > max_strength) {\n                max_strength = strength[i];\n           \
    \     max_index = i;\n            }\n        }\n        return class_name + \"\
    .\" + str_arr[max_index];", "        // Write your code here\n        int[] strength\
    \ = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]--;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int[] strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]--;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  string[] str_arr = extensions.ToArray();\n        int[] strength = new int[str_arr.Length];\n\
    \        for (int i = 0; i < str_arr.Length; i++) {\n            strength[i] =\
    \ str_arr[i].ToLower().IndexOf('a');\n        }\n        int max = 0;\n      \
    \  int max_index = 0;\n        for (int i = 0; i < strength.Length; i++) {\n \
    \           if (strength[i] > max) {\n                max = strength[i];\n   \
    \             max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + str_arr[max_index];", "        // Write your code here\n        int[]\
    \ strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]--;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                maxIndex = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[maxIndex];", "        // Write your code here\n       \
    \ string[] str = class_name.Split('.');\n        int[] strength = new int[str.Length];\n\
    \        for (int i = 0; i < str.Length; i++) {\n            strength[i] = str[i].ToLower().Count('a')\
    \ - str[i].ToLower().Count('e');\n        }\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < strength.Length; i++) {\n      \
    \      if (strength[i] > max) {\n                max = strength[i];\n        \
    \        max_index = i;\n            }\n        }\n        for (int i = 0; i <\
    \ extensions.Count; i++) {\n            if (extensions[i].ToLower().Contains(str[max_index]))\
    \ {\n                return class_name + \".\" + extensions[i];\n            }\n\
    \        }\n        return class_name + \".\" + str[max_index];", "        //\
    \ Write your code here\n        string[] strs = extensions.ToArray();\n      \
    \  int[] strengths = new int[strs.Length];\n        for (int i = 0; i < strs.Length;\
    \ i++) {\n            strengths[i] = strs[i].ToLower().Count('a') - strs[i].ToLower().Count('e');\n\
    \        }\n        int max = 0;\n        int maxIndex = 0;\n        for (int\
    \ i = 0; i < strs.Length; i++) {\n            if (strengths[i] > max) {\n    \
    \            max = strengths[i];\n                maxIndex = i;\n            }\n\
    \        }\n        return class_name + \".\" + strs[maxIndex];", "        //\
    \ Write your code here\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strength[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            strength[i]++;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i]++;\n \
    \               }\n            }\n        }\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n     \
    \       if (strength[i] > max) {\n                max = strength[i];\n       \
    \         max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int[] strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i] += 1;\n                }\n              \
    \  else if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n          \
    \          strength[i] -= 1;\n                }\n            }\n        }\n  \
    \      int max = 0;\n        int index = 0;\n        for (int i = 0; i < strength.Length;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[index];", "        // Write your code here\n        if\
    \ (extensions.Count == 0) {\n            return class_name;\n        }\n     \
    \   var strength = extensions.Select(x => Math.Abs(x.ToLower().IndexOf('a') -\
    \ x.ToLower().IndexOf('e'))).Sum();\n        var max = extensions.OrderBy(x =>\
    \ Math.Abs(x.ToLower().IndexOf('a') - x.ToLower().IndexOf('e'))).First();\n  \
    \      return class_name + \".\" + max;", "        // Write your code here\n \
    \       int[] strengths = new int[extensions.Count];\n        for (int i = 0;\
    \ i < extensions.Count; i++) {\n            strengths[i] = 0;\n            for\
    \ (int j = 0; j < extensions[i].Length; j++) {\n                if (extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z') {\n                    strengths[i]++;\n\
    \                }\n                else if (extensions[i][j] >= 'a' && extensions[i][j]\
    \ <= 'z') {\n                    strengths[i]++;\n                }\n        \
    \    }\n        }\n        int max = 0;\n        int index = 0;\n        for (int\
    \ i = 0; i < extensions.Count; i++) {\n            if (strengths[i] > max) {\n\
    \                max = strengths[i];\n                index = i;\n           \
    \ }\n        }\n        return class_name + \".\" + extensions[index];", "   \
    \     // Write your code here\n        if (extensions.Count == 0)\n          \
    \  return class_name;\n        int max_strength = 0;\n        string max_extension\
    \ = \"\";\n        for (string extension : extensions) {\n            int strength\
    \ = 0;\n            for (char c : extension.ToCharArray()) {\n               \
    \ if (c >= 'A' && c <= 'Z')\n                    strength++;\n               \
    \ else if (c >= 'a' && c <= 'z')\n                    strength--;\n          \
    \  }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n                max_extension = extension;\n            }\n   \
    \     }\n        return class_name + \".\" + max_extension;", "        // Write\
    \ your code here\n        int max_strength = 0;\n        string strongest_extension\
    \ = \"\";\n        for (string extension : extensions) {\n            int strength\
    \ = 0;\n            int cap = 0;\n            int sm = 0;\n            for (char\
    \ c : extension.ToCharArray()) {\n                if (c >= 'A' && c <= 'Z') {\n\
    \                    cap++;\n                }\n                else {\n     \
    \               sm++;\n                }\n            }\n            strength\
    \ = cap - sm;\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;", "     \
    \   // Write your code here\n        string[] class_name_array = class_name.Split('.');\n\
    \        string class_name_without_extension = class_name_array[0];\n        string\
    \ strongest_extension = class_name_without_extension + \".StrongestExtensionName\"\
    ;\n        int strongest_extension_strength = 0;\n        for (string extension\
    \ : extensions) {\n            int[] strength = {0, 0};\n            for (int\
    \ i = 0; i < extension.Length; i++) {\n                if (extension[i] >= 'A'\
    \ && extension[i] <= 'Z') {\n                    strength[0]++;\n            \
    \    }\n                else {\n                    strength[1]++;\n         \
    \       }\n            }\n            int strength_value = strength[0] - strength[1];\n\
    \            if (strength_value > strongest_extension_strength) {\n          \
    \      strongest_extension_strength = strength_value;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Write your code here\n        int[] strength\
    \ = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]++;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                maxIndex = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[maxIndex];", "        int[] strengths = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strengths[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         strengths[i] += (extensions[i][j] - 'a' + 'A');\n            }\n   \
    \     }\n        int max = 0;\n        int max_index = 0;\n        for (int i\
    \ = 0; i < extensions.Count; i++) {\n            if (strengths[i] > max) {\n \
    \               max = strengths[i];\n                max_index = i;\n        \
    \    }\n        }\n        return class_name + \".\" + extensions[max_index];",
  "        // Write your code here\n        string result = \"\";\n        int max_strength\
    \ = 0;\n        for (string extension : extensions) {\n            int strength\
    \ = 0;\n            for (int i = 0; i < extension.Length; i++) {\n           \
    \     if (extension[i] >= 'A' && extension[i] <= 'Z') {\n                    strength++;\n\
    \                }\n            }\n            if (strength > max_strength) {\n\
    \                max_strength = strength;\n                result = class_name\
    \ + \".\" + extension;\n            }\n        }\n        return result;", " \
    \       // Write your code here\n        if (extensions.Count == 0)\n        \
    \    return class_name + \".NoExtension\";\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++)\n            strength[i] =\
    \ 0;\n        for (int i = 0; i < extensions.Count; i++) {\n            int cap\
    \ = 0;\n            int sm = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n\
    \                    cap++;\n                else\n                    sm++;\n\
    \            }\n            strength[i] = cap - sm;\n        }\n        int max\
    \ = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  var result = class_name + \".\";\n        var max_strength = 0;\n        var\
    \ max_extension = null;\n        for (var extension in extensions) {\n       \
    \     var strength = 0;\n            var cap = extension.ToUpper().Count('A');\n\
    \            var sm = extension.ToLower().Count('a');\n            strength =\
    \ cap - sm;\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n                max_extension = extension;\n            }\n   \
    \     }\n        result += max_extension;\n        return result;", "        //\
    \ Write your code here\n        string result = \"\";\n        int max_strength\
    \ = 0;\n        int strength = 0;\n        for (string extension : extensions)\
    \ {\n            int cap = 0;\n            int sm = 0;\n            for (char\
    \ c : extension.ToCharArray()) {\n                if (c >= 'A' && c <= 'Z') {\n\
    \                    cap++;\n                }\n                else {\n     \
    \               sm++;\n                }\n            }\n            strength\
    \ = cap - sm;\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n                result = class_name + \".\" + extension;\n    \
    \        }\n        }\n        return result;", "        // Write your code here\n\
    \        int[] strength = new int[extensions.Count];\n        for (int i = 0;\
    \ i < extensions.Count; i++) {\n            strength[i] = 0;\n            for\
    \ (int j = 0; j < extensions[i].Length; j++) {\n                if (extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z') {\n                    strength[i]++;\n \
    \               }\n                else if (extensions[i][j] >= 'a' && extensions[i][j]\
    \ <= 'z') {\n                    strength[i]--;\n                }\n         \
    \   }\n        }\n        int max = 0;\n        int max_index = 0;\n        for\
    \ (int i = 0; i < extensions.Count; i++) {\n            if (strength[i] > max)\
    \ {\n                max = strength[i];\n                max_index = i;\n    \
    \        }\n        }\n        return class_name + \".\" + extensions[max_index];",
  "        // Write your code here\n        int max_strength = 0;\n        string\
    \ strongest_extension = \"\";\n        for (string extension : extensions) {\n\
    \            int strength = 0;\n            int cap = 0;\n            int sm =\
    \ 0;\n            for (char c : extension.ToCharArray()) {\n                if\
    \ (c >= 'A' && c <= 'Z') {\n                    cap++;\n                }\n  \
    \              else {\n                    sm++;\n                }\n        \
    \    }\n            strength = cap - sm;\n            if (strength > max_strength)\
    \ {\n                max_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Write your code here\n        int[] strength\
    \ = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n            }\n  \
    \          for (int j = 0; j < extensions[i].Length; j++) {\n                if\
    \ (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                   \
    \ strength[i]++;\n                }\n            }\n        }\n        int max\
    \ = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  if (extensions.Count == 0) {\n            return class_name;\n        }\n \
    \       var strength = extensions.ToDictionary()\n            .OrderByDescending((x,\
    \ y) => {\n                var s1 = x.ToLower();\n                var s2 = y.ToLower();\n\
    \                return s1.CompareTo(s2);\n            })\n            .Select(x\
    \ => x.Key)\n            .First();\n        return class_name + \".\" + strength;",
  "        // Write your code here\n        if (extensions.Count == 0)\n         \
    \   return class_name;\n        string[] str = extensions.ToArray();\n       \
    \ int[] strength = new int[str.Length];\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            strength[i] = str[i].ToUpper().Count('A') - str[i].ToLower().Count('a');\n\
    \        }\n        int max = 0;\n        int max_index = 0;\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            if (strength[i] > max) {\n      \
    \          max = strength[i];\n                max_index = i;\n            }\n\
    \        }\n        return class_name + \".\" + str[max_index];", "        //\
    \ Write your code here\n        if (extensions.Count == 0)\n            return\
    \ class_name;\n        var result = class_name;\n        var strength = 0;\n \
    \       for (var extension in extensions) {\n            var cap = extension.ToUpper().Count;\n\
    \            var sm = extension.ToLower().Count;\n            strength = cap -\
    \ sm;\n            if (strength > strength) {\n                result = class_name\
    \ + \".\" + extension;\n            }\n        }\n        return result;", " \
    \       // Write your code here\n        int max = 0;\n        string max_ext\
    \ = \"\";\n        for (string ext : extensions) {\n            int cap = 0;\n\
    \            int sm = 0;\n            for (char c : ext.ToCharArray()) {\n   \
    \             if (c >= 'A' && c <= 'Z') {\n                    cap++;\n      \
    \          }\n                else {\n                    sm++;\n            \
    \    }\n            }\n            if (cap - sm > max) {\n                max\
    \ = cap - sm;\n                max_ext = ext;\n            }\n        }\n    \
    \    return class_name + \".\" + max_ext;", "        // Write your code here\n\
    \        int[] strength = new int[extensions.Count];\n        for (int i = 0;\
    \ i < extensions.Count; i++) {\n            strength[i] = 0;\n            for\
    \ (int j = 0; j < extensions[i].Length; j++) {\n                if (extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z') {\n                    strength[i] += 1;\n\
    \                }\n                else if (extensions[i][j] >= 'a' && extensions[i][j]\
    \ <= 'z') {\n                    strength[i] += 2;\n                }\n      \
    \      }\n        }\n        int max = 0;\n        int max_index = 0;\n      \
    \  for (int i = 0; i < extensions.Count; i++) {\n            if (strength[i] >\
    \ max) {\n                max = strength[i];\n                max_index = i;\n\
    \            }\n        }\n        return class_name + \".\" + extensions[max_index];",
  "        // Write your code here\n        if (extensions.Count == 0) {\n       \
    \     return class_name;\n        }\n        string[] str_extensions = extensions.ToArray();\n\
    \        int[] strength = new int[str_extensions.Length];\n        for (int i\
    \ = 0; i < str_extensions.Length; i++) {\n            strength[i] = str_extensions[i].ToUpper().Count('A')\
    \ - str_extensions[i].ToLower().Count('a');\n        }\n        int max_strength\
    \ = strength[0];\n        int max_index = 0;\n        for (int i = 1; i < strength.Length;\
    \ i++) {\n            if (strength[i] > max_strength) {\n                max_strength\
    \ = strength[i];\n                max_index = i;\n            }\n        }\n \
    \       return class_name + \".\" + str_extensions[max_index];", "        // Write\
    \ your code here\n        string[] strs = extensions.ToArray();\n        int[]\
    \ strengths = new int[strs.Length];\n        for (int i = 0; i < strs.Length;\
    \ i++) {\n            strengths[i] = strs[i].ToLower().Count('a') - strs[i].ToLower().Count('e');\n\
    \        }\n        int max = 0;\n        int index = 0;\n        for (int i =\
    \ 0; i < strs.Length; i++) {\n            if (strengths[i] > max) {\n        \
    \        max = strengths[i];\n                index = i;\n            }\n    \
    \    }\n        return class_name + \".\" + strs[index];", "        // Write your\
    \ code here\n        int[] strength = new int[extensions.Count];\n        for\
    \ (int i = 0; i < extensions.Count; i++) {\n            strength[i] = 0;\n   \
    \         for (int j = 0; j < extensions[i].Length; j++) {\n                if\
    \ (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n                   \
    \ strength[i]++;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i]++;\n \
    \               }\n            }\n        }\n        int max = 0;\n        int\
    \ maxIndex = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n      \
    \      if (strength[i] > max) {\n                max = strength[i];\n        \
    \        maxIndex = i;\n            }\n        }\n        return class_name +\
    \ \".\" + extensions[maxIndex];", "        // Write your code here\n        int[]\
    \ strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]++;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                maxIndex = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[maxIndex];", "        // Write your code here\n       \
    \ if (extensions.Count == 0)\n            return class_name;\n        int max_strength\
    \ = 0;\n        string max_extension = \"\";\n        for (string extension :\
    \ extensions) {\n            int strength = 0;\n            for (int i = 0; i\
    \ < extension.Length; i++) {\n                if (extension[i] >= 'A' && extension[i]\
    \ <= 'Z')\n                    strength += 1;\n                else if (extension[i]\
    \ >= 'a' && extension[i] <= 'z')\n                    strength += 2;\n       \
    \     }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n                max_extension = extension;\n            }\n   \
    \     }\n        return class_name + \".\" + max_extension;", "        // Write\
    \ your code here\n        string[] ext = extensions.ToArray();\n        int[]\
    \ strength = new int[ext.Length];\n        for (int i = 0; i < ext.Length; i++)\
    \ {\n            strength[i] = ext[i].ToUpper().Count('A') - ext[i].ToLower().Count('a');\n\
    \        }\n        int max = 0;\n        int maxIndex = 0;\n        for (int\
    \ i = 0; i < ext.Length; i++) {\n            if (strength[i] > max) {\n      \
    \          max = strength[i];\n                maxIndex = i;\n            }\n\
    \        }\n        return class_name + \".\" + ext[maxIndex];", "        // Write\
    \ your code here\n        if (extensions.Count == 0)\n            return class_name;\n\
    \        int max_strength = 0;\n        string strongest_extension = \"\";\n \
    \       for (string extension : extensions) {\n            int strength = 0;\n\
    \            for (char c : extension.ToCharArray()) {\n                if (c >=\
    \ 'A' && c <= 'Z')\n                    strength++;\n                else if (c\
    \ >= 'a' && c <= 'z')\n                    strength--;\n            }\n      \
    \      if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        // Write\
    \ your code here\n        if (extensions.Count == 0)\n            return class_name;\n\
    \        int[] strengths = new int[extensions.Count];\n        for (int i = 0;\
    \ i < extensions.Count; i++) {\n            strengths[i] = 0;\n            for\
    \ (int j = 0; j < extensions[i].Length; j++) {\n                if (extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z')\n                    strengths[i]++;\n  \
    \          }\n            for (int j = 0; j < extensions[i].Length; j++) {\n \
    \               if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z')\n    \
    \                strengths[i]--;\n            }\n        }\n        int max =\
    \ 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strengths[i] > max) {\n                max = strengths[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int max = 0;\n        string max_ext = \"\";\n        for (string ext : extensions)\
    \ {\n            int cap = 0;\n            int sm = 0;\n            for (char\
    \ c : ext.ToCharArray()) {\n                if (c >= 'A' && c <= 'Z') {\n    \
    \                cap++;\n                }\n                else {\n         \
    \           sm++;\n                }\n            }\n            if (cap - sm\
    \ > max) {\n                max = cap - sm;\n                max_ext = ext;\n\
    \            }\n        }\n        return class_name + \".\" + max_ext;", "  \
    \      // Write your code here\n        string[] arr = extensions.ToArray();\n\
    \        int[] strengths = new int[arr.Length];\n        for (int i = 0; i < arr.Length;\
    \ i++) {\n            strengths[i] = arr[i].ToLower().IndexOf('a');\n        }\n\
    \        int max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i <\
    \ arr.Length; i++) {\n            if (strengths[i] > max) {\n                max\
    \ = strengths[i];\n                maxIndex = i;\n            }\n        }\n \
    \       return class_name + \".\" + arr[maxIndex];", "        // Write your code\
    \ here\n        int[] strength = new int[extensions.Count];\n        for (int\
    \ i = 0; i < extensions.Count; i++) {\n            strength[i] = 0;\n        \
    \    for (int j = 0; j < extensions[i].Length; j++) {\n                if (extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z') {\n                    strength[i]++;\n \
    \               }\n                else if (extensions[i][j] >= 'a' && extensions[i][j]\
    \ <= 'z') {\n                    strength[i]++;\n                }\n         \
    \   }\n        }\n        int max = 0;\n        int index = 0;\n        for (int\
    \ i = 0; i < strength.Length; i++) {\n            if (strength[i] > max) {\n \
    \               max = strength[i];\n                index = i;\n            }\n\
    \        }\n        return class_name + \".\" + extensions[index];", "       \
    \ // Write your code here\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strength[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            strength[i]++;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i]--;\n \
    \               }\n            }\n        }\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n     \
    \       if (strength[i] > max) {\n                max = strength[i];\n       \
    \         max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int[] strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]--;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[index];", "        // Write your code here\n        int[]\
    \ strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]++;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  if (extensions.Count == 0)\n            return class_name;\n        var strength\
    \ = extensions.Select(x => x.ToLower().Count('a') - x.ToLower().Count('e')).OrderBy(x\
    \ => x).FirstOrDefault();\n        return class_name + \".\" + strength;", " \
    \       // Write your code here\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strength[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            strength[i]++;\n                }\n                else {\n     \
    \               strength[i]--;\n                }\n            }\n        }\n\
    \        int max = 0;\n        int max_index = 0;\n        for (int i = 0; i <\
    \ extensions.Count; i++) {\n            if (strength[i] > max) {\n           \
    \     max = strength[i];\n                max_index = i;\n            }\n    \
    \    }\n        return class_name + \".\" + extensions[max_index];", "       \
    \ // Write your code here\n        if (extensions.Count == 0)\n            return\
    \ class_name + \".NoExtension\";\n        int max_strength = 0;\n        string\
    \ strongest_extension = \"\";\n        for (string extension : extensions) {\n\
    \            int strength = 0;\n            for (char c : extension.ToCharArray())\
    \ {\n                if (c >= 'A' && c <= 'Z')\n                    strength++;\n\
    \                else if (c >= 'a' && c <= 'z')\n                    strength--;\n\
    \            }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;", "     \
    \   // Write your code here\n        if (extensions.Count == 0)\n            return\
    \ class_name;\n        int[] strength = new int[extensions.Count];\n        for\
    \ (int i = 0; i < extensions.Count; i++) {\n            strength[i] = 0;\n   \
    \         for (int j = 0; j < extensions[i].Length; j++) {\n                if\
    \ (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n                    strength[i]++;\n\
    \                if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z')\n   \
    \                 strength[i]++;\n            }\n        }\n        int max =\
    \ 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  string[] str = extensions.ToArray();\n        int[] strength = new int[str.Length];\n\
    \        for (int i = 0; i < str.Length; i++) {\n            strength[i] = str[i].ToUpper().Count('A')\
    \ - str[i].ToLower().Count('a');\n        }\n        int max = 0;\n        int\
    \ index = 0;\n        for (int i = 0; i < strength.Length; i++) {\n          \
    \  if (strength[i] > max) {\n                max = strength[i];\n            \
    \    index = i;\n            }\n        }\n        return class_name + \".\" +\
    \ str[index];", "        // Write your code here\n        int[] strength = new\
    \ int[extensions.Count];\n        for (int i = 0; i < extensions.Count; i++) {\n\
    \            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]++;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int[] strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i] += 1;\n                }\n              \
    \  else if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n          \
    \          strength[i] -= 1;\n                }\n            }\n        }\n  \
    \      int max = 0;\n        int max_index = 0;\n        for (int i = 0; i < strength.Length;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  string[] str_arr = extensions.ToArray();\n        int[] strength = new int[str_arr.Length];\n\
    \        for (int i = 0; i < str_arr.Length; i++) {\n            strength[i] =\
    \ str_arr[i].ToLower().Count('a') - str_arr[i].ToLower().Count('e');\n       \
    \ }\n        int max_strength = strength[0];\n        int max_index = 0;\n   \
    \     for (int i = 0; i < strength.Length; i++) {\n            if (strength[i]\
    \ > max_strength) {\n                max_strength = strength[i];\n           \
    \     max_index = i;\n            }\n        }\n        return class_name + \"\
    .\" + str_arr[max_index];", "        // Write your code here\n        if (extensions.Count\
    \ == 0)\n            return class_name;\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++)\n            strength[i] =\
    \ 0;\n        for (int i = 0; i < extensions.Count; i++) {\n            int cap\
    \ = 0, sm = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n\
    \                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n   \
    \                 cap++;\n                else\n                    sm++;\n  \
    \          }\n            strength[i] = cap - sm;\n        }\n        int max\
    \ = 0;\n        int index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[index];", "        // Write your code here\n        string[]\
    \ exts = extensions.ToArray();\n        int[] strengths = new int[exts.Length];\n\
    \        for (int i = 0; i < exts.Length; i++) {\n            strengths[i] = exts[i].ToLower().Count('a')\
    \ - exts[i].ToLower().Count('e');\n        }\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < exts.Length; i++) {\n          \
    \  if (strengths[i] > max) {\n                max = strengths[i];\n          \
    \      max_index = i;\n            }\n        }\n        return class_name + \"\
    .\" + exts[max_index];", "        // Write your code here\n        string[] str_arr\
    \ = extensions.ToArray();\n        int[] strength = new int[str_arr.Length];\n\
    \        for (int i = 0; i < str_arr.Length; i++) {\n            strength[i] =\
    \ str_arr[i].ToLower().Count('a') - str_arr[i].ToLower().Count('e');\n       \
    \ }\n        int max_strength = strength[0];\n        int max_index = 0;\n   \
    \     for (int i = 0; i < strength.Length; i++) {\n            if (strength[i]\
    \ > max_strength) {\n                max_strength = strength[i];\n           \
    \     max_index = i;\n            }\n        }\n        return class_name + \"\
    .\" + str_arr[max_index];", "        // Write your code here\n        int[] strength\
    \ = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i] += 1;\n                }\n              \
    \  else if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n          \
    \          strength[i] -= 1;\n                }\n            }\n        }\n  \
    \      int max = 0;\n        int index = 0;\n        for (int i = 0; i < strength.Length;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[index];", "        // Write your code here\n        int\
    \ max = 0;\n        string max_ext = \"\";\n        for (string ext : extensions)\
    \ {\n            int cap = 0;\n            int sm = 0;\n            for (char\
    \ c : ext.ToCharArray()) {\n                if (c >= 'A' && c <= 'Z') {\n    \
    \                cap++;\n                }\n                else {\n         \
    \           sm++;\n                }\n            }\n            if (cap - sm\
    \ > max) {\n                max = cap - sm;\n                max_ext = ext;\n\
    \            }\n        }\n        return class_name + \".\" + max_ext;", "  \
    \      // Write your code here\n        if (extensions.Count == 0)\n         \
    \   return class_name;\n        var result = class_name + \".\" + extensions[0];\n\
    \        for (var i = 0; i < extensions.Count; i++) {\n            var current\
    \ = extensions[i];\n            var strength = 0;\n            var cap = 0;\n\
    \            var sm = 0;\n            for (var j = 0; j < current.Length; j++)\
    \ {\n                if (current[j] == 'A' || current[j] == 'a')\n           \
    \         cap++;\n                else if (current[j] == 'a' || current[j] ==\
    \ 'e' || current[j] == 'E')\n                    sm++;\n            }\n      \
    \      strength = cap - sm;\n            if (strength > result.Length)\n     \
    \           result = current;\n        }\n        return result;", "        //\
    \ Write your code here\n        string[] str_arr = extensions.ToArray();\n   \
    \     int[] strength = new int[str_arr.Length];\n        for (int i = 0; i < str_arr.Length;\
    \ i++) {\n            strength[i] = str_arr[i].ToLower().Count('a') - str_arr[i].ToLower().Count('e');\n\
    \        }\n        int max = 0;\n        int max_index = 0;\n        for (int\
    \ i = 0; i < strength.Length; i++) {\n            if (strength[i] > max) {\n \
    \               max = strength[i];\n                max_index = i;\n         \
    \   }\n        }\n        return class_name + \".\" + str_arr[max_index];", " \
    \       // Write your code here\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strength[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            strength[i]++;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i]--;\n \
    \               }\n            }\n        }\n        int max = 0;\n        int\
    \ index = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n         \
    \   if (strength[i] > max) {\n                max = strength[i];\n           \
    \     index = i;\n            }\n        }\n        return class_name + \".\"\
    \ + extensions[index];", "        // Write your code here\n        string[] str_arr\
    \ = extensions.ToArray();\n        int[] strength = new int[str_arr.Length];\n\
    \        for (int i = 0; i < str_arr.Length; i++) {\n            strength[i] =\
    \ str_arr[i].ToLower().Count('a') - str_arr[i].ToLower().Count('e');\n       \
    \ }\n        int max = strength[0];\n        int index = 0;\n        for (int\
    \ i = 1; i < strength.Length; i++) {\n            if (strength[i] > max) {\n \
    \               max = strength[i];\n                index = i;\n            }\n\
    \        }\n        return class_name + \".\" + str_arr[index];", "        //\
    \ Write your code here\n        int max_strength = 0;\n        string strongest_extension\
    \ = \"\";\n        for (string extension : extensions) {\n            int strength\
    \ = 0;\n            for (char c : extension.ToCharArray()) {\n               \
    \ if (c >= 'A' && c <= 'Z') {\n                    strength += 1;\n          \
    \      }\n                else {\n                    strength -= 1;\n       \
    \         }\n            }\n            if (strength > max_strength) {\n     \
    \           max_strength = strength;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        // Write your code here\n        int max_strength = 0;\n        string\
    \ strongest_extension = \"\";\n        for (string extension : extensions) {\n\
    \            int strength = 0;\n            for (char c : extension.ToCharArray())\
    \ {\n                if (c >= 'A' && c <= 'Z') {\n                    strength\
    \ += 1;\n                }\n                else if (c >= 'a' && c <= 'z') {\n\
    \                    strength -= 1;\n                }\n            }\n      \
    \      if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        // Write\
    \ your code here\n        string result = \"\";\n        if (extensions.Count\
    \ == 0) {\n            return result;\n        }\n        int max_strength = 0;\n\
    \        for (string extension : extensions) {\n            int strength = 0;\n\
    \            int cap = 0;\n            int sm = 0;\n            for (int i = 0;\
    \ i < extension.Length; i++) {\n                if (extension[i] >= 'A' && extension[i]\
    \ <= 'Z') {\n                    cap++;\n                }\n                else\
    \ {\n                    sm++;\n                }\n            }\n           \
    \ strength = cap - sm;\n            if (strength > max_strength) {\n         \
    \       max_strength = strength;\n                result = class_name + \".\"\
    \ + extension;\n            }\n        }\n        return result;", "        //\
    \ Write your code here\n        string[] class_name_array = class_name.Split('.');\n\
    \        string class_name_string = class_name_array[0];\n        string[] extensions_array\
    \ = extensions.ToArray();\n        string strongest_extension = \"\";\n      \
    \  int strongest_extension_strength = 0;\n        for (int i = 0; i < extensions_array.Length;\
    \ i++) {\n            string extension_name = extensions_array[i];\n         \
    \   int extension_strength = 0;\n            int[] extension_name_array = extension_name.ToCharArray();\n\
    \            for (int j = 0; j < extension_name_array.Length; j++) {\n       \
    \         if (extension_name_array[j] >= 'A' && extension_name_array[j] <= 'Z')\
    \ {\n                    extension_strength -= 1;\n                }\n       \
    \         else if (extension_name_array[j] >= 'a' && extension_name_array[j] <=\
    \ 'z') {\n                    extension_strength -= 1;\n                }\n  \
    \          }\n            if (extension_strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = extension_strength;\n    \
    \            strongest_extension = extension_name;\n            }\n        }\n\
    \        return class_name_string + \".\" + strongest_extension;", "        //\
    \ Write your code here\n        string[] class_name_array = class_name.Split(\"\
    .\");\n        string class_name_without_extension = class_name_array[0];\n  \
    \      string strongest_extension = \"\";\n        int strongest_extension_strength\
    \ = 0;\n        for (string extension : extensions) {\n            string[] extension_array\
    \ = extension.Split(\".\");\n            int extension_strength = 0;\n       \
    \     for (int i = 0; i < extension_array.Length; i++) {\n                if (extension_array[i].ToUpper()\
    \ != extension_array[i]) {\n                    extension_strength += 1;\n   \
    \             }\n                else {\n                    extension_strength\
    \ += 2;\n                }\n            }\n            if (extension_strength\
    \ > strongest_extension_strength) {\n                strongest_extension = extension;\n\
    \                strongest_extension_strength = extension_strength;\n        \
    \    }\n        }\n        return class_name_without_extension + \".\" + strongest_extension;",
  "        // Write your code here\n        string[] str_arr = extensions.ToArray();\n\
    \        int[] strength = new int[str_arr.Length];\n        for (int i = 0; i\
    \ < str_arr.Length; i++) {\n            strength[i] = str_arr[i].ToLower().Count('a')\
    \ - str_arr[i].ToLower().Count('e');\n        }\n        int max = 0;\n      \
    \  int max_index = 0;\n        for (int i = 0; i < strength.Length; i++) {\n \
    \           if (strength[i] > max) {\n                max = strength[i];\n   \
    \             max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + str_arr[max_index];", "        // Write your code here\n        int[]\
    \ strengths = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strengths[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strengths[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strengths[i]++;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strengths[i] > max) {\n                max = strengths[i];\n\
    \                index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[index];", "        // Write your code here\n        string[]\
    \ str = class_name.Split(\".\");\n        int cap = 0, sm = 0;\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            if (str[i].ToUpper() != str[i]) {\n\
    \                cap++;\n            }\n            else {\n                sm++;\n\
    \            }\n        }\n        int max = 0;\n        string result = \"\"\
    ;\n        for (int i = 0; i < extensions.Count; i++) {\n            int strength\
    \ = cap - sm;\n            if (strength > max) {\n                max = strength;\n\
    \                result = extensions[i];\n            }\n        }\n        return\
    \ result;", "        // Write your code here\n        string[] strs = extensions.ToArray();\n\
    \        int[] strength = new int[strs.Length];\n        for (int i = 0; i < strs.Length;\
    \ i++) {\n            strength[i] = strs[i].ToLower().IndexOf('a');\n        }\n\
    \        int max = 0;\n        int max_index = 0;\n        for (int i = 0; i <\
    \ strength.Length; i++) {\n            if (strength[i] > max) {\n            \
    \    max = strength[i];\n                max_index = i;\n            }\n     \
    \   }\n        return class_name + \".\" + strs[max_index];", "        // Write\
    \ your code here\n        int[] strength = new int[extensions.Count];\n      \
    \  for (int i = 0; i < extensions.Count; i++) {\n            strength[i] = 0;\n\
    \            for (int j = 0; j < extensions[i].Length; j++) {\n              \
    \  if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n               \
    \     strength[i]++;\n                }\n            }\n            for (int j\
    \ = 0; j < extensions[i].Length; j++) {\n                if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i]++;\n \
    \               }\n            }\n        }\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n     \
    \       if (strength[i] > max) {\n                max = strength[i];\n       \
    \         max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  string[] str = extensions.ToArray();\n        int[] strength = new int[str.Length];\n\
    \        for (int i = 0; i < str.Length; i++) {\n            strength[i] = str[i].ToUpper().Count('A')\
    \ - str[i].ToLower().Count('a');\n        }\n        int max = 0;\n        int\
    \ index = 0;\n        for (int i = 0; i < strength.Length; i++) {\n          \
    \  if (strength[i] > max) {\n                max = strength[i];\n            \
    \    index = i;\n            }\n        }\n        return class_name + \".\" +\
    \ str[index];", "        // Write your code here\n        string[] strs = extensions.ToArray();\n\
    \        int[] strengths = new int[strs.Length];\n        for (int i = 0; i <\
    \ strs.Length; i++) {\n            strengths[i] = strs[i].ToLower().IndexOf('a');\n\
    \        }\n        int max = 0;\n        int max_index = 0;\n        for (int\
    \ i = 0; i < strs.Length; i++) {\n            if (strengths[i] > max) {\n    \
    \            max = strengths[i];\n                max_index = i;\n           \
    \ }\n        }\n        return class_name + \".\" + strs[max_index];", "     \
    \   // Write your code here\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strength[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            strength[i] += 1;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i] -= 1;\n\
    \                }\n            }\n        }\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < strength.Length; i++) {\n      \
    \      if (strength[i] > max) {\n                max = strength[i];\n        \
    \        max_index = i;\n            }\n        }\n        return class_name +\
    \ \".\" + extensions[max_index];", "        // Write your code here\n        int[]\
    \ strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n            }\n  \
    \          for (int j = 0; j < extensions[i].Length; j++) {\n                if\
    \ (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                   \
    \ strength[i]++;\n                }\n            }\n        }\n        int max\
    \ = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int[] strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]--;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int[] strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i] += 1;\n                }\n              \
    \  else if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n          \
    \          strength[i] -= 1;\n                }\n            }\n        }\n  \
    \      int max = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  if (extensions.Count == 0)\n            return class_name;\n        int max_strength\
    \ = 0;\n        string strongest_extension = \"\";\n        for (string extension\
    \ : extensions) {\n            int strength = 0;\n            for (char c : extension.ToCharArray())\
    \ {\n                if (c >= 'A' && c <= 'Z')\n                    strength++;\n\
    \                else if (c >= 'a' && c <= 'z')\n                    strength--;\n\
    \            }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;", "     \
    \   // Write your code here\n        int[] strengths = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strengths[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         strengths[i] += (extensions[i][j] - 'a' + 'A');\n            }\n   \
    \     }\n        int max = 0;\n        int maxIndex = 0;\n        for (int i =\
    \ 0; i < extensions.Count; i++) {\n            if (strengths[i] > max) {\n   \
    \             max = strengths[i];\n                maxIndex = i;\n           \
    \ }\n        }\n        return class_name + \".\" + extensions[maxIndex];", " \
    \       // Write your code here\n        string[] str = class_name.Split('.');\n\
    \        int[] strength = new int[str.Length];\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            strength[i] = str[i].ToUpper().Count('A') - str[i].ToLower().Count('a');\n\
    \        }\n        int max = 0;\n        int index = 0;\n        for (int i =\
    \ 0; i < strength.Length; i++) {\n            if (strength[i] > max) {\n     \
    \           max = strength[i];\n                index = i;\n            }\n  \
    \      }\n        return class_name + \".\" + str[index] + \".\" + extensions[index];",
  "        // Write your code here\n        string[] str = class_name.Split('.');\n\
    \        int cap = 0, sm = 0;\n        for (int i = 0; i < str.Length; i++) {\n\
    \            if (str[i].ToUpper() != str[i]) {\n                cap++;\n     \
    \       }\n            else {\n                sm++;\n            }\n        }\n\
    \        int strength = cap - sm;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (extensions[i].ToLower() == extensions[i]) {\n      \
    \          sm++;\n            }\n            else {\n                cap++;\n\
    \            }\n        }\n        if (cap - sm > strength) {\n            strength\
    \ = cap - sm;\n        }\n        for (int i = 0; i < extensions.Count; i++) {\n\
    \            if (extensions[i].ToLower() == extensions[i]) {\n               \
    \ if (extensions[i].ToLower() == extensions[i]) {\n                    sm++;\n\
    \                }\n                else {\n                    cap++;\n     \
    \           }\n            }\n            else {\n                sm++;\n    \
    \        }\n        }\n        if (cap - sm > strength) {\n            strength\
    \ = cap - sm;\n        }\n        return class_name + \".\" + extensions[0];",
  "        int[] strength = new int[extensions.Count];\n        for (int i = 0; i\
    \ < extensions.Count; i++) {\n            strength[i] = 0;\n            for (int\
    \ j = 0; j < extensions[i].Length; j++) {\n                if (extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z') {\n                    strength[i]++;\n \
    \               }\n                else if (extensions[i][j] >= 'a' && extensions[i][j]\
    \ <= 'z') {\n                    strength[i]++;\n                }\n         \
    \   }\n        }\n        int max = 0;\n        int max_index = 0;\n        for\
    \ (int i = 0; i < extensions.Count; i++) {\n            if (strength[i] > max)\
    \ {\n                max = strength[i];\n                max_index = i;\n    \
    \        }\n        }\n        return class_name + \".\" + extensions[max_index];",
  "        // Write your code here\n        if (extensions.Count == 0)\n         \
    \   return class_name;\n        string[] strs = extensions.ToArray();\n      \
    \  int[] strengths = new int[strs.Length];\n        for (int i = 0; i < strs.Length;\
    \ i++) {\n            strengths[i] = strs[i].ToUpper().Count('A') - strs[i].ToLower().Count('a');\n\
    \        }\n        int max = 0;\n        int maxIndex = 0;\n        for (int\
    \ i = 0; i < strs.Length; i++) {\n            if (strengths[i] > max) {\n    \
    \            max = strengths[i];\n                maxIndex = i;\n            }\n\
    \        }\n        return class_name + \".\" + strs[maxIndex];", "        //\
    \ Write your code here\n        if (extensions.Count == 0)\n            return\
    \ class_name;\n        int max_strength = 0;\n        string strongest_extension\
    \ = \"\";\n        for (string extension : extensions) {\n            int strength\
    \ = 0;\n            for (int i = 0; i < extension.Length; i++) {\n           \
    \     if (extension[i] >= 'A' && extension[i] <= 'Z')\n                    strength++;\n\
    \                else if (extension[i] >= 'a' && extension[i] <= 'z')\n      \
    \              strength--;\n            }\n            if (strength > max_strength)\
    \ {\n                max_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Write your code here\n        if (extensions.Count\
    \ == 0) {\n            return class_name + \".NoExtension\";\n        }\n    \
    \    int[] strength = new int[extensions.Count];\n        for (int i = 0; i <\
    \ extensions.Count; i++) {\n            strength[i] = 0;\n            for (int\
    \ j = 0; j < extensions[i].Length; j++) {\n                if (extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z') {\n                    strength[i]++;\n \
    \               }\n                else if (extensions[i][j] >= 'a' && extensions[i][j]\
    \ <= 'z') {\n                    strength[i]--;\n                }\n         \
    \   }\n        }\n        int max = 0;\n        int max_index = 0;\n        for\
    \ (int i = 0; i < extensions.Count; i++) {\n            if (strength[i] > max)\
    \ {\n                max = strength[i];\n                max_index = i;\n    \
    \        }\n        }\n        return class_name + \".\" + extensions[max_index];",
  "        // Write your code here\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strength[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            strength[i]++;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i]--;\n \
    \               }\n            }\n        }\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n     \
    \       if (strength[i] > max) {\n                max = strength[i];\n       \
    \         max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  if (extensions.Count == 0)\n            return class_name;\n        string[]\
    \ exts = extensions.ToArray();\n        int[] strength = new int[exts.Length];\n\
    \        for (int i = 0; i < exts.Length; i++) {\n            int cap = 0, sm\
    \ = 0;\n            for (int j = 0; j < exts[i].Length; j++) {\n             \
    \   if (exts[i][j] >= 'A' && exts[i][j] <= 'Z')\n                    cap++;\n\
    \                else\n                    sm++;\n            }\n            strength[i]\
    \ = cap - sm;\n        }\n        int max = 0;\n        int index = 0;\n     \
    \   for (int i = 0; i < strength.Length; i++) {\n            if (strength[i] >\
    \ max) {\n                max = strength[i];\n                index = i;\n   \
    \         }\n        }\n        return class_name + \".\" + exts[index];", " \
    \       // Write your code here\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strength[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            strength[i]++;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i]--;\n \
    \               }\n            }\n        }\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n     \
    \       if (strength[i] > max) {\n                max = strength[i];\n       \
    \         max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int[] strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i] += 1;\n                }\n              \
    \  else if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n          \
    \          strength[i] -= 1;\n                }\n            }\n        }\n  \
    \      int max = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  if (extensions.Count == 0)\n            return class_name;\n        string[]\
    \ exts = extensions.ToArray();\n        int[] strengths = new int[exts.Length];\n\
    \        for (int i = 0; i < exts.Length; i++) {\n            strengths[i] = 0;\n\
    \            for (int j = 0; j < exts[i].Length(); j++) {\n                if\
    \ (exts[i][j] >= 'A' && exts[i][j] <= 'Z')\n                    strengths[i]++;\n\
    \                if (exts[i][j] >= 'a' && exts[i][j] <= 'z')\n               \
    \     strengths[i]++;\n            }\n        }\n        int max = 0;\n      \
    \  int max_index = 0;\n        for (int i = 0; i < exts.Length; i++) {\n     \
    \       if (strengths[i] > max) {\n                max = strengths[i];\n     \
    \           max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + exts[max_index];", "        // Write your code here\n        int max_strength\
    \ = 0;\n        string strongest_extension = \"\";\n        for (string extension\
    \ : extensions) {\n            int strength = 0;\n            for (char c : extension.ToCharArray())\
    \ {\n                if (c >= 'A' && c <= 'Z') {\n                    strength\
    \ += 1;\n                }\n                else if (c >= 'a' && c <= 'z') {\n\
    \                    strength -= 1;\n                }\n            }\n      \
    \      if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        // Write\
    \ your code here\n        int[] strength = new int[extensions.Count];\n      \
    \  for (int i = 0; i < extensions.Count; i++) {\n            strength[i] = 0;\n\
    \            for (int j = 0; j < extensions[i].Length; j++) {\n              \
    \  if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n               \
    \     strength[i]++;\n                }\n            }\n            for (int j\
    \ = 0; j < extensions[i].Length; j++) {\n                if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i]--;\n \
    \               }\n            }\n        }\n        int max = 0;\n        int\
    \ index = 0;\n        for (int i = 0; i < strength.Length; i++) {\n          \
    \  if (strength[i] > max) {\n                max = strength[i];\n            \
    \    index = i;\n            }\n        }\n        return class_name + \".\" +\
    \ extensions[index];", "        // Write your code here\n        string[] str\
    \ = class_name.Split('.');\n        int cap = 0;\n        int sm = 0;\n      \
    \  for (int i = 0; i < str.Length; i++) {\n            if (str[i].ToUpper() !=\
    \ str[i]) {\n                cap++;\n            }\n            else {\n     \
    \           sm++;\n            }\n        }\n        int strength = cap - sm;\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            if (extensions[i].ToUpper()\
    \ != extensions[i]) {\n                cap++;\n            }\n            else\
    \ {\n                sm++;\n            }\n            if (cap - sm > strength)\
    \ {\n                strength = cap - sm;\n                str = extensions[i].Split('.');\n\
    \            }\n        }\n        return class_name + \".\" + str[0];", "   \
    \     // Write your code here\n        string[] str = class_name.Split('.');\n\
    \        int[] strength = new int[str.Length];\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            strength[i] = str[i].ToUpper().Count('A') - str[i].ToLower().Count('a');\n\
    \        }\n        int max = 0;\n        int index = 0;\n        for (int i =\
    \ 0; i < strength.Length; i++) {\n            if (strength[i] > max) {\n     \
    \           max = strength[i];\n                index = i;\n            }\n  \
    \      }\n        return class_name + \".\" + str[index] + \".\" + extensions[0];",
  "        // Write your code here\n        int[] strengths = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strengths[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         strengths[i] += (extensions[i][j] - 'a' + 'A');\n            }\n   \
    \     }\n        int max = 0;\n        int max_index = 0;\n        for (int i\
    \ = 0; i < extensions.Count; i++) {\n            if (strengths[i] > max) {\n \
    \               max = strengths[i];\n                max_index = i;\n        \
    \    }\n        }\n        return class_name + \".\" + extensions[max_index];",
  "        // Write your code here\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strength[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            strength[i]++;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i]--;\n \
    \               }\n            }\n        }\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n     \
    \       if (strength[i] > max) {\n                max = strength[i];\n       \
    \         max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int[] strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]--;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int index = 0;\n        for (int i = 0; i < strength.Length;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[index];", "        // Write your code here\n        int[]\
    \ strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]++;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  if (extensions.Count == 0)\n            return class_name;\n        int max_strength\
    \ = 0;\n        string strongest_extension = \"\";\n        for (string extension\
    \ : extensions) {\n            int strength = 0;\n            for (int i = 0;\
    \ i < extension.Length; i++) {\n                if (extension[i] >= 'A' && extension[i]\
    \ <= 'Z')\n                    strength++;\n                else if (extension[i]\
    \ >= 'a' && extension[i] <= 'z')\n                    strength--;\n          \
    \  }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;", "     \
    \   // Write your code here\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strength[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            strength[i]++;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i]--;\n \
    \               }\n            }\n        }\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n     \
    \       if (strength[i] > max) {\n                max = strength[i];\n       \
    \         max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  if (extensions.Count == 0)\n            return class_name;\n        string[]\
    \ exts = extensions.ToArray();\n        int[] strengths = new int[exts.Length];\n\
    \        for (int i = 0; i < exts.Length; i++) {\n            strengths[i] = 0;\n\
    \            for (int j = 0; j < exts[i].Length(); j++) {\n                if\
    \ (exts[i][j] >= 'A' && exts[i][j] <= 'Z')\n                    strengths[i]++;\n\
    \                else if (exts[i][j] >= 'a' && exts[i][j] <= 'z')\n          \
    \          strengths[i]++;\n            }\n        }\n        int max = 0;\n \
    \       int max_index = 0;\n        for (int i = 0; i < exts.Length; i++) {\n\
    \            if (strengths[i] > max) {\n                max = strengths[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + exts[max_index];", "        // Write your code here\n        int[]\
    \ strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]++;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                maxIndex = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[maxIndex];", "        // Write your code here\n       \
    \ var class_name_lower = class_name.ToLower();\n        var class_name_upper =\
    \ class_name.ToUpper();\n        var class_name_extensions = class_name_lower\
    \ + \".\";\n        var class_name_extensions_upper = class_name_upper + \".\"\
    ;\n        var class_name_extensions_lower = class_name_lower + \".\";\n     \
    \   var class_name_extensions_upper_lower = class_name_upper + \".\";\n      \
    \  var class_name_extensions_lower_lower = class_name_lower + \".\";\n       \
    \ var class_name_extensions_upper_lower_lower = class_name_upper + \".\";\n  \
    \      var class_name_extensions_lower_lower_lower = class_name_lower + \".\"\
    ;\n        var class_name_extensions_upper_lower_lower_lower = class_name_upper\
    \ + \".\";\n        var class_name_extensions_lower_lower_lower_lower = class_name_lower\
    \ + \".\";\n        var class_name_extensions_upper_lower_lower_lower_lower =\
    \ class_name_upper + \".\";\n        var class_name_extensions_lower_lower_lower_lower_lower\
    \ = class_name_lower + \".\";\n        var class_name_extensions_upper_lower_lower_lower_lower_lower\
    \ = class_name_upper + \".\";\n        var class_name_extensions_lower_lower_lower_lower_lower_lower\
    \ = class_name_lower + \".\";\n        var class_name_extensions_upper_lower_lower_lower_lower_lower_lower\
    \ = class_name_upper + \".\";\n        var class_name_extensions_lower_lower_lower_lower_lower_lower_lower\
    \ = class_name_lower + \".\";\n        var class_name_extensions_upper_lower_lower_lower_lower_lower_lower_lower\
    \ = class_name_upper + \".\";\n        var class_name_extensions_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = class_name_lower + \".\";\n        var class_name", "        // Write your\
    \ code here\n        var strong_ext = extensions.Where(x => x.Length > 0).OrderBy(x\
    \ => x.ToUpper()).FirstOrDefault();\n        return class_name + \".\" + strong_ext;",
  "        // Write your code here\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strength[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            strength[i]++;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i]--;\n \
    \               }\n            }\n        }\n        int max = 0;\n        int\
    \ maxIndex = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n      \
    \      if (strength[i] > max) {\n                max = strength[i];\n        \
    \        maxIndex = i;\n            }\n        }\n        return class_name +\
    \ \".\" + extensions[maxIndex];", "        // Write your code here\n        string[]\
    \ str = class_name.Split('.');\n        int cap = 0, sm = 0;\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            if (str[i].ToUpper() != str[i]) {\n\
    \                cap++;\n            }\n            else {\n                sm++;\n\
    \            }\n        }\n        int max = 0;\n        string result = \"\"\
    ;\n        for (int i = 0; i < extensions.Count; i++) {\n            int strength\
    \ = 0;\n            if (extensions[i].ToUpper() != extensions[i]) {\n        \
    \        strength = cap - sm;\n            }\n            else {\n           \
    \     strength = cap + sm;\n            }\n            if (strength > max) {\n\
    \                max = strength;\n                result = class_name + \".\"\
    \ + extensions[i];\n            }\n        }\n        return result;", "     \
    \   // Write your code here\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strength[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            strength[i] += 1;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i] -= 1;\n\
    \                }\n            }\n        }\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n     \
    \       if (strength[i] > max) {\n                max = strength[i];\n       \
    \         max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  if (extensions.Count == 0)\n            return class_name;\n        var strong_extension\
    \ = extensions.First();\n        var strong_extension_strength = 0;\n        for\
    \ (var extension : extensions) {\n            var strength = 0;\n            var\
    \ cap = extension.ToUpper().Count;\n            var sm = extension.ToLower().Count;\n\
    \            strength = cap - sm;\n            if (strength > strong_extension_strength)\
    \ {\n                strong_extension = extension;\n                strong_extension_strength\
    \ = strength;\n            }\n        }\n        return class_name + \".\" + strong_extension;",
  "        // Write your code here\n        if (extensions.Count == 0)\n         \
    \   return class_name;\n        string[] str = extensions.ToArray();\n       \
    \ int[] strength = new int[str.Length];\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            strength[i] = str[i].ToUpper().Count('A') - str[i].ToLower().Count('a');\n\
    \        }\n        int max = 0;\n        int index = 0;\n        for (int i =\
    \ 0; i < strength.Length; i++) {\n            if (strength[i] > max) {\n     \
    \           max = strength[i];\n                index = i;\n            }\n  \
    \      }\n        return class_name + \".\" + str[index];", "        // Write\
    \ your code here\n        if (extensions.Count == 0)\n            return class_name;\n\
    \        int max_strength = 0;\n        string strongest_extension = \"\";\n \
    \       for (string extension : extensions) {\n            int strength = 0;\n\
    \            for (char c : extension.ToCharArray()) {\n                if (c >=\
    \ 'A' && c <= 'Z')\n                    strength++;\n                else if (c\
    \ >= 'a' && c <= 'z')\n                    strength--;\n            }\n      \
    \      if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        // Write\
    \ your code here\n        if (extensions.Count == 0)\n            return class_name;\n\
    \        var max_strength = -1;\n        var max_extension = \"\";\n        for\
    \ (var i = 0; i < extensions.Count; i++) {\n            var strength = 0;\n  \
    \          var extension = extensions[i];\n            var cap = extension.Count(c\
    \ => c.ToUpper() != c);\n            var sm = extension.Count(c => c.ToLower()\
    \ != c);\n            strength = cap - sm;\n            if (strength > max_strength)\
    \ {\n                max_strength = strength;\n                max_extension =\
    \ extension;\n            }\n        }\n        return class_name + \".\" + max_extension;",
  "        // Write your code here\n        if (extensions.Count == 0) {\n       \
    \     return class_name;\n        }\n        int max = 0;\n        string max_ext\
    \ = \"\";\n        for (string ext : extensions) {\n            int strength =\
    \ 0;\n            int cap = 0;\n            int sm = 0;\n            for (char\
    \ c : ext.ToCharArray()) {\n                if (c >= 'A' && c <= 'Z') {\n    \
    \                cap++;\n                }\n                else {\n         \
    \           sm++;\n                }\n            }\n            strength = cap\
    \ - sm;\n            if (strength > max) {\n                max = strength;\n\
    \                max_ext = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + max_ext;", "        // Write your code here\n        if (extensions.Count\
    \ == 0)\n            return class_name;\n        int max_strength = 0;\n     \
    \   string strongest_extension = \"\";\n        for (string extension : extensions)\
    \ {\n            int strength = 0;\n            for (char c : extension.ToCharArray())\
    \ {\n                if (c >= 'A' && c <= 'Z')\n                    strength++;\n\
    \                else if (c >= 'a' && c <= 'z')\n                    strength--;\n\
    \            }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;", "     \
    \   // Write your code here\n        if (extensions.Count == 0)\n            return\
    \ class_name;\n        string[] ext = extensions.ToArray();\n        int[] strength\
    \ = new int[ext.Length];\n        for (int i = 0; i < ext.Length; i++) {\n   \
    \         strength[i] = 0;\n            for (int j = 0; j < ext[i].Length(); j++)\
    \ {\n                if (ext[i][j] >= 'A' && ext[i][j] <= 'Z')\n             \
    \       strength[i]++;\n                else if (ext[i][j] >= 'a' && ext[i][j]\
    \ <= 'z')\n                    strength[i]++;\n            }\n        }\n    \
    \    int max = 0;\n        int max_index = 0;\n        for (int i = 0; i < ext.Length;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + ext[max_index];", "        // Write your code here\n        if (extensions.Count\
    \ == 0)\n            return class_name;\n        int max_strength = 0;\n     \
    \   string strongest_extension = \"\";\n        for (string extension : extensions)\
    \ {\n            int strength = 0;\n            for (char c : extension.ToCharArray())\
    \ {\n                if (c >= 'A' && c <= 'Z')\n                    strength++;\n\
    \                else if (c >= 'a' && c <= 'z')\n                    strength--;\n\
    \            }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;", "     \
    \   // Write your code here\n        string[] str_arr = extensions.ToArray();\n\
    \        int[] strength = new int[str_arr.Length];\n        for (int i = 0; i\
    \ < str_arr.Length; i++) {\n            strength[i] = str_arr[i].ToLower().Count('a')\
    \ - str_arr[i].ToLower().Count('e');\n        }\n        int max = strength[0];\n\
    \        int index = 0;\n        for (int i = 1; i < strength.Length; i++) {\n\
    \            if (strength[i] > max) {\n                max = strength[i];\n  \
    \              index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + str_arr[index];", "        // Write your code here\n        var class_name_lower\
    \ = class_name.ToLower();\n        var class_name_upper = class_name.ToUpper();\n\
    \        var result = class_name_lower + \".\" + extensions.First();\n       \
    \ for (var extension : extensions) {\n            var extension_lower = extension.ToLower();\n\
    \            var extension_upper = extension.ToUpper();\n            var strength\
    \ = extension_lower.Count('A') - extension_lower.Count('a');\n            if (strength\
    \ > result.Count('a') - result.Count('A')) {\n                result = class_name_lower\
    \ + \".\" + extension_lower;\n            }\n        }\n        return result;",
  "        // Write your code here\n        string[] str = class_name.Split('.');\n\
    \        int cap = 0;\n        int sm = 0;\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            if (str[i].ToUpper() != str[i]) {\n                cap++;\n\
    \            }\n            else {\n                sm++;\n            }\n   \
    \     }\n        int max = 0;\n        string result = \"\";\n        for (int\
    \ i = 0; i < extensions.Count; i++) {\n            int strength = cap - sm;\n\
    \            if (strength > max) {\n                max = strength;\n        \
    \        result = extensions[i];\n            }\n        }\n        return result;",
  "        // Write your code here\n        int[] strengths = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strengths[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            strengths[i]++;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strengths[i]++;\n\
    \                }\n            }\n        }\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n     \
    \       if (strengths[i] > max) {\n                max = strengths[i];\n     \
    \           max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int[] strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n            }\n  \
    \          for (int j = 0; j < extensions[i].Length; j++) {\n                if\
    \ (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                   \
    \ strength[i]++;\n                }\n            }\n        }\n        int max\
    \ = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int[] strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]--;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                maxIndex = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[maxIndex];", "        // Write your code here\n       \
    \ int[] strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]--;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int[] strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]++;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  if (extensions.Count == 0) {\n            return class_name;\n        }\n \
    \       string strongest_extension = extensions[0];\n        int strength = 0;\n\
    \        for (string extension : extensions) {\n            int cap = 0;\n   \
    \         int sm = 0;\n            for (char c : extension.ToCharArray()) {\n\
    \                if (c >= 'A' && c <= 'Z') {\n                    cap++;\n   \
    \             }\n                else {\n                    sm++;\n         \
    \       }\n            }\n            strength += cap - sm;\n            if (strength\
    \ > strongest_extension.Length) {\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        // Write your code here\n        if (extensions.Count == 0)\n         \
    \   return class_name;\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++)\n            strength[i] =\
    \ 0;\n        for (int i = 0; i < extensions.Count; i++) {\n            int cap\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n          \
    \          cap++;\n            }\n            int sm = 0;\n            for (int\
    \ j = 0; j < extensions[i].Length; j++) {\n                if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z')\n                    sm++;\n            }\n\
    \            strength[i] = cap - sm;\n        }\n        int max = 0;\n      \
    \  int max_index = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n\
    \            if (strength[i] > max) {\n                max = strength[i];\n  \
    \              max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int[] strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]--;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        int[] strengths = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strengths[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         strengths[i] += (extensions[i][j] - 'a' + 'A');\n            }\n   \
    \     }\n        int max = 0;\n        int max_index = 0;\n        for (int i\
    \ = 0; i < extensions.Count; i++) {\n            if (strengths[i] > max) {\n \
    \               max = strengths[i];\n                max_index = i;\n        \
    \    }\n        }\n        return class_name + \".\" + extensions[max_index];",
  "        // Write your code here\n        if (extensions.Count == 0)\n         \
    \   return class_name + \".StrongestExtensionName\";\n        if (extensions.Count\
    \ == 1)\n            return class_name + \".\" + extensions[0];\n        int max_strength\
    \ = 0;\n        string strongest_extension = \"\";\n        for (string extension\
    \ : extensions) {\n            int strength = 0;\n            for (char c : extension.ToCharArray())\
    \ {\n                if (c >= 'A' && c <= 'Z')\n                    strength++;\n\
    \                else if (c >= 'a' && c <= 'z')\n                    strength--;\n\
    \            }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;", "     \
    \   // Write your code here\n        int max_strength = 0;\n        string strongest_extension\
    \ = \"\";\n        for (string extension : extensions) {\n            int strength\
    \ = 0;\n            for (char c : extension.ToCharArray()) {\n               \
    \ if (c >= 'A' && c <= 'Z') {\n                    strength += 1;\n          \
    \      }\n                else if (c >= 'a' && c <= 'z') {\n                 \
    \   strength -= 1;\n                }\n            }\n            if (strength\
    \ > max_strength) {\n                max_strength = strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        // Write your code here\n\
    \        int[] strength = new int[extensions.Count];\n        for (int i = 0;\
    \ i < extensions.Count; i++) {\n            strength[i] = 0;\n            for\
    \ (int j = 0; j < extensions[i].Length; j++) {\n                if (extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z') {\n                    strength[i]++;\n \
    \               }\n            }\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z')\
    \ {\n                    strength[i]--;\n                }\n            }\n  \
    \      }\n        int max = 0;\n        int maxIndex = 0;\n        for (int i\
    \ = 0; i < extensions.Count; i++) {\n            if (strength[i] > max) {\n  \
    \              max = strength[i];\n                maxIndex = i;\n           \
    \ }\n        }\n        return class_name + \".\" + extensions[maxIndex];", " \
    \       // Write your code here\n        string[] str_arr = extensions.ToArray();\n\
    \        int[] strength = new int[str_arr.Length];\n        for (int i = 0; i\
    \ < str_arr.Length; i++) {\n            strength[i] = str_arr[i].ToLower().Count('a')\
    \ - str_arr[i].ToLower().Count('e');\n        }\n        int max = 0;\n      \
    \  int index = 0;\n        for (int i = 0; i < strength.Length; i++) {\n     \
    \       if (strength[i] > max) {\n                max = strength[i];\n       \
    \         index = i;\n            }\n        }\n        return class_name + \"\
    .\" + str_arr[index];", "        // Write your code here\n        int[] strength\
    \ = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]--;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[index];", "        // Write your code here\n        string[]\
    \ str = class_name.Split('.');\n        int cap = 0, sm = 0;\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            if (str[i].ToUpper() != str[i]) {\n\
    \                cap++;\n            }\n            else {\n                sm++;\n\
    \            }\n        }\n        int max = 0;\n        string max_ext = \"\"\
    ;\n        for (int i = 0; i < extensions.Count; i++) {\n            int strength\
    \ = (cap - sm) * 1 + extensions[i].ToLower().Length;\n            if (strength\
    \ > max) {\n                max = strength;\n                max_ext = extensions[i];\n\
    \            }\n        }\n        return class_name + \".\" + max_ext;", "  \
    \      // Write your code here\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strength[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            strength[i]++;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i]--;\n \
    \               }\n            }\n        }\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n     \
    \       if (strength[i] > max) {\n                max = strength[i];\n       \
    \         max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  int[] strength = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]--;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int max_index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                max_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[max_index];", "        // Write your code here\n      \
    \  string[] arr = extensions.ToArray();\n        int[] strength = new int[arr.Length];\n\
    \        for (int i = 0; i < arr.Length; i++) {\n            strength[i] = arr[i].ToLower().IndexOf('a');\n\
    \        }\n        int max = 0;\n        int max_index = 0;\n        for (int\
    \ i = 0; i < arr.Length; i++) {\n            if (strength[i] > max) {\n      \
    \          max = strength[i];\n                max_index = i;\n            }\n\
    \        }\n        return class_name + \".\" + arr[max_index];", "        //\
    \ Write your code here\n        int[] strength = new int[extensions.Count];\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            strength[i]\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n        \
    \            strength[i] += 1;\n                }\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength[i] -= 1;\n\
    \                }\n            }\n        }\n        int max = 0;\n        int\
    \ maxIndex = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n      \
    \      if (strength[i] > max) {\n                max = strength[i];\n        \
    \        maxIndex = i;\n            }\n        }\n        return class_name +\
    \ \".\" + extensions[maxIndex];", "        // Write your code here\n        if\
    \ (extensions.Count == 0)\n            return class_name;\n        int[] strength\
    \ = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\n\
    \                    strength[i]++;\n                else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z')\n                    strength[i]--;\n   \
    \         }\n        }\n        int max = 0;\n        int max_index = 0;\n   \
    \     for (int i = 0; i < extensions.Count; i++) {\n            if (strength[i]\
    \ > max) {\n                max = strength[i];\n                max_index = i;\n\
    \            }\n        }\n        return class_name + \".\" + extensions[max_index];",
  "        // Write your code here\n        string[] strs = extensions.ToArray();\n\
    \        int[] strengths = new int[strs.Length];\n        for (int i = 0; i <\
    \ strs.Length; i++) {\n            strengths[i] = strs[i].ToLower().Count('a')\
    \ - strs[i].ToLower().Count('e');\n        }\n        int max = 0;\n        int\
    \ max_index = 0;\n        for (int i = 0; i < strs.Length; i++) {\n          \
    \  if (strengths[i] > max) {\n                max = strengths[i];\n          \
    \      max_index = i;\n            }\n        }\n        return class_name + \"\
    .\" + strs[max_index];", "        // Write your code here\n        var result\
    \ = class_name + \".\";\n        var max_strength = 0;\n        var max_extension\
    \ = \"\";\n        for (var extension in extensions) {\n            var strength\
    \ = 0;\n            var cap = extension.ToUpper().Count('A');\n            var\
    \ sm = extension.ToLower().Count('a');\n            strength = cap - sm;\n   \
    \         if (strength > max_strength) {\n                max_strength = strength;\n\
    \                max_extension = extension;\n            }\n        }\n      \
    \  result += max_extension;\n        return result;", "        // Write your code\
    \ here\n        var result = class_name + \".\";\n        var max_strength = 0;\n\
    \        var max_extension = \"\";\n        for (var extension : extensions) {\n\
    \            var strength = 0;\n            var cap = 0;\n            var sm =\
    \ 0;\n            var i = 0;\n            for (i = 0; i < extension.Length; i++)\
    \ {\n                if (extension[i] == '_') {\n                    continue;\n\
    \                }\n                if (extension[i] >= 'A' && extension[i] <=\
    \ 'Z') {\n                    cap++;\n                }\n                else\
    \ {\n                    sm++;\n                }\n            }\n           \
    \ strength = cap - sm;\n            if (strength > max_strength) {\n         \
    \       max_strength = strength;\n                max_extension = extension;\n\
    \            }\n        }\n        result += max_extension;\n        return result;",
  "        // Write your code here\n        if (extensions.Count == 0)\n         \
    \   return class_name + \".NoExtension\";\n        var strength = extensions.ToDictionary()\n\
    \            .OrderByDescending((x, y) => {\n                var s1 = x.ToLower();\n\
    \                var s2 = y.ToLower();\n                return s1.CompareTo(s2);\n\
    \            })\n            .Select(x => x.Key)\n            .First();\n    \
    \    return class_name + \".\" + strength;", "        // Write your code here\n\
    \        string result = class_name + \".\" + extensions[0];\n        for (int\
    \ i = 1; i < extensions.Count; i++) {\n            if (extensions[i].ToLower().IndexOf(extensions[i].ToLower())\
    \ > extensions[i].ToLower().IndexOf(extensions[0].ToLower())) {\n            \
    \    result = class_name + \".\" + extensions[i];\n            }\n        }\n\
    \        return result;", "        // Write your code here\n        int[] strength\
    \ = new int[extensions.Count];\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            strength[i] = 0;\n            for (int j = 0; j < extensions[i].Length;\
    \ j++) {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                    strength[i]++;\n                }\n                else\
    \ if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n                \
    \    strength[i]--;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        int index = 0;\n        for (int i = 0; i < extensions.Count;\
    \ i++) {\n            if (strength[i] > max) {\n                max = strength[i];\n\
    \                index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[index];"]
stop_tokens:
- "\n    }\n"
