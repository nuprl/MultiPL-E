name: HumanEval_96_count_up_to
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Implement a function that takes an non-negative integer and\
  \ returns a list of the first n\n    // integers that are prime numbers and less\
  \ than n.\n    // for example:\n    // >>> CountUpTo((5L))\n    // (new List<long>(new\
  \ long[]{(long)2L, (long)3L}))\n    // >>> CountUpTo((11L))\n    // (new List<long>(new\
  \ long[]{(long)2L, (long)3L, (long)5L, (long)7L}))\n    // >>> CountUpTo((0L))\n\
  \    // (new List<long>())\n    // >>> CountUpTo((20L))\n    // (new List<long>(new\
  \ long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L,\
  \ (long)19L}))\n    // >>> CountUpTo((1L))\n    // (new List<long>())\n    // >>>\
  \ CountUpTo((18L))\n    // (new List<long>(new long[]{(long)2L, (long)3L, (long)5L,\
  \ (long)7L, (long)11L, (long)13L, (long)17L}))\n    public static List<long> CountUpTo(long\
  \ n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountUpTo((5L)).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L}))));\n    Debug.Assert(CountUpTo((6L)).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L, (long)5L}))));\n    Debug.Assert(CountUpTo((7L)).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L, (long)5L}))));\n    Debug.Assert(CountUpTo((10L)).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L}))));\n    Debug.Assert(CountUpTo((0L)).Equals((new\
  \ List<long>())));\n    Debug.Assert(CountUpTo((22L)).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L,\
  \ (long)19L}))));\n    Debug.Assert(CountUpTo((1L)).Equals((new List<long>())));\n\
  \    Debug.Assert(CountUpTo((18L)).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
  \ (long)5L, (long)7L, (long)11L, (long)13L, (long)17L}))));\n    Debug.Assert(CountUpTo((47L)).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L,\
  \ (long)17L, (long)19L, (long)23L, (long)29L, (long)31L, (long)37L, (long)41L, (long)43L}))));\n\
  \    Debug.Assert(CountUpTo((101L)).Equals((new List<long>(new long[]{(long)2L,\
  \ (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)19L, (long)23L,\
  \ (long)29L, (long)31L, (long)37L, (long)41L, (long)43L, (long)47L, (long)53L, (long)59L,\
  \ (long)61L, (long)67L, (long)71L, (long)73L, (long)79L, (long)83L, (long)89L, (long)97L}))));\n\
  \    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        if (n < 0) {\n\
    \            return result;\n        }\n        if (n == 0) {\n            return\
    \ result;\n        }\n        if (n == 1) {\n            return result;\n    \
    \    }\n        if (n == 2) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        if (n == 3) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            return result;\n        }\n        if (n\
    \ == 4) {\n            result.Add(2);\n            result.Add(3);\n          \
    \  result.Add(5);\n            return result;\n        }\n        if (n == 5)\
    \ {\n            result.Add(2);\n            result.Add(3);\n            result.Add(5);\n\
    \            result.Add(7);\n            return result;\n        }\n        if\
    \ (n == 6) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 7) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 8) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 9) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 10) {\n            result.Add(2);\n            result.Add(3", "      \
    \  List<long> result = new List<long>();\n        if (n < 0)\n            return\
    \ result;\n        if (n == 0)\n            return result;\n        if (n == 1)\n\
    \            return result;\n        if (n == 2)\n            return result;\n\
    \        if (n == 3)\n            return result;\n        if (n == 4)\n      \
    \      return result;\n        if (n == 5)\n            return result;\n     \
    \   if (n == 6)\n            return result;\n        if (n == 7)\n           \
    \ return result;\n        if (n == 8)\n            return result;\n        if\
    \ (n == 9)\n            return result;\n        if (n == 10)\n            return\
    \ result;\n        if (n == 11)\n            return result;\n        if (n ==\
    \ 12)\n            return result;\n        if (n == 13)\n            return result;\n\
    \        if (n == 14)\n            return result;\n        if (n == 15)\n    \
    \        return result;\n        if (n == 16)\n            return result;\n  \
    \      if (n == 17)\n            return result;\n        if (n == 18)\n      \
    \      return result;\n        if (n == 19)\n            return result;\n    \
    \    if (n == 20)\n            return result;\n        if (n == 21)\n        \
    \    return result;\n        if (n == 22)\n            return result;\n      \
    \  if (n == 23)\n            return result;\n        if (n == 24)\n          \
    \  return result;\n        if (n == 25)\n            return result;\n        if\
    \ (n == 26)\n            return result;\n        if (n == 27)\n            return\
    \ result;\n        if (n == 28)\n            return result;\n        if (n ==\
    \ 29)\n            return result;\n        if (n == 30)\n            return result;\n\
    \        if (n == 31)\n            return result;\n        if (n == 32)\n    \
    \        return result;\n        if (n == 33)\n            return result;\n  \
    \      if (n == 34)\n            return result;\n        if (n == 35)\n      \
    \      return result;\n        if (n == 36)\n            return result;\n    \
    \    if (n", "        List<long> result = new List<long>();\n        if (n < 0)\
    \ {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n  \
    \      if (n == 0) {\n            return result;\n        }\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (IsPrime(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> primes\
    \ = new List<long>();\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\");\n        }\n        if (n == 0) {\n            return\
    \ primes;\n        }\n        if (n == 1) {\n            primes.Add(2);\n    \
    \        return primes;\n        }\n        if (n == 2) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            return primes;\n        }\n        if\
    \ (n == 3) {\n            primes.Add(2);\n            primes.Add(3);\n       \
    \     primes.Add(5);\n            return primes;\n        }\n        if (n ==\
    \ 4) {\n            primes.Add(2);\n            primes.Add(3);\n            primes.Add(5);\n\
    \            primes.Add(7);\n            return primes;\n        }\n        if\
    \ (n == 5) {\n            primes.Add(2);\n            primes.Add(3);\n       \
    \     primes.Add(5);\n            primes.Add(7);\n            primes.Add(11);\n\
    \            return primes;\n        }\n        if (n == 6) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            return\
    \ primes;\n        }\n        if (n == 7) {\n            primes.Add(2);\n    \
    \        primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            primes.Add(17);\n\
    \            return primes;\n        }\n        if (n == 8) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            primes.Add(17);\n\
    \            ", "        if (n < 0)\n            throw new IllegalArgumentException(\"\
    n\");\n        List<long> result = new List<long>();\n        if (n == 0)\n  \
    \          return result;\n        if (n == 1)\n            return result;\n \
    \       for (long i = 2; i <= n; i++) {\n            if (IsPrime(i))\n       \
    \         result.Add(i);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n <= 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            return result;\n        }\n   \
    \     if (n == 2) {\n            result.Add(2);\n            return result;\n\
    \        }\n        if (n == 3) {\n            result.Add(2);\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n == 4) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            return result;\n\
    \        }\n        if (n == 5) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            return result;\n\
    \        }\n        if (n == 6) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 7) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 8) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 9) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 10) {\n            result.Add(2);\n            result.Add(3);\n      \
    \      result.Add(5);\n            result.Add(7);", "        List<long> result\
    \ = new List<long>();\n        if (n < 0)\n            return result;\n      \
    \  if (n == 0)\n            return result;\n        if (n == 1)\n            return\
    \ result;\n        if (n == 2)\n            return result;\n        if (n == 3)\n\
    \            return result;\n        if (n == 4)\n            return result;\n\
    \        if (n == 5)\n            return result;\n        if (n == 6)\n      \
    \      return result;\n        if (n == 7)\n            return result;\n     \
    \   if (n == 8)\n            return result;\n        if (n == 9)\n           \
    \ return result;\n        if (n == 10)\n            return result;\n        if\
    \ (n == 11)\n            return result;\n        if (n == 12)\n            return\
    \ result;\n        if (n == 13)\n            return result;\n        if (n ==\
    \ 14)\n            return result;\n        if (n == 15)\n            return result;\n\
    \        if (n == 16)\n            return result;\n        if (n == 17)\n    \
    \        return result;\n        if (n == 18)\n            return result;\n  \
    \      if (n == 19)\n            return result;\n        if (n == 20)\n      \
    \      return result;\n        if (n == 21)\n            return result;\n    \
    \    if (n == 22)\n            return result;\n        if (n == 23)\n        \
    \    return result;\n        if (n == 24)\n            return result;\n      \
    \  if (n == 25)\n            return result;\n        if (n == 26)\n          \
    \  return result;\n        if (n == 27)\n            return result;\n        if\
    \ (n == 28)\n            return result;\n        if (n == 29)\n            return\
    \ result;\n        if (n == 30)\n            return result;\n        if (n ==\
    \ 31)\n            return result;\n        if (n == 32)\n            return result;\n\
    \        if (n == 33)\n            return result;\n        if (n == 34)\n    \
    \        return result;\n        if (n == 35)\n            return result;\n  \
    \      if (n == 36)\n            return result;\n        if (n", "        List<long>\
    \ result = new List<long>();\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\");\n        }\n        if (n == 0) {\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(2);\n    \
    \        return result;\n        }\n        for (long i = 2; i <= n; i++) {\n\
    \            if (IsPrime(i)) {\n                result.Add(i);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n < 0)\n            return result;\n        if (n == 0)\n       \
    \     return result;\n        if (n == 1)\n            return result;\n      \
    \  long i = 2;\n        while (i <= n) {\n            if (IsPrime(i)) {\n    \
    \            result.Add(i);\n            }\n            i++;\n        }\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    );\n        }\n        if (n == 0) {\n            return result;\n        }\n\
    \        if (n == 1) {\n            result.Add(2);\n            return result;\n\
    \        }\n        for (long i = 2; i <= n; i++) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n < 0)\
    \ {\n            throw new ArgumentOutOfRangeException(\"n\");\n        }\n  \
    \      if (n == 0) {\n            return result;\n        }\n        if (n ==\
    \ 1) {\n            result.Add(2);\n            return result;\n        }\n  \
    \      for (long i = 2; i <= n; i++) {\n            if (IsPrime(i)) {\n      \
    \          result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n < 0) {\n         \
    \   throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n ==\
    \ 0) {\n            return result;\n        }\n        if (n == 1) {\n       \
    \     result.Add(2);\n            return result;\n        }\n        if (n ==\
    \ 2) {\n            result.Add(2);\n            result.Add(3);\n            return\
    \ result;\n        }\n        if (n == 3) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            return result;\n\
    \        }\n        if (n == 4) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            return result;\n\
    \        }\n        if (n == 5) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 6) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 7) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 8) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 9) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n", "        List<long> result = new List<long>();\n    \
    \    if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\");\n        }\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        long i = 2;\n        while (i <= n) {\n        \
    \    if (IsPrime(i)) {\n                result.Add(i);\n                i++;\n\
    \            }\n            else {\n                i++;\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n <= 0) {\n            return result;\n        }\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (IsPrime(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\");\n        }\n        if (n == 0) {\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(2);\n    \
    \        return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(3);\n            return result;\n        }\n        if\
    \ (n == 3) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            return result;\n        }\n        if (n ==\
    \ 4) {\n            result.Add(2);\n            result.Add(3);\n            result.Add(5);\n\
    \            result.Add(7);\n            return result;\n        }\n        if\
    \ (n == 5) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 6) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 7) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 8) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 9) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add", "        List<long> result = new List<long>();\n        if\
    \ (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n     \
    \   }\n        if (n == 0) {\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(2);\n            return result;\n       \
    \ }\n        if (n == 2) {\n            result.Add(2);\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n == 3) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            return result;\n\
    \        }\n        if (n == 4) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            return result;\n\
    \        }\n        if (n == 5) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 6) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 7) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 8) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 9) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n", "        List<long> result = new List<long>();\n    \
    \    if (n < 0)\n            return result;\n        if (n == 0)\n           \
    \ return result;\n        if (n == 1)\n            return result;\n        if\
    \ (n == 2) {\n            result.Add(2);\n            return result;\n       \
    \ }\n        for (long i = 3; i <= n; i++) {\n            if (IsPrime(i)) {\n\
    \                result.Add(i);\n            }\n        }\n        return result;",
  "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n\
    \        List<long> result = new List<long>();\n        if (n == 0)\n        \
    \    return result;\n        if (n == 1)\n            return result;\n       \
    \ if (n == 2)\n            return result.Add(2);\n        if (n == 3)\n      \
    \      return result.Add(2).Add(3);\n        if (n == 4)\n            return result.Add(2).Add(3).Add(5);\n\
    \        if (n == 5)\n            return result.Add(2).Add(3).Add(5).Add(7);\n\
    \        if (n == 6)\n            return result.Add(2).Add(3).Add(5).Add(7).Add(11);\n\
    \        if (n == 7)\n            return result.Add(2).Add(3).Add(5).Add(7).Add(11).Add(13);\n\
    \        if (n == 8)\n            return result.Add(2).Add(3).Add(5).Add(7).Add(11).Add(13).Add(17);\n\
    \        if (n == 9)\n            return result.Add(2).Add(3).Add(5).Add(7).Add(11).Add(13).Add(17).Add(19);\n\
    \        if (n == 10)\n            return result.Add(2).Add(3).Add(5).Add(7).Add(11).Add(13).Add(17).Add(19).Add(23);\n\
    \        if (n == 11)\n            return result.Add(2).Add(3).Add(5).Add(7).Add(11).Add(13).Add(17).Add(19).Add(23).Add(29);\n\
    \        if (n == 12)\n            return result.Add(2).Add(3).Add(5).Add(7).Add(11).Add(13).Add(17).Add(19).Add(23).Add(29).Add(31);\n\
    \        if (n == 13)\n            return result.Add(2).Add(3).Add(5).Add(7).Add(11).Add(13).Add(17).Add(19).Add",
  "        List<long> result = new List<long>();\n        if (n <= 0) {\n        \
    \    return result;\n        }\n        long i = 2;\n        while (i < n) {\n\
    \            if (IsPrime(i)) {\n                result.Add(i);\n            }\n\
    \            i++;\n        }\n        return result;\n    }\n\n    public static\
    \ bool IsPrime(long n) {\n        if (n <= 1) {\n            return false;\n \
    \       }\n        if (n == 2) {\n            return true;\n        }\n      \
    \  if (n % 2 == 0) {\n            return false;\n        }\n        long i = 3;\n\
    \        while (i * i <= n) {\n            if (n % i == 0) {\n               \
    \ return false;\n            }\n            i += 2;\n        }\n        return\
    \ true;", "        List<long> result = new List<long>();\n        if (n <= 0)\
    \ {\n            return result;\n        }\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (IsPrime(i)) {\n                result.Add(i);\n         \
    \   }\n        }\n        return result;\n    }\n\n    // Implement a function\
    \ that takes a list of non-negative integers and returns a list of the\n    //\
    \ first n integers that are prime numbers and greater than n.\n    // for example:\n\
    \    // >>> CountUpToGreaterThan((5L))\n    // (new List<long>(new long[]{(long)11L,\
    \ (long)13L}))\n    // >>> CountUpToGreaterThan((11L))\n    // (new List<long>(new\
    \ long[]{(long)11L, (long)13L, (long)17L, (long)19L}))\n    // >>> CountUpToGreaterThan((0L))\n\
    \    // (new List<long>())\n    // >>> CountUpToGreaterThan((20L))\n    // (new\
    \ List<long>(new long[]{(long)11L, (long)13L, (long)17L, (long)19L, (long)23L,\
    \ (long)29L, (long)31L, (long)37L, (long)41L, (long)43L, (long)47L}))\n    //\
    \ >>> CountUpToGreaterThan((1L))\n    // (new List<long>())\n    // >>> CountUpToGreaterThan((18L))\n\
    \    // (new List<long>(new long[]{(long)11L, (long)13L, (long)17L, (long)19L,\
    \ (long)23L, (long)29L, (long)31L, (long)37L, (long)41L, (long)43L, (long)47L}))\n\
    \    public static List<long> CountUpToGreaterThan(long n) {\n        List<long>\
    \ result = new List<long>();\n        if (n <= 0) {\n            return result;\n\
    \        }\n        for (long i =", "        List<long> result = new List<long>();\n\
    \        if (n <= 0) {\n            return result;\n        }\n        long i\
    \ = 2;\n        while (i <= n) {\n            if (IsPrime(i)) {\n            \
    \    result.Add(i);\n            }\n            i++;\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n <= 0)\
    \ {\n            return result;\n        }\n        long i = 2;\n        while\
    \ (i <= n) {\n            if (IsPrime(i)) {\n                result.Add(i);\n\
    \            }\n            i++;\n        }\n        return result;\n    }\n\n\
    \    public static boolean IsPrime(long n) {\n        if (n <= 1) {\n        \
    \    return false;\n        }\n        if (n == 2) {\n            return true;\n\
    \        }\n        if (n % 2 == 0) {\n            return false;\n        }\n\
    \        long i = 3;\n        while (i <= Math.Sqrt(n)) {\n            if (n %\
    \ i == 0) {\n                return false;\n            }\n            i += 2;\n\
    \        }\n        return true;", "        List<long> result = new List<long>();\n\
    \        if (n < 0) {\n            throw new IllegalArgumentException(\"n must\
    \ be non-negative\");\n        }\n        if (n == 0) {\n            return result;\n\
    \        }\n        for (long i = 2; i < n; i++) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n < 0)\n\
    \            return result;\n        if (n == 0)\n            return result;\n\
    \        if (n == 1)\n            return result;\n        if (n == 2)\n      \
    \      return result;\n        if (n == 3)\n            return result;\n     \
    \   if (n == 4)\n            return result;\n        if (n == 5)\n           \
    \ return result;\n        if (n == 6)\n            return result;\n        if\
    \ (n == 7)\n            return result;\n        if (n == 8)\n            return\
    \ result;\n        if (n == 9)\n            return result;\n        if (n == 10)\n\
    \            return result;\n        if (n == 11)\n            return result;\n\
    \        if (n == 12)\n            return result;\n        if (n == 13)\n    \
    \        return result;\n        if (n == 14)\n            return result;\n  \
    \      if (n == 15)\n            return result;\n        if (n == 16)\n      \
    \      return result;\n        if (n == 17)\n            return result;\n    \
    \    if (n == 18)\n            return result;\n        if (n == 19)\n        \
    \    return result;\n        if (n == 20)\n            return result;\n      \
    \  if (n == 21)\n            return result;\n        if (n == 22)\n          \
    \  return result;\n        if (n == 23)\n            return result;\n        if\
    \ (n == 24)\n            return result;\n        if (n == 25)\n            return\
    \ result;\n        if (n == 26)\n            return result;\n        if (n ==\
    \ 27)\n            return result;\n        if (n == 28)\n            return result;\n\
    \        if (n == 29)\n            return result;\n        if (n == 30)\n    \
    \        return result;\n        if (n == 31)\n            return result;\n  \
    \      if (n == 32)\n            return result;\n        if (n == 33)\n      \
    \      return result;\n        if (n == 34)\n            return result;\n    \
    \    if (n == 35)\n            return result;\n        if (n == 36)\n        \
    \    return result;\n        if (n", "        List<long> result = new List<long>();\n\
    \        if (n < 0) {\n            throw new IllegalArgumentException(\"n must\
    \ be non-negative\");\n        }\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        long i = 2;\n        while (i < n) {\n         \
    \   if (IsPrime(i)) {\n                result.Add(i);\n            }\n       \
    \     i++;\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n < 0)\n            return result;\n        if (n\
    \ == 0)\n            return result;\n        if (n == 1)\n            return result;\n\
    \        if (n == 2)\n            result.Add(2);\n        if (n == 3)\n      \
    \      result.Add(3);\n        if (n == 4)\n            result.Add(2);\n     \
    \   if (n == 5)\n            result.Add(5);\n        if (n == 6)\n           \
    \ result.Add(2);\n        if (n == 7)\n            result.Add(7);\n        if\
    \ (n == 8)\n            result.Add(2);\n        if (n == 9)\n            result.Add(3);\n\
    \        if (n == 10)\n            result.Add(5);\n        if (n == 11)\n    \
    \        result.Add(7);\n        if (n == 12)\n            result.Add(2);\n  \
    \      if (n == 13)\n            result.Add(13);\n        if (n == 14)\n     \
    \       result.Add(2);\n        if (n == 15)\n            result.Add(3);\n   \
    \     if (n == 16)\n            result.Add(5);\n        if (n == 17)\n       \
    \     result.Add(7);\n        if (n == 18)\n            result.Add(11);\n    \
    \    if (n == 19)\n            result.Add(13);\n        if (n == 20)\n       \
    \     result.Add(17);\n        if (n == 21)\n            result.Add(19);\n   \
    \     if (n == 22)\n            result.Add(2);\n        if (n == 23)\n       \
    \     result.Add(23);\n        if (n == 24)\n            result.Add(2);\n    \
    \    if (n == 25)\n            result.Add(5);\n        if (n == 26)\n        \
    \    result.Add(7);\n        if (n == 27)\n            result.Add(11);\n     \
    \   if (n == 28)\n            result.Add(13);\n        if (n == 29)\n        \
    \    result.Add(17);\n        if (n == 30)\n            result.", "        List<long>\
    \ result = new List<long>();\n        if (n < 0) {\n            return result;\n\
    \        }\n        if (n == 0) {\n            return result;\n        }\n   \
    \     if (n == 1) {\n            return result;\n        }\n        if (n == 2)\
    \ {\n            result.Add(2);\n            return result;\n        }\n     \
    \   if (n == 3) {\n            result.Add(2);\n            result.Add(3);\n  \
    \          return result;\n        }\n        if (n == 4) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            return result;\n\
    \        }\n        if (n == 5) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            return result;\n\
    \        }\n        if (n == 6) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 7) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 8) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 9) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 10) {\n            result.Add(2);\n            result.Add(3", "      \
    \  List<long> result = new List<long>();\n        if (n < 0) {\n            throw\
    \ new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n == 0) {\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(2);\n\
    \            return result;\n        }\n        long i = 2;\n        while (i\
    \ <= n) {\n            if (IsPrime(i)) {\n                result.Add(i);\n   \
    \         }\n            i++;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n should be non-negative\");\n        }\n        if (n == 0) {\n            return\
    \ result;\n        }\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (IsPrime(i)) {\n                result.Add(i);\n            }\n        }\n \
    \       return result;\n    }\n\n    public static bool IsPrime(long n) {\n  \
    \      if (n < 2) {\n            return false;\n        }\n        if (n == 2)\
    \ {\n            return true;\n        }\n        if (n % 2 == 0) {\n        \
    \    return false;\n        }\n        long i = 3;\n        while (i * i <= n)\
    \ {\n            if (n % i == 0) {\n                return false;\n          \
    \  }\n            i += 2;\n        }\n        return true;", "        List<long>\
    \ result = new List<long>();\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\");\n        }\n        if (n == 0) {\n            return\
    \ result;\n        }\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (IsPrime(i)) {\n                result.Add(i);\n            }\n        }\n \
    \       return result;", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\");\n        }\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            return result;\n        }\n        if (n ==\
    \ 1) {\n            result.Add(2);\n            return result;\n        }\n  \
    \      for (long i = 2; i < n; i++) {\n            if (IsPrime(i)) {\n       \
    \         result.Add(i);\n            }\n        }\n        return result;", " \
    \       List<long> primes = new List<long>();\n        if (n < 2)\n          \
    \  return primes;\n        for (long i = 2; i <= n; i++) {\n            if (IsPrime(i))\n\
    \                primes.Add(i);\n        }\n        return primes;", "       \
    \ List<long> result = new List<long>();\n        if (n < 0) {\n            throw\
    \ new IllegalArgumentException(\"n must be non-negative\");\n        }\n     \
    \   if (n == 0) {\n            return result;\n        }\n        if (n == 1)\
    \ {\n            result.Add(2);\n            return result;\n        }\n     \
    \   if (n == 2) {\n            result.Add(2);\n            result.Add(3);\n  \
    \          return result;\n        }\n        if (n == 3) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            return result;\n\
    \        }\n        if (n == 4) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            return result;\n\
    \        }\n        if (n == 5) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 6) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 7) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 8) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 9) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add", "        List<long> result = new List<long>();\n        if\
    \ (n < 0) {\n            return result;\n        }\n        if (n == 0) {\n  \
    \          return result;\n        }\n        if (n == 1) {\n            return\
    \ result;\n        }\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (IsPrime(i)) {\n                result.Add(i);\n            }\n        }\n \
    \       return result;\n    }\n\n    public static bool IsPrime(long n) {\n  \
    \      if (n < 2) {\n            return false;\n        }\n        if (n == 2)\
    \ {\n            return true;\n        }\n        if (n % 2 == 0) {\n        \
    \    return false;\n        }\n        for (long i = 3; i <= Math.Sqrt(n); i +=\
    \ 2) {\n            if (n % i == 0) {\n                return false;\n       \
    \     }\n        }\n        return true;", "        List<long> result = new List<long>();\n\
    \        if (n < 0) {\n            throw new IllegalArgumentException(\"n must\
    \ be non-negative\");\n        }\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            return result;\n        }\n        if (n\
    \ == 3) {\n            result.Add(2);\n            result.Add(3);\n          \
    \  result.Add(5);\n            return result;\n        }\n        if (n == 4)\
    \ {\n            result.Add(2);\n            result.Add(3);\n            result.Add(5);\n\
    \            result.Add(7);\n            return result;\n        }\n        if\
    \ (n == 5) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 6) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 7) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 8) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 9) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add", "        List<long> result = new List<long>();\n        if\
    \ (n < 0)\n            return result;\n        if (n == 0)\n            return\
    \ result;\n        if (n == 1)\n            return result;\n        if (n == 2)\n\
    \            result.Add(2);\n        else {\n            for (long i = 3; i <=\
    \ n; i++) {\n                if (IsPrime(i))\n                    result.Add(i);\n\
    \            }\n        }\n        return result;\n    }\n\n    public static\
    \ bool IsPrime(long n) {\n        if (n < 2)\n            return false;\n    \
    \    if (n == 2)\n            return true;\n        if (n % 2 == 0)\n        \
    \    return false;\n        long i = 3;\n        while (i * i <= n) {\n      \
    \      if (n % i == 0)\n                return false;\n            i += 2;\n \
    \       }\n        return true;", "        List<long> result = new List<long>();\n\
    \        if (n < 0)\n            return result;\n        if (n == 0)\n       \
    \     return result;\n        if (n == 1)\n            return result;\n      \
    \  if (n == 2)\n            return result;\n        if (n == 3)\n            return\
    \ result;\n        if (n == 4)\n            return result;\n        if (n == 5)\n\
    \            return result;\n        if (n == 6)\n            return result;\n\
    \        if (n == 7)\n            return result;\n        if (n == 8)\n      \
    \      return result;\n        if (n == 9)\n            return result;\n     \
    \   if (n == 10)\n            return result;\n        if (n == 11)\n         \
    \   return result;\n        if (n == 12)\n            return result;\n       \
    \ if (n == 13)\n            return result;\n        if (n == 14)\n           \
    \ return result;\n        if (n == 15)\n            return result;\n        if\
    \ (n == 16)\n            return result;\n        if (n == 17)\n            return\
    \ result;\n        if (n == 18)\n            return result;\n        if (n ==\
    \ 19)\n            return result;\n        if (n == 20)\n            return result;\n\
    \        if (n == 21)\n            return result;\n        if (n == 22)\n    \
    \        return result;\n        if (n == 23)\n            return result;\n  \
    \      if (n == 24)\n            return result;\n        if (n == 25)\n      \
    \      return result;\n        if (n == 26)\n            return result;\n    \
    \    if (n == 27)\n            return result;\n        if (n == 28)\n        \
    \    return result;\n        if (n == 29)\n            return result;\n      \
    \  if (n == 30)\n            return result;\n        if (n == 31)\n          \
    \  return result;\n        if (n == 32)\n            return result;\n        if\
    \ (n == 33)\n            return result;\n        if (n == 34)\n            return\
    \ result;\n        if (n == 35)\n            return result;\n        if (n ==\
    \ 36)\n            return result;\n        if (n", "        if (n < 0) {\n   \
    \         throw new ArgumentOutOfRangeException(\"n\");\n        }\n        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            return result;\n        }\n        if (n\
    \ == 3) {\n            result.Add(2);\n            result.Add(3);\n          \
    \  result.Add(5);\n            return result;\n        }\n        if (n == 4)\
    \ {\n            result.Add(2);\n            result.Add(3);\n            result.Add(5);\n\
    \            result.Add(7);\n            return result;\n        }\n        if\
    \ (n == 5) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 6) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 7) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 8) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 9) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n", "        List<long> result = new List<long>();\n    \
    \    if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n\
    \        }\n        if (n == 0) {\n            return result;\n        }\n   \
    \     if (n == 1) {\n            result.Add(2);\n            return result;\n\
    \        }\n        for (long i = 2; i <= n; i++) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n < 0)\
    \ {\n            throw new IllegalArgumentException(\"n should be non-negative\"\
    );\n        }\n        if (n == 0) {\n            return result;\n        }\n\
    \        for (long i = 2; i <= n; i++) {\n            if (IsPrime(i)) {\n    \
    \            result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n < 0) {\n         \
    \   throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n\
    \        if (n == 0) {\n            return result;\n        }\n        if (n ==\
    \ 1) {\n            result.Add(2);\n            return result;\n        }\n  \
    \      for (long i = 2; i <= n; i++) {\n            if (IsPrime(i)) {\n      \
    \          result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n < 0) {\n         \
    \   throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n\
    \        if (n == 0) {\n            return result;\n        }\n        long i\
    \ = 2;\n        while (i <= n) {\n            if (IsPrime(i)) {\n            \
    \    result.Add(i);\n            }\n            i++;\n        }\n        return\
    \ result;\n    }\n\n    public static bool IsPrime(long n) {\n        if (n <\
    \ 2) {\n            return false;\n        }\n        if (n == 2) {\n        \
    \    return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n\
    \        }\n        long i = 3;\n        while (i <= Math.Sqrt(n)) {\n       \
    \     if (n % i == 0) {\n                return false;\n            }\n      \
    \      i += 2;\n        }\n        return true;", "        List<long> result =\
    \ new List<long>();\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\");\n        }\n        if (n == 0) {\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(2);\n    \
    \        return result;\n        }\n        for (long i = 2; i <= n; i++) {\n\
    \            if (IsPrime(i)) {\n                result.Add(i);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n <= 0) {\n            return result;\n        }\n        if (n ==\
    \ 1) {\n            result.Add(2);\n            return result;\n        }\n  \
    \      if (n == 2) {\n            result.Add(2);\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n == 3) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            return result;\n\
    \        }\n        if (n == 4) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            return result;\n\
    \        }\n        if (n == 5) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 6) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 7) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 8) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 9) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            result.Add(13);\n", "        List<long> result = new List<long>();\n\
    \        if (n <= 0)\n            return result;\n        if (n == 1)\n      \
    \      return result;\n        if (n == 2) {\n            result.Add(2);\n   \
    \         return result;\n        }\n        if (n == 3) {\n            result.Add(2);\n\
    \            result.Add(3);\n            return result;\n        }\n        if\
    \ (n == 4) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            return result;\n        }\n        if (n ==\
    \ 5) {\n            result.Add(2);\n            result.Add(3);\n            result.Add(5);\n\
    \            result.Add(7);\n            return result;\n        }\n        if\
    \ (n == 6) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 7) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 8) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 9) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 10) {\n            result.Add(2);\n            result.Add(3);\n      \
    \      result.Add(5);\n            result.Add(7);\n            result.Add(11);",
  "        List<long> result = new List<long>();\n        if (n < 0) {\n         \
    \   throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n ==\
    \ 0) {\n            return result;\n        }\n        if (n == 1) {\n       \
    \     result.Add(2);\n            return result;\n        }\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (IsPrime(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n < 0)\n            return result;\n      \
    \  if (n == 0)\n            return result;\n        if (n == 1)\n            return\
    \ result;\n        if (n == 2) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        if (n == 3) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            return result;\n        }\n        if (n\
    \ == 4) {\n            result.Add(2);\n            result.Add(3);\n          \
    \  result.Add(5);\n            return result;\n        }\n        if (n == 5)\
    \ {\n            result.Add(2);\n            result.Add(3);\n            result.Add(5);\n\
    \            result.Add(7);\n            return result;\n        }\n        if\
    \ (n == 6) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 7) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 8) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 9) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 10) {\n            result.Add(2);\n            result.Add(3);\n      \
    \      result.Add(5);\n            result", "        if (n < 0)\n            throw\
    \ new ArgumentOutOfRangeException(\"n\");\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            return result;\n        if (n == 1)\n      \
    \      return result;\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (IsPrime(i))\n                result.Add(i);\n        }\n        return result;\n\
    \    }\n\n    // Implement a function that takes a non-negative integer and returns\
    \ a list of the first n\n    // prime numbers.\n    // for example:\n    // >>>\
    \ PrimeNumbers((5L))\n    // (new List<long>(new long[]{(long)2L, (long)3L, (long)5L}))\n\
    \    // >>> PrimeNumbers((11L))\n    // (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)5L, (long)7L, (long)11L}))\n    // >>> PrimeNumbers((0L))\n    // (new\
    \ List<long>())\n    // >>> PrimeNumbers((20L))\n    // (new List<long>(new long[]{(long)2L,\
    \ (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)19L}))\n\
    \    // >>> PrimeNumbers((1L))\n    // (new List<long>())\n    // >>> PrimeNumbers((18L))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L,\
    \ (long)13L, (long)17L}))\n    public static List<long> PrimeNumbers(long n) {\n\
    \        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n\
    \        List<long> result = new List<long>();\n        if (n == 0)\n        \
    \    return result;\n        if (n == 1)\n            return result;\n       \
    \ for (long i = 2; i <= n; i++) {\n            if (IsPrime(i))\n             \
    \   ", "        List<long> primes = new List<long>();\n        if (n < 0)\n  \
    \          return primes;\n        if (n == 0)\n            return primes;\n \
    \       if (n == 1)\n            return primes;\n        if (n == 2)\n       \
    \     primes.Add(2);\n        if (n == 3)\n            primes.Add(3);\n      \
    \  if (n == 4)\n            primes.Add(2);\n        if (n == 5)\n            primes.Add(5);\n\
    \        if (n == 6)\n            primes.Add(2);\n        if (n == 7)\n      \
    \      primes.Add(7);\n        if (n == 8)\n            primes.Add(2);\n     \
    \   if (n == 9)\n            primes.Add(3);\n        if (n == 10)\n          \
    \  primes.Add(5);\n        if (n == 11)\n            primes.Add(11);\n       \
    \ if (n == 12)\n            primes.Add(2);\n        if (n == 13)\n           \
    \ primes.Add(13);\n        if (n == 14)\n            primes.Add(2);\n        if\
    \ (n == 15)\n            primes.Add(3);\n        if (n == 16)\n            primes.Add(5);\n\
    \        if (n == 17)\n            primes.Add(7);\n        if (n == 18)\n    \
    \        primes.Add(11);\n        if (n == 19)\n            primes.Add(13);\n\
    \        if (n == 20)\n            primes.Add(17);\n        if (n == 21)\n   \
    \         primes.Add(19);\n        if (n == 22)\n            primes.Add(2);\n\
    \        if (n == 23)\n            primes.Add(23);\n        if (n == 24)\n   \
    \         primes.Add(2);\n        if (n == 25)\n            primes.Add(5);\n \
    \       if (n == 26)\n            primes.Add(26);\n        if (n == 27)\n    \
    \        primes.Add(3);\n        if (n == 28)\n            primes.Add", "    \
    \    List<long> result = new List<long>();\n        if (n < 0) {\n           \
    \ throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n\
    \        if (n == 0) {\n            return result;\n        }\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (IsPrime(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n <= 0) {\n            return result;\n   \
    \     }\n        long i = 2;\n        while (i <= n) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n            i++;\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n < 0)\n            return result;\n        if (n == 0)\n       \
    \     return result;\n        if (n == 1)\n            return result;\n      \
    \  if (n == 2)\n            return result;\n        if (n == 3)\n            return\
    \ result;\n        if (n == 4)\n            return result;\n        if (n == 5)\n\
    \            return result;\n        if (n == 6)\n            return result;\n\
    \        if (n == 7)\n            return result;\n        if (n == 8)\n      \
    \      return result;\n        if (n == 9)\n            return result;\n     \
    \   if (n == 10)\n            return result;\n        if (n == 11)\n         \
    \   return result;\n        if (n == 12)\n            return result;\n       \
    \ if (n == 13)\n            return result;\n        if (n == 14)\n           \
    \ return result;\n        if (n == 15)\n            return result;\n        if\
    \ (n == 16)\n            return result;\n        if (n == 17)\n            return\
    \ result;\n        if (n == 18)\n            return result;\n        if (n ==\
    \ 19)\n            return result;\n        if (n == 20)\n            return result;\n\
    \        if (n == 21)\n            return result;\n        if (n == 22)\n    \
    \        return result;\n        if (n == 23)\n            return result;\n  \
    \      if (n == 24)\n            return result;\n        if (n == 25)\n      \
    \      return result;\n        if (n == 26)\n            return result;\n    \
    \    if (n == 27)\n            return result;\n        if (n == 28)\n        \
    \    return result;\n        if (n == 29)\n            return result;\n      \
    \  if (n == 30)\n            return result;\n        if (n == 31)\n          \
    \  return result;\n        if (n == 32)\n            return result;\n        if\
    \ (n == 33)\n            return result;\n        if (n == 34)\n            return\
    \ result;\n        if (n == 35)\n            return result;\n        if (n ==\
    \ 36)\n            return result;\n        if (n", "        List<long> result\
    \ = new List<long>();\n        if (n <= 0) {\n            return result;\n   \
    \     }\n        for (long i = 2; i <= n; i++) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> primes = new List<long>();\n        if (n < 0)\n\
    \            return primes;\n        if (n == 0)\n            return primes;\n\
    \        if (n == 1)\n            return primes;\n        if (n == 2)\n      \
    \      return primes;\n        primes.Add(2);\n        primes.Add(3);\n      \
    \  if (n == 3)\n            return primes;\n        for (long i = 4; i <= n; i++)\
    \ {\n            if (IsPrime(i)) {\n                primes.Add(i);\n         \
    \   }\n        }\n        return primes;", "        List<long> result = new List<long>();\n\
    \        if (n <= 0) {\n            return result;\n        }\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (IsPrime(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;\n    }\n\n    public static\
    \ bool IsPrime(long n) {\n        if (n <= 1) {\n            return false;\n \
    \       }\n        if (n == 2) {\n            return true;\n        }\n      \
    \  if (n % 2 == 0) {\n            return false;\n        }\n        long i = 3;\n\
    \        while (i * i <= n) {\n            if (n % i == 0) {\n               \
    \ return false;\n            }\n            i += 2;\n        }\n        return\
    \ true;", "        List<long> result = new List<long>();\n        if (n < 0) {\n\
    \            throw new IllegalArgumentException(\"n must be non-negative\");\n\
    \        }\n        if (n == 0) {\n            return result;\n        }\n   \
    \     if (n == 1) {\n            result.Add(2);\n            return result;\n\
    \        }\n        long i = 2;\n        while (i <= n) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n            i++;\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n < 0) {\n            throw new IllegalArgumentException(\"n should\
    \ be non-negative\");\n        }\n        if (n == 0) {\n            return result;\n\
    \        }\n        long i = 2;\n        while (i <= n) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n            i++;\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n <= 0) {\n            return result;\n        }\n        long i\
    \ = 2;\n        while (i <= n) {\n            if (IsPrime(i)) {\n            \
    \    result.Add(i);\n            }\n            i++;\n        }\n        return\
    \ result;\n    }\n\n    public static bool IsPrime(long n) {\n        if (n <=\
    \ 1) {\n            return false;\n        }\n        if (n == 2) {\n        \
    \    return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n\
    \        }\n        long i = 3;\n        while (i <= Math.Sqrt(n)) {\n       \
    \     if (n % i == 0) {\n                return false;\n            }\n      \
    \      i += 2;\n        }\n        return true;", "        List<long> result =\
    \ new List<long>();\n        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"\
    n\");\n        }\n        if (n == 0) {\n            return result;\n        }\n\
    \        if (n == 1) {\n            result.Add(2);\n            return result;\n\
    \        }\n        for (long i = 2; i <= n; i++) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;\n    }\n\n    public static boolean IsPrime(long n) {\n        if (n\
    \ < 2) {\n            return false;\n        }\n        if (n == 2) {\n      \
    \      return true;\n        }\n        if (n % 2 == 0) {\n            return\
    \ false;\n        }\n        long i = 3;\n        while (i * i <= n) {\n     \
    \       if (n % i == 0) {\n                return false;\n            }\n    \
    \        i += 2;\n        }\n        return true;", "        List<long> result\
    \ = new List<long>();\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\");\n        }\n        if (n == 0) {\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(2);\n    \
    \        return result;\n        }\n        long i = 2;\n        while (i <= n)\
    \ {\n            if (IsPrime(i)) {\n                result.Add(i);\n         \
    \   }\n            i++;\n        }\n        return result;", "        List<long>\
    \ primes = new List<long>();\n        if (n < 0)\n            throw new IllegalArgumentException(\"\
    n must be non-negative\");\n        if (n == 0)\n            return primes;\n\
    \        if (n == 1)\n            return primes;\n        if (n == 2) {\n    \
    \        primes.Add(2);\n            return primes;\n        }\n        if (n\
    \ == 3) {\n            primes.Add(2);\n            primes.Add(3);\n          \
    \  return primes;\n        }\n        if (n == 4) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            return primes;\n\
    \        }\n        if (n == 5) {\n            primes.Add(2);\n            primes.Add(3);\n\
    \            primes.Add(5);\n            primes.Add(7);\n            return primes;\n\
    \        }\n        if (n == 6) {\n            primes.Add(2);\n            primes.Add(3);\n\
    \            primes.Add(5);\n            primes.Add(7);\n            primes.Add(11);\n\
    \            return primes;\n        }\n        if (n == 7) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            return\
    \ primes;\n        }\n        if (n == 8) {\n            primes.Add(2);\n    \
    \        primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            primes.Add(17);\n\
    \            return primes;\n        }\n        if (n == 9) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            primes.",
  "        List<long> result = new List<long>();\n        if (n < 0) {\n         \
    \   throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n\
    \        if (n == 0) {\n            return result;\n        }\n        if (n ==\
    \ 1) {\n            result.Add(2);\n            return result;\n        }\n  \
    \      for (long i = 2; i <= n; i++) {\n            if (IsPrime(i)) {\n      \
    \          result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n < 0) {\n         \
    \   return result;\n        }\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            return result;\n        }\n   \
    \     if (n == 2) {\n            result.Add(2);\n            return result;\n\
    \        }\n        if (n == 3) {\n            result.Add(2);\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n == 4) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            return result;\n\
    \        }\n        if (n == 5) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            return result;\n\
    \        }\n        if (n == 6) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 7) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 8) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 9) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 10) {\n            result.Add(2);\n            result.Add(3", "      \
    \  if (n < 0)\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    );\n        if (n == 0)\n            return new List<long>();\n        List<long>\
    \ result = new List<long>();\n        for (long i = 2; i <= n; i++) {\n      \
    \      if (IsPrime(i))\n                result.Add(i);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n < 0)\n\
    \            return result;\n        if (n == 0)\n            return result;\n\
    \        if (n == 1)\n            return result;\n        if (n == 2)\n      \
    \      result.Add(2);\n        if (n == 3)\n            result.Add(2);\n     \
    \   if (n == 4)\n            result.Add(2);\n        if (n == 5)\n           \
    \ result.Add(2);\n        if (n == 6)\n            result.Add(2);\n        if\
    \ (n == 7)\n            result.Add(2);\n        if (n == 8)\n            result.Add(2);\n\
    \        if (n == 9)\n            result.Add(2);\n        if (n == 10)\n     \
    \       result.Add(2);\n        if (n == 11)\n            result.Add(2);\n   \
    \     if (n == 12)\n            result.Add(2);\n        if (n == 13)\n       \
    \     result.Add(2);\n        if (n == 14)\n            result.Add(2);\n     \
    \   if (n == 15)\n            result.Add(2);\n        if (n == 16)\n         \
    \   result.Add(2);\n        if (n == 17)\n            result.Add(2);\n       \
    \ if (n == 18)\n            result.Add(2);\n        if (n == 19)\n           \
    \ result.Add(2);\n        if (n == 20)\n            result.Add(2);\n        if\
    \ (n == 21)\n            result.Add(2);\n        if (n == 22)\n            result.Add(2);\n\
    \        if (n == 23)\n            result.Add(2);\n        if (n == 24)\n    \
    \        result.Add(2);\n        if (n == 25)\n            result.Add(2);\n  \
    \      if (n == 26)\n            result.Add(2);\n        if (n == 27)\n      \
    \      result.Add(2);\n        if (n == 28)\n            result.Add(2);\n    \
    \    if (n == 29)\n            result.Add(2);\n        if (n == 30)\n        \
    \    result.", "        List<long> result = new List<long>();\n        if (n <\
    \ 0)\n            return result;\n        if (n == 0)\n            return result;\n\
    \        if (n == 1)\n            return result;\n        if (n == 2)\n      \
    \      result.Add(2);\n        if (n == 3)\n            result.Add(3);\n     \
    \   for (long i = 4; i <= n; i++) {\n            if (IsPrime(i))\n           \
    \     result.Add(i);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n <= 0) {\n            return result;\n\
    \        }\n        long i = 2;\n        while (i <= n) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n            i++;\n       \
    \ }\n        return result;\n    }\n\n    public static bool IsPrime(long n) {\n\
    \        if (n <= 1) {\n            return false;\n        }\n        if (n ==\
    \ 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n     \
    \       return false;\n        }\n        long i = 3;\n        while (i <= Math.Sqrt(n))\
    \ {\n            if (n % i == 0) {\n                return false;\n          \
    \  }\n            i += 2;\n        }\n        return true;", "        List<long>\
    \ result = new List<long>();\n        if (n <= 0) {\n            return result;\n\
    \        }\n        for (long i = 2; i <= n; i++) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n <= 0)\
    \ {\n            return result;\n        }\n        if (n == 1) {\n          \
    \  return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            return result;\n        }\n        if (n == 3) {\n            result.Add(2);\n\
    \            result.Add(3);\n            return result;\n        }\n        if\
    \ (n == 4) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            return result;\n        }\n        if (n ==\
    \ 5) {\n            result.Add(2);\n            result.Add(3);\n            result.Add(5);\n\
    \            result.Add(7);\n            return result;\n        }\n        if\
    \ (n == 6) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 7) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 8) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 9) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 10) {\n            result.Add(2);\n            result.Add(3);\n      \
    \      result.Add(5);\n            result.Add(7);", "        List<long> primes\
    \ = new List<long>();\n        if (n <= 0) {\n            return primes;\n   \
    \     }\n        long i = 2;\n        while (i <= n) {\n            if (IsPrime(i))\
    \ {\n                primes.Add(i);\n            }\n            i++;\n       \
    \ }\n        return primes;", "        List<long> result = new List<long>();\n\
    \        if (n < 0) {\n            throw new IllegalArgumentException(\"n must\
    \ be non-negative\");\n        }\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        long start = 2;\n        long end = (long)Math.Sqrt(n);\n\
    \        while (start <= end) {\n            long mid = start + (end - start)\
    \ / 2;\n            if (mid > n) {\n                end = mid - 1;\n         \
    \   }\n            else if (mid < n) {\n                start = mid + 1;\n   \
    \         }\n            else {\n                result.Add(mid);\n          \
    \      start = mid + 1;\n                end = mid - 1;\n            }\n     \
    \   }\n        return result;", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\");\n        }\n        List<long> primes = new List<long>();\n\
    \        if (n == 0) {\n            return primes;\n        }\n        if (n ==\
    \ 1) {\n            primes.Add(2);\n            return primes;\n        }\n  \
    \      if (n == 2) {\n            primes.Add(2);\n            primes.Add(3);\n\
    \            return primes;\n        }\n        if (n == 3) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            return primes;\n\
    \        }\n        if (n == 4) {\n            primes.Add(2);\n            primes.Add(3);\n\
    \            primes.Add(5);\n            primes.Add(7);\n            return primes;\n\
    \        }\n        if (n == 5) {\n            primes.Add(2);\n            primes.Add(3);\n\
    \            primes.Add(5);\n            primes.Add(7);\n            primes.Add(11);\n\
    \            return primes;\n        }\n        if (n == 6) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            return\
    \ primes;\n        }\n        if (n == 7) {\n            primes.Add(2);\n    \
    \        primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            primes.Add(17);\n\
    \            return primes;\n        }\n        if (n == 8) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            primes.Add(17);\n\
    \            ", "        List<long> result = new List<long>();\n        if (n\
    \ <= 0)\n            return result;\n        if (n == 1)\n            return result;\n\
    \        if (n == 2) {\n            result.Add(2);\n            return result;\n\
    \        }\n        for (long i = 2; i < n; i++) {\n            if (n % i == 0)\n\
    \                continue;\n            result.Add(i);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n <= 0)\
    \ {\n            return result;\n        }\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (IsPrime(i)) {\n                result.Add(i);\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n <= 0) {\n            return result;\n        }\n        long i\
    \ = 2;\n        while (i <= n) {\n            if (IsPrime(i)) {\n            \
    \    result.Add(i);\n            }\n            i++;\n        }\n        return\
    \ result;\n    }\n\n    // Returns true if the given number is prime.\n    public\
    \ static bool IsPrime(long n) {\n        if (n <= 1) {\n            return false;\n\
    \        }\n        if (n == 2) {\n            return true;\n        }\n     \
    \   if (n % 2 == 0) {\n            return false;\n        }\n        long i =\
    \ 3;\n        while (i <= Math.Sqrt(n)) {\n            if (n % i == 0) {\n   \
    \             return false;\n            }\n            i += 2;\n        }\n \
    \       return true;", "        List<long> result = new List<long>();\n      \
    \  if (n < 0) {\n            return result;\n        }\n        if (n == 0) {\n\
    \            return result;\n        }\n        if (n == 1) {\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(2);\n    \
    \        return result;\n        }\n        if (n == 3) {\n            result.Add(2);\n\
    \            result.Add(3);\n            return result;\n        }\n        if\
    \ (n == 4) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            return result;\n        }\n        if (n ==\
    \ 5) {\n            result.Add(2);\n            result.Add(3);\n            result.Add(5);\n\
    \            result.Add(7);\n            return result;\n        }\n        if\
    \ (n == 6) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 7) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 8) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 9) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 10) {\n            result.Add(2);\n            result.Add(3", "      \
    \  List<long> result = new List<long>();\n        if (n <= 0) {\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(2);\n    \
    \        return result;\n        }\n        long start = 2;\n        long end\
    \ = (long) Math.sqrt(n);\n        while (start <= end) {\n            if (n %\
    \ start == 0) {\n                result.Add(start);\n                n = n / start;\n\
    \                if (n == 1) {\n                    break;\n                }\n\
    \            }\n            start++;\n        }\n        if (n > 1) {\n      \
    \      result.Add(n);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"\
    n\");\n        }\n        if (n == 0) {\n            return result;\n        }\n\
    \        if (n == 1) {\n            result.Add(2);\n            return result;\n\
    \        }\n        if (n == 2) {\n            result.Add(2);\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n == 3) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            return result;\n\
    \        }\n        if (n == 4) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            return result;\n\
    \        }\n        if (n == 5) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 6) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 7) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 8) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 9) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n", "        List<long> result = new List<long>();\n    \
    \    if (n < 0)\n            return result;\n        if (n == 0)\n           \
    \ return result;\n        if (n == 1)\n            return result;\n        if\
    \ (n == 2) {\n            result.Add(2);\n            return result;\n       \
    \ }\n        if (n == 3) {\n            result.Add(2);\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n == 4) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            return result;\n\
    \        }\n        if (n == 5) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            return result;\n\
    \        }\n        if (n == 6) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 7) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 8) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 9) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 10) {\n            result.Add(2);\n            result.Add(3);\n      \
    \      result.Add(5);\n            result", "        List<long> result = new List<long>();\n\
    \        if (n <= 0) {\n            return result;\n        }\n        long i\
    \ = 2;\n        while (i <= n) {\n            if (IsPrime(i)) {\n            \
    \    result.Add(i);\n            }\n            i++;\n        }\n        return\
    \ result;\n    }\n\n    public static bool IsPrime(long n) {\n        if (n <=\
    \ 1) {\n            return false;\n        }\n        if (n == 2) {\n        \
    \    return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n\
    \        }\n        long i = 3;\n        while (i <= Math.Sqrt(n)) {\n       \
    \     if (n % i == 0) {\n                return false;\n            }\n      \
    \      i += 2;\n        }\n        return true;", "        List<long> result =\
    \ new List<long>();\n        if (n < 0)\n            return result;\n        if\
    \ (n == 0)\n            return result;\n        if (n == 1)\n            return\
    \ result;\n        if (n == 2)\n            result.Add(2);\n        if (n == 3)\n\
    \            result.Add(2);\n        if (n == 4)\n            result.Add(2);\n\
    \        if (n == 5)\n            result.Add(2);\n        if (n == 6)\n      \
    \      result.Add(2);\n        if (n == 7)\n            result.Add(2);\n     \
    \   if (n == 8)\n            result.Add(2);\n        if (n == 9)\n           \
    \ result.Add(2);\n        if (n == 10)\n            result.Add(2);\n        if\
    \ (n == 11)\n            result.Add(2);\n        if (n == 12)\n            result.Add(2);\n\
    \        if (n == 13)\n            result.Add(2);\n        if (n == 14)\n    \
    \        result.Add(2);\n        if (n == 15)\n            result.Add(2);\n  \
    \      if (n == 16)\n            result.Add(2);\n        if (n == 17)\n      \
    \      result.Add(2);\n        if (n == 18)\n            result.Add(2);\n    \
    \    if (n == 19)\n            result.Add(2);\n        if (n == 20)\n        \
    \    result.Add(2);\n        if (n == 21)\n            result.Add(2);\n      \
    \  if (n == 22)\n            result.Add(2);\n        if (n == 23)\n          \
    \  result.Add(2);\n        if (n == 24)\n            result.Add(2);\n        if\
    \ (n == 25)\n            result.Add(2);\n        if (n == 26)\n            result.Add(2);\n\
    \        if (n == 27)\n            result.Add(2);\n        if (n == 28)\n    \
    \        result.Add(2);\n        if (n == 29)\n            result.Add(2);\n  \
    \      if (n == 30)\n            result.", "        List<long> result = new List<long>();\n\
    \        if (n < 0)\n            return result;\n        if (n == 0)\n       \
    \     return result;\n        if (n == 1)\n            return result;\n      \
    \  if (n == 2) {\n            result.Add(2);\n            return result;\n   \
    \     }\n        if (n == 3) {\n            result.Add(2);\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n == 4) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            return result;\n\
    \        }\n        if (n == 5) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            return result;\n\
    \        }\n        if (n == 6) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 7) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 8) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 9) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 10) {\n            result.Add(2);\n            result.Add(3);\n      \
    \      result.Add(5);\n            result", "        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            return result;\n        if (n == 1)\n      \
    \      return result;\n        if (n < 2)\n            return result;\n      \
    \  if (n < 3)\n            result.Add(2);\n        if (n < 5)\n            result.Add(3);\n\
    \        if (n < 7)\n            result.Add(5);\n        if (n < 11)\n       \
    \     result.Add(7);\n        if (n < 13)\n            result.Add(11);\n     \
    \   if (n < 17)\n            result.Add(13);\n        if (n < 19)\n          \
    \  result.Add(17);\n        if (n < 23)\n            result.Add(19);\n       \
    \ if (n < 29)\n            result.Add(23);\n        if (n < 31)\n            result.Add(29);\n\
    \        if (n < 37)\n            result.Add(31);\n        if (n < 41)\n     \
    \       result.Add(37);\n        if (n < 43)\n            result.Add(41);\n  \
    \      if (n < 47)\n            result.Add(43);\n        if (n < 53)\n       \
    \     result.Add(47);\n        if (n < 59)\n            result.Add(53);\n    \
    \    if (n < 61)\n            result.Add(59);\n        if (n < 67)\n         \
    \   result.Add(61);\n        if (n < 71)\n            result.Add(67);\n      \
    \  if (n < 73)\n            result.Add(71);\n        if (n < 79)\n           \
    \ result.Add(73);\n        if (n < 83)\n            result.Add(79);\n        if\
    \ (n < 89)\n            result.Add(83);\n        if (n < 97)\n            result.Add(89);\n\
    \        if (n < 101)\n            result.Add(97);\n        if (n < 103)\n   \
    \         result.Add(101);\n        if (n < 107)\n            result.Add(103);\n\
    \        if (n < 109)\n            result.Add(107);\n        if (n < 113)\n  \
    \          result.", "        List<long> result = new List<long>();\n        if\
    \ (n <= 0) {\n            return result;\n        }\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (IsPrime(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;\n    }\n\n    public static\
    \ bool IsPrime(long n) {\n        if (n <= 1) {\n            return false;\n \
    \       }\n        if (n == 2) {\n            return true;\n        }\n      \
    \  if (n % 2 == 0) {\n            return false;\n        }\n        for (long\
    \ i = 3; i <= Math.Sqrt(n); i += 2) {\n            if (n % i == 0) {\n       \
    \         return false;\n            }\n        }\n        return true;", "  \
    \      List<long> result = new List<long>();\n        if (n <= 0) {\n        \
    \    return result;\n        }\n        long i = 2;\n        while (i <= n) {\n\
    \            if (IsPrime(i)) {\n                result.Add(i);\n            }\n\
    \            i++;\n        }\n        return result;\n    }\n\n    public static\
    \ bool IsPrime(long n) {\n        if (n <= 1) {\n            return false;\n \
    \       }\n        if (n == 2) {\n            return true;\n        }\n      \
    \  if (n % 2 == 0) {\n            return false;\n        }\n        long i = 3;\n\
    \        while (i <= Math.Sqrt(n)) {\n            if (n % i == 0) {\n        \
    \        return false;\n            }\n            i += 2;\n        }\n      \
    \  return true;", "        List<long> result = new List<long>();\n        if (n\
    \ < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    );\n        }\n        if (n == 0) {\n            return result;\n        }\n\
    \        if (n == 1) {\n            result.Add(2);\n            return result;\n\
    \        }\n        for (long i = 2; i <= n; i++) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;\n    }\n\n    public static boolean IsPrime(long n) {\n        if (n\
    \ < 2) {\n            return false;\n        }\n        if (n == 2) {\n      \
    \      return true;\n        }\n        if (n % 2 == 0) {\n            return\
    \ false;\n        }\n        long i = 3;\n        while (i * i <= n) {\n     \
    \       if (n % i == 0) {\n                return false;\n            }\n    \
    \        i += 2;\n        }\n        return true;", "        List<long> primes\
    \ = new List<long>();\n        if (n <= 0) {\n            return primes;\n   \
    \     }\n        if (n == 1) {\n            return primes;\n        }\n      \
    \  if (n == 2) {\n            primes.Add(2);\n            return primes;\n   \
    \     }\n        if (n == 3) {\n            primes.Add(2);\n            primes.Add(3);\n\
    \            return primes;\n        }\n        if (n == 4) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            return primes;\n\
    \        }\n        if (n == 5) {\n            primes.Add(2);\n            primes.Add(3);\n\
    \            primes.Add(5);\n            primes.Add(7);\n            return primes;\n\
    \        }\n        if (n == 6) {\n            primes.Add(2);\n            primes.Add(3);\n\
    \            primes.Add(5);\n            primes.Add(7);\n            primes.Add(11);\n\
    \            return primes;\n        }\n        if (n == 7) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            return\
    \ primes;\n        }\n        if (n == 8) {\n            primes.Add(2);\n    \
    \        primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            primes.Add(17);\n\
    \            return primes;\n        }\n        if (n == 9) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            primes.Add(17);\n\
    \            primes.Add(19);\n            return", "        List<long> result\
    \ = new List<long>();\n        if (n < 0)\n            return result;\n      \
    \  if (n == 0)\n            return result;\n        if (n == 1)\n            return\
    \ result;\n        if (n == 2) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        if (n == 3) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            return result;\n        }\n        if (n\
    \ == 4) {\n            result.Add(2);\n            result.Add(3);\n          \
    \  result.Add(5);\n            return result;\n        }\n        if (n == 5)\
    \ {\n            result.Add(2);\n            result.Add(3);\n            result.Add(5);\n\
    \            result.Add(7);\n            return result;\n        }\n        if\
    \ (n == 6) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 7) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 8) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 9) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 10) {\n            result.Add(2);\n            result.Add(3);\n      \
    \      result.Add(5);\n            result", "        List<long> result = new List<long>();\n\
    \        if (n < 0)\n            return result;\n        if (n == 0)\n       \
    \     return result;\n        if (n == 1)\n            return result;\n      \
    \  if (n == 2)\n            result.Add(2);\n        if (n == 3)\n            result.Add(2);\n\
    \        if (n == 4)\n            result.Add(2);\n        if (n == 5)\n      \
    \      result.Add(2);\n        if (n == 6)\n            result.Add(2);\n     \
    \   if (n == 7)\n            result.Add(2);\n        if (n == 8)\n           \
    \ result.Add(2);\n        if (n == 9)\n            result.Add(2);\n        if\
    \ (n == 10)\n            result.Add(2);\n        if (n == 11)\n            result.Add(2);\n\
    \        if (n == 12)\n            result.Add(2);\n        if (n == 13)\n    \
    \        result.Add(2);\n        if (n == 14)\n            result.Add(2);\n  \
    \      if (n == 15)\n            result.Add(2);\n        if (n == 16)\n      \
    \      result.Add(2);\n        if (n == 17)\n            result.Add(2);\n    \
    \    if (n == 18)\n            result.Add(2);\n        if (n == 19)\n        \
    \    result.Add(2);\n        if (n == 20)\n            result.Add(2);\n      \
    \  if (n == 21)\n            result.Add(2);\n        if (n == 22)\n          \
    \  result.Add(2);\n        if (n == 23)\n            result.Add(2);\n        if\
    \ (n == 24)\n            result.Add(2);\n        if (n == 25)\n            result.Add(2);\n\
    \        if (n == 26)\n            result.Add(2);\n        if (n == 27)\n    \
    \        result.Add(2);\n        if (n == 28)\n            result.Add(2);\n  \
    \      if (n == 29)\n            result.Add(2);\n        if (n == 30)\n      \
    \      result.", "        List<long> result = new List<long>();\n        if (n\
    \ < 0)\n            return result;\n        if (n == 0)\n            return result;\n\
    \        if (n == 1)\n            return result;\n        if (n == 2)\n      \
    \      result.Add(2);\n        else {\n            for (long i = 3; i <= n; i++)\
    \ {\n                if (IsPrime(i))\n                    result.Add(i);\n   \
    \         }\n        }\n        return result;\n    }\n\n    public static bool\
    \ IsPrime(long n) {\n        if (n < 2)\n            return false;\n        if\
    \ (n == 2)\n            return true;\n        if (n % 2 == 0)\n            return\
    \ false;\n        long i = 3;\n        while (i * i <= n) {\n            if (n\
    \ % i == 0)\n                return false;\n            i += 2;\n        }\n \
    \       return true;", "        List<long> result = new List<long>();\n      \
    \  if (n < 0)\n            return result;\n        if (n == 0)\n            return\
    \ result;\n        if (n == 1)\n            return result;\n        if (n == 2)\n\
    \            return result;\n        if (n == 3)\n            return result;\n\
    \        if (n == 4)\n            return result;\n        if (n == 5)\n      \
    \      return result;\n        if (n == 6)\n            return result;\n     \
    \   if (n == 7)\n            return result;\n        if (n == 8)\n           \
    \ return result;\n        if (n == 9)\n            return result;\n        if\
    \ (n == 10)\n            return result;\n        if (n == 11)\n            return\
    \ result;\n        if (n == 12)\n            return result;\n        if (n ==\
    \ 13)\n            return result;\n        if (n == 14)\n            return result;\n\
    \        if (n == 15)\n            return result;\n        if (n == 16)\n    \
    \        return result;\n        if (n == 17)\n            return result;\n  \
    \      if (n == 18)\n            return result;\n        if (n == 19)\n      \
    \      return result;\n        if (n == 20)\n            return result;\n    \
    \    if (n == 21)\n            return result;\n        if (n == 22)\n        \
    \    return result;\n        if (n == 23)\n            return result;\n      \
    \  if (n == 24)\n            return result;\n        if (n == 25)\n          \
    \  return result;\n        if (n == 26)\n            return result;\n        if\
    \ (n == 27)\n            return result;\n        if (n == 28)\n            return\
    \ result;\n        if (n == 29)\n            return result;\n        if (n ==\
    \ 30)\n            return result;\n        if (n == 31)\n            return result;\n\
    \        if (n == 32)\n            return result;\n        if (n == 33)\n    \
    \        return result;\n        if (n == 34)\n            return result;\n  \
    \      if (n == 35)\n            return result;\n        if (n == 36)\n      \
    \      return result;\n        if (n", "        List<long> result = new List<long>();\n\
    \        if (n < 0)\n            return result;\n        if (n == 0)\n       \
    \     return result;\n        if (n == 1)\n            return result;\n      \
    \  if (n == 2)\n            return result;\n        if (n == 3)\n            return\
    \ result;\n        if (n == 4)\n            return result;\n        if (n == 5)\n\
    \            return result;\n        if (n == 6)\n            return result;\n\
    \        if (n == 7)\n            return result;\n        if (n == 8)\n      \
    \      return result;\n        if (n == 9)\n            return result;\n     \
    \   if (n == 10)\n            return result;\n        if (n == 11)\n         \
    \   return result;\n        if (n == 12)\n            return result;\n       \
    \ if (n == 13)\n            return result;\n        if (n == 14)\n           \
    \ return result;\n        if (n == 15)\n            return result;\n        if\
    \ (n == 16)\n            return result;\n        if (n == 17)\n            return\
    \ result;\n        if (n == 18)\n            return result;\n        if (n ==\
    \ 19)\n            return result;\n        if (n == 20)\n            return result;\n\
    \        if (n == 21)\n            return result;\n        if (n == 22)\n    \
    \        return result;\n        if (n == 23)\n            return result;\n  \
    \      if (n == 24)\n            return result;\n        if (n == 25)\n      \
    \      return result;\n        if (n == 26)\n            return result;\n    \
    \    if (n == 27)\n            return result;\n        if (n == 28)\n        \
    \    return result;\n        if (n == 29)\n            return result;\n      \
    \  if (n == 30)\n            return result;\n        if (n == 31)\n          \
    \  return result;\n        if (n == 32)\n            return result;\n        if\
    \ (n == 33)\n            return result;\n        if (n == 34)\n            return\
    \ result;\n        if (n == 35)\n            return result;\n        if (n ==\
    \ 36)\n            return result;\n        if (n", "        List<long> result\
    \ = new List<long>();\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\");\n        }\n        if (n == 0) {\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(2);\n    \
    \        return result;\n        }\n        for (long i = 2; i <= n; i++) {\n\
    \            if (IsPrime(i)) {\n                result.Add(i);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n < 0) {\n            throw new IllegalArgumentException(\"n must\
    \ be non-negative\");\n        }\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        long i = 2;\n        while (i <= n) {\n        \
    \    if (IsPrime(i)) {\n                result.Add(i);\n            }\n      \
    \      i++;\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"\
    n\");\n        }\n        if (n == 0) {\n            return result;\n        }\n\
    \        if (n == 1) {\n            result.Add(2);\n            return result;\n\
    \        }\n        if (n == 2) {\n            result.Add(2);\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n == 3) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            return result;\n\
    \        }\n        if (n == 4) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            return result;\n\
    \        }\n        if (n == 5) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 6) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 7) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 8) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 9) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n", "        List<long> result = new List<long>();\n    \
    \    if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\");\n        }\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        long i = 2;\n        while (i <= n) {\n        \
    \    if (IsPrime(i)) {\n                result.Add(i);\n                i++;\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        if\
    \ (n <= 0) {\n            return result;\n        }\n        long i = 2;\n   \
    \     while (i <= n) {\n            if (IsPrime(i)) {\n                result.Add(i);\n\
    \            }\n            i++;\n        }\n        return result;", "      \
    \  List<long> result = new List<long>();\n        if (n <= 0) {\n            return\
    \ result;\n        }\n        long start = 2;\n        while (start <= n) {\n\
    \            if (IsPrime(start)) {\n                result.Add(start);\n     \
    \       }\n            start++;\n        }\n        return result;\n    }\n\n\
    \    public static boolean IsPrime(long n) {\n        if (n <= 1) {\n        \
    \    return false;\n        }\n        if (n == 2) {\n            return true;\n\
    \        }\n        if (n % 2 == 0) {\n            return false;\n        }\n\
    \        long i = 3;\n        while (i <= Math.Sqrt(n)) {\n            if (n %\
    \ i == 0) {\n                return false;\n            }\n            i += 2;\n\
    \        }\n        return true;", "        if (n < 0)\n            throw new\
    \ ArgumentOutOfRangeException(\"n\");\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            return result;\n        if (n == 1)\n      \
    \      return result;\n        long start = 2;\n        while (start <= n) {\n\
    \            if (IsPrime(start))\n                result.Add(start);\n       \
    \     start++;\n        }\n        return result;\n    }\n\n    public static\
    \ bool IsPrime(long n) {\n        if (n < 2)\n            return false;\n    \
    \    if (n == 2)\n            return true;\n        if (n % 2 == 0)\n        \
    \    return false;\n        long i = 3;\n        while (i <= Math.Sqrt(n)) {\n\
    \            if (n % i == 0)\n                return false;\n            i +=\
    \ 2;\n        }\n        return true;", "        List<long> result = new List<long>();\n\
    \        if (n <= 0) {\n            return result;\n        }\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (IsPrime(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;\n    }\n\n    public static\
    \ boolean IsPrime(long n) {\n        if (n <= 1) {\n            return false;\n\
    \        }\n        if (n == 2) {\n            return true;\n        }\n     \
    \   if (n % 2 == 0) {\n            return false;\n        }\n        long i =\
    \ 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n          \
    \      return false;\n            }\n            i += 2;\n        }\n        return\
    \ true;", "        List<long> result = new List<long>();\n        if (n < 0)\n\
    \            return result;\n        if (n == 0)\n            return result;\n\
    \        if (n == 1)\n            return result;\n        long i = 2;\n      \
    \  while (i < n) {\n            if (IsPrime(i))\n                result.Add(i);\n\
    \            i++;\n        }\n        return result;\n    }\n\n    public static\
    \ bool IsPrime(long n) {\n        if (n < 2)\n            return false;\n    \
    \    if (n == 2)\n            return true;\n        if (n % 2 == 0)\n        \
    \    return false;\n        long i = 3;\n        while (i * i <= n) {\n      \
    \      if (n % i == 0)\n                return false;\n            i += 2;\n \
    \       }\n        return true;", "        List<long> result = new List<long>();\n\
    \        if (n < 0) {\n            throw new IllegalArgumentException(\"n must\
    \ be non-negative\");\n        }\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        long i = 2;\n        while (i <= n) {\n        \
    \    if (IsPrime(i)) {\n                result.Add(i);\n            }\n      \
    \      i++;\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (n <= 0) {\n            return result;\n     \
    \   }\n        for (long i = 2; i <= n; i++) {\n            if (IsPrime(i)) {\n\
    \                result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n <= 0) {\n        \
    \    return result;\n        }\n        long start = 2;\n        while (start\
    \ <= n) {\n            if (IsPrime(start)) {\n                result.Add(start);\n\
    \            }\n            start++;\n        }\n        return result;\n    }\n\
    \n    public static bool IsPrime(long n) {\n        if (n <= 1) {\n          \
    \  return false;\n        }\n        if (n == 2) {\n            return true;\n\
    \        }\n        if (n % 2 == 0) {\n            return false;\n        }\n\
    \        long i = 3;\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ {\n                return false;\n            }\n            i += 2;\n     \
    \   }\n        return true;", "        List<long> result = new List<long>();\n\
    \        if (n < 0) {\n            throw new IllegalArgumentException(\"n must\
    \ be non-negative\");\n        }\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (IsPrime(i)) {\n                result.Add(i);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    if (n == 0)\n            return result;\n        if (n == 1)\n          \
    \  return result;\n        if (n < 2)\n            return result;\n        for\
    \ (long i = 2; i <= n; i++) {\n            if (IsPrime(i))\n                result.Add(i);\n\
    \        }\n        return result;\n    }\n\n    public static boolean IsPrime(long\
    \ n) {\n        if (n < 2)\n            return false;\n        if (n == 2)\n \
    \           return true;\n        if (n % 2 == 0)\n            return false;\n\
    \        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i == 0)\n\
    \                return false;\n        }\n        return true;", "        List<long>\
    \ result = new List<long>();\n        if (n <= 0) {\n            return result;\n\
    \        }\n        for (long i = 2; i <= n; i++) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;\n    }\n\n    public static bool IsPrime(long n) {\n        if (n <=\
    \ 1) {\n            return false;\n        }\n        if (n == 2) {\n        \
    \    return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n\
    \        }\n        for (long i = 3; i <= Math.Sqrt(n); i += 2) {\n          \
    \  if (n % i == 0) {\n                return false;\n            }\n        }\n\
    \        return true;", "        List<long> primes = new List<long>();\n     \
    \   if (n < 0) {\n            return primes;\n        }\n        if (n == 0) {\n\
    \            return primes;\n        }\n        if (n == 1) {\n            return\
    \ primes;\n        }\n        if (n == 2) {\n            primes.Add(2);\n    \
    \        return primes;\n        }\n        if (n == 3) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            return primes;\n        }\n        if\
    \ (n == 4) {\n            primes.Add(2);\n            primes.Add(3);\n       \
    \     primes.Add(5);\n            return primes;\n        }\n        if (n ==\
    \ 5) {\n            primes.Add(2);\n            primes.Add(3);\n            primes.Add(5);\n\
    \            primes.Add(7);\n            return primes;\n        }\n        if\
    \ (n == 6) {\n            primes.Add(2);\n            primes.Add(3);\n       \
    \     primes.Add(5);\n            primes.Add(7);\n            primes.Add(11);\n\
    \            return primes;\n        }\n        if (n == 7) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            return\
    \ primes;\n        }\n        if (n == 8) {\n            primes.Add(2);\n    \
    \        primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            primes.Add(17);\n\
    \            return primes;\n        }\n        if (n == 9) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            pr", " \
    \       List<long> result = new List<long>();\n        if (n < 0) {\n        \
    \    throw new ArgumentOutOfRangeException(\"n\");\n        }\n        if (n ==\
    \ 0) {\n            return result;\n        }\n        if (n == 1) {\n       \
    \     result.Add(2);\n            return result;\n        }\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (IsPrime(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;\n    }\n\n    public static\
    \ bool IsPrime(long n) {\n        if (n < 2) {\n            return false;\n  \
    \      }\n        if (n == 2) {\n            return true;\n        }\n       \
    \ if (n % 2 == 0) {\n            return false;\n        }\n        long i = 3;\n\
    \        while (i * i <= n) {\n            if (n % i == 0) {\n               \
    \ return false;\n            }\n            i += 2;\n        }\n        return\
    \ true;", "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"\
    n\");\n        List<long> result = new List<long>();\n        if (n == 0)\n  \
    \          return result;\n        if (n == 1)\n            return result;\n \
    \       if (n == 2) {\n            result.Add(2);\n            return result;\n\
    \        }\n        long i = 2;\n        while (i < n) {\n            if (n %\
    \ i == 0)\n                break;\n            i++;\n        }\n        if (i\
    \ == n)\n            result.Add(n);\n        while (i < n) {\n            if (n\
    \ % i == 0)\n                break;\n            result.Add(i);\n            i++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n < 0) {\n            return result;\n        }\n        if (n ==\
    \ 0) {\n            return result;\n        }\n        if (n == 1) {\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            return result;\n        }\n        if (n == 3) {\n            result.Add(2);\n\
    \            result.Add(3);\n            return result;\n        }\n        if\
    \ (n == 4) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            return result;\n        }\n        if (n ==\
    \ 5) {\n            result.Add(2);\n            result.Add(3);\n            result.Add(5);\n\
    \            result.Add(7);\n            return result;\n        }\n        if\
    \ (n == 6) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 7) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 8) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 9) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 10) {\n            result.Add(2);\n            result.Add(3", "      \
    \  List<long> result = new List<long>();\n        if (n < 0) {\n            throw\
    \ new IllegalArgumentException(\"n should be non-negative\");\n        }\n   \
    \     if (n == 0) {\n            return result;\n        }\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (IsPrime(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> primes\
    \ = new List<long>();\n        if (n <= 0) {\n            return primes;\n   \
    \     }\n        long i = 2;\n        while (i <= n) {\n            if (IsPrime(i))\
    \ {\n                primes.Add(i);\n            }\n            i++;\n       \
    \ }\n        return primes;", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n\");\n        }\n        List<long> result = new List<long>();\n        if (n\
    \ == 0) {\n            return result;\n        }\n        if (n == 1) {\n    \
    \        result.Add(2);\n            return result;\n        }\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (IsPrime(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\");\n        }\n        if (n == 0) {\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(2);\n    \
    \        return result;\n        }\n        for (long i = 2; i <= n; i++) {\n\
    \            if (IsPrime(i)) {\n                result.Add(i);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            return result;\n        }\n        if (n ==\
    \ 1) {\n            result.Add(2);\n            return result;\n        }\n  \
    \      if (n == 2) {\n            result.Add(2);\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n == 3) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            return result;\n\
    \        }\n        if (n == 4) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            return result;\n\
    \        }\n        if (n == 5) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 6) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 7) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 8) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 9) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            result.Add(13);\n", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return result;\n    \
    \    if (n == 2) return result;\n        if (n == 3) return result;\n        if\
    \ (n == 4) return result;\n        if (n == 5) return result;\n        if (n ==\
    \ 6) return result;\n        if (n == 7) return result;\n        if (n == 8) return\
    \ result;\n        if (n == 9) return result;\n        if (n == 10) return result;\n\
    \        if (n == 11) return result;\n        if (n == 12) return result;\n  \
    \      if (n == 13) return result;\n        if (n == 14) return result;\n    \
    \    if (n == 15) return result;\n        if (n == 16) return result;\n      \
    \  if (n == 17) return result;\n        if (n == 18) return result;\n        if\
    \ (n == 19) return result;\n        if (n == 20) return result;\n        if (n\
    \ == 21) return result;\n        if (n == 22) return result;\n        if (n ==\
    \ 23) return result;\n        if (n == 24) return result;\n        if (n == 25)\
    \ return result;\n        if (n == 26) return result;\n        if (n == 27) return\
    \ result;\n        if (n == 28) return result;\n        if (n == 29) return result;\n\
    \        if (n == 30) return result;\n        if (n == 31) return result;\n  \
    \      if (n == 32) return result;\n        if (n == 33) return result;\n    \
    \    if (n == 34) return result;\n        if (n == 35) return result;\n      \
    \  if (n == 36) return result;\n        if (n == 37) return result;\n        if\
    \ (n == 38) return result;\n        if (n == 39) return result;\n        if (n\
    \ == 40) return result;\n        if (n == 41) return result;\n        if (n ==\
    \ 42) return result;\n        if (n == 43) return result;\n        if (n == 44)\
    \ return result;\n        if (", "        List<long> result = new List<long>();\n\
    \        if (n < 0)\n            return result;\n        if (n == 0)\n       \
    \     return result;\n        if (n == 1)\n            return result;\n      \
    \  if (n == 2)\n            result.Add(2);\n        if (n == 3)\n            result.Add(2);\n\
    \        if (n == 4)\n            result.Add(2);\n        if (n == 5)\n      \
    \      result.Add(2);\n        if (n == 6)\n            result.Add(2);\n     \
    \   if (n == 7)\n            result.Add(2);\n        if (n == 8)\n           \
    \ result.Add(2);\n        if (n == 9)\n            result.Add(2);\n        if\
    \ (n == 10)\n            result.Add(2);\n        if (n == 11)\n            result.Add(2);\n\
    \        if (n == 12)\n            result.Add(2);\n        if (n == 13)\n    \
    \        result.Add(2);\n        if (n == 14)\n            result.Add(2);\n  \
    \      if (n == 15)\n            result.Add(2);\n        if (n == 16)\n      \
    \      result.Add(2);\n        if (n == 17)\n            result.Add(2);\n    \
    \    if (n == 18)\n            result.Add(2);\n        if (n == 19)\n        \
    \    result.Add(2);\n        if (n == 20)\n            result.Add(2);\n      \
    \  if (n == 21)\n            result.Add(2);\n        if (n == 22)\n          \
    \  result.Add(2);\n        if (n == 23)\n            result.Add(2);\n        if\
    \ (n == 24)\n            result.Add(2);\n        if (n == 25)\n            result.Add(2);\n\
    \        if (n == 26)\n            result.Add(2);\n        if (n == 27)\n    \
    \        result.Add(2);\n        if (n == 28)\n            result.Add(2);\n  \
    \      if (n == 29)\n            result.Add(2);\n        if (n == 30)\n      \
    \      result.", "        List<long> result = new List<long>();\n        if (n\
    \ < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    );\n        }\n        if (n == 0) {\n            return result;\n        }\n\
    \        if (n == 1) {\n            result.Add(2);\n            return result;\n\
    \        }\n        long i = 2;\n        while (i < n) {\n            if (n %\
    \ i == 0) {\n                i++;\n            } else {\n                result.Add(i);\n\
    \                i++;\n            }\n        }\n        return result;", "  \
    \      List<long> primes = new List<long>();\n        if (n < 0) {\n         \
    \   throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n\
    \        if (n == 0) {\n            return primes;\n        }\n        if (n ==\
    \ 1) {\n            primes.Add(2);\n            return primes;\n        }\n  \
    \      if (n == 2) {\n            primes.Add(2);\n            primes.Add(3);\n\
    \            return primes;\n        }\n        if (n == 3) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            return primes;\n\
    \        }\n        if (n == 4) {\n            primes.Add(2);\n            primes.Add(3);\n\
    \            primes.Add(5);\n            primes.Add(7);\n            return primes;\n\
    \        }\n        if (n == 5) {\n            primes.Add(2);\n            primes.Add(3);\n\
    \            primes.Add(5);\n            primes.Add(7);\n            primes.Add(11);\n\
    \            return primes;\n        }\n        if (n == 6) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            return\
    \ primes;\n        }\n        if (n == 7) {\n            primes.Add(2);\n    \
    \        primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            primes.Add(17);\n\
    \            return primes;\n        }\n        if (n == 8) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            primes.Add(17);\n\
    \            ", "        List<long> result = new List<long>();\n        if (n\
    \ < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    );\n        }\n        if (n == 0) {\n            return result;\n        }\n\
    \        if (n == 1) {\n            result.Add(2);\n            return result;\n\
    \        }\n        if (n == 2) {\n            result.Add(2);\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n == 3) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            return result;\n\
    \        }\n        if (n == 4) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            return result;\n\
    \        }\n        if (n == 5) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 6) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 7) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 8) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 9) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add", "        List<long> result = new List<long>();\n        if\
    \ (n <= 0) {\n            return result;\n        }\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (IsPrime(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> primes\
    \ = new List<long>();\n        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"\
    n\");\n        }\n        if (n == 0) {\n            return primes;\n        }\n\
    \        if (n == 1) {\n            primes.Add(2);\n            return primes;\n\
    \        }\n        if (n == 2) {\n            primes.Add(2);\n            primes.Add(3);\n\
    \            return primes;\n        }\n        if (n == 3) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            return primes;\n\
    \        }\n        if (n == 4) {\n            primes.Add(2);\n            primes.Add(3);\n\
    \            primes.Add(5);\n            primes.Add(7);\n            return primes;\n\
    \        }\n        if (n == 5) {\n            primes.Add(2);\n            primes.Add(3);\n\
    \            primes.Add(5);\n            primes.Add(7);\n            primes.Add(11);\n\
    \            return primes;\n        }\n        if (n == 6) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            return\
    \ primes;\n        }\n        if (n == 7) {\n            primes.Add(2);\n    \
    \        primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            primes.Add(17);\n\
    \            return primes;\n        }\n        if (n == 8) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            primes.Add(17);\n\
    \            primes.Add", "        List<long> result = new List<long>();\n   \
    \     if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\");\n        }\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (IsPrime(i)) {\n                result.Add(i);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    if (n == 0) return result;\n        if (n == 1) return result;\n        if\
    \ (n == 2) return result;\n        if (n == 3) return result;\n        if (n ==\
    \ 4) return result;\n        if (n == 5) return result;\n        if (n == 6) return\
    \ result;\n        if (n == 7) return result;\n        if (n == 8) return result;\n\
    \        if (n == 9) return result;\n        if (n == 10) return result;\n   \
    \     if (n == 11) return result;\n        if (n == 12) return result;\n     \
    \   if (n == 13) return result;\n        if (n == 14) return result;\n       \
    \ if (n == 15) return result;\n        if (n == 16) return result;\n        if\
    \ (n == 17) return result;\n        if (n == 18) return result;\n        if (n\
    \ == 19) return result;\n        if (n == 20) return result;\n        if (n ==\
    \ 21) return result;\n        if (n == 22) return result;\n        if (n == 23)\
    \ return result;\n        if (n == 24) return result;\n        if (n == 25) return\
    \ result;\n        if (n == 26) return result;\n        if (n == 27) return result;\n\
    \        if (n == 28) return result;\n        if (n == 29) return result;\n  \
    \      if (n == 30) return result;\n        if (n == 31) return result;\n    \
    \    if (n == 32) return result;\n        if (n == 33) return result;\n      \
    \  if (n == 34) return result;\n        if (n == 35) return result;\n        if\
    \ (n == 36) return result;\n        if (n == 37) return result;\n        if (n\
    \ == 38) return result;\n        if (n == 39) return result;\n        if (n ==\
    \ 40) return result;\n        if (n == 41) return result;\n        if (n == 42)\
    \ return result;\n        if (n == 43) return result;\n        if (n == 44) return\
    \ result;\n        if (", "        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\");\n        }\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            return result;\n        }\n        if (n ==\
    \ 1) {\n            result.Add(2);\n            return result;\n        }\n  \
    \      long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ {\n                result.Add(i);\n                n = n / i;\n            }\n\
    \            else {\n                i++;\n            }\n        }\n        if\
    \ (n > 1) {\n            result.Add(n);\n        }\n        return result;", " \
    \       if (n < 0)\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\");\n        List<long> result = new List<long>();\n        if\
    \ (n == 0)\n            return result;\n        if (n == 1)\n            return\
    \ result;\n        if (n == 2) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        long start = 3;\n        while (start <= n) {\n\
    \            if (IsPrime(start))\n                result.Add(start);\n       \
    \     start += 2;\n        }\n        return result;\n    }\n\n    public static\
    \ bool IsPrime(long n) {\n        if (n < 2)\n            return false;\n    \
    \    if (n == 2)\n            return true;\n        if (n % 2 == 0)\n        \
    \    return false;\n        long max = (long)Math.sqrt(n);\n        for (long\
    \ i = 3; i <= max; i += 2) {\n            if (n % i == 0)\n                return\
    \ false;\n        }\n        return true;", "        List<long> result = new List<long>();\n\
    \        if (n <= 0)\n            return result;\n        if (n == 1)\n      \
    \      return result;\n        if (n == 2) {\n            result.Add(2);\n   \
    \         return result;\n        }\n        for (long i = 2; i <= n; i++) {\n\
    \            if (IsPrime(i))\n                result.Add(i);\n        }\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    );\n        }\n        if (n == 0) {\n            return result;\n        }\n\
    \        if (n == 1) {\n            result.Add(2);\n            return result;\n\
    \        }\n        for (long i = 2; i < n; i++) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n < 0)\n\
    \            return result;\n        if (n == 0)\n            return result;\n\
    \        if (n == 1)\n            return result;\n        if (n == 2)\n      \
    \      result.Add(2);\n        if (n == 3)\n            result.Add(2);\n     \
    \   if (n == 4)\n            result.Add(2);\n        if (n == 5)\n           \
    \ result.Add(2);\n        if (n == 6)\n            result.Add(2);\n        if\
    \ (n == 7)\n            result.Add(2);\n        if (n == 8)\n            result.Add(2);\n\
    \        if (n == 9)\n            result.Add(2);\n        if (n == 10)\n     \
    \       result.Add(2);\n        if (n == 11)\n            result.Add(2);\n   \
    \     if (n == 12)\n            result.Add(2);\n        if (n == 13)\n       \
    \     result.Add(2);\n        if (n == 14)\n            result.Add(2);\n     \
    \   if (n == 15)\n            result.Add(2);\n        if (n == 16)\n         \
    \   result.Add(2);\n        if (n == 17)\n            result.Add(2);\n       \
    \ if (n == 18)\n            result.Add(2);\n        if (n == 19)\n           \
    \ result.Add(2);\n        if (n == 20)\n            result.Add(2);\n        if\
    \ (n == 21)\n            result.Add(2);\n        if (n == 22)\n            result.Add(2);\n\
    \        if (n == 23)\n            result.Add(2);\n        if (n == 24)\n    \
    \        result.Add(2);\n        if (n == 25)\n            result.Add(2);\n  \
    \      if (n == 26)\n            result.Add(2);\n        if (n == 27)\n      \
    \      result.Add(2);\n        if (n == 28)\n            result.Add(2);\n    \
    \    if (n == 29)\n            result.Add(2);\n        if (n == 30)\n        \
    \    result.", "        List<long> result = new List<long>();\n        if (n <=\
    \ 0)\n            return result;\n        if (n == 1)\n            return result;\n\
    \        if (n == 2) {\n            result.Add(2);\n            return result;\n\
    \        }\n        long i = 3;\n        while (i <= n) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n                i += 2;\n            }\n\
    \            else {\n                i += 2;\n            }\n        }\n     \
    \   return result;", "        List<long> primes = new List<long>();\n        if\
    \ (n < 0)\n            return primes;\n        if (n == 0)\n            return\
    \ primes;\n        if (n == 1)\n            return primes;\n        if (n == 2)\n\
    \            primes.Add(2);\n        if (n == 3)\n            primes.Add(3);\n\
    \        if (n == 4)\n            primes.Add(2);\n        if (n == 5)\n      \
    \      primes.Add(5);\n        if (n == 6)\n            primes.Add(2);\n     \
    \   if (n == 7)\n            primes.Add(7);\n        if (n == 8)\n           \
    \ primes.Add(2);\n        if (n == 9)\n            primes.Add(3);\n        if\
    \ (n == 10)\n            primes.Add(5);\n        if (n == 11)\n            primes.Add(11);\n\
    \        if (n == 12)\n            primes.Add(2);\n        if (n == 13)\n    \
    \        primes.Add(13);\n        if (n == 14)\n            primes.Add(2);\n \
    \       if (n == 15)\n            primes.Add(3);\n        if (n == 16)\n     \
    \       primes.Add(5);\n        if (n == 17)\n            primes.Add(7);\n   \
    \     if (n == 18)\n            primes.Add(11);\n        if (n == 19)\n      \
    \      primes.Add(13);\n        if (n == 20)\n            primes.Add(17);\n  \
    \      if (n == 21)\n            primes.Add(19);\n        if (n == 22)\n     \
    \       primes.Add(2);\n        if (n == 23)\n            primes.Add(23);\n  \
    \      if (n == 24)\n            primes.Add(2);\n        if (n == 25)\n      \
    \      primes.Add(5);\n        if (n == 26)\n            primes.Add(26);\n   \
    \     if (n == 27)\n            primes.Add(3);\n        if (n == 28)\n       \
    \     primes.Add", "        List<long> result = new List<long>();\n        if\
    \ (n < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\"\
    );\n        }\n        if (n == 0) {\n            return result;\n        }\n\
    \        if (n == 1) {\n            result.Add(2);\n            return result;\n\
    \        }\n        for (long i = 2; i < n; i++) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;\n    }\n\n    public static bool IsPrime(long n) {\n        if (n <\
    \ 2) {\n            return false;\n        }\n        if (n == 2) {\n        \
    \    return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n\
    \        }\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n\
    \ % i == 0) {\n                return false;\n            }\n        }\n     \
    \   return true;", "        List<long> result = new List<long>();\n        if\
    \ (n <= 0)\n            return result;\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (IsPrime(i))\n                result.Add(i);\n        }\n\
    \        return result;\n    }\n\n    public static bool IsPrime(long n) {\n \
    \       if (n <= 1)\n            return false;\n        if (n == 2)\n        \
    \    return true;\n        if (n % 2 == 0)\n            return false;\n      \
    \  long i = 3;\n        while (i * i <= n) {\n            if (n % i == 0)\n  \
    \              return false;\n            i += 2;\n        }\n        return true;",
  "        List<long> result = new List<long>();\n        if (n <= 0) {\n        \
    \    return result;\n        }\n        long i = 2;\n        while (i <= n) {\n\
    \            if (IsPrime(i)) {\n                result.Add(i);\n            }\n\
    \            i++;\n        }\n        return result;", "        List<long> primes\
    \ = new List<long>();\n        if (n < 0) {\n            throw new InvalidOperationException(\"\
    n must be non-negative\");\n        }\n        if (n == 0) {\n            return\
    \ primes;\n        }\n        if (n == 1) {\n            primes.Add(2);\n    \
    \        return primes;\n        }\n        if (n == 2) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            return primes;\n        }\n        if\
    \ (n == 3) {\n            primes.Add(2);\n            primes.Add(3);\n       \
    \     primes.Add(5);\n            return primes;\n        }\n        if (n ==\
    \ 4) {\n            primes.Add(2);\n            primes.Add(3);\n            primes.Add(5);\n\
    \            primes.Add(7);\n            return primes;\n        }\n        if\
    \ (n == 5) {\n            primes.Add(2);\n            primes.Add(3);\n       \
    \     primes.Add(5);\n            primes.Add(7);\n            primes.Add(11);\n\
    \            return primes;\n        }\n        if (n == 6) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            return\
    \ primes;\n        }\n        if (n == 7) {\n            primes.Add(2);\n    \
    \        primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            primes.Add(17);\n\
    \            return primes;\n        }\n        if (n == 8) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            primes.Add(17);\n\
    \            pr", "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"\
    n\");\n        List<long> result = new List<long>();\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (IsPrime(i))\n                result.Add(i);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n <= 0) {\n            return result;\n        }\n        long i\
    \ = 2;\n        while (i <= n) {\n            if (IsPrime(i)) {\n            \
    \    result.Add(i);\n            }\n            i++;\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            return result;\n        }\n        if (n == 1) {\n          \
    \  result.Add(2);\n            return result;\n        }\n        if (n == 2)\
    \ {\n            result.Add(2);\n            result.Add(3);\n            return\
    \ result;\n        }\n        if (n == 3) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            return result;\n\
    \        }\n        if (n == 4) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            return result;\n\
    \        }\n        if (n == 5) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 6) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 7) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 8) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 9) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            result.Add(13);\n", "        List<long> result = new List<long>();\n\
    \        if (n < 0) {\n            throw new IllegalArgumentException(\"n must\
    \ be non-negative\");\n        }\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (IsPrime(i)) {\n                result.Add(i);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\");\n        }\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        for (long i = 2; i < n; i++) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;\n    }\n\n    public static bool IsPrime(long n) {\n        if (n <\
    \ 2) {\n            return false;\n        }\n        if (n == 2) {\n        \
    \    return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n\
    \        }\n        long i = 3;\n        while (i * i <= n) {\n            if\
    \ (n % i == 0) {\n                return false;\n            }\n            i\
    \ += 2;\n        }\n        return true;", "        List<long> result = new List<long>();\n\
    \        if (n <= 0)\n            return result;\n        for (long i = 2; i <=\
    \ n; i++) {\n            if (IsPrime(i))\n                result.Add(i);\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n <= 0) {\n            return result;\n        }\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (IsPrime(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;\n    }\n\n    public static\
    \ bool IsPrime(long n) {\n        if (n <= 1) {\n            return false;\n \
    \       }\n        if (n == 2) {\n            return true;\n        }\n      \
    \  if (n % 2 == 0) {\n            return false;\n        }\n        for (long\
    \ i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n              \
    \  return false;\n            }\n        }\n        return true;", "        List<long>\
    \ result = new List<long>();\n        if (n <= 0) {\n            return result;\n\
    \        }\n        long start = 2;\n        long end = Math.Min(n, start);\n\
    \        while (start <= end) {\n            if (IsPrime(start)) {\n         \
    \       result.Add(start);\n            }\n            start++;\n        }\n \
    \       return result;\n    }\n\n    public static bool IsPrime(long n) {\n  \
    \      if (n <= 1) {\n            return false;\n        }\n        if (n == 2)\
    \ {\n            return true;\n        }\n        if (n % 2 == 0) {\n        \
    \    return false;\n        }\n        long i = 3;\n        while (i <= Math.Sqrt(n))\
    \ {\n            if (n % i == 0) {\n                return false;\n          \
    \  }\n            i += 2;\n        }\n        return true;", "        List<long>\
    \ result = new List<long>();\n        if (n <= 0) {\n            return result;\n\
    \        }\n        for (long i = 2; i <= n; i++) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n <= 0)\
    \ {\n            return result;\n        }\n        long i = 2;\n        while\
    \ (i <= n) {\n            if (IsPrime(i)) {\n                result.Add(i);\n\
    \            }\n            i++;\n        }\n        return result;\n    }\n\n\
    \    public static bool IsPrime(long n) {\n        if (n <= 1) {\n           \
    \ return false;\n        }\n        if (n == 2) {\n            return true;\n\
    \        }\n        if (n % 2 == 0) {\n            return false;\n        }\n\
    \        long i = 3;\n        while (i <= Math.Sqrt(n)) {\n            if (n %\
    \ i == 0) {\n                return false;\n            }\n            i += 2;\n\
    \        }\n        return true;", "        List<long> result = new List<long>();\n\
    \        if (n < 0)\n            return result;\n        if (n == 0)\n       \
    \     return result;\n        if (n == 1)\n            return result;\n      \
    \  if (n == 2)\n            result.Add(2);\n        if (n == 3)\n            result.Add(2);\n\
    \        if (n == 4)\n            result.Add(2);\n        if (n == 5)\n      \
    \      result.Add(2);\n        if (n == 6)\n            result.Add(2);\n     \
    \   if (n == 7)\n            result.Add(2);\n        if (n == 8)\n           \
    \ result.Add(2);\n        if (n == 9)\n            result.Add(2);\n        if\
    \ (n == 10)\n            result.Add(2);\n        if (n == 11)\n            result.Add(2);\n\
    \        if (n == 12)\n            result.Add(2);\n        if (n == 13)\n    \
    \        result.Add(2);\n        if (n == 14)\n            result.Add(2);\n  \
    \      if (n == 15)\n            result.Add(2);\n        if (n == 16)\n      \
    \      result.Add(2);\n        if (n == 17)\n            result.Add(2);\n    \
    \    if (n == 18)\n            result.Add(2);\n        if (n == 19)\n        \
    \    result.Add(2);\n        if (n == 20)\n            result.Add(2);\n      \
    \  if (n == 21)\n            result.Add(2);\n        if (n == 22)\n          \
    \  result.Add(2);\n        if (n == 23)\n            result.Add(2);\n        if\
    \ (n == 24)\n            result.Add(2);\n        if (n == 25)\n            result.Add(2);\n\
    \        if (n == 26)\n            result.Add(2);\n        if (n == 27)\n    \
    \        result.Add(2);\n        if (n == 28)\n            result.Add(2);\n  \
    \      if (n == 29)\n            result.Add(2);\n        if (n == 30)\n      \
    \      result.", "        List<long> result = new List<long>();\n        if (n\
    \ < 0) {\n            throw new IllegalArgumentException(\"n should be non-negative\"\
    );\n        }\n        if (n == 0) {\n            return result;\n        }\n\
    \        long i = 2;\n        while (i <= n) {\n            if (IsPrime(i)) {\n\
    \                result.Add(i);\n            }\n            i++;\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\");\n        }\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (IsPrime(i)) {\n                result.Add(i);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    if (n < 0)\n            return result;\n        if (n == 0)\n           \
    \ return result;\n        if (n == 1)\n            return result;\n        if\
    \ (n == 2)\n            result.Add(2);\n        else {\n            long i = 3;\n\
    \            while (i <= n) {\n                if (IsPrime(i))\n             \
    \       result.Add(i);\n                i += 2;\n            }\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    );\n        }\n        if (n == 0) {\n            return result;\n        }\n\
    \        if (n == 1) {\n            result.Add(2);\n            return result;\n\
    \        }\n        for (long i = 2; i <= n; i++) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;\n    }\n\n    public static bool IsPrime(long n) {\n        if (n <\
    \ 2) {\n            return false;\n        }\n        if (n == 2) {\n        \
    \    return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n\
    \        }\n        long i = 3;\n        while (i * i <= n) {\n            if\
    \ (n % i == 0) {\n                return false;\n            }\n            i\
    \ += 2;\n        }\n        return true;", "        List<long> result = new List<long>();\n\
    \        if (n <= 0)\n            return result;\n        long i = 2;\n      \
    \  while (i <= n) {\n            if (IsPrime(i))\n                result.Add(i);\n\
    \            i++;\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n < 0)\n            return result;\n      \
    \  if (n == 0)\n            return result;\n        if (n == 1)\n            return\
    \ result;\n        if (n == 2) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        if (n == 3) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            return result;\n        }\n        if (n\
    \ == 4) {\n            result.Add(2);\n            result.Add(3);\n          \
    \  result.Add(5);\n            return result;\n        }\n        if (n == 5)\
    \ {\n            result.Add(2);\n            result.Add(3);\n            result.Add(5);\n\
    \            result.Add(7);\n            return result;\n        }\n        if\
    \ (n == 6) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 7) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 8) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 9) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 10) {\n            result.Add(2);\n            result.Add(3);\n      \
    \      result.Add(5);\n            result", "        List<long> result = new List<long>();\n\
    \        if (n < 0)\n            return result;\n        if (n == 0)\n       \
    \     return result;\n        if (n == 1)\n            return result;\n      \
    \  long i = 2;\n        while (i <= n) {\n            if (IsPrime(i))\n      \
    \          result.Add(i);\n            i++;\n        }\n        return result;",
  "        if (n < 0)\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\");\n        if (n == 0)\n            return new List<long>();\n\
    \        List<long> result = new List<long>();\n        if (n == 1)\n        \
    \    return result;\n        for (long i = 2; i <= n; i++) {\n            if (IsPrime(i))\n\
    \                result.Add(i);\n        }\n        return result;\n    }\n\n\
    \    public static bool IsPrime(long n) {\n        if (n < 2)\n            return\
    \ false;\n        if (n == 2)\n            return true;\n        if (n % 2 ==\
    \ 0)\n            return false;\n        long i = 3;\n        while (i * i <=\
    \ n) {\n            if (n % i == 0)\n                return false;\n         \
    \   i += 2;\n        }\n        return true;", "        List<long> primes = new\
    \ List<long>();\n        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"\
    n\");\n        }\n        if (n == 0) {\n            return primes;\n        }\n\
    \        if (n == 1) {\n            primes.Add(2);\n            return primes;\n\
    \        }\n        if (n == 2) {\n            primes.Add(2);\n            primes.Add(3);\n\
    \            return primes;\n        }\n        for (long i = 3; i <= n; i++)\
    \ {\n            if (IsPrime(i)) {\n                primes.Add(i);\n         \
    \   }\n        }\n        return primes;\n    }\n\n    public static bool IsPrime(long\
    \ n) {\n        if (n < 2) {\n            return false;\n        }\n        if\
    \ (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n\
    \            return false;\n        }\n        long root = (long)Math.Sqrt(n);\n\
    \        for (long i = 3; i <= root; i += 2) {\n            if (n % i == 0) {\n\
    \                return false;\n            }\n        }\n        return true;",
  "        List<long> result = new List<long>();\n        if (n < 0) {\n         \
    \   throw new IllegalArgumentException(\"n should be non-negative\");\n      \
    \  }\n        if (n == 0) {\n            return result;\n        }\n        for\
    \ (long i = 2; i <= n; i++) {\n            if (IsPrime(i)) {\n               \
    \ result.Add(i);\n            }\n        }\n        return result;\n    }\n\n\
    \    // Return true if the given number is prime.\n    // The number is given\
    \ as a long value.\n    // The number is assumed to be non-negative.\n    // The\
    \ number is assumed to be greater than 1.\n    public static boolean IsPrime(long\
    \ n) {\n        if (n < 2) {\n            return false;\n        }\n        if\
    \ (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n\
    \            return false;\n        }\n        long i = 3;\n        while (i *\
    \ i <= n) {\n            if (n % i == 0) {\n                return false;\n  \
    \          }\n            i += 2;\n        }\n        return true;", "       \
    \ List<long> result = new List<long>();\n        if (n < 0) {\n            throw\
    \ new IllegalArgumentException(\"n must be non-negative\");\n        }\n     \
    \   if (n == 0) {\n            return result;\n        }\n        for (long i\
    \ = 2; i <= n; i++) {\n            if (IsPrime(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;\n    }\n\n    public static\
    \ bool IsPrime(long n) {\n        if (n < 2) {\n            return false;\n  \
    \      }\n        if (n == 2) {\n            return true;\n        }\n       \
    \ if (n % 2 == 0) {\n            return false;\n        }\n        long i = 3;\n\
    \        while (i * i <= n) {\n            if (n % i == 0) {\n               \
    \ return false;\n            }\n            i += 2;\n        }\n        return\
    \ true;", "        List<long> result = new List<long>();\n        if (n < 0) {\n\
    \            return result;\n        }\n        if (n == 0) {\n            return\
    \ result;\n        }\n        if (n == 1) {\n            return result;\n    \
    \    }\n        if (n == 2) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        if (n == 3) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            return result;\n        }\n        if (n\
    \ == 4) {\n            result.Add(2);\n            result.Add(3);\n          \
    \  result.Add(5);\n            return result;\n        }\n        if (n == 5)\
    \ {\n            result.Add(2);\n            result.Add(3);\n            result.Add(5);\n\
    \            result.Add(7);\n            return result;\n        }\n        if\
    \ (n == 6) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 7) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 8) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 9) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 10) {\n            result.Add(2);\n            result.Add(3", "      \
    \  List<long> primes = new List<long>();\n        if (n < 0)\n            return\
    \ primes;\n        if (n == 0)\n            return primes;\n        if (n == 1)\n\
    \            return primes;\n        if (n == 2) {\n            primes.Add(2);\n\
    \            return primes;\n        }\n        if (n == 3) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            return primes;\n        }\n        if\
    \ (n == 4) {\n            primes.Add(2);\n            primes.Add(3);\n       \
    \     primes.Add(5);\n            return primes;\n        }\n        if (n ==\
    \ 5) {\n            primes.Add(2);\n            primes.Add(3);\n            primes.Add(5);\n\
    \            primes.Add(7);\n            return primes;\n        }\n        if\
    \ (n == 6) {\n            primes.Add(2);\n            primes.Add(3);\n       \
    \     primes.Add(5);\n            primes.Add(7);\n            primes.Add(11);\n\
    \            return primes;\n        }\n        if (n == 7) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            return\
    \ primes;\n        }\n        if (n == 8) {\n            primes.Add(2);\n    \
    \        primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            primes.Add(17);\n\
    \            return primes;\n        }\n        if (n == 9) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            primes.Add(17);\n\
    \            primes.Add", "        List<long> result = new List<long>();\n   \
    \     if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\");\n        }\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        long i = 2;\n        while (i * i <= n) {\n    \
    \        if (n % i == 0) {\n                n /= i;\n                result.Add(i);\n\
    \            }\n            else {\n                i++;\n            }\n    \
    \    }\n        if (n > 1) {\n            result.Add(n);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n <= 0)\
    \ {\n            return result;\n        }\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (IsPrime(i)) {\n                result.Add(i);\n         \
    \   }\n        }\n        return result;", "        List<long> primes = new List<long>();\n\
    \        if (n <= 0) {\n            return primes;\n        }\n        if (n ==\
    \ 1) {\n            return primes;\n        }\n        if (n == 2) {\n       \
    \     primes.Add(2);\n            return primes;\n        }\n        if (n ==\
    \ 3) {\n            primes.Add(2);\n            primes.Add(3);\n            return\
    \ primes;\n        }\n        if (n == 4) {\n            primes.Add(2);\n    \
    \        primes.Add(3);\n            primes.Add(5);\n            return primes;\n\
    \        }\n        if (n == 5) {\n            primes.Add(2);\n            primes.Add(3);\n\
    \            primes.Add(5);\n            primes.Add(7);\n            return primes;\n\
    \        }\n        if (n == 6) {\n            primes.Add(2);\n            primes.Add(3);\n\
    \            primes.Add(5);\n            primes.Add(7);\n            primes.Add(11);\n\
    \            return primes;\n        }\n        if (n == 7) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            return\
    \ primes;\n        }\n        if (n == 8) {\n            primes.Add(2);\n    \
    \        primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            primes.Add(17);\n\
    \            return primes;\n        }\n        if (n == 9) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            primes.Add(17);\n\
    \            primes.Add(19);\n            return", "        List<long> result\
    \ = new List<long>();\n        if (n <= 0) {\n            return result;\n   \
    \     }\n        for (long i = 2; i <= n; i++) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;\n    }\n\n    public static bool IsPrime(long n) {\n        if (n <=\
    \ 1) {\n            return false;\n        }\n        if (n == 2) {\n        \
    \    return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n\
    \        }\n        for (long i = 3; i <= Math.Sqrt(n); i += 2) {\n          \
    \  if (n % i == 0) {\n                return false;\n            }\n        }\n\
    \        return true;", "        List<long> result = new List<long>();\n     \
    \   if (n < 0) {\n            return result;\n        }\n        if (n == 0) {\n\
    \            return result;\n        }\n        if (n == 1) {\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(2);\n    \
    \        return result;\n        }\n        if (n == 3) {\n            result.Add(2);\n\
    \            result.Add(3);\n            return result;\n        }\n        if\
    \ (n == 4) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            return result;\n        }\n        if (n ==\
    \ 5) {\n            result.Add(2);\n            result.Add(3);\n            result.Add(5);\n\
    \            result.Add(7);\n            return result;\n        }\n        if\
    \ (n == 6) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 7) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 8) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 9) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 10) {\n            result.Add(2);\n            result.Add(3", "      \
    \  List<long> result = new List<long>();\n        if (n < 0)\n            return\
    \ result;\n        if (n == 0)\n            return result;\n        if (n == 1)\n\
    \            return result;\n        if (n == 2)\n            result.Add(2);\n\
    \        if (n == 3)\n            result.Add(3);\n        for (long i = 4; i <=\
    \ n; i++) {\n            if (IsPrime(i))\n                result.Add(i);\n   \
    \     }\n        return result;\n    }\n\n    public static boolean IsPrime(long\
    \ n) {\n        if (n < 2)\n            return false;\n        if (n == 2)\n \
    \           return true;\n        if (n % 2 == 0)\n            return false;\n\
    \        long i = 3;\n        while (i * i <= n) {\n            if (n % i == 0)\n\
    \                return false;\n            i += 2;\n        }\n        return\
    \ true;", "        List<long> result = new List<long>();\n        if (n <= 0)\
    \ {\n            return result;\n        }\n        long i = 2;\n        while\
    \ (i <= n) {\n            if (IsPrime(i)) {\n                result.Add(i);\n\
    \            }\n            i++;\n        }\n        return result;\n    }\n\n\
    \    public static bool IsPrime(long n) {\n        if (n <= 1) {\n           \
    \ return false;\n        }\n        if (n == 2) {\n            return true;\n\
    \        }\n        if (n % 2 == 0) {\n            return false;\n        }\n\
    \        long i = 3;\n        while (i <= Math.Sqrt(n)) {\n            if (n %\
    \ i == 0) {\n                return false;\n            }\n            i += 2;\n\
    \        }\n        return true;", "        List<long> result = new List<long>();\n\
    \        if (n < 0) {\n            throw new IllegalArgumentException(\"n must\
    \ be non-negative\");\n        }\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (IsPrime(i)) {\n                result.Add(i);\n            }\n        }\n \
    \       return result;", "        List<long> primes = new List<long>();\n    \
    \    if (n <= 0) {\n            return primes;\n        }\n        if (n == 1)\
    \ {\n            return primes;\n        }\n        if (n == 2) {\n          \
    \  primes.Add(2);\n            return primes;\n        }\n        if (n == 3)\
    \ {\n            primes.Add(2);\n            primes.Add(3);\n            return\
    \ primes;\n        }\n        if (n == 4) {\n            primes.Add(2);\n    \
    \        primes.Add(3);\n            primes.Add(5);\n            return primes;\n\
    \        }\n        if (n == 5) {\n            primes.Add(2);\n            primes.Add(3);\n\
    \            primes.Add(5);\n            primes.Add(7);\n            return primes;\n\
    \        }\n        if (n == 6) {\n            primes.Add(2);\n            primes.Add(3);\n\
    \            primes.Add(5);\n            primes.Add(7);\n            primes.Add(11);\n\
    \            return primes;\n        }\n        if (n == 7) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            return\
    \ primes;\n        }\n        if (n == 8) {\n            primes.Add(2);\n    \
    \        primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            primes.Add(17);\n\
    \            return primes;\n        }\n        if (n == 9) {\n            primes.Add(2);\n\
    \            primes.Add(3);\n            primes.Add(5);\n            primes.Add(7);\n\
    \            primes.Add(11);\n            primes.Add(13);\n            primes.Add(17);\n\
    \            primes.Add(19);\n            return", "        List<long> result\
    \ = new List<long>();\n        if (n <= 0) {\n            return result;\n   \
    \     }\n        for (long i = 2; i < n; i++) {\n            if (IsPrime(i)) {\n\
    \                result.Add(i);\n            }\n        }\n        return result;\n\
    \    }\n\n    public static bool IsPrime(long n) {\n        if (n <= 1) {\n  \
    \          return false;\n        }\n        if (n == 2) {\n            return\
    \ true;\n        }\n        if (n % 2 == 0) {\n            return false;\n   \
    \     }\n        for (long i = 3; i * i <= n; i += 2) {\n            if (n % i\
    \ == 0) {\n                return false;\n            }\n        }\n        return\
    \ true;", "        List<long> result = new List<long>();\n        if (n < 0)\n\
    \            return result;\n        if (n == 0)\n            return result;\n\
    \        if (n == 1)\n            return result;\n        if (n == 2)\n      \
    \      result.Add(2);\n        if (n == 3)\n            result.Add(2);\n     \
    \   if (n == 4)\n            result.Add(2);\n        if (n == 5)\n           \
    \ result.Add(2);\n        if (n == 6)\n            result.Add(2);\n        if\
    \ (n == 7)\n            result.Add(2);\n        if (n == 8)\n            result.Add(2);\n\
    \        if (n == 9)\n            result.Add(2);\n        if (n == 10)\n     \
    \       result.Add(2);\n        if (n == 11)\n            result.Add(2);\n   \
    \     if (n == 12)\n            result.Add(2);\n        if (n == 13)\n       \
    \     result.Add(2);\n        if (n == 14)\n            result.Add(2);\n     \
    \   if (n == 15)\n            result.Add(2);\n        if (n == 16)\n         \
    \   result.Add(2);\n        if (n == 17)\n            result.Add(2);\n       \
    \ if (n == 18)\n            result.Add(2);\n        if (n == 19)\n           \
    \ result.Add(2);\n        if (n == 20)\n            result.Add(2);\n        if\
    \ (n == 21)\n            result.Add(2);\n        if (n == 22)\n            result.Add(2);\n\
    \        if (n == 23)\n            result.Add(2);\n        if (n == 24)\n    \
    \        result.Add(2);\n        if (n == 25)\n            result.Add(2);\n  \
    \      if (n == 26)\n            result.Add(2);\n        if (n == 27)\n      \
    \      result.Add(2);\n        if (n == 28)\n            result.Add(2);\n    \
    \    if (n == 29)\n            result.Add(2);\n        if (n == 30)\n        \
    \    result.", "        List<long> result = new List<long>();\n        if (n <\
    \ 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    );\n        }\n        if (n == 0) {\n            return result;\n        }\n\
    \        if (n == 1) {\n            result.Add(2);\n            return result;\n\
    \        }\n        long i = 2;\n        while (i < n) {\n            if (n %\
    \ i == 0) {\n                result.Add(i);\n                n = n / i;\n    \
    \        }\n            else {\n                i++;\n            }\n        }\n\
    \        result.Add(i);\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (n < 0)\n            return result;\n        if\
    \ (n == 0)\n            return result;\n        if (n == 1)\n            return\
    \ result;\n        if (n == 2)\n            result.Add(2);\n        if (n == 3)\n\
    \            result.Add(3);\n        if (n == 4)\n            result.Add(2);\n\
    \        if (n == 5)\n            result.Add(5);\n        if (n == 6)\n      \
    \      result.Add(2);\n        if (n == 7)\n            result.Add(7);\n     \
    \   if (n == 8)\n            result.Add(2);\n        if (n == 9)\n           \
    \ result.Add(3);\n        if (n == 10)\n            result.Add(5);\n        if\
    \ (n == 11)\n            result.Add(7);\n        if (n == 12)\n            result.Add(2);\n\
    \        if (n == 13)\n            result.Add(13);\n        if (n == 14)\n   \
    \         result.Add(2);\n        if (n == 15)\n            result.Add(3);\n \
    \       if (n == 16)\n            result.Add(5);\n        if (n == 17)\n     \
    \       result.Add(7);\n        if (n == 18)\n            result.Add(11);\n  \
    \      if (n == 19)\n            result.Add(13);\n        if (n == 20)\n     \
    \       result.Add(17);\n        if (n == 21)\n            result.Add(19);\n \
    \       if (n == 22)\n            result.Add(23);\n        if (n == 23)\n    \
    \        result.Add(29);\n        if (n == 24)\n            result.Add(31);\n\
    \        if (n == 25)\n            result.Add(37);\n        if (n == 26)\n   \
    \         result.Add(41);\n        if (n == 27)\n            result.Add(43);\n\
    \        if (n == 28)\n            result.Add(47);\n        if (n == 29)\n   \
    \         result.Add(53);\n        if (n == 30)\n            result.", "     \
    \   List<long> result = new List<long>();\n        if (n < 0) {\n            return\
    \ result;\n        }\n        if (n == 0) {\n            return result;\n    \
    \    }\n        if (n == 1) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            return result;\n        }\n        if (n\
    \ == 3) {\n            result.Add(2);\n            result.Add(3);\n          \
    \  result.Add(5);\n            return result;\n        }\n        if (n == 4)\
    \ {\n            result.Add(2);\n            result.Add(3);\n            result.Add(5);\n\
    \            result.Add(7);\n            return result;\n        }\n        if\
    \ (n == 5) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 6) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 7) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 8) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 9) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            result.Add(7);", "        List<long> result\
    \ = new List<long>();\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\");\n        }\n        if (n == 0) {\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(2);\n    \
    \        return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(3);\n            return result;\n        }\n        for\
    \ (long i = 3; i <= n; i++) {\n            if (IsPrime(i)) {\n               \
    \ result.Add(i);\n            }\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        if (n < 0) {\n            throw\
    \ new IllegalArgumentException(\"n must be non-negative\");\n        }\n     \
    \   if (n == 0) {\n            return result;\n        }\n        if (n == 1)\
    \ {\n            result.Add(2);\n            return result;\n        }\n     \
    \   if (n == 2) {\n            result.Add(2);\n            result.Add(3);\n  \
    \          return result;\n        }\n        if (n == 3) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            return result;\n\
    \        }\n        if (n == 4) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            return result;\n\
    \        }\n        if (n == 5) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 6) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 7) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 8) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 9) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add", "        List<long> result = new List<long>();\n        if\
    \ (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    );\n        }\n        if (n == 0) {\n            return result;\n        }\n\
    \        if (n == 1) {\n            result.Add(2);\n            return result;\n\
    \        }\n        for (long i = 2; i < n; i++) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n < 0)\n\
    \            return result;\n        if (n == 0)\n            return result;\n\
    \        if (n == 1)\n            return result;\n        if (n == 2)\n      \
    \      result.Add(2);\n        if (n == 3)\n            result.Add(2);\n     \
    \   if (n == 4)\n            result.Add(2);\n        if (n == 5)\n           \
    \ result.Add(2);\n        if (n == 6)\n            result.Add(2);\n        if\
    \ (n == 7)\n            result.Add(2);\n        if (n == 8)\n            result.Add(2);\n\
    \        if (n == 9)\n            result.Add(2);\n        if (n == 10)\n     \
    \       result.Add(2);\n        if (n == 11)\n            result.Add(2);\n   \
    \     if (n == 12)\n            result.Add(2);\n        if (n == 13)\n       \
    \     result.Add(2);\n        if (n == 14)\n            result.Add(2);\n     \
    \   if (n == 15)\n            result.Add(2);\n        if (n == 16)\n         \
    \   result.Add(2);\n        if (n == 17)\n            result.Add(2);\n       \
    \ if (n == 18)\n            result.Add(2);\n        if (n == 19)\n           \
    \ result.Add(2);\n        if (n == 20)\n            result.Add(2);\n        if\
    \ (n == 21)\n            result.Add(2);\n        if (n == 22)\n            result.Add(2);\n\
    \        if (n == 23)\n            result.Add(2);\n        if (n == 24)\n    \
    \        result.Add(2);\n        if (n == 25)\n            result.Add(2);\n  \
    \      if (n == 26)\n            result.Add(2);\n        if (n == 27)\n      \
    \      result.Add(2);\n        if (n == 28)\n            result.Add(2);\n    \
    \    if (n == 29)\n            result.Add(2);\n        if (n == 30)\n        \
    \    result.", "        List<long> result = new List<long>();\n        if (n <=\
    \ 0) {\n            return result;\n        }\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (IsPrime(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\");\n        }\n        if (n == 0) {\n            return\
    \ result;\n        }\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (IsPrime(i)) {\n                result.Add(i);\n            }\n        }\n \
    \       return result;", "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"\
    n\");\n        List<long> result = new List<long>();\n        if (n == 0)\n  \
    \          return result;\n        if (n == 1)\n            return result;\n \
    \       if (n == 2)\n            return result;\n        if (n == 3)\n       \
    \     return result;\n        if (n == 4)\n            return result;\n      \
    \  if (n == 5)\n            return result;\n        if (n == 6)\n            return\
    \ result;\n        if (n == 7)\n            return result;\n        if (n == 8)\n\
    \            return result;\n        if (n == 9)\n            return result;\n\
    \        if (n == 10)\n            return result;\n        if (n == 11)\n    \
    \        return result;\n        if (n == 12)\n            return result;\n  \
    \      if (n == 13)\n            return result;\n        if (n == 14)\n      \
    \      return result;\n        if (n == 15)\n            return result;\n    \
    \    if (n == 16)\n            return result;\n        if (n == 17)\n        \
    \    return result;\n        if (n == 18)\n            return result;\n      \
    \  if (n == 19)\n            return result;\n        if (n == 20)\n          \
    \  return result;\n        if (n == 21)\n            return result;\n        if\
    \ (n == 22)\n            return result;\n        if (n == 23)\n            return\
    \ result;\n        if (n == 24)\n            return result;\n        if (n ==\
    \ 25)\n            return result;\n        if (n == 26)\n            return result;\n\
    \        if (n == 27)\n            return result;\n        if (n == 28)\n    \
    \        return result;\n        if (n == 29)\n            return result;\n  \
    \      if (n == 30)\n            return result;\n        if (n == 31)\n      \
    \      return result;\n        if (n == 32)\n            return result;\n    \
    \    if (n == 33)\n            return result;\n        if (n == 34)\n        \
    \    return result;\n        if (n == 35)\n            return result;\n      \
    \  if (n == 36)\n            return", "        List<long> result = new List<long>();\n\
    \        if (n < 0) {\n            throw new IllegalArgumentException(\"n must\
    \ be non-negative\");\n        }\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        for (long i = 2; i <= n; i++) {\n            if\
    \ (IsPrime(i)) {\n                result.Add(i);\n            }\n        }\n \
    \       return result;", "        List<long> primes = new List<long>();\n    \
    \    if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
    \ non-negative\");\n        }\n        if (n == 0) {\n            return primes;\n\
    \        }\n        if (n == 1) {\n            return primes;\n        }\n   \
    \     if (n == 2) {\n            primes.Add(2);\n            return primes;\n\
    \        }\n        if (n == 3) {\n            primes.Add(2);\n            primes.Add(3);\n\
    \            return primes;\n        }\n        for (long i = 4; i <= n; i++)\
    \ {\n            if (IsPrime(i)) {\n                primes.Add(i);\n         \
    \   }\n        }\n        return primes;", "        List<long> result = new List<long>();\n\
    \        if (n < 0) {\n            throw new IllegalArgumentException(\"n must\
    \ be non-negative\");\n        }\n        if (n == 0) {\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(2);\n            return\
    \ result;\n        }\n        long i = 2;\n        while (i < n) {\n         \
    \   if (n % i == 0) {\n                result.Add(i);\n                n = n /\
    \ i;\n            } else {\n                i++;\n            }\n        }\n \
    \       if (n > 1) {\n            result.Add(n);\n        }\n        return result;",
  "        if (n < 0)\n            throw new ArgumentOutOfRangeException(\"n\");\n\
    \        List<long> result = new List<long>();\n        if (n == 0)\n        \
    \    return result;\n        if (n == 1)\n            return result;\n       \
    \ if (n == 2)\n            return result.Add(2);\n        if (n == 3)\n      \
    \      return result.Add(2).Add(3);\n        if (n == 4)\n            return result.Add(2).Add(3).Add(5);\n\
    \        if (n == 5)\n            return result.Add(2).Add(3).Add(5).Add(7);\n\
    \        if (n == 6)\n            return result.Add(2).Add(3).Add(5).Add(7).Add(11);\n\
    \        if (n == 7)\n            return result.Add(2).Add(3).Add(5).Add(7).Add(11).Add(13);\n\
    \        if (n == 8)\n            return result.Add(2).Add(3).Add(5).Add(7).Add(11).Add(13).Add(17);\n\
    \        if (n == 9)\n            return result.Add(2).Add(3).Add(5).Add(7).Add(11).Add(13).Add(17).Add(19);\n\
    \        if (n == 10)\n            return result.Add(2).Add(3).Add(5).Add(7).Add(11).Add(13).Add(17).Add(19).Add(23);\n\
    \        if (n == 11)\n            return result.Add(2).Add(3).Add(5).Add(7).Add(11).Add(13).Add(17).Add(19).Add(23).Add(29);\n\
    \        if (n == 12)\n            return result.Add(2).Add(3).Add(5).Add(7).Add(11).Add(13).Add(17).Add(19).Add(23).Add(29).Add(31);\n\
    \        if (n == 13)\n            return result.Add(2).Add(3).Add(5).Add(7).Add(11).Add(13).Add(17).Add(19).Add",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return result;\n        if (n == 2) return result;\n    \
    \    if (n == 3) return result;\n        if (n == 4) return result;\n        if\
    \ (n == 5) return result;\n        if (n == 6) return result;\n        if (n ==\
    \ 7) return result;\n        if (n == 8) return result;\n        if (n == 9) return\
    \ result;\n        if (n == 10) return result;\n        if (n == 11) return result;\n\
    \        if (n == 12) return result;\n        if (n == 13) return result;\n  \
    \      if (n == 14) return result;\n        if (n == 15) return result;\n    \
    \    if (n == 16) return result;\n        if (n == 17) return result;\n      \
    \  if (n == 18) return result;\n        if (n == 19) return result;\n        if\
    \ (n == 20) return result;\n        if (n == 21) return result;\n        if (n\
    \ == 22) return result;\n        if (n == 23) return result;\n        if (n ==\
    \ 24) return result;\n        if (n == 25) return result;\n        if (n == 26)\
    \ return result;\n        if (n == 27) return result;\n        if (n == 28) return\
    \ result;\n        if (n == 29) return result;\n        if (n == 30) return result;\n\
    \        if (n == 31) return result;\n        if (n == 32) return result;\n  \
    \      if (n == 33) return result;\n        if (n == 34) return result;\n    \
    \    if (n == 35) return result;\n        if (n == 36) return result;\n      \
    \  if (n == 37) return result;\n        if (n == 38) return result;\n        if\
    \ (n == 39) return result;\n        if (n == 40) return result;\n        if (n\
    \ == 41) return result;\n        if (n == 42) return result;\n        if (n ==\
    \ 43) return result;\n        if (n == 44) return result;\n        if (", "  \
    \      List<long> result = new List<long>();\n        if (n <= 0) return result;\n\
    \        if (n == 1) return result;\n        if (n == 2) return result;\n    \
    \    if (n == 3) return result;\n        if (n == 4) return result;\n        if\
    \ (n == 5) return result;\n        if (n == 6) return result;\n        if (n ==\
    \ 7) return result;\n        if (n == 8) return result;\n        if (n == 9) return\
    \ result;\n        if (n == 10) return result;\n        if (n == 11) return result;\n\
    \        if (n == 12) return result;\n        if (n == 13) return result;\n  \
    \      if (n == 14) return result;\n        if (n == 15) return result;\n    \
    \    if (n == 16) return result;\n        if (n == 17) return result;\n      \
    \  if (n == 18) return result;\n        if (n == 19) return result;\n        if\
    \ (n == 20) return result;\n        if (n == 21) return result;\n        if (n\
    \ == 22) return result;\n        if (n == 23) return result;\n        if (n ==\
    \ 24) return result;\n        if (n == 25) return result;\n        if (n == 26)\
    \ return result;\n        if (n == 27) return result;\n        if (n == 28) return\
    \ result;\n        if (n == 29) return result;\n        if (n == 30) return result;\n\
    \        if (n == 31) return result;\n        if (n == 32) return result;\n  \
    \      if (n == 33) return result;\n        if (n == 34) return result;\n    \
    \    if (n == 35) return result;\n        if (n == 36) return result;\n      \
    \  if (n == 37) return result;\n        if (n == 38) return result;\n        if\
    \ (n == 39) return result;\n        if (n == 40) return result;\n        if (n\
    \ == 41) return result;\n        if (n == 42) return result;\n        if (n ==\
    \ 43) return result;\n        if (n == 44) return result;\n        if (", "  \
    \      List<long> result = new List<long>();\n        if (n < 0) {\n         \
    \   throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n\
    \        if (n == 0) {\n            return result;\n        }\n        long start\
    \ = 2;\n        while (start <= n) {\n            if (IsPrime(start)) {\n    \
    \            result.Add(start);\n            }\n            start++;\n       \
    \ }\n        return result;\n    }\n\n    public static boolean IsPrime(long n)\
    \ {\n        if (n < 2) {\n            return false;\n        }\n        if (n\
    \ == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n  \
    \          return false;\n        }\n        long i = 3;\n        while (i <=\
    \ Math.Sqrt(n)) {\n            if (n % i == 0) {\n                return false;\n\
    \            }\n            i += 2;\n        }\n        return true;", "     \
    \   List<long> primes = new List<long>();\n        if (n <= 0)\n            return\
    \ primes;\n        if (n == 1)\n            return primes;\n        if (n == 2)\n\
    \            return primes;\n        if (n == 3)\n            return primes;\n\
    \        if (n == 4)\n            return primes;\n        if (n == 5)\n      \
    \      return primes;\n        if (n == 6)\n            return primes;\n     \
    \   if (n == 7)\n            return primes;\n        if (n == 8)\n           \
    \ return primes;\n        if (n == 9)\n            return primes;\n        if\
    \ (n == 10)\n            return primes;\n        if (n == 11)\n            return\
    \ primes;\n        if (n == 12)\n            return primes;\n        if (n ==\
    \ 13)\n            return primes;\n        if (n == 14)\n            return primes;\n\
    \        if (n == 15)\n            return primes;\n        if (n == 16)\n    \
    \        return primes;\n        if (n == 17)\n            return primes;\n  \
    \      if (n == 18)\n            return primes;\n        if (n == 19)\n      \
    \      return primes;\n        if (n == 20)\n            return primes;\n    \
    \    if (n == 21)\n            return primes;\n        if (n == 22)\n        \
    \    return primes;\n        if (n == 23)\n            return primes;\n      \
    \  if (n == 24)\n            return primes;\n        if (n == 25)\n          \
    \  return primes;\n        if (n == 26)\n            return primes;\n        if\
    \ (n == 27)\n            return primes;\n        if (n == 28)\n            return\
    \ primes;\n        if (n == 29)\n            return primes;\n        if (n ==\
    \ 30)\n            return primes;\n        if (n == 31)\n            return primes;\n\
    \        if (n == 32)\n            return primes;\n        if (n == 33)\n    \
    \        return primes;\n        if (n == 34)\n            return primes;\n  \
    \      if (n == 35)", "        List<long> primes = new List<long>();\n       \
    \ if (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    );\n        }\n        if (n == 0) {\n            return primes;\n        }\n\
    \        if (n == 1) {\n            return primes;\n        }\n        if (n ==\
    \ 2) {\n            primes.Add(2);\n            return primes;\n        }\n  \
    \      for (long i = 3; i <= Math.Sqrt(n); i += 2) {\n            if (n % i ==\
    \ 0) {\n                return primes;\n            }\n        }\n        primes.Add(2);\n\
    \        primes.Add(3);\n        for (long i = 5; i <= Math.Sqrt(n); i += 2) {\n\
    \            if (n % i == 0) {\n                primes.Add(i);\n             \
    \   primes.Add(n / i);\n                return primes;\n            }\n      \
    \  }\n        return primes;", "        List<long> result = new List<long>();\n\
    \        if (n < 0)\n            return result;\n        if (n == 0)\n       \
    \     return result;\n        if (n == 1)\n            return result;\n      \
    \  if (n == 2) {\n            result.Add(2);\n            return result;\n   \
    \     }\n        if (n == 3) {\n            result.Add(2);\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n == 4) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            return result;\n\
    \        }\n        if (n == 5) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            return result;\n\
    \        }\n        if (n == 6) {\n            result.Add(2);\n            result.Add(3);\n\
    \            result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 7) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 8) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 9) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 10) {\n            result.Add(2);\n            result.Add(3);\n      \
    \      result.Add(5);\n            result", "        List<long> result = new List<long>();\n\
    \        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\"\
    );\n        }\n        if (n == 0) {\n            return result;\n        }\n\
    \        if (n == 1) {\n            result.Add(2);\n            return result;\n\
    \        }\n        for (long i = 2; i <= n; i++) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;\n    }\n\n    public static bool IsPrime(long n) {\n        if (n <\
    \ 2) {\n            return false;\n        }\n        if (n == 2) {\n        \
    \    return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n\
    \        }\n        long i = 3;\n        while (i * i <= n) {\n            if\
    \ (n % i == 0) {\n                return false;\n            }\n            i\
    \ += 2;\n        }\n        return true;", "        List<long> result = new List<long>();\n\
    \        if (n < 0)\n            return result;\n        if (n == 0)\n       \
    \     return result;\n        if (n == 1)\n            return result;\n      \
    \  if (n == 2)\n            result.Add(2);\n        if (n == 3)\n            result.Add(2);\n\
    \        if (n == 4)\n            result.Add(2);\n        if (n == 5)\n      \
    \      result.Add(2);\n        if (n == 6)\n            result.Add(2);\n     \
    \   if (n == 7)\n            result.Add(2);\n        if (n == 8)\n           \
    \ result.Add(2);\n        if (n == 9)\n            result.Add(2);\n        if\
    \ (n == 10)\n            result.Add(2);\n        if (n == 11)\n            result.Add(2);\n\
    \        if (n == 12)\n            result.Add(2);\n        if (n == 13)\n    \
    \        result.Add(2);\n        if (n == 14)\n            result.Add(2);\n  \
    \      if (n == 15)\n            result.Add(2);\n        if (n == 16)\n      \
    \      result.Add(2);\n        if (n == 17)\n            result.Add(2);\n    \
    \    if (n == 18)\n            result.Add(2);\n        if (n == 19)\n        \
    \    result.Add(2);\n        if (n == 20)\n            result.Add(2);\n      \
    \  if (n == 21)\n            result.Add(2);\n        if (n == 22)\n          \
    \  result.Add(2);\n        if (n == 23)\n            result.Add(2);\n        if\
    \ (n == 24)\n            result.Add(2);\n        if (n == 25)\n            result.Add(2);\n\
    \        if (n == 26)\n            result.Add(2);\n        if (n == 27)\n    \
    \        result.Add(2);\n        if (n == 28)\n            result.Add(2);\n  \
    \      if (n == 29)\n            result.Add(2);\n        if (n == 30)\n      \
    \      result.", "        List<long> result = new List<long>();\n        if (n\
    \ < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    );\n        }\n        if (n == 0) {\n            return result;\n        }\n\
    \        for (long i = 2; i <= n; i++) {\n            if (IsPrime(i)) {\n    \
    \            result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> primes = new List<long>();\n        if (n < 0) {\n         \
    \   throw new IllegalArgumentException(\"n must be non-negative\");\n        }\n\
    \        if (n == 0) {\n            return primes;\n        }\n        if (n ==\
    \ 1) {\n            return primes;\n        }\n        if (n == 2) {\n       \
    \     primes.Add(2);\n            return primes;\n        }\n        for (long\
    \ i = 3; i <= n; i++) {\n            if (IsPrime(i)) {\n                primes.Add(i);\n\
    \            }\n        }\n        return primes;", "        List<long> result\
    \ = new List<long>();\n        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"\
    n\");\n        }\n        if (n == 0) {\n            return result;\n        }\n\
    \        if (n == 1) {\n            result.Add(2);\n            return result;\n\
    \        }\n        long i = 2;\n        while (i <= n) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n            i++;\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n < 0)\n            return result;\n        if (n == 0)\n       \
    \     return result;\n        if (n == 1)\n            return result;\n      \
    \  if (n == 2)\n            return result;\n        if (n == 3)\n            return\
    \ result;\n        if (n == 4)\n            return result;\n        if (n == 5)\n\
    \            return result;\n        if (n == 6)\n            return result;\n\
    \        if (n == 7)\n            return result;\n        if (n == 8)\n      \
    \      return result;\n        if (n == 9)\n            return result;\n     \
    \   if (n == 10)\n            return result;\n        if (n == 11)\n         \
    \   return result;\n        if (n == 12)\n            return result;\n       \
    \ if (n == 13)\n            return result;\n        if (n == 14)\n           \
    \ return result;\n        if (n == 15)\n            return result;\n        if\
    \ (n == 16)\n            return result;\n        if (n == 17)\n            return\
    \ result;\n        if (n == 18)\n            return result;\n        if (n ==\
    \ 19)\n            return result;\n        if (n == 20)\n            return result;\n\
    \        if (n == 21)\n            return result;\n        if (n == 22)\n    \
    \        return result;\n        if (n == 23)\n            return result;\n  \
    \      if (n == 24)\n            return result;\n        if (n == 25)\n      \
    \      return result;\n        if (n == 26)\n            return result;\n    \
    \    if (n == 27)\n            return result;\n        if (n == 28)\n        \
    \    return result;\n        if (n == 29)\n            return result;\n      \
    \  if (n == 30)\n            return result;\n        if (n == 31)\n          \
    \  return result;\n        if (n == 32)\n            return result;\n        if\
    \ (n == 33)\n            return result;\n        if (n == 34)\n            return\
    \ result;\n        if (n == 35)\n            return result;\n        if (n ==\
    \ 36)\n            return result;\n        if (n", "        List<long> result\
    \ = new List<long>();\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\");\n        }\n        if (n == 0) {\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(2);\n    \
    \        return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(3);\n            return result;\n        }\n        if\
    \ (n == 3) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            return result;\n        }\n        if (n ==\
    \ 4) {\n            result.Add(2);\n            result.Add(3);\n            result.Add(5);\n\
    \            result.Add(7);\n            return result;\n        }\n        if\
    \ (n == 5) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add(5);\n            result.Add(7);\n            result.Add(11);\n\
    \            return result;\n        }\n        if (n == 6) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            return\
    \ result;\n        }\n        if (n == 7) {\n            result.Add(2);\n    \
    \        result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            return result;\n        }\n        if (n == 8) {\n            result.Add(2);\n\
    \            result.Add(3);\n            result.Add(5);\n            result.Add(7);\n\
    \            result.Add(11);\n            result.Add(13);\n            result.Add(17);\n\
    \            result.Add(19);\n            return result;\n        }\n        if\
    \ (n == 9) {\n            result.Add(2);\n            result.Add(3);\n       \
    \     result.Add", "        List<long> result = new List<long>();\n        if\
    \ (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\");\n     \
    \   }\n        if (n == 0) {\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(2);\n            return result;\n       \
    \ }\n        long i = 2;\n        while (i <= n) {\n            if (IsPrime(i))\
    \ {\n                result.Add(i);\n            }\n            i++;\n       \
    \ }\n        return result;", "        if (n < 0)\n            throw new IllegalArgumentException(\"\
    n must be non-negative\");\n        List<long> result = new List<long>();\n  \
    \      if (n == 0)\n            return result;\n        if (n == 1)\n        \
    \    return result;\n        if (n == 2) {\n            result.Add(2);\n     \
    \       return result;\n        }\n        long i = 3;\n        while (i <= n)\
    \ {\n            if (IsPrime(i)) {\n                result.Add(i);\n         \
    \       i += 2;\n            }\n            else {\n                i += 2;\n\
    \            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
