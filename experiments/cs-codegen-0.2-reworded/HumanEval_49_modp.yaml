name: HumanEval_49_modp
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> Modp((3L),\
  \ (5L))\n    // (3L)\n    // >>> Modp((1101L), (101L))\n    // (2L)\n    // >>>\
  \ Modp((0L), (101L))\n    // (1L)\n    // >>> Modp((3L), (11L))\n    // (8L)\n \
  \   // >>> Modp((100L), (101L))\n    // (1L)\n    public static long Modp(long n,\
  \ long p) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Modp((3L),\
  \ (5L)) == (3L));\n    Debug.Assert(Modp((1101L), (101L)) == (2L));\n    Debug.Assert(Modp((0L),\
  \ (101L)) == (1L));\n    Debug.Assert(Modp((3L), (11L)) == (8L));\n    Debug.Assert(Modp((100L),\
  \ (101L)) == (1L));\n    Debug.Assert(Modp((30L), (5L)) == (4L));\n    Debug.Assert(Modp((31L),\
  \ (5L)) == (3L));\n    }\n\n}\n"
completions: ["        return (n % p + p) % p;\n    }\n\n    // Return the greatest\
    \ common divisor of a and b.\n    // >>> Gcd(3L, 5L)\n    // 5\n    // >>> Gcd(3L,\
    \ 6L)\n    // 3\n    // >>> Gcd(3L, 0L)\n    // 3\n    // >>> Gcd(0L, 0L)\n  \
    \  // 0\n    // >>> Gcd(-3L, 0L)\n    // 3\n    // >>> Gcd(-3L, -6L)\n    // 6\n\
    \    public static long Gcd(long a, long b) {\n        if (a == 0) return b;\n\
    \        if (b == 0) return a;\n        if (a < 0) a = -a;\n        if (b < 0)\
    \ b = -b;\n        if (a < b) return Gcd(b, a);\n        long r = a % b;\n   \
    \     while (r != 0) {\n            a = b;\n            b = r;\n            r\
    \ = a % b;\n        }\n        return b;\n    }\n\n    // Return the least common\
    \ multiple of a and b.\n    // >>> Lcm(3L, 5L)\n    // 15\n    // >>> Lcm(3L,\
    \ 6L)\n    // 18\n    // >>> Lcm(3L, 0L)\n    // 0\n    // >>> Lcm(0L, 0L)\n \
    \   // 0\n    // >>> Lcm(-3L, 0L)\n    // 0\n    // >>> Lcm(-3L, -6L)\n    //\
    \ -18\n    public static long Lcm(long a, long b) {\n        return (a * b) /\
    \ Gcd(a, b);\n    }\n\n    // Return the sum of the squares of the numbers from\
    \ 1 to n.\n    // >>> SumOfSquares(10)\n    // 385\n    // >>> SumOfSquares(0)\n\
    \    // 0\n    public static long SumOfSquares(long n) {\n        long sum = 0;\n\
    \        for (long i = 1; i <= n; i++) {\n            sum += i * i;\n        }\n\
    \        return sum;", "        long r = n % p;\n        if (r == 0)\n       \
    \     return r;\n        else\n            return r + p;", "        long r = 1;\n\
    \        while (n > 0) {\n            if (n % 2 == 1) {\n                r = (r\
    \ * p) % p;\n            }\n            n >>= 1;\n            p = (p * p) % p;\n\
    \        }\n        return r;\n    }\n\n    // Return the greatest common divisor\
    \ of a and b.\n    // >>> Gcd(3L, 5L)\n    // (1L)\n    // >>> Gcd(5L, 10L)\n\
    \    // (5L)\n    // >>> Gcd(0L, 10L)\n    // (10L)\n    // >>> Gcd(3L, 11L)\n\
    \    // (1L)\n    // >>> Gcd(100L, 101L)\n    // (1L)\n    public static long\
    \ Gcd(long a, long b) {\n        while (b != 0) {\n            long t = b;\n \
    \           b = a % b;\n            a = t;\n        }\n        return a;\n   \
    \ }\n\n    // Return the least common multiple of a and b.\n    // >>> Lcm(3L,\
    \ 5L)\n    // (15L)\n    // >>> Lcm(5L, 10L)\n    // (25L)\n    // >>> Lcm(0L,\
    \ 10L)\n    // (0L)\n    // >>> Lcm(3L, 11L)\n    // (11L)\n    // >>> Lcm(100L,\
    \ 101L)\n    // (101L)\n    public static long Lcm(long a, long b) {\n       \
    \ return (a * b) / Gcd(a, b);\n    }\n\n    // Return the sum of the squares of\
    \ the first n natural numbers.\n    // >>> SumOfSquares(0)\n    // (0L)\n    //\
    \ >>> SumOfSquares(1)\n    // (1L)\n    // >>> SumOfSquares(2)\n    // (5L)\n\
    \    // >>> SumOfSquares(3)\n    // (14L)\n    // >>> SumOfSquares(4)\n    //\
    \ (30L)\n    public static long SumOfSquares(long n) {\n        long", "     \
    \   long result = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n\
    \                result = (result * p) % p;\n            }\n            n = n\
    \ / 2;\n            p = (p * p) % p;\n        }\n        return result;", "  \
    \      long result = 1;\n        while (n > 0) {\n            if ((n & 1) != 0)\
    \ {\n                result = (result * p) % p;\n            }\n            n\
    \ >>= 1;\n            p = (p * p) % p;\n        }\n        return result;\n  \
    \  }\n\n    // Return the greatest common divisor of a and b.\n    // >>> Gcd(5L,\
    \ 10L)\n    // (5L)\n    // >>> Gcd(5L, 15L)\n    // (5L)\n    // >>> Gcd(5L,\
    \ 25L)\n    // (5L)\n    // >>> Gcd(5L, 30L)\n    // (5L)\n    // >>> Gcd(5L,\
    \ 35L)\n    // (5L)\n    // >>> Gcd(5L, 40L)\n    // (5L)\n    // >>> Gcd(5L,\
    \ 45L)\n    // (5L)\n    // >>> Gcd(5L, 50L)\n    // (5L)\n    // >>> Gcd(5L,\
    \ 55L)\n    // (5L)\n    // >>> Gcd(5L, 60L)\n    // (5L)\n    // >>> Gcd(5L,\
    \ 65L)\n    // (5L)\n    // >>> Gcd(5L, 70L)\n    // (5L)\n    // >>> Gcd(5L,\
    \ 75L)\n    // (5L)\n    // >>> Gcd(5L, 80L)\n    // (5L)\n    // >>> Gcd(5L,\
    \ 85L)\n    // (5L)\n    // >>> Gcd(5L, 90L)\n    // (5L)\n    // >>> Gcd(5L,\
    \ 95L)\n    // (5L)\n    // >>> Gcd(5L, 100L)\n    // (5L)\n    // >>> Gcd(5L,\
    \ 105L)\n    // (5L)\n    // >>> Gcd(5L, 110L)\n    // (5L)\n    // >>> Gcd(5L,\
    \ 115L)\n    // (5L)\n    // >>> G", "        long result = 1;\n        while\
    \ (n > 0) {\n            if ((n & 1) != 0) {\n                result = (result\
    \ * p) % p;\n            }\n            n >>= 1;\n            p = (p * p) % p;\n\
    \        }\n        return result;", "        long r = n % p;\n        if (r <\
    \ 0) {\n            r += p;\n        }\n        return r;", "        long result\
    \ = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n             \
    \   result = (result * p) % p;\n            }\n            n /= 2;\n         \
    \   p = (p * p) % p;\n        }\n        return result;", "        long r = n\
    \ % p;\n        if (r < 0)\n            r += p;\n        return r;", "       \
    \ long r = n % p;\n        if (r < 0) {\n            r += p;\n        }\n    \
    \    return r;\n    }\n\n    // Return the greatest common divisor of a and b.\n\
    \    // >>> Gcd(3L, 5L)\n    // 5\n    // >>> Gcd(3L, 0L)\n    // 3\n    // >>>\
    \ Gcd(0L, 0L)\n    // 0\n    // >>> Gcd(0L, 1L)\n    // 1\n    // >>> Gcd(1L,\
    \ 0L)\n    // 1\n    // >>> Gcd(1L, 1L)\n    // 1\n    public static long Gcd(long\
    \ a, long b) {\n        if (a == 0L || b == 0L) {\n            return a + b;\n\
    \        }\n        while (b != 0L) {\n            long t = b;\n            b\
    \ = a % b;\n            a = t;\n        }\n        return a;\n    }\n\n    //\
    \ Return the least common multiple of a and b.\n    // >>> Lcm(3L, 5L)\n    //\
    \ 15\n    // >>> Lcm(3L, 0L)\n    // 0\n    // >>> Lcm(0L, 0L)\n    // 0\n   \
    \ // >>> Lcm(0L, 1L)\n    // 0\n    // >>> Lcm(1L, 0L)\n    // 0\n    // >>> Lcm(1L,\
    \ 1L)\n    // 1\n    public static long Lcm(long a, long b) {\n        return\
    \ (a * b) / Gcd(a, b);\n    }\n\n    // Return the greatest common divisor of\
    \ a and b.\n    // >>> Gcd(3L, 5L)\n    // 5\n    // >>> Gcd(3L, 0L)\n    // 3\n\
    \    // >>> Gcd(0L, 0L)\n    // 0\n    // >>> Gcd(0L, 1L)\n    // 1\n    // >>>\
    \ Gcd(1L, 0L)\n    // 1\n    // >>> Gcd(1L, 1L)\n    // 1\n    public static long\
    \ Gcd(long a, long b", "        long ret = 1;\n        while (n > 0) {\n     \
    \       if (n % 2 == 1) {\n                ret = (ret * p) % p;\n            }\n\
    \            n /= 2;\n            p = (p * p) % p;\n        }\n        return\
    \ ret;", '        return (n % p + p) % p;', "        long r = n % p;\n       \
    \ if (r < 0)\n            r += p;\n        return r;", "        long r = 1;\n\
    \        while (n > 0) {\n            if (n % 2 == 1) {\n                r = (r\
    \ * p) % p;\n            }\n            n /= 2;\n            p = (p * p) % p;\n\
    \        }\n        return r;", "        long r = n % p;\n        if (r < 0)\n\
    \            r += p;\n        return r;", "        return (n % p + p) % p;\n \
    \   }\n\n    // Return the greatest common divisor of a and b.\n    // >>> Gcd(5L,\
    \ 10L)\n    // (5L)\n    // >>> Gcd(5L, 0L)\n    // (1L)\n    // >>> Gcd(0L, 0L)\n\
    \    // (0L)\n    // >>> Gcd(0L, 5L)\n    // (5L)\n    // >>> Gcd(5L, 5L)\n  \
    \  // (5L)\n    public static long Gcd(long a, long b) {\n        return b ==\
    \ 0 ? a : Gcd(b, a % b);\n    }\n\n    // Return the least common multiple of\
    \ a and b.\n    // >>> Lcm(5L, 10L)\n    // (5L)\n    // >>> Lcm(5L, 0L)\n   \
    \ // (0L)\n    // >>> Lcm(0L, 0L)\n    // (0L)\n    // >>> Lcm(0L, 5L)\n    //\
    \ (0L)\n    // >>> Lcm(5L, 5L)\n    // (5L)\n    public static long Lcm(long a,\
    \ long b) {\n        return a * b / Gcd(a, b);\n    }\n\n    // Return the sum\
    \ of a and b.\n    // >>> Add(5L, 10L)\n    // (15L)\n    // >>> Add(5L, 0L)\n\
    \    // (5L)\n    // >>> Add(0L, 0L)\n    // (0L)\n    // >>> Add(0L, 5L)\n  \
    \  // (5L)\n    // >>> Add(5L, 5L)\n    // (10L)\n    public static long Add(long\
    \ a, long b) {\n        return a + b;\n    }\n\n    // Return the difference of\
    \ a and b.\n    // >>> Subtract(5L, 10L)\n    // (5L)\n    // >>> Subtract(5L,\
    \ 0L)\n    // (5L)\n    // >>> Subtract(0L, 0L)\n    // (", "        long r =\
    \ n % p;\n        if (r < 0) {\n            r += p;\n        }\n        return\
    \ r;", "        long r = n % p;\n        if (r == 0) {\n            return r;\n\
    \        }\n        return r + p;", "        long r = n % p;\n        if (r <\
    \ 0)\n            r += p;\n        return r;", '        return (n >= 0) ? (n %
    p) : ((p - (n % p)) % p);', "        return (n % p + p) % p;\n    }\n\n    //\
    \ Return the greatest common divisor of a and b.\n    // >>> Gcd(2L, 3L)\n   \
    \ // (1L)\n    // >>> Gcd(3L, 4L)\n    // (1L)\n    // >>> Gcd(5L, 6L)\n    //\
    \ (3L)\n    // >>> Gcd(0L, 0L)\n    // (0L)\n    // >>> Gcd(0L, 1L)\n    // (1L)\n\
    \    // >>> Gcd(1L, 0L)\n    // (1L)\n    // >>> Gcd(0L, -1L)\n    // (1L)\n \
    \   // >>> Gcd(-1L, 0L)\n    // (1L)\n    // >>> Gcd(-1L, -1L)\n    // (1L)\n\
    \    public static long Gcd(long a, long b) {\n        long r;\n        while\
    \ (b != 0) {\n            r = a % b;\n            a = b;\n            b = r;\n\
    \        }\n        return a;\n    }\n\n    // Return the least common multiple\
    \ of a and b.\n    // >>> Lcm(2L, 3L)\n    // (6L)\n    // >>> Lcm(3L, 4L)\n \
    \   // (12L)\n    // >>> Lcm(5L, 6L)\n    // (30L)\n    // >>> Lcm(0L, 0L)\n \
    \   // (0L)\n    // >>> Lcm(0L, 1L)\n    // (0L)\n    // >>> Lcm(1L, 0L)\n   \
    \ // (0L)\n    // >>> Lcm(0L, -1L)\n    // (0L)\n    // >>> Lcm(-1L, 0L)\n   \
    \ // (0L)\n    // >>> Lcm(-1L, -1L)\n    // (-1L)\n    public static long Lcm(long\
    \ a, long b) {\n        return (a * b) / Gcd(a, b);\n    }\n\n    // Return the\
    \ sum of the squares of the", "        return (n % p + p) % p;\n    }\n\n    //\
    \ Return the greatest common divisor of a and b.\n    // >>> Gcd(2L, 3L)\n   \
    \ // (1L)\n    // >>> Gcd(5L, 3L)\n    // (3L)\n    // >>> Gcd(5L, 0L)\n    //\
    \ (5L)\n    // >>> Gcd(0L, 0L)\n    // (0L)\n    public static long Gcd(long a,\
    \ long b) {\n        if (a == 0L || b == 0L)\n            return Math.Max(a, b);\n\
    \        if (a < 0L)\n            a = -a;\n        if (b < 0L)\n            b\
    \ = -b;\n        if (a < b)\n            return Gcd(b, a);\n        long r = a\
    \ % b;\n        while (r != 0L) {\n            a = b;\n            b = r;\n  \
    \          r = a % b;\n        }\n        return b;\n    }\n\n    // Return the\
    \ least common multiple of a and b.\n    // >>> Lcm(2L, 3L)\n    // (6L)\n   \
    \ // >>> Lcm(5L, 3L)\n    // (15L)\n    // >>> Lcm(5L, 0L)\n    // (0L)\n    //\
    \ >>> Lcm(0L, 0L)\n    // (0L)\n    public static long Lcm(long a, long b) {\n\
    \        return (a * b) / Gcd(a, b);\n    }\n\n    // Return the greatest common\
    \ divisor of a and b.\n    // >>> Gcd(2L, 3L)\n    // (1L)\n    // >>> Gcd(5L,\
    \ 3L)\n    // (3L)\n    // >>> Gcd(5L, 0L)\n    // (5L)\n    // >>> Gcd(0L, 0L)\n\
    \    // (0L)\n    public static long Gcd(long a, long b) {\n        if (a == 0L\
    \ || b == 0L)\n            return Math.Max(a, b);", "        long r = 1;\n   \
    \     while (n > 0) {\n            if (n % 2 == 1) {\n                r = (r *\
    \ p) % p;\n            }\n            n = n / 2;\n            p = (p * p) % p;\n\
    \        }\n        return r;", "        long result = 1;\n        while (n >\
    \ 0) {\n            if (n % 2 == 1) {\n                result = (result * p) %\
    \ p;\n            }\n            n /= 2;\n            p = (p * p) % p;\n     \
    \   }\n        return result;", "        long r = n % p;\n        if (r < 0) {\n\
    \            r += p;\n        }\n        return r;", "        long r = n % p;\n\
    \        if (r < 0) r += p;\n        return r;", "        long r = 1;\n      \
    \  while (n > 0) {\n            if (n % 2 == 1) {\n                r = (r * p)\
    \ % p;\n            }\n            n /= 2;\n            p = (p * p) % p;\n   \
    \     }\n        return r;", "        long r = n % p;\n        if (r < 0) {\n\
    \            r += p;\n        }\n        return r;", "        return (n >= 0)\
    \ ? (n % p) : ((n % p) + p);\n    }\n\n    // Return the greatest common divisor\
    \ of a and b.\n    // >>> Gcd(3L, 5L)\n    // 5L\n    // >>> Gcd(3L, 0L)\n   \
    \ // 3L\n    // >>> Gcd(0L, 0L)\n    // 0L\n    // >>> Gcd(3L, -5L)\n    // 5L\n\
    \    // >>> Gcd(-3L, 5L)\n    // 5L\n    // >>> Gcd(-3L, -5L)\n    // 5L\n   \
    \ // >>> Gcd(-3L, 0L)\n    // 3L\n    // >>> Gcd(-3L, -5L)\n    // 5L\n    //\
    \ >>> Gcd(3L, 5L)\n    // 5L\n    // >>> Gcd(3L, -5L)\n    // 5L\n    // >>> Gcd(-3L,\
    \ 5L)\n    // 5L\n    // >>> Gcd(-3L, -5L)\n    // 5L\n    // >>> Gcd(0L, 0L)\n\
    \    // 0L\n    public static long Gcd(long a, long b) {\n        if (a == 0)\
    \ return b;\n        if (b == 0) return a;\n        if (a < 0) a = -a;\n     \
    \   if (b < 0) b = -b;\n        while (a != b) {\n            if (a > b) a = a\
    \ - b;\n            else b = b - a;\n        }\n        return a;\n    }\n\n \
    \   // Return the least common multiple of a and b.\n    // >>> Lcm(3L, 5L)\n\
    \    // 15L\n    // >>> Lcm(3L, 0L)\n    // 0L\n    // >>> Lcm(0L, 0L)\n    //\
    \ 0L\n    // >>> Lcm(3L, -5L)\n    // -15L\n    // >>> Lcm(-3L, 5L)\n    // -15L\n\
    \    // >>> Lcm(-3L, -5L)\n    // -15L\n", "        long r = n % p;\n        if\
    \ (r < 0)\n            r += p;\n        return r;", "        long result = 1;\n\
    \        while (n > 0) {\n            if (n % 2 == 1) {\n                result\
    \ = (result * p) % p;\n            }\n            n /= 2;\n            p = (p\
    \ * p) % p;\n        }\n        return result;", "        long result = 1;\n \
    \       while (n > 0) {\n            if ((n & 1) != 0) {\n                result\
    \ = (result * p) % p;\n            }\n            n >>= 1;\n            p = (p\
    \ * p) % p;\n        }\n        return result;", '        return (n % p + p) %
    p;', '        return (n >= 0) ? (n % p) : (p - (-n % p) % p);', '        return
    (n >= 0) ? (n % p) : ((n + p) % p);', "        long r = n % p;\n        if (r\
    \ == 0)\n            return r;\n        return r + p;", "        long r = n %\
    \ p;\n        if (r < 0) {\n            r += p;\n        }\n        return r;\n\
    \    }\n\n    // Return the greatest common divisor of a and b.\n    // >>> Gcd(5L,\
    \ 3L)\n    // (3L)\n    // >>> Gcd(5L, 0L)\n    // (5L)\n    // >>> Gcd(0L, 0L)\n\
    \    // (0L)\n    // >>> Gcd(0L, 5L)\n    // (5L)\n    // >>> Gcd(5L, 5L)\n  \
    \  // (5L)\n    public static long Gcd(long a, long b) {\n        if (a == 0)\
    \ {\n            return b;\n        }\n        if (b == 0) {\n            return\
    \ a;\n        }\n        if (a < b) {\n            long t = a;\n            a\
    \ = b;\n            b = t;\n        }\n        while (b != 0) {\n            long\
    \ t = b;\n            b = a % b;\n            a = t;\n        }\n        return\
    \ a;\n    }\n\n    // Return the least common multiple of a and b.\n    // >>>\
    \ Lcm(5L, 3L)\n    // (15L)\n    // >>> Lcm(5L, 0L)\n    // (0L)\n    // >>> Lcm(0L,\
    \ 0L)\n    // (0L)\n    // >>> Lcm(0L, 5L)\n    // (0L)\n    // >>> Lcm(5L, 5L)\n\
    \    // (5L)\n    public static long Lcm(long a, long b) {\n        return (a\
    \ * b) / Gcd(a, b);\n    }\n\n    // Return the sum of the squares of the digits\
    \ of n.\n    // >>> SumOfSquares(123456789L)\n    // (14L)\n    // >>> SumOfSquares(0L)\n\
    \    // (0L)\n    // >>> SumOfSquares(-1L)\n    // (1L)\n    // >>> SumOfSquares(-123456789L)\n\
    \    // (1", "        long r = n % p;\n        if (r < 0)\n            r += p;\n\
    \        return r;", "        long ret = n % p;\n        if (ret < 0)\n      \
    \      ret += p;\n        return ret;", '        return (n % p + p) % p;', " \
    \       long result = 1;\n        while (n > 0) {\n            if ((n & 1) !=\
    \ 0) {\n                result = (result * p) % p;\n            }\n          \
    \  n >>= 1;\n            p = (p * p) % p;\n        }\n        return result;",
  "        long result = 1;\n        while (n > 0) {\n            if (n % 2 == 1)\
    \ {\n                result = (result * p) % p;\n            }\n            n\
    \ /= 2;\n            p = (p * p) % p;\n        }\n        return result;", " \
    \       return (n % p + p) % p;\n    }\n\n    // Return the greatest common divisor\
    \ of a and b.\n    // >>> Gcd(5L, 10L)\n    // (5L)\n    // >>> Gcd(5L, 0L)\n\
    \    // (1L)\n    // >>> Gcd(0L, 0L)\n    // (0L)\n    // >>> Gcd(5L, 5L)\n  \
    \  // (5L)\n    // >>> Gcd(10L, 5L)\n    // (5L)\n    // >>> Gcd(5L, 10L)\n  \
    \  // (5L)\n    public static long Gcd(long a, long b) {\n        if (a == 0)\
    \ return b;\n        if (b == 0) return a;\n        if (a < b) return Gcd(b, a);\n\
    \        long r = a % b;\n        if (r == 0) return b;\n        return Gcd(b,\
    \ r);\n    }\n\n    // Return the least common multiple of a and b.\n    // >>>\
    \ Lcm(5L, 10L)\n    // (10L)\n    // >>> Lcm(5L, 0L)\n    // (0L)\n    // >>>\
    \ Lcm(0L, 0L)\n    // (0L)\n    // >>> Lcm(5L, 5L)\n    // (5L)\n    // >>> Lcm(10L,\
    \ 5L)\n    // (10L)\n    // >>> Lcm(5L, 10L)\n    // (10L)\n    public static\
    \ long Lcm(long a, long b) {\n        return (a * b) / Gcd(a, b);\n    }\n\n \
    \   // Return the smallest positive integer that is greater than or equal to n.\n\
    \    // >>> NextPrime(0L)\n    // (1L)\n    // >>> NextPrime(1L)\n    // (2L)\n\
    \    // >>> NextPrime(2L)\n    // (3L)\n    // >>> NextPrime(3L)\n    // (5L)\n\
    \    // >>> NextPrime(4L)\n    // (5L)\n    // >>> NextPrime(", "        long\
    \ r = n % p;\n        if (r < 0)\n            r += p;\n        return r;", " \
    \       long r = n % p;\n        if (r < 0)\n            r += p;\n        return\
    \ r;", "        long result = 1;\n        while (n > 0) {\n            if (n %\
    \ 2 == 1) {\n                result = (result * p) % p;\n            }\n     \
    \       n /= 2;\n            p = (p * p) % p;\n        }\n        return result;",
  "        long r = n % p;\n        if (r < 0)\n            r += p;\n        return\
    \ r;", '        return (n % p + p) % p;', "        return (n % p + p) % p;\n \
    \   }\n\n    // Return the greatest common divisor of a and b.\n    // >>> Gcd(3L,\
    \ 5L)\n    // (1L)\n    // >>> Gcd(3L, 0L)\n    // (3L)\n    // >>> Gcd(0L, 0L)\n\
    \    // (0L)\n    // >>> Gcd(6L, 9L)\n    // (3L)\n    // >>> Gcd(6L, 0L)\n  \
    \  // (6L)\n    public static long Gcd(long a, long b) {\n        if (a == 0)\
    \ return b;\n        if (b == 0) return a;\n        if (a < b) {\n           \
    \ a = a ^ b;\n            b = a ^ b;\n            a = a ^ b;\n        }\n    \
    \    while (b != 0) {\n            a = a ^ b;\n            b = a ^ b;\n      \
    \      a = a ^ b;\n        }\n        return a;\n    }\n\n    // Return the least\
    \ common multiple of a and b.\n    // >>> Lcm(3L, 5L)\n    // (15L)\n    // >>>\
    \ Lcm(3L, 0L)\n    // (0L)\n    // >>> Lcm(0L, 0L)\n    // (0L)\n    // >>> Lcm(6L,\
    \ 9L)\n    // (18L)\n    // >>> Lcm(6L, 0L)\n    // (0L)\n    public static long\
    \ Lcm(long a, long b) {\n        return (a * b) / Gcd(a, b);\n    }\n\n    //\
    \ Return the greatest common divisor of a and b.\n    // >>> Gcd(3L, 5L)\n   \
    \ // (1L)\n    // >>> Gcd(3L, 0L)\n    // (3L)\n    // >>> Gcd(0L, 0L)\n    //\
    \ (0L)\n    // >>> Gcd(6L, 9L)\n    // (3L)\n    // >>> Gcd(6L, 0L)\n    // (6L)\n\
    \    public", '        return (n % p + p) % p;', '        return (n % p + p) %
    p;', "        long result = 1;\n        while (n > 0) {\n            if (n % 2\
    \ == 1) {\n                result = (result * p) % p;\n            }\n       \
    \     n /= 2;\n            p = (p * p) % p;\n        }\n        return result;",
  "        long r = n % p;\n        if (r < 0)\n            r += p;\n        return\
    \ r;", "        return (n % p + p) % p;\n    }\n\n    // Return the greatest common\
    \ divisor of a and b.\n    // >>> Gcd(5L, 10L)\n    // (5L)\n    // >>> Gcd(5L,\
    \ 0L)\n    // (1L)\n    // >>> Gcd(0L, 0L)\n    // (0L)\n    // >>> Gcd(5L, 5L)\n\
    \    // (5L)\n    // >>> Gcd(5L, -5L)\n    // (5L)\n    // >>> Gcd(-5L, 5L)\n\
    \    // (5L)\n    // >>> Gcd(-5L, -5L)\n    // (5L)\n    // >>> Gcd(5L, 5L)\n\
    \    // (5L)\n    // >>> Gcd(5L, -5L)\n    // (5L)\n    // >>> Gcd(-5L, 5L)\n\
    \    // (5L)\n    // >>> Gcd(-5L, -5L)\n    // (5L)\n    public static long Gcd(long\
    \ a, long b) {\n        if (a == 0L || b == 0L)\n            return a + b;\n \
    \       if (a < 0L)\n            a = -a;\n        if (b < 0L)\n            b =\
    \ -b;\n        if (a < b)\n            return Gcd(b, a);\n        long r = a;\n\
    \        while (r != b) {\n            r = a % b;\n            a = b;\n      \
    \      b = r;\n        }\n        return a;\n    }\n\n    // Return the least\
    \ common multiple of a and b.\n    // >>> Lcm(5L, 10L)\n    // (5L)\n    // >>>\
    \ Lcm(5L, 0L)\n    // (0L)\n    // >>> Lcm(0L, 0L)\n    // (0L)\n    // >>> Lcm(5L,\
    \ 5L)\n    // (5L)\n    // >>> Lcm(5L, -5L)\n    // (5L)\n    // >>> Lcm(-5L,\
    \ 5", "        long r = n % p;\n        if (r < 0)\n            r += p;\n    \
    \    return r;", "        long r = n % p;\n        if (r < 0)\n            r +=\
    \ p;\n        return r;", "        long r = n % p;\n        if (r < 0) r += p;\n\
    \        return r;", '        return (n % p + p) % p;', "        long r = n %\
    \ p;\n        if (r < 0)\n            r += p;\n        return r;", "        long\
    \ ret = n % p;\n        if (ret < 0)\n            ret += p;\n        return ret;",
  "        long r = n % p;\n        if (r < 0)\n            r += p;\n        return\
    \ r;", "        long r = n % p;\n        if (r < 0)\n            r += p;\n   \
    \     return r;", "        long result = 1;\n        while (n > 0) {\n       \
    \     if (n % 2 == 1) {\n                result = (result * p) % p;\n        \
    \    }\n            n = n / 2;\n            p = (p * p) % p;\n        }\n    \
    \    return result;", '        return (n % p + p) % p;', "        long r = n %\
    \ p;\n        if (r < 0)\n            r += p;\n        return r;", "        long\
    \ result = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n      \
    \          result = (result * p) % p;\n            }\n            n = n / 2;\n\
    \            p = (p * p) % p;\n        }\n        return result;\n    }\n\n  \
    \  // Return the greatest common divisor of a and b.\n    // >>> Gcd(5L, 3L)\n\
    \    // (1L)\n    // >>> Gcd(5L, 0L)\n    // (5L)\n    // >>> Gcd(0L, 0L)\n  \
    \  // (0L)\n    // >>> Gcd(0L, 5L)\n    // (5L)\n    // >>> Gcd(5L, 5L)\n    //\
    \ (5L)\n    public static long Gcd(long a, long b) {\n        if (a == 0) {\n\
    \            return b;\n        }\n        if (b == 0) {\n            return a;\n\
    \        }\n        while (a != b) {\n            if (a > b) {\n             \
    \   a = a - b;\n            } else {\n                b = b - a;\n           \
    \ }\n        }\n        return a;\n    }\n\n    // Return the least common multiple\
    \ of a and b.\n    // >>> Lcm(5L, 3L)\n    // (15L)\n    // >>> Lcm(5L, 0L)\n\
    \    // (0L)\n    // >>> Lcm(0L, 0L)\n    // (0L)\n    // >>> Lcm(0L, 5L)\n  \
    \  // (0L)\n    // >>> Lcm(5L, 5L)\n    // (5L)\n    public static long Lcm(long\
    \ a, long b) {\n        return (a * b) / Gcd(a, b);\n    }\n\n    // Return the\
    \ sum of the squares of the first n natural numbers.\n    // >>> SumOfSquares(0)\n\
    \    // (0L)\n    // >>> SumOfSquares(1)\n    // (1L)\n    // >>> SumOfSquares(2)\n\
    \    // (3L)\n    // >>> SumOf", "        long r = 1;\n        while (n > 0) {\n\
    \            if ((n & 1) != 0) {\n                r = (r * p) % p;\n         \
    \   }\n            n >>= 1;\n            p = (p * p) % p;\n        }\n       \
    \ return r;", "        return (n % p + p) % p;\n    }\n\n    // Return the greatest\
    \ common divisor of a and b.\n    // >>> Gcd(3L, 5L)\n    // (1L)\n    // >>>\
    \ Gcd(3L, 0L)\n    // (3L)\n    // >>> Gcd(0L, 0L)\n    // (0L)\n    // >>> Gcd(0L,\
    \ 3L)\n    // (3L)\n    // >>> Gcd(6L, 9L)\n    // (3L)\n    // >>> Gcd(6L, 0L)\n\
    \    // (6L)\n    public static long Gcd(long a, long b) {\n        if (a == 0)\
    \ return b;\n        if (b == 0) return a;\n        long r = a % b;\n        while\
    \ (r != 0) {\n            a = b;\n            b = r;\n            r = a % b;\n\
    \        }\n        return b;\n    }\n\n    // Return the least common multiple\
    \ of a and b.\n    // >>> Lcm(3L, 5L)\n    // (15L)\n    // >>> Lcm(3L, 0L)\n\
    \    // (0L)\n    // >>> Lcm(0L, 0L)\n    // (0L)\n    // >>> Lcm(0L, 3L)\n  \
    \  // (0L)\n    // >>> Lcm(6L, 9L)\n    // (18L)\n    // >>> Lcm(6L, 0L)\n   \
    \ // (0L)\n    public static long Lcm(long a, long b) {\n        return (a * b)\
    \ / Gcd(a, b);\n    }\n\n    // Return the greatest common divisor of a and b.\n\
    \    // >>> Gcd(3L, 5L)\n    // (1L)\n    // >>> Gcd(3L, 0L)\n    // (3L)\n  \
    \  // >>> Gcd(0L, 0L)\n    // (0L)\n    // >>> Gcd(0L, 3L)\n    // (3L)\n    //\
    \ >>> Gcd(6L, 9L)\n", "        long r = 1;\n        while (n > 0) {\n        \
    \    if (n % 2 == 1) {\n                r = (r * p) % p;\n            }\n    \
    \        n /= 2;\n            p = (p * p) % p;\n        }\n        return r;",
  "        long r = 1;\n        while (n > 0) {\n            if (n % 2 == 1)\n   \
    \             r = (r * p) % p;\n            n /= 2;\n            p = (p * p) %\
    \ p;\n        }\n        return r;", "        long r = 1;\n        while (n >\
    \ 0) {\n            if (n % 2 == 1) {\n                r = (r * p) % p;\n    \
    \        }\n            n /= 2;\n            p = (p * p) % p;\n        }\n   \
    \     return r;", '        return (n % p + p) % p;', "        long result = 1;\n\
    \        while (n > 0) {\n            if (n % 2 == 1) {\n                result\
    \ = (result * p) % p;\n            }\n            n /= 2;\n            p = (p\
    \ * p) % p;\n        }\n        return result;\n    }\n\n    // Return the greatest\
    \ common divisor of a and b.\n    // >>> Gcd(3L, 5L)\n    // (1L)\n    // >>>\
    \ Gcd(11L, 101L)\n    // (1L)\n    // >>> Gcd(0L, 101L)\n    // (1L)\n    // >>>\
    \ Gcd(3L, 11L)\n    // (1L)\n    // >>> Gcd(100L, 101L)\n    // (1L)\n    public\
    \ static long Gcd(long a, long b) {\n        long result = 1;\n        while (b\
    \ > 0) {\n            result = a % b;\n            a = b;\n            b = result;\n\
    \        }\n        return result;\n    }\n\n    // Return the least common multiple\
    \ of a and b.\n    // >>> Lcm(3L, 5L)\n    // (15L)\n    // >>> Lcm(11L, 101L)\n\
    \    // (101L)\n    // >>> Lcm(0L, 101L)\n    // (0L)\n    // >>> Lcm(3L, 11L)\n\
    \    // (11L)\n    // >>> Lcm(100L, 101L)\n    // (101L)\n    public static long\
    \ Lcm(long a, long b) {\n        return (a * b) / Gcd(a, b);\n    }\n\n    //\
    \ Return the sum of the digits of n.\n    // >>> SumDigits(123L)\n    // (3)\n\
    \    // >>> SumDigits(1234L)\n    // (4)\n    // >>> SumDigits(12345L)\n    //\
    \ (5)\n    // >>> SumDigits(123456L)\n    // (6)\n    // >>> SumDigits(1234567L)\n\
    \    // (7)\n    // >>> SumDigits(12345678L)\n    ", '        return (n % p +
    p) % p;', "        long r = n % p;\n        if (r < 0)\n            r += p;\n\
    \        return r;", '        return (n % p + p) % p;', '        return (n % p
    + p) % p;', "        long r = 1;\n        while (n > 0) {\n            if ((n\
    \ & 1) != 0) {\n                r = (r * p) % p;\n            }\n            n\
    \ >>= 1;\n            p = (p * p) % p;\n        }\n        return r;", "     \
    \   long r = n % p;\n        if (r == 0) return r;\n        return r + p;", " \
    \       long r = n % p;\n        if (r < 0)\n            r += p;\n        return\
    \ r;", "        return (n % p + p) % p;\n    }\n\n    // Return the greatest common\
    \ divisor of a and b.\n    // >>> Gcd(3L, 5L)\n    // (1L)\n    // >>> Gcd(3L,\
    \ 0L)\n    // (3L)\n    // >>> Gcd(0L, 0L)\n    // (0L)\n    // >>> Gcd(0L, 3L)\n\
    \    // (3L)\n    // >>> Gcd(3L, 3L)\n    // (3L)\n    public static long Gcd(long\
    \ a, long b) {\n        while (b != 0) {\n            long t = b;\n          \
    \  b = a % b;\n            a = t;\n        }\n        return a;\n    }\n\n   \
    \ // Return the least common multiple of a and b.\n    // >>> Lcm(3L, 5L)\n  \
    \  // (15L)\n    // >>> Lcm(3L, 0L)\n    // (0L)\n    // >>> Lcm(0L, 0L)\n   \
    \ // (0L)\n    // >>> Lcm(0L, 3L)\n    // (0L)\n    // >>> Lcm(3L, 3L)\n    //\
    \ (3L)\n    public static long Lcm(long a, long b) {\n        return (a * b) /\
    \ Gcd(a, b);\n    }\n\n    // Return the sum of a and b.\n    // >>> Add(3L, 5L)\n\
    \    // (8L)\n    // >>> Add(3L, 0L)\n    // (3L)\n    // >>> Add(0L, 0L)\n  \
    \  // (0L)\n    // >>> Add(0L, 3L)\n    // (3L)\n    // >>> Add(3L, 3L)\n    //\
    \ (6L)\n    public static long Add(long a, long b) {\n        return a + b;\n\
    \    }\n\n    // Return the product of a and b.\n    // >>> Multiply(3L, 5L)\n\
    \    // (15L)\n    // >>> Multiply(3L, 0L)\n    //", "        long r = n % p;\n\
    \        if (r < 0) {\n            r += p;\n        }\n        return r;", " \
    \       long result = 1;\n        while (n > 0) {\n            if (n % 2 == 1)\
    \ {\n                result = (result * p) % p;\n            }\n            n\
    \ /= 2;\n            p = (p * p) % p;\n        }\n        return result;", " \
    \       long result = n % p;\n        if (result < 0) {\n            result +=\
    \ p;\n        }\n        return result;", '        return (n % p + p) % p;', " \
    \       return (n % p + p) % p;\n    }\n\n    // Return the greatest common divisor\
    \ of a and b.\n    // >>> Gcd(2L, 3L)\n    // (1L)\n    // >>> Gcd(5L, 6L)\n \
    \   // (1L)\n    // >>> Gcd(0L, 0L)\n    // (0L)\n    // >>> Gcd(0L, 1L)\n   \
    \ // (1L)\n    // >>> Gcd(1L, 0L)\n    // (1L)\n    // >>> Gcd(1L, 1L)\n    //\
    \ (1L)\n    // >>> Gcd(2L, 4L)\n    // (2L)\n    // >>> Gcd(5L, 10L)\n    // (5L)\n\
    \    public static long Gcd(long a, long b) {\n        if (a == 0) return b;\n\
    \        if (b == 0) return a;\n        if (a < b) {\n            long temp =\
    \ a;\n            a = b;\n            b = temp;\n        }\n        while (b !=\
    \ 0) {\n            long temp = b;\n            b = a % b;\n            a = temp;\n\
    \        }\n        return a;\n    }\n\n    // Return the least common multiple\
    \ of a and b.\n    // >>> Lcm(2L, 3L)\n    // (6L)\n    // >>> Lcm(5L, 6L)\n \
    \   // (30L)\n    // >>> Lcm(0L, 0L)\n    // (0L)\n    // >>> Lcm(0L, 1L)\n  \
    \  // (0L)\n    // >>> Lcm(1L, 0L)\n    // (0L)\n    // >>> Lcm(1L, 1L)\n    //\
    \ (1L)\n    // >>> Lcm(2L, 4L)\n    // (8L)\n    // >>> Lcm(5L, 10L)\n    // (50L)\n\
    \    public static long Lcm(long a, long b) {\n        return (a * b) / Gcd(a,\
    \ b);\n    }\n\n    // Return the sum", '        return (n % p + p) % p;', " \
    \       long r = n % p;\n        if (r == 0)\n            return r;\n        return\
    \ r + p;", "        return (n % p + p) % p;\n    }\n\n    // Return the sum of\
    \ the squares of the digits of n.\n    // >>> SumOfSquares(12345)\n    // 30\n\
    \    // >>> SumOfSquares(123456789)\n    // 629\n    // >>> SumOfSquares(1234567890123456789)\n\
    \    // 9223372036854775807\n    // >>> SumOfSquares(12345678901234567890123456789)\n\
    \    // 9223372036854775807\n    // >>> SumOfSquares(123456789012345678901234567890123456789)\n\
    \    // 9223372036854775807\n    public static long SumOfSquares(long n) {\n \
    \       long sum = 0;\n        while (n > 0) {\n            sum += Math.pow(n\
    \ % 10, 2);\n            n /= 10;\n        }\n        return sum;\n    }\n\n \
    \   // Return the sum of the digits of n.\n    // >>> Sum(12345)\n    // 30\n\
    \    // >>> Sum(123456789)\n    // 629\n    // >>> Sum(1234567890123456789)\n\
    \    // 9223372036854775807\n    // >>> Sum(12345678901234567890123456789)\n \
    \   // 9223372036854775807\n    // >>> Sum(123456789012345678901234567890123456789)\n\
    \    // 9223372036854775807\n    public static long Sum(long n) {\n        long\
    \ sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n\
    \ /= 10;\n        }\n        return sum;\n    }\n\n    // Return the product of\
    \ the digits of n.\n    // >>> Product(12345)\n    // 30\n    // >>> Product(123456789)\n\
    \    // 629\n    // >>> Product(1234567890123456789)\n    // 9223372036854775807\n\
    \    // >>> Product(12345678901234567", "        long r = n % p;\n        if (r\
    \ < 0)\n            r += p;\n        return r;", '        return (n % p + p) %
    p;', '        return (n % p + p) % p;', "        long result = 1;\n        while\
    \ (n > 0) {\n            if (n % 2 == 1) {\n                result = (result *\
    \ p) % p;\n            }\n            n /= 2;\n            p = (p * p) % p;\n\
    \        }\n        return result;", "        long result = n % p;\n        if\
    \ (result < 0)\n            result += p;\n        return result;", "        long\
    \ r = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n           \
    \     r = (r * p) % p;\n            }\n            n /= 2;\n            p = (p\
    \ * p) % p;\n        }\n        return r;", "        long r = n % p;\n       \
    \ if (r == 0)\n            return r;\n        return r + p;", '        return
    (n % p + p) % p;', "        long r = n % p;\n        if (r == 0) {\n         \
    \   return r;\n        }\n        return r + p;", "        long r = n % p;\n \
    \       if (r < 0)\n            r += p;\n        return r;", "        long result\
    \ = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n             \
    \   result = (result * p) % p;\n            }\n            n = n / 2;\n      \
    \      p = (p * p) % p;\n        }\n        return result;", "        long r =\
    \ 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n               \
    \ r = (r * p) % p;\n            }\n            n /= 2;\n            p = (p * p)\
    \ % p;\n        }\n        return r;", "        long r = n % p;\n        if (r\
    \ < 0)\n            r += p;\n        return r;", "        return (n >= 0) ? (n\
    \ % p) : (p - ((-n) % p));\n    }\n\n    // Return the greatest common divisor\
    \ of a and b.\n    // >>> Gcd(5L, 3L)\n    // (3L)\n    // >>> Gcd(5L, 0L)\n \
    \   // (5L)\n    // >>> Gcd(0L, 0L)\n    // (0L)\n    // >>> Gcd(5L, -3L)\n  \
    \  // (1L)\n    // >>> Gcd(-5L, 3L)\n    // (1L)\n    // >>> Gcd(-5L, 0L)\n  \
    \  // (5L)\n    // >>> Gcd(-5L, -3L)\n    // (3L)\n    public static long Gcd(long\
    \ a, long b) {\n        return (b == 0) ? a : Gcd(b, a % b);\n    }\n\n    //\
    \ Return the least common multiple of a and b.\n    // >>> Lcm(5L, 3L)\n    //\
    \ (15L)\n    // >>> Lcm(5L, 0L)\n    // (5L)\n    // >>> Lcm(0L, 0L)\n    // (0L)\n\
    \    // >>> Lcm(5L, -3L)\n    // (-15L)\n    // >>> Lcm(-5L, 3L)\n    // (-15L)\n\
    \    // >>> Lcm(-5L, 0L)\n    // (5L)\n    // >>> Lcm(-5L, -3L)\n    // (-3L)\n\
    \    public static long Lcm(long a, long b) {\n        return (a * b) / Gcd(a,\
    \ b);\n    }\n\n    // Return the greatest common divisor of a and b.\n    //\
    \ >>> Gcd(5, 3)\n    // (3)\n    // >>> Gcd(5, 0)\n    // (5)\n    // >>> Gcd(0,\
    \ 0)\n    // (0)\n    // >>> Gcd(5, -3)\n    // (1)\n    // >>> Gcd(-5, 3)\n \
    \   // (1)", "        long result = 1;\n        while (n > 0) {\n            if\
    \ (n % 2 == 1) {\n                result = (result * p) % p;\n            }\n\
    \            n /= 2;\n            p = (p * p) % p;\n        }\n        return\
    \ result;", "        long r = n % p;\n        if (r < 0) {\n            r += p;\n\
    \        }\n        return r;", '        return (n % p + p) % p;', "        long\
    \ r = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n         \
    \       r = (r * p) % p;\n            }\n            n >>= 1;\n            p =\
    \ (p * p) % p;\n        }\n        return r;", '        return (n % p + p) % p;',
  "        long r = n % p;\n        if (r < 0) r += p;\n        return r;", "    \
    \    long r = n % p;\n        if (r < 0)\n            r += p;\n        return\
    \ r;", '        return (n >= 0) ? (n % p) : ((p - 1) - ((-1) - n) % p);', "  \
    \      long r = 1;\n        while (n > 0) {\n            if ((n & 1) != 0) {\n\
    \                r = (r * p) % p;\n            }\n            n >>= 1;\n     \
    \       p = (p * p) % p;\n        }\n        return r;", "        long r = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) != 0) {\n                r =\
    \ (r * p) % p;\n            }\n            n >>= 1;\n            p = (p * p) %\
    \ p;\n        }\n        return r;\n    }\n\n    // Return the greatest common\
    \ divisor of a and b.\n    // >>> Gcd(3L, 5L)\n    // (1L)\n    // >>> Gcd(6L,\
    \ 9L)\n    // (3L)\n    // >>> Gcd(0L, 9L)\n    // (9L)\n    // >>> Gcd(9L, 0L)\n\
    \    // (9L)\n    // >>> Gcd(9L, 9L)\n    // (9L)\n    public static long Gcd(long\
    \ a, long b) {\n        if (a == 0) {\n            return b;\n        }\n    \
    \    if (b == 0) {\n            return a;\n        }\n        while (a != b) {\n\
    \            if (a > b) {\n                a = a - b;\n            } else {\n\
    \                b = b - a;\n            }\n        }\n        return a;\n   \
    \ }\n\n    // Return the least common multiple of a and b.\n    // >>> Lcm(3L,\
    \ 5L)\n    // (15L)\n    // >>> Lcm(6L, 9L)\n    // (18L)\n    // >>> Lcm(0L,\
    \ 9L)\n    // (0L)\n    // >>> Lcm(9L, 0L)\n    // (0L)\n    // >>> Lcm(9L, 9L)\n\
    \    // (9L)\n    public static long Lcm(long a, long b) {\n        return (a\
    \ * b) / Gcd(a, b);\n    }\n\n    // Return the sum of a and b.\n    // >>> Add(3L,\
    \ 5L)\n    // (8L)\n    // >>> Add(6L, 9L)\n    // (15L)\n    // >>> Add(0L, 9L)\n\
    \    // (9L)\n    // >>> Add(9L", '        return (n % p + p) % p;', "       \
    \ long result = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n \
    \               result = (result * p) % p;\n            }\n            n /= 2;\n\
    \            p = (p * p) % p;\n        }\n        return result;\n    }\n\n  \
    \  // Return the greatest common divisor of a and b.\n    // >>> Gcd(5L, 10L)\n\
    \    // (5L)\n    // >>> Gcd(5L, 15L)\n    // (5L)\n    // >>> Gcd(5L, 0L)\n \
    \   // (5L)\n    // >>> Gcd(0L, 0L)\n    // (0L)\n    // >>> Gcd(0L, 5L)\n   \
    \ // (5L)\n    // >>> Gcd(5L, 5L)\n    // (5L)\n    public static long Gcd(long\
    \ a, long b) {\n        if (a == 0) {\n            return b;\n        }\n    \
    \    if (b == 0) {\n            return a;\n        }\n        while (a != b) {\n\
    \            if (a > b) {\n                a = a - b;\n            } else {\n\
    \                b = b - a;\n            }\n        }\n        return a;\n   \
    \ }\n\n    // Return the least common multiple of a and b.\n    // >>> Lcm(5L,\
    \ 10L)\n    // (50L)\n    // >>> Lcm(5L, 15L)\n    // (75L)\n    // >>> Lcm(5L,\
    \ 0L)\n    // (0L)\n    // >>> Lcm(0L, 0L)\n    // (0L)\n    // >>> Lcm(0L, 5L)\n\
    \    // (0L)\n    // >>> Lcm(5L, 5L)\n    // (5L)\n    public static long Lcm(long\
    \ a, long b) {\n        return (a * b) / Gcd(a, b);\n    }\n\n    // Return the\
    \ sum of the squares of the first n natural numbers.\n    // >>> SumOfSquares(0)\n\
    \    // (0L)\n    //", '        return (n >= 0) ? (n % p) : ((n % p) + p);', '        return
    (n % p + p) % p;', '        return (n % p + p) % p;', '        return (n % p +
    p) % p;', "        long r = n % p;\n        if (r == 0) return r;\n        return\
    \ r + p;", "        long r = 1;\n        while (n > 0) {\n            if (n %\
    \ 2 == 1) {\n                r = (r * p) % p;\n            }\n            n /=\
    \ 2;\n        }\n        return r;", "        long r = n % p;\n        if (r <\
    \ 0)\n            r += p;\n        return r;", "        long r = n % p;\n    \
    \    if (r < 0)\n            r += p;\n        return r;", "        long r = n\
    \ % p;\n        if (r == 0)\n            return r;\n        return r + p;\n  \
    \  }\n\n    // Return the greatest common divisor of a and b.\n    // >>> Gcd(2L,\
    \ 3L)\n    // (1L)\n    // >>> Gcd(5L, 6L)\n    // (1L)\n    // >>> Gcd(0L, 6L)\n\
    \    // (6L)\n    // >>> Gcd(0L, 0L)\n    // (0L)\n    // >>> Gcd(0L, -6L)\n \
    \   // (-6L)\n    // >>> Gcd(-5L, 0L)\n    // (5L)\n    // >>> Gcd(-5L, 6L)\n\
    \    // (1L)\n    // >>> Gcd(-5L, -6L)\n    // (1L)\n    public static long Gcd(long\
    \ a, long b) {\n        if (a == 0)\n            return b;\n        if (b == 0)\n\
    \            return a;\n        if (a < 0)\n            a = -a;\n        if (b\
    \ < 0)\n            b = -b;\n        if (a < b)\n            return Gcd(b, a);\n\
    \        long r = a % b;\n        if (r == 0)\n            return b;\n       \
    \ return Gcd(b, r);\n    }\n\n    // Return the least common multiple of a and\
    \ b.\n    // >>> Lcm(2L, 3L)\n    // (6L)\n    // >>> Lcm(5L, 6L)\n    // (30L)\n\
    \    // >>> Lcm(0L, 6L)\n    // (0L)\n    // >>> Lcm(0L, 0L)\n    // (0L)\n  \
    \  // >>> Lcm(0L, -6L)\n    // (-6L)\n    // >>> Lcm(-5L, 0L)\n    // (0L)\n \
    \   // >>> Lcm(-5L, 6L)\n    // (-30L)\n    // >>> Lcm(-5L, -6L)\n    // (-30L)\n\
    \    public static long", '        return (n >= 0) ? (n % p) : ((n % p) + p);',
  "        long r = n % p;\n        if (r == 0) return r;\n        return r + p;",
  "        long result = 1;\n        while (n > 0) {\n            if (n % 2 == 1)\
    \ {\n                result = (result * p) % p;\n            }\n            n\
    \ /= 2;\n            p = (p * p) % p;\n        }\n        return result;", " \
    \       long r = n % p;\n        if (r < 0)\n            r += p;\n        return\
    \ r;", '        return (n % p + p) % p;', "        long r = n % p;\n        if\
    \ (r < 0) {\n            r += p;\n        }\n        return r;", '        return
    (n % p + p) % p;', "        long result = n % p;\n        if (result < 0)\n  \
    \          result += p;\n        return result;", '        return (n % p + p)
    % p;', "        long r = n % p;\n        if (r < 0)\n            r += p;\n   \
    \     return r;", "        return (n % p + p) % p;\n    }\n\n    // Return the\
    \ greatest common divisor of a and b.\n    // >>> Gcd(3L, 5L)\n    // (1L)\n \
    \   // >>> Gcd(5L, 3L)\n    // (1L)\n    // >>> Gcd(3L, 0L)\n    // (3L)\n   \
    \ // >>> Gcd(0L, 0L)\n    // (0L)\n    // >>> Gcd(0L, 3L)\n    // (3L)\n    //\
    \ >>> Gcd(3L, 3L)\n    // (3L)\n    public static long Gcd(long a, long b) {\n\
    \        if (a == 0L || b == 0L)\n            return Math.Max(a, b);\n       \
    \ while (a != b) {\n            if (a > b)\n                a = a - b;\n     \
    \       else\n                b = b - a;\n        }\n        return a;\n    }\n\
    \n    // Return the least common multiple of a and b.\n    // >>> Lcm(3L, 5L)\n\
    \    // (15L)\n    // >>> Lcm(5L, 3L)\n    // (15L)\n    // >>> Lcm(3L, 0L)\n\
    \    // (0L)\n    // >>> Lcm(0L, 0L)\n    // (0L)\n    // >>> Lcm(0L, 3L)\n  \
    \  // (0L)\n    // >>> Lcm(3L, 3L)\n    // (3L)\n    public static long Lcm(long\
    \ a, long b) {\n        return (a * b) / Gcd(a, b);\n    }\n\n    // Return the\
    \ sum of the squares of the digits of n.\n    // >>> SumOfSquares(123456789L)\n\
    \    // (14L)\n    // >>> SumOfSquares(0L)\n    // (0L)\n    // >>> SumOfSquares(-1L)\n\
    \    // (1L)\n    public static long SumOfSquares(long n) {\n        long sum\
    \ = 0L;\n        while (n != 0L) {\n", "        long r = n % p;\n        if (r\
    \ < 0)\n            r += p;\n        return r;", "        long result = 1;\n \
    \       while (n > 0) {\n            if (n % 2 == 1) {\n                result\
    \ = (result * p) % p;\n            }\n            n /= 2;\n            p = (p\
    \ * p) % p;\n        }\n        return result;", "        long r = n % p;\n  \
    \      if (r == 0)\n            return r;\n        return r + p;", "        long\
    \ r = n % p;\n        if (r < 0)\n            r += p;\n        return r;", " \
    \       long r = n % p;\n        if (r < 0)\n            r += p;\n        return\
    \ r;", "        long r = 1;\n        while (n > 0) {\n            if (n % 2 ==\
    \ 1) {\n                r = (r * p) % p;\n            }\n            n /= 2;\n\
    \            p = (p * p) % p;\n        }\n        return r;", "        long r\
    \ = 1;\n        while (n > 0) {\n            if (n % 2 == 1)\n               \
    \ r = (r * p) % p;\n            n >>= 1;\n        }\n        return r;", "   \
    \     long r = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n  \
    \              r = (r * p) % p;\n            }\n            n /= 2;\n        \
    \    p = (p * p) % p;\n        }\n        return r;\n    }\n\n    // Return the\
    \ sum of all the numbers in the array.\n    // >>> Sum([1, 2, 3, 4, 5])\n    //\
    \ 15\n    // >>> Sum([])\n    // 0\n    // >>> Sum([1, 2, 3, 4, 5], [])\n    //\
    \ 0\n    // >>> Sum([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n    // 30\n    // >>> Sum([1,\
    \ 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n    // 60\n    public static\
    \ long Sum(IEnumerable<long> numbers, IEnumerable<long> otherNumbers) {\n    \
    \    long sum = 0;\n        foreach (long number in numbers) {\n            sum\
    \ += number;\n        }\n        foreach (long number in otherNumbers) {\n   \
    \         sum += number;\n        }\n        return sum;\n    }\n\n    // Return\
    \ the product of all the numbers in the array.\n    // >>> Product([1, 2, 3, 4,\
    \ 5])\n    // 120\n    // >>> Product([])\n    // 1\n    // >>> Product([1, 2,\
    \ 3, 4, 5], [])\n    // 1\n    // >>> Product([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n\
    \    // 720\n    // >>> Product([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4,\
    \ 5])\n    // 4320\n    public static long Product(IEnumerable<long> numbers,\
    \ IEnumerable<long> otherNumbers) {\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            product *= number;\n        }\n    \
    \    foreach (long number in otherNumbers) {\n            product *= number;\n\
    \        }\n        return product", "        long r = n % p;\n        if (r <\
    \ 0)\n            r += p;\n        return r;", "        long r = n % p;\n    \
    \    if (r < 0)\n            r += p;\n        return r;\n    }\n\n    // Return\
    \ the greatest common divisor of a and b.\n    // >>> Gcd(2L, 3L)\n    // (1L)\n\
    \    // >>> Gcd(3L, 4L)\n    // (1L)\n    // >>> Gcd(4L, 6L)\n    // (2L)\n  \
    \  // >>> Gcd(6L, 8L)\n    // (2L)\n    // >>> Gcd(8L, 12L)\n    // (4L)\n   \
    \ // >>> Gcd(12L, 16L)\n    // (4L)\n    // >>> Gcd(16L, 24L)\n    // (4L)\n \
    \   // >>> Gcd(24L, 32L)\n    // (8L)\n    // >>> Gcd(32L, 48L)\n    // (8L)\n\
    \    // >>> Gcd(48L, 64L)\n    // (8L)\n    // >>> Gcd(64L, 96L)\n    // (8L)\n\
    \    // >>> Gcd(96L, 128L)\n    // (16L)\n    // >>> Gcd(128L, 256L)\n    // (16L)\n\
    \    // >>> Gcd(256L, 512L)\n    // (16L)\n    // >>> Gcd(512L, 1024L)\n    //\
    \ (512L)\n    // >>> Gcd(1024L, 2048L)\n    // (1024L)\n    // >>> Gcd(2048L,\
    \ 4096L)\n    // (2048L)\n    // >>> Gcd(4096L, 8192L)\n    // (4096L)\n    //\
    \ >>> Gcd(8192L, 16384L)\n    // (8192L)\n    // >>> Gcd(16384L, 32768L)\n   \
    \ // (16384L)\n    // >>> Gcd(32768L, 65536L)\n    // (32768L)\n    // >>> Gcd(65536L,\
    \ 131072L)\n    // (65536L)\n    // >>> Gcd(1310", '        return (n % p + p)
    % p;', "        long r = 1;\n        while (n > 0) {\n            if (n % 2 ==\
    \ 1) {\n                r = (r * p) % p;\n            }\n            n /= 2;\n\
    \            p = (p * p) % p;\n        }\n        return r;", '        return
    (n % p + p) % p;', '        return (n >= 0) ? (n % p) : ((p - (-n % p)) % p);',
  "        long result = 1;\n        while (n > 0) {\n            if (n % 2 == 1)\
    \ {\n                result = (result * p) % p;\n            }\n            n\
    \ /= 2;\n            p = (p * p) % p;\n        }\n        return result;", '        return
    (n >= 0) ? (n % p) : ((p - (n % p)) % p);', "        long r = n % p;\n       \
    \ if (r < 0)\n            r += p;\n        return r;", "        long r = 1;\n\
    \        while (n > 0) {\n            if (n % 2 == 1)\n                r = (r\
    \ * p) % p;\n            n /= 2;\n            p = (p * p) % p;\n        }\n  \
    \      return r;", "        return (n % p + p) % p;\n    }\n\n    // Return the\
    \ greatest common divisor of a and b.\n    // >>> Gcd(3L, 5L)\n    // (1L)\n \
    \   // >>> Gcd(3L, 6L)\n    // (3L)\n    // >>> Gcd(3L, 9L)\n    // (3L)\n   \
    \ // >>> Gcd(3L, 0L)\n    // (3L)\n    // >>> Gcd(0L, 0L)\n    // (0L)\n    //\
    \ >>> Gcd(0L, 1L)\n    // (1L)\n    // >>> Gcd(0L, -1L)\n    // (1L)\n    // >>>\
    \ Gcd(-1L, 0L)\n    // (1L)\n    // >>> Gcd(-1L, 1L)\n    // (1L)\n    // >>>\
    \ Gcd(-1L, -1L)\n    // (1L)\n    public static long Gcd(long a, long b) {\n \
    \       if (a == 0L || b == 0L)\n            return Math.Max(a, b);\n        if\
    \ (a < 0L)\n            a = -a;\n        if (b < 0L)\n            b = -b;\n  \
    \      if (a < b)\n            return Gcd(b, a);\n        if (a == b)\n      \
    \      return a;\n        return Gcd(a % b, b);\n    }\n\n    // Return the least\
    \ common multiple of a and b.\n    // >>> Lcm(3L, 5L)\n    // (15L)\n    // >>>\
    \ Lcm(3L, 6L)\n    // (18L)\n    // >>> Lcm(3L, 9L)\n    // (9L)\n    // >>> Lcm(3L,\
    \ 0L)\n    // (0L)\n    // >>> Lcm(0L, 0L)\n    // (0L)\n    // >>> Lcm(0L, 1L)\n\
    \    // (0L)\n    // >>> Lcm(0L, -1L)\n    // (0L)\n    // >>> Lcm(-1", "    \
    \    long r = 1;\n        while (n > 0) {\n            if (n % 2 == 1)\n     \
    \           r = (r * p) % p;\n            n /= 2;\n        }\n        return r;",
  "        long r = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n \
    \               r = (r * p) % p;\n            }\n            n /= 2;\n       \
    \     p = (p * p) % p;\n        }\n        return r;", '        return (n % p
    + p) % p;', "        long result = 1;\n        while (n > 0) {\n            if\
    \ ((n & 1) != 0) {\n                result = (result * p) % p;\n            }\n\
    \            n >>= 1;\n            p = (p * p) % p;\n        }\n        return\
    \ result;", "        long ret = 1;\n        while (n > 0) {\n            if ((n\
    \ & 1) > 0) {\n                ret = (ret * p) % p;\n            }\n         \
    \   n >>= 1;\n            p = (p * p) % p;\n        }\n        return ret;", " \
    \       long r = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n\
    \                r = (r * p) % p;\n            }\n            n /= 2;\n      \
    \      p = (p * p) % p;\n        }\n        return r;", '        return (n % p
    + p) % p;', '        return (n % p + p) % p;', "        long r = 1;\n        while\
    \ (n > 0) {\n            if (n % 2 == 1) {\n                r = (r * p) % p;\n\
    \            }\n            n /= 2;\n            p = (p * p) % p;\n        }\n\
    \        return r;", "        long r = n % p;\n        if (r < 0)\n          \
    \  r += p;\n        return r;\n    }\n\n    // Return the greatest common divisor\
    \ of a and b.\n    // >>> Gcd(3L, 5L)\n    // (1L)\n    // >>> Gcd(3L, 0L)\n \
    \   // (3L)\n    // >>> Gcd(0L, 0L)\n    // (0L)\n    // >>> Gcd(6L, 9L)\n   \
    \ // (3L)\n    // >>> Gcd(6L, 0L)\n    // (6L)\n    public static long Gcd(long\
    \ a, long b) {\n        if (a == 0)\n            return b;\n        if (b == 0)\n\
    \            return a;\n        if (a < b)\n            a, b = b, a;\n       \
    \ while (b != 0) {\n            long r = a % b;\n            a = b;\n        \
    \    b = r;\n        }\n        return a;\n    }\n\n    // Return the least common\
    \ multiple of a and b.\n    // >>> Lcm(3L, 5L)\n    // (15L)\n    // >>> Lcm(3L,\
    \ 0L)\n    // (0L)\n    // >>> Lcm(0L, 0L)\n    // (0L)\n    // >>> Lcm(6L, 9L)\n\
    \    // (18L)\n    // >>> Lcm(6L, 0L)\n    // (0L)\n    public static long Lcm(long\
    \ a, long b) {\n        return (a * b) / Gcd(a, b);\n    }\n\n    // Return the\
    \ sum of the squares of the digits of n.\n    // >>> SumOfSquares(123456789L)\n\
    \    // (1230L)\n    // >>> SumOfSquares(0L)\n    // (0L)\n    public static long\
    \ SumOfSquares(long n) {\n        long sum = 0;\n        while (n != 0) {\n  \
    \          sum += Math.Pow(n % 10, 2);\n            n /= 10;\n        }\n    \
    \    return sum;\n    }", '        return (n % p + p) % p;', "        long r =\
    \ 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n               \
    \ r = (r * p) % p;\n            }\n            n /= 2;\n            p = (p * p)\
    \ % p;\n        }\n        return r;", "        long r = 1;\n        while (n\
    \ > 0) {\n            if (n % 2 == 1) {\n                r = (r * p) % p;\n  \
    \          }\n            n /= 2;\n            p = (p * p) % p;\n        }\n \
    \       return r;", "        long r = n % p;\n        if (r < 0)\n           \
    \ r += p;\n        return r;", "        long r = 1;\n        while (n > 0) {\n\
    \            if (n % 2 == 1) {\n                r = (r * p) % p;\n           \
    \ }\n            n /= 2;\n            p = (p * p) % p;\n        }\n        return\
    \ r;\n    }\n\n    // Return the greatest common divisor of a and b.\n    // >>>\
    \ Gcd(5L, 10L)\n    // (5L)\n    // >>> Gcd(5L, 15L)\n    // (5L)\n    // >>>\
    \ Gcd(5L, 25L)\n    // (5L)\n    // >>> Gcd(0L, 5L)\n    // (5L)\n    // >>> Gcd(0L,\
    \ 0L)\n    // (0L)\n    // >>> Gcd(5L, 0L)\n    // (0L)\n    // >>> Gcd(0L, 0L)\n\
    \    // (0L)\n    public static long Gcd(long a, long b) {\n        if (a == 0)\
    \ {\n            return b;\n        }\n        if (b == 0) {\n            return\
    \ a;\n        }\n        while (a != b) {\n            if (a > b) {\n        \
    \        a = a - b;\n            } else {\n                b = b - a;\n      \
    \      }\n        }\n        return a;\n    }\n\n    // Return the least common\
    \ multiple of a and b.\n    // >>> Lcm(5L, 10L)\n    // (50L)\n    // >>> Lcm(5L,\
    \ 15L)\n    // (75L)\n    // >>> Lcm(5L, 25L)\n    // (25L)\n    // >>> Lcm(0L,\
    \ 5L)\n    // (0L)\n    // >>> Lcm(0L, 0L)\n    // (0L)\n    // >>> Lcm(5L, 0L)\n\
    \    // (0L)\n    // >>> Lcm(0L, 0L)\n    // (0L)\n    public static long Lcm(long\
    \ a, long b) {\n        return (a * b) / Gcd(a, b);", "        long r = n % p;\n\
    \        if (r < 0)\n            r += p;\n        return r;", "        long r\
    \ = n % p;\n        if (r < 0)\n            r += p;\n        return r;", "   \
    \     long r = n % p;\n        if (r < 0)\n            r += p;\n        return\
    \ r;\n    }\n\n    // Return the greatest common divisor of a and b.\n    // >>>\
    \ Gcd(5L, 3L)\n    // (3L)\n    // >>> Gcd(5L, 0L)\n    // (5L)\n    // >>> Gcd(0L,\
    \ 0L)\n    // (0L)\n    // >>> Gcd(0L, 5L)\n    // (5L)\n    // >>> Gcd(5L, 5L)\n\
    \    // (5L)\n    public static long Gcd(long a, long b) {\n        if (a == 0\
    \ || b == 0)\n            return Math.Max(a, b);\n        while (b != 0) {\n \
    \           long t = b;\n            b = a % b;\n            a = t;\n        }\n\
    \        return a;\n    }\n\n    // Return the least common multiple of a and\
    \ b.\n    // >>> Lcm(5L, 3L)\n    // (15L)\n    // >>> Lcm(5L, 0L)\n    // (5L)\n\
    \    // >>> Lcm(0L, 0L)\n    // (0L)\n    // >>> Lcm(0L, 5L)\n    // (0L)\n  \
    \  // >>> Lcm(5L, 5L)\n    // (5L)\n    public static long Lcm(long a, long b)\
    \ {\n        return (a * b) / Gcd(a, b);\n    }\n\n    // Return the sum of the\
    \ squares of the first n natural numbers.\n    // >>> SumOfSquares(0)\n    //\
    \ (0L)\n    // >>> SumOfSquares(1)\n    // (1L)\n    // >>> SumOfSquares(2)\n\
    \    // (5L)\n    // >>> SumOfSquares(3)\n    // (14L)\n    // >>> SumOfSquares(4)\n\
    \    // (30L)\n    public static long SumOfSquares(long n) {\n        long sum\
    \ = 0;\n        for (long i = 1; i <= n; i", '        return (n >= 0) ? (n % p)
    : ((n % p) + p);', "        long r = 1;\n        while (n > 0) {\n           \
    \ if (n % 2 == 1) {\n                r = (r * p) % p;\n            }\n       \
    \     n /= 2;\n            p = (p * p) % p;\n        }\n        return r;", '        return
    (n % p + p) % p;', "        long r = n % p;\n        if (r < 0)\n            r\
    \ += p;\n        return r;", "        long r = 1;\n        while (n > 0) {\n \
    \           if ((n & 1) != 0) {\n                r = (r * p) % p;\n          \
    \  }\n            n >>= 1;\n            p = (p * p) % p;\n        }\n        return\
    \ r;", "        long r = n % p;\n        if (r < 0)\n            r += p;\n   \
    \     return r;", "        long r = 1;\n        while (n > 0) {\n            if\
    \ (n % 2 == 1) {\n                r = (r * p) % p;\n            }\n          \
    \  n /= 2;\n            p = (p * p) % p;\n        }\n        return r;", "   \
    \     long r = 1;\n        while (n > 0) {\n            if ((n & 1) != 0) {\n\
    \                r = (r * p) % p;\n            }\n            n >>= 1;\n     \
    \       p = (p * p) % p;\n        }\n        return r;\n    }\n\n    // Return\
    \ the greatest common divisor of a and b.\n    // >>> Gcd(5L, 3L)\n    // (3L)\n\
    \    // >>> Gcd(5L, 0L)\n    // (5L)\n    // >>> Gcd(0L, 0L)\n    // (0L)\n  \
    \  // >>> Gcd(0L, 5L)\n    // (5L)\n    // >>> Gcd(5L, 5L)\n    // (5L)\n    public\
    \ static long Gcd(long a, long b) {\n        while (b != 0) {\n            long\
    \ t = b;\n            b = a % b;\n            a = t;\n        }\n        return\
    \ a;\n    }\n\n    // Return the least common multiple of a and b.\n    // >>>\
    \ Lcm(5L, 3L)\n    // (15L)\n    // >>> Lcm(5L, 0L)\n    // (5L)\n    // >>> Lcm(0L,\
    \ 0L)\n    // (0L)\n    // >>> Lcm(0L, 5L)\n    // (0L)\n    // >>> Lcm(5L, 5L)\n\
    \    // (5L)\n    public static long Lcm(long a, long b) {\n        return (a\
    \ * b) / Gcd(a, b);\n    }\n\n    // Return the greatest common divisor of a and\
    \ b.\n    // >>> Gcd(5L, 3L)\n    // (3L)\n    // >>> Gcd(5L, 0L)\n    // (5L)\n\
    \    // >>> Gcd(0L, 0L)\n    // (0L)\n    // >>> Gcd(0L, 5L)\n    // (5L)\n  \
    \  // >>> Gcd(5L, 5L)\n    // (5L)\n    public static long Gcd", "        return\
    \ (n >= 0) ? (n % p) : (p - (-n) % p);\n    }\n\n    // Return the greatest common\
    \ divisor of a and b.\n    // >>> Gcd(3L, 5L)\n    // 5\n    // >>> Gcd(3L, 0L)\n\
    \    // 3\n    // >>> Gcd(0L, 0L)\n    // 0\n    // >>> Gcd(3L, -5L)\n    // 5\n\
    \    // >>> Gcd(-3L, 5L)\n    // 5\n    // >>> Gcd(-3L, -5L)\n    // 5\n    //\
    \ >>> Gcd(-3L, 0L)\n    // 3\n    // >>> Gcd(-3L, -5L)\n    // 5\n    // >>> Gcd(-3L,\
    \ 0L)\n    // 3\n    public static long Gcd(long a, long b) {\n        if (a ==\
    \ 0) return b;\n        if (b == 0) return a;\n        if (a < 0) a = -a;\n  \
    \      if (b < 0) b = -b;\n        if (a < b) return Gcd(b, a);\n        long\
    \ r = a % b;\n        while (r != 0) {\n            a = b;\n            b = r;\n\
    \            r = a % b;\n        }\n        return b;\n    }\n\n    // Return\
    \ the least common multiple of a and b.\n    // >>> Lcm(3L, 5L)\n    // 15\n \
    \   // >>> Lcm(3L, 0L)\n    // 0\n    // >>> Lcm(0L, 0L)\n    // 0\n    // >>>\
    \ Lcm(3L, -5L)\n    // -15\n    // >>> Lcm(-3L, 5L)\n    // -15\n    // >>> Lcm(-3L,\
    \ -5L)\n    // -15\n    // >>> Lcm(-3L, 0L)\n    // 0\n    // >>> Lcm(-3L, -5L)\n\
    \    // -15\n    // >>> Lcm(-3L, 0L)\n    // 0\n    public static long Lcm(long\
    \ a, long b)", '        return (n % p + p) % p;', "        long r = n % p;\n \
    \       if (r == 0)\n            return r;\n        return r + p;", '        return
    (n % p + p) % p;', '        return (n >= 0) ? (n % p) : ((p - 1) - ((-1) - n)
    % p);', "        long r = n % p;\n        if (r < 0)\n            r += p;\n  \
    \      return r;", '        return (n % p + p) % p;', "        long r = n % p;\n\
    \        if (r < 0) {\n            r += p;\n        }\n        return r;\n   \
    \ }\n\n    // Return the greatest common divisor of a and b.\n    // >>> Gcd(5L,\
    \ 10L)\n    // (5L)\n    // >>> Gcd(5L, 15L)\n    // (5L)\n    // >>> Gcd(15L,\
    \ 5L)\n    // (5L)\n    // >>> Gcd(0L, 0L)\n    // (0L)\n    // >>> Gcd(0L, 10L)\n\
    \    // (10L)\n    // >>> Gcd(10L, 0L)\n    // (10L)\n    // >>> Gcd(15L, 15L)\n\
    \    // (15L)\n    public static long Gcd(long a, long b) {\n        long r =\
    \ a % b;\n        if (r < 0) {\n            r += b;\n        }\n        return\
    \ r;\n    }\n\n    // Return the least common multiple of a and b.\n    // >>>\
    \ Lcm(5L, 10L)\n    // (10L)\n    // >>> Lcm(5L, 15L)\n    // (15L)\n    // >>>\
    \ Lcm(15L, 5L)\n    // (15L)\n    // >>> Lcm(0L, 0L)\n    // (0L)\n    // >>>\
    \ Lcm(0L, 10L)\n    // (0L)\n    // >>> Lcm(10L, 0L)\n    // (10L)\n    // >>>\
    \ Lcm(15L, 15L)\n    // (15L)\n    public static long Lcm(long a, long b) {\n\
    \        return (a * b) / Gcd(a, b);\n    }\n\n    // Return the sum of the squares\
    \ of the numbers from 1 to n.\n    // >>> SumOfSquares(10)\n    // (55L)\n   \
    \ // >>> SumOfSquares(0)\n    // (0L)\n    // >>> SumOfSquares(-1)\n    // (0L)\n\
    \    public static long SumOfSquares(long n) {\n", "        long r = n % p;\n\
    \        if (r < 0)\n            r += p;\n        return r;", "        long r\
    \ = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n             \
    \   r = (r * p) % p;\n            }\n            n /= 2;\n            p = (p *\
    \ p) % p;\n        }\n        return r;", "        long r = 1;\n        while\
    \ (n > 0) {\n            if (n % 2 == 1) {\n                r = (r * p) % p;\n\
    \            }\n            n /= 2;\n            p = (p * p) % p;\n        }\n\
    \        return r;\n    }\n\n    // Return the sum of all the digits in n.\n \
    \   // >>> SumDigits(12345)\n    // 5\n    // >>> SumDigits(123456789)\n    //\
    \ 18\n    // >>> SumDigits(0)\n    // 0\n    // >>> SumDigits(-1)\n    // 0\n\
    \    public static int SumDigits(int n) {\n        int sum = 0;\n        while\
    \ (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n   \
    \     return sum;\n    }\n\n    // Return the sum of the digits in n.\n    //\
    \ >>> SumDigits(12345)\n    // 5\n    // >>> SumDigits(123456789)\n    // 18\n\
    \    // >>> SumDigits(0)\n    // 0\n    // >>> SumDigits(-1)\n    // 0\n    public\
    \ static long SumDigits(long n) {\n        long sum = 0;\n        while (n > 0)\
    \ {\n            sum += n % 10;\n            n /= 10;\n        }\n        return\
    \ sum;\n    }\n\n    // Return the sum of the digits in n.\n    // >>> SumDigits(12345)\n\
    \    // 5\n    // >>> SumDigits(123456789)\n    // 18\n    // >>> SumDigits(0)\n\
    \    // 0\n    // >>> SumDigits(-1)\n    // 0\n    public static int SumDigits(int\
    \ n, int base) {\n        int sum = 0;\n        while (n > 0) {\n            sum\
    \ += n % base;\n            n /= base;\n        }\n        return sum;\n    }\n\
    \n    // Return the sum of the digits in n.\n    // >>> SumDigits(12345)\n   \
    \ // 5\n    // >>> SumDigits(123456789)\n    // 18\n    // >>> SumDigits(0)\n\
    \    ", "        long r = n % p;\n        if (r == 0)\n            return r;\n\
    \        return r + p;", "        long r = 1;\n        while (n >= p) {\n    \
    \        r = (r * n) % p;\n            n = n / p;\n        }\n        return r;",
  "        long r = n % p;\n        if (r < 0)\n            r += p;\n        return\
    \ r;", "        long r = n % p;\n        if (r < 0) r += p;\n        return r;",
  '        return (n % p + p) % p;', "        long r = 1;\n        while (n > 0) {\n\
    \            if (n % 2 == 1) {\n                r = (r * p) % p;\n           \
    \ }\n            n /= 2;\n            p = (p * p) % p;\n        }\n        return\
    \ r;", '        return (n % p + p) % p;', '        return (n >= 0) ? (n % p) :
    ((n % p) + p);', "        long r = 1;\n        while (n > 0) {\n            if\
    \ (n % 2 == 1) {\n                r = (r * p) % p;\n            }\n          \
    \  n /= 2;\n            p = (p * p) % p;\n        }\n        return r;"]
stop_tokens:
- "\n    }\n"
