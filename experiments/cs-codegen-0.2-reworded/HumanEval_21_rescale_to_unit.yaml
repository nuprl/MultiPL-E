name: HumanEval_21_rescale_to_unit
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given list of numbers (of at least two elements), apply a linear\
  \ transform to that list,\n    // such that the smallest number will become 0 and\
  \ the largest will become 1\n    // >>> RescaleToUnit((new List<float>(new float[]{(float)1.0f,\
  \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f})))\n    // (new List<float>(new\
  \ float[]{(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))\n\
  \    public static List<float> RescaleToUnit(List<float> numbers) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RescaleToUnit((new\
  \ List<float>(new float[]{(float)2.0f, (float)49.9f}))).Equals((new List<float>(new\
  \ float[]{(float)0.0f, (float)1.0f}))));\n    Debug.Assert(RescaleToUnit((new List<float>(new\
  \ float[]{(float)100.0f, (float)49.9f}))).Equals((new List<float>(new float[]{(float)1.0f,\
  \ (float)0.0f}))));\n    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)1.0f,\
  \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))).Equals((new List<float>(new\
  \ float[]{(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))));\n\
  \    Debug.Assert(RescaleToUnit((new List<float>(new float[]{(float)2.0f, (float)1.0f,\
  \ (float)5.0f, (float)3.0f, (float)4.0f}))).Equals((new List<float>(new float[]{(float)0.25f,\
  \ (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f}))));\n    Debug.Assert(RescaleToUnit((new\
  \ List<float>(new float[]{(float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
  \ (float)14.0f}))).Equals((new List<float>(new float[]{(float)0.25f, (float)0.0f,\
  \ (float)1.0f, (float)0.5f, (float)0.75f}))));\n    }\n\n}\n"
completions: ["        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n  \
    \      return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = 1.0f / (max - min);\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min)\
    \ * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (max - min) / 2.0f;\n\
    \        List<float> result = new List<float>();\n        for (float number :\
    \ numbers) {\n            result.Add(number - min);\n        }\n        for (int\
    \ i = 0; i < result.Count; i++) {\n            result[i] = result[i] / scale;\n\
    \        }\n        result[0] = 0.0f;\n        result[result.Count - 1] = 1.0f;\n\
    \        return result;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = (max - min) / 2.0f;\n        List<float>\
    \ result = new List<float>();\n        for (float f : numbers) {\n           \
    \ result.Add(f - min);\n        }\n        for (int i = 0; i < result.Count; i++)\
    \ {\n            result[i] = result[i] / scale;\n        }\n        return result;",
  "        float min = numbers.Min();\n        float max = numbers.Max();\n      \
    \  float scale = 1.0f / (max - min);\n        List<float> result = new List<float>();\n\
    \        for (float number : numbers) {\n            result.Add(number - min);\n\
    \        }\n        for (int i = 0; i < result.Count; i++) {\n            result[i]\
    \ *= scale;\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) / range;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (float)1.0 / (max -\
    \ min);\n        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i]\
    \ = (numbers[i] - min) * scale;\n        }\n        return numbers;", "      \
    \  float min = numbers.Min();\n        float max = numbers.Max();\n        float\
    \ scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n       \
    \ return numbers;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = (float)1.0 / (max - min);\n        List<float> result =\
    \ new List<float>();\n        for (float number : numbers) {\n            result.Add(number\
    \ - min);\n        }\n        for (int i = 0; i < result.Count; i++) {\n     \
    \       result[i] = result[i] * scale;\n        }\n        return result;", " \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   float scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n  \
    \      return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = (max - min) / 2.0f;\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min)\
    \ / scale;\n        }\n        return numbers;", "        // Rescale the numbers\
    \ to the range [0, 1]\n        float min = numbers.Min();\n        float max =\
    \ numbers.Max();\n        float range = max - min;\n        for (int i = 0; i\
    \ < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min) / range;\n\
    \        }\n        // Scale the numbers to the range [0, 1]\n        float scale\
    \ = 1.0f / (numbers.Count - 1);\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            numbers[i] = numbers[i] * scale;\n        }\n        // Scale\
    \ the numbers to the range [0, 1]\n        scale = 1.0f / (max - min);\n     \
    \   for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = numbers[i]\
    \ * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (float)1.0 / (max -\
    \ min);\n        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i]\
    \ = (numbers[i] - min) * scale;\n        }\n        return numbers;", "      \
    \  float min = numbers.Min();\n        float max = numbers.Max();\n        float\
    \ scale = (float)1.0 / (max - min);\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n  \
    \      return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = 1.0f / (max - min);\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min)\
    \ * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = max - min;\n      \
    \  for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) / scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        // Rescale the\
    \ numbers to [0, 1]\n        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) / range;\n        }\n  \
    \      // Scale the numbers to [0, 1]\n        float scale = 1.0f / (numbers.Count\
    \ - 1);\n        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i]\
    \ = numbers[i] * scale;\n        }\n        // Return the scaled numbers\n   \
    \     return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = max - min;\n        for (int i = 0;\
    \ i < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min) / scale;\n\
    \        }\n        return numbers;", "        float min = numbers.Min();\n  \
    \      float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        List<float> result = new List<float>();\n        for (float number :\
    \ numbers) {\n            result.Add(number - min);\n        }\n        for (int\
    \ i = 0; i < result.Count; i++) {\n            result[i] = result[i] * scale;\n\
    \        }\n        return result;", "        // Rescale to unit\n        float\
    \ min = numbers.Min();\n        float max = numbers.Max();\n        float scale\
    \ = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count; i++) {\n \
    \           numbers[i] = (numbers[i] - min) * scale;\n        }\n        return\
    \ numbers;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = (float)1.0 / (max - min);\n        for (int i = 0; i <\
    \ numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n\
    \        }\n        return numbers;", "        float min = numbers.Min();\n  \
    \      float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (float)1.0 / (max -\
    \ min);\n        List<float> result = new List<float>();\n        for (float number\
    \ : numbers) {\n            result.Add(number - min);\n        }\n        for\
    \ (int i = 0; i < result.Count; i++) {\n            result[i] *= scale;\n    \
    \    }\n        return result;", "        // Rescale to unit\n        float min\
    \ = numbers.Min();\n        float max = numbers.Max();\n        float scale =\
    \ 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count; i++) {\n   \
    \         numbers[i] = (numbers[i] - min) * scale;\n        }\n        return\
    \ numbers;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = 1.0f / (max - min);\n        List<float> result = new List<float>();\n\
    \        for (float number : numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        float scale = (max - min) / 2.0f;\n\
    \        List<float> result = new List<float>();\n        for (float number :\
    \ numbers) {\n            result.Add(number - min);\n        }\n        for (int\
    \ i = 0; i < result.Count; i++) {\n            result[i] = result[i] / scale;\n\
    \        }\n        return result;", "        if (numbers.Count < 2)\n       \
    \     throw new Exception(\"Input list should have at least two elements\");\n\
    \        float min = numbers.Min();\n        float max = numbers.Max();\n    \
    \    float range = max - min;\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            numbers[i] = (numbers[i] - min) / range;\n        }\n       \
    \ return numbers;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n  \
    \      return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = 1.0f / (max - min);\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min)\
    \ * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (max - min) / 2.0f;\n\
    \        List<float> result = new List<float>(numbers.Count);\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            result.Add(numbers[i] - min);\n\
    \        }\n        for (int i = 0; i < result.Count; i++) {\n            result[i]\
    \ = result[i] * scale + scale;\n        }\n        return result;", "        float\
    \ min = numbers.Min();\n        float max = numbers.Max();\n        float scale\
    \ = (max - min) / 2.0f;\n        List<float> result = new List<float>();\n   \
    \     for (float number : numbers) {\n            result.Add(number - min);\n\
    \        }\n        for (int i = 0; i < result.Count; i++) {\n            result[i]\
    \ = result[i] / scale;\n        }\n        return result;", "        // Rescale\
    \ to unit interval\n        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n  \
    \      return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = (float)1.0 / (max - min);\n        List<float>\
    \ result = new List<float>();\n        for (float number : numbers) {\n      \
    \      result.Add(number * scale);\n        }\n        return result;", "    \
    \    float min = numbers.Min();\n        float max = numbers.Max();\n        float\
    \ scale = max - min;\n        for (int i = 0; i < numbers.Count; i++) {\n    \
    \        numbers[i] = (numbers[i] - min) / scale;\n        }\n        return numbers;",
  "        float min = numbers.Min();\n        float max = numbers.Max();\n      \
    \  float scale = max - min;\n        if (scale == 0) {\n            return numbers;\n\
    \        }\n        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i]\
    \ = (numbers[i] - min) / scale;\n        }\n        return numbers;", "      \
    \  float min = numbers.Min();\n        float max = numbers.Max();\n        float\
    \ scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n       \
    \ return numbers;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = (float)1.0 / (max - min);\n        List<float> result =\
    \ new List<float>();\n        for (float number : numbers) {\n            result.Add(number\
    \ - min);\n        }\n        for (int i = 0; i < result.Count; i++) {\n     \
    \       result[i] *= scale;\n        }\n        return result;", "        float\
    \ min = numbers.Min();\n        float max = numbers.Max();\n        float scale\
    \ = 1.0f / (max - min);\n        List<float> result = new List<float>();\n   \
    \     for (float number : numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        List<float> result = new List<float>();\n        for (float number :\
    \ numbers) {\n            result.Add(number - min);\n        }\n        for (int\
    \ i = 0; i < result.Count; i++) {\n            result[i] *= scale;\n        }\n\
    \        return result;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = 1.0f / (max - min);\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min)\
    \ * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (max - min) / 2.0f;\n\
    \        List<float> result = new List<float>();\n        for (float f : numbers)\
    \ {\n            result.Add(f - min);\n        }\n        for (int i = 0; i <\
    \ result.Count; i++) {\n            result[i] = result[i] / scale;\n        }\n\
    \        result[0] = 0.0f;\n        result[result.Count - 1] = 1.0f;\n       \
    \ return result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = 1.0f / (max - min);\n        List<float> result = new List<float>();\n\
    \        for (float number : numbers) {\n            result.Add(number * scale\
    \ - min);\n        }\n        return result;", "        if (numbers.Count == 0)\n\
    \            throw new Exception(\"Cannot rescale to unit from empty list\");\n\
    \        float min = numbers.Min();\n        float max = numbers.Max();\n    \
    \    if (min == max)\n            return numbers;\n        float scale = 1.0f\
    \ / (max - min);\n        List<float> result = new List<float>();\n        for\
    \ (float f : numbers)\n            result.Add(f * scale);\n        return result;",
  "        float min = numbers.Min();\n        float max = numbers.Max();\n      \
    \  float scale = (float)1.0 / (max - min);\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n  \
    \      return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = (float)(1.0 / (max - min));\n      \
    \  for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (float)1.0 / (max -\
    \ min);\n        List<float> result = new List<float>();\n        for (float number\
    \ : numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n  \
    \      return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float range = max - min;\n        for (int i = 0;\
    \ i < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min) / range;\n\
    \        }\n        return numbers;", "        float min = numbers.Min();\n  \
    \      float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (float)1.0 / (max -\
    \ min);\n        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i]\
    \ = (numbers[i] - min) * scale;\n        }\n        return numbers;", "      \
    \  float min = numbers.Min();\n        float max = numbers.Max();\n        float\
    \ scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n       \
    \ return numbers;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = (float)(1.0 / (max - min));\n        for (int i = 0; i\
    \ < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n\
    \        }\n        return numbers;", "        float min = numbers.Min();\n  \
    \      float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) / range;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (float)1.0 / (max -\
    \ min);\n        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i]\
    \ = (numbers[i] - min) * scale;\n        }\n        return numbers;", "      \
    \  float min = numbers.Min();\n        float max = numbers.Max();\n        float\
    \ scale = 1.0f / (max - min);\n        List<float> result = new List<float>();\n\
    \        for (float number : numbers) {\n            result.Add(number - min);\n\
    \        }\n        for (int i = 0; i < result.Count; i++) {\n            result[i]\
    \ *= scale;\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) / range;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (float)1.0 / (max -\
    \ min);\n        List<float> result = new List<float>();\n        for (float number\
    \ : numbers) {\n            result.Add(number - min);\n        }\n        for\
    \ (int i = 0; i < result.Count; i++) {\n            result[i] = result[i] * scale;\n\
    \        }\n        return result;", "        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        float range = max - min;\n        for\
    \ (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) / range;\n        }\n        return numbers;", "        if (numbers.Count\
    \ < 2)\n            throw new Exception(\"Not enough numbers\");\n        float\
    \ min = numbers[0];\n        float max = numbers[0];\n        for (float f : numbers)\
    \ {\n            if (f < min)\n                min = f;\n            if (f > max)\n\
    \                max = f;\n        }\n        if (min == max)\n            return\
    \ numbers;\n        float scale = 1.0f / (max - min);\n        for (int i = 0;\
    \ i < numbers.Count; i++)\n            numbers[i] = (numbers[i] - min) * scale;\n\
    \        return numbers;", "        float min = numbers.Min();\n        float\
    \ max = numbers.Max();\n        float scale = (max - min) / (max - min);\n   \
    \     List<float> result = new List<float>();\n        for (float f : numbers)\
    \ {\n            result.Add(f * scale);\n        }\n        return result;", " \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   float scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n  \
    \      return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = (max - min) / 2.0f;\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min)\
    \ / scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (float)(1.0 / (max\
    \ - min));\n        List<float> result = new List<float>();\n        for (float\
    \ f : numbers) {\n            result.Add(f * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = 1.0f / (max - min);\n        List<float> result = new List<float>();\n\
    \        for (float number : numbers) {\n            result.Add(number * scale\
    \ - min);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        List<float> result = new List<float>();\n        for (float number :\
    \ numbers) {\n            result.Add(number * scale);\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = 1.0f / (max - min);\n        List<float> result = new List<float>();\n\
    \        for (float number : numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        float scale = (float)1.0 / (max - min);\n\
    \        List<float> result = new List<float>(numbers.Count);\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            result.Add(numbers[i] - min);\n\
    \        }\n        for (int i = 0; i < result.Count; i++) {\n            result[i]\
    \ *= scale;\n        }\n        return result;", "        // Create a new list\
    \ with the same size as the input list\n        List<float> result = new List<float>(numbers.Count);\n\
    \n        // Calculate the minimum and maximum values in the input list\n    \
    \    float min = numbers[0];\n        float max = numbers[0];\n        for (int\
    \ i = 1; i < numbers.Count; i++) {\n            if (numbers[i] < min) {\n    \
    \            min = numbers[i];\n            }\n            if (numbers[i] > max)\
    \ {\n                max = numbers[i];\n            }\n        }\n\n        //\
    \ Calculate the scale factor\n        float scale = 1.0f / (max - min);\n\n  \
    \      // Apply the scale factor to the input list\n        for (int i = 0; i\
    \ < numbers.Count; i++) {\n            result[i] = (numbers[i] - min) * scale;\n\
    \        }\n\n        return result;", "        float min = numbers.Min();\n \
    \       float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        if (numbers.Count\
    \ == 0)\n            return numbers;\n        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        float scale = (max - min) / (numbers.Count\
    \ - 1);\n        for (int i = 0; i < numbers.Count; i++)\n            numbers[i]\
    \ = (numbers[i] - min) / scale;\n        return numbers;", "        float min\
    \ = numbers.Min();\n        float max = numbers.Max();\n        float scale =\
    \ max - min;\n        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i]\
    \ = (numbers[i] - min) / scale;\n        }\n        return numbers;", "      \
    \  float min = numbers.Min();\n        float max = numbers.Max();\n        float\
    \ scale = 1.0f / (max - min);\n        List<float> result = new List<float>();\n\
    \        for (float number : numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        float scale = (float)(1.0 / (max - min));\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = max - min;\n      \
    \  if (scale == 0) {\n            return numbers;\n        }\n        List<float>\
    \ result = new List<float>();\n        for (float number : numbers) {\n      \
    \      result.Add(number - min);\n        }\n        return result;", "      \
    \  float min = numbers.Min();\n        float max = numbers.Max();\n        float\
    \ scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n       \
    \ return numbers;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        float scale = 1.0f / range;\n     \
    \   for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (max - min) / 2.0f;\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) / scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (float)1.0 / (max -\
    \ min);\n        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i]\
    \ = (numbers[i] - min) * scale;\n        }\n        return numbers;", "      \
    \  float min = numbers.Min();\n        float max = numbers.Max();\n        float\
    \ scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n       \
    \ return numbers;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) / range;\n        }\n  \
    \      return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = 1.0f / (max - min);\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min)\
    \ * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) / range;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = max - min;\n      \
    \  for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) / scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (float)1.0 / (max -\
    \ min);\n        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i]\
    \ = (numbers[i] - min) * scale;\n        }\n        return numbers;", "      \
    \  float min = numbers.Min();\n        float max = numbers.Max();\n        float\
    \ scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n       \
    \ return numbers;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = (max - min) / 2.0f;\n        List<float> result = new List<float>();\n\
    \        for (float f : numbers) {\n            result.Add(f - min);\n       \
    \ }\n        for (int i = 0; i < result.Count; i++) {\n            result[i] =\
    \ result[i] * scale + min;\n        }\n        return result;", "        float\
    \ min = numbers.Min();\n        float max = numbers.Max();\n        for (int i\
    \ = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min)\
    \ / (max - min);\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (max - min) / 2.0f;\n\
    \        List<float> result = new List<float>(numbers.Count);\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            result.Add(numbers[i] - min);\n\
    \        }\n        for (int i = 0; i < result.Count; i++) {\n            result[i]\
    \ = result[i] * scale + scale;\n        }\n        return result;", "        //\
    \ If the list is empty, return an empty list\n        if (numbers.Count == 0)\n\
    \            return numbers;\n\n        // If the list has only one element, return\
    \ a list with the same value\n        if (numbers.Count == 1)\n            return\
    \ numbers;\n\n        // Calculate the minimum and maximum values in the list\n\
    \        float min = numbers[0];\n        float max = numbers[0];\n        for\
    \ (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i] < min)\n \
    \               min = numbers[i];\n            if (numbers[i] > max)\n       \
    \         max = numbers[i];\n        }\n\n        // Calculate the scale factor\n\
    \        float scale = 1.0f / (max - min);\n\n        // Apply the scale factor\
    \ to the list\n        for (int i = 0; i < numbers.Count; i++)\n            numbers[i]\
    \ = (numbers[i] - min) * scale;\n\n        // Return the rescaled list\n     \
    \   return numbers;", "        float min = numbers.Min();\n        float max =\
    \ numbers.Max();\n        float scale = 1.0f / (max - min);\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min)\
    \ * scale;\n        }\n        return numbers;", "        if (numbers.Count <\
    \ 2)\n            throw new Exception(\"Not enough numbers\");\n        float\
    \ min = numbers.Min();\n        float max = numbers.Max();\n        float scale\
    \ = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count; i++)\n   \
    \         numbers[i] = (numbers[i] - min) * scale;\n        return numbers;",
  "        float min = numbers.Min();\n        float max = numbers.Max();\n      \
    \  float scale = (float)1.0 / (max - min);\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n  \
    \      return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = (max - min) / 2.0f;\n        List<float>\
    \ result = new List<float>();\n        for (float number : numbers) {\n      \
    \      result.Add(number - min);\n        }\n        for (int i = 0; i < result.Count;\
    \ i++) {\n            result[i] = result[i] * scale + min;\n        }\n      \
    \  return result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n  \
    \      return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = 1.0f / (max - min);\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min)\
    \ * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (float)1.0 / (max -\
    \ min);\n        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i]\
    \ = (numbers[i] - min) * scale;\n        }\n        return numbers;", "      \
    \  float min = numbers.Min();\n        float max = numbers.Max();\n        float\
    \ scale = 1.0f / (max - min);\n        List<float> result = new List<float>();\n\
    \        for (float number : numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        float range = max - min;\n        float\
    \ scale = 1.0f / range;\n        for (int i = 0; i < numbers.Count; i++) {\n \
    \           numbers[i] = (numbers[i] - min) * scale;\n        }\n        return\
    \ numbers;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n  \
    \      return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = (max - min) / 2.0f;\n        List<float>\
    \ result = new List<float>();\n        for (float number : numbers) {\n      \
    \      result.Add(number - min);\n        }\n        for (int i = 0; i < result.Count;\
    \ i++) {\n            result[i] = result[i] / scale;\n        }\n        return\
    \ result;", "        if (numbers.Count < 2)\n            throw new Exception(\"\
    Input list must have at least two elements\");\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++)\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        return numbers;", "        // Create a new list to\
    \ hold the transformed numbers\n        List<float> result = new List<float>();\n\
    \n        // Calculate the min and max values\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n\n        // Calculate the scale factor\n\
    \        float scale = 1.0f / (max - min);\n\n        // Transform the numbers\n\
    \        for (float number : numbers) {\n            result.Add(number * scale);\n\
    \        }\n\n        return result;", "        float min = numbers.Min();\n \
    \       float max = numbers.Max();\n        float scale = (float)1.0 / (max -\
    \ min);\n        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i]\
    \ = (numbers[i] - min) * scale;\n        }\n        return numbers;", "      \
    \  // Find the minimum and maximum values in the list\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        // Rescale the list to be between\
    \ 0 and 1\n        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i]\
    \ = (numbers[i] - min) / (max - min);\n        }\n        return numbers;", " \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   float scale = (float)1.0 / (max - min);\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n  \
    \      return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = 1.0f / (max - min);\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min)\
    \ * scale;\n        }\n        return numbers;", "        // Find the smallest\
    \ and largest values in the list\n        float min = numbers[0];\n        float\
    \ max = numbers[0];\n        for (int i = 1; i < numbers.Count; i++) {\n     \
    \       if (numbers[i] < min) {\n                min = numbers[i];\n         \
    \   }\n            if (numbers[i] > max) {\n                max = numbers[i];\n\
    \            }\n        }\n        // Rescale the list so that the smallest value\
    \ is 0 and the largest value is 1\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) / (max - min);\n       \
    \ }\n        return numbers;", "        // Find the min and max values in the\
    \ list\n        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        // Rescale the list so that the min value is 0 and the max value is 1\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n        }\n        return numbers;", "        float min\
    \ = numbers.Min();\n        float max = numbers.Max();\n        float scale =\
    \ (float)1.0 / (max - min);\n        List<float> result = new List<float>();\n\
    \        for (float number : numbers) {\n            result.Add(number - min);\n\
    \        }\n        for (int i = 0; i < result.Count; i++) {\n            result[i]\
    \ *= scale;\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (max - min) / 2.0f;\n\
    \        List<float> result = new List<float>();\n        for (float f : numbers)\
    \ {\n            result.Add(f - min);\n        }\n        for (int i = 0; i <\
    \ result.Count; i++) {\n            result[i] = result[i] / scale;\n        }\n\
    \        result[0] = 0.0f;\n        result[result.Count - 1] = 1.0f;\n       \
    \ return result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = (float)1.0 / (max - min);\n        List<float> result =\
    \ new List<float>();\n        for (float number : numbers) {\n            result.Add(number\
    \ - min);\n        }\n        for (int i = 0; i < result.Count; i++) {\n     \
    \       result[i] *= scale;\n        }\n        return result;", "        float\
    \ min = numbers.Min();\n        float max = numbers.Max();\n        float scale\
    \ = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count; i++) {\n \
    \           numbers[i] = (numbers[i] - min) * scale;\n        }\n        return\
    \ numbers;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = (max - min) / 2.0f;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) / scale;\n        }\n  \
    \      return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = (max - min) / 2.0f;\n        List<float>\
    \ result = new List<float>();\n        for (float number : numbers) {\n      \
    \      result.Add(number - min);\n        }\n        for (int i = 0; i < result.Count;\
    \ i++) {\n            result[i] = result[i] * scale + min;\n        }\n      \
    \  return result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = (max - min) / 2.0f;\n        List<float> result = new List<float>();\n\
    \        for (float number : numbers) {\n            result.Add(number - min);\n\
    \        }\n        for (int i = 0; i < result.Count; i++) {\n            result[i]\
    \ = result[i] * scale + min;\n        }\n        return result;", "        if\
    \ (numbers.Count < 2)\n            throw new Exception(\"Input list should have\
    \ at least two elements\");\n        float min = numbers.Min();\n        float\
    \ max = numbers.Max();\n        float scale = (max - min) / (numbers.Count - 1);\n\
    \        for (int i = 0; i < numbers.Count; i++)\n            numbers[i] = (numbers[i]\
    \ - min) / scale;\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) / (max - min);\n       \
    \ }\n        return numbers;", "        float min = numbers.Min();\n        float\
    \ max = numbers.Max();\n        float scale = 1.0f / (max - min);\n        List<float>\
    \ result = new List<float>();\n        for (float number : numbers) {\n      \
    \      result.Add(number * scale - min);\n        }\n        return result;",
  "        float min = numbers.Min();\n        float max = numbers.Max();\n      \
    \  float scale = 1.0f / (max - min);\n        List<float> result = new List<float>();\n\
    \        for (float number : numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        float scale = (float)1.0 / (max - min);\n\
    \        List<float> result = new List<float>();\n        for (float number :\
    \ numbers) {\n            result.Add(number - min);\n        }\n        for (int\
    \ i = 0; i < result.Count; i++) {\n            result[i] *= scale;\n        }\n\
    \        return result;", "        // Rescale the numbers to the range [0, 1]\n\
    \        float min = numbers.Min();\n        float max = numbers.Max();\n    \
    \    List<float> result = numbers.Select(x => (x - min) / (max - min));\n    \
    \    // Scale the numbers to the range [0, 1]\n        result = result.Select(x\
    \ => (x * 2.0f) - 1.0f);\n        // Scale the numbers to the range [-1, 1]\n\
    \        result = result.Select(x => (x * 2.0f) - 1.0f);\n        return result;",
  "        float min = numbers.Min();\n        float max = numbers.Max();\n      \
    \  float scale = 1.0f / (max - min);\n        List<float> result = new List<float>();\n\
    \        for (float number : numbers) {\n            result.Add(number * scale);\n\
    \        }\n        return result;", "        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        float scale = (max - min) / 2.0f;\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) / scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        // Rescale the\
    \ numbers to a unit interval\n        float min = numbers.Min();\n        float\
    \ max = numbers.Max();\n        float scale = 1.0f / (max - min);\n        List<float>\
    \ result = new List<float>();\n        for (float n : numbers) {\n           \
    \ result.Add(n * scale);\n        }\n        return result;", "        float min\
    \ = numbers.Min();\n        float max = numbers.Max();\n        float scale =\
    \ 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count; i++) {\n   \
    \         numbers[i] = (numbers[i] - min) * scale;\n        }\n        return\
    \ numbers;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n  \
    \      return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = (float)1.0 / (max - min);\n        for\
    \ (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        // Rescale to\
    \ unit\n        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n  \
    \      return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = (max - min) / 2.0f;\n        List<float>\
    \ result = new List<float>();\n        for (float number : numbers) {\n      \
    \      result.Add(number - min);\n        }\n        for (int i = 0; i < result.Count;\
    \ i++) {\n            result[i] = result[i] / scale;\n        }\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = (float) (1.0 / (max - min));\n        for (int i = 0; i\
    \ < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n\
    \        }\n        return numbers;", "        float min = numbers.Min();\n  \
    \      float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (max - min) / 2.0f;\n\
    \        List<float> result = new List<float>();\n        for (float number :\
    \ numbers) {\n            result.Add(number - min);\n        }\n        for (int\
    \ i = 0; i < result.Count; i++) {\n            result[i] = result[i] / scale;\n\
    \        }\n        return result;", "        // Rescale the numbers to the range\
    \ [0, 1]\n        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = 1.0f / (max - min);\n        List<float> result = new List<float>();\n\
    \        for (float number : numbers) {\n            result.Add(number * scale\
    \ - min);\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        // Rescale the\
    \ numbers to a unit interval\n        float min = numbers.Min();\n        float\
    \ max = numbers.Max();\n        float range = max - min;\n        for (int i =\
    \ 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min) /\
    \ range;\n        }\n        // Scale the numbers to a unit interval\n       \
    \ for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = numbers[i]\
    \ * 2 - 1;\n        }\n        // Add a unit interval to the end\n        numbers.Add(1.0f);\n\
    \        return numbers;", "        float min = numbers.Min();\n        float\
    \ max = numbers.Max();\n        float scale = (float)1.0 / (max - min);\n    \
    \    List<float> result = new List<float>();\n        for (float number : numbers)\
    \ {\n            result.Add(number - min);\n        }\n        for (int i = 0;\
    \ i < result.Count; i++) {\n            result[i] *= scale;\n        }\n     \
    \   return result;", "        float min = numbers.Min();\n        float max =\
    \ numbers.Max();\n        float scale = 1.0f / (max - min);\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min)\
    \ * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  float scale = 1.0f / range;\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n       \
    \ return numbers;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n  \
    \      return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = 1.0f / (max - min);\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min)\
    \ * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        // Rescale to\
    \ unit\n        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float range = max - min;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) / range;\n        }\n  \
    \      // Scale to 0..1\n        for (int i = 0; i < numbers.Count; i++) {\n \
    \           numbers[i] = numbers[i] * 2.0f - 1.0f;\n        }\n        return\
    \ numbers;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n  \
    \      return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = 1.0f / (max - min);\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min)\
    \ * scale;\n        }\n        return numbers;", "        // The first number\
    \ is the smallest, and the last is the largest\n        float min = numbers[0];\n\
    \        float max = numbers[0];\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            if (numbers[i] < min) {\n                min = numbers[i];\n\
    \            }\n            if (numbers[i] > max) {\n                max = numbers[i];\n\
    \            }\n        }\n        // Scale the numbers to the unit interval\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) / (max - min);\n        }\n        // Make the smallest number 0 and\
    \ the largest 1\n        numbers[0] = 0;\n        numbers[numbers.Count - 1] =\
    \ 1;\n        return numbers;", "        float min = numbers.Min();\n        float\
    \ max = numbers.Max();\n        float scale = 1.0f / (max - min);\n        for\
    \ (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (max - min) / 2.0f;\n\
    \        List<float> result = new List<float>();\n        for (float number :\
    \ numbers) {\n            result.Add(number - min);\n        }\n        for (int\
    \ i = 0; i < result.Count; i++) {\n            result[i] = result[i] * scale +\
    \ min;\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (max - min) / 2.0f;\n\
    \        List<float> result = new List<float>();\n        for (float number :\
    \ numbers) {\n            result.Add(number - min);\n        }\n        for (int\
    \ i = 0; i < result.Count; i++) {\n            result[i] = result[i] * scale +\
    \ min;\n        }\n        return result;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (max - min) / 2.0f;\n\
    \        List<float> result = new List<float>();\n        for (float number :\
    \ numbers) {\n            result.Add(number - min + scale);\n        }\n     \
    \   return result;", "        float min = numbers.Min();\n        float max =\
    \ numbers.Max();\n        float scale = 1.0f / (max - min);\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min)\
    \ * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = max - min;\n      \
    \  for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) / scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (float)1.0 / (max -\
    \ min);\n        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i]\
    \ = (numbers[i] - min) * scale;\n        }\n        return numbers;", "      \
    \  // Rescale the numbers to a range of 0 to 1\n        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float range = max - min;\n      \
    \  for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) / range;\n        }\n        // Scale the numbers to a range of 0 to\
    \ 1\n        float scale = 1.0f / (numbers.Count - 1);\n        for (int i = 0;\
    \ i < numbers.Count; i++) {\n            numbers[i] = numbers[i] * scale;\n  \
    \      }\n        // Scale the numbers to a range of 0 to 1\n        float scale2\
    \ = 1.0f / (numbers.Count - 1);\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            numbers[i] = numbers[i] * scale2;\n        }\n        return\
    \ numbers;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = (float)1.0 / (max - min);\n        for (int i = 0; i <\
    \ numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n\
    \        }\n        return numbers;", "        float min = numbers.Min();\n  \
    \      float max = numbers.Max();\n        float scale = (max - min) / 2.0f;\n\
    \        List<float> result = new List<float>();\n        for (float number :\
    \ numbers) {\n            result.Add(number - min);\n        }\n        for (int\
    \ i = 0; i < result.Count; i++) {\n            result[i] = result[i] / scale;\n\
    \        }\n        return result;", "        float min = numbers.Min();\n   \
    \     float max = numbers.Max();\n        float scale = (float)(1.0 / (max - min));\n\
    \        List<float> result = new List<float>();\n        for (float number :\
    \ numbers) {\n            result.Add(number - min);\n        }\n        for (int\
    \ i = 0; i < result.Count; i++) {\n            result[i] *= scale;\n        }\n\
    \        return result;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = 1.0f / (max - min);\n        List<float>\
    \ result = new List<float>();\n        for (float f : numbers) {\n           \
    \ result.Add(f * scale);\n        }\n        return result;", "        float min\
    \ = numbers.Min();\n        float max = numbers.Max();\n        float scale =\
    \ 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count; i++) {\n   \
    \         numbers[i] = (numbers[i] - min) * scale;\n        }\n        return\
    \ numbers;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = (float)1.0 / (max - min);\n        for (int i = 0; i <\
    \ numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n\
    \        }\n        return numbers;", "        float min = numbers.Min();\n  \
    \      float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (float) (1.0 / (max\
    \ - min));\n        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i]\
    \ = (numbers[i] - min) * scale;\n        }\n        return numbers;", "      \
    \  // Rescale to unit\n        float min = numbers.Min();\n        float max =\
    \ numbers.Max();\n        float scale = (float)1.0 / (max - min);\n        for\
    \ (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = max - min;\n      \
    \  for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) / scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        List<float> result = new List<float>();\n        for (float n : numbers)\
    \ {\n            result.Add(n * scale);\n        }\n        return result;", " \
    \       float min = numbers.Min();\n        float max = numbers.Max();\n     \
    \   float scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n  \
    \      return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = 1.0f / (max - min);\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min)\
    \ * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i]\
    \ - min) * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = max - min;\n      \
    \  if (scale == 0)\n            return numbers;\n        List<float> result =\
    \ new List<float>();\n        for (float number : numbers)\n            result.Add(number\
    \ - min);\n        for (int i = 0; i < result.Count; i++)\n            result[i]\
    \ /= scale;\n        return result;", "        // Create a new list to hold the\
    \ results\n        List<float> result = new List<float>();\n\n        // Calculate\
    \ the min and max values\n        float min = numbers.First();\n        float\
    \ max = numbers.Last();\n\n        // Calculate the scale factor\n        float\
    \ scale = 1.0f / (max - min);\n\n        // Scale all the values to the range\
    \ [0, 1]\n        for (float value : numbers) {\n            result.Add(value\
    \ * scale);\n        }\n\n        // Return the scaled values\n        return\
    \ result;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n  \
    \      return numbers;", "        float min = numbers.Min();\n        float max\
    \ = numbers.Max();\n        float scale = 1.0f / (max - min);\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            numbers[i] = (numbers[i] - min)\
    \ * scale;\n        }\n        return numbers;", "        float min = numbers.Min();\n\
    \        float max = numbers.Max();\n        float scale = (float)1.0 / (max -\
    \ min);\n        for (int i = 0; i < numbers.Count; i++) {\n            numbers[i]\
    \ = (numbers[i] - min) * scale;\n        }\n        return numbers;", "      \
    \  float min = numbers.Min();\n        float max = numbers.Max();\n        float\
    \ scale = 1.0f / (max - min);\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            numbers[i] = (numbers[i] - min) * scale;\n        }\n       \
    \ return numbers;", "        float min = numbers.Min();\n        float max = numbers.Max();\n\
    \        float scale = max - min;\n        if (scale == 0) {\n            return\
    \ numbers;\n        }\n        List<float> result = new List<float>();\n     \
    \   for (float number : numbers) {\n            result.Add(number - min);\n  \
    \      }\n        return result;", "        float min = numbers.Min();\n     \
    \   float max = numbers.Max();\n        float scale = 1.0f / (max - min);\n  \
    \      List<float> result = new List<float>();\n        for (float number : numbers)\
    \ {\n            result.Add(number - min);\n        }\n        for (int i = 0;\
    \ i < result.Count; i++) {\n            result[i] = result[i] * scale;\n     \
    \   }\n        return result;"]
stop_tokens:
- "\n    }\n"
