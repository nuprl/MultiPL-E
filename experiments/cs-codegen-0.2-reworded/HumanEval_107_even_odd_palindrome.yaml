name: HumanEval_107_even_odd_palindrome
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a positive integer n, return a tuple that has the number\
  \ of even and odd\n    // integer palindromes that fall within the range(1, n),\
  \ inclusive.\n    // Example 1:\n    // >>> EvenOddPalindrome((3L))\n    // (Tuple.Create(1L,\
  \ 2L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them\
  \ is even, and two of them are odd.\n    // Example 2:\n    // >>> EvenOddPalindrome((12L))\n\
  \    // (Tuple.Create(4L, 6L))\n    // Explanation:\n    // Integer palindrome are\
  \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
  \    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number\
  \ of even and odd integer palindromes respectively.\n    public static Tuple<long,\
  \ long> EvenOddPalindrome(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(EvenOddPalindrome((123L)).Equals((Tuple.Create(8L,\
  \ 13L))));\n    Debug.Assert(EvenOddPalindrome((12L)).Equals((Tuple.Create(4L, 6L))));\n\
  \    Debug.Assert(EvenOddPalindrome((3L)).Equals((Tuple.Create(1L, 2L))));\n   \
  \ Debug.Assert(EvenOddPalindrome((63L)).Equals((Tuple.Create(6L, 8L))));\n    Debug.Assert(EvenOddPalindrome((25L)).Equals((Tuple.Create(5L,\
  \ 6L))));\n    Debug.Assert(EvenOddPalindrome((19L)).Equals((Tuple.Create(4L, 6L))));\n\
  \    Debug.Assert(EvenOddPalindrome((9L)).Equals((Tuple.Create(4L, 5L))));\n   \
  \ Debug.Assert(EvenOddPalindrome((1L)).Equals((Tuple.Create(0L, 1L))));\n    }\n\
  \n}\n"
completions: []
stop_tokens:
- "\n    }\n"
