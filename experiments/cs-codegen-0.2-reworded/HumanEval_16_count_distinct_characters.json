{
  "name": "HumanEval_16_count_distinct_characters",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
  "completions": [
    "        // Write your code here\n        return str.ToLower().ToCharArray().Distinct().Count();",
    "        return str.ToLower().Select(c => c).Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();",
    "        var chars = str.ToCharArray();\n        var hashset = new HashSet<char>(chars);\n        return chars.Length - hashset.Count;",
    "        // Write your code here\n        var chars = str.ToCharArray();\n        var dict = new Dictionary<char, int>();\n        for (var i = 0; i < chars.Length; i++) {\n            dict[chars[i]]++;\n        }\n        return dict.Count;",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Create a dictionary of characters and their count\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Return the number of distinct characters\n        return dict.Count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Create a dictionary of characters and their counts\n        Dictionary<char, int> charCounts = new Dictionary<char, int>();\n        for (char c : str) {\n            charCounts[c]++;\n        }\n        // Return the number of distinct characters\n        return charCounts.Count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();",
    "        // Create a dictionary of all the characters in the string\n        var dictionary = str.ToLower().ToCharArray().Select(c => (char)c).ToDictionary();\n\n        // Return the number of distinct characters in the string\n        return dictionary.Count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;",
    "        var chars = str.ToCharArray();\n        var dict = new Dictionary<char, int>();\n        for (var c : chars) {\n            dict[c] = dict[c] + 1;\n        }\n        return dict.Count;",
    "        return str.ToLower().Select(x => (int)x).Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).Distinct();\n        return chars.Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;",
    "        // Create a dictionary of lowercase characters\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Count the number of elements in the dictionary\n        return dict.Count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;",
    "        // Create a dictionary of all the characters in the string\n        // and count the number of times each character appears\n        var dict = str.ToLower().ToCharArray().ToDictionary(\n            key => key,\n            value => value);\n\n        // Return the number of distinct characters in the string\n        return dict.Count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Create a dictionary of all the characters in the string\n        var dict = Enumerable.From(str).ToDictionary(x => x, x => x);\n\n        // Return the number of distinct characters in the string\n        return dict.Count;",
    "        var chars = str.ToCharArray();\n        var hashset = new HashSet<char>(chars);\n        return chars.Length - hashset.Count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Create a dictionary that maps each character to its count\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        for (char c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Return the number of distinct characters\n        return dict.Count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToLower();\n        return chars.Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Create a dictionary that maps each character to its count\n        var dictionary = new Dictionary<char, int>();\n        for (var c : str) {\n            dictionary[c] = dictionary[c] + 1;\n        }\n        // Return the number of distinct characters\n        return dictionary.Count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Create a dictionary of characters and their counts\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Return the number of distinct characters\n        return dict.Count;",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();",
    "        // Create a dictionary that will hold the unique characters in the string\n        // and initialize it with the first character of the string\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        dict[str[0]] = 1;\n\n        // Loop through the rest of the characters in the string\n        for (int i = 1; i < str.Length; i++) {\n            // If the character is already in the dictionary, then increment the count\n            if (dict.ContainsKey(str[i])) {\n                dict[str[i]]++;\n            }\n            // Otherwise, add the character to the dictionary\n            else {\n                dict[str[i]] = 1;\n            }\n        }\n\n        // Return the number of unique characters in the string\n        return dict.Count;",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return chars.Count(x => hashset.Contains(x));",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().ToCharArray().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;",
    "        // Create a dictionary of characters and their counts\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        for (char c : str.ToCharArray()) {\n            dict[c] = dict[c] + 1;\n        }\n        // Return the number of distinct characters\n        return dict.Count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;",
    "        // Create a dictionary of all the characters in the string\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Return the number of distinct characters in the string\n        return dict.Count;",
    "        // Create a dictionary of all the characters in the string\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Count the number of unique characters\n        return dict.Count;",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var result = Enumerable.From(str).Distinct().ToArray();\n        return result.Length;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;",
    "        var chars = str.ToCharArray();\n        var hashset = new HashSet<char>(chars);\n        return chars.Length - hashset.Count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Create a dictionary of characters and their count\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Return the number of distinct characters\n        return dict.Count;",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();",
    "        var chars = str.ToCharArray();\n        var hashset = new HashSet<char>(chars);\n        return chars.Length - hashset.Count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = str.ToCharArray();\n        var hashset = new HashSet<char>(chars);\n        return chars.Length - hashset.Count;",
    "        return str.ToLower().Select(x => (int)x).Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Create a dictionary of characters and their count\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Return the number of distinct characters\n        return dict.Count;",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();",
    "        // Create a dictionary of all the characters in the string\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Count the number of distinct characters in the string\n        return dict.Count;",
    "        // Create a dictionary of characters and their count\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Convert the dictionary to a sorted list of tuples\n        var sortedList = dict.ToSortedList(a => a.Key);\n        // Return the number of distinct characters\n        return sortedList.Count;",
    "        // Create a dictionary of all the characters in the string\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Return the number of distinct characters in the string\n        return dict.Count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count();",
    "        // Create a dictionary of all the characters in the string\n        var dict = Enumerable.From(str).ToDictionary(x => x, x => x);\n\n        // Return the number of distinct characters in the string\n        return dict.Count;",
    "        // Create a dictionary of all the characters in the string\n        // and count the number of times each character appears\n        var dict = str.ToLower().ToCharArray().Select(c => (char)c).ToDictionary();\n        return dict.Count;",
    "        var result = Enumerable.Empty<char>();\n        for (var c : str) {\n            result = result.Concat(Enumerable.Repeat(c, 1).Distinct());\n        }\n        return result.Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Create a dictionary of all the characters in the string\n        // and count the number of times each character appears\n        // >>> d = {c for c in str}\n        // >>> len(d)\n        // (3L)\n        // >>> len(set(d))\n        // (3L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => x).Distinct().Count();",
    "        return str.ToLower().Select(x => (int)x).Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Create a dictionary that maps each character to its count\n        // Dictionary<char, int> dict = new Dictionary<char, int>();\n        // foreach (char c in str)\n        //     dict[c] = dict[c] + 1;\n        // return dict.Count;\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().ToCharArray().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        return str.ToLower().Select(x => x).Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().ToCharArray().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = str.ToCharArray();\n        var charsCount = chars.Length;\n        var charsCountDistinct = chars.Distinct().Count();\n        return charsCountDistinct;",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;",
    "        // Create a dictionary of all the characters in the string\n        var dict = Enumerable.From(str).ToDictionary(x => x, x => x);\n\n        // Return the number of distinct characters in the string\n        return dict.Count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        return str.ToLower().Select(x => x).Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        return str.ToLower().Distinct().Count();",
    "        // Create a dictionary of characters\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Count the number of distinct characters\n        var count = 0;\n        for (var c : dict) {\n            if (c > 0) {\n                count++;\n            }\n        }\n        return count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Create a dictionary of all the characters in the string\n        IDictionary<char, int> charDict = new Dictionary<char, int>();\n        for (int i = 0; i < str.Length; i++) {\n            char c = str[i];\n            if (!charDict.ContainsKey(c)) {\n                charDict.Add(c, 1);\n            }\n            else {\n                charDict[c]++;\n            }\n        }\n        // Count the number of keys in the dictionary\n        return charDict.Keys.Count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;",
    "        var chars = str.ToCharArray();\n        var hashset = new HashSet<Char>(chars);\n        return hashset.Count;",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();",
    "        return str.ToLower().Select(x => (int)x).Distinct().Count();",
    "        var chars = Enumerable.From(str).Distinct();\n        return chars.Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;",
    "        // Create a dictionary of all the characters in the string\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Return the number of distinct characters in the string\n        return dict.Count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();",
    "        // Create a dictionary of characters and their counts\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c]++;\n        }\n        // Return the number of distinct characters\n        return dict.Count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();",
    "        return str.ToLower().Select(x => x).Distinct().Count();",
    "        // Create a dictionary that maps each character to its count\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        for (char c : str.ToCharArray()) {\n            dict[c]++;\n        }\n        // Return the number of distinct characters\n        return dict.Count;",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();",
    "        // Create a dictionary of characters and their counts\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c]++;\n        }\n        // Return the number of distinct characters\n        return dict.Count;",
    "        return str.ToLower().Distinct().Count();",
    "        var result = 0;\n        for (var ch : str) {\n            result += (ch.ToLower() == ch) ? 1 : 0;\n        }\n        return result;",
    "        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Create a dictionary of characters and their count\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Return the number of distinct characters\n        return dict.Count;",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;",
    "        var chars = Enumerable.From(str).Distinct();\n        return chars.Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Create a dictionary of all the characters in the string\n        var dictionary = new Dictionary<char, int>();\n        for (var c : str) {\n            dictionary[c] = dictionary[c] + 1;\n        }\n        // Count the number of elements in the dictionary\n        return dictionary.Count;",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        return str.ToLower().Select(c => (int)c).Distinct().Count();",
    "        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = str.ToCharArray();\n        var hashset = new HashSet<char>(chars);\n        return chars.Length - hashset.Count;",
    "        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().ToCharArray().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        return str.ToLower().Select(x => (int)x).Distinct().Count();",
    "        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count();",
    "        return str.ToLower().Distinct().Count();",
    "        // Write your code here\n        return str.ToLower().Distinct().Count();",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;",
    "        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return chars.Count(x => hashset.Contains(x));",
    "        // Create a dictionary of characters and their counts\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        for (char c : str) {\n            dict[c]++;\n        }\n        // Count the number of characters in the dictionary\n        return dict.Count;",
    "        var chars = str.ToCharArray();\n        var hashset = new HashSet<char>(chars);\n        return chars.Length - hashset.Count;",
    "        return str.ToLower().Distinct().Count();",
    "        // Create a dictionary of characters\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        for (char c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Count the number of unique characters\n        return dict.Count;",
    "        // Create a dictionary of all the characters in the string\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Count the number of distinct characters\n        return dict.Count;",
    "        // Create a dictionary of all the characters in the string\n        var dictionary = new Dictionary<char, int>();\n        for (var c : str) {\n            dictionary[c] = dictionary[c] + 1;\n        }\n        // Return the number of distinct characters\n        return dictionary.Count;",
    "        var chars = str.ToCharArray();\n        var count = chars.Length;\n        var dict = new Dictionary<char, int>();\n        for (var i = 0; i < chars.Length; i++) {\n            var c = chars[i];\n            dict[c] = dict[c] + 1;\n        }\n        return dict.Count;",
    "        return str.ToLower().Select(x => x).Distinct().Count();"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}