name: HumanEval_68_pluck
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // \"Given a list representing a branch of a tree that has non-negative\
  \ integer nodes\n    // your task is to pluck one of the nodes and return it.\n\
  \    // The plucked node should be the node with the smallest even value.\n    //\
  \ If multiple nodes with the same smallest even value are found return the node\
  \ that has smallest index.\n    // The plucked node should be returned in a list,\
  \ [ smalest_value, its index ],\n    // If there are no even values or the given\
  \ list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new\
  \ long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,\
  \ (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n\
  \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
  \    // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n\
  \    // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
  \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
  \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n\
  \    // so we will choose the first zero, which has the smallest index.\n    //\
  \ Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
  \    public static List<long> Pluck(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
  \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,\
  \ (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,\
  \ (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        long min_even = 0;\n        long min_index = 0;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            if (arr[i] < min_even) {\n                    min_even = arr[i];\n\
    \                    min_index = i;\n                }\n            }\n      \
    \  }\n        if (min_even == 0) {\n            return arr;\n        }\n     \
    \   else {\n            List<long> ret = new List<long>();\n            ret.Add(min_even);\n\
    \            ret.Add(min_index);\n            return ret;\n        }", "     \
    \   long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        if (minIndex == -1)\n            return new List<long>();\n        return\
    \ arr.RemoveAt(minIndex);", "        long min = arr.First(x => x % 2 == 0);\n\
    \        long minIndex = arr.IndexOf(min);\n        if (minIndex == -1) return\
    \ new List<long>();\n        return new List<long>(new long[]{min, minIndex});",
  "        if (arr.Count == 0)\n            return arr;\n        long min = arr[0];\n\
    \        long min_index = 0;\n        for (int i = 1; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                min_index = i;\n            }\n        }\n        if (min_index\
    \ == 0)\n            return arr;\n        return new List<long>(new long[] { min,\
    \ min_index });", "        long min_even = Long.MAX_VALUE;\n        long min_index\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min_even) {\n                min_even = arr[i];\n     \
    \           min_index = i;\n            }\n        }\n        if (min_even ==\
    \ Long.MAX_VALUE)\n            return new List<long>();\n        return new List<long>(new\
    \ long[]{min_even, min_index});", "        if (arr.Count == 0)\n            return\
    \ arr;\n        long min = arr.First(x => x % 2 == 0).Value;\n        long minIndex\
    \ = arr.First(x => x % 2 == 0).Index;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     return new List<long>(new long[]{min, minIndex});", "        long min =\
    \ arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n   \
    \     return arr.Select(x => x == min ? minIndex : -1).ToList();", "        long\
    \ min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        if (minIndex == -1)\n            return new List<long>();\n        else\n\
    \            return new List<long>(new long[] { min, minIndex });", "        long\
    \ min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        if (minIndex == -1) return new List<long>();\n        return new List<long>(new\
    \ long[]{min, minIndex});", "        long min = arr.First(x => x % 2 == 0);\n\
    \        long minIndex = arr.IndexOf(min);\n        if (minIndex == -1)\n    \
    \        return new List<long>();\n        else\n            return new List<long>(new\
    \ long[]{min, minIndex});", "        long min = 0;\n        long minIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (min == 0) {\n                    min = arr[i];\n \
    \                   minIndex = i;\n                }\n                else if\
    \ (arr[i] < min) {\n                    min = arr[i];\n                    minIndex\
    \ = i;\n                }\n            }\n        }\n        if (min == 0) {\n\
    \            return new List<long>();\n        }\n        else {\n           \
    \ return new List<long>(new long[]{min, minIndex});\n        }", "        if (arr.Count\
    \ == 0)\n            return arr;\n        long min = arr.First(x => x % 2 == 0);\n\
    \        long minIndex = arr.IndexOf(min);\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     return new List<long>(new long[]{min, minIndex});", "        long min =\
    \ arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n   \
    \     if (minIndex == -1) return new List<long>();\n        return new List<long>(new\
    \ long[]{min, minIndex});", "        long minEven = Long.MAX_VALUE;\n        long\
    \ minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1)\n            return new List<long>();\n        else\n            return\
    \ new List<long>(new long[]{minEven, minIndex});", "        long min = arr.First(x\
    \ => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n        return arr.Select(x\
    \ => x == min ? minIndex : -1).ToList();", "        long min = arr.First(x =>\
    \ x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n        if (minIndex\
    \ == -1)\n            return new List<long>();\n        return new List<long>(new\
    \ long[] { min, minIndex });", "        if (arr.Count == 0)\n            return\
    \ arr;\n        long min = arr.First();\n        int index = 0;\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n            \
    \    min = arr[i];\n                index = i;\n            }\n        }\n   \
    \     return new List<long>(new long[]{min, index});", "        long min = arr.First(x\
    \ => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n        if (minIndex\
    \ == -1) return new List<long>();\n        return new List<long>(new long[]{min,\
    \ minIndex});", "        long min = arr.First(x => x % 2 == 0);\n        long\
    \ minIndex = arr.IndexOf(min);\n        if (minIndex == -1)\n            return\
    \ new List<long>();\n        else\n            return new List<long>(new long[]{min,\
    \ minIndex});", "        long minEven = Long.MAX_VALUE;\n        long minIndex\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < minEven) {\n                minEven = arr[i];\n       \
    \         minIndex = i;\n            }\n        }\n        if (minEven == Long.MAX_VALUE)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>(new\
    \ long[]{minEven, minIndex});", "        if (arr.Count == 0)\n            return\
    \ arr;\n        long min = arr[0];\n        int minIndex = 0;\n        for (int\
    \ i = 1; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                minIndex = i;\n          \
    \  }\n        }\n        return new List<long>(new long[]{min, minIndex});", " \
    \       long min = 0;\n        long minIndex = 0;\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i]\
    \ < min) {\n                    min = arr[i];\n                    minIndex =\
    \ i;\n                }\n            }\n        }\n        if (min == 0) {\n \
    \           return new List<long>(new long[]{min, minIndex});\n        }\n   \
    \     else {\n            return new List<long>();\n        }", "        if (arr.Count\
    \ == 0)\n            return arr;\n        long min = arr[0];\n        int minIndex\
    \ = 0;\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ minIndex = i;\n            }\n        }\n        return new List<long>(new long[]{min,\
    \ minIndex});", "        if (arr.Count == 0)\n            return arr;\n      \
    \  long min = arr[0];\n        long minIndex = 0;\n        for (int i = 1; i <\
    \ arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n    \
    \            min = arr[i];\n                minIndex = i;\n            }\n   \
    \     }\n        return new List<long>(new long[]{min, minIndex});", "       \
    \ if (arr.Count == 0)\n            return arr;\n        long min = arr[0];\n \
    \       int index = 0;\n        for (int i = 1; i < arr.Count; i++) {\n      \
    \      if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        return new List<long>(new\
    \ long[]{min, index});", "        long min = arr.First(x => x % 2 == 0);\n   \
    \     if (min == 0)\n            return arr.Select(x => x % 2 == 0).OrderBy(x\
    \ => x).ToList();\n        else\n            return arr.OrderBy(x => x).ToList();",
  "        if (arr.Count == 0)\n            return arr;\n        long min = arr.First();\n\
    \        long minIndex = 0;\n        for (int i = 1; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        return new List<long>(new\
    \ long[]{min, minIndex});", "        long min = arr.First(x => x % 2 == 0);\n\
    \        long minIndex = arr.IndexOf(min);\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     return new List<long>(new long[]{min, minIndex});", "        long minEven\
    \ = Long.MAX_VALUE;\n        long minIndex = -1;\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < minEven) {\n\
    \                minEven = arr[i];\n                minIndex = i;\n          \
    \  }\n        }\n        if (minIndex == -1)\n            return new List<long>();\n\
    \        return new List<long>(new long[]{minEven, minIndex});", "        long\
    \ min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        return arr.Select(x => x == min ? minIndex : -1).ToList();", "      \
    \  long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        return arr.Where(x => x % 2 == 0).ToList();", "        long min = arr.First(x\
    \ => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n        if (minIndex\
    \ == -1) return new List<long>();\n        return new List<long>(new long[]{min,\
    \ minIndex});", "        long min = arr.First(x => x % 2 == 0);\n        if (min\
    \ == 0) {\n            return arr.Where(x => x % 2 == 0).ToList();\n        }\n\
    \        else {\n            return new List<long>(new long[]{min, arr.IndexOf(min)});\n\
    \        }", "        long min = arr.First(x => x % 2 == 0);\n        long minIndex\
    \ = arr.IndexOf(min);\n        return arr.Where(x => x % 2 == 0).ToList();", " \
    \       long min = 0;\n        long minIndex = 0;\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i]\
    \ < min) {\n                    min = arr[i];\n                    minIndex =\
    \ i;\n                }\n            }\n        }\n        if (min == 0) {\n \
    \           return arr.OrderBy(a => a).Select(a => a).ToList();\n        }\n \
    \       else {\n            return new List<long>() {\n                public\
    \ long get(int i) {\n                    return arr[i];\n                }\n \
    \               public int Count { get { return arr.Count; } }\n             \
    \   public long[] ToArray() { return arr.ToArray(); }\n                public\
    \ long this[int i] { return arr[i]; }\n                public long[] OrderBy(IComparer<long>\
    \ comparer) { return arr.OrderBy(comparer); }\n                public long[] OrderByDescending(IComparer<long>\
    \ comparer) { return arr.OrderByDescending(comparer); }\n                public\
    \ long First() { return arr[0]; }\n                public long Last() { return\
    \ arr[arr.Count - 1]; }\n                public long[] ToList() { return arr.ToList();\
    \ }\n                public long[] Where(Predicate<long> predicate) { return arr.Where(predicate);\
    \ }\n                public long[] Where(Predicate<long> predicate, IComparer<long>\
    \ comparer) { return arr.Where(predicate, comparer); }\n                public\
    \ long[] Where(Predicate<long> predicate, IComparer<long> comparer, int count)\
    \ { return arr.Where(predicate, comparer, count); }\n                public long[]\
    \ Where(Predicate<long> predicate, IComparer<long> comparer, int count, int skip)\
    \ { return arr.Where(predicate, comparer, count, skip); }\n                public\
    \ long[] OrderBy(Predicate<long> predicate, IComparer<long> comparer) { return\
    \ arr.OrderBy(predicate, comparer); }\n                public long[] OrderByDescending(Predicate<long>\
    \ predicate, IComparer<long> comparer", "        long min = arr.First(x => x %\
    \ 2 == 0);\n        long minIndex = arr.IndexOf(min);\n        if (minIndex ==\
    \ -1)\n            return new List<long>();\n        return new List<long>(new\
    \ long[]{min, minIndex});", "        long minEven = Long.MAX_VALUE;\n        long\
    \ minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        else {\n\
    \            return new List<long>(new long[]{minEven, minIndex});\n        }",
  "        long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        if (minIndex == -1)\n            return new List<long>();\n        return\
    \ arr.Select(x => x == min ? minIndex : -1).ToList();", "        if (arr == null)\
    \ {\n            return new List<long>();\n        }\n        if (arr.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        long min = arr.First();\n\
    \        long minIndex = 0;\n        for (int i = 1; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        return new List<long>(new\
    \ long[]{min, minIndex});", "        if (arr == null || arr.Count == 0)\n    \
    \        return new List<long>();\n        long min = arr.First(x => x % 2 ==\
    \ 0);\n        long minIndex = arr.IndexOf(min);\n        List<long> result =\
    \ new List<long>();\n        result.Add(min);\n        result.Add(minIndex);\n\
    \        return result;", "        long min = arr.First(x => x % 2 == 0);\n  \
    \      long minIndex = arr.IndexOf(min);\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     return new List<long>(new long[]{min, minIndex});", "        long min =\
    \ arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 &&\
    \ arr[i] < min) {\n                min = arr[i];\n                minIndex = i;\n\
    \            }\n        }\n        return new List<long>(new long[]{min, minIndex});",
  "        long minEven = Long.MAX_VALUE;\n        long minIndex = -1;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i]\
    \ < minEven) {\n                minEven = arr[i];\n                minIndex =\
    \ i;\n            }\n        }\n        if (minIndex == -1) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>(new long[]{minEven,\
    \ minIndex});", "        long minEven = 0;\n        long minIndex = 0;\n     \
    \   for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n\
    \                if (arr[i] < minEven) {\n                    minEven = arr[i];\n\
    \                    minIndex = i;\n                }\n            }\n       \
    \ }\n        if (minEven == 0) {\n            return arr;\n        }\n       \
    \ else {\n            return new List<long>(new long[]{minEven, minIndex});\n\
    \        }", "        if (arr == null || arr.Count == 0)\n            return new\
    \ List<long>();\n        int minEven = 0;\n        int minIndex = 0;\n       \
    \ for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n\
    \                if (minEven == 0) {\n                    minEven = arr[i];\n\
    \                    minIndex = i;\n                }\n                else if\
    \ (arr[i] < minEven) {\n                    minEven = arr[i];\n              \
    \      minIndex = i;\n                }\n            }\n        }\n        if\
    \ (minEven == 0)\n            return new List<long>();\n        return new List<long>(new\
    \ long[]{minEven, minIndex});", "        long minEven = Long.MAX_VALUE;\n    \
    \    long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven =\
    \ arr[i];\n                minIndex = i;\n            }\n        }\n        if\
    \ (minIndex == -1)\n            return new List<long>();\n        return new List<long>(new\
    \ long[]{minEven, minIndex});", "        if (arr == null || arr.Count == 0)\n\
    \            return new List<long>();\n        long min = arr.First(x => x % 2\
    \ == 0);\n        long minIndex = arr.IndexOf(min);\n        for (int i = minIndex\
    \ + 1; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                minIndex = i;\n          \
    \  }\n        }\n        return new List<long>(new long[]{min, minIndex});", " \
    \       long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        if (minIndex == -1)\n            return new List<long>();\n        return\
    \ new List<long>(new long[]{min, minIndex});", "        if (arr == null || arr.Count\
    \ == 0)\n            return new List<long>();\n        long min = arr.First(x\
    \ => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n        List<long>\
    \ result = new List<long>();\n        result.Add(min);\n        result.Add(minIndex);\n\
    \        return result;", "        if (arr.Count == 0)\n            return arr;\n\
    \        long min = arr[0];\n        int index = 0;\n        for (int i = 1; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n  \
    \              min = arr[i];\n                index = i;\n            }\n    \
    \    }\n        return new List<long>(new long[]{min, index});", "        long\
    \ min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        if (minIndex == -1)\n            return new List<long>();\n        return\
    \ new List<long>(new long[]{min, minIndex});", "        long min = arr.First(x\
    \ => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n        return new\
    \ List<long>(new long[]{min, minIndex});", "        long min = arr.First(x =>\
    \ x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n        if (minIndex\
    \ == -1)\n            return new List<long>();\n        return arr.Where(x =>\
    \ x % 2 == 0).OrderBy(x => x).First(x => x == min);", "        if (arr == null\
    \ || arr.Count == 0)\n            return new List<long>();\n        long min =\
    \ arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n   \
    \     List<long> result = new List<long>();\n        result.Add(min);\n      \
    \  result.Add(minIndex);\n        return result;", "        if (arr.Count == 0)\
    \ {\n            return arr;\n        }\n        long min = arr.First(x => x %\
    \ 2 == 0);\n        int index = arr.FirstIndexOf(x => x == min);\n        return\
    \ new List<long>(new long[]{min, index});", "        long minEven = Long.MAX_VALUE;\n\
    \        long minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven\
    \ = arr[i];\n                minIndex = i;\n            }\n        }\n       \
    \ if (minEven == Long.MAX_VALUE) {\n            return new List<long>();\n   \
    \     }\n        return new List<long>(new long[]{minEven, minIndex});", "   \
    \     long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.FirstIndex(x\
    \ => x % 2 == 0);\n        for (int i = 0; i < arr.Count; i++) {\n           \
    \ if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n    \
    \            minIndex = i;\n            }\n        }\n        return new List<long>(new\
    \ long[]{min, minIndex});", "        if (arr == null || arr.Count == 0)\n    \
    \        return new List<long>();\n        long min = arr[0];\n        int min_index\
    \ = 0;\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ min_index = i;\n            }\n        }\n        if (min_index == 0)\n    \
    \        return new List<long>();\n        return new List<long>{min, min_index};",
  "        if (arr.Count == 0)\n            return arr;\n        long min = arr[0];\n\
    \        int min_index = 0;\n        for (int i = 1; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                min_index = i;\n            }\n        }\n        return new\
    \ List<long>(new long[]{min, min_index});", "        long min = arr.First(x =>\
    \ x % 2 == 0);\n        if (min == 0) {\n            return arr.Select(x => x).OrderBy(x\
    \ => x).ToList();\n        }\n        else {\n            return arr.OrderBy(x\
    \ => x).ToList();\n        }", "        long min = arr.First(x => x % 2 == 0);\n\
    \        long minIndex = arr.IndexOf(min);\n        return new List<long>(new\
    \ long[]{min, minIndex});", "        if (arr == null || arr.Count == 0)\n    \
    \        return new List<long>();\n        long min = arr[0];\n        int index\
    \ = 0;\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ index = i;\n            }\n        }\n        return new List<long>(new long[]{min,\
    \ index});", "        long min = arr.First(x => x % 2 == 0);\n        long minIndex\
    \ = arr.IndexOf(min);\n        if (minIndex == -1) return new List<long>();\n\
    \        return new List<long>(new long[]{min, minIndex});", "        long min\
    \ = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n \
    \       if (minIndex == -1)\n            return new List<long>();\n        return\
    \ new List<long>(new long[]{min, minIndex});", "        long min = arr.First(x\
    \ => x % 2 == 0);\n        if (min == 0)\n            return arr.Where(x => x\
    \ % 2 == 0).ToList();\n        else\n            return arr.Where(x => x % 2 !=\
    \ 0).ToList();", "        long min = arr.First(x => x % 2 == 0);\n        long\
    \ minIndex = arr.IndexOf(min);\n        return arr.Select(x => x == min ? minIndex\
    \ : -1).ToList();", "        if (arr == null || arr.Count == 0)\n            return\
    \ new List<long>();\n        long min = arr.First(x => x % 2 == 0).Value;\n  \
    \      long minIndex = arr.First(x => x % 2 == 0).Index;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \                min = arr[i];\n                minIndex = i;\n            }\n\
    \        }\n        return new List<long>(new long[]{min, minIndex});", "    \
    \    if (arr.Count == 0)\n            return arr;\n        long min = arr[0];\n\
    \        int minIndex = 0;\n        for (int i = 1; i < arr.Count; i++) {\n  \
    \          if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        return new List<long>(new\
    \ long[] { min, minIndex });", "        long minEven = Long.MAX_VALUE;\n     \
    \   long minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minEven\
    \ == Long.MAX_VALUE) {\n            return new List<long>();\n        }\n    \
    \    return new List<long>(new long[]{minEven, minIndex});", "        long min\
    \ = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n \
    \       if (minIndex == -1)\n            return new List<long>();\n        return\
    \ new List<long>(new long[]{min, minIndex});", "        long min = arr.First(x\
    \ => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n        if (minIndex\
    \ == -1) return new List<long>();\n        return new List<long>(new long[]{min,\
    \ minIndex});", "        if (arr == null || arr.Count == 0)\n            return\
    \ new List<long>();\n        long min = arr.First(x => x % 2 == 0);\n        long\
    \ minIndex = arr.IndexOf(min);\n        List<long> result = new List<long>();\n\
    \        result.Add(min);\n        result.Add(minIndex);\n        return result;",
  "        if (arr.Count == 0)\n            return arr;\n        long min = arr.First(x\
    \ => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                minIndex = i;\n          \
    \  }\n        }\n        return new List<long>(new long[] { min, minIndex });",
  "        if (arr == null || arr.Count == 0)\n            return new List<long>();\n\
    \        long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex\
    \ = i;\n            }\n        }\n        return new List<long>(new long[] { min,\
    \ minIndex });", "        long min = arr.First(x => x % 2 == 0);\n        if (min\
    \ == 0)\n            return arr.OrderBy(x => x).Select(x => x % 2 == 0 ? x : -1).ToList();\n\
    \        else\n            return arr.OrderBy(x => x).Select(x => x % 2 == 0 ?\
    \ x : -1).ToList().OrderBy(x => x);", "        long min = arr.First(x => x % 2\
    \ == 0);\n        if (min == 0) {\n            return arr.OrderBy(x => x).Select(x\
    \ => x % 2 == 0).ToList();\n        }\n        else {\n            return arr.OrderBy(x\
    \ => x).Select(x => x % 2 == 0).ToList().OrderBy(x => x);\n        }", "     \
    \   long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        if (minIndex == -1)\n            return new List<long>();\n        return\
    \ new List<long>(new long[]{min, minIndex});", "        long minEven = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven\
    \ = arr[i];\n                minIndex = i;\n            }\n        }\n       \
    \ if (minIndex == -1) {\n            return new List<long>();\n        }\n   \
    \     return new List<long>(new long[]{minEven, minIndex});", "        long min\
    \ = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n \
    \       if (minIndex == -1) return new List<long>();\n        return new List<long>(new\
    \ long[]{min, minIndex});", "        long min = arr.First(x => x % 2 == 0);\n\
    \        long minIndex = arr.IndexOf(min);\n        return new List<long>(new\
    \ long[]{min, minIndex});", "        long min = arr.First(x => x % 2 == 0);\n\
    \        long minIndex = arr.IndexOf(min);\n        return new List<long>(new\
    \ long[]{min, minIndex});", "        long minEven = Long.MAX_VALUE;\n        long\
    \ minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1)\n            return new List<long>();\n        return new List<long>(new\
    \ long[]{minEven, minIndex});", "        if (arr.Count == 0)\n            return\
    \ arr;\n        long min = arr.First(x => x % 2 == 0);\n        long minIndex\
    \ = arr.IndexOf(min);\n        for (int i = minIndex + 1; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n                min =\
    \ arr[i];\n                minIndex = i;\n            }\n        }\n        return\
    \ new List<long>(new long[]{min, minIndex});", "        long min = 0;\n      \
    \  long minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n       \
    \     if (arr[i] % 2 == 0) {\n                if (arr[i] < min) {\n          \
    \          min = arr[i];\n                    minIndex = i;\n                }\n\
    \            }\n        }\n        if (min == 0) {\n            return arr.OrderBy(a\
    \ => a).Select(a => a).ToList();\n        }\n        else {\n            return\
    \ new List<long>() {\n                public long get(int i) {\n             \
    \       return arr[i];\n                }\n                public int Count {\n\
    \                    get {\n                        return arr.Count;\n      \
    \              }\n                }\n                public int get_Item(int i)\
    \ {\n                    return arr.get_Item(i);\n                }\n        \
    \        public void set_Item(int i, int value) {\n                    arr.set_Item(i,\
    \ value);\n                }\n                public long[] ToArray() {\n    \
    \                return arr.ToArray();\n                }\n                public\
    \ long[] ToArray(int i) {\n                    return arr.ToArray(i);\n      \
    \          }\n                public long get_Key(int i) {\n                 \
    \   return arr.get_Key(i);\n                }\n                public void set_Key(int\
    \ i, long value) {\n                    arr.set_Key(i, value);\n             \
    \   }\n                public long get_Value(int i) {\n                    return\
    \ arr.get_Value(i);\n                }\n                public void set_Value(int\
    \ i, long value) {\n                    arr.set_Value(i, value);\n           \
    \     }\n                public long IndexOf(long value) {\n                 \
    \   return arr.IndexOf(value);\n                }\n                public long\
    \ LastIndexOf(long value) {\n                    return arr.LastIndexOf(value);\n\
    \                }\n                public long[] ToList() {\n               \
    \     return arr.ToList();\n                }\n                public long[] OrderBy(Func<long,\
    \ int> keySelector) {\n                    return arr.OrderBy(keySelector);\n\
    \                }\n                public long[] OrderByDescending(Func<long,\
    \ int> keySelector) {", "        long min = arr.First(x => x % 2 == 0);\n    \
    \    long minIndex = arr.IndexOf(min);\n        if (minIndex == -1)\n        \
    \    return new List<long>();\n        return new List<long>(new long[]{min, minIndex});",
  "        if (arr.Count == 0)\n            return arr;\n        long min = arr[0];\n\
    \        long minIndex = 0;\n        for (int i = 1; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        return new List<long>(new\
    \ long[]{min, minIndex});", "        long min = arr.First(x => x % 2 == 0);\n\
    \        long minIndex = arr.IndexOf(min);\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     return new List<long>(new long[]{min, minIndex});", "        if (arr.Count\
    \ == 0)\n            return arr;\n        long min = arr.First(x => x % 2 == 0);\n\
    \        long minIndex = arr.IndexOf(min);\n        if (minIndex == 0)\n     \
    \       return arr;\n        List<long> result = new List<long>();\n        result.Add(min);\n\
    \        result.Add(minIndex);\n        return result;", "        if (arr == null\
    \ || arr.Count == 0)\n            return new List<long>();\n        long min =\
    \ arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n   \
    \     List<long> result = new List<long>();\n        result.Add(min);\n      \
    \  result.Add(minIndex);\n        return result;", "        long min = arr.First(x\
    \ => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n        if (minIndex\
    \ == -1)\n            return new List<long>();\n        return new List<long>(new\
    \ long[]{min, minIndex});", "        long min = arr.First(x => x % 2 == 0);\n\
    \        long minIndex = arr.IndexOf(min);\n        return arr.Select(x => x ==\
    \ min ? minIndex : -1).ToList();", "        long minEven = Long.MAX_VALUE;\n \
    \       long minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n  \
    \          if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven\
    \ = arr[i];\n                minIndex = i;\n            }\n        }\n       \
    \ if (minEven == Long.MAX_VALUE)\n            return new List<long>();\n     \
    \   else\n            return new List<long>(new long[]{minEven, minIndex});",
  "        long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        if (minIndex == -1)\n            return new List<long>();\n        return\
    \ arr.Select(x => x == min ? minIndex : -1).ToList();", "        long min = arr.First(x\
    \ => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                minIndex = i;\n          \
    \  }\n        }\n        return new List<long>(new long[]{min, minIndex});", " \
    \       long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        if (minIndex == -1)\n            return new List<long>();\n        return\
    \ new List<long>(new long[]{min, minIndex});", "        long minEven = Long.MAX_VALUE;\n\
    \        long minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven\
    \ = arr[i];\n                minIndex = i;\n            }\n        }\n       \
    \ if (minEven == Long.MAX_VALUE) {\n            return new List<long>();\n   \
    \     }\n        return new List<long>(new long[]{minEven, minIndex});", "   \
    \     if (arr == null || arr.Count == 0) return new List<long>();\n        long\
    \ min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        List<long> result = new List<long>();\n        result.Add(min);\n   \
    \     result.Add(minIndex);\n        return result;", "        if (arr.Count ==\
    \ 0) return arr;\n        long min = arr[0];\n        int index = 0;\n       \
    \ for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n                min = arr[i];\n                index = i;\n      \
    \      }\n        }\n        return new List<long>(new long[]{min, index});",
  "        long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        return arr.Select(x => x == min ? minIndex : -1).ToList();", "      \
    \  long minEven = Long.MAX_VALUE;\n        long minIndex = 0;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < minEven)\
    \ {\n                minEven = arr[i];\n                minIndex = i;\n      \
    \      }\n        }\n        if (minEven == Long.MAX_VALUE) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>(new long[]{minEven,\
    \ minIndex});", "        long min = arr.First(x => x % 2 == 0);\n        long\
    \ minIndex = arr.IndexOf(min);\n        if (minIndex == -1) return new List<long>();\n\
    \        return new List<long>(new long[]{min, minIndex});", "        long min\
    \ = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n \
    \       if (minIndex == -1)\n            return new List<long>();\n        return\
    \ new List<long>(new long[]{min, minIndex});", "        long minEven = Long.MAX_VALUE;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven\
    \ = arr[i];\n                minIndex = i;\n            }\n        }\n       \
    \ if (minIndex == -1) {\n            return new List<long>();\n        }\n   \
    \     return new List<long>(new long[]{minEven, minIndex});", "        long min\
    \ = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n \
    \       return arr.Select(x => (x == min) ? minIndex : -1).ToList();", "     \
    \   long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        return arr.Select(x => (x == min) ? minIndex : -1).ToList();", "    \
    \    if (arr.Count == 0)\n            return arr;\n        long min = arr[0];\n\
    \        int minIndex = 0;\n        for (int i = 1; i < arr.Count; i++) {\n  \
    \          if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        return new List<long>(new\
    \ long[] { min, minIndex });", "        long min = arr.First(x => x % 2 == 0);\n\
    \        long minIndex = arr.IndexOf(min);\n        if (minIndex == -1)\n    \
    \        return new List<long>();\n        return new List<long>(new long[]{min,\
    \ minIndex});", "        long min = arr.First(x => x % 2 == 0);\n        long\
    \ minIndex = arr.IndexOf(min);\n        if (minIndex == -1)\n            return\
    \ new List<long>();\n        else\n            return new List<long>(new long[]{min,\
    \ minIndex});", "        long min = arr.First(x => x % 2 == 0);\n        long\
    \ minIndex = arr.IndexOf(min);\n        if (minIndex == -1)\n            return\
    \ new List<long>();\n        return arr.Where(x => x % 2 == 0).OrderBy(x => x).First(x\
    \ => x == min);", "        if (arr == null || arr.Count == 0)\n            return\
    \ new List<long>();\n        long min = arr.First(x => x % 2 == 0);\n        long\
    \ minIndex = arr.IndexOf(min);\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        return new List<long>(new\
    \ long[]{min, minIndex});", "        long min = arr.First(x => x % 2 == 0);\n\
    \        long minIndex = arr.FirstIndex(x => x % 2 == 0);\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                minIndex = i;\n          \
    \  }\n        }\n        return new List<long>(new long[]{min, minIndex});", " \
    \       long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        return new List<long>(new long[]{min, minIndex});", "        long min\
    \ = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n \
    \       return arr.Where(x => x % 2 == 0).OrderBy(x => x).Select(x => new long[]\
    \ { x, minIndex });", "        long min = arr.First(x => x % 2 == 0);\n      \
    \  long minIndex = arr.IndexOf(min);\n        if (minIndex == -1)\n          \
    \  return new List<long>();\n        else\n            return new List<long>(new\
    \ long[]{min, minIndex});", "        if (arr.Count == 0)\n            return arr;\n\
    \        long min = arr[0];\n        int index = 0;\n        for (int i = 1; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n  \
    \              min = arr[i];\n                index = i;\n            }\n    \
    \    }\n        return new List<long>(new long[]{min, index});", "        long\
    \ min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        if (minIndex == -1) return new List<long>();\n        return arr.Select(x\
    \ => x == min ? minIndex : -1).ToList();", "        if (arr == null || arr.Count\
    \ == 0)\n            return arr;\n        long min = arr.First(x => x % 2 == 0);\n\
    \        long minIndex = arr.IndexOf(min);\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     return new List<long>(new long[]{min, minIndex});", "        long min =\
    \ arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n   \
    \     if (minIndex == -1)\n            return new List<long>();\n        return\
    \ arr.Select(x => (x == min) ? minIndex : -1).ToList();", "        if (arr.Count\
    \ == 0)\n            return arr;\n        long min = arr.First(x => x % 2 == 0);\n\
    \        long minIndex = arr.IndexOf(min);\n        for (int i = minIndex + 1;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \                min = arr[i];\n                minIndex = i;\n            }\n\
    \        }\n        return new List<long>(new long[]{min, minIndex});", "    \
    \    long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        if (minIndex == -1)\n            return new List<long>();\n        return\
    \ arr.Select(x => x == min ? minIndex : -1).ToList();", "        long min = arr.First(x\
    \ => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n        if (minIndex\
    \ == -1)\n            return new List<long>();\n        return new List<long>(new\
    \ long[]{min, minIndex});", "        long min = arr.First(x => x % 2 == 0);\n\
    \        long minIndex = arr.IndexOf(min);\n        return new List<long>(new\
    \ long[]{min, minIndex});", "        if (arr.Count == 0)\n            return arr;\n\
    \        long min = arr[0];\n        int index = 0;\n        for (int i = 1; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n  \
    \              min = arr[i];\n                index = i;\n            }\n    \
    \    }\n        return new List<long>(new long[]{min, index});", "        if (arr\
    \ == null || arr.Count == 0)\n            return new List<long>();\n        long\
    \ min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex\
    \ = i;\n            }\n        }\n        return new List<long>(new long[] { min,\
    \ minIndex });", "        long min = arr.First(x => x % 2 == 0);\n        long\
    \ minIndex = arr.IndexOf(min);\n        if (minIndex == -1) return new List<long>();\n\
    \        return arr.Select(x => x == min ? minIndex : -1).ToList();", "      \
    \  long min_even = arr.First(x => x % 2 == 0);\n        long min_index = arr.First(x\
    \ => x == min_even);\n        return arr.Where(x => x == min_even).ToList();",
  "        long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        return arr.Where(x => x % 2 == 0).OrderBy(x => x).Select(x => new long[]\
    \ { x, minIndex }).ToList();", "        long min = arr.First(x => x % 2 == 0);\n\
    \        long minIndex = arr.IndexOf(min);\n        if (minIndex == -1) return\
    \ new List<long>();\n        return new List<long>(new long[]{min, minIndex});",
  "        long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        if (minIndex == -1) return new List<long>();\n        return arr.Select(x\
    \ => x == min ? minIndex : -1).ToList();", "        if (arr.Count == 0)\n    \
    \        return arr;\n        long min = arr.First();\n        long minIndex =\
    \ 0;\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] %\
    \ 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex\
    \ = i;\n            }\n        }\n        return new List<long>(new long[]{min,\
    \ minIndex});", "        long min = arr.First(x => x % 2 == 0);\n        long\
    \ minIndex = arr.IndexOf(min);\n        if (minIndex == -1)\n            return\
    \ new List<long>();\n        else\n            return new List<long>(new long[]{min,\
    \ minIndex});", "        long min = arr.First(x => x % 2 == 0);\n        long\
    \ minIndex = arr.IndexOf(min);\n        if (minIndex == -1)\n            return\
    \ new List<long>();\n        return new List<long>(new long[]{min, minIndex});",
  "        long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        if (minIndex == -1)\n            return new List<long>();\n        else\n\
    \            return new List<long>(new long[]{min, minIndex});", "        if (arr.Count\
    \ == 0)\n            return arr;\n        long min = arr[0];\n        int index\
    \ = 0;\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ index = i;\n            }\n        }\n        return new List<long>(new long[]{min,\
    \ index});", "        if (arr.Count == 0)\n            return arr;\n        long\
    \ min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        for (int i = minIndex + 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                min = arr[i];\n                minIndex = i;\n\
    \            }\n        }\n        return new List<long>(new long[] { min, minIndex\
    \ });", "        long minEven = Long.MAX_VALUE;\n        long minIndex = -1;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < minEven) {\n                minEven = arr[i];\n              \
    \  minIndex = i;\n            }\n        }\n        if (minIndex == -1) {\n  \
    \          return new List<long>();\n        }\n        return new List<long>(new\
    \ long[]{minEven, minIndex});", "        long minEven = Long.MAX_VALUE;\n    \
    \    long minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n     \
    \       if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven =\
    \ arr[i];\n                minIndex = i;\n            }\n        }\n        if\
    \ (minEven == Long.MAX_VALUE)\n            return new List<long>();\n        else\n\
    \            return new List<long>(new long[]{minEven, minIndex});", "       \
    \ long minEven = Long.MAX_VALUE;\n        long minIndex = 0;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < minEven)\
    \ {\n                minEven = arr[i];\n                minIndex = i;\n      \
    \      }\n        }\n        if (minEven == Long.MAX_VALUE)\n            return\
    \ new List<long>();\n        else\n            return new List<long>(new long[]{minEven,\
    \ minIndex});", "        long min = arr.First(x => x % 2 == 0);\n        long\
    \ minIndex = arr.IndexOf(min);\n        return arr.Where(x => x % 2 == 0).OrderBy(x\
    \ => x).ToList();", "        long min = arr.First(x => x % 2 == 0);\n        long\
    \ minIndex = arr.IndexOf(min);\n        if (minIndex == -1) return new List<long>();\n\
    \        return arr.Select(x => x == min ? minIndex : -1).ToList();", "      \
    \  long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        return arr.Where(x => x % 2 == 0).OrderBy(x => x).ToList();", "     \
    \   if (arr == null || arr.Count == 0)\n            return arr;\n        long\
    \ min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex\
    \ = i;\n            }\n        }\n        return new List<long>(new long[]{min,\
    \ minIndex});", "        long minEven = Long.MAX_VALUE;\n        long minIndex\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < minEven) {\n                minEven = arr[i];\n       \
    \         minIndex = i;\n            }\n        }\n        if (minEven == Long.MAX_VALUE)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>(new\
    \ long[]{minEven, minIndex});", "        long min = arr.First(x => x % 2 == 0);\n\
    \        long minIndex = arr.IndexOf(min);\n        return arr.Where(x => x %\
    \ 2 == 0).OrderBy(x => x).Select(x => x).ToList();", "        long min = arr.First(x\
    \ => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n        return new\
    \ List<long>(new long[]{min, minIndex});", "        long min = arr.First(x =>\
    \ x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n        if (minIndex\
    \ == -1) return new List<long>();\n        return arr.Select(x => x == min ? minIndex\
    \ : -1).ToList();", "        if (arr == null || arr.Count == 0) return new List<long>();\n\
    \        long min = arr.First(x => x % 2 == 0);\n        int index = arr.IndexOf(min);\n\
    \        if (index == -1) return new List<long>();\n        return new List<long>(new\
    \ long[]{min, index});", "        long min = arr.First(x => x % 2 == 0);\n   \
    \     long minIndex = arr.IndexOf(min);\n        if (minIndex == -1)\n       \
    \     return new List<long>();\n        return new List<long>(new long[]{min,\
    \ minIndex});", "        if (arr == null) return new List<long>();\n        if\
    \ (arr.Count == 0) return new List<long>();\n        long min = arr[0];\n    \
    \    int index = 0;\n        for (int i = 1; i < arr.Count; i++) {\n         \
    \   if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n  \
    \              index = i;\n            }\n        }\n        if (min % 2 == 0)\
    \ {\n            return new List<long>(new long[]{min, index});\n        }\n \
    \       else {\n            return new List<long>();\n        }", "        long\
    \ min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        if (minIndex == -1)\n            return new List<long>();\n        return\
    \ new List<long>(new long[]{min, minIndex});", "        long min = arr.First(x\
    \ => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n        return new\
    \ List<long>(new long[]{min, minIndex});", "        long min = 0;\n        long\
    \ minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0) {\n                if (arr[i] < min) {\n                 \
    \   min = arr[i];\n                    minIndex = i;\n                }\n    \
    \        }\n        }\n        if (min == 0) {\n            return arr.OrderBy(x\
    \ => x).Select(x => new long[]{x, i}).ToList();\n        }\n        else {\n \
    \           return arr.OrderBy(x => x).Select(x => new long[]{x, i}).ToList().OrderBy(x\
    \ => x[1]).First();\n        }", "        long min = 0;\n        long minIndex\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (arr[i] < min) {\n                    min =\
    \ arr[i];\n                    minIndex = i;\n                }\n            }\n\
    \        }\n        if (min == 0) {\n            return new List<long>();\n  \
    \      }\n        else {\n            return new List<long>(new long[]{min, minIndex});\n\
    \        }", "        long min = arr.First(x => x % 2 == 0);\n        long minIndex\
    \ = arr.IndexOf(min);\n        return arr.Select(x => x == min ? minIndex : -1).ToList();",
  "        long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        return arr.Where(x => x % 2 == 0).ToList();", "        if (arr == null\
    \ || arr.Count == 0) return new List<long>();\n        long min = arr.First(x\
    \ => x % 2 == 0).Value;\n        long minIndex = 0;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n  \
    \              min = arr[i];\n                minIndex = i;\n            }\n \
    \       }\n        return new List<long>(new long[]{min, minIndex});", "     \
    \   long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        return arr.Where(x => x % 2 == 0).OrderBy(x => x).Select(x => new long[]\
    \ { x, minIndex }).ToList();", "        long minEven = Long.MAX_VALUE;\n     \
    \   long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n     \
    \       if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven =\
    \ arr[i];\n                minIndex = i;\n            }\n        }\n        if\
    \ (minIndex == -1)\n            return new List<long>();\n        return new List<long>(new\
    \ long[]{minEven, minIndex});", "        long min = arr.First(x => x % 2 == 0);\n\
    \        long minIndex = arr.IndexOf(min);\n        if (minIndex == -1) return\
    \ new List<long>();\n        return new List<long>(new long[]{min, minIndex});",
  "        long minEven = Long.MaxValue;\n        long minIndex = -1;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i]\
    \ < minEven) {\n                minEven = arr[i];\n                minIndex =\
    \ i;\n            }\n        }\n        if (minIndex == -1)\n            return\
    \ new List<long>();\n        else\n            return new List<long>(new long[]{minEven,\
    \ minIndex});", "        long min = arr.First(x => x % 2 == 0);\n        long\
    \ minIndex = arr.IndexOf(min);\n        if (minIndex == -1)\n            return\
    \ new List<long>();\n        return arr.Where(x => x % 2 == 0).OrderBy(x => x).First(x\
    \ => x == min);", "        if (arr.Count == 0)\n            return arr;\n    \
    \    long min = arr[0];\n        int index = 0;\n        for (int i = 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                index = i;\n            }\n        }\n      \
    \  return new List<long>(new long[]{min, index});", "        if (arr.Count ==\
    \ 0)\n            return arr;\n        long min = arr[0];\n        int index =\
    \ 0;\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] %\
    \ 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index\
    \ = i;\n            }\n        }\n        return new List<long>(new long[]{min,\
    \ index});", "        if (arr.Count == 0)\n            return arr;\n        long\
    \ min = arr[0];\n        int index = 0;\n        for (int i = 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                index = i;\n            }\n        }\n      \
    \  return new List<long>(new long[]{min, index});", "        long min = arr.First(x\
    \ => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n        if (minIndex\
    \ == -1)\n            return new List<long>();\n        return arr.Select(x =>\
    \ x == min ? minIndex : -1).ToList();", "        long min = arr.First(x => x %\
    \ 2 == 0);\n        long minIndex = arr.IndexOf(min);\n        return new List<long>\
    \ { min, minIndex };", "        long min = arr.First(x => x % 2 == 0);\n     \
    \   long minIndex = arr.IndexOf(min);\n        if (minIndex == -1)\n         \
    \   return new List<long>();\n        return arr.RemoveAt(minIndex);", "     \
    \   if (arr.Count == 0)\n            return arr;\n        long min = arr[0];\n\
    \        int index = 0;\n        for (int i = 1; i < arr.Count; i++) {\n     \
    \       if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        return new List<long>(new\
    \ long[]{min, index});", "        long min = arr.First(x => x % 2 == 0);\n   \
    \     long minIndex = arr.IndexOf(min);\n        return arr.Select(x => x == min\
    \ ? minIndex : -1).ToList();", "        long min = arr.First(x => x % 2 == 0);\n\
    \        long minIndex = arr.IndexOf(min);\n        if (minIndex == -1)\n    \
    \        return new List<long>();\n        return new List<long>(new long[]{min,\
    \ minIndex});", "        long min = arr.First(x => x % 2 == 0);\n        long\
    \ minIndex = arr.IndexOf(min);\n        if (minIndex == -1)\n            return\
    \ new List<long>();\n        return new List<long>(new long[]{min, minIndex});",
  "        if (arr == null || arr.Count == 0)\n            return new List<long>();\n\
    \        long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        List<long> result = new List<long>();\n        result.Add(min);\n   \
    \     result.Add(minIndex);\n        return result;", "        if (arr == null\
    \ || arr.Count == 0)\n            return new List<long>();\n        long min =\
    \ arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 &&\
    \ arr[i] < min) {\n                min = arr[i];\n                minIndex = i;\n\
    \            }\n        }\n        return new List<long>(new long[] { min, minIndex\
    \ });", "        long min = arr.First(x => x % 2 == 0);\n        long minIndex\
    \ = arr.IndexOf(min);\n        for (int i = 0; i < arr.Count; i++) {\n       \
    \     if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        return new List<long>(new\
    \ long[]{min, minIndex});", "        long minEven = Long.MAX_VALUE;\n        long\
    \ minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minEven\
    \ == Long.MAX_VALUE) {\n            return new List<long>();\n        }\n    \
    \    return new List<long>(new long[]{minEven, minIndex});", "        long min\
    \ = arr.First(x => x % 2 == 0);\n        if (min == 0) {\n            return arr.OrderBy(x\
    \ => x);\n        }\n        else {\n            return arr.OrderBy(x => x).First(x\
    \ => x == min);\n        }", "        long minEven = Long.MAX_VALUE;\n       \
    \ long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n       \
    \     if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>(new long[]{minEven, minIndex});", "        if (arr == null || arr.Count\
    \ == 0) return new List<long>();\n        long min = arr.First(x => x % 2 == 0);\n\
    \        long minIndex = arr.IndexOf(min);\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     return new List<long>(new long[]{min, minIndex});", "        long minEven\
    \ = Long.MAX_VALUE;\n        long minIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < minEven) {\n           \
    \     minEven = arr[i];\n                minIndex = i;\n            }\n      \
    \  }\n        if (minEven == Long.MAX_VALUE) {\n            return new List<long>();\n\
    \        }\n        else {\n            return new List<long>(new long[]{minEven,\
    \ minIndex});\n        }", "        if (arr.Count == 0)\n            return arr;\n\
    \        long min = arr[0];\n        long min_index = 0;\n        for (int i =\
    \ 1; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \                min = arr[i];\n                min_index = i;\n            }\n\
    \        }\n        return new List<long>(new long[]{min, min_index});", "   \
    \     long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        return new List<long>(new long[]{min, minIndex});", "        if (arr\
    \ == null) return new List<long>();\n        if (arr.Count == 0) return new List<long>();\n\
    \        long min = arr.First(x => x % 2 == 0);\n        int index = arr.IndexOf(min);\n\
    \        if (index == -1) return new List<long>();\n        return new List<long>(new\
    \ long[]{min, index});", "        long min = arr.First(x => x % 2 == 0);\n   \
    \     long minIndex = arr.IndexOf(min);\n        if (minIndex == -1)\n       \
    \     return new List<long>();\n        return arr.Select(x => x == min ? minIndex\
    \ : -1).ToList();", "        if (arr.Count == 0)\n            return arr;\n  \
    \      long min = arr[0];\n        int index = 0;\n        for (int i = 1; i <\
    \ arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n    \
    \            min = arr[i];\n                index = i;\n            }\n      \
    \  }\n        if (min % 2 == 0) {\n            return new List<long>(new long[]{min,\
    \ index});\n        }\n        else {\n            return new List<long>();\n\
    \        }", "        long minEven = Long.MAX_VALUE;\n        long minIndex =\
    \ -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %\
    \ 2 == 0) {\n                if (arr[i] < minEven) {\n                    minEven\
    \ = arr[i];\n                    minIndex = i;\n                }\n          \
    \  }\n        }\n        if (minIndex == -1) {\n            return new List<long>();\n\
    \        }\n        else {\n            return new List<long>(new long[]{minEven,\
    \ minIndex});\n        }", "        if (arr.Count == 0)\n            return arr;\n\
    \        long min = arr.First(x => x % 2 == 0);\n        int index = arr.IndexOf(min);\n\
    \        return new List<long>(new long[]{min, index});", "        long min =\
    \ 0;\n        long minIndex = 0;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                if (min == 0) {\n   \
    \                 min = arr[i];\n                    minIndex = i;\n         \
    \       }\n                else if (arr[i] < min) {\n                    min =\
    \ arr[i];\n                    minIndex = i;\n                }\n            }\n\
    \        }\n        if (min == 0) {\n            return new List<long>();\n  \
    \      }\n        else {\n            return new List<long>(new long[]{min, minIndex});\n\
    \        }", "        long min = arr.First(x => x % 2 == 0);\n        if (min\
    \ == 0)\n            return arr.Select(x => x % 2 == 0).OrderBy(x => x).ToList();\n\
    \        else\n            return arr.OrderBy(x => x).ToList();", "        long\
    \ min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        if (minIndex == -1) return new List<long>();\n        return arr.RemoveAt(minIndex);",
  "        if (arr.Count == 0)\n            return arr;\n        long min = arr.First(x\
    \ => x % 2 == 0).Value;\n        long minIndex = arr.First(x => x % 2 == 0).Index;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex\
    \ = i;\n            }\n        }\n        return new List<long>(new long[]{min,\
    \ minIndex});", "        long min = arr.First(x => x % 2 == 0);\n        long\
    \ minIndex = arr.IndexOf(min);\n        if (minIndex == -1)\n            return\
    \ new List<long>();\n        return new List<long>(new long[]{min, minIndex});",
  "        long min = arr.First(x => x % 2 == 0);\n        long minIndex = arr.IndexOf(min);\n\
    \        return new List<long>(new long[]{min, minIndex});", "        if (arr\
    \ == null || arr.Count == 0)\n            return new List<long>();\n        long\
    \ min = arr.First(x => x % 2 == 0);\n        int index = arr.FirstIndexOf(x =>\
    \ x == min);\n        return new List<long>(new long[]{min, index});", "     \
    \   long min = 0;\n        long minIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == 0) {\n            return arr;\n        }\n        List<long>\
    \ result = new List<long>();\n        result.Add(min);\n        result.Add(minIndex);\n\
    \        return result;", "        long min = arr.First(x => x % 2 == 0);\n  \
    \      long minIndex = arr.IndexOf(min);\n        if (minIndex == -1)\n      \
    \      return new List<long>();\n        else\n            return new List<long>(new\
    \ long[]{min, minIndex});", "        if (arr.Count == 0)\n            return arr;\n\
    \        long min = arr.First();\n        int index = 0;\n        for (int i =\
    \ 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min\
    \ = arr[i];\n                index = i;\n            }\n        }\n        return\
    \ new List<long>(new long[] { min, index });", "        if (arr.Count == 0)\n\
    \            return arr;\n        long min = arr[0];\n        int index = 0;\n\
    \        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n                min = arr[i];\n                index =\
    \ i;\n            }\n        }\n        return new List<long>(new long[]{min,\
    \ index});", "        long minEven = Long.MAX_VALUE;\n        long minIndex =\
    \ -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %\
    \ 2 == 0 && arr[i] < minEven) {\n                minEven = arr[i];\n         \
    \       minIndex = i;\n            }\n        }\n        if (minIndex == -1)\n\
    \            return new List<long>();\n        return new List<long>(new long[]{minEven,\
    \ minIndex});", "        if (arr == null || arr.Count == 0)\n            return\
    \ new List<long>();\n        long min = arr.First(x => x % 2 == 0);\n        long\
    \ minIndex = arr.IndexOf(min);\n        for (int i = minIndex + 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     return new List<long>(new long[]{min, minIndex});", "        if (arr.Count\
    \ == 0) {\n            return arr;\n        }\n        long min = arr[0];\n  \
    \      int index = 0;\n        for (int i = 1; i < arr.Count; i++) {\n       \
    \     if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        return new List<long>(new\
    \ long[]{min, index});"]
stop_tokens:
- "\n    }\n"
