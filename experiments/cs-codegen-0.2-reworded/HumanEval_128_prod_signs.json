{
  "name": "HumanEval_128_prod_signs",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a list arr of integers and you need to return\n    // sum of magnitudes of integers multiplied by product of all signs\n    // of each number in the list, represented by 1, -1 or 0.\n    // Note: return null for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long> arr) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L, (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n    }\n\n}\n",
  "completions": [
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i == 0) {\n                return null;\n            }\n            prod *= i;\n            if (i < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return sign * prod;",
    "        if (arr == null) return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) return null;\n            prod *= num;\n            if (num < 0) sign = -sign;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0) {\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0)\n                prod *= num;\n            else if (num < 0)\n                prod *= -num;\n            else\n                prod *= num;\n            if (num > 0)\n                sign *= 1;\n            else if (num < 0)\n                sign *= -1;\n            else\n                sign *= 1;\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i < 0)\n                sign = -sign;\n            prod *= i;\n        }\n        return new Nullable<long>(sign * prod);",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        if (prod == 0)\n            return null;\n        return sign * prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i > 0) {\n                prod *= i;\n                sign *= 1;\n            }\n            else if (i < 0) {\n                prod *= i;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i > 0) {\n                prod *= i;\n                sign *= 1;\n            }\n            else if (i < 0) {\n                prod *= i;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i == 0)\n                return null;\n            prod *= i;\n            if (i < 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            prod *= (i < 0 ? -1 : 1);\n            sign *= (i < 0 ? -1 : 1);\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0)\n                return null;\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i > 0) {\n                prod *= i;\n                sign *= 1;\n            }\n            else if (i < 0) {\n                prod *= i;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        for (long i : arr) {\n            prod *= (i < 0 ? -1 : 1);\n        }\n        return prod;",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            prod *= i;\n            if (i < 0) sign = -sign;\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0)\n                sign *= -1;\n        }\n        return new Nullable<long>(prod * sign);",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            prod *= i;\n            if (i < 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0)\n                return null;\n            prod *= num;\n            if (num > 0)\n                sign = 1;\n            else\n                sign = -1;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long x : arr) {\n            if (x > 0) {\n                prod *= x;\n            }\n            else if (x < 0) {\n                prod *= -x;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i == 0) {\n                return null;\n            }\n            prod *= i;\n            if (i < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            prod *= (i < 0 ? -1 : 1);\n            sign *= (i < 0 ? -1 : 1);\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return sign * prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i > 0) {\n                prod *= i;\n                sign *= 1;\n            }\n            else if (i < 0) {\n                prod *= i;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        if (arr == null || arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num < 0) {\n                prod *= -1;\n                sign *= -1;\n            }\n            prod *= Math.Abs(num);\n            sign *= num;\n        }\n        return new Nullable<long>(prod * sign);",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= sign * num;\n            sign *= num < 0 ? -1 : 1;\n        }\n        return prod;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            prod *= i;\n            if (i < 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i < 0) {\n                sign = -sign;\n            }\n            prod *= sign;\n        }\n        return prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return sign * prod;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0) sign = -sign;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0)\n                return null;\n            prod *= num;\n            if (num > 0)\n                sign = 1;\n            else if (num < 0)\n                sign = -1;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i > 0) {\n                prod *= i;\n                sign *= 1;\n            }\n            else if (i < 0) {\n                prod *= i;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i == 0)\n                return null;\n            prod *= i;\n            if (i < 0)\n                sign = -sign;\n        }\n        return sign * prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i < 0) {\n                prod *= -1;\n                sign *= -1;\n            }\n            prod *= i;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i > 0) {\n                prod *= i;\n                sign *= 1;\n            }\n            else if (i < 0) {\n                prod *= i;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i > 0) {\n                prod *= i;\n                sign *= 1;\n            }\n            else if (i < 0) {\n                prod *= i;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        for (long num : arr) {\n            prod *= (num > 0 ? 1 : -1);\n        }\n        return prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return sign * prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            prod *= i;\n            if (i < 0)\n                sign = -sign;\n        }\n        return new Nullable<long>(prod * sign);",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num > 0)\n                sign = 1;\n            else if (num < 0)\n                sign = -1;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num > 0) {\n                sign = 1;\n            }\n            else if (num < 0) {\n                sign = -1;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            prod *= (i < 0 ? -1 : 1);\n            sign *= (i < 0 ? -1 : 1);\n        }\n        return new Nullable<long>(prod * sign);",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        if (prod == 0)\n            return null;\n        return sign * prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return sign * prod;",
    "        if (arr == null)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            prod *= (i > 0 ? 1 : -1);\n            sign *= (i > 0 ? 1 : -1);\n        }\n        return new Nullable<long>(prod * sign);",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i > 0)\n                prod *= i;\n            else if (i < 0)\n                prod *= -i;\n            else\n                prod *= i;\n            if (i > 0)\n                sign *= 1;\n            else if (i < 0)\n                sign *= -1;\n            else\n                sign *= 1;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i == 0)\n                return null;\n            prod *= i;\n            if (i < 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return new Nullable<long>(prod * sign);",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i == 0)\n                return null;\n            if (i > 0)\n                prod *= i;\n            else\n                prod *= -i;\n            if (i > 0)\n                sign *= 1;\n            else\n                sign *= -1;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i < 0) {\n                sign = -sign;\n            }\n            prod *= sign;\n        }\n        return prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i > 0) {\n                prod *= i;\n                sign *= 1;\n            }\n            else if (i < 0) {\n                prod *= i;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0)\n                sign *= -1;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i == 0) {\n                return null;\n            }\n            prod *= i;\n            if (i < 0) {\n                sign = -sign;\n            }\n        }\n        return sign * prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0)\n                return null;\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return sign * prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i < 0) {\n                sign = -sign;\n            }\n            prod *= sign;\n        }\n        return prod;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        for (long i : arr) {\n            prod *= (i < 0 ? -1 : 1);\n        }\n        return prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i < 0) {\n                prod *= -1;\n                sign *= -1;\n            }\n            prod *= i;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            prod *= (i < 0 ? -1 : 1);\n            sign *= (i < 0 ? -1 : 1);\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return new Nullable<long>(prod * sign);",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0) sign = -sign;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num < 0) {\n                sign = -sign;\n            }\n            prod *= sign;\n        }\n        return prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i == 0) {\n                return null;\n            }\n            prod *= i;\n            if (i < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num < 0) {\n                sign = -sign;\n            }\n            prod *= sign;\n        }\n        return prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i == 0) {\n                return null;\n            }\n            prod *= i;\n            if (i < 0) {\n                sign = -sign;\n            }\n        }\n        return sign * prod;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            prod *= i;\n            if (i < 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i > 0) {\n                prod *= i;\n                sign *= 1;\n            }\n            else if (i < 0) {\n                prod *= i;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            prod *= (i < 0 ? -1 : 1);\n            sign *= (i < 0 ? -1 : 1);\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num < 0) {\n                prod *= -1;\n            }\n            else if (num > 0) {\n                prod *= num;\n            }\n            else if (num == 0) {\n                prod = 0;\n                break;\n            }\n            sign *= num;\n        }\n        return prod * sign;",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0)\n                return null;\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return new Nullable<long>(prod * sign);",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0)\n                prod *= num;\n            else if (num < 0)\n                prod *= -num;\n            else\n                prod *= 0;\n            if (num > 0)\n                sign *= 1;\n            else if (num < 0)\n                sign *= -1;\n            else\n                sign *= 0;\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num > 0)\n                sign = 1;\n            else if (num < 0)\n                sign = -1;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            prod *= (i > 0 ? 1 : -1);\n            sign *= (i > 0 ? 1 : -1);\n        }\n        return new Nullable<long>(prod * sign);",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return sign * prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        if (prod == 0)\n            return null;\n        return sign * prod;",
    "        if (arr == null)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0)\n                continue;\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return new Nullable<long>(prod * sign);",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return sign * prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i == 0)\n                return null;\n            prod *= i;\n            if (i < 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            prod *= i;\n            if (i < 0) sign = -sign;\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i < 0) {\n                sign = -sign;\n            }\n            prod *= sign;\n        }\n        return prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i > 0) {\n                prod *= i;\n                sign *= 1;\n            }\n            else if (i < 0) {\n                prod *= i;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= (num > 0 ? 1 : -1);\n            sign *= (num > 0 ? 1 : -1);\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= (num > 0 ? 1 : -1);\n            sign *= (num > 0 ? 1 : -1);\n        }\n        return new Nullable<long>(prod * sign);",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0)\n                return null;\n            if (num > 0)\n                prod *= num;\n            else\n                prod *= -num;\n            if (num > 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            prod *= (i > 0 ? 1 : -1);\n            sign *= (i > 0 ? 1 : -1);\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= (num > 0 ? 1 : -1);\n            sign *= (num > 0 ? 1 : -1);\n        }\n        return new Nullable<long>(prod * sign);",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i > 0) {\n                prod *= i;\n                sign *= 1;\n            }\n            else if (i < 0) {\n                prod *= i;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i > 0)\n                prod *= i;\n            else if (i < 0)\n                prod *= -i;\n            else\n                prod *= i;\n            if (i > 0)\n                sign *= i;\n            else if (i < 0)\n                sign *= -i;\n            else\n                sign *= i;\n        }\n        return prod * sign;",
    "        if (arr == null || arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0)\n                prod *= num;\n            else if (num < 0)\n                prod *= -num;\n            else\n                prod *= num;\n            if (num > 0)\n                sign *= 1;\n            else if (num < 0)\n                sign *= -1;\n            else\n                sign *= 1;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= -num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= (num < 0 ? -1 : 1);\n            sign *= (num < 0 ? -1 : 1);\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i < 0) {\n                sign = -sign;\n            }\n            prod *= sign;\n        }\n        return prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i < 0) {\n                prod *= -1;\n                sign *= -1;\n            }\n            prod *= i;\n            sign *= i;\n        }\n        return prod * sign;",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            prod *= i;\n            if (i < 0) sign = -sign;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= -num;\n                sign *= -1;\n            }\n        }\n        if (prod == 0) return null;\n        return sign * prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return sign * prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i > 0) {\n                prod *= i;\n                sign *= 1;\n            }\n            else if (i < 0) {\n                prod *= i;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        if (prod == 0)\n            return Nullable.Empty;\n        return new Nullable<long>(sign * prod);",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i == 0) {\n                return null;\n            }\n            prod *= i;\n            if (i < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i < 0) {\n                prod *= -1;\n                sign *= -1;\n            }\n            prod *= i;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0)\n                prod *= num;\n            else if (num < 0)\n                prod *= -num;\n            else\n                prod *= num;\n            if (num > 0)\n                sign *= 1;\n            else if (num < 0)\n                sign *= -1;\n            else\n                sign *= 1;\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return Nullable.Empty;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return Nullable.of(prod * sign);",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i < 0) {\n                prod *= -1;\n                sign *= -1;\n            }\n            prod *= i;\n            sign *= i;\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num < 0)\n                sign = -sign;\n            prod *= sign;\n        }\n        return prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i > 0) {\n                prod *= i;\n                sign *= 1;\n            }\n            else if (i < 0) {\n                prod *= i;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return new Nullable<long>(prod * sign);",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return new Nullable<long>(prod * sign);",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i < 0) {\n                prod *= -1;\n                sign *= -1;\n            }\n            prod *= i;\n        }\n        return new Nullable<long>(prod * sign);",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0) sign = -sign;\n        }\n        return prod * sign;",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            prod *= (i < 0 ? -1 : 1);\n            sign *= (i < 0 ? -1 : 1);\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= (num < 0 ? -1 : 1);\n            sign *= (num < 0 ? -1 : 1);\n        }\n        return prod * sign;",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= (num > 0 ? 1 : -1);\n            sign *= (num > 0 ? 1 : -1);\n        }\n        return new Nullable<long>(prod * sign);",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num > 0)\n                sign *= 1;\n            else if (num < 0)\n                sign *= -1;\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num < 0)\n                sign = -sign;\n            prod *= sign;\n        }\n        return prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            prod *= i;\n            if (i < 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0)\n                sign = -sign;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num == 0) {\n                return null;\n            }\n            prod *= num;\n            if (num < 0) {\n                sign = -sign;\n            }\n        }\n        return sign * prod;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= -num;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num < 0) {\n                prod *= -1;\n                sign *= -1;\n            }\n            prod *= num;\n            if (num > 0)\n                sign *= num;\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= (num > 0 ? 1 : -1);\n            sign *= (num > 0 ? 1 : -1);\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i > 0) {\n                prod *= i;\n                sign *= 1;\n            }\n            else if (i < 0) {\n                prod *= i;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            if (num < 0)\n                sign = -sign;\n            prod *= sign;\n        }\n        return prod;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            prod *= (i < 0 ? -1 : 1);\n            sign *= (i < 0 ? -1 : 1);\n        }\n        return prod * sign;",
    "        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i > 0) {\n                prod *= i;\n                sign *= 1;\n            }\n            else if (i < 0) {\n                prod *= i;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long num : arr) {\n            prod *= num;\n            if (num < 0)\n                sign *= -1;\n        }\n        return new Nullable<long>(prod * sign);",
    "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            prod *= i;\n            if (i < 0)\n                sign = -sign;\n        }\n        return new Nullable<long>(prod * sign);",
    "        if (arr == null) return null;\n        if (arr.Count == 0) return 0L;\n        long sign = 1;\n        long prod = 1;\n        for (long num : arr) {\n            if (num > 0) {\n                prod *= num;\n                sign *= 1;\n            }\n            else if (num < 0) {\n                prod *= num;\n                sign *= -1;\n            }\n        }\n        return sign * prod;",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            if (i > 0) {\n                prod *= i;\n                sign *= 1;\n            }\n            else if (i < 0) {\n                prod *= i;\n                sign *= -1;\n            }\n        }\n        return prod * sign;",
    "        if (arr.Count == 0) return null;\n        long prod = 1;\n        long sign = 1;\n        for (long i : arr) {\n            prod *= i;\n            if (i < 0) sign = -sign;\n        }\n        return new Nullable<long>(prod * sign);"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}